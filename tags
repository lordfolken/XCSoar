!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
A	src/Device/Driver/Volkslogger/vlconv.cpp	/^  char A[10], DTE[10], FXA[10], PLT[80], GTY[50], GID[50], RFW[10], RHW[10],$/;"	m	struct:IGCHEADER	file:
A	src/XML/Node.hpp	/^  XMLNode &operator=(const XMLNode& A) = delete;$/;"	m	class:XMLNode
A	src/XML/Node.hpp	/^  XMLNode(const XMLNode &A) = delete;$/;"	m	class:XMLNode
A1	src/Device/Driver/IMI/Protocol/Types.hpp	/^    IMIDWORD A1:11;$/;"	m	struct:IMI::TObservationZone
A12	src/Device/Driver/IMI/Protocol/Types.hpp	/^    IMIDWORD A12:12;$/;"	m	struct:IMI::TObservationZone
A2	src/Device/Driver/IMI/Protocol/Types.hpp	/^    IMIDWORD A2:11;$/;"	m	struct:IMI::TObservationZone
AAT	src/Engine/Task/Factory/TaskFactoryType.hpp	/^  AAT,$/;"	m	class:TaskFactoryType
AAT	src/Engine/Task/Points/Type.hpp	/^  AAT,$/;"	m	class:TaskPointType
AATASK	src/Engine/Airspace/AirspaceClass.hpp	/^  AATASK,$/;"	e	enum:uint8_t
AATISOLINESEGMENT_HPP	src/Engine/Task/Ordered/AATIsolineSegment.hpp	24;"	d
AATISOLINE_HPP	src/Engine/Task/Ordered/AATIsoline.hpp	24;"	d
AATIsoline	src/Engine/Task/Ordered/AATIsoline.hpp	/^class AATIsoline$/;"	c
AATIsoline	src/Engine/Task/Ordered/AATIsolineSegment.cpp	/^  :AATIsoline(ap, projection)$/;"	f
AATIsolineSegment	src/Engine/Task/Ordered/AATIsolineSegment.hpp	/^class AATIsolineSegment: public AATIsoline$/;"	c
AATMinTime	src/Dialogs/Settings/Panels/TaskDefaultsConfigPanel.cpp	/^  AATMinTime,$/;"	e	enum:ControlIndex	file:
AATMinTime	src/Profile/ProfileKeys.cpp	/^const char AATMinTime[] = "AATMinTime";$/;"	m	namespace:ProfileKeys	file:
AATPOINT_HPP	src/Engine/Task/Ordered/Points/AATPoint.hpp	25;"	d
AATPoint	src/Engine/Task/Ordered/Points/AATPoint.hpp	/^  AATPoint(std::unique_ptr<ObservationZonePoint> &&_oz,$/;"	f	class:final
AATTaskFactory	src/Engine/Task/Factory/AATTaskFactory.cpp	/^AATTaskFactory::AATTaskFactory(OrderedTask& _task, const TaskBehaviour &tb)$/;"	f	class:AATTaskFactory
AATTimeMargin	src/Dialogs/Settings/Panels/TaskDefaultsConfigPanel.cpp	/^  AATTimeMargin$/;"	e	enum:ControlIndex	file:
AATTimeMargin	src/Profile/ProfileKeys.cpp	/^const char AATTimeMargin[] = "AATTimeMargin";$/;"	m	namespace:ProfileKeys	file:
AAT_ANNULAR_SECTOR	src/Engine/Task/Factory/TaskPointFactoryType.hpp	/^  AAT_ANNULAR_SECTOR,$/;"	m	class:TaskPointFactoryType
AAT_CYLINDER	src/Engine/Task/Factory/TaskPointFactoryType.hpp	/^  AAT_CYLINDER,$/;"	m	class:TaskPointFactoryType
AAT_KEYHOLE	src/Engine/Task/Factory/TaskPointFactoryType.hpp	/^  AAT_KEYHOLE,$/;"	m	class:TaskPointFactoryType
AAT_SEGMENT	src/Engine/Task/Factory/TaskPointFactoryType.hpp	/^  AAT_SEGMENT,$/;"	m	class:TaskPointFactoryType
AAT_TASK_FACTORY_HPP	src/Engine/Task/Factory/AATTaskFactory.hpp	25;"	d
ABORT	src/Engine/Task/TaskType.hpp	/^  ABORT,$/;"	m	class:TaskType
ABORTTASK_H	src/Engine/Task/Unordered/AbortTask.hpp	24;"	d
ABOVE	src/Renderer/TextInBox.hpp	/^    ABOVE,$/;"	e	enum:uint8_t
ABSTRACTAIRSPACE_HPP	src/Engine/Airspace/AbstractAirspace.hpp	23;"	d
ABSTRACTTASK_H	src/Engine/Task/AbstractTask.hpp	24;"	d
ABSTRACT_CONTEST_HPP	src/Engine/Contest/Solvers/AbstractContest.hpp	24;"	d
ABSTRACT_REPLAY_HPP	src/Replay/AbstractReplay.hpp	25;"	d
ABSTRACT_TASK_FACTORY_HPP	src/Engine/Task/Factory/AbstractTaskFactory.hpp	25;"	d
ACCELERATED_UPDATE_TIME	src/Logger/LoggerFRecord.cpp	/^constexpr std::chrono::steady_clock::duration LoggerFRecord::ACCELERATED_UPDATE_TIME;$/;"	m	class:LoggerFRecord	file:
ACCELERATED_UPDATE_TIME	src/Logger/LoggerFRecord.hpp	/^  static constexpr std::chrono::steady_clock::duration ACCELERATED_UPDATE_TIME = std::chrono::seconds(30);$/;"	m	class:LoggerFRecord
ACDDevice	src/Device/Driver/AirControlDisplay.cpp	/^  ACDDevice(Port &_port):port(_port) {}$/;"	f	class:ACDDevice
ACDDevice	src/Device/Driver/AirControlDisplay.cpp	/^class ACDDevice : public AbstractDevice {$/;"	c	file:
ACK	src/Device/Driver/KRT2.cpp	/^  static constexpr char ACK = 0x06; \/\/!< Command acknowledged character.$/;"	m	class:final	file:
ACK	src/Device/Driver/LX/Protocol.hpp	/^    ACK = 0x06,$/;"	e	enum:LX::Command
ACK	src/Device/Driver/Volkslogger/Protocol.hpp	/^    ACK = 0x06,$/;"	e	enum:Volkslogger::__anon164
ACK	src/Tracking/SkyLines/Protocol.hpp	/^  ACK = 2,$/;"	e	enum:SkyLinesTracking::Type
ACKNOWLEDGE	src/Dialogs/Device/Vega/SwitchesDialog.cpp	/^    ACKNOWLEDGE,$/;"	e	enum:SwitchesLeft::Controls	file:
ACKPacket	src/Tracking/SkyLines/Protocol.hpp	/^struct ACKPacket {$/;"	s	namespace:SkyLinesTracking
ACTIVE	src/Renderer/TaskPointRenderer.hpp	/^    ACTIVE,$/;"	e	enum:TaskPointRenderer::TargetVisibility
ADD	src/Dialogs/Weather/NOAAList.cpp	/^    ADD,$/;"	e	enum:final::Buttons	file:
ADDITIONAL	src/Engine/Waypoint/Origin.hpp	/^  ADDITIONAL,$/;"	m	class:WaypointOrigin
AFTER_ACTIVE	src/Engine/Task/Ordered/Points/OrderedTaskPoint.hpp	/^    AFTER_ACTIVE$/;"	e	enum:OrderedTaskPoint::ActiveState
AFlatGeoPoint	src/Geo/Flat/FlatGeoPoint.hpp	/^  AFlatGeoPoint():FlatGeoPoint(0,0),altitude(0) {};$/;"	f	struct:AFlatGeoPoint
AFlatGeoPoint	src/Geo/Flat/FlatGeoPoint.hpp	/^  AFlatGeoPoint(const FlatGeoPoint p, const int alt)$/;"	f	struct:AFlatGeoPoint
AFlatGeoPoint	src/Geo/Flat/FlatGeoPoint.hpp	/^  AFlatGeoPoint(const int x, const int y, const int alt):$/;"	f	struct:AFlatGeoPoint
AFlatGeoPoint	src/Geo/Flat/FlatGeoPoint.hpp	/^struct AFlatGeoPoint : public FlatGeoPoint {$/;"	s
AGL	src/Geo/AltitudeReference.hpp	/^  AGL = 0,$/;"	m	class:AltitudeReference
AGeoPoint	src/Geo/GeoPoint.hpp	/^  AGeoPoint(const GeoPoint p, const double alt)$/;"	f	struct:AGeoPoint
AGeoPoint	src/Geo/GeoPoint.hpp	/^struct AGeoPoint: public GeoPoint {$/;"	s
AIRBRAKE_STATE	src/Dialogs/Device/Vega/SwitchesDialog.cpp	/^    AIRBRAKE_STATE,$/;"	e	enum:SwitchesLeft::Controls	file:
AIRCRAFT_HPP	src/Engine/Navigation/Aircraft.hpp	23;"	d
AIRCRAFT_LOOK_HPP	src/Look/AircraftLook.hpp	25;"	d
AIRCRAFT_SIM_HPP	src/Replay/AircraftSim.hpp	23;"	d
AIRCRAFT_STATE_FILTER_HPP	src/Engine/Util/AircraftStateFilter.hpp	24;"	d
AIRCRAFT_SYMBOL	src/Dialogs/Settings/Panels/SymbolsConfigPanel.cpp	/^  AIRCRAFT_SYMBOL,$/;"	e	enum:ControlIndex	file:
AIRFIELD	src/Engine/Waypoint/Waypoint.hpp	/^    AIRFIELD,$/;"	m	class:Waypoint::Type
AIRPORT	src/Dialogs/Traffic/FlarmTrafficDetails.cpp	/^    AIRPORT,$/;"	e	enum:final::Controls	file:
AIRPORT	src/Waypoint/WaypointFilter.hpp	/^  AIRPORT,$/;"	m	class:TypeFilter
AIRSHIP	src/FLARM/Traffic.hpp	/^    AIRSHIP = 12,         \/\/!< airship$/;"	m	class:FlarmTraffic::AircraftType
AIRSPACE	src/Dialogs/dlgAnalysis.hpp	/^  AIRSPACE,$/;"	m	class:AnalysisPage
AIRSPACE	src/Engine/Route/Config.hpp	/^    AIRSPACE,$/;"	m	class:RoutePlannerConfig::Mode
AIRSPACE	src/MapWindow/Items/MapItem.hpp	/^    AIRSPACE,$/;"	e	enum:TaskPointType::Type
AIRSPACE	src/Repository/FileType.hpp	/^  AIRSPACE,$/;"	m	class:FileType
AIRSPACECIRCLE_HPP	src/Engine/Airspace/AirspaceCircle.hpp	24;"	d
AIRSPACECLASSCOUNT	src/Engine/Airspace/AirspaceClass.hpp	/^  AIRSPACECLASSCOUNT$/;"	e	enum:uint8_t
AIRSPACECLASSCOUNT	src/Formatter/AirspaceFormatter.cpp	/^              (size_t)AirspaceClass::AIRSPACECLASSCOUNT,$/;"	m	class:AirspaceClass	file:
AIRSPACECONFIGPANEL_HPP	src/Dialogs/Settings/Panels/AirspaceConfigPanel.hpp	25;"	d
AIRSPACEPOLYGON_HPP	src/Engine/Airspace/AirspacePolygon.hpp	24;"	d
AIRSPACESINTERFACE_HPP	src/Engine/Airspace/AirspacesInterface.hpp	23;"	d
AIRSPACE_ACTIVITY_HPP	src/Engine/Airspace/AirspaceActivity.hpp	24;"	d
AIRSPACE_AIRCRAFT_PERFORMANCE_HPP	src/Engine/Airspace/AirspaceAircraftPerformance.hpp	24;"	d
AIRSPACE_ALTITUDE_HPP	src/Engine/Airspace/AirspaceAltitude.hpp	24;"	d
AIRSPACE_CLASS_HPP	src/Engine/Airspace/AirspaceClass.hpp	24;"	d
AIRSPACE_CROSS_SECTION_RENDERER_HPP	src/CrossSection/AirspaceXSRenderer.hpp	25;"	d
AIRSPACE_HPP	src/Engine/Airspace/Airspace.hpp	23;"	d
AIRSPACE_INTERCEPT_SOLUTION_HPP	src/Engine/Airspace/AirspaceInterceptSolution.hpp	24;"	d
AIRSPACE_INTERSECTION_VECTOR_HPP	src/Engine/Airspace/AirspaceIntersectionVector.hpp	24;"	d
AIRSPACE_INTERSECTION_VISITOR_HPP	src/Engine/Airspace/AirspaceIntersectionVisitor.hpp	24;"	d
AIRSPACE_INTERSECT_SORT_HPP	src/Engine/Airspace/AirspaceIntersectSort.hpp	24;"	d
AIRSPACE_MINIMUM_HPP	src/Engine/Airspace/Minimum.hpp	25;"	d
AIRSPACE_PREDICATE_HEIGHT_RANGE_HPP	src/Engine/Airspace/Predicate/AirspacePredicateHeightRange.hpp	24;"	d
AIRSPACE_PREDICATE_HPP	src/Engine/Airspace/Predicate/AirspacePredicate.hpp	24;"	d
AIRSPACE_SORTER_HPP	src/Engine/Airspace/AirspaceSorter.hpp	2;"	d
AIRSPACE_VISIBILITY_HPP	src/Airspace/AirspaceVisibility.hpp	2;"	d
AIRSPACE_VISITOR_HPP	src/Engine/Airspace/AirspaceVisitor.hpp	23;"	d
AIRSPACE_WARNING_CONFIG_HPP	src/Engine/Airspace/AirspaceWarningConfig.hpp	24;"	d
AIRSPACE_WARNING_HPP	src/Engine/Airspace/AirspaceWarning.hpp	24;"	d
AIRSPACE_WARNING_MANAGER_HPP	src/Engine/Airspace/AirspaceWarningManager.hpp	23;"	d
AIRSPEED	src/Dialogs/Device/Vega/VegaDemoDialog.cpp	/^    AIRSPEED,$/;"	e	enum:final::Controls	file:
AIR_REFRACTION	src/Math/SunEphemeris.cpp	/^static constexpr double AIR_REFRACTION = 34.0 \/ 60.0;$/;"	v	file:
AIV	src/Engine/Route/AirspaceRoute.cpp	/^  AIV(const RouteLink &_e,$/;"	f	class:final
AIVResult	src/Engine/Route/AirspaceRoute.cpp	/^  typedef std::pair<const AbstractAirspace *, RoutePoint> AIVResult;$/;"	t	class:final	file:
ALGORITHM_HPP	src/util/Algorithm.hpp	31;"	d
ALL	src/Renderer/AirspaceRendererSettings.hpp	/^    ALL,$/;"	m	class:AirspaceClassRendererSettings::FillMode
ALL	src/Renderer/AirspaceRendererSettings.hpp	/^    ALL,$/;"	m	class:AirspaceRendererSettings::FillMode
ALL	src/Renderer/AirspaceRendererSettings.hpp	/^    ALL,$/;"	m	class:AirspaceRendererSettings::LabelSelection
ALL	src/Renderer/TaskPointRenderer.hpp	/^    ALL,$/;"	e	enum:TaskPointRenderer::TargetVisibility
ALL	src/Renderer/WaypointRendererSettings.hpp	/^    ALL,$/;"	m	class:WaypointRendererSettings::LabelSelection
ALL	src/Waypoint/WaypointFilter.hpp	/^  ALL = 0,$/;"	m	class:TypeFilter
ALLBELOW	src/Renderer/AirspaceRendererSettings.hpp	/^  ALLBELOW,$/;"	m	class:AirspaceDisplayMode
ALLOCATED_ARRAY_HXX	src/util/AllocatedArray.hxx	31;"	d
ALLOCATED_GRID_HXX	src/util/AllocatedGrid.hxx	31;"	d
ALLOCATED_SOCKET_ADDRESS_HXX	src/net/AllocatedSocketAddress.hxx	31;"	d
ALLOCATED_STRING_HXX	src/util/AllocatedString.hxx	31;"	d
ALLON	src/Renderer/AirspaceRendererSettings.hpp	/^  ALLON = 0,$/;"	m	class:AirspaceDisplayMode
ALPHA	src/Terrain/jasper/jpc/jpc_qmfb.c	1324;"	d	file:
ALPHA_OVERLAY	src/Look/Colors.hpp	/^static constexpr uint8_t ALPHA_OVERLAY = 0xA0;$/;"	v
ALSAEnv	src/Audio/ALSAEnv.cpp	/^namespace ALSAEnv$/;"	n	file:
ALSAEnv	src/Audio/ALSAEnv.hpp	/^namespace ALSAEnv$/;"	n
ALSAPCMPlayer	src/Audio/ALSAPCMPlayer.hpp	/^class ALSAPCMPlayer : public PCMPlayer {$/;"	c
ALSA_DEVICE_ENV	src/Audio/ALSAEnv.cpp	/^static constexpr char ALSA_DEVICE_ENV[] = "ALSA_DEVICE";$/;"	m	namespace:ALSAEnv	file:
ALSA_LATENCY_ENV	src/Audio/ALSAEnv.cpp	/^static constexpr char ALSA_LATENCY_ENV[] = "ALSA_LATENCY";$/;"	m	namespace:ALSAEnv	file:
ALTERNATETASK_HPP	src/Engine/Task/Unordered/AlternateTask.hpp	24;"	d
ALTITUDE	src/Dialogs/Traffic/FlarmTrafficDetails.cpp	/^    ALTITUDE,$/;"	e	enum:final::Controls	file:
ALTITUDE	src/MapSettings.hpp	/^    ALTITUDE,$/;"	m	class:TrailSettings::Type
ALTITUDE	src/Units/Group.hpp	/^  ALTITUDE,$/;"	m	class:UnitGroup
ALWRUN	src/Dialogs/Device/LX/NanoConfigWidget.hpp	/^    ALWRUN,$/;"	e	enum:final::Controls
ANDROID_SAMSUNG_EXTERNAL_SD	src/LocalPath.cpp	76;"	d	file:
ANDROID_SDCARD	src/LocalPath.cpp	69;"	d	file:
ANGLE	src/Dialogs/Task/Widgets/KeyholeZoneEditWidget.cpp	/^  ANGLE,$/;"	e	enum:Controls	file:
ANGLE	src/Form/DataField/Base.hpp	/^    ANGLE,$/;"	m	class:DataField::Type
ANGLE_FACTOR	src/TeamCode/TeamCode.cpp	/^static constexpr Angle ANGLE_FACTOR =$/;"	v	file:
ANGLE_HPP	src/Math/Angle.hpp	24;"	d
ANNULAR_SECTOR	src/Engine/Task/ObservationZones/ObservationZone.hpp	/^    ANNULAR_SECTOR,$/;"	m	class:ObservationZone::Shape
ANNULAR_SECTORZONE_HPP	src/Engine/Task/ObservationZones/AnnularSectorZone.hpp	25;"	d
APOSTROPHE	src/Form/DigitEntry.hpp	/^      APOSTROPHE,$/;"	m	class:CoordinateFormat::Column::Type
APPEND_EXISTING	src/io/FileOutputStream.hxx	/^		APPEND_EXISTING,$/;"	m	class:final::Mode
APPEND_OR_CREATE	src/io/FileOutputStream.hxx	/^		APPEND_OR_CREATE,$/;"	m	class:final::Mode
ARC_STEPS	src/Renderer/TrackLineRenderer.cpp	34;"	d	file:
ARC_SWEEP	src/Renderer/TrackLineRenderer.cpp	/^static constexpr Angle ARC_SWEEP = Angle::Degrees(135.0);$/;"	v	file:
ARGS_HPP	src/system/Args.hpp	25;"	d
ARRAY_SIZE	src/util/Macros.hpp	33;"	d
ARRIVAL_ALTITUDE	src/MapWindow/Items/MapItem.hpp	/^    ARRIVAL_ALTITUDE,$/;"	e	enum:TaskPointType::Type
ARROW_HEAD	src/MapSettings.hpp	/^  ARROW_HEAD,$/;"	m	class:WindArrowStyle
ASCII_HXX	src/util/ASCII.hxx	31;"	d
ASSET_H	src/Asset.hpp	24;"	d
AST	src/Engine/Task/Points/Type.hpp	/^  AST,$/;"	m	class:TaskPointType
ASTAR_HPP	src/Engine/Route/AStar.hpp	25;"	d
ASTPOINT_HPP	src/Engine/Task/Ordered/Points/ASTPoint.hpp	26;"	d
ASTPoint	src/Engine/Task/Ordered/Points/ASTPoint.hpp	/^  ASTPoint(std::unique_ptr<ObservationZonePoint> &&_oz,$/;"	f	class:final
AST_CYLINDER	src/Engine/Task/Factory/TaskPointFactoryType.hpp	/^  AST_CYLINDER,$/;"	m	class:TaskPointFactoryType
AStar	src/Engine/Route/AStar.hpp	/^class AStar$/;"	c
AStarPriorityValue	src/Engine/Route/AStar.hpp	/^struct AStarPriorityValue$/;"	s
ATCReferencePanel	src/InfoBoxes/Panel/ATCReference.cpp	/^class ATCReferencePanel : public RowFormWidget {$/;"	c	file:
ATC_RADIAL	src/InfoBoxes/Content/Type.hpp	/^    ATC_RADIAL,$/;"	e	enum:InfoBoxFactory::Type
ATR833CreateOnPort	src/Device/Driver/ATR833.cpp	/^ATR833CreateOnPort(const DeviceConfig &config, Port &com_port)$/;"	f	file:
ATR833Device	src/Device/Driver/ATR833.cpp	/^  explicit ATR833Device(Port &_port):port(_port) {}$/;"	f	class:final
ATRBuffer	src/Device/Driver/ATR833.cpp	/^  explicit ATRBuffer(uint8_t msg_id):fill(0), checksum(0) {$/;"	f	class:ATRBuffer
ATRBuffer	src/Device/Driver/ATR833.cpp	/^class ATRBuffer {$/;"	c	file:
AUDIO_CONFIGPANEL_HPP	src/Dialogs/Settings/Panels/AudioConfigPanel.hpp	25;"	d
AUDIO_VARIOCONFIGPANEL_HPP	src/Dialogs/Settings/Panels/AudioVarioConfigPanel.hpp	25;"	d
AURA	src/Kobo/Model.hpp	/^  AURA,$/;"	m	class:KoboModel
AURA2	src/Kobo/Model.hpp	/^  AURA2,$/;"	m	class:KoboModel
AUTO	src/Device/Config.hpp	/^    AUTO,$/;"	m	class:DeviceConfig::PortType
AUTO	src/Engine/Task/Ordered/TaskAdvance.hpp	/^    AUTO,$/;"	e	enum:TaskAdvance::State
AUTO	src/MapSettings.hpp	/^  AUTO,$/;"	m	class:DisplayGroundTrack
AUTO	src/MapSettings.hpp	/^  AUTO,$/;"	m	class:FinalGlideBarDisplayMode
AUTO	src/Renderer/AirspaceRendererSettings.hpp	/^  AUTO,$/;"	m	class:AirspaceDisplayMode
AUTO	src/Widget/ButtonPanelWidget.hpp	/^    AUTO, BOTTOM, LEFT$/;"	m	class:ButtonPanelWidget::Alignment
AUTO	src/Widget/TabWidget.hpp	/^    AUTO,$/;"	m	class:TabWidget::Orientation
AUTO	src/io/Charset.hpp	/^  AUTO,$/;"	m	class:Charset
AUTOOFF	src/Dialogs/Device/LX/NanoConfigWidget.hpp	/^    AUTOOFF,$/;"	e	enum:final::Controls
AUTOWIND_CIRCLING	src/Computer/Wind/Settings.hpp	/^  AUTOWIND_CIRCLING,$/;"	e	enum:AutoWindModeBits
AUTOWIND_NONE	src/Computer/Wind/Settings.hpp	/^  AUTOWIND_NONE = 0,$/;"	e	enum:AutoWindModeBits
AUTOWIND_ZIGZAG	src/Computer/Wind/Settings.hpp	/^  AUTOWIND_ZIGZAG,$/;"	e	enum:AutoWindModeBits
AUTO_IAS	src/Device/Driver/LX/LX1600.hpp	/^    AUTO_IAS = 2,$/;"	m	class:LX1600::SCMode
AUTO_UPDATE_MODE_AUTOMATIC_MODE	src/ui/canvas/fb/mxcfb.h	76;"	d
AUTO_UPDATE_MODE_REGION_MODE	src/ui/canvas/fb/mxcfb.h	75;"	d
AV_FILTER_HPP	src/Math/AvFilter.hpp	24;"	d
Abandon	src/io/FileTransaction.cpp	/^FileTransaction::Abandon()$/;"	f	class:FileTransaction
Abort	src/Engine/Task/TaskManager.hpp	/^  void Abort() {$/;"	f	class:TaskManager
AbortIntersectionTest	src/Engine/Task/Unordered/AbortIntersectionTest.hpp	/^class AbortIntersectionTest {$/;"	c
AbortTask	src/Engine/Task/Unordered/AbortTask.hpp	/^class AbortTask: public UnorderedTask$/;"	c
AbortTask	src/Engine/Task/Unordered/AlternateTask.cpp	/^  :AbortTask(tb, wps)$/;"	f
AbortTaskMode	src/Engine/Task/TaskBehaviour.hpp	/^enum class AbortTaskMode: uint8_t {$/;"	c
AbortTaskMode	src/Profile/ProfileKeys.cpp	/^const char AbortTaskMode[] = "AbortTaskMode";$/;"	m	namespace:ProfileKeys	file:
Absolute	src/Atmosphere/Temperature.hpp	/^  Temperature Absolute() const {$/;"	f	class:Temperature
Absolute	src/Math/Angle.hpp	/^  Angle Absolute() const {$/;"	f	class:Angle
AbsoluteDegrees	src/Math/Angle.cpp	/^Angle::AbsoluteDegrees() const$/;"	f	class:Angle
AbsoluteRadians	src/Math/Angle.cpp	/^Angle::AbsoluteRadians() const$/;"	f	class:Angle
AbstractAirspace	src/Engine/Airspace/AbstractAirspace.hpp	/^  AbstractAirspace(Shape _shape):shape(_shape), active(true) {}$/;"	f	class:AbstractAirspace
AbstractAirspace	src/Engine/Airspace/AbstractAirspace.hpp	/^class AbstractAirspace {$/;"	c
AbstractAutoPilot	src/Replay/TaskAutoPilot.hpp	/^class AbstractAutoPilot {$/;"	c
AbstractContest	src/Engine/Contest/Solvers/AbstractContest.hpp	/^class AbstractContest {$/;"	c
AbstractDevice	src/Device/Driver.hpp	/^class AbstractDevice : public Device {$/;"	c
AbstractReplay	src/Replay/AbstractReplay.hpp	/^class AbstractReplay $/;"	c
AbstractTask	src/Engine/Task/AbstractTask.hpp	/^class AbstractTask: $/;"	c
AbstractTaskFactory	src/Engine/Task/Factory/AbstractTaskFactory.hpp	/^  AbstractTaskFactory(const TaskFactoryConstraints &_constraints,$/;"	f	class:AbstractTaskFactory
AbstractTaskFactory	src/Engine/Task/Factory/AbstractTaskFactory.hpp	/^class AbstractTaskFactory: private NonCopyable$/;"	c
AcState	src/Replay/TaskAutoPilot.hpp	/^  enum AcState {$/;"	g	class:TaskAutoPilot
AccelerationState	src/NMEA/Acceleration.hpp	/^struct AccelerationState$/;"	s
AccelerometerZero	src/Profile/ProfileKeys.cpp	/^const char AccelerometerZero[] = "AccelerometerZero";$/;"	m	namespace:ProfileKeys	file:
AcceptInRange	src/Engine/Route/ReachFan.cpp	/^ReachFan::AcceptInRange(const GeoBounds &bounds,$/;"	f	class:ReachFan
AcceptInRange	src/Engine/Route/RoutePlanner.cpp	/^RoutePlanner::AcceptInRange(const GeoBounds &bounds,$/;"	f	class:RoutePlanner
AcceptInRange	src/Task/RoutePlannerGlue.hpp	/^  void AcceptInRange(const GeoBounds &bounds,$/;"	f	class:RoutePlannerGlue
AcceptTaskPointVisitor	src/Engine/Task/Ordered/OrderedTask.cpp	/^OrderedTask::AcceptTaskPointVisitor(TaskPointConstVisitor& visitor) const$/;"	f	class:OrderedTask
AcceptTaskPointVisitor	src/Engine/Task/Unordered/GotoTask.cpp	/^GotoTask::AcceptTaskPointVisitor(TaskPointConstVisitor &visitor) const$/;"	f	class:GotoTask
Accessor	src/util/QuadTree.hxx	/^			return QuadTree<T,Accessor,Alloc>::GetPosition(value);$/;"	m	struct:QuadTree::Leaf
Acft	src/Dialogs/Device/FLARM/ConfigWidget.hpp	/^    Acft,$/;"	e	enum:final::Controls
Ack	src/Dialogs/Airspace/dlgAirspaceWarnings.cpp	/^AirspaceWarningListWidget::Ack()$/;"	f	class:AirspaceWarningListWidget
AckDay	src/Dialogs/Airspace/dlgAirspaceWarnings.cpp	/^AirspaceWarningListWidget::AckDay()$/;"	f	class:AirspaceWarningListWidget
Acknowledge	src/Airspace/ProtectedAirspaceWarningManager.cpp	/^ProtectedAirspaceWarningManager::Acknowledge(const AbstractAirspace &airspace)$/;"	f	class:ProtectedAirspaceWarningManager
Acknowledge	src/Engine/Airspace/AirspaceWarning.cpp	/^AirspaceWarning::Acknowledge()$/;"	f	class:AirspaceWarning
Acknowledge	src/Engine/Airspace/AirspaceWarningManager.cpp	/^AirspaceWarningManager::Acknowledge(const AbstractAirspace &airspace)$/;"	f	class:AirspaceWarningManager
Acknowledge	src/PopupMessage.cpp	/^PopupMessage::Acknowledge(Type type)$/;"	f	class:PopupMessage
AcknowledgeAll	src/Airspace/ProtectedAirspaceWarningManager.cpp	/^ProtectedAirspaceWarningManager::AcknowledgeAll()$/;"	f	class:ProtectedAirspaceWarningManager
AcknowledgeAll	src/Engine/Airspace/AirspaceWarningManager.cpp	/^AirspaceWarningManager::AcknowledgeAll()$/;"	f	class:AirspaceWarningManager
AcknowledgeDay	src/Airspace/ProtectedAirspaceWarningManager.cpp	/^ProtectedAirspaceWarningManager::AcknowledgeDay(const AbstractAirspace &airspace,$/;"	f	class:ProtectedAirspaceWarningManager
AcknowledgeDay	src/Engine/Airspace/AirspaceWarning.hpp	/^  void AcknowledgeDay(const bool set=true) {$/;"	f	class:AirspaceWarning
AcknowledgeDay	src/Engine/Airspace/AirspaceWarningManager.cpp	/^AirspaceWarningManager::AcknowledgeDay(const AbstractAirspace& airspace,$/;"	f	class:AirspaceWarningManager
AcknowledgeInside	src/Airspace/ProtectedAirspaceWarningManager.cpp	/^ProtectedAirspaceWarningManager::AcknowledgeInside(const AbstractAirspace &airspace,$/;"	f	class:ProtectedAirspaceWarningManager
AcknowledgeInside	src/Engine/Airspace/AirspaceWarning.cpp	/^AirspaceWarning::AcknowledgeInside(const bool set)$/;"	f	class:AirspaceWarning
AcknowledgeInside	src/Engine/Airspace/AirspaceWarningManager.cpp	/^AirspaceWarningManager::AcknowledgeInside(const AbstractAirspace& airspace,$/;"	f	class:AirspaceWarningManager
AcknowledgeTime	src/Dialogs/Settings/Panels/AirspaceConfigPanel.cpp	/^  AcknowledgeTime,$/;"	e	enum:ControlIndex	file:
AcknowledgeWarning	src/Airspace/ProtectedAirspaceWarningManager.cpp	/^ProtectedAirspaceWarningManager::AcknowledgeWarning(const AbstractAirspace &airspace,$/;"	f	class:ProtectedAirspaceWarningManager
AcknowledgeWarning	src/Engine/Airspace/AirspaceWarning.cpp	/^AirspaceWarning::AcknowledgeWarning(const bool set)$/;"	f	class:AirspaceWarning
AcknowledgeWarning	src/Engine/Airspace/AirspaceWarningManager.cpp	/^AirspaceWarningManager::AcknowledgeWarning(const AbstractAirspace& airspace,$/;"	f	class:AirspaceWarningManager
AcknowledgementTime	src/Profile/ProfileKeys.cpp	/^const char AcknowledgementTime[] = "AcknowledgementTime";$/;"	m	namespace:ProfileKeys	file:
ActionInterface	src/ActionInterface.cpp	/^namespace ActionInterface {$/;"	n	file:
ActionInterface	src/ActionInterface.hpp	/^namespace ActionInterface {$/;"	n
ActionWidget	src/Widget/ActionWidget.hpp	/^class ActionWidget$/;"	c
ActivateMap	src/MainWindow.cpp	/^MainWindow::ActivateMap()$/;"	f	class:MainWindow
ActivatePan	src/Dialogs/Waypoint/WaypointCommandsWidget.cpp	/^ActivatePan(const Waypoint &waypoint)$/;"	f	file:
ActiveAirspacePredicate	src/Airspace/ActivePredicate.hpp	/^  ActiveAirspacePredicate(const ProtectedAirspaceWarningManager *_warnings)$/;"	f	class:ActiveAirspacePredicate
ActiveAirspacePredicate	src/Airspace/ActivePredicate.hpp	/^class ActiveAirspacePredicate {$/;"	c
ActiveState	src/Engine/Task/Ordered/Points/OrderedTaskPoint.hpp	/^  enum ActiveState {$/;"	g	class:OrderedTaskPoint
Add	src/Audio/PCMBufferDataSource.cpp	/^PCMBufferDataSource::Add(PCMData &&data)$/;"	f	class:PCMBufferDataSource
Add	src/Cloud/Sender.cpp	/^ThermalResponseSender::Add(SkyLinesTracking::Thermal t)$/;"	f	class:ThermalResponseSender
Add	src/Cloud/Sender.cpp	/^TrafficResponseSender::Add(uint32_t pilot_id, uint32_t time,$/;"	f	class:TrafficResponseSender
Add	src/Computer/GlideRatioCalculator.cpp	/^GlideRatioCalculator::Add(unsigned distance, int altitude)$/;"	f	class:GlideRatioCalculator
Add	src/Computer/StateClock.hpp	/^  void Add(double delta) {$/;"	f	class:StateClock
Add	src/Dialogs/FileManager.cpp	/^ManagedFileListWidget::Add()$/;"	f	class:ManagedFileListWidget
Add	src/Engine/Airspace/Airspaces.cpp	/^Airspaces::Add(AbstractAirspace *airspace)$/;"	f	class:Airspaces
Add	src/Engine/GlideSolvers/GlideResult.cpp	/^GlideResult::Add(const GlideResult &s2)$/;"	f	class:GlideResult
Add	src/Engine/Route/ReachResult.hpp	/^  void Add(int delta) {$/;"	f	struct:ReachResult
Add	src/Engine/Waypoint/Waypoints.cpp	/^Waypoints::WaypointNameTree::Add(WaypointPtr wp)$/;"	f	class:Waypoints::WaypointNameTree
Add	src/Form/TabDisplay.cpp	/^TabDisplay::Add(const TCHAR *caption, const MaskedIcon *icon)$/;"	f	class:TabDisplay
Add	src/MapWindow/GlueMapWindowDisplayMode.cpp	/^OffsetHistory::Add(PixelPoint p)$/;"	f	class:OffsetHistory
Add	src/MapWindow/Items/AirspaceBuilder.cpp	/^  void Add(const AirspaceWarning& as) {$/;"	f	class:AirspaceWarningList
Add	src/Menu/MenuData.cpp	/^Menu::Add(const TCHAR *label, unsigned location, unsigned event_id)$/;"	f	class:Menu
Add	src/NMEA/ClimbHistory.cpp	/^ClimbHistory::Add(unsigned speed, double _vario)$/;"	f	class:ClimbHistory
Add	src/Renderer/AirspaceLabelList.cpp	/^AirspaceLabelList::Add(const GeoPoint &pos, AirspaceClass cls, $/;"	f	class:AirspaceLabelList
Add	src/Renderer/LabelBlock.hpp	/^    void Add(const PixelRect rc) {$/;"	f	class:LabelBlock::Bucket
Add	src/Renderer/WaypointLabelList.cpp	/^WaypointLabelList::Add(const TCHAR *Name, int X, int Y,$/;"	f	class:WaypointLabelList
Add	src/Waypoint/LastUsed.cpp	/^LastUsedWaypoints::Add(const Waypoint &waypoint)$/;"	f	class:LastUsedWaypoints
Add	src/Waypoint/LastUsed.cpp	/^LastUsedWaypoints::Add(unsigned waypoint_id)$/;"	f	class:LastUsedWaypoints
Add	src/net/http/FormData.hpp	/^  MultiPartFormData &Add(Args&&... args) {$/;"	f	class:Net::MultiPartFormData
Add	src/net/http/Global.cxx	/^CurlGlobal::Add(CurlRequest &r)$/;"	f	class:CurlGlobal
Add	src/net/http/Multi.hxx	/^	void Add(CURL *easy) {$/;"	f	class:CurlMulti
Add	src/ui/window/custom/WList.hpp	/^  void Add(Window &w) {$/;"	f	class:WindowList
Add	src/util/RadixTree.hpp	/^    void Add(const T &value) {$/;"	f	struct:RadixTree::LeafList
Add	src/util/RadixTree.hpp	/^    void Add(const TCHAR *key, const T &value) {$/;"	f	struct:RadixTree::Node
Add	src/util/RadixTree.hpp	/^  void Add(const TCHAR *key, const T &value) {$/;"	f	class:RadixTree
AddAltitude	src/FlightStatistics.cpp	/^FlightStatistics::AddAltitude(const double tflight, const double alt, const bool final_glide)$/;"	f	class:FlightStatistics
AddAltitudeTerrain	src/FlightStatistics.cpp	/^FlightStatistics::AddAltitudeTerrain(const double tflight, const double terrainalt)$/;"	f	class:FlightStatistics
AddArrivalAltitude	src/Dialogs/MapItemListSettingsPanel.hpp	/^    AddArrivalAltitude,$/;"	e	enum:final::ControlIndex
AddArrivalAltitudes	src/MapWindow/Items/Builder.cpp	/^MapItemListBuilder::AddArrivalAltitudes($/;"	f	class:MapItemListBuilder
AddAttribute	src/XML/Node.hpp	/^    void AddAttribute(const TCHAR *name, const TCHAR *value) {$/;"	f	struct:XMLNode::Data
AddAttribute	src/XML/Node.hpp	/^    void AddAttribute(const TCHAR *name, size_t name_length,$/;"	f	struct:XMLNode::Data
AddAttribute	src/XML/Node.hpp	/^    void AddAttribute(tstring &&name,$/;"	f	struct:XMLNode::Data
AddAttribute	src/XML/Node.hpp	/^  void AddAttribute(const TCHAR *name, const TCHAR *value) {$/;"	f	class:XMLNode
AddAttribute	src/XML/Node.hpp	/^  void AddAttribute(const TCHAR *name, size_t name_length,$/;"	f	class:XMLNode
AddAttribute	src/XML/Node.hpp	/^  void AddAttribute(tstring &&name,$/;"	f	class:XMLNode
AddBackground	src/lua/Background.cpp	/^Lua::AddBackground(StatePtr &&state)$/;"	f	class:Lua
AddBoolean	src/Dialogs/Device/Vega/VegaParametersWidget.cpp	/^VegaParametersWidget::AddBoolean(const char *name, const TCHAR *label,$/;"	f	class:VegaParametersWidget
AddButton	src/Dialogs/WidgetDialog.hpp	/^  Button *AddButton(const TCHAR *caption, int modal_result) {$/;"	f	class:WidgetDialog
AddButton	src/Widget/KeyboardWidget.cpp	/^KeyboardWidget::AddButton(ContainerWindow &parent,$/;"	f	class:KeyboardWidget
AddButtonKey	src/Dialogs/WidgetDialog.hpp	/^  void AddButtonKey(unsigned key_code) {$/;"	f	class:WidgetDialog
AddCancelButton	src/Dialogs/ProgressDialog.cpp	/^ProgressDialog::AddCancelButton(std::function<void()> &&callback)$/;"	f	class:ProgressDialog
AddCandidate	src/Engine/Route/RoutePlanner.cpp	/^RoutePlanner::AddCandidate(const RouteLink &e)$/;"	f	class:RoutePlanner
AddCandidate	src/Engine/Route/RoutePlanner.cpp	/^RoutePlanner::AddCandidate(const RouteLinkBase& e)$/;"	f	class:RoutePlanner
AddChild	src/XML/Node.cpp	/^XMLNode::AddChild(const TCHAR *name, bool is_declaration)$/;"	f	class:XMLNode
AddChild	src/XML/Node.cpp	/^XMLNode::AddChild(const TCHAR *name, size_t name_length, bool is_declaration)$/;"	f	class:XMLNode
AddChoice	src/Form/DataField/Enum.cpp	/^DataFieldEnum::AddChoice(unsigned id, const TCHAR *text,$/;"	f	class:DataFieldEnum
AddChoices	src/Form/DataField/Enum.cpp	/^DataFieldEnum::AddChoices(const StaticEnumChoice *p)$/;"	f	class:DataFieldEnum
AddCircle	src/Airspace/AirspaceParser.cpp	/^  AddCircle(Airspaces &airspace_database)$/;"	f	struct:TempAirspaceType
AddClicked	src/Dialogs/Weather/NOAAList.cpp	/^NOAAListWidget::AddClicked()$/;"	f	class:NOAAListWidget
AddClimbBase	src/FlightStatistics.cpp	/^FlightStatistics::AddClimbBase(const double tflight, const double alt)$/;"	f	class:FlightStatistics
AddClimbCeiling	src/FlightStatistics.cpp	/^FlightStatistics::AddClimbCeiling(const double tflight, const double alt)$/;"	f	class:FlightStatistics
AddClimbRate	src/FlightStatistics.cpp	/^FlightStatistics::AddClimbRate(const double tflight, const double vario, const bool circling)$/;"	f	class:FlightStatistics
AddDeclaration	src/IGC/IGCWriter.cpp	/^IGCWriter::AddDeclaration(const GeoPoint &location, const TCHAR *id)$/;"	f	class:IGCWriter
AddEdges	src/Engine/Route/RoutePlanner.cpp	/^RoutePlanner::AddEdges(const RouteLink &e)$/;"	f	class:RoutePlanner
AddEnum	src/Dialogs/Device/Vega/VegaParametersWidget.cpp	/^VegaParametersWidget::AddEnum(const char *name, const TCHAR *label,$/;"	f	class:VegaParametersWidget
AddFDF	src/Device/Driver/Volkslogger/dbbconv.cpp	/^DBB::AddFDF(uint8_t id, size_t size)$/;"	f	class:DBB
AddFDFStringUpper	src/Device/Driver/Volkslogger/dbbconv.cpp	/^DBB::AddFDFStringUpper(uint8_t id, const char *src)$/;"	f	class:DBB
AddFile	src/Form/DataField/File.cpp	/^FileDataField::AddFile(Path path)$/;"	f	class:FileDataField
AddFile	src/net/http/FormData.cpp	/^Net::MultiPartFormData::AddFile(const char *name, Path path)$/;"	f	class:Net::MultiPartFormData
AddFileListItemRenderer	src/Dialogs/FileManager.cpp	/^  explicit AddFileListItemRenderer(const std::vector<AvailableFile> &_list)$/;"	f	class:final
AddFlight	src/Renderer/FlightListRenderer.cpp	/^FlightListRenderer::AddFlight(const FlightInfo &_flight)$/;"	f	class:FlightListRenderer
AddInsideSample	src/Engine/Task/Points/SampledTaskPoint.cpp	/^SampledTaskPoint::AddInsideSample(const AircraftState& state,$/;"	f	class:SampledTaskPoint
AddInteger	src/Dialogs/Device/Vega/VegaParametersWidget.cpp	/^VegaParametersWidget::AddInteger(const char *name, const TCHAR *label,$/;"	f	class:VegaParametersWidget
AddItem	src/Dialogs/Traffic/TrafficList.cpp	/^  Item &AddItem(FlarmId id) {$/;"	f	class:TrafficListWidget	file:
AddItem	src/Form/GridView.hpp	/^  void AddItem(Window &w) {$/;"	f	class:GridView
AddKey	src/Form/ButtonPanel.cpp	/^ButtonPanel::AddKey(unsigned key_code)$/;"	f	class:ButtonPanel
AddListener	src/Blackboard/LiveBlackboard.cpp	/^LiveBlackboard::AddListener(BlackboardListener &listener)$/;"	f	class:LiveBlackboard
AddListener	src/Interface.hpp	/^  static inline void AddListener(BlackboardListener &listener) {$/;"	f	namespace:CommonInterface
AddLocation	src/Dialogs/MapItemListSettingsPanel.hpp	/^    AddLocation,$/;"	e	enum:final::ControlIndex
AddLocation	src/MapWindow/Items/Builder.cpp	/^MapItemListBuilder::AddLocation(const NMEAInfo &basic,$/;"	f	class:MapItemListBuilder
AddMessage	src/Message.cpp	/^Message::AddMessage(const TCHAR* text, const TCHAR *data)$/;"	f	class:Message
AddMessage	src/PopupMessage.cpp	/^PopupMessage::AddMessage(const TCHAR* text, const TCHAR *data)$/;"	f	class:PopupMessage
AddNearby	src/Engine/Route/AirspaceRoute.cpp	/^AirspaceRoute::AddNearby(const RouteLink &e)$/;"	f	class:AirspaceRoute
AddNearby	src/Engine/Route/TerrainRoute.cpp	/^TerrainRoute::AddNearby(const RouteLink& e)$/;"	f	class:TerrainRoute
AddNearbyAirspace	src/Engine/Route/AirspaceRoute.cpp	/^AirspaceRoute::AddNearbyAirspace(const RouteAirspaceIntersection &inx,$/;"	f	class:AirspaceRoute
AddNearbyTerrain	src/Engine/Route/RoutePlanner.cpp	/^RoutePlanner::AddNearbyTerrain(const RoutePoint &p, const RouteLink& e)$/;"	f	class:RoutePlanner
AddNearbyTerrainSweep	src/Engine/Route/RoutePlanner.cpp	/^RoutePlanner::AddNearbyTerrainSweep(const RoutePoint& p,$/;"	f	class:RoutePlanner
AddNetwork	src/Kobo/WPASupplicant.cpp	/^WPASupplicant::AddNetwork()$/;"	f	class:WPASupplicant
AddNull	src/Form/DataField/File.cpp	/^FileDataField::AddNull()$/;"	f	class:FileDataField
AddOrigin	src/Engine/Route/FlatTriangleFan.cpp	/^FlatTriangleFan::AddOrigin(const AFlatGeoPoint &origin, size_t reserve)$/;"	f	class:FlatTriangleFan
AddParameter	src/Dialogs/Device/Vega/VegaParametersWidget.cpp	/^VegaParametersWidget::AddParameter(const StaticParameter &p)$/;"	f	class:VegaParametersWidget
AddParameter	src/Dialogs/Device/Vega/VegaParametersWidget.hpp	/^  void AddParameter(const char *name) {$/;"	f	class:VegaParametersWidget
AddPersistent	src/lua/Persistent.cpp	/^Lua::AddPersistent(lua_State *L, void *p)$/;"	f	class:Lua
AddPilot	src/Device/Driver/CAI302/Manage.cpp	/^CAI302Device::AddPilot(const CAI302::Pilot &pilot, OperationEnvironment &env)$/;"	f	class:CAI302Device
AddPoint	src/Computer/ThermalLocator.cpp	/^ThermalLocator::AddPoint(const double t, const GeoPoint &location, const double w)$/;"	f	class:ThermalLocator
AddPoint	src/Engine/Route/FlatTriangleFan.cpp	/^FlatTriangleFan::AddPoint(FlatGeoPoint p)$/;"	f	class:FlatTriangleFan
AddPoint	src/Topography/ShapeRenderer.hpp	/^  void AddPoint(PixelPoint pt) {$/;"	f	class:ShapeRenderer
AddPointIfDistant	src/Topography/ShapeRenderer.hpp	/^   void AddPointIfDistant(PixelPoint pt) {$/;"	f	class:ShapeRenderer
AddPointer	src/ui/event/poll/linux/MergeMouse.hpp	/^  void AddPointer() {$/;"	f	class:UI::final
AddPolygon	src/Airspace/AirspaceParser.cpp	/^  AddPolygon(Airspaces &airspace_database)$/;"	f	struct:TempAirspaceType
AddPortListener	src/Device/MultipleDevices.cpp	/^MultipleDevices::AddPortListener(PortListener &listener)$/;"	f	class:MultipleDevices
AddSample	src/Engine/ThermalBand/ThermalEncounterBand.cpp	/^ThermalEncounterBand::AddSample(const double time, const double height)$/;"	f	class:ThermalEncounterBand
AddSecondaryItem	src/FLARM/FlarmDetails.cpp	/^FlarmDetails::AddSecondaryItem(FlarmId id, const TCHAR *name)$/;"	f	class:FlarmDetails
AddSelfIfNear	src/MapWindow/Items/Builder.cpp	/^MapItemListBuilder::AddSelfIfNear(const GeoPoint &self, Angle bearing)$/;"	f	class:MapItemListBuilder
AddShortcut	src/Engine/Route/RoutePlanner.cpp	/^RoutePlanner::AddShortcut(const RoutePoint &node)$/;"	f	class:RoutePlanner
AddSkyLinesTraffic	src/MapWindow/Items/TrafficBuilder.cpp	/^MapItemListBuilder::AddSkyLinesTraffic()$/;"	f	class:MapItemListBuilder
AddSource	src/Audio/PCMMixerDataSource.cpp	/^PCMMixerDataSource::AddSource(PCMDataSource &source)$/;"	f	class:PCMMixerDataSource
AddStation	src/Weather/NOAAStore.cpp	/^NOAAStore::AddStation(const TCHAR *code)$/;"	f	class:NOAAStore
AddStation	src/Weather/NOAAStore.cpp	/^NOAAStore::AddStation(const char *code)$/;"	f	class:NOAAStore
AddString	src/net/http/FormData.hpp	/^  MultiPartFormData &AddString(const char *name, const char *value) {$/;"	f	class:Net::MultiPartFormData
AddTab	src/Widget/TabWidget.cpp	/^TabWidget::AddTab(std::unique_ptr<Widget> widget, const TCHAR *caption,$/;"	f	class:TabWidget
AddTakeoffPoint	src/Engine/Waypoint/Waypoints.cpp	/^Waypoints::AddTakeoffPoint(const GeoPoint& location,$/;"	f	class:Waypoints
AddTaskOZs	src/MapWindow/Items/Builder.cpp	/^MapItemListBuilder::AddTaskOZs(const ProtectedTaskManager &task)$/;"	f	class:MapItemListBuilder
AddTaskSpeed	src/FlightStatistics.cpp	/^FlightStatistics::AddTaskSpeed(const double tflight, const double val)$/;"	f	class:FlightStatistics
AddText	src/XML/Node.cpp	/^XMLNode::AddText(const TCHAR *text, size_t length)$/;"	f	class:XMLNode
AddText	src/XML/Node.cpp	/^XMLNode::AddText(const TCHAR *value)$/;"	f	class:XMLNode
AddThermalAverage	src/FlightStatistics.cpp	/^FlightStatistics::AddThermalAverage(const double tflight_start,$/;"	f	class:FlightStatistics
AddThermals	src/MapWindow/Items/WeatherBuilder.cpp	/^MapItemListBuilder::AddThermals(const ThermalLocatorInfo &thermals,$/;"	f	class:MapItemListBuilder
AddTraffic	src/MapWindow/Items/TrafficBuilder.cpp	/^MapItemListBuilder::AddTraffic(const TrafficList &flarm)$/;"	f	class:MapItemListBuilder
AddValue	src/util/RadixTree.hpp	/^    void AddValue(const T &value) {$/;"	f	struct:RadixTree::Node
AddVisibleAirspace	src/MapWindow/Items/AirspaceBuilder.cpp	/^MapItemListBuilder::AddVisibleAirspace($/;"	f	class:MapItemListBuilder
AddWaypoint	src/Device/Driver/EW.cpp	/^EWDevice::AddWaypoint(const Waypoint &way_point, OperationEnvironment &env)$/;"	f	class:EWDevice
AddWaypoint	src/Renderer/WaypointRenderer.cpp	/^  void AddWaypoint(const WaypointPtr &way_point, bool in_task) {$/;"	f	class:final
AddWaypoints	src/MapWindow/Items/Builder.cpp	/^MapItemListBuilder::AddWaypoints(const Waypoints &waypoints)$/;"	f	class:MapItemListBuilder
AddWeatherStations	src/MapWindow/Items/WeatherBuilder.cpp	/^MapItemListBuilder::AddWeatherStations(NOAAStore &store)$/;"	f	class:MapItemListBuilder
AdditionalAirspaceFile	src/Dialogs/Settings/Panels/SiteConfigPanel.cpp	/^  AdditionalAirspaceFile,$/;"	e	enum:ControlIndex	file:
AdditionalAirspaceFile	src/Profile/ProfileKeys.cpp	/^const char AdditionalAirspaceFile[] = "AdditionalAirspaceFile"; \/\/ pL$/;"	m	namespace:ProfileKeys	file:
AdditionalWaypointFile	src/Dialogs/Settings/Panels/SiteConfigPanel.cpp	/^  AdditionalWaypointFile,$/;"	e	enum:ControlIndex	file:
AdditionalWaypointFile	src/Profile/ProfileKeys.cpp	/^const char AdditionalWaypointFile[] = "AdditionalWPFile"; \/\/ pL$/;"	m	namespace:ProfileKeys	file:
AddressInfo	src/net/AddressInfo.hxx	/^class AddressInfo : addrinfo {$/;"	c
AddressInfoList	src/net/AddressInfo.hxx	/^	AddressInfoList(AddressInfoList &&src)$/;"	f	class:AddressInfoList
AddressInfoList	src/net/AddressInfo.hxx	/^	explicit AddressInfoList(struct addrinfo *_value):value(_value) {}$/;"	f	class:AddressInfoList
AddressInfoList	src/net/AddressInfo.hxx	/^class AddressInfoList {$/;"	c
Advance	src/Screen/TerminalWindow.cpp	/^TerminalWindow::Advance()$/;"	f	class:TerminalWindow
AdvanceIfRequired	src/Replay/TaskAutoPilot.cpp	/^TaskAutoPilot::AdvanceIfRequired(TaskAccessor& task)$/;"	f	class:TaskAutoPilot
AdvanceReaderToTask	src/Task/TaskFileSeeYou.cpp	/^AdvanceReaderToTask(TLineReader &reader, const unsigned index)$/;"	f	file:
AdvanceTo	src/ui/canvas/memory/Bresenham.hpp	/^  bool AdvanceTo(const int y_t) {$/;"	f	class:BresenhamIterator
AfterLocalPathCode	src/LocalPath.cpp	/^AfterLocalPathCode(const TCHAR *p)$/;"	f	file:
AfterStartup	src/Startup.cpp	/^AfterStartup()$/;"	f	file:
AirControlDisplayCreateOnPort	src/Device/Driver/AirControlDisplay.cpp	/^AirControlDisplayCreateOnPort(const DeviceConfig &config, Port &com_port)$/;"	f	file:
AirDensity	src/Atmosphere/AirDensity.cpp	/^AirDensity(const double altitude)$/;"	f
AirDensityRatio	src/Atmosphere/AirDensity.cpp	/^AirDensityRatio(const double altitude)$/;"	f
AirbrakeState	src/NMEA/SwitchState.hpp	/^  enum class AirbrakeState : uint8_t {$/;"	c	struct:SwitchState
AircraftLook	src/Look/AircraftLook.hpp	/^struct AircraftLook {$/;"	s
AircraftReg	src/Profile/ProfileKeys.cpp	/^const char AircraftReg[] = "AircraftReg";$/;"	m	namespace:ProfileKeys	file:
AircraftRenderer	src/Renderer/AircraftRenderer.hpp	/^namespace AircraftRenderer$/;"	n
AircraftSim	src/Replay/AircraftSim.hpp	/^class AircraftSim {$/;"	c
AircraftState	src/Engine/Navigation/Aircraft.hpp	/^struct AircraftState: $/;"	s
AircraftStateFilter	src/Engine/Util/AircraftStateFilter.cpp	/^AircraftStateFilter::AircraftStateFilter(const double cutoff_wavelength)$/;"	f	class:AircraftStateFilter
AircraftStateFilter	src/Engine/Util/AircraftStateFilter.hpp	/^class AircraftStateFilter {$/;"	c
AircraftSymbol	src/MapSettings.hpp	/^enum class AircraftSymbol : uint8_t {$/;"	c
AircraftSymbol	src/Profile/ProfileKeys.cpp	/^const char AircraftSymbol[] = "AircraftSymbol";$/;"	m	namespace:ProfileKeys	file:
AircraftType	src/FLARM/Traffic.hpp	/^  enum class AircraftType: uint8_t {$/;"	c	struct:FlarmTraffic
AircraftType	src/Profile/ProfileKeys.cpp	/^const char AircraftType[] = "AircraftType";$/;"	m	namespace:ProfileKeys	file:
AirfieldFile	src/Dialogs/Settings/Panels/SiteConfigPanel.cpp	/^  AirfieldFile,$/;"	e	enum:ControlIndex	file:
AirfieldFile	src/Profile/ProfileKeys.cpp	/^const char AirfieldFile[] = "AirfieldFile"; \/\/ pL$/;"	m	namespace:ProfileKeys	file:
AirfieldFileChanged	src/UtilsSettings.cpp	/^bool AirfieldFileChanged = false;$/;"	v
Airspace	src/Engine/Airspace/Airspace.cpp	/^Airspace::Airspace(AbstractAirspace &airspace,$/;"	f	class:Airspace
AirspaceActivity	src/Engine/Airspace/AirspaceActivity.hpp	/^  AirspaceActivity() {$/;"	f	class:AirspaceActivity
AirspaceActivity	src/Engine/Airspace/AirspaceActivity.hpp	/^  AirspaceActivity(int8_t day_of_week) {$/;"	f	class:AirspaceActivity
AirspaceActivity	src/Engine/Airspace/AirspaceActivity.hpp	/^class AirspaceActivity {$/;"	c
AirspaceAircraftInterceptHorizontal	src/Engine/Airspace/AirspaceAircraftPerformance.cpp	/^  AirspaceAircraftInterceptHorizontal(const AirspaceAircraftPerformance &aap,$/;"	f	class:final
AirspaceAircraftInterceptVertical	src/Engine/Airspace/AirspaceAircraftPerformance.cpp	/^  AirspaceAircraftInterceptVertical(const AirspaceAircraftPerformance &aap,$/;"	f	class:final
AirspaceAircraftPerformance	src/Engine/Airspace/AirspaceAircraftPerformance.hpp	/^  AirspaceAircraftPerformance(const GlidePolar &polar,$/;"	f	class:AirspaceAircraftPerformance
AirspaceAircraftPerformance	src/Engine/Airspace/AirspaceAircraftPerformance.hpp	/^  constexpr AirspaceAircraftPerformance(Simple)$/;"	f	class:AirspaceAircraftPerformance
AirspaceAircraftPerformance	src/Engine/Airspace/AirspaceAircraftPerformance.hpp	/^  explicit AirspaceAircraftPerformance(const AircraftStateFilter &filter)$/;"	f	class:AirspaceAircraftPerformance
AirspaceAircraftPerformance	src/Engine/Airspace/AirspaceAircraftPerformance.hpp	/^  explicit AirspaceAircraftPerformance(const GlidePolar &polar)$/;"	f	class:AirspaceAircraftPerformance
AirspaceAircraftPerformance	src/Engine/Airspace/AirspaceAircraftPerformance.hpp	/^class AirspaceAircraftPerformance {$/;"	c
AirspaceAltitude	src/Engine/Airspace/AirspaceAltitude.hpp	/^  AirspaceAltitude()$/;"	f	struct:AirspaceAltitude
AirspaceAltitude	src/Engine/Airspace/AirspaceAltitude.hpp	/^struct AirspaceAltitude$/;"	s
AirspaceAtPointPredicate	src/MapWindow/Items/AirspaceBuilder.cpp	/^  AirspaceAtPointPredicate(const AirspaceComputerSettings &_computer_settings,$/;"	f	class:AirspaceAtPointPredicate
AirspaceAtPointPredicate	src/MapWindow/Items/AirspaceBuilder.cpp	/^class AirspaceAtPointPredicate$/;"	c	file:
AirspaceBlackOutline	src/Profile/ProfileKeys.cpp	/^const char AirspaceBlackOutline[] = "AirspaceBlackOutline";$/;"	m	namespace:ProfileKeys	file:
AirspaceCircle	src/Engine/Airspace/AirspaceCircle.cpp	/^AirspaceCircle::AirspaceCircle(const GeoPoint &loc, const double _radius)$/;"	f	class:AirspaceCircle
AirspaceClassCharCouple	src/Airspace/AirspaceParser.cpp	/^struct AirspaceClassCharCouple$/;"	s	file:
AirspaceClassLook	src/Look/AirspaceLook.hpp	/^struct AirspaceClassLook {$/;"	s
AirspaceClassRendererSettings	src/Renderer/AirspaceRendererSettings.hpp	/^struct AirspaceClassRendererSettings$/;"	s
AirspaceClassRendererSettingsPanel	src/Dialogs/Airspace/AirspaceCRendererSettingsPanel.hpp	/^class AirspaceClassRendererSettingsPanel:$/;"	c
AirspaceClassStringCouple	src/Airspace/AirspaceParser.cpp	/^struct AirspaceClassStringCouple$/;"	s	file:
AirspaceComputerSettings	src/Airspace/AirspaceComputerSettings.hpp	/^struct AirspaceComputerSettings {$/;"	s
AirspaceConfigPanel	src/Dialogs/Settings/Panels/AirspaceConfigPanel.cpp	/^  AirspaceConfigPanel()$/;"	f	class:final
AirspaceDetailsWidget	src/Dialogs/Airspace/dlgAirspaceDetails.cpp	/^  AirspaceDetailsWidget(const AbstractAirspace &_airspace,$/;"	f	class:final
AirspaceDisplay	src/Dialogs/Settings/Panels/AirspaceConfigPanel.cpp	/^  AirspaceDisplay,$/;"	e	enum:ControlIndex	file:
AirspaceDisplayMode	src/Renderer/AirspaceRendererSettings.hpp	/^enum class AirspaceDisplayMode: uint8_t$/;"	c
AirspaceFile	src/Dialogs/Settings/Panels/SiteConfigPanel.cpp	/^  AirspaceFile,$/;"	e	enum:ControlIndex	file:
AirspaceFile	src/Profile/ProfileKeys.cpp	/^const char AirspaceFile[] = "AirspaceFile"; \/\/ pL$/;"	m	namespace:ProfileKeys	file:
AirspaceFileChanged	src/UtilsSettings.cpp	/^bool AirspaceFileChanged = false;$/;"	v
AirspaceFileType	src/Airspace/AirspaceParser.cpp	/^enum class AirspaceFileType {$/;"	c	file:
AirspaceFillMode	src/Dialogs/Settings/Panels/AirspaceConfigPanel.cpp	/^  AirspaceFillMode,$/;"	e	enum:ControlIndex	file:
AirspaceFillMode	src/Profile/ProfileKeys.cpp	/^const char AirspaceFillMode[] = "AirspaceFillMode";$/;"	m	namespace:ProfileKeys	file:
AirspaceFillRenderer	src/Renderer/AirspaceRendererGL.cpp	/^  AirspaceFillRenderer(Canvas &_canvas, const WindowProjection &_projection,$/;"	f	class:final
AirspaceFilterData	src/Engine/Airspace/AirspaceSorter.hpp	/^struct AirspaceFilterData {$/;"	s
AirspaceFilterPredicate	src/Engine/Airspace/AirspaceSorter.cpp	/^  AirspaceFilterPredicate(const GeoPoint &_location,$/;"	f	class:final
AirspaceFilterWidget	src/Dialogs/Airspace/AirspaceList.cpp	/^  AirspaceFilterWidget(const DialogLook &look)$/;"	f	class:final
AirspaceFormatter	src/Formatter/AirspaceFormatter.hpp	/^namespace AirspaceFormatter {$/;"	n
AirspaceIndexable	src/Engine/Airspace/AirspacesInterface.hpp	/^  struct AirspaceIndexable {$/;"	s	class:AirspacesInterface
AirspaceInterceptSolution	src/Engine/Airspace/AirspaceInterceptSolution.hpp	/^  AirspaceInterceptSolution(double _distance, double _elapsed_time)$/;"	f	struct:AirspaceInterceptSolution
AirspaceInterceptSolution	src/Engine/Airspace/AirspaceInterceptSolution.hpp	/^struct AirspaceInterceptSolution$/;"	s
AirspaceIntersectSort	src/Engine/Airspace/AirspaceIntersectSort.hpp	/^  AirspaceIntersectSort(const GeoPoint &start,$/;"	f	class:AirspaceIntersectSort
AirspaceIntersectSort	src/Engine/Airspace/AirspaceIntersectSort.hpp	/^class AirspaceIntersectSort {$/;"	c
AirspaceIntersectionVector	src/Engine/Airspace/AirspaceIntersectionVector.hpp	/^class AirspaceIntersectionVector:$/;"	c
AirspaceIntersectionVisitor	src/Engine/Airspace/AirspaceIntersectionVisitor.hpp	/^class AirspaceIntersectionVisitor:$/;"	c
AirspaceIntersectionVisitorSlice	src/CrossSection/AirspaceXSRenderer.cpp	/^  AirspaceIntersectionVisitorSlice(Canvas &_canvas,$/;"	f	class:final
AirspaceIntersectionWarningVisitor	src/Engine/Airspace/AirspaceWarningManager.cpp	/^  AirspaceIntersectionWarningVisitor(const AircraftState &_state,$/;"	f	class:final
AirspaceLabelList	src/Renderer/AirspaceLabelList.hpp	/^  AirspaceLabelList() {}$/;"	f	class:AirspaceLabelList
AirspaceLabelList	src/Renderer/AirspaceLabelList.hpp	/^class AirspaceLabelList : private NonCopyable {$/;"	c
AirspaceLabelListCompare	src/Renderer/AirspaceLabelList.cpp	/^  AirspaceLabelListCompare(const AirspaceWarningConfig &_config)$/;"	f	class:AirspaceLabelListCompare
AirspaceLabelListCompare	src/Renderer/AirspaceLabelList.cpp	/^class AirspaceLabelListCompare {$/;"	c	file:
AirspaceLabelRenderer	src/Renderer/AirspaceLabelRenderer.hpp	/^  AirspaceLabelRenderer(const AirspaceLook &_look)$/;"	f	class:AirspaceLabelRenderer
AirspaceLabelRenderer	src/Renderer/AirspaceLabelRenderer.hpp	/^class AirspaceLabelRenderer$/;"	c
AirspaceLabelSelection	src/Dialogs/Settings/Panels/AirspaceConfigPanel.cpp	/^  AirspaceLabelSelection,$/;"	e	enum:ControlIndex	file:
AirspaceLabelSelection	src/Profile/ProfileKeys.cpp	/^const char AirspaceLabelSelection[] = "AirspaceLabelSelection";$/;"	m	namespace:ProfileKeys	file:
AirspaceListRenderer	src/Renderer/AirspaceListRenderer.hpp	/^namespace AirspaceListRenderer$/;"	n
AirspaceListWidget	src/Dialogs/Airspace/AirspaceList.cpp	/^  AirspaceListWidget(AirspaceFilterWidget &_filter_widget)$/;"	f	class:final
AirspaceListWidgetState	src/Dialogs/Airspace/AirspaceList.cpp	/^  AirspaceListWidgetState()$/;"	f	struct:AirspaceListWidgetState
AirspaceListWidgetState	src/Dialogs/Airspace/AirspaceList.cpp	/^struct AirspaceListWidgetState$/;"	s	file:
AirspaceLook	src/Look/AirspaceLook.hpp	/^struct AirspaceLook {$/;"	s
AirspaceMapItem	src/MapWindow/Items/MapItem.hpp	/^  AirspaceMapItem(const AbstractAirspace &_airspace)$/;"	f	struct:AirspaceMapItem
AirspaceMapItem	src/MapWindow/Items/MapItem.hpp	/^struct AirspaceMapItem: public MapItem$/;"	s
AirspaceMapVisible	src/Renderer/AirspaceLabelRenderer.cpp	/^  AirspaceMapVisible(const AirspaceComputerSettings &_computer_settings,$/;"	f	class:AirspaceMapVisible
AirspaceMapVisible	src/Renderer/AirspaceLabelRenderer.cpp	/^class AirspaceMapVisible$/;"	c	file:
AirspaceMapVisible	src/Renderer/AirspaceRenderer.cpp	/^  AirspaceMapVisible(const AirspaceComputerSettings &_computer_settings,$/;"	f	class:AirspaceMapVisible
AirspaceMapVisible	src/Renderer/AirspaceRenderer.cpp	/^class AirspaceMapVisible$/;"	c	file:
AirspaceOutlineRenderer	src/Renderer/AirspaceRendererOther.cpp	/^  AirspaceOutlineRenderer(Canvas &_canvas, const WindowProjection &_projection,$/;"	f	class:final
AirspacePatternsDialog	src/Dialogs/Airspace/dlgAirspacePatterns.cpp	/^  AirspacePatternsDialog(const AirspaceLook &_look)$/;"	f	class:AirspacePatternsDialog
AirspacePatternsDialog	src/Dialogs/Airspace/dlgAirspacePatterns.cpp	/^class AirspacePatternsDialog : public ListItemRenderer {$/;"	c	file:
AirspacePointersEquals	src/Engine/Airspace/Airspaces.cpp	/^AirspacePointersEquals(const Airspace &a, const Airspace &b)$/;"	f	file:
AirspacePolygon	src/Engine/Airspace/AirspacePolygon.cpp	/^AirspacePolygon::AirspacePolygon(const std::vector<GeoPoint> &pts,$/;"	f	class:AirspacePolygon
AirspacePredicateHeightRange	src/Engine/Airspace/Predicate/AirspacePredicateHeightRange.hpp	/^  AirspacePredicateHeightRange(const double _h_min,$/;"	f	class:AirspacePredicateHeightRange
AirspacePredicateHeightRange	src/Engine/Airspace/Predicate/AirspacePredicateHeightRange.hpp	/^class AirspacePredicateHeightRange$/;"	c
AirspacePredicateHeightRangeExcludeTwo	src/Engine/Airspace/Predicate/AirspacePredicateHeightRange.hpp	/^  AirspacePredicateHeightRangeExcludeTwo(const double _h_min,$/;"	f	class:AirspacePredicateHeightRangeExcludeTwo
AirspacePredicateHeightRangeExcludeTwo	src/Engine/Airspace/Predicate/AirspacePredicateHeightRange.hpp	/^class AirspacePredicateHeightRangeExcludeTwo$/;"	c
AirspacePreviewRenderer	src/Renderer/AirspacePreviewRenderer.hpp	/^namespace AirspacePreviewRenderer$/;"	n
AirspaceRenderer	src/Renderer/AirspaceRenderer.hpp	/^  AirspaceRenderer(const AirspaceLook &_look)$/;"	f	class:AirspaceRenderer
AirspaceRenderer	src/Renderer/AirspaceRenderer.hpp	/^class AirspaceRenderer$/;"	c
AirspaceRendererSettings	src/Renderer/AirspaceRendererSettings.hpp	/^struct AirspaceRendererSettings {$/;"	s
AirspaceRoute	src/Engine/Route/AirspaceRoute.cpp	/^AirspaceRoute::AirspaceRoute():m_airspaces(false)$/;"	f	class:AirspaceRoute
AirspaceRoute	src/Engine/Route/AirspaceRoute.hpp	/^class AirspaceRoute : public RoutePlanner {$/;"	c
AirspaceSelectInfo	src/Engine/Airspace/AirspaceSorter.hpp	/^  AirspaceSelectInfo(const AbstractAirspace &_airspace)$/;"	f	class:AirspaceSelectInfo
AirspaceSelectInfo	src/Engine/Airspace/AirspaceSorter.hpp	/^class AirspaceSelectInfo$/;"	c
AirspaceSelectInfoVector	src/Engine/Airspace/AirspaceSorter.hpp	/^typedef std::vector<AirspaceSelectInfo> AirspaceSelectInfoVector;$/;"	t
AirspaceSettingsListWidget	src/Dialogs/Airspace/dlgAirspace.cpp	/^  AirspaceSettingsListWidget(bool _color_mode)$/;"	f	class:AirspaceSettingsListWidget
AirspaceSettingsListWidget	src/Dialogs/Airspace/dlgAirspace.cpp	/^class AirspaceSettingsListWidget : public ListWidget {$/;"	c	file:
AirspaceSize	src/Engine/Route/AirspaceRoute.cpp	/^AirspaceRoute::AirspaceSize() const$/;"	f	class:AirspaceRoute
AirspaceTransparency	src/Dialogs/Settings/Panels/AirspaceConfigPanel.cpp	/^  AirspaceTransparency$/;"	e	enum:ControlIndex	file:
AirspaceTransparency	src/Profile/ProfileKeys.cpp	/^const char AirspaceTransparency[] = "AirspaceTransparency";$/;"	m	namespace:ProfileKeys	file:
AirspaceTree	src/Engine/Airspace/AirspacesInterface.hpp	/^                                        AirspaceIndexable> AirspaceTree;$/;"	t	class:AirspacesInterface
AirspaceVector	src/Engine/Airspace/AirspacesInterface.hpp	/^  typedef std::vector<Airspace> AirspaceVector; \/**< Vector of airspaces (used internally) *\/$/;"	t	class:AirspacesInterface
AirspaceVisibility	src/Airspace/AirspaceVisibility.hpp	/^  AirspaceVisibility(const AirspaceComputerSettings &_computer_settings,$/;"	f	class:AirspaceVisibility
AirspaceVisibility	src/Airspace/AirspaceVisibility.hpp	/^class AirspaceVisibility {$/;"	c
AirspaceVisitor	src/Engine/Airspace/AirspaceVisitor.hpp	/^class AirspaceVisitor {$/;"	c
AirspaceVisitorMap	src/Renderer/AirspaceRendererOther.cpp	/^  AirspaceVisitorMap(StencilMapCanvas &_helper,$/;"	f	class:final
AirspaceVisitorRenderer	src/Renderer/AirspaceRendererGL.cpp	/^  AirspaceVisitorRenderer(Canvas &_canvas, const WindowProjection &_projection,$/;"	f	class:final
AirspaceWarning	src/Engine/Airspace/AirspaceWarning.cpp	/^AirspaceWarning::AirspaceWarning(const AbstractAirspace &_airspace)$/;"	f	class:AirspaceWarning
AirspaceWarning	src/Engine/Airspace/AirspaceWarning.hpp	/^class AirspaceWarning {$/;"	c
AirspaceWarning	src/Profile/ProfileKeys.cpp	/^const char AirspaceWarning[] = "AirspaceWarn";$/;"	m	namespace:ProfileKeys	file:
AirspaceWarningConfig	src/Engine/Airspace/AirspaceWarningConfig.hpp	/^struct AirspaceWarningConfig$/;"	s
AirspaceWarningCopy	src/Airspace/AirspaceWarningCopy.hpp	/^class AirspaceWarningCopy$/;"	c
AirspaceWarningDialog	src/Profile/ProfileKeys.cpp	/^const char AirspaceWarningDialog[] = "AirspaceWarnDialog";$/;"	m	namespace:ProfileKeys	file:
AirspaceWarningList	src/Engine/Airspace/AirspaceWarningManager.hpp	/^  typedef std::list<AirspaceWarning> AirspaceWarningList;$/;"	t	class:AirspaceWarningManager
AirspaceWarningList	src/MapWindow/Items/AirspaceBuilder.cpp	/^class AirspaceWarningList$/;"	c	file:
AirspaceWarningListWidget	src/Dialogs/Airspace/dlgAirspaceWarnings.cpp	/^  AirspaceWarningListWidget(ProtectedAirspaceWarningManager &aw)$/;"	f	class:final
AirspaceWarningManager	src/Engine/Airspace/AirspaceWarningManager.cpp	/^AirspaceWarningManager::AirspaceWarningManager(const AirspaceWarningConfig &_config,$/;"	f	class:AirspaceWarningManager
AirspaceWarningManager	src/Engine/Airspace/AirspaceWarningManager.hpp	/^class AirspaceWarningManager {$/;"	c
AirspaceWarningMonitor	src/Monitor/AirspaceWarningMonitor.hpp	/^  AirspaceWarningMonitor():widget(nullptr) {}$/;"	f	class:AirspaceWarningMonitor
AirspaceWarningMonitor	src/Monitor/AirspaceWarningMonitor.hpp	/^class AirspaceWarningMonitor {$/;"	c
AirspaceWarningWidget	src/Monitor/AirspaceWarningMonitor.cpp	/^  AirspaceWarningWidget(AirspaceWarningMonitor &_monitor,$/;"	f	class:final
AirspaceWarnings	src/Dialogs/Settings/Panels/AirspaceConfigPanel.cpp	/^  AirspaceWarnings,$/;"	e	enum:ControlIndex	file:
AirspaceWarningsInfo	src/NMEA/Derived.hpp	/^struct AirspaceWarningsInfo {$/;"	s
AirspaceXSRenderer	src/CrossSection/AirspaceXSRenderer.hpp	/^  AirspaceXSRenderer(const AirspaceLook &_look): look(_look) {}$/;"	f	class:AirspaceXSRenderer
AirspaceXSRenderer	src/CrossSection/AirspaceXSRenderer.hpp	/^class AirspaceXSRenderer$/;"	c
Airspaces	src/Engine/Airspace/Airspaces.hpp	/^  Airspaces(bool _owns_children=true)$/;"	f	class:Airspaces
Airspaces	src/Engine/Airspace/Airspaces.hpp	/^class Airspaces : public AirspacesInterface {$/;"	c
AirspacesInterface	src/Engine/Airspace/AirspacesInterface.hpp	/^class AirspacesInterface {$/;"	c
AlarmType	src/FLARM/Traffic.hpp	/^  enum class AlarmType: uint8_t {$/;"	c	struct:FlarmTraffic
Alignment	src/Widget/ButtonPanelWidget.hpp	/^  enum class Alignment {$/;"	c	class:ButtonPanelWidget
AllMonitors	src/Monitor/AllMonitors.cpp	/^AllMonitors::AllMonitors()$/;"	f	class:AllMonitors
AllVegasRequestSetting	src/Input/InputEventsVega.cpp	/^AllVegasRequestSetting(const char *name)$/;"	f	file:
AllVegasSendSetting	src/Input/InputEventsVega.cpp	/^AllVegasSendSetting(const char *name, int value)$/;"	f	file:
Allocate	src/ui/canvas/custom/Cache.cpp	/^  void Allocate() {$/;"	f	struct:TextCacheKey
Allocate	src/ui/canvas/memory/Buffer.hpp	/^  void Allocate(unsigned _width, unsigned _height) {$/;"	f	struct:WritableImageBuffer
Allocate	src/util/Cache.hxx	/^	Item &Allocate() {$/;"	f	class:Cache
AllocateSource	src/NMEA/ThermalLocator.cpp	/^ThermalLocatorInfo::AllocateSource()$/;"	f	class:ThermalLocatorInfo
AllocateTraffic	src/FLARM/List.hpp	/^  FlarmTraffic *AllocateTraffic() {$/;"	f	struct:TrafficList
AllocateTraffic	src/GliderLink/List.hpp	/^  GliderLinkTraffic *AllocateTraffic() {$/;"	f	struct:GliderLinkTrafficList
AllocatedArray	src/util/AllocatedArray.hxx	/^		:AllocatedArray(other.buffer) {}$/;"	f	class:AllocatedArray
AllocatedArray	src/util/AllocatedArray.hxx	/^class AllocatedArray {$/;"	c
AllocatedGrid	src/util/AllocatedGrid.hxx	/^	AllocatedGrid(unsigned _width, unsigned _height)$/;"	f	class:AllocatedGrid
AllocatedGrid	src/util/AllocatedGrid.hxx	/^class AllocatedGrid {$/;"	c
AllocatedPath	src/system/Path.hpp	/^  AllocatedPath(Path src)$/;"	f	class:AllocatedPath
AllocatedPath	src/system/Path.hpp	/^  AllocatedPath(const_pointer _begin, const_pointer _end)$/;"	f	class:AllocatedPath
AllocatedPath	src/system/Path.hpp	/^  AllocatedPath(size_t size):value(value_type::Donate(new char_type[size])) {}$/;"	f	class:AllocatedPath
AllocatedPath	src/system/Path.hpp	/^  AllocatedPath(std::nullptr_t n):value(n) {}$/;"	f	class:AllocatedPath
AllocatedPath	src/system/Path.hpp	/^  AllocatedPath(value_type &&src):value(std::move(src)) {}$/;"	f	class:AllocatedPath
AllocatedPath	src/system/Path.hpp	/^  explicit AllocatedPath(const_pointer src)$/;"	f	class:AllocatedPath
AllocatedPath	src/system/Path.hpp	/^class AllocatedPath {$/;"	c
AllocatedSocketAddress	src/net/AllocatedSocketAddress.hxx	/^		:AllocatedSocketAddress((SocketAddress)src) {}$/;"	f	class:AllocatedSocketAddress
AllocatedSocketAddress	src/net/AllocatedSocketAddress.hxx	/^	AllocatedSocketAddress(struct sockaddr *_address,$/;"	f	class:AllocatedSocketAddress
AllocatedSocketAddress	src/net/AllocatedSocketAddress.hxx	/^class AllocatedSocketAddress {$/;"	c
AllocatedString	src/util/AllocatedString.hxx	/^class AllocatedString : public BasicAllocatedString<char> {$/;"	c
Allocator	src/util/SliceAllocator.hxx	/^	typedef SliceAllocator<T, size> Allocator;$/;"	t	class:GlobalSliceAllocator
AllowIncrementalBoundaryStats	src/Engine/Task/Ordered/OrderedTask.cpp	/^OrderedTask::AllowIncrementalBoundaryStats(const AircraftState &aircraft) const$/;"	f	class:OrderedTask
AllowLanguage	src/Language/Language.cpp	/^AllowLanguage()$/;"	f
AllowLanguage	src/Language/Language.hpp	/^static inline void AllowLanguage() {}$/;"	f
AllowedCharacters	src/Dialogs/TextEntry.hpp	/^typedef std::function<const TCHAR *(const TCHAR *)> AllowedCharacters;$/;"	t
AllowedCharactersCallback	src/Dialogs/TouchTextEntry.cpp	/^static AllowedCharacters AllowedCharactersCallback;$/;"	v	file:
AllowedCharactersFunction	src/Form/DataField/Prefix.hpp	/^  typedef std::function<const TCHAR *(const TCHAR *)> AllowedCharactersFunction;$/;"	t	class:final
Alpha	src/ui/canvas/PortableColor.hpp	/^  constexpr uint8_t Alpha() const {$/;"	f	class:BGRA8Color
Alpha	src/ui/canvas/memory/Color.hpp	/^  Alpha() const$/;"	f	class:Color
Alpha	src/ui/canvas/opengl/Color.hpp	/^  Alpha() const$/;"	f	class:Color
AlphaBlend	src/ui/canvas/gdi/Canvas.cpp	/^Canvas::AlphaBlend(PixelPoint dest_position, PixelSize dest_size,$/;"	f	class:Canvas
AlphaBlend	src/ui/canvas/gdi/Canvas.hpp	/^  void AlphaBlend(PixelPoint dest_position, PixelSize dest_size,$/;"	f	class:Canvas
AlphaBlend	src/ui/canvas/memory/Canvas.cpp	/^Canvas::AlphaBlend(PixelPoint dest_position, PixelSize dest_size,$/;"	f	class:Canvas
AlphaBlend16	src/ui/canvas/memory/NEON.hpp	/^  static void AlphaBlend16(uint8_t *gcc_restrict p,$/;"	f	class:NEONAlphaPixelOperations
AlphaBlend4	src/ui/canvas/memory/MMX.hpp	/^  static __m64 AlphaBlend4(__m64 p, __m64 q,$/;"	f	class:MMXAlphaPixelOperations
AlphaBlendNotWhite	src/ui/canvas/memory/Canvas.cpp	/^Canvas::AlphaBlendNotWhite(PixelPoint dest_position, PixelSize dest_size,$/;"	f	class:Canvas
AlphaBlendTo	src/Renderer/TransparentRendererCache.cpp	/^TransparentRendererCache::AlphaBlendTo(Canvas &canvas,$/;"	f	class:TransparentRendererCache
AlphaBlendTo	src/Renderer/TransparentRendererCache.hpp	/^  void AlphaBlendTo(Canvas &canvas, const WindowProjection &projection,$/;"	f	class:TransparentRendererCache
AlphaPixelOperations	src/ui/canvas/memory/Optimised.hpp	/^  explicit constexpr AlphaPixelOperations(const uint8_t alpha)$/;"	f	class:AlphaPixelOperations
AlphaPixelOperations	src/ui/canvas/memory/Optimised.hpp	/^class AlphaPixelOperations$/;"	c
AlphaPixelOperations	src/ui/canvas/memory/Optimised.hpp	/^class AlphaPixelOperations<BGRAPixelTraits>$/;"	c
AlphaPixelOperations	src/ui/canvas/memory/Optimised.hpp	/^class AlphaPixelOperations<GreyscalePixelTraits>$/;"	c
AltArivalAGL	src/Renderer/WaypointLabelList.hpp	/^    int AltArivalAGL;$/;"	m	struct:WaypointLabelList::Label
AltMargin	src/Profile/ProfileKeys.cpp	/^const char AltMargin[] = "AltMargin";$/;"	m	namespace:ProfileKeys	file:
AltMode	src/Profile/ProfileKeys.cpp	/^const char AltMode[] = "AltitudeMode";$/;"	m	namespace:ProfileKeys	file:
AltWarningMargin	src/Dialogs/Settings/Panels/AirspaceConfigPanel.cpp	/^  AltWarningMargin,$/;"	e	enum:ControlIndex	file:
AltairProCreateOnPort	src/Device/Driver/AltairPro.cpp	/^AltairProCreateOnPort(const DeviceConfig &config, Port &com_port)$/;"	f	file:
AltairProDevice	src/Device/Driver/AltairPro.cpp	/^  AltairProDevice(Port &_port):port(_port){}$/;"	f	class:AltairProDevice
AltairProDevice	src/Device/Driver/AltairPro.cpp	/^class AltairProDevice : public AbstractDevice {$/;"	c	file:
AlternateList	src/Engine/Task/Unordered/AlternateList.hpp	/^class AlternateList : public std::vector<AlternatePoint> {$/;"	c
AlternateMode	src/Dialogs/Settings/Panels/SafetyFactorsConfigPanel.cpp	/^  AlternateMode,$/;"	e	enum:ControlIndex	file:
AlternatePoint	src/Engine/Task/Unordered/AlternatePoint.hpp	/^  AlternatePoint(const WaypointPtr &_waypoint, const GlideResult &_solution)$/;"	f	struct:AlternatePoint
AlternatePoint	src/Engine/Task/Unordered/AlternatePoint.hpp	/^  explicit AlternatePoint(const WaypointPtr &_waypoint)$/;"	f	struct:AlternatePoint
AlternatePoint	src/Engine/Task/Unordered/AlternatePoint.hpp	/^struct AlternatePoint {$/;"	s
AlternateTaskPoint	src/Engine/Task/Unordered/AbortTask.hpp	/^  struct AlternateTaskPoint {$/;"	s	class:AbortTask
AlternatesListWidget	src/Dialogs/Task/AlternatesListDialog.cpp	/^  AlternatesListWidget(const DialogLook &_dialog_look)$/;"	f	class:final
Altitude	src/Dialogs/Settings/dlgBasicSettings.cpp	/^  Altitude,$/;"	e	enum:ControlIndex	file:
Altitude	src/Dialogs/StatusPanels/FlightStatusPanel.cpp	/^  Altitude,$/;"	e	enum:Controls	file:
AltitudeInfoPanel	src/InfoBoxes/Panel/AltitudeInfo.cpp	/^class AltitudeInfoPanel : public TwoWidgets, NullBlackboardListener {$/;"	c	file:
AltitudeReference	src/Geo/AltitudeReference.hpp	/^enum class AltitudeReference : int8_t {$/;"	c
AltitudeSetupPanel	src/InfoBoxes/Panel/AltitudeSetup.cpp	/^  AltitudeSetupPanel():RowFormWidget(UIGlobals::GetDialogLook()) {}$/;"	f	class:AltitudeSetupPanel
AltitudeSetupPanel	src/InfoBoxes/Panel/AltitudeSetup.cpp	/^class AltitudeSetupPanel : public RowFormWidget,$/;"	c	file:
AltitudeState	src/Engine/Navigation/Aircraft.hpp	/^struct AltitudeState $/;"	s
AltitudeUnit	src/Dialogs/Device/CAI302/UnitsEditor.hpp	/^    AltitudeUnit,$/;"	e	enum:final::Controls
AltitudeUnitsValue	src/Profile/ProfileKeys.cpp	/^const char AltitudeUnitsValue[] = "AltitudeUnit";$/;"	m	namespace:ProfileKeys	file:
AlwaysTrue	src/util/QuadTree.hxx	/^	struct AlwaysTrue {$/;"	s	class:QuadTree
AnalysisPage	src/Dialogs/dlgAnalysis.hpp	/^enum class AnalysisPage {$/;"	c
AnalysisWidget	src/Dialogs/dlgAnalysis.cpp	/^  AnalysisWidget(WndForm &_dialog, const Look &look,$/;"	f	class:final
AndPredicate	src/Engine/Airspace/Predicate/AirspacePredicate.hpp	/^  constexpr AndPredicate(A_ &&a, B_ &&b)$/;"	f	class:AndPredicate
AndPredicate	src/Engine/Airspace/Predicate/AirspacePredicate.hpp	/^class AndPredicate : A, B {$/;"	c
AndroidBitmap	src/Android/Bitmap.hpp	/^class AndroidBitmap {$/;"	c
AndroidDownloadManager	src/Android/DownloadManager.hpp	/^class AndroidDownloadManager {$/;"	c
AndroidIOIOUartPort	src/Device/Port/AndroidIOIOUartPort.hpp	/^namespace AndroidIOIOUartPort$/;"	n
AndroidPCMPlayer	src/Audio/AndroidPCMPlayer.hpp	/^class AndroidPCMPlayer : public PCMPlayer {$/;"	c
AndroidPort	src/Device/Port/AndroidPort.cpp	/^AndroidPort::AndroidPort(PortListener *_listener, DataHandler &_handler,$/;"	f	class:AndroidPort
AndroidPort	src/Device/Port/AndroidPort.hpp	/^class AndroidPort : public BufferedPort$/;"	c
AndroidSimpleBufferQueue	src/Audio/SLES/AndroidSimpleBufferQueue.hpp	/^    explicit AndroidSimpleBufferQueue(SLAndroidSimpleBufferQueueItf _queue)$/;"	f	class:SLES::AndroidSimpleBufferQueue
AndroidSimpleBufferQueue	src/Audio/SLES/AndroidSimpleBufferQueue.hpp	/^  class AndroidSimpleBufferQueue {$/;"	c	namespace:SLES
Angle	src/Math/Angle.hpp	/^  constexpr Angle(DMS dms):Angle(Degrees(dms.ToFloat())) {}$/;"	f	class:Angle
Angle	src/Math/Angle.hpp	/^  explicit constexpr Angle(const double _value):value(_value) {};$/;"	f	class:Angle
Angle	src/Math/Angle.hpp	/^class Angle$/;"	c
AngleAdd	src/Device/Driver/IMI/Protocol/IGC.cpp	/^AngleAdd(IMI::IMIDWORD dwA, long diff)$/;"	f	file:
AngleConverter	src/Device/Driver/IMI/Protocol/Conversion.cpp	/^IMI::AngleConverter::AngleConverter(Angle angle)$/;"	f	class:IMI::AngleConverter
AngleConverter	src/Device/Driver/IMI/Protocol/Conversion.hpp	/^    AngleConverter() {}$/;"	f	struct:IMI::AngleConverter
AngleConverter	src/Device/Driver/IMI/Protocol/Conversion.hpp	/^  struct AngleConverter$/;"	s	namespace:IMI
AngleDataField	src/Form/DataField/Angle.hpp	/^  AngleDataField(Angle _value, unsigned _step, bool _fine,$/;"	f	class:final
AngleDataField	src/Form/DataField/Angle.hpp	/^  AngleDataField(int _value, unsigned _step, bool _fine,$/;"	f	class:final
AngleDataField	src/Form/DataField/Angle.hpp	/^  AngleDataField(unsigned _value, unsigned _step, bool _fine,$/;"	f	class:final
AngleEntryDialog	src/Dialogs/NumberEntry.cpp	/^AngleEntryDialog(const TCHAR *caption, Angle &value)$/;"	f
AngleRange	src/Math/ARange.hpp	/^struct AngleRange {$/;"	s
AngleToDonutVertex	src/ui/canvas/opengl/Canvas.cpp	/^AngleToDonutVertex(Angle angle)$/;"	f	file:
AngleToDonutVertices	src/ui/canvas/opengl/Canvas.cpp	/^AngleToDonutVertices(Angle start, Angle end)$/;"	f	file:
AngleToEarthDistance	src/Geo/FAISphere.hpp	/^  AngleToEarthDistance(Angle angle)$/;"	f	namespace:FAISphere
AngleToGradient	src/Engine/Util/Gradient.cpp	/^AngleToGradient(const double d)$/;"	f
AngleToHeight	src/Terrain/RasterProjection.hpp	/^  constexpr int AngleToHeight(Angle angle) const {$/;"	f	class:RasterProjection
AngleToLX	src/Device/Driver/LX/Declare.cpp	/^AngleToLX(Angle value)$/;"	f	file:
AngleToWidth	src/Terrain/RasterProjection.hpp	/^  constexpr int AngleToWidth(Angle angle) const {$/;"	f	class:RasterProjection
AnnularSectorZone	src/Engine/Task/ObservationZones/AnnularSectorZone.hpp	/^  AnnularSectorZone(Shape _shape, bool _can_start_through_top,$/;"	f	class:AnnularSectorZone
AnnularSectorZone	src/Engine/Task/ObservationZones/AnnularSectorZone.hpp	/^  AnnularSectorZone(const AnnularSectorZone &other, const GeoPoint &reference)$/;"	f	class:AnnularSectorZone
AnnularSectorZone	src/Engine/Task/ObservationZones/AnnularSectorZone.hpp	/^  AnnularSectorZone(const GeoPoint &loc,$/;"	f	class:AnnularSectorZone
AnnularSectorZone	src/Engine/Task/ObservationZones/AnnularSectorZone.hpp	/^class AnnularSectorZone:$/;"	c
AntiFlickerWindow	src/ui/window/AntiFlickerWindow.hpp	/^class AntiFlickerWindow : public BufferWindow {$/;"	c
AntiFlickerWindow	src/ui/window/AntiFlickerWindow.hpp	/^class AntiFlickerWindow : public FakeBufferWindow {$/;"	c
AnyCanvas	src/ui/canvas/AnyCanvas.hpp	/^  AnyCanvas():VirtualCanvas({1, 1}) {}$/;"	f	class:AnyCanvas
AnyCanvas	src/ui/canvas/AnyCanvas.hpp	/^class AnyCanvas : public Canvas {};$/;"	c
AnyCanvas	src/ui/canvas/AnyCanvas.hpp	/^class AnyCanvas : public VirtualCanvas {$/;"	c
AppAveNeedle	src/Dialogs/Settings/Panels/VarioConfigPanel.cpp	/^  AppAveNeedle,$/;"	e	enum:ControlIndex	file:
AppAveNeedle	src/Profile/ProfileKeys.cpp	/^const char AppAveNeedle[] = "AppAveNeedle";$/;"	m	namespace:ProfileKeys	file:
AppAveThermalNeedle	src/Dialogs/Settings/Panels/VarioConfigPanel.cpp	/^  AppAveThermalNeedle,$/;"	e	enum:ControlIndex	file:
AppAveThermalNeedle	src/Profile/ProfileKeys.cpp	/^const char AppAveThermalNeedle[] = "AppAveThermalNeedle";$/;"	m	namespace:ProfileKeys	file:
AppDialogStyle	src/Profile/ProfileKeys.cpp	/^const char AppDialogStyle[] = "AppDialogStyle";$/;"	m	namespace:ProfileKeys	file:
AppDialogTabStyle	src/Profile/ProfileKeys.cpp	/^const char AppDialogTabStyle[] = "AppDialogTabStyle";$/;"	m	namespace:ProfileKeys	file:
AppFlarmLocation	src/Dialogs/Settings/Panels/LayoutConfigPanel.cpp	/^  AppFlarmLocation,$/;"	e	enum:ControlIndex	file:
AppGaugeVarioAvgText	src/Dialogs/Settings/Panels/VarioConfigPanel.cpp	/^  AppGaugeVarioAvgText,$/;"	e	enum:ControlIndex	file:
AppGaugeVarioAvgText	src/Profile/ProfileKeys.cpp	/^const char AppGaugeVarioAvgText[] = "AppGaugeVarioAvgText";$/;"	m	namespace:ProfileKeys	file:
AppGaugeVarioBallast	src/Dialogs/Settings/Panels/VarioConfigPanel.cpp	/^  AppGaugeVarioBallast,$/;"	e	enum:ControlIndex	file:
AppGaugeVarioBallast	src/Profile/ProfileKeys.cpp	/^const char AppGaugeVarioBallast[] = "AppGaugeVarioBallast";$/;"	m	namespace:ProfileKeys	file:
AppGaugeVarioBugs	src/Dialogs/Settings/Panels/VarioConfigPanel.cpp	/^  AppGaugeVarioBugs,$/;"	e	enum:ControlIndex	file:
AppGaugeVarioBugs	src/Profile/ProfileKeys.cpp	/^const char AppGaugeVarioBugs[] = "AppGaugeVarioBugs";$/;"	m	namespace:ProfileKeys	file:
AppGaugeVarioGross	src/Dialogs/Settings/Panels/VarioConfigPanel.cpp	/^  AppGaugeVarioGross,$/;"	e	enum:ControlIndex	file:
AppGaugeVarioGross	src/Profile/ProfileKeys.cpp	/^const char AppGaugeVarioGross[] = "AppGaugeVarioGross";$/;"	m	namespace:ProfileKeys	file:
AppGaugeVarioMc	src/Dialogs/Settings/Panels/VarioConfigPanel.cpp	/^  AppGaugeVarioMc,$/;"	e	enum:ControlIndex	file:
AppGaugeVarioMc	src/Profile/ProfileKeys.cpp	/^const char AppGaugeVarioMc[] = "AppGaugeVarioMc";$/;"	m	namespace:ProfileKeys	file:
AppGaugeVarioSpeedToFly	src/Dialogs/Settings/Panels/VarioConfigPanel.cpp	/^  AppGaugeVarioSpeedToFly,$/;"	e	enum:ControlIndex	file:
AppGaugeVarioSpeedToFly	src/Profile/ProfileKeys.cpp	/^const char AppGaugeVarioSpeedToFly[] = "AppGaugeVarioSpeedToFly";$/;"	m	namespace:ProfileKeys	file:
AppIndLandable	src/Dialogs/Settings/Panels/WaypointDisplayConfigPanel.cpp	/^  AppIndLandable,$/;"	e	enum:ControlIndex	file:
AppIndLandable	src/Profile/ProfileKeys.cpp	/^const char AppIndLandable[] = "AppIndLandable";$/;"	m	namespace:ProfileKeys	file:
AppInfoBoxBorder	src/Dialogs/Settings/Panels/LayoutConfigPanel.cpp	/^  AppInfoBoxBorder,$/;"	e	enum:ControlIndex	file:
AppInfoBoxBorder	src/Profile/ProfileKeys.cpp	/^const char AppInfoBoxBorder[] = "AppInfoBoxBorder";$/;"	m	namespace:ProfileKeys	file:
AppInfoBoxColors	src/Dialogs/Settings/Panels/LayoutConfigPanel.cpp	/^  AppInfoBoxColors,$/;"	e	enum:ControlIndex	file:
AppInfoBoxColors	src/Profile/ProfileKeys.cpp	/^const char AppInfoBoxColors[] = "AppInfoBoxColors";$/;"	m	namespace:ProfileKeys	file:
AppInfoBoxGeom	src/Dialogs/Settings/Panels/LayoutConfigPanel.cpp	/^  AppInfoBoxGeom,$/;"	e	enum:ControlIndex	file:
AppInverseInfoBox	src/Dialogs/Settings/Panels/LayoutConfigPanel.cpp	/^  AppInverseInfoBox,$/;"	e	enum:ControlIndex	file:
AppInverseInfoBox	src/Profile/ProfileKeys.cpp	/^const char AppInverseInfoBox[] = "AppInverseInfoBox";$/;"	m	namespace:ProfileKeys	file:
AppLandableRenderingScale	src/Dialogs/Settings/Panels/WaypointDisplayConfigPanel.cpp	/^  AppLandableRenderingScale,$/;"	e	enum:ControlIndex	file:
AppLandableRenderingScale	src/Profile/ProfileKeys.cpp	/^const char AppLandableRenderingScale[] = "AppLandableRenderingScale";$/;"	m	namespace:ProfileKeys	file:
AppScaleRunwayLength	src/Dialogs/Settings/Panels/WaypointDisplayConfigPanel.cpp	/^  AppScaleRunwayLength$/;"	e	enum:ControlIndex	file:
AppScaleRunwayLength	src/Profile/ProfileKeys.cpp	/^const char AppScaleRunwayLength[] = "AppScaleRunwayLength";$/;"	m	namespace:ProfileKeys	file:
AppStatusMessageAlignment	src/Dialogs/Settings/Panels/LayoutConfigPanel.cpp	/^  AppStatusMessageAlignment,$/;"	e	enum:ControlIndex	file:
AppStatusMessageAlignment	src/Profile/ProfileKeys.cpp	/^const char AppStatusMessageAlignment[] = "AppStatusMessageAlignment";$/;"	m	namespace:ProfileKeys	file:
AppTextInputStyle	src/Profile/ProfileKeys.cpp	/^const char AppTextInputStyle[] = "AppTextInputStyle";$/;"	m	namespace:ProfileKeys	file:
AppUseSWLandablesRendering	src/Dialogs/Settings/Panels/WaypointDisplayConfigPanel.cpp	/^  AppUseSWLandablesRendering,$/;"	e	enum:ControlIndex	file:
AppUseSWLandablesRendering	src/Profile/ProfileKeys.cpp	/^const char AppUseSWLandablesRendering[] = "AppUseSWLandablesRendering";$/;"	m	namespace:ProfileKeys	file:
Append	src/Device/Declaration.hpp	/^  void Append(const Waypoint &waypoint) {$/;"	f	struct:Declaration
Append	src/Engine/Task/Factory/AbstractTaskFactory.cpp	/^AbstractTaskFactory::Append(const OrderedTaskPoint &new_tp,$/;"	f	class:AbstractTaskFactory
Append	src/Engine/Task/Ordered/OrderedTask.cpp	/^OrderedTask::Append(const OrderedTaskPoint &new_tp)$/;"	f	class:OrderedTask
Append	src/Engine/Waypoint/Waypoints.cpp	/^Waypoints::Append(WaypointPtr wp)$/;"	f	class:Waypoints
Append	src/Engine/Waypoint/Waypoints.hpp	/^  WaypointPtr Append(Waypoint &&wp) {$/;"	f	class:Waypoints
Append	src/Form/DataField/ComboList.hpp	/^  unsigned Append(const TCHAR *string_value) {$/;"	f	class:ComboList
Append	src/Form/DataField/ComboList.hpp	/^  unsigned Append(const TCHAR *string_value,$/;"	f	class:ComboList
Append	src/Form/DataField/ComboList.hpp	/^  unsigned Append(int int_value, const TCHAR *string_value) {$/;"	f	class:ComboList
Append	src/Form/DataField/ComboList.hpp	/^  unsigned Append(int int_value,$/;"	f	class:ComboList
Append	src/Kobo/WifiDialog.cpp	/^WifiListWidget::Append(const WifiConfiguredNetworkInfo &src)$/;"	f	class:WifiListWidget
Append	src/MapWindow/MapWindowGlideRange.cpp	/^  ProjectedFan &Append(unsigned n) {$/;"	f	struct:ProjectedFans
Append	src/MapWindow/MapWindowGlideRange.cpp	/^  void Append(const PixelPoint &pt) {$/;"	f	struct:ProjectedFans
Append	src/net/http/Slist.hxx	/^	void Append(const char *value) {$/;"	f	class:CurlSlist
Append	src/util/MD5.cpp	/^MD5::Append(const void *data, size_t length)$/;"	f	class:MD5
Append	src/util/MD5.cpp	/^MD5::Append(uint8_t ch)$/;"	f	class:MD5
Append	src/util/StringBuilder.hxx	/^	void Append(T ch) {$/;"	f	class:StringBuilder
Append	src/util/StringBuilder.hxx	/^	void Append(T ch, Args&&... args) {$/;"	f	class:StringBuilder
Append	src/util/StringBuilder.hxx	/^	void Append(const_pointer src) {$/;"	f	class:StringBuilder
Append	src/util/StringBuilder.hxx	/^	void Append(const_pointer src, Args&&... args) {$/;"	f	class:StringBuilder
Append	src/util/StringBuilder.hxx	/^	void Append(const_pointer src, size_t length) {$/;"	f	class:StringBuilder
Append	src/util/StringBuilder.hxx	/^	void Append(const_pointer src, size_t length, Args&&... args) {$/;"	f	class:StringBuilder
AppendArc	src/Airspace/AirspaceParser.cpp	/^  AppendArc(Angle start, Angle end)$/;"	f	struct:TempAirspaceType
AppendArc	src/Airspace/AirspaceParser.cpp	/^  AppendArc(const GeoPoint start, const GeoPoint end)$/;"	f	struct:TempAirspaceType
AppendComboValue	src/Form/DataField/Angle.cpp	/^AppendComboValue(ComboList &combo_list, unsigned value)$/;"	f	file:
AppendComboValue	src/Form/DataField/Float.cpp	/^DataFieldFloat::AppendComboValue(ComboList &combo_list, double value) const$/;"	f	class:DataFieldFloat
AppendComboValue	src/Form/DataField/Integer.cpp	/^DataFieldInteger::AppendComboValue(ComboList &combo_list, int value) const$/;"	f	class:DataFieldInteger
AppendComboValue	src/Form/DataField/Time.cpp	/^DataFieldTime::AppendComboValue(ComboList &combo_list, int value) const$/;"	f	class:DataFieldTime
AppendEvent	src/Input/InputConfig.hpp	/^  unsigned AppendEvent(pt2Event handler, const TCHAR *misc,$/;"	f	struct:InputConfig
AppendFormat	src/util/StaticString.hxx	/^	void AppendFormat(const_pointer fmt, Args&&... args) {$/;"	f	class:StaticStringBase
AppendGRecordToFile	src/Logger/GRecord.cpp	/^GRecord::AppendGRecordToFile(Path path)$/;"	f	class:GRecord
AppendIGCString	src/Logger/GRecord.cpp	/^AppendIGCString(MD5 &md5, const char *s, bool ignore_comma)$/;"	f	file:
AppendMenu	src/Input/InputConfig.hpp	/^  void AppendMenu(unsigned mode_id, const TCHAR* label,$/;"	f	struct:InputConfig
AppendMenu	src/Input/InputDefaults.cpp	35;"	d	file:
AppendMode	src/Input/InputConfig.hpp	/^  int AppendMode(TStringView name) {$/;"	f	struct:InputConfig
AppendNMEAChecksum	src/NMEA/Checksum.cpp	/^AppendNMEAChecksum(char *p)$/;"	f
AppendOptionalStart	src/Engine/Task/Factory/AbstractTaskFactory.cpp	/^AbstractTaskFactory::AppendOptionalStart(WaypointPtr wp)$/;"	f	class:AbstractTaskFactory
AppendOptionalStart	src/Engine/Task/Factory/AbstractTaskFactory.cpp	/^AbstractTaskFactory::AppendOptionalStart(const OrderedTaskPoint &new_tp,$/;"	f	class:AbstractTaskFactory
AppendOptionalStart	src/Engine/Task/Ordered/OrderedTask.cpp	/^OrderedTask::AppendOptionalStart(const OrderedTaskPoint &new_tp)$/;"	f	class:OrderedTask
AppendRecordToBuffer	src/Logger/GRecord.cpp	/^GRecord::AppendRecordToBuffer(const char *in)$/;"	f	class:GRecord
AppendStringToBuffer	src/Logger/GRecord.cpp	/^GRecord::AppendStringToBuffer(const char *in)$/;"	f	class:GRecord
AppendToTask	src/Dialogs/Waypoint/WaypointCommandsWidget.cpp	/^AppendToTask(ProtectedTaskManager &task_manager,$/;"	f	file:
AppendToTask	src/Task/MapTaskManager.cpp	/^MapTaskManager::AppendToTask(WaypointPtr &&waypoint)$/;"	f	class:MapTaskManager
Apply	src/IGC/IGCFix.cpp	/^IGCFix::Apply(const NMEAInfo &basic)$/;"	f	class:IGCFix
ApplyExternalSettings	src/ApplyExternalSettings.cpp	/^ApplyExternalSettings()$/;"	f
ApplyUnit	src/Profile/UnitsConfig.cpp	/^ApplyUnit(Unit &value, Unit new_value)$/;"	f	file:
ApplyVegaSwitches	src/ApplyVegaSwitches.cpp	/^ApplyVegaSwitches()$/;"	f
ApproxRadius	src/Geo/Flat/TaskProjection.cpp	/^TaskProjection::ApproxRadius() const$/;"	f	class:TaskProjection
ArcStepWidth	src/Airspace/AirspaceParser.cpp	/^  ArcStepWidth(double radius)$/;"	f	struct:TempAirspaceType
AreAxesSwapped	src/DisplayOrientation.hpp	/^AreAxesSwapped(DisplayOrientation orientation)$/;"	f
Area	src/Weather/PCMet/Overlays.hpp	/^  enum class Area {$/;"	c	struct:PCMet::OverlayInfo
Area	src/util/SliceAllocator.hxx	/^		Area()$/;"	f	struct:SliceAllocator::Area
Area	src/util/SliceAllocator.hxx	/^	struct Area {$/;"	s	class:SliceAllocator
Args	src/system/Args.hpp	/^  Args(Args &&other):name(other.name), usage(other.usage) {$/;"	f	class:Args
Args	src/system/Args.hpp	/^  Args(const TCHAR *_cmdline, const char *_usage)$/;"	f	class:Args
Args	src/system/Args.hpp	/^  Args(int argc, char **argv, const char *_usage)$/;"	f	class:Args
Args	src/system/Args.hpp	/^class Args {$/;"	c
Array	src/FLARM/NameDatabase.hpp	/^  typedef StaticArray<Record, 200> Array;$/;"	t	class:FlarmNameDatabase
ArrayWriter	src/JSON/Writer.hpp	/^    ArrayWriter(BufferedOutputStream &_writer):writer(_writer), first(true) {$/;"	f	class:JSON::ArrayWriter
ArrayWriter	src/JSON/Writer.hpp	/^  class ArrayWriter {$/;"	c	namespace:JSON
ArrivalAltitudeMapItem	src/MapWindow/Items/MapItem.hpp	/^  ArrivalAltitudeMapItem(double _elevation,$/;"	f	struct:ArrivalAltitudeMapItem
ArrivalAltitudeMapItem	src/MapWindow/Items/MapItem.hpp	/^struct ArrivalAltitudeMapItem: public MapItem$/;"	s
ArrivalHeight	src/Dialogs/Settings/Panels/SafetyFactorsConfigPanel.cpp	/^  ArrivalHeight,$/;"	e	enum:ControlIndex	file:
ArrivalHeightDisplay	src/Renderer/WaypointRendererSettings.hpp	/^  enum class ArrivalHeightDisplay : uint8_t {$/;"	c	struct:WaypointRendererSettings
ArrowPagerWidget	src/Widget/ArrowPagerWidget.hpp	/^class ArrowPagerWidget : public PagerWidget {$/;"	c
AsBearing	src/Math/Angle.cpp	/^Angle::AsBearing() const$/;"	f	class:Angle
AsDelta	src/Math/Angle.cpp	/^Angle::AsDelta() const$/;"	f	class:Angle
AsMinutes	src/time/RoughTime.hpp	/^  constexpr int AsMinutes() const {$/;"	f	class:RoughTimeDelta
AsSeconds	src/time/RoughTime.hpp	/^  constexpr int AsSeconds() const {$/;"	f	class:RoughTimeDelta
AsSocketAddress	src/event/net/cares/Channel.cxx	/^AsSocketAddress(const struct hostent &he, const void *src, F &&f)$/;"	f	namespace:Cares
AsVector	src/Engine/Airspace/Airspaces.cpp	/^Airspaces::AsVector() const$/;"	f	class:Airspaces
AsioThread	src/io/async/AsioThread.hpp	/^  AsioThread():Thread("asio") {}$/;"	f	class:final
AssociatePointer	src/lua/Associate.cpp	/^Lua::AssociatePointer(lua_State *L, const char *table,$/;"	f	class:Lua
AsyncAccept	src/Device/Port/TCPPort.hpp	/^  void AsyncAccept() {$/;"	f	class:final
AsyncJobRunner	src/Job/Async.hpp	/^  AsyncJobRunner():running(false) {}$/;"	f	class:final
AsyncRead	src/Device/Port/TCPPort.hpp	/^  void AsyncRead() {$/;"	f	class:final
At	src/ui/canvas/memory/Buffer.hpp	/^  constexpr const_pointer At(unsigned x, unsigned y) const {$/;"	f	struct:WritableImageBuffer
At	src/ui/canvas/memory/Buffer.hpp	/^  constexpr pointer At(unsigned x, unsigned y) const {$/;"	f	struct:ConstImageBuffer
At	src/ui/canvas/memory/Buffer.hpp	/^  constexpr pointer At(unsigned x, unsigned y) {$/;"	f	struct:WritableImageBuffer
At	src/ui/canvas/memory/PixelTraits.hpp	/^  static constexpr const_pointer At(const_pointer p, unsigned pitch,$/;"	f	struct:BGRAPixelTraits
At	src/ui/canvas/memory/PixelTraits.hpp	/^  static constexpr const_pointer At(const_pointer p, unsigned pitch,$/;"	f	struct:GreyscalePixelTraits
At	src/ui/canvas/memory/PixelTraits.hpp	/^  static constexpr pointer At(pointer p, unsigned pitch,$/;"	f	struct:BGRAPixelTraits
At	src/ui/canvas/memory/PixelTraits.hpp	/^  static constexpr pointer At(pointer p, unsigned pitch,$/;"	f	struct:GreyscalePixelTraits
At	src/ui/canvas/memory/RasterCanvas.hpp	/^  pointer At(unsigned x, unsigned y) {$/;"	f	class:RasterCanvas
AtMidnight	src/time/BrokenDateTime.hpp	/^  BrokenDateTime AtMidnight() const {$/;"	f	struct:BrokenDateTime
AtScopeExit	src/util/ScopeExit.hxx	85;"	d
AtmosphericPressure	src/Atmosphere/Pressure.hpp	/^  AtmosphericPressure(double _value):value(_value) {}$/;"	f	class:AtmosphericPressure
AtmosphericPressure	src/Atmosphere/Pressure.hpp	/^class AtmosphericPressure $/;"	c
AttachEnum	src/lua/InputEvent.cpp	/^  void AttachEnum(unsigned code) {$/;"	f	class:final
AttachFramebuffer	src/ui/canvas/opengl/RenderBuffer.hpp	/^  void AttachFramebuffer(GLenum attachment) {$/;"	f	class:GLRenderBuffer
AttachGesture	src/lua/InputEvent.cpp	/^  void AttachGesture(const TCHAR* gesture) {$/;"	f	class:final
AttachKey	src/lua/InputEvent.cpp	/^  void AttachKey(unsigned code) {$/;"	f	class:final
AttitudeState	src/NMEA/Attitude.hpp	/^struct AttitudeState$/;"	s
Attrib	src/XML/Parser.cpp	/^  enum Attrib {$/;"	g	namespace:XML	file:
Attribute	src/XML/Node.hpp	/^      Attribute(const TCHAR *_name, const TCHAR *_value)$/;"	f	struct:XMLNode::Data::Attribute
Attribute	src/XML/Node.hpp	/^      Attribute(const TCHAR *_name, size_t name_length,$/;"	f	struct:XMLNode::Data::Attribute
Attribute	src/XML/Node.hpp	/^      Attribute(tstring &&_name, const TCHAR *_value, size_t value_length)$/;"	f	struct:XMLNode::Data::Attribute
Attribute	src/XML/Node.hpp	/^    struct Attribute : private NonCopyable {$/;"	s	struct:XMLNode::Data
Attribute	src/ui/canvas/opengl/Attribute.hpp	/^namespace OpenGL::Attribute {$/;"	n	class:OpenGL
Audio	src/Dialogs/Device/Vega/Schemes.hpp	/^  struct Audio {$/;"	s	struct:VEGA_SCHEME
AudioCallback	src/Audio/SDLPCMPlayer.cpp	/^SDLPCMPlayer::AudioCallback(int16_t *stream, size_t len_bytes)$/;"	f	class:SDLPCMPlayer
AudioConfigPanel	src/Dialogs/Settings/Panels/AudioConfigPanel.cpp	/^  AudioConfigPanel() : RowFormWidget(UIGlobals::GetDialogLook()) {$/;"	f	class:final
AudioVarioConfigPanel	src/Dialogs/Settings/Panels/AudioVarioConfigPanel.cpp	/^  AudioVarioConfigPanel()$/;"	f	class:final
AudioVarioGlue	src/Audio/VarioGlue.hpp	/^namespace AudioVarioGlue {$/;"	n
Auto	src/Dialogs/WidgetDialog.hpp	/^  struct Auto {};$/;"	s	class:WidgetDialog
Auto	src/Gauge/TrafficSettings.hpp	/^    Auto,$/;"	m	class:TrafficSettings::GaugeLocation
AutoAdvance	src/Profile/ProfileKeys.cpp	/^const char AutoAdvance[] = "AutoAdvance";$/;"	m	namespace:ProfileKeys	file:
AutoBugs	src/Dialogs/Settings/Panels/SafetyFactorsConfigPanel.cpp	/^  AutoBugs,$/;"	e	enum:ControlIndex	file:
AutoBugs	src/Profile/ProfileKeys.cpp	/^const char AutoBugs[] = "AutoBugs";$/;"	m	namespace:ProfileKeys	file:
AutoCloseFlarmDialog	src/Dialogs/Settings/Panels/GaugesConfigPanel.cpp	/^  AutoCloseFlarmDialog,$/;"	e	enum:ControlIndex	file:
AutoCloseFlarmDialog	src/Profile/ProfileKeys.cpp	/^const char AutoCloseFlarmDialog[] = "AutoCloseFlarmDialog";$/;"	m	namespace:ProfileKeys	file:
AutoDetect	src/Units/UnitsGlue.cpp	/^AutoDetect()$/;"	f	file:
AutoDetectLanguage	src/Language/LanguageGlue.cpp	/^AutoDetectLanguage()$/;"	f	file:
AutoHide	src/Dialogs/Airspace/dlgAirspaceWarnings.cpp	/^AutoHide()$/;"	f	file:
AutoLoad	src/Dialogs/Traffic/TrafficList.cpp	/^    void AutoLoad() {$/;"	f	struct:TrafficListWidget::Item
AutoLogger	src/Logger/Settings.hpp	/^  enum class AutoLogger: uint8_t {$/;"	c	struct:LoggerSettings
AutoLogger	src/Profile/ProfileKeys.cpp	/^const char AutoLogger[] = "AutoLogger";$/;"	m	namespace:ProfileKeys	file:
AutoMCMode	src/Engine/Task/TaskBehaviour.hpp	/^  enum class AutoMCMode: uint8_t {$/;"	c	struct:TaskBehaviour
AutoMc	src/Profile/ProfileKeys.cpp	/^const char AutoMc[] = "AutoMc";$/;"	m	namespace:ProfileKeys	file:
AutoMcMode	src/Dialogs/Settings/Panels/GlideComputerConfigPanel.cpp	/^  AutoMcMode,$/;"	e	enum:ControlIndex	file:
AutoMcMode	src/Profile/ProfileKeys.cpp	/^const char AutoMcMode[] = "AutoMcMode";$/;"	m	namespace:ProfileKeys	file:
AutoQNH	src/Computer/AutoQNH.hpp	/^  constexpr AutoQNH(const unsigned qnh_time = 10)$/;"	f	class:AutoQNH
AutoQNH	src/Computer/AutoQNH.hpp	/^class AutoQNH {$/;"	c
AutoReopen	src/Device/Descriptor.cpp	/^DeviceDescriptor::AutoReopen(OperationEnvironment &env)$/;"	f	class:DeviceDescriptor
AutoReopen	src/Device/MultipleDevices.cpp	/^MultipleDevices::AutoReopen(OperationEnvironment &env)$/;"	f	class:MultipleDevices
AutoSize	src/Dialogs/WidgetDialog.cpp	/^WidgetDialog::AutoSize()$/;"	f	class:WidgetDialog
AutoSizeFont	src/Look/AutoFont.cpp	/^AutoSizeFont(FontDescription &d, unsigned width, const TCHAR *text)$/;"	f
AutoUnlinkIntrusiveListHook	src/util/IntrusiveList.hxx	/^class AutoUnlinkIntrusiveListHook : public SafeLinkIntrusiveListHook {$/;"	c
AutoWind	src/Dialogs/Settings/WindSettingsPanel.hpp	/^    AutoWind,$/;"	e	enum:final::ControlIndex
AutoWind	src/Profile/ProfileKeys.cpp	/^const char AutoWind[] = "AutoWind";$/;"	m	namespace:ProfileKeys	file:
AutoWindModeBits	src/Computer/Wind/Settings.hpp	/^enum AutoWindModeBits$/;"	g
AutoZoom	src/Profile/ProfileKeys.cpp	/^const char AutoZoom[] = "AutoZoom";$/;"	m	namespace:ProfileKeys	file:
AutopilotParameters	src/Replay/TaskAutoPilot.hpp	/^  AutopilotParameters():$/;"	f	struct:AutopilotParameters
AutopilotParameters	src/Replay/TaskAutoPilot.hpp	/^struct AutopilotParameters {$/;"	s
Aux	src/PageSettings.hpp	/^  static PageLayout Aux() {$/;"	f	struct:PageLayout
AvFilter	src/Math/AvFilter.hpp	/^class AvFilter $/;"	c
AvailableFile	src/Repository/AvailableFile.hpp	/^struct AvailableFile {$/;"	s
AvailableFileNameComparator	src/Repository/FileRepository.cpp	/^struct AvailableFileNameComparator {$/;"	s	file:
AverEffTime	src/Dialogs/Settings/Panels/GlideComputerConfigPanel.cpp	/^  AverEffTime,$/;"	e	enum:ControlIndex	file:
AverEffTime	src/Profile/ProfileKeys.cpp	/^const char AverEffTime[] = "AverEffTime";$/;"	m	namespace:ProfileKeys	file:
Average	src/Math/AvFilter.hpp	/^  double Average() const {$/;"	f	class:AvFilter
Average30s	src/FLARM/FlarmCalculations.cpp	/^FlarmCalculations::Average30s(FlarmId id, double time, double altitude)$/;"	f	class:FlarmCalculations
AverageCalculatorMap	src/FLARM/FlarmCalculations.hpp	/^  typedef std::map<FlarmId, ClimbAverageCalculator> AverageCalculatorMap;$/;"	t	class:FlarmCalculations
AverageClimbRate	src/Computer/GlideComputerAirData.cpp	/^GlideComputerAirData::AverageClimbRate(const NMEAInfo &basic,$/;"	f	class:GlideComputerAirData
AverageEffTime	src/Computer/Settings.hpp	/^enum AverageEffTime {$/;"	g
AverageSpeed	src/Dialogs/StatusPanels/TaskStatusPanel.cpp	/^  AverageSpeed,$/;"	e	enum:Controls	file:
AverageSpeedSolver	src/Engine/GlideSolvers/GlideState.cpp	/^  AverageSpeedSolver(const double dwcostheta, const double wind_speed_squared,$/;"	f	class:AverageSpeedSolver
AverageSpeedSolver	src/Engine/GlideSolvers/GlideState.cpp	/^class AverageSpeedSolver : public Quadratic {$/;"	c	file:
AverageThermalAdjusted	src/FlightStatistics.cpp	/^FlightStatistics::AverageThermalAdjusted(const double mc_current,$/;"	f	class:FlightStatistics
AverageVarioComputer	src/Computer/AverageVarioComputer.hpp	/^class AverageVarioComputer {$/;"	c
Axis	src/Renderer/ChartRenderer.hpp	/^  struct Axis {$/;"	s	class:ChartRenderer
B50CreateOnPort	src/Device/Driver/BorgeltB50.cpp	/^B50CreateOnPort(const DeviceConfig &config, Port &com_port)$/;"	f	file:
B50Device	src/Device/Driver/BorgeltB50.cpp	/^  B50Device(Port &_port):port(_port) {}$/;"	f	class:B50Device
B50Device	src/Device/Driver/BorgeltB50.cpp	/^class B50Device : public AbstractDevice {$/;"	c	file:
BALLAST_DUMP_MANAGER_HPP	src/BallastDumpManager.hpp	25;"	d
BALLOON	src/FLARM/Traffic.hpp	/^    BALLOON = 11,         \/\/!< balloon$/;"	m	class:FlarmTraffic::AircraftType
BAROGRAPH	src/Dialogs/dlgAnalysis.hpp	/^  BAROGRAPH,$/;"	m	class:AnalysisPage
BASE	src/TeamCode/TeamCode.cpp	/^static constexpr unsigned BASE = 36;$/;"	v	file:
BASE64_HXX	src/util/Base64.hxx	31;"	d
BASE_KHZ	src/RadioFrequency.hpp	/^  static constexpr unsigned BASE_KHZ = 100000;$/;"	m	class:RadioFrequency
BASIC_COMPUTER_HPP	src/Computer/BasicComputer.hpp	25;"	d
BATTERY_EXIT	src/BatteryTimer.hpp	/^  static constexpr unsigned BATTERY_EXIT = 5;$/;"	m	class:BatteryTimer
BATTERY_REMINDER	src/BatteryTimer.hpp	/^  static constexpr auto BATTERY_REMINDER = std::chrono::minutes(5);$/;"	m	class:BatteryTimer
BATTERY_WARNING	src/BatteryTimer.hpp	/^  static constexpr unsigned BATTERY_WARNING = 10;$/;"	m	class:BatteryTimer
BAUDRATE	src/Dialogs/Device/LX/NanoConfigWidget.hpp	/^    BAUDRATE,$/;"	e	enum:final::Controls
BEARING	src/Dialogs/Traffic/TeamCodeDialog.cpp	/^    BEARING,$/;"	e	enum:final::Controls	file:
BEEPTYPE_CONTINUOUS	src/Dialogs/Device/Vega/Types.hpp	46;"	d
BEEPTYPE_LONG	src/Dialogs/Device/Vega/Types.hpp	45;"	d
BEEPTYPE_MEDIUM	src/Dialogs/Device/Vega/Types.hpp	44;"	d
BEEPTYPE_SHORT	src/Dialogs/Device/Vega/Types.hpp	43;"	d
BEEPTYPE_SHORTDOUBLE	src/Dialogs/Device/Vega/Types.hpp	47;"	d
BEEPTYPE_SILENCE	src/Dialogs/Device/Vega/Types.hpp	42;"	d
BEFORE_ACTIVE	src/Engine/Task/Ordered/Points/OrderedTaskPoint.hpp	/^    BEFORE_ACTIVE,$/;"	e	enum:OrderedTaskPoint::ActiveState
BEHIND	src/Android/NativeView.hpp	/^    BEHIND = 3,$/;"	m	class:NativeView::ScreenOrientation
BELOW	src/Renderer/TextInBox.hpp	/^    BELOW,$/;"	e	enum:uint8_t
BETA	src/Terrain/jasper/jpc/jpc_qmfb.c	1325;"	d	file:
BExt	src/Device/Driver/LX/LXN.hpp	/^  struct BExt {$/;"	s	namespace:LXN
BGAENHANCEDOPTION	src/Engine/Task/ObservationZones/ObservationZone.hpp	/^    BGAENHANCEDOPTION,$/;"	m	class:ObservationZone::Shape
BGAENHANCEDOPTION_SECTOR	src/Engine/Task/Factory/TaskPointFactoryType.hpp	/^  BGAENHANCEDOPTION_SECTOR,$/;"	m	class:TaskPointFactoryType
BGAFIXEDCOURSE	src/Engine/Task/ObservationZones/ObservationZone.hpp	/^    BGAFIXEDCOURSE,$/;"	m	class:ObservationZone::Shape
BGAFIXEDCOURSE_SECTOR	src/Engine/Task/Factory/TaskPointFactoryType.hpp	/^  BGAFIXEDCOURSE_SECTOR,$/;"	m	class:TaskPointFactoryType
BGA_START	src/Engine/Task/ObservationZones/ObservationZone.hpp	/^    BGA_START,$/;"	m	class:ObservationZone::Shape
BGR8Color	src/ui/canvas/PortableColor.hpp	/^  constexpr BGR8Color(uint8_t _r, uint8_t _g, uint8_t _b)$/;"	f	class:BGR8Color
BGR8Color	src/ui/canvas/PortableColor.hpp	/^class BGR8Color {$/;"	c
BGRA8Color	src/ui/canvas/PortableColor.hpp	/^  constexpr BGRA8Color(uint8_t _r, uint8_t _g, uint8_t _b, uint8_t _a=0xff)$/;"	f	class:BGRA8Color
BGRA8Color	src/ui/canvas/PortableColor.hpp	/^class BGRA8Color {$/;"	c
BGRAPixelTraits	src/ui/canvas/memory/PixelTraits.hpp	/^struct BGRAPixelTraits {$/;"	s
BGRAToRGB565	src/ui/canvas/memory/Export.hpp	/^BGRAToRGB565(RGB565Color *dest, const BGRA8Color *src, unsigned n)$/;"	f
BIG	src/Engine/Airspace/AirspaceAircraftPerformance.cpp	28;"	d	file:
BIKE	src/Tracking/LiveTrack24.hpp	/^  BIKE = 16388,$/;"	m	class:LiveTrack24::VehicleType
BINARY	src/Device/Driver/FLARM/Device.hpp	/^    BINARY,$/;"	m	class:FlarmDevice::Mode
BIND_FUNCTION	src/util/BindMethod.hxx	353;"	d
BIND_METHOD	src/util/BindMethod.hxx	324;"	d
BIND_METHOD_HXX	src/util/BindMethod.hxx	31;"	d
BIND_THIS_METHOD	src/util/BindMethod.hxx	333;"	d
BITS	src/NMEA/Validity.hpp	/^  static constexpr int BITS = 6;$/;"	m	class:Validity
BLACKOUT_TIME	src/Computer/Wind/WindEKFGlue.hpp	/^  static constexpr unsigned BLACKOUT_TIME = 3;$/;"	m	class:WindEKFGlue
BLANK	src/ui/canvas/Pen.hpp	/^    BLANK = PS_NULL$/;"	e	enum:Pen::Style
BLUE	src/FLARM/Color.hpp	/^  BLUE,$/;"	m	class:FlarmColor
BMP085Device	src/Android/BMP085Device.cpp	/^BMP085Device::BMP085Device(unsigned _index,$/;"	f	class:BMP085Device
BMP085Listener	src/Android/BMP085Listener.hpp	/^class BMP085Listener {$/;"	c
BODY	src/net/http/Request.hxx	/^		BODY,$/;"	m	class:final::State
BOOLEAN	src/Form/DataField/Base.hpp	/^    BOOLEAN,$/;"	m	class:DataField::Type
BORDERBOTTOM	src/InfoBoxes/Border.hpp	37;"	d
BORDERLEFT	src/InfoBoxes/Border.hpp	38;"	d
BORDERRIGHT	src/InfoBoxes/Border.hpp	36;"	d
BORDERTOP	src/InfoBoxes/Border.hpp	35;"	d
BORDER_WIDTH	src/Look/InfoBoxLook.hpp	/^  static constexpr unsigned BORDER_WIDTH = 1;$/;"	m	struct:InfoBoxLook
BOTH	src/Engine/Route/Config.hpp	/^    BOTH,$/;"	m	class:RoutePlannerConfig::Mode
BOTTOM	src/Dialogs/Settings/Panels/PagesConfigPanel.cpp	/^    BOTTOM,$/;"	e	enum:final::Controls	file:
BOTTOM	src/Widget/ButtonPanelWidget.hpp	/^    AUTO, BOTTOM, LEFT$/;"	m	class:ButtonPanelWidget::Alignment
BOTTOM	src/Widget/QuestionWidget.cpp	/^                                                   ButtonPanelWidget::Alignment::BOTTOM)),$/;"	m	class:ButtonPanelWidget::Alignment	file:
BOTTOM_8_VARIO	src/InfoBoxes/InfoBoxSettings.hpp	/^    BOTTOM_8_VARIO = 13,$/;"	m	class:InfoBoxSettings::Geometry
BOTTOM_LEFT	src/UISettings.hpp	/^    BOTTOM_LEFT,$/;"	m	class:UISettings::ThermalAssistantPosition
BOTTOM_LEFT_AVOID_IB	src/UISettings.hpp	/^    BOTTOM_LEFT_AVOID_IB,$/;"	m	class:UISettings::ThermalAssistantPosition
BOTTOM_RIGHT	src/UISettings.hpp	/^    BOTTOM_RIGHT,$/;"	m	class:UISettings::ThermalAssistantPosition
BOTTOM_RIGHT_10	src/InfoBoxes/InfoBoxSettings.hpp	/^    BOTTOM_RIGHT_10 = 22,$/;"	m	class:InfoBoxSettings::Geometry
BOTTOM_RIGHT_12	src/InfoBoxes/InfoBoxSettings.hpp	/^    BOTTOM_RIGHT_12 = 8,$/;"	m	class:InfoBoxSettings::Geometry
BOTTOM_RIGHT_4	src/InfoBoxes/InfoBoxSettings.hpp	/^    BOTTOM_RIGHT_4 = 15,$/;"	m	class:InfoBoxSettings::Geometry
BOTTOM_RIGHT_8	src/InfoBoxes/InfoBoxSettings.hpp	/^    BOTTOM_RIGHT_8 = 1,$/;"	m	class:InfoBoxSettings::Geometry
BOTTOM_RIGHT_AVOID_IB	src/UISettings.hpp	/^    BOTTOM_RIGHT_AVOID_IB,$/;"	m	class:UISettings::ThermalAssistantPosition
BOX	src/InfoBoxes/InfoBoxSettings.hpp	/^    BOX,$/;"	m	class:InfoBoxSettings::BorderStyle
BRGPS	src/Dialogs/Device/LX/V7ConfigWidget.hpp	/^    BRGPS,$/;"	e	enum:final::Controls
BRIDGE	src/Engine/Waypoint/Waypoint.hpp	/^    BRIDGE,$/;"	m	class:Waypoint::Type
BROWSE	src/Dialogs/Task/Manager/TaskActionsPanel.hpp	/^    BROWSE,$/;"	e	enum:TaskActionsPanel::Controls
BRPDA	src/Dialogs/Device/LX/V7ConfigWidget.hpp	/^    BRPDA$/;"	e	enum:final::Controls
BUCKET_COUNT	src/Renderer/LabelBlock.hpp	/^  static constexpr unsigned BUCKET_COUNT = SCREEN_HEIGHT \/ BUCKET_HEIGHT;$/;"	m	class:LabelBlock
BUCKET_HEIGHT	src/Renderer/LabelBlock.hpp	/^  static constexpr unsigned BUCKET_HEIGHT = 1 << BUCKET_SHIFT;$/;"	m	class:LabelBlock
BUCKET_SHIFT	src/Renderer/LabelBlock.hpp	/^  static constexpr unsigned BUCKET_SHIFT = 7;$/;"	m	class:LabelBlock
BUCKET_SIZE	src/Renderer/LabelBlock.hpp	/^  static constexpr unsigned BUCKET_SIZE = 64;$/;"	m	class:LabelBlock
BUFFERED_OUTPUT_STREAM_HXX	src/io/BufferedOutputStream.hxx	31;"	d
BUFFERED_READER_HXX	src/io/BufferedReader.hxx	31;"	d
BUGGY_WCSTOD	src/util/NumberParser.hpp	56;"	d
BULK_BAUD_RATE	src/Device/Driver.hpp	/^    BULK_BAUD_RATE = 0x8,$/;"	e	enum:DeviceRegister::__anon158
BUTTON	src/Widget/RowFormWidget.hpp	/^      BUTTON,$/;"	m	class:RowFormWidget::Row::Type
BUTTON_LABEL_HPP	src/Menu/ButtonLabel.hpp	25;"	d
BW	src/Renderer/WaypointRendererSettings.hpp	/^    BW,$/;"	m	class:WaypointRendererSettings::LandableStyle
BYTE_ORDER_HXX	src/util/ByteOrder.hxx	32;"	d
B_EXT	src/Device/Driver/LX/LXN.hpp	/^    B_EXT = 0xf9,$/;"	e	enum:LXN::Command
B_EXT_CONFIG	src/Device/Driver/LX/LXN.hpp	/^    B_EXT_CONFIG = 0xff, \/* 'I': extensions to the 'B' record *\/$/;"	e	enum:LXN::Command
BackgroundLua	src/lua/Background.cpp	/^  explicit BackgroundLua(Lua::StatePtr &&_state):state(std::move(_state)) {$/;"	f	class:final
BackgroundRenderer	src/Renderer/BackgroundRenderer.cpp	/^BackgroundRenderer::BackgroundRenderer() {}$/;"	f	class:BackgroundRenderer
BackgroundRenderer	src/Renderer/BackgroundRenderer.hpp	/^class BackgroundRenderer {$/;"	c
BackslashBaseName	src/Profile/PathValue.cpp	/^BackslashBaseName(const TCHAR *p)$/;"	f	file:
Ballast	src/Dialogs/Settings/dlgBasicSettings.cpp	/^  Ballast,$/;"	e	enum:ControlIndex	file:
BallastDumpManager	src/BallastDumpManager.hpp	/^class BallastDumpManager$/;"	c
BallastDumpProcessTimer	src/ProcessTimer.cpp	/^BallastDumpProcessTimer()$/;"	f	file:
BallastGeometry	src/Gauge/GaugeVario.hpp	/^  struct BallastGeometry {$/;"	s	class:GaugeVario
BallastProcessTimer	src/ApplyExternalSettings.cpp	/^BallastProcessTimer()$/;"	f	file:
BallastSecsToEmpty	src/Profile/ProfileKeys.cpp	/^const char BallastSecsToEmpty[] = "BallastSecsToEmpty";$/;"	m	namespace:ProfileKeys	file:
BarographCaption	src/Renderer/BarographRenderer.cpp	/^BarographCaption(TCHAR *sTmp, const FlightStatistics &fs)$/;"	f
Base	src/Geo/Flat/FlatLine.hpp	/^  typedef Line2D<FlatPoint> Base;$/;"	t	class:FlatLine
Base	src/util/StaticString.hxx	/^	typedef BasicStringBuffer<T, max> Base;$/;"	t	class:StaticStringBase
Base	src/util/StaticString.hxx	/^	typedef StaticStringBase<char, max> Base;$/;"	t	class:NarrowString
Base	src/util/StaticString.hxx	/^	typedef StaticStringBase<wchar_t, max> Base;$/;"	t	class:StaticString
Base64	src/util/Base64.cxx	/^Base64(char *dest, ConstBuffer<uint8_t> src)$/;"	f
Base64	src/util/Base64.cxx	/^Base64(char *dest, uint8_t a, uint8_t b, uint8_t c)$/;"	f	file:
BaseBlackboard	src/Blackboard/BaseBlackboard.hpp	/^class BaseBlackboard$/;"	c
Basic	src/Blackboard/BaseBlackboard.hpp	/^  const MoreData &Basic() const {$/;"	f	class:BaseBlackboard
Basic	src/Interface.hpp	/^  static inline const MoreData &Basic() {$/;"	f	namespace:CommonInterface
Basic	src/MapWindow/MapWindowBlackboard.hpp	/^  const MoreData &Basic() const {$/;"	f	class:MapWindowBlackboard
Basic	src/MapWindow/TargetMapWindow.cpp	/^Basic()$/;"	f	file:
Basic	src/Menu/ExpandMacros.cpp	/^Basic()$/;"	f	file:
BasicAllocatedString	src/util/AllocatedString.hxx	/^	explicit BasicAllocatedString(const_pointer src)$/;"	f	class:BasicAllocatedString
BasicAllocatedString	src/util/AllocatedString.hxx	/^	explicit BasicAllocatedString(string_view src)$/;"	f	class:BasicAllocatedString
BasicAllocatedString	src/util/AllocatedString.hxx	/^class BasicAllocatedString {$/;"	c
BasicComputer	src/Computer/BasicComputer.hpp	/^class BasicComputer {$/;"	c
BasicIterableSplitString	src/util/IterableSplitString.hxx	/^	constexpr BasicIterableSplitString(StringView _s,$/;"	f	class:BasicIterableSplitString
BasicIterableSplitString	src/util/IterableSplitString.hxx	/^class BasicIterableSplitString {$/;"	c
BasicStringBuffer	src/util/StringBuffer.hxx	/^class BasicStringBuffer {$/;"	c
BasicStringView	src/util/StringView.hxx	/^	explicit constexpr BasicStringView(ConstBuffer<T> src)$/;"	f	struct:BasicStringView
BasicStringView	src/util/StringView.hxx	/^	explicit constexpr BasicStringView(ConstBuffer<void> src)$/;"	f	struct:BasicStringView
BasicStringView	src/util/StringView.hxx	/^struct BasicStringView : ConstBuffer<T> {$/;"	s
Battery	src/Android/Battery.cpp	/^namespace Power::Battery {$/;"	n	class:Power	file:
Battery	src/Dialogs/StatusPanels/SystemStatusPanel.cpp	/^  Battery,$/;"	e	enum:Controls	file:
Battery	src/Hardware/Battery.cpp	/^  namespace Battery{$/;"	n	namespace:Power	file:
Battery	src/Hardware/Battery.hpp	/^  namespace Battery{$/;"	n	namespace:Power
BatteryTimer	src/BatteryTimer.hpp	/^class BatteryTimer {$/;"	c
Baud	src/Dialogs/Device/FLARM/ConfigWidget.hpp	/^    Baud,$/;"	e	enum:final::Controls
BaudRate	src/Dialogs/Device/DeviceEditWidget.cpp	/^  Port, BaudRate, BulkBaudRate,$/;"	e	enum:ControlIndex	file:
BaudRateToK6Bt	src/Device/Port/K6BtPort.cpp	/^BaudRateToK6Bt(unsigned baud_rate)$/;"	f	file:
Bearing	src/Dialogs/StatusPanels/FlightStatusPanel.cpp	/^  Bearing,$/;"	e	enum:Controls	file:
Bearing	src/FLARM/Traffic.hpp	/^  Angle Bearing() const {$/;"	f	class:FlarmTraffic::AircraftType
Bearing	src/Geo/GeoPoint.cpp	/^GeoPoint::Bearing(const GeoPoint &other) const$/;"	f	class:GeoPoint
BearingS	src/Geo/GeoPoint.cpp	/^GeoPoint::BearingS(const GeoPoint &other) const$/;"	f	class:GeoPoint
Begin	src/MapWindow/StencilMapCanvas.cpp	/^StencilMapCanvas::Begin()$/;"	f	class:StencilMapCanvas
Begin	src/Renderer/TransparentRendererCache.cpp	/^TransparentRendererCache::Begin(Canvas &canvas,$/;"	f	class:TransparentRendererCache
Begin	src/Renderer/TransparentRendererCache.hpp	/^  constexpr Canvas &Begin(Canvas &canvas,$/;"	f	class:TransparentRendererCache
Begin	src/Topography/ShapeRenderer.hpp	/^  void Begin(unsigned n) {$/;"	f	class:ShapeRenderer
Begin	src/ui/canvas/opengl/BufferCanvas.cpp	/^BufferCanvas::Begin(Canvas &other)$/;"	f	class:BufferCanvas
BeginClose	src/Device/Port/BufferedPort.cpp	/^BufferedPort::BeginClose()$/;"	f	class:BufferedPort
BeginEditing	src/Dialogs/Settings/dlgConfigInfoboxes.cpp	/^  void BeginEditing() {$/;"	f	class:final
BeginElement	src/JSON/Writer.hpp	/^    void BeginElement() {$/;"	f	class:JSON::ArrayWriter
BeginElement	src/JSON/Writer.hpp	/^    void BeginElement(const char *name) {$/;"	f	class:JSON::ObjectWriter
BeginLine	src/IGC/IGCWriter.hpp	/^  char *BeginLine() {$/;"	f	class:IGCWriter
BeginShutdown	src/MainWindow.cpp	/^MainWindow::BeginShutdown()$/;"	f	class:MainWindow
BeginStop	src/thread/StoppableThread.hpp	/^  void BeginStop() {$/;"	f	class:StoppableThread
BeginStop	src/thread/WorkerThread.hpp	/^  void BeginStop() {$/;"	f	class:WorkerThread
BeginSuspend	src/thread/RecursivelySuspensibleThread.cpp	/^RecursivelySuspensibleThread::BeginSuspend()$/;"	f	class:RecursivelySuspensibleThread
BeginSuspend	src/thread/WorkerThread.hpp	/^  void BeginSuspend() {$/;"	f	class:WorkerThread
BestCruiseArrowRenderer	src/Renderer/BestCruiseArrowRenderer.hpp	/^namespace BestCruiseArrowRenderer$/;"	n
Between	src/Math/Angle.cpp	/^Angle::Between(const Angle start, const Angle end) const$/;"	f	class:Angle
BigThermalAssistantWidget	src/Gauge/BigThermalAssistantWidget.hpp	/^class BigThermalAssistantWidget$/;"	c
BigThermalAssistantWindow	src/Gauge/BigThermalAssistantWindow.hpp	/^  BigThermalAssistantWindow(const ThermalAssistantLook &look,$/;"	f	class:BigThermalAssistantWindow
BigThermalAssistantWindow	src/Gauge/BigThermalAssistantWindow.hpp	/^class BigThermalAssistantWindow : public ThermalAssistantWindow {$/;"	c
BinaryMode	src/Device/Driver/FLARM/Mode.cpp	/^FlarmDevice::BinaryMode(OperationEnvironment &env)$/;"	f	class:FlarmDevice
BinaryPing	src/Device/Driver/FLARM/BinaryProtocol.cpp	/^FlarmDevice::BinaryPing(OperationEnvironment &env,$/;"	f	class:FlarmDevice
BinaryReset	src/Device/Driver/FLARM/BinaryProtocol.cpp	/^FlarmDevice::BinaryReset(OperationEnvironment &env,$/;"	f	class:FlarmDevice
BinaryWritePixel	src/ui/canvas/memory/PixelOperations.hpp	/^  explicit constexpr BinaryWritePixel(Args&&... args)$/;"	f	struct:BinaryWritePixel
BinaryWritePixel	src/ui/canvas/memory/PixelOperations.hpp	/^struct BinaryWritePixel : private Operation {$/;"	s
Bind	src/Engine/PathSolvers/NavDijkstra.hpp	/^    struct Bind : public std::unordered_map<ScanTaskPoint, Value,$/;"	s	struct:NavDijkstra::DijkstraMap
Bind	src/ui/canvas/Brush.hpp	/^  void Bind() const {$/;"	f	class:Brush
Bind	src/ui/canvas/Pen.hpp	/^  void Bind() const {$/;"	f	class:Pen
Bind	src/ui/canvas/opengl/Color.hpp	/^  void Bind() const {$/;"	f	class:Color
Bind	src/ui/canvas/opengl/RenderBuffer.hpp	/^  void Bind() {$/;"	f	class:GLRenderBuffer
BindAndGetTexture	src/Terrain/RasterRenderer.cpp	/^RasterRenderer::BindAndGetTexture() const$/;"	f	class:RasterRenderer
BindAndGetTexture	src/ui/canvas/opengl/RawBitmap.cpp	/^RawBitmap::BindAndGetTexture() const$/;"	f	class:RawBitmap
BindFramebuffer	src/ui/canvas/opengl/FBO.cpp	/^FBO::BindFramebuffer(GLenum target, GLuint framebuffer)$/;"	f	class:FBO
BindFunctionWrapperGenerator	src/util/BindMethod.hxx	/^struct BindFunctionWrapperGenerator<R(Args...) noexcept(NoExcept), P, function>$/;"	s	namespace:BindMethodDetail
BindFunctionWrapperGenerator2	src/util/BindMethod.hxx	/^struct BindFunctionWrapperGenerator2 {$/;"	s	namespace:BindMethodDetail
BindMethodDetail	src/util/BindMethod.hxx	/^namespace BindMethodDetail {$/;"	n
BindMethodWrapperGenerator	src/util/BindMethod.hxx	/^struct BindMethodWrapperGenerator<T, M, method, R(Args...) noexcept(NoExcept)>$/;"	s	namespace:BindMethodDetail
BindMethodWrapperGenerator2	src/util/BindMethod.hxx	/^struct BindMethodWrapperGenerator2 {$/;"	s	namespace:BindMethodDetail
BindRenderbuffer	src/ui/canvas/opengl/FBO.cpp	/^FBO::BindRenderbuffer(GLenum target, GLuint renderbuffer)$/;"	f	class:FBO
BindStyle	src/ui/canvas/Pen.hpp	/^  void BindStyle() const {$/;"	f	class:Pen
BindUniform	src/ui/canvas/Brush.hpp	/^  void BindUniform(GLint location) const {$/;"	f	class:Brush
BindUniform	src/ui/canvas/Pen.hpp	/^  void BindUniform(GLint location) const {$/;"	f	class:Pen
BitOrPixelOperations	src/ui/canvas/memory/Optimised.hpp	/^struct BitOrPixelOperations$/;"	s
BitOrPixelOperations	src/ui/canvas/memory/Optimised.hpp	/^struct BitOrPixelOperations<GreyscalePixelTraits>$/;"	s
BitSize	src/ui/event/poll/linux/Input.cpp	/^BitSize()$/;"	f	file:
Bitmap	src/ui/canvas/android/Bitmap.cpp	/^Bitmap::Bitmap(Bitmap &&src)$/;"	f	class:Bitmap
Bitmap	src/ui/canvas/android/Bitmap.cpp	/^Bitmap::Bitmap(ResourceId id)$/;"	f	class:Bitmap
Bitmap	src/ui/canvas/custom/Bitmap.cpp	/^Bitmap::Bitmap(ConstBuffer<void> _buffer)$/;"	f	class:Bitmap
Bitmap	src/ui/canvas/custom/ResourceBitmap.cpp	/^Bitmap::Bitmap(ResourceId id)$/;"	f	class:Bitmap
Bitmap	src/ui/canvas/gdi/Bitmap.cpp	/^Bitmap::Bitmap(Bitmap &&src)$/;"	f	class:Bitmap
Bitmap	src/ui/canvas/gdi/ResourceBitmap.cpp	/^Bitmap::Bitmap(ResourceId id)$/;"	f	class:Bitmap
Bitmap	src/ui/canvas/opengl/Bitmap.cpp	/^Bitmap::Bitmap(Bitmap &&src)$/;"	f	class:Bitmap
BitmapButtonRenderer	src/Renderer/BitmapButtonRenderer.hpp	/^  explicit BitmapButtonRenderer(const Bitmap &_bitmap)$/;"	f	class:BitmapButtonRenderer
BitmapButtonRenderer	src/Renderer/BitmapButtonRenderer.hpp	/^class BitmapButtonRenderer : public ButtonRenderer {$/;"	c
BitmapDialog	src/Dialogs/Weather/PCMetDialog.cpp	/^BitmapDialog(const Bitmap &bitmap)$/;"	f	file:
BitmapDialog	src/Dialogs/Weather/PCMetDialog.cpp	/^BitmapDialog(const PCMet::ImageType &type, const PCMet::ImageArea &area)$/;"	f	file:
BitsToInts	src/ui/event/poll/linux/Input.cpp	/^BitsToInts(unsigned n_bits)$/;"	f	file:
BitwiseAnd32	src/net/IPv6Address.cxx	/^BitwiseAnd32(void *dest, const void *a, const void *b, size_t n)$/;"	f	file:
BitwiseAndT	src/net/IPv6Address.cxx	/^BitwiseAndT(T *dest, const T *a, const T *b, size_t n)$/;"	f	file:
BlackboardListener	src/Blackboard/BlackboardListener.hpp	/^class BlackboardListener {$/;"	c
BlackboardProcessTimer	src/ProcessTimer.cpp	/^BlackboardProcessTimer()$/;"	f	file:
Blend16	src/ui/canvas/memory/NEON.hpp	/^  static void Blend16(uint8_t *gcc_restrict p,$/;"	f	class:NEONBitOrPixelOperations
Blend32	src/ui/canvas/memory/NEON.hpp	/^  static void Blend32(uint8_t *gcc_restrict p,$/;"	f	class:NEONTransparentPixelOperations
BlockArray	src/Renderer/LabelBlock.hpp	/^    typedef StaticArray<PixelRect, BUCKET_SIZE> BlockArray;$/;"	t	class:LabelBlock::Bucket
BlockSTF	src/Dialogs/Settings/Panels/GlideComputerConfigPanel.cpp	/^  BlockSTF,$/;"	e	enum:ControlIndex	file:
BlockSTF	src/Profile/ProfileKeys.cpp	/^const char BlockSTF[] = "BlockSpeedToFly";$/;"	m	namespace:ProfileKeys	file:
BlockingCall	src/event/Call.cxx	/^BlockingCall(EventLoop &loop, std::function<void()> &&f)$/;"	f
BlockingCallMonitor	src/event/Call.cxx	/^	BlockingCallMonitor(EventLoop &_loop, std::function<void()> &&_f)$/;"	f	class:final
Blue	src/ui/canvas/PortableColor.hpp	/^  constexpr uint8_t Blue() const {$/;"	f	class:BGR8Color
Blue	src/ui/canvas/PortableColor.hpp	/^  constexpr uint8_t Blue() const {$/;"	f	class:BGRA8Color
Blue	src/ui/canvas/PortableColor.hpp	/^  constexpr uint8_t Blue() const {$/;"	f	class:RGB8Color
Blue	src/ui/canvas/gdi/Color.hpp	/^  uint8_t Blue() const$/;"	f	class:Color
Blue	src/ui/canvas/memory/Color.hpp	/^  uint8_t Blue() const$/;"	f	class:Color
Blue	src/ui/canvas/opengl/Color.hpp	/^  Blue() const$/;"	f	class:Color
BlueFlyConfigurationWidget	src/Dialogs/Device/BlueFly/BlueFlyConfigurationDialog.cpp	/^  BlueFlyConfigurationWidget(const DialogLook &look, WidgetDialog &_dialog,$/;"	f	class:final
BlueFlyCreateOnPort	src/Device/Driver/BlueFly/Register.cpp	/^BlueFlyCreateOnPort(const DeviceConfig &config, Port &com_port)$/;"	f	file:
BlueFlyDevice	src/Device/Driver/BlueFly/Internal.hpp	/^class BlueFlyDevice : public AbstractDevice {$/;"	c
BlueFlyDevice	src/Device/Driver/BlueFly/Misc.cpp	/^BlueFlyDevice::BlueFlyDevice(Port &_port)$/;"	f	class:BlueFlyDevice
BlueFlySettings	src/Device/Driver/BlueFly/Internal.hpp	/^  struct BlueFlySettings {$/;"	s	class:BlueFlyDevice
BlueFlyWidgets	src/Dialogs/Device/BlueFly/BlueFlyConfigurationDialog.cpp	/^  enum BlueFlyWidgets {$/;"	g	class:final	file:
BluetoothHelper	src/Android/BluetoothHelper.cpp	/^namespace BluetoothHelper {$/;"	n	file:
BluetoothHelper	src/Android/BluetoothHelper.hpp	/^namespace BluetoothHelper {$/;"	n
BluetoothNameStartsWith	src/Device/Config.cpp	/^DeviceConfig::BluetoothNameStartsWith(const char *prefix) const$/;"	f	class:DeviceConfig
BoostRangeBox	src/Geo/Boost/RangeBox.cpp	/^BoostRangeBox(const GeoPoint location, double range)$/;"	f
BorderColor	src/Dialogs/Airspace/AirspaceCRendererSettingsPanel.hpp	/^    BorderColor,$/;"	e	enum:AirspaceClassRendererSettingsPanel::ControlIndex
BorderKind_t	src/InfoBoxes/Border.hpp	/^enum BorderKind_t {$/;"	g
BorderStyle	src/InfoBoxes/InfoBoxSettings.hpp	/^  enum class BorderStyle : uint8_t {$/;"	c	struct:InfoBoxSettings
BorderWidth	src/Dialogs/Airspace/AirspaceCRendererSettingsPanel.hpp	/^    BorderWidth,$/;"	e	enum:AirspaceClassRendererSettingsPanel::ControlIndex
Borrow	src/Device/Descriptor.cpp	/^DeviceDescriptor::Borrow()$/;"	f	class:DeviceDescriptor
Bottom	src/PageSettings.hpp	/^  enum class Bottom : uint8_t {$/;"	c	struct:PageLayout
BottomLayout	src/Form/ButtonPanel.cpp	/^ButtonPanel::BottomLayout()$/;"	f	class:ButtonPanel
BottomLayout	src/Form/ButtonPanel.cpp	/^ButtonPanel::BottomLayout(PixelRect rc)$/;"	f	class:ButtonPanel
BottomLeft	src/Gauge/TrafficSettings.hpp	/^    BottomLeft,$/;"	m	class:TrafficSettings::GaugeLocation
BottomRight	src/Gauge/TrafficSettings.hpp	/^    BottomRight,$/;"	m	class:TrafficSettings::GaugeLocation
BottomRow	src/Dialogs/Task/TargetDialog.cpp	/^  PixelRect BottomRow(unsigned height) {$/;"	f	class:RowLayout
BoundMethod	src/util/BindMethod.hxx	/^class BoundMethod<R(Args...) noexcept(NoExcept)> {$/;"	c
BoundingBoxOverlaps	src/Engine/Task/Ordered/Points/OrderedTaskPoint.cpp	/^OrderedTaskPoint::BoundingBoxOverlaps(const FlatBoundingBox &that) const$/;"	f	class:OrderedTaskPoint
BresenhamIterator	src/ui/canvas/memory/Bresenham.hpp	/^  BresenhamIterator(int x1, int y1, int x2, int y2)$/;"	f	class:BresenhamIterator
BresenhamIterator	src/ui/canvas/memory/Bresenham.hpp	/^class BresenhamIterator {$/;"	c
BringToBottom	src/ui/window/custom/WList.cpp	/^WindowList::BringToBottom(Window &w)$/;"	f	class:WindowList
BringToTop	src/ui/window/custom/WList.cpp	/^WindowList::BringToTop(Window &w)$/;"	f	class:WindowList
BroadcastCalculatedUpdate	src/Blackboard/LiveBlackboard.cpp	/^LiveBlackboard::BroadcastCalculatedUpdate()$/;"	f	class:LiveBlackboard
BroadcastCalculatedUpdate	src/Interface.hpp	/^  static inline void BroadcastCalculatedUpdate() {$/;"	f	namespace:CommonInterface
BroadcastComputerSettingsUpdate	src/Blackboard/LiveBlackboard.cpp	/^LiveBlackboard::BroadcastComputerSettingsUpdate()$/;"	f	class:LiveBlackboard
BroadcastComputerSettingsUpdate	src/Interface.hpp	/^  static inline void BroadcastComputerSettingsUpdate() {$/;"	f	namespace:CommonInterface
BroadcastGPSUpdate	src/Blackboard/LiveBlackboard.cpp	/^LiveBlackboard::BroadcastGPSUpdate()$/;"	f	class:LiveBlackboard
BroadcastGPSUpdate	src/Interface.hpp	/^  static inline void BroadcastGPSUpdate() {$/;"	f	namespace:CommonInterface
BroadcastUISettingsUpdate	src/Blackboard/LiveBlackboard.cpp	/^LiveBlackboard::BroadcastUISettingsUpdate()$/;"	f	class:LiveBlackboard
BroadcastUISettingsUpdate	src/Interface.hpp	/^  static inline void BroadcastUISettingsUpdate() {$/;"	f	namespace:CommonInterface
BrokenDate	src/time/BrokenDate.hpp	/^  BrokenDate(unsigned _year, unsigned _month, unsigned _day)$/;"	f	struct:BrokenDate
BrokenDate	src/time/BrokenDate.hpp	/^struct BrokenDate {$/;"	s
BrokenDateTime	src/time/BrokenDateTime.hpp	/^  BrokenDateTime(const BrokenDate &date, const BrokenTime &time)$/;"	f	struct:BrokenDateTime
BrokenDateTime	src/time/BrokenDateTime.hpp	/^  BrokenDateTime(unsigned _year, unsigned _month, unsigned _day)$/;"	f	struct:BrokenDateTime
BrokenDateTime	src/time/BrokenDateTime.hpp	/^  BrokenDateTime(unsigned _year, unsigned _month, unsigned _day,$/;"	f	struct:BrokenDateTime
BrokenDateTime	src/time/BrokenDateTime.hpp	/^struct BrokenDateTime : public BrokenDate, public BrokenTime {$/;"	s
BrokenTime	src/time/BrokenTime.hpp	/^  BrokenTime(unsigned _hour, unsigned _minute, unsigned _second=0)$/;"	f	struct:BrokenTime
BrokenTime	src/time/BrokenTime.hpp	/^struct BrokenTime {$/;"	s
Brush	src/ui/canvas/Brush.hpp	/^  explicit Brush(const Color _color):color(_color)  {}$/;"	f	class:Brush
Brush	src/ui/canvas/Brush.hpp	/^  explicit Brush(const Color c):brush(nullptr) {$/;"	f	class:Brush
Brush	src/ui/canvas/Brush.hpp	/^class Brush$/;"	c
BruttoVario	src/Engine/Navigation/TraceHistory.hpp	/^  TraceVariableHistory BruttoVario;$/;"	m	class:TraceHistory
Bucket	src/Renderer/LabelBlock.hpp	/^  class Bucket {$/;"	c	class:LabelBlock
Bucket	src/util/QuadTree.hxx	/^	struct Bucket {$/;"	s
Buffer	src/Device/Util/LineSplitter.hpp	/^  typedef StaticFifoBuffer<char, 256u> Buffer;$/;"	t	class:PortLineSplitter
Buffer	src/Renderer/WaypointListRenderer.cpp	/^typedef StaticString<256u> Buffer;$/;"	t	file:
Buffer	src/util/AllocatedArray.hxx	/^	typedef WritableBuffer<T> Buffer;$/;"	t	class:AllocatedArray
BufferCanvas	src/ui/canvas/gdi/BufferCanvas.cpp	/^BufferCanvas::BufferCanvas(const Canvas &canvas, PixelSize new_size)$/;"	f	class:BufferCanvas
BufferCanvas	src/ui/canvas/gdi/BufferCanvas.hpp	/^  BufferCanvas():bitmap(nullptr) {}$/;"	f	class:BufferCanvas
BufferCanvas	src/ui/canvas/gdi/BufferCanvas.hpp	/^class BufferCanvas : public VirtualCanvas {$/;"	c
BufferWindow	src/ui/window/BufferWindow.hpp	/^class BufferWindow : public PaintWindow {$/;"	c
BufferedOutputStream	src/io/BufferedOutputStream.hxx	/^class BufferedOutputStream {$/;"	c
BufferedPort	src/Device/Port/BufferedPort.cpp	/^BufferedPort::BufferedPort(PortListener *_listener, DataHandler &_handler)$/;"	f	class:BufferedPort
BufferedPort	src/Device/Port/BufferedPort.hpp	/^class BufferedPort : public Port, protected DataHandler {$/;"	c
BufferedReader	src/io/BufferedReader.hxx	/^class BufferedReader {$/;"	c
Bugs	src/Dialogs/Settings/dlgBasicSettings.cpp	/^  Bugs,$/;"	e	enum:ControlIndex	file:
BugsGeometry	src/Gauge/GaugeVario.hpp	/^  struct BugsGeometry {$/;"	s	class:GaugeVario
BugsProcessTimer	src/ApplyExternalSettings.cpp	/^BugsProcessTimer()$/;"	f	file:
Build	src/system/Path.cpp	/^AllocatedPath::Build(const_pointer a, const_pointer b)$/;"	f	class:AllocatedPath
Build	src/system/Path.hpp	/^  static AllocatedPath Build(Path a, Path b) {$/;"	f	class:AllocatedPath
Build	src/system/Path.hpp	/^  static AllocatedPath Build(Path a, const_pointer b) {$/;"	f	class:AllocatedPath
BuildHalfHull	src/Geo/ConvexHull/GrahamScan.cpp	/^GrahamScan::BuildHalfHull(std::vector<SearchPoint*> input,$/;"	f	class:GrahamScan
BuildHull	src/Geo/ConvexHull/GrahamScan.cpp	/^GrahamScan::BuildHull()$/;"	f	class:GrahamScan
BuildIndices	src/Topography/XShape.cpp	/^XShape::BuildIndices(unsigned thinning_level, ShapeScalar min_distance)$/;"	f	class:XShape
BuildString	src/util/StringBuilder.hxx	/^BuildString(T *buffer, size_t size, Args&&... args)$/;"	f
BuiltinLanguage	src/Language/LanguageGlue.hpp	/^struct BuiltinLanguage {$/;"	s
BulkBaudRate	src/Dialogs/Device/DeviceEditWidget.cpp	/^  Port, BaudRate, BulkBaudRate,$/;"	e	enum:ControlIndex	file:
BulkPixelPoint	src/ui/dim/gdi/BulkPoint.hpp	/^  constexpr BulkPixelPoint(LONG _x, LONG _y)$/;"	f	struct:BulkPixelPoint
BulkPixelPoint	src/ui/dim/gdi/BulkPoint.hpp	/^  constexpr BulkPixelPoint(PixelPoint src)$/;"	f	struct:BulkPixelPoint
BulkPixelPoint	src/ui/dim/gdi/BulkPoint.hpp	/^  explicit constexpr BulkPixelPoint(const POINT &other):tagPOINT(other) {}$/;"	f	struct:BulkPixelPoint
BulkPixelPoint	src/ui/dim/gdi/BulkPoint.hpp	/^struct BulkPixelPoint : public tagPOINT {$/;"	s
BulkPixelPoint	src/ui/dim/memory/BulkPoint.hpp	/^  constexpr BulkPixelPoint(Args&&... args)$/;"	f	struct:BulkPixelPoint
BulkPixelPoint	src/ui/dim/memory/BulkPoint.hpp	/^struct BulkPixelPoint : PixelPoint {$/;"	s
BulkPixelPoint	src/ui/dim/opengl/BulkPoint.hpp	/^  constexpr BulkPixelPoint(PixelPoint src)$/;"	f	struct:BulkPixelPoint
BulkPixelPoint	src/ui/dim/opengl/BulkPoint.hpp	/^struct BulkPixelPoint : Point2D<GLvalue, int> {$/;"	s
BulkPixelPointVector	src/MapWindow/MapWindowGlideRange.cpp	/^typedef std::vector<BulkPixelPoint> BulkPixelPointVector;$/;"	t	file:
Button	src/Form/Button.hpp	/^class Button : public PaintWindow {$/;"	c
Button	src/Menu/MenuBar.hpp	/^  class Button : public ::Button {$/;"	c	class:MenuBar
Button	src/Widget/QuestionWidget.hpp	/^  struct Button {$/;"	s	class:QuestionWidget
ButtonFrameRenderer	src/Renderer/ButtonRenderer.hpp	/^  explicit ButtonFrameRenderer(const ButtonLook &_look):look(_look) {}$/;"	f	class:ButtonFrameRenderer
ButtonFrameRenderer	src/Renderer/ButtonRenderer.hpp	/^class ButtonFrameRenderer {$/;"	c
ButtonLabel	src/Menu/ButtonLabel.hpp	/^namespace ButtonLabel {$/;"	n
ButtonLook	src/Look/ButtonLook.hpp	/^struct ButtonLook {$/;"	s
ButtonPanel	src/Form/ButtonPanel.cpp	/^ButtonPanel::ButtonPanel(ContainerWindow &_parent, const ButtonLook &_look)$/;"	f	class:ButtonPanel
ButtonPanel	src/Form/ButtonPanel.hpp	/^class ButtonPanel {$/;"	c
ButtonPanelWidget	src/Widget/ButtonPanelWidget.hpp	/^class ButtonPanelWidget : public Widget {$/;"	c
ButtonRenderer	src/Renderer/ButtonRenderer.hpp	/^class ButtonRenderer {$/;"	c
ButtonWidget	src/Widget/ButtonWidget.hpp	/^class ButtonWidget : public WindowWidget {$/;"	c
Buttons	src/Dialogs/KnobTextEntry.cpp	/^enum Buttons {$/;"	g	file:
Buttons	src/Dialogs/Settings/Panels/SiteConfigPanel.cpp	/^  enum Buttons {$/;"	g	class:final	file:
Buttons	src/Dialogs/Settings/WindSettingsPanel.hpp	/^  enum Buttons {$/;"	g	class:final
Buttons	src/Dialogs/Task/AlternatesListDialog.cpp	/^  enum Buttons {$/;"	g	class:final	file:
Buttons	src/Dialogs/Task/Manager/TaskClosePanel.hpp	/^  enum Buttons {$/;"	g	class:final
Buttons	src/Dialogs/Task/TargetDialog.cpp	/^  enum Buttons {$/;"	g	class:TargetWidget	file:
Buttons	src/Dialogs/Traffic/TrafficList.cpp	/^enum Buttons {$/;"	g	file:
Buttons	src/Dialogs/Weather/MapOverlayWidget.cpp	/^  enum Buttons {$/;"	g	class:final	file:
Buttons	src/Dialogs/Weather/NOAAList.cpp	/^  enum Buttons {$/;"	g	class:final	file:
Buttons	src/Kobo/KoboMenu.cpp	/^enum Buttons {$/;"	g	file:
Buttons	src/Kobo/NetworkDialog.cpp	/^  enum Buttons {$/;"	g	class:final	file:
Buttons	src/Kobo/SystemDialog.cpp	/^  enum Buttons {$/;"	g	class:final	file:
Buttons	src/Widget/ArrowPagerWidget.hpp	/^  enum Buttons {$/;"	g	class:ArrowPagerWidget
ByteCopy	src/Topography/shapelib/mapshape.c	67;"	d	file:
ByteSwapAndLowerVolume	src/Audio/AudioAlgorithms.hpp	/^inline void ByteSwapAndLowerVolume(int16_t *buffer, size_t num_frames,$/;"	f
ByteSwapAndMixPCM	src/Audio/AudioAlgorithms.hpp	/^inline void ByteSwapAndMixPCM(int16_t *dest, const int16_t *src,$/;"	f
ByteToPercent	src/Dialogs/Settings/Panels/TerrainDisplayConfigPanel.cpp	/^ByteToPercent(short byte)$/;"	f	file:
C2	src/Device/Driver/Volkslogger/vlconv.cpp	/^  C2()$/;"	f	class:C2
C2	src/Device/Driver/Volkslogger/vlconv.cpp	/^class C2$/;"	c	file:
CACHE_HXX	src/util/Cache.hxx	31;"	d
CAI302	src/Device/Driver/CAI302/PocketNav.hpp	/^namespace CAI302 {$/;"	n
CAI302	src/Device/Driver/CAI302/Protocol.hpp	/^namespace CAI302 {$/;"	n
CAI302CreateOnPort	src/Device/Driver/CAI302/Register.cpp	/^CAI302CreateOnPort(const DeviceConfig &config, Port &port)$/;"	f	file:
CAI302Device	src/Device/Driver/CAI302/Internal.hpp	/^  CAI302Device(const DeviceConfig &_config, Port &_port)$/;"	f	class:CAI302Device
CAI302Device	src/Device/Driver/CAI302/Internal.hpp	/^class CAI302Device : public AbstractDevice {$/;"	c
CAI302UnitsEditor	src/Dialogs/Device/CAI302/UnitsEditor.hpp	/^  CAI302UnitsEditor(const DialogLook &look, const CAI302::Pilot &_data)$/;"	f	class:final
CAI302WaypointUploader	src/Dialogs/Device/CAI302/WaypointUploader.hpp	/^  CAI302WaypointUploader(Path _path, CAI302Device &_device)$/;"	f	class:CAI302WaypointUploader
CAI302WaypointUploader	src/Dialogs/Device/CAI302/WaypointUploader.hpp	/^class CAI302WaypointUploader : public Job {$/;"	c
CALLBACK	src/ui/event/shared/Event.hpp	/^    CALLBACK,$/;"	e	enum:UI::Event::Type
CALLSIGN	src/Dialogs/Traffic/FlarmTrafficDetails.cpp	/^    CALLSIGN,$/;"	e	enum:final::Controls	file:
CALLSIGN	src/Dialogs/Traffic/TrafficList.cpp	/^  CALLSIGN,$/;"	e	enum:Controls	file:
CAN	src/Device/Driver/Volkslogger/Protocol.hpp	/^    CAN = 0x18$/;"	e	enum:Volkslogger::__anon164
CANCEL	src/Dialogs/ProfilePasswordDialog.hpp	/^  CANCEL,$/;"	m	class:ProfilePasswordResult
CANCELED	src/system/OverlappedEvent.hpp	/^    CANCELED,$/;"	e	enum:OverlappedEvent::WaitResult
CANCELLABLE_HXX	src/util/Cancellable.hxx	31;"	d
CANCELLED	src/Device/Port/Port.hpp	/^    CANCELLED,$/;"	m	class:Port::WaitResult
CAR	src/Tracking/LiveTrack24.hpp	/^  CAR = 17100,$/;"	m	class:LiveTrack24::VehicleType
CAR_4X4	src/Tracking/LiveTrack24.hpp	/^  CAR_4X4 = 17101,$/;"	m	class:LiveTrack24::VehicleType
CAST_HXX	src/util/Cast.hxx	31;"	d
CAST_HXX	src/util/ContainerCast.hxx	31;"	d
CAST_ITERATOR_HPP	src/util/CastIterator.hpp	31;"	d
CCL	src/Device/Driver/Volkslogger/vlconv.cpp	/^       FTY[50], DTM[10], CID[50], CCL[50], TZN[20];$/;"	m	struct:IGCHEADER	file:
CClosure	src/lua/Util.hxx	/^struct CClosure {$/;"	s	struct:Lua::StackIndex::LightUserData
CENTER	src/Renderer/TextInBox.hpp	/^    CENTER,$/;"	m	struct:TextInBoxMode	typeref:enum:TextInBoxMode::
CENTER	src/UISettings.hpp	/^    CENTER,$/;"	m	class:UISettings::PopupMessagePosition
CENTERED	src/Renderer/TextInBox.hpp	/^    CENTERED,$/;"	e	enum:uint8_t
CGImageToUncompressedImage	src/ui/canvas/apple/ImageDecoder.cpp	/^CGImageToUncompressedImage(CGImageRef image)$/;"	f	file:
CHANGE_BAUD_RATE	src/Device/Port/K6BtPort.hpp	/^  static constexpr uint8_t CHANGE_BAUD_RATE = 0x30;$/;"	m	class:K6BtPort
CHANGE_CALLSIGN_BUTTON	src/Dialogs/Traffic/FlarmTrafficDetails.cpp	/^    CHANGE_CALLSIGN_BUTTON,$/;"	e	enum:final::Controls	file:
CHARGING	src/Hardware/Battery.hpp	/^      CHARGING,$/;"	e	enum:Power::Battery::batterystatus
CHART_LOOK_HPP	src/Look/ChartLook.hpp	25;"	d
CHAR_UTIL_HXX	src/util/CharUtil.hxx	31;"	d
CID	src/Device/Driver/Volkslogger/vlconv.cpp	/^       FTY[50], DTM[10], CID[50], CCL[50], TZN[20];$/;"	m	struct:IGCHEADER	file:
CIRCLE	src/Engine/Airspace/AbstractAirspace.hpp	/^    CIRCLE,$/;"	m	class:AbstractAirspace::Shape
CIRCLE_DIAMETER	src/InfoBoxes/Content/Type.hpp	/^    CIRCLE_DIAMETER,$/;"	e	enum:InfoBoxFactory::Type
CIRCLE_SEGS	src/ui/canvas/Util.cpp	/^static constexpr unsigned CIRCLE_SEGS = 64;$/;"	v	file:
CIRCLE_SIZE	src/ui/canvas/opengl/Shapes.hpp	/^static constexpr unsigned CIRCLE_SIZE = 32;$/;"	m	namespace:OpenGL
CIRCLE_SIZE	src/ui/canvas/opengl/VertexArray.hpp	/^  static constexpr unsigned CIRCLE_SIZE = (SIZE - 2) \/ 2;$/;"	m	struct:GLDonutVertices
CIRCLING	src/Dialogs/Device/Vega/VegaDemoDialog.cpp	/^    CIRCLING,$/;"	e	enum:final::Controls	file:
CIRCLING	src/DisplayMode.hpp	/^  CIRCLING,$/;"	m	class:DisplayMode
CIRCLING	src/NMEA/Derived.hpp	/^    CIRCLING,$/;"	m	class:DerivedInfo::WindSource
CIRCLING	src/NMEA/SwitchState.hpp	/^    CIRCLING,$/;"	m	class:SwitchState::FlightMode
CLAMP_HPP	src/util/Clamp.hpp	31;"	d
CLANG_CHECK_VERSION	src/util/Compiler.h	79;"	d
CLANG_OR_GCC_VERSION	src/util/Compiler.h	53;"	d
CLANG_VERSION	src/util/Compiler.h	36;"	d
CLANG_VERSION	src/util/Compiler.h	38;"	d
CLASSA	src/Engine/Airspace/AirspaceClass.hpp	/^  CLASSA,$/;"	e	enum:uint8_t
CLASSB	src/Engine/Airspace/AirspaceClass.hpp	/^  CLASSB,$/;"	e	enum:uint8_t
CLASSC	src/Engine/Airspace/AirspaceClass.hpp	/^  CLASSC,$/;"	e	enum:uint8_t
CLASSD	src/Engine/Airspace/AirspaceClass.hpp	/^  CLASSD,$/;"	e	enum:uint8_t
CLASSE	src/Engine/Airspace/AirspaceClass.hpp	/^  CLASSE,$/;"	e	enum:uint8_t
CLASSF	src/Engine/Airspace/AirspaceClass.hpp	/^  CLASSF,$/;"	e	enum:uint8_t
CLASSG	src/Engine/Airspace/AirspaceClass.hpp	/^  CLASSG,$/;"	e	enum:uint8_t
CLEAR	src/Dialogs/TimeEntry.cpp	/^  CLEAR = 100,$/;"	e	enum:__anon2	file:
CLEAR	src/InfoBoxes/Panel/ATCReference.cpp	/^  CLEAR,$/;"	e	enum:Controls	file:
CLEAR_MANUAL	src/Dialogs/Settings/WindSettingsPanel.hpp	/^    CLEAR_MANUAL,$/;"	e	enum:final::Buttons
CLEAR_MANUAL_BUTTON	src/Dialogs/Settings/WindSettingsPanel.hpp	/^    CLEAR_MANUAL_BUTTON,$/;"	e	enum:final::ControlIndex
CLIMB	src/Dialogs/dlgAnalysis.hpp	/^  CLIMB,$/;"	m	class:AnalysisPage
CLIMB	src/NMEA/CirclingInfo.hpp	/^  CLIMB,$/;"	m	class:CirclingMode
CLIMBAVERAGE	src/Engine/Task/TaskBehaviour.hpp	/^    CLIMBAVERAGE,$/;"	m	class:TaskBehaviour::AutoMCMode
CLIMBAVERAGECALCULATOR_HPP	src/Computer/ClimbAverageCalculator.hpp	25;"	d
CLIMB_PERCENT_RENDERER_HPP	src/Renderer/ClimbPercentRenderer.hpp	25;"	d
CLIMB_RATE_G_MIN	src/Computer/GlideComputerAirData.cpp	/^static constexpr double CLIMB_RATE_G_MIN = 0.25;$/;"	v	file:
CLIP	src/Renderer/AirspaceRendererSettings.hpp	/^  CLIP,$/;"	m	class:AirspaceDisplayMode
CLIP_ACCEPT	src/Geo/GeoClip.cpp	/^static constexpr bool CLIP_ACCEPT(unsigned a, unsigned b) {$/;"	f	file:
CLIP_ACCEPT	src/ui/canvas/memory/RasterCanvas.hpp	/^  static constexpr bool CLIP_ACCEPT(unsigned a, unsigned b) {$/;"	f	class:RasterCanvas
CLIP_BOTTOM_EDGE	src/Geo/GeoClip.cpp	/^static constexpr unsigned CLIP_BOTTOM_EDGE = 0x4;$/;"	v	file:
CLIP_BOTTOM_EDGE	src/ui/canvas/memory/RasterCanvas.hpp	/^  static constexpr unsigned CLIP_BOTTOM_EDGE = 0x4;$/;"	m	class:RasterCanvas
CLIP_BOTTOM_EQUALS	src/Geo/GeoClip.cpp	/^static constexpr unsigned CLIP_BOTTOM_EQUALS = 0x40;$/;"	v	file:
CLIP_CHECK	src/Topography/shapelib/mapprimitive.c	42;"	d	file:
CLIP_INSIDE	src/Geo/GeoClip.cpp	/^static constexpr bool CLIP_INSIDE(unsigned a) {$/;"	f	file:
CLIP_INSIDE	src/ui/canvas/memory/RasterCanvas.hpp	/^  static constexpr bool CLIP_INSIDE(unsigned a) {$/;"	f	class:RasterCanvas
CLIP_LEFT	src/Topography/shapelib/mapprimitive.c	/^typedef enum {CLIP_LEFT, CLIP_MIDDLE, CLIP_RIGHT} CLIP_STATE;$/;"	e	enum:__anon19	file:
CLIP_LEFT_EDGE	src/Geo/GeoClip.cpp	/^static constexpr unsigned CLIP_LEFT_EDGE = 0x1;$/;"	v	file:
CLIP_LEFT_EDGE	src/ui/canvas/memory/RasterCanvas.hpp	/^  static constexpr unsigned CLIP_LEFT_EDGE = 0x1;$/;"	m	class:RasterCanvas
CLIP_LEFT_EQUALS	src/Geo/GeoClip.cpp	/^static constexpr unsigned CLIP_LEFT_EQUALS = 0x10;$/;"	v	file:
CLIP_MIDDLE	src/Topography/shapelib/mapprimitive.c	/^typedef enum {CLIP_LEFT, CLIP_MIDDLE, CLIP_RIGHT} CLIP_STATE;$/;"	e	enum:__anon19	file:
CLIP_REJECT	src/Geo/GeoClip.cpp	/^static constexpr bool CLIP_REJECT(unsigned a, unsigned b) {$/;"	f	file:
CLIP_REJECT	src/ui/canvas/memory/RasterCanvas.hpp	/^  static constexpr bool CLIP_REJECT(unsigned a, unsigned b) {$/;"	f	class:RasterCanvas
CLIP_RIGHT	src/Topography/shapelib/mapprimitive.c	/^typedef enum {CLIP_LEFT, CLIP_MIDDLE, CLIP_RIGHT} CLIP_STATE;$/;"	e	enum:__anon19	file:
CLIP_RIGHT_EDGE	src/Geo/GeoClip.cpp	/^static constexpr unsigned CLIP_RIGHT_EDGE = 0x2;$/;"	v	file:
CLIP_RIGHT_EDGE	src/ui/canvas/memory/RasterCanvas.hpp	/^  static constexpr unsigned CLIP_RIGHT_EDGE = 0x2;$/;"	m	class:RasterCanvas
CLIP_RIGHT_EQUALS	src/Geo/GeoClip.cpp	/^static constexpr unsigned CLIP_RIGHT_EQUALS = 0x20;$/;"	v	file:
CLIP_STATE	src/Topography/shapelib/mapprimitive.c	/^typedef enum {CLIP_LEFT, CLIP_MIDDLE, CLIP_RIGHT} CLIP_STATE;$/;"	t	typeref:enum:__anon19	file:
CLIP_TOP_EDGE	src/Geo/GeoClip.cpp	/^static constexpr unsigned CLIP_TOP_EDGE = 0x8;$/;"	v	file:
CLIP_TOP_EDGE	src/ui/canvas/memory/RasterCanvas.hpp	/^  static constexpr unsigned CLIP_TOP_EDGE = 0x8;$/;"	m	class:RasterCanvas
CLIP_TOP_EQUALS	src/Geo/GeoClip.cpp	/^static constexpr unsigned CLIP_TOP_EQUALS = 0x80;$/;"	v	file:
CLOSE	src/Dialogs/Task/Manager/TaskClosePanel.hpp	/^    CLOSE,$/;"	e	enum:final::Buttons
CLOSE	src/ui/event/shared/Event.hpp	/^    CLOSE,$/;"	e	enum:UI::Event::Type
CLOSED	src/net/http/Request.hxx	/^		CLOSED,$/;"	m	class:final::State
CLOUD_CONFIG_PANEL_HPP	src/Dialogs/Settings/Panels/CloudConfigPanel.hpp	25;"	d
CLOUD_ENABLE_DIALOG_HPP	src/Dialogs/Tracking/CloudEnableDialog.hpp	25;"	d
CLOUD_INTERVAL	src/Tracking/SkyLines/Glue.cpp	/^static constexpr auto CLOUD_INTERVAL = std::chrono::minutes(1);$/;"	v	file:
CLOUD_MAGIC	src/Cloud/Data.cpp	/^static constexpr uint32_t CLOUD_MAGIC = 0x5753f60f;$/;"	v	file:
CLOUD_VERSION	src/Cloud/Data.cpp	/^static constexpr uint32_t CLOUD_VERSION = 1;$/;"	v	file:
CMD_TIMEOUT	src/Device/Driver/KRT2.cpp	/^  static constexpr auto CMD_TIMEOUT = std::chrono::milliseconds(250); \/\/!< Command timeout$/;"	m	class:final	file:
CMD_TIMEOUT	src/Device/Driver/KRT2.cpp	/^constexpr std::chrono::milliseconds KRT2Device::CMD_TIMEOUT;$/;"	m	class:KRT2Device	file:
COLON	src/Form/DigitEntry.hpp	/^      COLON,$/;"	m	class:CoordinateFormat::Column::Type
COLOR	src/ui/canvas/opengl/Attribute.hpp	/^static constexpr GLuint COLOR = 3;$/;"	m	namespace:OpenGL::Attribute
COLOR_ATTACHMENT0	src/ui/canvas/opengl/FBO.hpp	/^static constexpr GLenum COLOR_ATTACHMENT0 = GL_COLOR_ATTACHMENT0;$/;"	m	namespace:FBO
COLOR_BLACK	src/ui/canvas/Color.hpp	/^static constexpr Color COLOR_BLACK = Color(0x00, 0x00, 0x00);$/;"	v
COLOR_BLUE	src/ui/canvas/Color.hpp	/^static constexpr Color COLOR_BLUE = Color(0x00, 0x00, 0xff);$/;"	v
COLOR_BROWN	src/ui/canvas/Color.hpp	/^static constexpr Color COLOR_BROWN = Color(0xb7, 0x64, 0x1e);$/;"	v
COLOR_COUNT	src/InfoBoxes/Data.hpp	/^  static constexpr unsigned COLOR_COUNT = 6;$/;"	m	struct:InfoBoxData
COLOR_CYAN	src/ui/canvas/Color.hpp	/^static constexpr Color COLOR_CYAN = Color(0x00, 0xff, 0xff);$/;"	v
COLOR_DARK_GRAY	src/ui/canvas/Color.hpp	/^static constexpr Color COLOR_DARK_GRAY = Color(0x40, 0x40, 0x40);$/;"	v
COLOR_GRAY	src/ui/canvas/Color.hpp	/^static constexpr Color COLOR_GRAY = Color(0x80, 0x80, 0x80);$/;"	v
COLOR_GREEN	src/ui/canvas/Color.hpp	/^static constexpr Color COLOR_GREEN = Color(0x00, 0xff, 0x00);$/;"	v
COLOR_INVERSE_BLUE	src/Look/InfoBoxLook.cpp	38;"	d	file:
COLOR_INVERSE_GREEN	src/Look/InfoBoxLook.cpp	40;"	d	file:
COLOR_INVERSE_MAGENTA	src/Look/InfoBoxLook.cpp	41;"	d	file:
COLOR_INVERSE_RED	src/Look/InfoBoxLook.cpp	37;"	d	file:
COLOR_INVERSE_YELLOW	src/Look/InfoBoxLook.cpp	39;"	d	file:
COLOR_LIGHT_GRAY	src/ui/canvas/Color.hpp	/^static constexpr Color COLOR_LIGHT_GRAY = Color(0xc0, 0xc0, 0xc0);$/;"	v
COLOR_MAGENTA	src/ui/canvas/Color.hpp	/^static constexpr Color COLOR_MAGENTA = Color(0xff, 0x00, 0xff);$/;"	v
COLOR_ORANGE	src/ui/canvas/Color.hpp	/^static constexpr Color COLOR_ORANGE = Color(0xff, 0xa2, 0x00);$/;"	v
COLOR_RED	src/ui/canvas/Color.hpp	/^static constexpr Color COLOR_RED = Color(0xff, 0x00, 0x00);$/;"	v
COLOR_VERY_DARK_GRAY	src/ui/canvas/Color.hpp	/^static constexpr Color COLOR_VERY_DARK_GRAY = Color(0x20, 0x20, 0x20);$/;"	v
COLOR_VERY_LIGHT_GRAY	src/ui/canvas/Color.hpp	/^static constexpr Color COLOR_VERY_LIGHT_GRAY = Color(0xd8, 0xd8, 0xd8);$/;"	v
COLOR_WHITE	src/ui/canvas/Color.hpp	/^static constexpr Color COLOR_WHITE = Color(0xff, 0xff, 0xff);$/;"	v
COLOR_XCSOAR	src/Look/Colors.hpp	/^static constexpr Color COLOR_XCSOAR = Color(0x3f, 0x76, 0xa8);$/;"	v
COLOR_XCSOAR	src/Look/Colors.hpp	/^static constexpr Color COLOR_XCSOAR = Color(0xd0, 0x17, 0x17);$/;"	v
COLOR_XCSOAR_DARK	src/Look/Colors.hpp	/^static constexpr Color COLOR_XCSOAR_DARK = Color(0x00, 0x31, 0x5e);$/;"	v
COLOR_XCSOAR_DARK	src/Look/Colors.hpp	/^static constexpr Color COLOR_XCSOAR_DARK = Color(0x5d, 0x0a, 0x0a);$/;"	v
COLOR_XCSOAR_LIGHT	src/Look/Colors.hpp	/^static constexpr Color COLOR_XCSOAR_LIGHT = Color(0xaa, 0xc9, 0xe4);$/;"	v
COLOR_XCSOAR_LIGHT	src/Look/Colors.hpp	/^static constexpr Color COLOR_XCSOAR_LIGHT = Color(0xed, 0x90, 0x90);$/;"	v
COLOR_YELLOW	src/ui/canvas/Color.hpp	/^static constexpr Color COLOR_YELLOW = Color(0xff, 0xff, 0x00);$/;"	v
COMMAND	src/Device/Driver/CAI302/Internal.hpp	/^    COMMAND,$/;"	m	class:CAI302Device::Mode
COMMAND	src/Device/Driver/LX/Internal.hpp	/^    COMMAND,$/;"	m	class:LXDevice::Mode
COMMENT	src/Dialogs/Waypoint/dlgWaypointEdit.cpp	/^    COMMENT,$/;"	e	enum:final::Rows	file:
COMMON_STATS_HPP	src/Engine/Task/Stats/CommonStats.hpp	23;"	d
COMMUNICATION	src/FLARM/Error.hpp	/^    COMMUNICATION = 0x51,$/;"	e	enum:uint8_t
COMM_MAX_BULK_SIZE	src/Device/Driver/IMI/Protocol/Types.hpp	/^  const unsigned COMM_MAX_BULK_SIZE = 0xFFFF + 1;$/;"	m	namespace:IMI
COMM_MAX_PAYLOAD_SIZE	src/Device/Driver/IMI/Protocol/Types.hpp	/^  const unsigned COMM_MAX_PAYLOAD_SIZE = 2048;$/;"	m	namespace:IMI
COMPETITION_CLASS	src/Device/Driver/LX/LXN.hpp	/^    COMPETITION_CLASS = 0xf1,$/;"	e	enum:LXN::Command
COMPETITION_ID	src/Dialogs/Plane/PlaneDetailsDialog.cpp	/^    COMPETITION_ID,$/;"	e	enum:final::Controls	file:
COMPE_GPS	src/Waypoint/WaypointFileType.hpp	/^  COMPE_GPS,$/;"	m	class:WaypointFileType
COMPILER_H	src/util/Compiler.h	25;"	d
COMPUTER_SETTINGS_BLACKBOARD_HPP	src/Blackboard/ComputerSettingsBlackboard.hpp	25;"	d
CONFIGPANEL_HPP	src/Dialogs/Settings/Panels/ConfigPanel.hpp	25;"	d
CONNECTED	src/net/State.hpp	/^  CONNECTED,$/;"	m	class:NetState
CONST_BUFFER_HXX	src/util/ConstBuffer.hxx	31;"	d
CONTENT	src/Dialogs/Settings/dlgConfigInfoboxes.cpp	/^    NAME, INFOBOX, CONTENT, DESCRIPTION$/;"	e	enum:final::Controls	file:
CONTEST_QUEUE_SIZE	src/Engine/Contest/Solvers/ContestDijkstra.cpp	/^static constexpr unsigned CONTEST_QUEUE_SIZE = 5000;$/;"	v	file:
CONTEST_RESULT_HPP	src/Engine/Contest/ContestResult.hpp	24;"	d
CONTEST_STATISTICS_HPP	src/Engine/Contest/ContestStatistics.hpp	24;"	d
CONTINUE	src/Dialogs/StartupDialog.cpp	/^    CONTINUE,$/;"	e	enum:final::Controls	file:
CONTROLHEIGHTRATIO	src/InfoBoxes/InfoBoxLayout.cpp	/^static constexpr double CONTROLHEIGHTRATIO = 7.4;$/;"	v	file:
CONTROL_NAMES_PRIORITY	src/Audio/VolumeController.cpp	/^static constexpr const char *CONTROL_NAMES_PRIORITY[] =$/;"	v	file:
COORDINATE_FORMAT_HPP	src/Geo/CoordinateFormat.hpp	25;"	d
COUNT	src/Renderer/UnitSymbolRenderer.cpp	/^static_assert(ARRAY_SIZE(symbol_strings) == (size_t)Unit::COUNT,$/;"	m	class:Unit	file:
COUNT	src/Units/Descriptor.cpp	/^static_assert(ARRAY_SIZE(Units::unit_descriptors) == (size_t)Unit::COUNT,$/;"	m	class:Unit	file:
CPL_SUPRESS_CPLUSPLUS	src/Topography/shapelib/mapserver.h	158;"	d
CProbeCreateOnPort	src/Device/Driver/CProbe.cpp	/^CProbeCreateOnPort(const DeviceConfig &config, Port &com_port)$/;"	f	file:
CProbeDevice	src/Device/Driver/CProbe.cpp	/^class CProbeDevice : public AbstractDevice {$/;"	c	file:
CRC16Checksum	src/Device/Driver/IMI/Protocol/Checksum.cpp	/^IMI::IMIWORD IMI::CRC16Checksum(const void *message, unsigned bytes)$/;"	f	class:IMI
CRCWriter	src/Device/Driver/LX/Protocol.hpp	/^    CRCWriter(Port &_port):port(_port), crc(0xff) {}$/;"	f	class:LX::CRCWriter
CRCWriter	src/Device/Driver/LX/Protocol.hpp	/^  class CRCWriter {$/;"	c	namespace:LX
CREATE	src/io/FileOutputStream.hxx	/^		CREATE,$/;"	m	class:final::Mode
CREATE_VISIBLE	src/io/FileOutputStream.hxx	/^		CREATE_VISIBLE,$/;"	m	class:final::Mode
CRITICAL	src/Hardware/Battery.hpp	/^      CRITICAL,$/;"	e	enum:Power::Battery::batterystatus
CROSS_SECTION	src/PageSettings.hpp	/^    CROSS_SECTION,$/;"	m	class:PageLayout::Bottom
CROSS_SECTION_LOOK_HPP	src/Look/CrossSectionLook.hpp	25;"	d
CROSS_SECTION_RENDERER_HPP	src/CrossSection/CrossSectionRenderer.hpp	25;"	d
CROSS_SECTION_WINDOW_HPP	src/CrossSection/CrossSectionWindow.hpp	25;"	d
CRUISE	src/DisplayMode.hpp	/^  CRUISE,$/;"	m	class:DisplayMode
CRUISE	src/NMEA/CirclingInfo.hpp	/^  CRUISE = 0,$/;"	m	class:CirclingMode
CRUISE	src/NMEA/SwitchState.hpp	/^    CRUISE,$/;"	m	class:SwitchState::FlightMode
CRUISE_EFFICIENCY	src/Dialogs/StatusPanels/TaskStatusPanel.cpp	/^  CRUISE_EFFICIENCY,$/;"	e	enum:Controls	file:
CRUISE_FILTER_FACT	src/Engine/Airspace/AirspaceWarningManager.cpp	31;"	d	file:
CSVLine	src/io/CSVLine.cpp	/^CSVLine::CSVLine(const char *line):$/;"	f	class:CSVLine
CSVLine	src/io/CSVLine.hpp	/^class CSVLine {$/;"	c
CTR	src/Engine/Airspace/AirspaceClass.hpp	/^  CTR,$/;"	e	enum:uint8_t
CURL_EASY_HXX	src/net/http/Easy.hxx	31;"	d
CURL_GLOBAL_HXX	src/net/http/Global.hxx	31;"	d
CURL_HANDLER_HXX	src/net/http/Handler.hxx	31;"	d
CURL_MULTI_HXX	src/net/http/Multi.hxx	31;"	d
CURL_REQUEST_HXX	src/net/http/Request.hxx	31;"	d
CURL_SLIST_HXX	src/net/http/Slist.hxx	31;"	d
CURRENT_ACTIVE	src/Engine/Task/Ordered/Points/OrderedTaskPoint.hpp	/^    CURRENT_ACTIVE,$/;"	e	enum:OrderedTaskPoint::ActiveState
CURSOR	src/Form/List.hpp	/^    CURSOR,$/;"	m	class:ListControl::DragMode
CUSTOM	src/PageSettings.hpp	/^    CUSTOM,$/;"	m	class:PageLayout::Bottom
CUSTOM_KEYHOLE	src/Engine/Task/ObservationZones/ObservationZone.hpp	/^    CUSTOM_KEYHOLE,$/;"	m	class:ObservationZone::Shape
CYCLE	src/Tracking/LiveTrack24.hpp	/^  CYCLE = 16401,$/;"	m	class:LiveTrack24::VehicleType
CYLINDER	src/Device/Declaration.hpp	/^      CYLINDER,$/;"	e	enum:Declaration::TurnPoint::Shape
CYLINDER	src/Engine/Task/ObservationZones/ObservationZone.hpp	/^    CYLINDER,$/;"	m	class:ObservationZone::Shape
CYLINDERZONE_HPP	src/Engine/Task/ObservationZones/CylinderZone.hpp	25;"	d
C_RECORD	src/Device/Driver/Volkslogger/vlconv.cpp	/^  C_RECORD()$/;"	f	class:C_RECORD
C_RECORD	src/Device/Driver/Volkslogger/vlconv.cpp	/^class C_RECORD$/;"	c	file:
Cache	src/util/Cache.hxx	/^	Cache()$/;"	f	class:Cache
Cache	src/util/Cache.hxx	/^class Cache {$/;"	c
CacheHeader	src/Terrain/RasterTileCache.hpp	/^  struct CacheHeader {$/;"	s	class:RasterTileCache
CachedTopographyRenderer	src/Topography/CachedTopographyRenderer.hpp	/^  CachedTopographyRenderer(const TopographyStore &store,$/;"	f	class:CachedTopographyRenderer
CachedTopographyRenderer	src/Topography/CachedTopographyRenderer.hpp	/^class CachedTopographyRenderer {$/;"	c
CaiGpsNavCreateOnPort	src/Device/Driver/CaiGpsNav.cpp	/^CaiGpsNavCreateOnPort(const DeviceConfig &config, Port &com_port)$/;"	f	file:
CaiGpsNavDevice	src/Device/Driver/CaiGpsNav.cpp	/^  CaiGpsNavDevice(Port &_port):port(_port) {}$/;"	f	class:CaiGpsNavDevice
CaiGpsNavDevice	src/Device/Driver/CaiGpsNav.cpp	/^class CaiGpsNavDevice : public AbstractDevice {$/;"	c	file:
CaiLNavCreateOnPort	src/Device/Driver/CaiLNav.cpp	/^CaiLNavCreateOnPort(const DeviceConfig &config, Port &com_port)$/;"	f	file:
CaiLNavDevice	src/Device/Driver/CaiLNav.cpp	/^  CaiLNavDevice(Port &_port):port(_port) {}$/;"	f	class:final
CalcAlpha	src/Engine/Task/Shapes/FAITriangleArea.cpp	/^CalcAlpha(double dist_a, double dist_b, double dist_c)$/;"	f	file:
CalcAngle	src/Engine/Task/Shapes/FAITriangleArea.cpp	/^CalcAngle(Angle angle, double dist_a, double dist_b, double dist_c,$/;"	f	file:
CalcAutoZoom	src/Gauge/BigTrafficWidget.cpp	/^FlarmTrafficControl::CalcAutoZoom()$/;"	f	class:FlarmTrafficControl
CalcAverageDeltaDistance	src/Engine/Trace/Trace.cpp	/^Trace::CalcAverageDeltaDistance(const unsigned no_thin) const$/;"	f	class:Trace
CalcAverageDeltaTime	src/Engine/Trace/Trace.cpp	/^Trace::CalcAverageDeltaTime(const unsigned no_thin) const$/;"	f	class:Trace
CalcAverageSpeed	src/Engine/GlideSolvers/GlideState.cpp	/^GlideState::CalcAverageSpeed(const double Veff) const$/;"	f	class:GlideState
CalcAzimuth	src/Math/SunEphemeris.cpp	/^SunEphemeris::CalcAzimuth(const GeoPoint &location,$/;"	f	class:SunEphemeris
CalcBoundingBox	src/Engine/Route/FlatTriangleFan.cpp	/^FlatTriangleFan::CalcBoundingBox()$/;"	f	class:FlatTriangleFan
CalcCruiseBearing	src/Engine/GlideSolvers/GlideResult.cpp	/^GlideResult::CalcCruiseBearing()$/;"	f	class:GlideResult
CalcDeferred	src/Engine/GlideSolvers/GlideResult.cpp	/^GlideResult::CalcDeferred()$/;"	f	class:GlideResult
CalcDistanceTo	src/Terrain/RasterTile.cpp	/^RasterTile::CalcDistanceTo(int x, int y) const$/;"	f	class:RasterTile
CalcGeoPoint	src/Engine/Task/Shapes/FAITriangleArea.cpp	/^CalcGeoPoint(const GeoPoint &origin, Angle angle,$/;"	f	file:
CalcGlideArrival	src/Engine/Route/RoutePolars.cpp	/^RoutePolars::CalcGlideArrival(const AFlatGeoPoint& origin,$/;"	f	class:RoutePolars
CalcIncrement	src/ui/canvas/memory/PixelTraits.hpp	/^  static constexpr int CalcIncrement(int delta) {$/;"	f	struct:BGRAPixelTraits
CalcIncrement	src/ui/canvas/memory/PixelTraits.hpp	/^  static constexpr int CalcIncrement(int delta) {$/;"	f	struct:GreyscalePixelTraits
CalcIncrementalSpeed	src/Engine/Task/Computer/DistanceStatComputer.hpp	/^  void CalcIncrementalSpeed(DistanceStat &data, double time) {$/;"	f	class:DistanceStatComputer
CalcInfoBoxSizes	src/InfoBoxes/InfoBoxLayout.cpp	/^InfoBoxLayout::CalcInfoBoxSizes(Layout &layout, PixelSize screen_size,$/;"	f	class:InfoBoxLayout
CalcIntermediateAngle	src/Task/TaskFileSeeYou.cpp	/^CalcIntermediateAngle(const SeeYouTurnpointInformation &turnpoint_infos,$/;"	f	file:
CalcMinTarget	src/Engine/Task/Ordered/OrderedTask.cpp	/^OrderedTask::CalcMinTarget(const AircraftState &aircraft,$/;"	f	class:OrderedTask
CalcSpeed	src/Engine/Task/Computer/DistanceStatComputer.cpp	/^DistanceStatComputer::CalcSpeed(DistanceStat &data, double time)$/;"	f	class:DistanceStatComputer
CalcSpeeds	src/Engine/Task/Computer/ElementStatComputer.cpp	/^ElementStatComputer::CalcSpeeds(ElementStat &data, const double time)$/;"	f	class:ElementStatComputer
CalcSpeedups	src/Engine/GlideSolvers/GlideState.cpp	/^GlideState::CalcSpeedups(const SpeedVector _wind)$/;"	f	class:GlideState
CalcSunTimes	src/Math/SunEphemeris.cpp	/^SunEphemeris::CalcSunTimes(const GeoPoint &location,$/;"	f	class:SunEphemeris
CalcTextWidth	src/ui/canvas/gdi/Canvas.hpp	/^  unsigned CalcTextWidth(BasicStringView<TCHAR> text) const {$/;"	f	class:Canvas
CalcTime	src/Engine/Route/RoutePolars.cpp	/^RoutePolars::CalcTime(const RouteLink& link) const$/;"	f	class:RoutePolars
CalcVHeight	src/Engine/Route/RoutePolars.cpp	/^RoutePolars::CalcVHeight(const RouteLink &link) const$/;"	f	class:RoutePolars
CalcWind	src/Computer/Wind/CirclingWind.cpp	/^CirclingWind::CalcWind()$/;"	f	class:CirclingWind
Calculate	src/Computer/GlideRatioCalculator.cpp	/^GlideRatioCalculator::Calculate() const$/;"	f	class:GlideRatioCalculator
Calculate	src/InfoBoxes/InfoBoxLayout.cpp	/^InfoBoxLayout::Calculate(PixelRect rc, InfoBoxSettings::Geometry geometry)$/;"	f	class:InfoBoxLayout
Calculate	src/Renderer/WaypointRenderer.cpp	/^  void Calculate(const ProtectedRoutePlanner *route_planner,$/;"	f	class:final
CalculateAdjustedLocation	src/NMEA/ThermalLocator.cpp	/^ThermalSource::CalculateAdjustedLocation(double altitude,$/;"	f	class:ThermalSource
CalculateAll	src/NMEA/ClimbInfo.hpp	/^  void CalculateAll() {$/;"	f	struct:OneClimbInfo
CalculateAzimuth	src/Math/SunEphemeris.cpp	/^CalculateAzimuth(const GeoPoint &Location, const BrokenTime &time,$/;"	f	file:
CalculateBoundingbox	src/Geo/SearchPointVector.cpp	/^SearchPointVector::CalculateBoundingbox() const$/;"	f	class:SearchPointVector
CalculateCRC	src/Device/Driver/FLARM/CRC16.cpp	/^FLARM::CalculateCRC(const FrameHeader &header,$/;"	f	class:FLARM
CalculateCoefficients	src/Polar/Polar.cpp	/^PolarInfo::CalculateCoefficients() const$/;"	f	class:PolarInfo
CalculateDirect	src/Renderer/WaypointRenderer.cpp	/^  void CalculateDirect(const PolarSettings &polar_settings,$/;"	f	class:final
CalculateDrift	src/Engine/Trace/Point.hpp	/^  double CalculateDrift(double now) const {$/;"	f	class:TracePoint
CalculateDuration	src/NMEA/ClimbInfo.hpp	/^  void CalculateDuration() {$/;"	f	struct:OneClimbInfo
CalculateGeoBounds	src/Geo/SearchPointVector.cpp	/^SearchPointVector::CalculateGeoBounds() const$/;"	f	class:SearchPointVector
CalculateInfoBoxColumnWidth	src/InfoBoxes/InfoBoxLayout.cpp	/^CalculateInfoBoxColumnWidth(unsigned screen_width, unsigned control_height)$/;"	f	file:
CalculateInfoBoxRowHeight	src/InfoBoxes/InfoBoxLayout.cpp	/^CalculateInfoBoxRowHeight(unsigned screen_height, unsigned control_width)$/;"	f	file:
CalculateLayout	src/Dialogs/ComboPicker.cpp	/^  unsigned CalculateLayout(const DialogLook &look) {$/;"	f	class:ComboPickerSupport
CalculateLayout	src/Dialogs/FileManager.cpp	/^  unsigned CalculateLayout(const DialogLook &look) {$/;"	f	class:final
CalculateLayout	src/Dialogs/Task/MutateTaskPointDialog.cpp	/^  unsigned CalculateLayout(const DialogLook &look) {$/;"	f	class:final
CalculateLayout	src/Form/DigitEntry.cpp	/^DigitEntry::CalculateLayout()$/;"	f	class:DigitEntry
CalculateLayout	src/Form/TabDisplay.cpp	/^TabDisplay::CalculateLayout()$/;"	f	class:TabDisplay
CalculateLayout	src/Renderer/MapItemListRenderer.cpp	/^MapItemListRenderer::CalculateLayout(const DialogLook &dialog_look)$/;"	f	class:MapItemListRenderer
CalculateLayout	src/Renderer/TextRowRenderer.cpp	/^TextRowRenderer::CalculateLayout(const Font &font)$/;"	f	class:TextRowRenderer
CalculateLayout	src/Renderer/TwoTextRowsRenderer.cpp	/^TwoTextRowsRenderer::CalculateLayout(const Font &_first_font,$/;"	f	class:TwoTextRowsRenderer
CalculateLiftPoints	src/Gauge/ThermalAssistantRenderer.cpp	/^ThermalAssistantRenderer::CalculateLiftPoints(LiftPoints &lift_points,$/;"	f	class:ThermalAssistantRenderer
CalculateLiftRate	src/NMEA/ClimbInfo.hpp	/^  void CalculateLiftRate() {$/;"	f	struct:OneClimbInfo
CalculateMaxLift	src/Gauge/ThermalAssistantRenderer.cpp	/^ThermalAssistantRenderer::CalculateMaxLift() const$/;"	f	class:ThermalAssistantRenderer
CalculateNearestAirspaceHorizontal	src/Airspace/NearestAirspace.cpp	/^CalculateNearestAirspaceHorizontal(const GeoPoint &location,$/;"	f	file:
CalculateOwnTeamCode	src/Computer/GlideComputer.cpp	/^GlideComputer::CalculateOwnTeamCode()$/;"	f	class:GlideComputer
CalculateQNH	src/Computer/AutoQNH.cpp	/^AutoQNH::CalculateQNH(const NMEAInfo &basic, DerivedInfo &calculated,$/;"	f	class:AutoQNH
CalculateReachability	src/Renderer/WaypointRenderer.cpp	/^  void CalculateReachability(const RoutePlannerGlue &route_planner,$/;"	f	struct:VisibleWaypoint
CalculateReachabilityDirect	src/Renderer/WaypointRenderer.cpp	/^  void CalculateReachabilityDirect(const MoreData &basic,$/;"	f	struct:VisibleWaypoint
CalculateRoute	src/Renderer/WaypointRenderer.cpp	/^  void CalculateRoute(const ProtectedRoutePlanner &route_planner) {$/;"	f	class:final
CalculateRouteArrival	src/Renderer/WaypointRenderer.cpp	/^  bool CalculateRouteArrival(const RoutePlannerGlue &route_planner,$/;"	f	struct:VisibleWaypoint
CalculateSoonestAirspace	src/Engine/Airspace/SoonestAirspace.cpp	/^CalculateSoonestAirspace(const AircraftState &state,$/;"	f	file:
CalculateTeammateBearingRange	src/Computer/GlideComputer.cpp	/^GlideComputer::CalculateTeammateBearingRange()$/;"	f	class:GlideComputer
CalculateTimespanComponents	src/Formatter/TimeFormatter.cpp	/^CalculateTimespanComponents(unsigned timespan, unsigned &days, unsigned &hours,$/;"	f	file:
CalculateVarioScale	src/Computer/GlideComputer.cpp	/^GlideComputer::CalculateVarioScale()$/;"	f	class:GlideComputer
CalculateWidth	src/PopupMessage.cpp	/^PopupMessage::CalculateWidth() const$/;"	f	class:PopupMessage
CalculateWorkingBand	src/Computer/GlideComputer.cpp	/^GlideComputer::CalculateWorkingBand()$/;"	f	class:GlideComputer
CalculateWorkingFraction	src/NMEA/Derived.cpp	/^DerivedInfo::CalculateWorkingFraction(const double h, const double safety_height) const$/;"	f	class:DerivedInfo
CalculateZoneLetter	src/Geo/UTM.cpp	/^CalculateZoneLetter(const Angle latitude)$/;"	f	file:
CalculateZoneNumber	src/Geo/UTM.cpp	/^CalculateZoneNumber(const GeoPoint &p)$/;"	f	file:
Calculated	src/Blackboard/BaseBlackboard.hpp	/^  const DerivedInfo& Calculated() const {$/;"	f	class:BaseBlackboard
Calculated	src/Interface.hpp	/^  static inline const DerivedInfo &Calculated() {$/;"	f	namespace:CommonInterface
Calculated	src/MapWindow/MapWindowBlackboard.hpp	/^  const DerivedInfo &Calculated() const {$/;"	f	class:MapWindowBlackboard
Calculated	src/MapWindow/TargetMapWindow.cpp	/^Calculated()$/;"	f	file:
Calculated	src/Menu/ExpandMacros.cpp	/^Calculated()$/;"	f	file:
CalculationThread	src/CalculationThread.cpp	/^CalculationThread::CalculationThread(GlideComputer &_glide_computer)$/;"	f	class:CalculationThread
Callback	src/ui/event/Notify.cpp	/^Notify::Callback(void *ctx)$/;"	f	class:UI::Notify
Callback	src/ui/event/sdl/Loop.hpp	/^  typedef void (*Callback)(void *ctx);$/;"	t	class:UI::EventLoop
Callback	src/ui/event/shared/Event.hpp	/^  typedef void (*Callback)(void *ctx);$/;"	t	struct:UI::Event
CallbackWidget	src/Widget/CallbackWidget.hpp	/^class CallbackWidget$/;"	c
CanBorrow	src/Device/Descriptor.hpp	/^  bool CanBorrow() const {$/;"	f	class:final
CanClimb	src/Engine/Route/RoutePolars.cpp	/^RoutePolars::CanClimb() const$/;"	f	class:RoutePolars
CanDeclare	src/Device/Descriptor.cpp	/^DeviceDescriptor::CanDeclare() const$/;"	f	class:DeviceDescriptor
CanDeclare	src/Device/Driver.hpp	/^  bool CanDeclare() const {$/;"	f	struct:DeviceRegister
CanDownload	src/Dialogs/FileManager.cpp	/^CanDownload(const FileRepository &repository, const TCHAR *name)$/;"	f	file:
CanReceiveSettings	src/Device/Driver.hpp	/^  bool CanReceiveSettings() const {$/;"	f	struct:DeviceRegister
CanSendSettings	src/Device/Driver.hpp	/^  bool CanSendSettings() const {$/;"	f	struct:DeviceRegister
CanStartThroughTop	src/Engine/Task/ObservationZones/ObservationZone.hpp	/^  bool CanStartThroughTop() const {$/;"	f	class:ObservationZone
CanStartThroughTop	src/Engine/Task/ObservationZones/ObservationZoneClient.cpp	/^ObservationZoneClient::CanStartThroughTop() const$/;"	f	class:ObservationZoneClient
CanZoomIn	src/Gauge/BigTrafficWidget.cpp	/^  bool CanZoomIn() const {$/;"	f	class:FlarmTrafficControl
CanZoomOut	src/Gauge/BigTrafficWidget.cpp	/^  bool CanZoomOut() const {$/;"	f	class:FlarmTrafficControl
Cancel	src/Android/Vibrator.cpp	/^Vibrator::Cancel(JNIEnv *env)$/;"	f	class:Vibrator
Cancel	src/Dialogs/FileManager.cpp	/^ManagedFileListWidget::Cancel()$/;"	f	class:ManagedFileListWidget
Cancel	src/Job/Async.cpp	/^AsyncJobRunner::Cancel()$/;"	f	class:AsyncJobRunner
Cancel	src/io/FileCache.cpp	/^FileCache::Cancel(const TCHAR *name, FILE *file)$/;"	f	class:FileCache
Cancel	src/lua/InputEvent.cpp	/^  void Cancel() {$/;"	f	class:final
Cancel	src/lua/Timer.cpp	/^  void Cancel() {$/;"	f	class:final
Cancel	src/ui/event/poll/Timer.cpp	/^Timer::Cancel()$/;"	f	class:UI::Timer
Cancel	src/ui/event/shared/Timer.cpp	/^Timer::Cancel()$/;"	f	class:UI::Timer
Cancel	src/ui/event/shared/TimerQueue.cpp	/^TimerQueue::Cancel(Timer &timer)$/;"	f	class:UI::TimerQueue
CancelAsync	src/Device/Descriptor.cpp	/^DeviceDescriptor::CancelAsync()$/;"	f	class:DeviceDescriptor
CancelTimer	src/ui/event/android/Queue.cpp	/^EventQueue::CancelTimer(Timer &timer)$/;"	f	class:UI::EventQueue
CancelTimer	src/ui/event/sdl/Queue.cpp	/^EventQueue::CancelTimer(Timer &timer)$/;"	f	class:UI::EventQueue
CancelTimer	src/ui/event/windows/Queue.cpp	/^EventQueue::CancelTimer(Timer &timer)$/;"	f	class:UI::EventQueue
Cancellable	src/util/Cancellable.hxx	/^class Cancellable {$/;"	c
CancellablePointer	src/util/Cancellable.hxx	/^class CancellablePointer {$/;"	c
CandidateSet	src/Engine/Contest/Solvers/TriangleContest.hpp	/^  struct CandidateSet {$/;"	s	class:TriangleContest
Canvas	src/ui/canvas/gdi/Canvas.hpp	/^  Canvas(HDC _dc, PixelSize new_size)$/;"	f	class:Canvas
Canvas	src/ui/canvas/gdi/Canvas.hpp	/^class Canvas {$/;"	c
Canvas	src/ui/canvas/memory/Canvas.hpp	/^  Canvas()$/;"	f	class:Canvas
Canvas	src/ui/canvas/memory/Canvas.hpp	/^  explicit Canvas(WritableImageBuffer<ActivePixelTraits> _buffer)$/;"	f	class:Canvas
Canvas	src/ui/canvas/memory/Canvas.hpp	/^class Canvas {$/;"	c
Canvas	src/ui/canvas/opengl/Canvas.hpp	/^  Canvas(PixelSize _size):size(_size) {}$/;"	f	class:Canvas
Canvas	src/ui/canvas/opengl/Canvas.hpp	/^class Canvas {$/;"	c
CanvasRotateShift	src/ui/canvas/opengl/CanvasRotateShift.hpp	/^  CanvasRotateShift(const PixelPoint pos, Angle angle,$/;"	f	class:CanvasRotateShift
CanvasRotateShift	src/ui/canvas/opengl/CanvasRotateShift.hpp	/^class CanvasRotateShift$/;"	c
CaptionOLC	src/Renderer/FlightStatisticsRenderer.cpp	/^FlightStatisticsRenderer::CaptionOLC(TCHAR *sTmp,$/;"	f	class:FlightStatisticsRenderer
CaptionTask	src/Renderer/FlightStatisticsRenderer.cpp	/^FlightStatisticsRenderer::CaptionTask(TCHAR *sTmp, const DerivedInfo &derived)$/;"	f	class:FlightStatisticsRenderer
Caption_GateWidth	src/Dialogs/Settings/Panels/TaskDefaultsConfigPanel.cpp	/^static const TCHAR *const Caption_GateWidth = N_("Gate width");$/;"	v	file:
Caption_Radius	src/Dialogs/Settings/Panels/TaskDefaultsConfigPanel.cpp	/^static const TCHAR *const Caption_Radius = N_("Radius");$/;"	v	file:
Cares	src/Device/Descriptor.hpp	/^namespace Cares { class Channel; }$/;"	n
Cares	src/Device/MultipleDevices.hpp	/^namespace Cares { class Channel; }$/;"	n
Cares	src/Device/Port/ConfiguredPort.hpp	/^namespace Cares { class Channel; }$/;"	n
Cares	src/Device/Port/TCPClientPort.hpp	/^namespace Cares { class Channel; }$/;"	n
Cares	src/Tracking/SkyLines/Client.hpp	/^namespace Cares { class Channel; }$/;"	n
Cares	src/event/net/cares/Channel.cxx	/^namespace Cares {$/;"	n	file:
Cares	src/event/net/cares/Channel.hxx	/^namespace Cares {$/;"	n
Cares	src/event/net/cares/CoLookup.cxx	/^namespace Cares {$/;"	n	file:
Cares	src/event/net/cares/CoLookup.hxx	/^namespace Cares {$/;"	n
Cares	src/event/net/cares/Error.cxx	/^namespace Cares {$/;"	n	file:
Cares	src/event/net/cares/Error.hxx	/^namespace Cares {$/;"	n
Cares	src/event/net/cares/Handler.hxx	/^namespace Cares {$/;"	n
Cares	src/event/net/cares/Init.cxx	/^namespace Cares {$/;"	n	file:
Cares	src/event/net/cares/Init.hxx	/^namespace Cares {$/;"	n
Cares	src/event/net/cares/SimpleResolver.cxx	/^namespace Cares {$/;"	n	file:
Cares	src/event/net/cares/SimpleResolver.hxx	/^namespace Cares {$/;"	n
Cares	src/io/async/GlobalAsioThread.hpp	/^namespace Cares { class Channel; }$/;"	n
Cast	src/lua/Class.hxx	/^	static reference Cast(lua_State *L, int idx) {$/;"	f	struct:Lua::Class
Cast	src/util/Manual.hxx	/^	static constexpr Manual<T> &Cast(T &value) {$/;"	f	class:Manual
CastIterator	src/util/CastIterator.hpp	/^  CastIterator(const IT _iterator):iterator(_iterator) {}$/;"	f	class:CastIterator
CastIterator	src/util/CastIterator.hpp	/^class CastIterator {$/;"	c
CatchCallback	src/lua/Catch.hpp	/^typedef void (*CatchCallback)(Error &&error);$/;"	t	namespace:Lua
CatmullRomInterpolator	src/Replay/CatmullRomInterpolator.hpp	/^  CatmullRomInterpolator(double _time):time(_time)$/;"	f	class:CatmullRomInterpolator
CatmullRomInterpolator	src/Replay/CatmullRomInterpolator.hpp	/^class CatmullRomInterpolator$/;"	c
CelsiusToKelvin	src/Atmosphere/Temperature.hpp	/^CelsiusToKelvin(double celsius)$/;"	f
Center	src/Gauge/LogoView.cpp	/^Center(unsigned canvas_size, unsigned element_size)$/;"	f	file:
CentreBottom	src/Gauge/TrafficSettings.hpp	/^    CentreBottom,$/;"	m	class:TrafficSettings::GaugeLocation
CentreTop	src/Gauge/TrafficSettings.hpp	/^    CentreTop,$/;"	m	class:TrafficSettings::GaugeLocation
ChangedState	src/Engine/Airspace/AirspaceWarning.cpp	/^AirspaceWarning::ChangedState() const$/;"	f	class:AirspaceWarning
Channel	src/event/net/cares/Channel.cxx	/^Channel::Channel(EventLoop &event_loop)$/;"	f	class:Cares::Channel
Channel	src/event/net/cares/Channel.hxx	/^class Channel {$/;"	c	namespace:Cares
CharacterButton	src/Form/CharacterButton.hpp	/^class CharacterButton : public Button {$/;"	c
CharacterFunction	src/Form/Form.hpp	/^  typedef std::function<bool(unsigned)> CharacterFunction;$/;"	t	class:WndForm
Charset	src/io/Charset.hpp	/^enum class Charset {$/;"	c
ChartControl	src/Dialogs/dlgAnalysis.cpp	/^  ChartControl(AnalysisWidget &_analysis_widget,$/;"	f	class:ChartControl
ChartControl	src/Dialogs/dlgAnalysis.cpp	/^class ChartControl: public PaintWindow$/;"	c	file:
ChartLook	src/Look/ChartLook.hpp	/^struct ChartLook {$/;"	s
ChartProjection	src/Projection/ChartProjection.hpp	/^class ChartProjection:$/;"	c
ChartRenderer	src/Renderer/ChartRenderer.hpp	/^class ChartRenderer$/;"	c
Check	src/Computer/FlyingComputer.cpp	/^FlyingComputer::Check(FlyingState &state, double time)$/;"	f	class:FlyingComputer
Check	src/Device/Driver/IMI/Protocol/MessageParser.cpp	/^IMI::MessageParser::Check(const TMsg *msg, IMIDWORD size)$/;"	f	class:IMI::MessageParser
Check	src/Geo/GeoBounds.hpp	/^  constexpr bool Check() const {$/;"	f	class:GeoBounds
Check	src/Geo/GeoPoint.hpp	/^  constexpr bool Check() const {$/;"	f	struct:GeoPoint
Check	src/Input/TaskEventObserver.cpp	/^TaskEventObserver::Check(const TaskManager &tm)$/;"	f	class:TaskEventObserver
Check	src/Monitor/AirspaceWarningMonitor.cpp	/^AirspaceWarningMonitor::Check()$/;"	f	class:AirspaceWarningMonitor
Check	src/Monitor/AllMonitors.hpp	/^  void Check() {$/;"	f	class:final
Check	src/Monitor/MatTaskMonitor.cpp	/^MatTaskMonitor::Check()$/;"	f	class:MatTaskMonitor
Check	src/Monitor/TaskAdvanceMonitor.cpp	/^TaskAdvanceMonitor::Check()$/;"	f	class:TaskAdvanceMonitor
Check	src/Monitor/TaskConstraintsMonitor.cpp	/^TaskConstraintsMonitor::Check()$/;"	f	class:TaskConstraintsMonitor
Check	src/Monitor/WindMonitor.cpp	/^WindMonitor::Check()$/;"	f	class:WindMonitor
Check	src/NMEA/ClimbHistory.hpp	/^  bool Check(unsigned speed) const {$/;"	f	class:ClimbHistory
Check	src/Renderer/LabelBlock.cpp	/^LabelBlock::Bucket::Check(const PixelRect rc) const$/;"	f	class:LabelBlock::Bucket
Check	src/Renderer/TransparentRendererCache.cpp	/^TransparentRendererCache::Check(const WindowProjection &projection) const$/;"	f	class:TransparentRendererCache
Check	src/Renderer/TransparentRendererCache.hpp	/^  constexpr bool Check(const WindowProjection &projection) const {$/;"	f	class:TransparentRendererCache
Check	src/lua/Class.hxx	/^	static pointer Check(lua_State *L, int idx) {$/;"	f	struct:Lua::Class
Check	src/lua/InputEvent.cpp	/^  static LuaInputEvent &Check(lua_State *L, int idx) {$/;"	f	class:final	file:
Check	src/ui/canvas/memory/Buffer.hpp	/^  constexpr bool Check(unsigned x, unsigned y) const {$/;"	f	struct:ConstImageBuffer
Check	src/ui/canvas/memory/Buffer.hpp	/^  constexpr bool Check(unsigned x, unsigned y) const {$/;"	f	struct:WritableImageBuffer
Check	src/ui/canvas/memory/RasterCanvas.hpp	/^  constexpr bool Check(unsigned x, unsigned y) const {$/;"	f	class:RasterCanvas
Check	src/ui/window/custom/DoubleClick.hpp	/^  bool Check(PixelPoint _location) {$/;"	f	class:DoubleClick
CheckAddFinish	src/Engine/Task/Factory/AbstractTaskFactory.cpp	/^AbstractTaskFactory::CheckAddFinish()$/;"	f	class:AbstractTaskFactory
CheckAltitudeAGL	src/Computer/FlyingComputer.cpp	/^CheckAltitudeAGL(const DerivedInfo &calculated)$/;"	f	file:
CheckBit	src/ui/event/poll/linux/Input.cpp	/^CheckBit(const T bits[], unsigned i)$/;"	f	file:
CheckBoxControl	src/Form/CheckBox.hpp	/^class CheckBoxControl : public PaintWindow {$/;"	c
CheckBoxLook	src/Look/CheckBoxLook.hpp	/^struct CheckBoxLook {$/;"	s
CheckClearance	src/Engine/Route/AirspaceRoute.cpp	/^AirspaceRoute::CheckClearance(const RouteLink &e, RoutePoint &inp) const$/;"	f	class:AirspaceRoute
CheckClearance	src/Engine/Route/RoutePolars.cpp	/^RoutePolars::CheckClearance(const RouteLink &e, const RasterMap* map,$/;"	f	class:RoutePolars
CheckClearance	src/Engine/Route/TerrainRoute.cpp	/^TerrainRoute::CheckClearance(const RouteLink &e, RoutePoint& inp) const$/;"	f	class:TerrainRoute
CheckClearanceTerrain	src/Engine/Route/RoutePlanner.cpp	/^RoutePlanner::CheckClearanceTerrain(const RouteLink &e, RoutePoint& inp) const$/;"	f	class:RoutePlanner
CheckClimbing	src/Computer/FlyingComputer.cpp	/^FlyingComputer::CheckClimbing(double dt, double altitude)$/;"	f	class:FlyingComputer
CheckCondition	src/Computer/ConditionMonitor/ConditionMonitorAATTime.cpp	/^ConditionMonitorAATTime::CheckCondition(const NMEAInfo &basic,$/;"	f	class:ConditionMonitorAATTime
CheckCondition	src/Computer/ConditionMonitor/ConditionMonitorFinalGlide.cpp	/^ConditionMonitorFinalGlide::CheckCondition(const NMEAInfo &basic,$/;"	f	class:ConditionMonitorFinalGlide
CheckCondition	src/Computer/ConditionMonitor/ConditionMonitorGlideTerrain.cpp	/^ConditionMonitorGlideTerrain::CheckCondition(const NMEAInfo &basic,$/;"	f	class:ConditionMonitorGlideTerrain
CheckCondition	src/Computer/ConditionMonitor/ConditionMonitorLandableReachable.cpp	/^ConditionMonitorLandableReachable::CheckCondition(const NMEAInfo &basic,$/;"	f	class:ConditionMonitorLandableReachable
CheckCondition	src/Computer/ConditionMonitor/ConditionMonitorSunset.cpp	/^ConditionMonitorSunset::CheckCondition(const NMEAInfo &basic,$/;"	f	class:ConditionMonitorSunset
CheckCondition	src/Computer/ConditionMonitor/ConditionMonitorWind.cpp	/^ConditionMonitorWind::CheckCondition(const NMEAInfo &basic,$/;"	f	class:ConditionMonitorWind
CheckDuplicateWaypoints	src/Engine/Task/Ordered/OrderedTask.cpp	/^OrderedTask::CheckDuplicateWaypoints(Waypoints& waypoints)$/;"	f	class:OrderedTask
CheckDuplicateWaypoints	src/Engine/Task/Ordered/OrderedTask.cpp	/^OrderedTask::CheckDuplicateWaypoints(Waypoints& waypoints,$/;"	f	class:OrderedTask
CheckEnabled	src/Device/Port/DumpPort.cpp	/^DumpPort::CheckEnabled()$/;"	f	class:DumpPort
CheckEnterTransition	src/Engine/Task/Ordered/Points/FinishPoint.cpp	/^FinishPoint::CheckEnterTransition(const AircraftState &ref_now,$/;"	f	class:FinishPoint
CheckEnterTransition	src/Engine/Task/Ordered/Points/OrderedTaskPoint.cpp	/^OrderedTaskPoint::CheckEnterTransition(const AircraftState &ref_now,$/;"	f	class:OrderedTaskPoint
CheckEnterTransitionMat	src/Engine/Task/Ordered/Points/OrderedTaskPoint.hpp	/^  bool CheckEnterTransitionMat(const AircraftState &ref_now,$/;"	f	class:OrderedTaskPoint
CheckExistsOrAppend	src/Engine/Waypoint/Waypoints.cpp	/^Waypoints::CheckExistsOrAppend(WaypointPtr waypoint)$/;"	f	class:Waypoints
CheckExitTransition	src/Engine/Task/Ordered/Points/StartPoint.cpp	/^StartPoint::CheckExitTransition(const AircraftState &ref_now,$/;"	f	class:StartPoint
CheckExpand	src/Engine/ThermalBand/ThermalBand.cpp	/^ThermalBand::CheckExpand(const ThermalBand& tb, bool update)$/;"	f	class:ThermalBand
CheckHeight	src/Engine/Task/Ordered/FinishConstraints.cpp	/^FinishConstraints::CheckHeight(const AircraftState &state,$/;"	f	class:FinishConstraints
CheckHeight	src/Engine/Task/Ordered/StartConstraints.cpp	/^StartConstraints::CheckHeight(const AircraftState &state,$/;"	f	class:StartConstraints
CheckKey	src/Form/Form.cpp	/^CheckKey(ContainerWindow *container, const Event &event)$/;"	f	file:
CheckLandingSpeed	src/Computer/FlyingComputer.cpp	/^CheckLandingSpeed(double takeoff_speed, const NMEAInfo &basic)$/;"	f	file:
CheckOrderedTask	src/Engine/Task/TaskManager.cpp	/^TaskManager::CheckOrderedTask() const$/;"	f	class:TaskManager
CheckPersistent	src/lua/Persistent.cpp	/^Lua::CheckPersistent(lua_State *L)$/;"	f	class:Lua
CheckPowered	src/Computer/FlyingComputer.cpp	/^FlyingComputer::CheckPowered(double dt, const NMEAInfo &basic,$/;"	f	class:FlyingComputer
CheckProfileFilePassword	src/Dialogs/ProfilePasswordDialog.cpp	/^CheckProfileFilePassword(Path path)$/;"	f
CheckProfilePassword	src/Dialogs/ProfilePasswordDialog.cpp	/^CheckProfilePassword(const ProfileMap &map)$/;"	f
CheckProfilePasswordResult	src/Dialogs/ProfilePasswordDialog.cpp	/^CheckProfilePasswordResult(ProfilePasswordResult result)$/;"	f
CheckReadyToAdvance	src/Engine/Task/Ordered/SmartTaskAdvance.cpp	/^SmartTaskAdvance::CheckReadyToAdvance(const TaskPoint &tp,$/;"	f	class:SmartTaskAdvance
CheckRelease	src/Computer/FlyingComputer.cpp	/^FlyingComputer::CheckRelease(FlyingState &state, double time,$/;"	f	class:FlyingComputer
CheckResize	src/ui/canvas/fb/TopCanvas.cpp	/^TopCanvas::CheckResize()$/;"	f	class:TopCanvas
CheckResize	src/ui/canvas/fb/TopCanvas.cpp	/^TopCanvas::CheckResize(const PixelSize new_native_size)$/;"	f	class:TopCanvas
CheckResize	src/ui/canvas/opengl/TopCanvas.cpp	/^TopCanvas::CheckResize(PixelSize new_native_size)$/;"	f	class:TopCanvas
CheckReverse	src/time/GPSClock.hpp	/^  bool CheckReverse(const double now) {$/;"	f	class:GPSClock
CheckSatellitesChanged	src/Logger/LoggerFRecord.cpp	/^LoggerFRecord::CheckSatellitesChanged(const GPSState &gps) const$/;"	f	class:LoggerFRecord
CheckSecondary	src/Engine/Route/AirspaceRoute.cpp	/^AirspaceRoute::CheckSecondary(const RouteLink &e)$/;"	f	class:AirspaceRoute
CheckSecondary	src/Engine/Route/RoutePlanner.hpp	/^  virtual bool CheckSecondary(const RouteLink &e) {$/;"	f	class:RoutePlanner
CheckSequenceUTF8	src/util/UTF8.cpp	/^struct CheckSequenceUTF8 {$/;"	s	file:
CheckSequenceUTF8	src/util/UTF8.cpp	/^struct CheckSequenceUTF8<0u> {$/;"	s	file:
CheckShutdown	src/UIActions.cpp	/^UIActions::CheckShutdown()$/;"	f	class:UIActions
CheckSpeed	src/Engine/Task/Ordered/StartConstraints.cpp	/^StartConstraints::CheckSpeed(double ground_speed,$/;"	f	class:StartConstraints
CheckStopped	src/thread/StoppableThread.hpp	/^  bool CheckStopped() const {$/;"	f	class:StoppableThread
CheckTTYName	src/Device/Port/TTYEnumerator.cpp	/^CheckTTYName(const char *name)$/;"	f	file:
CheckTakeOffSpeed	src/Computer/FlyingComputer.cpp	/^CheckTakeOffSpeed(double takeoff_speed, const NMEAInfo &basic)$/;"	f	file:
CheckTarget	src/Engine/Task/Ordered/Points/AATPoint.cpp	/^AATPoint::CheckTarget(const AircraftState &state, const bool known_outside)$/;"	f	class:AATPoint
CheckTargetInside	src/Engine/Task/Ordered/Points/AATPoint.cpp	/^AATPoint::CheckTargetInside(const AircraftState& state)$/;"	f	class:AATPoint
CheckTargetOutside	src/Engine/Task/Ordered/Points/AATPoint.cpp	/^AATPoint::CheckTargetOutside(const AircraftState& state)$/;"	f	class:AATPoint
CheckTask	src/Engine/Task/TaskManager.cpp	/^TaskManager::CheckTask() const$/;"	f	class:TaskManager
CheckThreeAlphaNumeric	src/IGC/IGCParser.cpp	/^CheckThreeAlphaNumeric(const char *src)$/;"	f	file:
CheckTileVisibility	src/Terrain/RasterTile.cpp	/^RasterTile::CheckTileVisibility(int view_x, int view_y, unsigned view_radius)$/;"	f	class:RasterTile
CheckTitle	src/Weather/NOAAFormatter.cpp	/^CheckTitle(const TCHAR *title, size_t title_length, const TCHAR *check)$/;"	f	file:
CheckTransitionOptionalStart	src/Engine/Task/Ordered/OrderedTask.cpp	/^OrderedTask::CheckTransitionOptionalStart(const AircraftState &state,$/;"	f	class:OrderedTask
CheckTransitionPoint	src/Engine/Task/Ordered/OrderedTask.cpp	/^OrderedTask::CheckTransitionPoint(OrderedTaskPoint &point,$/;"	f	class:OrderedTask
ChecklistText	src/Dialogs/dlgChecklist.cpp	/^static TCHAR *ChecklistText[MAXTITLE];$/;"	v	file:
ChecklistTitle	src/Dialogs/dlgChecklist.cpp	/^static TCHAR *ChecklistTitle[MAXTITLE];$/;"	v	file:
Child	src/Widget/PagerWidget.hpp	/^  struct Child {$/;"	s	class:PagerWidget
ChronologicalList	src/Engine/Trace/Trace.hpp	/^                                 boost::intrusive::constant_time_size<false>> ChronologicalList;$/;"	t	class:Trace
CircleZoom	src/Profile/ProfileKeys.cpp	/^const char CircleZoom[] = "CircleZoom";$/;"	m	namespace:ProfileKeys	file:
CirclingAverage	src/Engine/Navigation/TraceHistory.hpp	/^  TraceVariableHistory CirclingAverage;$/;"	m	class:TraceHistory
CirclingComputer	src/Computer/CirclingComputer.hpp	/^class CirclingComputer {$/;"	c
CirclingInfo	src/NMEA/CirclingInfo.hpp	/^struct CirclingInfo$/;"	s
CirclingMode	src/NMEA/CirclingInfo.hpp	/^enum class CirclingMode: uint8_t {$/;"	c
CirclingSettings	src/Computer/Settings.hpp	/^struct CirclingSettings {$/;"	s
CirclingToCruiseModeSwitchThreshold	src/Dialogs/Settings/Panels/GlideComputerConfigPanel.cpp	/^  CirclingToCruiseModeSwitchThreshold,$/;"	e	enum:ControlIndex	file:
CirclingToCruiseModeSwitchThreshold	src/Profile/ProfileKeys.cpp	/^const char CirclingToCruiseModeSwitchThreshold[] = "CirclingToCruiseModeSwitchThreshold";$/;"	m	namespace:ProfileKeys	file:
CirclingWind	src/Computer/Wind/CirclingWind.hpp	/^class CirclingWind$/;"	c
CirclingWindEnabled	src/Computer/Wind/Settings.hpp	/^  bool CirclingWindEnabled() const {$/;"	f	struct:WindSettings
CirclingZoom	src/Dialogs/Settings/Panels/MapDisplayConfigPanel.cpp	/^  CirclingZoom,$/;"	e	enum:ControlIndex	file:
Clamp	src/util/Clamp.hpp	/^Clamp(const T &value, const T &min, const T &max)$/;"	f
Class	src/java/Class.hxx	/^class Class : public LocalRef<jclass> {$/;"	c	namespace:Java
Class	src/lua/Class.hxx	/^struct Class {$/;"	s	namespace:Lua
CleanASCII	src/util/StaticString.hxx	/^	void CleanASCII() {$/;"	f	class:StaticStringBase
CleanString	src/Device/Driver/EWMicroRecorder.cpp	/^CleanString(char *p)$/;"	f	file:
CleanUp	src/FLARM/FlarmCalculations.cpp	/^FlarmCalculations::CleanUp(double now)$/;"	f	class:FlarmCalculations
Clear	src/Airspace/ProtectedAirspaceWarningManager.cpp	/^ProtectedAirspaceWarningManager::Clear()$/;"	f	class:ProtectedAirspaceWarningManager
Clear	src/Audio/PCMBufferDataSource.cpp	/^PCMBufferDataSource::Clear()$/;"	f	class:PCMBufferDataSource
Clear	src/Audio/SLES/AndroidSimpleBufferQueue.hpp	/^    SLresult Clear() {$/;"	f	class:SLES::AndroidSimpleBufferQueue
Clear	src/Computer/LiftDatabaseComputer.cpp	/^LiftDatabaseComputer::Clear(LiftDatabase &lift_database,$/;"	f	class:LiftDatabaseComputer
Clear	src/Computer/StateClock.hpp	/^  void Clear() {$/;"	f	class:StateClock
Clear	src/Computer/WaveResult.hpp	/^  void Clear() {$/;"	f	struct:WaveResult
Clear	src/Device/Config.cpp	/^DeviceConfig::Clear()$/;"	f	class:DeviceConfig
Clear	src/Dialogs/Device/DeviceListDialog.cpp	/^    void Clear() {$/;"	f	union:final::Item
Clear	src/Dialogs/Device/PortMonitor.cpp	/^  void Clear() {$/;"	f	class:final
Clear	src/Engine/Airspace/AirspaceSorter.hpp	/^  void Clear() {$/;"	f	struct:AirspaceFilterData
Clear	src/Engine/Airspace/Airspaces.cpp	/^Airspaces::Clear()$/;"	f	class:Airspaces
Clear	src/Engine/Route/FlatTriangleFan.hpp	/^  void Clear() {$/;"	f	class:FlatTriangleFan
Clear	src/Engine/Route/ReachResult.hpp	/^  void Clear() {$/;"	f	struct:ReachResult
Clear	src/Engine/Task/Ordered/OrderedTask.cpp	/^OrderedTask::Clear()$/;"	f	class:OrderedTask
Clear	src/Engine/Trace/Point.hpp	/^  void Clear() {$/;"	f	class:TracePoint
Clear	src/Engine/Waypoint/Runway.hpp	/^  void Clear() {$/;"	f	class:Runway
Clear	src/Engine/Waypoint/Waypoints.cpp	/^Waypoints::Clear()$/;"	f	class:Waypoints
Clear	src/FLARM/Data.hpp	/^  void Clear() {$/;"	f	struct:FlarmData
Clear	src/FLARM/Error.hpp	/^  void Clear() {$/;"	f
Clear	src/FLARM/FlarmId.hpp	/^  void Clear() {$/;"	f	class:FlarmId
Clear	src/FLARM/FlarmNetDatabase.hpp	/^  void Clear() {$/;"	f	class:FlarmNetDatabase
Clear	src/FLARM/List.hpp	/^  void Clear() {$/;"	f	struct:TrafficList
Clear	src/FLARM/Status.hpp	/^  void Clear() {$/;"	f	struct:FlarmStatus
Clear	src/FLARM/Traffic.hpp	/^  void Clear() {$/;"	f	class:FlarmTraffic::AircraftType
Clear	src/FLARM/Version.hpp	/^  void Clear() {$/;"	f	struct:FlarmVersion
Clear	src/Form/DataField/ComboList.hpp	/^  void Clear() {$/;"	f	class:ComboList
Clear	src/GliderLink/List.hpp	/^  void Clear() {$/;"	f	struct:GliderLinkTrafficList
Clear	src/GliderLink/Traffic.hpp	/^  void Clear() {$/;"	f	struct:GliderLinkTraffic
Clear	src/IGC/IGCFix.hpp	/^  void Clear() {$/;"	f	struct:IGCFix
Clear	src/InfoBoxes/Data.cpp	/^InfoBoxData::Clear()$/;"	f	class:InfoBoxData
Clear	src/InfoBoxes/InfoBoxSettings.cpp	/^InfoBoxSettings::Panel::Clear()$/;"	f	class:InfoBoxSettings::Panel
Clear	src/Kobo/WPASupplicant.hpp	/^  void Clear() {$/;"	f	struct:WifiStatus
Clear	src/Menu/MenuData.cpp	/^Menu::Clear()$/;"	f	class:Menu
Clear	src/Menu/MenuData.hpp	/^  void Clear() {$/;"	f	class:MenuItem
Clear	src/NMEA/CirclingInfo.cpp	/^CirclingInfo::Clear()$/;"	f	class:CirclingInfo
Clear	src/NMEA/ClimbHistory.cpp	/^ClimbHistory::Clear()$/;"	f	class:ClimbHistory
Clear	src/NMEA/ClimbInfo.cpp	/^ClimbInfo::Clear()$/;"	f	class:ClimbInfo
Clear	src/NMEA/ClimbInfo.cpp	/^OneClimbInfo::Clear()$/;"	f	class:OneClimbInfo
Clear	src/NMEA/Derived.cpp	/^AirspaceWarningsInfo::Clear()$/;"	f	class:AirspaceWarningsInfo
Clear	src/NMEA/Derived.cpp	/^TeamInfo::Clear()$/;"	f	class:TeamInfo
Clear	src/NMEA/Derived.cpp	/^TerrainInfo::Clear()$/;"	f	class:TerrainInfo
Clear	src/NMEA/DeviceInfo.hpp	/^  void Clear() {$/;"	f	struct:DeviceInfo
Clear	src/NMEA/ExternalSettings.cpp	/^ExternalSettings::Clear()$/;"	f	class:ExternalSettings
Clear	src/NMEA/LiftDatabase.hpp	/^  void Clear() {$/;"	f	class:LiftDatabase
Clear	src/NMEA/ThermalLocator.cpp	/^ThermalLocatorInfo::Clear()$/;"	f	class:ThermalLocatorInfo
Clear	src/NMEA/Validity.hpp	/^  void Clear() {$/;"	f	class:Validity
Clear	src/NMEA/VarioInfo.cpp	/^VarioInfo::Clear()$/;"	f	class:VarioInfo
Clear	src/PageState.cpp	/^PagesState::Clear()$/;"	f	class:PagesState
Clear	src/PageState.hpp	/^  void Clear() {$/;"	f	struct:PageState
Clear	src/Profile/ProfileMap.cpp	/^Profile::Clear()$/;"	f	class:Profile
Clear	src/RadioFrequency.hpp	/^  void Clear() {$/;"	f	class:RadioFrequency
Clear	src/Renderer/AirspaceLabelList.hpp	/^  void Clear() {$/;"	f	class:AirspaceLabelList
Clear	src/Renderer/AirspaceLabelRenderer.hpp	/^  void Clear() {$/;"	f	class:AirspaceLabelRenderer
Clear	src/Renderer/AirspaceRenderer.hpp	/^  void Clear() {$/;"	f	class:AirspaceRenderer
Clear	src/Renderer/LabelBlock.cpp	/^LabelBlock::Bucket::Clear()$/;"	f	class:LabelBlock::Bucket
Clear	src/Repository/AvailableFile.hpp	/^  void Clear() {$/;"	f	struct:AvailableFile
Clear	src/Repository/FileRepository.hpp	/^  void Clear() {$/;"	f	struct:FileRepository
Clear	src/Screen/TerminalWindow.cpp	/^TerminalWindow::Clear()$/;"	f	class:TerminalWindow
Clear	src/Task/TaskStore.cpp	/^TaskStore::Clear()$/;"	f	class:TaskStore
Clear	src/TeamCode/TeamCode.hpp	/^  void Clear() {$/;"	f	class:TeamCode
Clear	src/Terrain/RasterTile.hpp	/^  void Clear() {$/;"	f	class:RasterTile
Clear	src/UIState.cpp	/^UIState::Clear()$/;"	f	class:UIState
Clear	src/Waypoint/WaypointFilter.hpp	/^  void Clear() {$/;"	f	struct:WaypointFilter
Clear	src/Weather/METAR.hpp	/^  void Clear() {$/;"	f	struct:METAR
Clear	src/Weather/WeatherUIState.hpp	/^  void Clear() {$/;"	f	struct:WeatherUIState
Clear	src/lua/InputEvent.cpp	/^bool LuaEventRegistry<T>::Clear(const T event) {$/;"	f	class:LuaEventRegistry
Clear	src/time/BrokenDate.hpp	/^  void Clear() {$/;"	f	struct:BrokenDate
Clear	src/ui/canvas/gdi/Canvas.hpp	/^  void Clear() {$/;"	f	class:Canvas
Clear	src/ui/canvas/gdi/Canvas.hpp	/^  void Clear(const Brush &brush) {$/;"	f	class:Canvas
Clear	src/ui/canvas/gdi/Canvas.hpp	/^  void Clear(const Color color) {$/;"	f	class:Canvas
Clear	src/ui/canvas/gdi/Canvas.hpp	/^  void Clear(const HWColor color) {$/;"	f	class:Canvas
Clear	src/ui/canvas/memory/Canvas.hpp	/^  void Clear() {$/;"	f	class:Canvas
Clear	src/ui/canvas/memory/Canvas.hpp	/^  void Clear(const Brush &brush) {$/;"	f	class:Canvas
Clear	src/ui/canvas/memory/Canvas.hpp	/^  void Clear(const Color color) {$/;"	f	class:Canvas
Clear	src/ui/canvas/opengl/Canvas.hpp	/^  void Clear() {$/;"	f	class:Canvas
Clear	src/ui/canvas/opengl/Canvas.hpp	/^  void Clear(const Brush &brush) {$/;"	f	class:Canvas
Clear	src/ui/canvas/opengl/Canvas.hpp	/^  void Clear(const Color color) {$/;"	f	class:Canvas
Clear	src/ui/window/custom/WList.cpp	/^WindowList::Clear()$/;"	f	class:WindowList
Clear	src/util/Cache.hxx	/^	void Clear() {$/;"	f	class:Cache
Clear	src/util/RadixTree.hpp	/^    void Clear() {$/;"	f	struct:RadixTree::LeafList
Clear	src/util/RadixTree.hpp	/^    void Clear() {$/;"	f	struct:RadixTree::Node
Clear	src/util/RadixTree.hpp	/^  void Clear() {$/;"	f	class:RadixTree
ClearAirspaces	src/Computer/GlideComputer.hpp	/^  void ClearAirspaces() {$/;"	f	class:GlideComputer
ClearAirspaces	src/Computer/RouteComputer.hpp	/^  void ClearAirspaces() {$/;"	f	class:RouteComputer
ClearAirspaces	src/Computer/TaskComputer.hpp	/^  void ClearAirspaces() {$/;"	f	class:TaskComputer
ClearBuffer	src/Logger/Logger.cpp	/^Logger::ClearBuffer()$/;"	f	class:Logger
ClearBuffer	src/Logger/LoggerImpl.cpp	/^LoggerImpl::ClearBuffer()$/;"	f	class:LoggerImpl
ClearBuffer	src/MapWindow/StencilMapCanvas.cpp	/^StencilMapCanvas::ClearBuffer()$/;"	f	class:StencilMapCanvas
ClearCache	src/Topography/TopographyFile.cpp	/^TopographyFile::ClearCache()$/;"	f	class:TopographyFile
ClearChoices	src/Form/DataField/Enum.hpp	/^  void ClearChoices() {$/;"	f	class:final
ClearClearance	src/Engine/Airspace/AbstractAirspace.cpp	/^AbstractAirspace::ClearClearance() const$/;"	f	class:AbstractAirspace
ClearClearance	src/Engine/Airspace/Airspace.cpp	/^Airspace::ClearClearance() const$/;"	f	class:Airspace
ClearClearances	src/Engine/Airspace/Airspaces.cpp	/^Airspaces::ClearClearances()$/;"	f	class:Airspaces
ClearConfig	src/Device/Descriptor.cpp	/^DeviceDescriptor::ClearConfig()$/;"	f	class:DeviceDescriptor
ClearDirection	src/Engine/Waypoint/Runway.hpp	/^  void ClearDirection() {$/;"	f	class:Runway
ClearExtensions	src/IGC/IGCFix.hpp	/^  void ClearExtensions() {$/;"	f	struct:IGCFix
ClearFillStencil	src/Renderer/AirspaceRendererGL.cpp	/^  void ClearFillStencil() {$/;"	f	class:final	file:
ClearHome	src/Computer/Settings.cpp	/^PlacesOfInterestSettings::ClearHome()$/;"	f	class:PlacesOfInterestSettings
ClearKeyDownFunction	src/Form/Form.hpp	/^  void ClearKeyDownFunction() {$/;"	f	class:WndForm
ClearLog	src/Device/Driver/CAI302/Manage.cpp	/^CAI302Device::ClearLog(OperationEnvironment &env)$/;"	f	class:CAI302Device
ClearLog	src/Device/Driver/CAI302/Protocol.cpp	/^CAI302::ClearLog(Port &port, OperationEnvironment &env)$/;"	f	class:CAI302
ClearName	src/Engine/Task/Ordered/OrderedTask.hpp	/^  void ClearName() {$/;"	f	class:final
ClearNotification	src/ui/event/Notify.cpp	/^Notify::ClearNotification()$/;"	f	class:UI::Notify
ClearPilot	src/Device/Driver/CAI302/Manage.cpp	/^CAI302Device::ClearPilot(OperationEnvironment &env)$/;"	f	class:CAI302Device
ClearPilot	src/Device/Driver/CAI302/Protocol.cpp	/^CAI302::ClearPilot(Port &port, OperationEnvironment &env)$/;"	f	class:CAI302
ClearPoints	src/Device/Driver/CAI302/Manage.cpp	/^CAI302Device::ClearPoints(OperationEnvironment &env)$/;"	f	class:CAI302Device
ClearPoints	src/Device/Driver/CAI302/Protocol.cpp	/^CAI302::ClearPoints(Port &port, OperationEnvironment &env)$/;"	f	class:CAI302
ClearQueues	src/Input/InputQueue.cpp	/^InputEvents::ClearQueues()$/;"	f	class:InputEvents
ClearReach	src/Engine/Route/RoutePlanner.cpp	/^RoutePlanner::ClearReach()$/;"	f	class:RoutePlanner
ClearReach	src/Task/ProtectedRoutePlanner.hpp	/^  void ClearReach() {$/;"	f	class:ProtectedRoutePlanner
ClearReach	src/Task/RoutePlannerGlue.hpp	/^  void ClearReach() {$/;"	f	class:RoutePlannerGlue
ClearRequest	src/Terrain/RasterTile.hpp	/^  void ClearRequest() {$/;"	f	class:RasterTile
ClearSampleAllButLast	src/Engine/Task/Points/SampledTaskPoint.cpp	/^SampledTaskPoint::ClearSampleAllButLast(const AircraftState& ref_last,$/;"	f	class:SampledTaskPoint
ClearSuffix	src/Dialogs/Task/Manager/TaskListPanel.cpp	/^ClearSuffix(TCHAR *p, const TCHAR *suffix)$/;"	f	file:
ClearText	src/Dialogs/TouchTextEntry.cpp	/^ClearText()$/;"	f	file:
ClearVario	src/InfoBoxes/InfoBoxLayout.hpp	/^    void ClearVario() {$/;"	f	struct:InfoBoxLayout::Layout
ClearWeakBaroAltitude	src/NMEA/Info.hpp	/^  void ClearWeakBaroAltitude() {$/;"	f	struct:NMEAInfo
ClearWeakPressureAltitude	src/NMEA/Info.hpp	/^  void ClearWeakPressureAltitude() {$/;"	f	struct:NMEAInfo
ClearWhite	src/ui/canvas/gdi/Canvas.hpp	/^  void ClearWhite() {$/;"	f	class:Canvas
ClearWhite	src/ui/canvas/memory/Canvas.hpp	/^  void ClearWhite() {$/;"	f	class:Canvas
ClearWhite	src/ui/canvas/opengl/Canvas.hpp	/^  void ClearWhite() {$/;"	f	class:Canvas
ClearingPair	src/Engine/Route/RoutePlanner.hpp	/^  typedef std::pair<AFlatGeoPoint, AFlatGeoPoint> ClearingPair;$/;"	t	class:RoutePlanner
Click	src/Form/Button.cpp	/^Button::Click()$/;"	f	class:Button
ClickPage	src/Widget/TabWidget.cpp	/^TabWidget::ClickPage(unsigned i)$/;"	f	class:TabWidget
Client	src/Tracking/SkyLines/Client.hpp	/^  explicit Client(EventLoop &event_loop,$/;"	f	class:SkyLinesTracking::final
Client	src/Tracking/SkyLines/Server.hpp	/^  struct Client {$/;"	s	class:SkyLinesTracking::Server
Climb	src/Replay/TaskAutoPilot.hpp	/^    Climb = 0,$/;"	e	enum:TaskAutoPilot::AcState
ClimbAverageCalculator	src/Computer/ClimbAverageCalculator.hpp	/^class ClimbAverageCalculator$/;"	c
ClimbChartCaption	src/Renderer/ClimbChartRenderer.cpp	/^ClimbChartCaption(TCHAR *sTmp,$/;"	f
ClimbHistory	src/NMEA/ClimbHistory.hpp	/^class ClimbHistory {$/;"	c
ClimbInfo	src/NMEA/ClimbInfo.hpp	/^struct ClimbInfo$/;"	s
ClimbMapScale	src/Profile/ProfileKeys.cpp	/^const char ClimbMapScale[] = "ClimbMapScale";$/;"	m	namespace:ProfileKeys	file:
ClimbPercentLook	src/Look/ClimbPercentLook.hpp	/^struct ClimbPercentLook {$/;"	s
ClimbPercentRenderer	src/Renderer/ClimbPercentRenderer.hpp	/^  ClimbPercentRenderer(const ClimbPercentLook &_look):look(_look) {}$/;"	f	class:ClimbPercentRenderer
ClimbPercentRenderer	src/Renderer/ClimbPercentRenderer.hpp	/^class ClimbPercentRenderer {$/;"	c
Clip	src/Audio/AudioAlgorithms.hpp	/^inline int16_t Clip(int32_t value) {$/;"	f
Clip	src/MapWindow/OverlayBitmap.cpp	/^Clip(const GeoQuadrilateral &_geo, const GeoBounds &_bounds)$/;"	f	file:
Clip	src/ui/canvas/memory/Canvas.cpp	/^Clip(int &position, unsigned &length, unsigned max,$/;"	f	file:
ClipAlt	src/Profile/ProfileKeys.cpp	/^const char ClipAlt[] = "ClipAlt";$/;"	m	namespace:ProfileKeys	file:
ClipAltitude	src/Dialogs/Settings/Panels/AirspaceConfigPanel.cpp	/^  ClipAltitude,$/;"	e	enum:ControlIndex	file:
ClipAxis	src/ui/canvas/memory/RasterCanvas.hpp	/^  static bool ClipAxis(int &position, unsigned &length, unsigned max,$/;"	f	class:RasterCanvas
ClipEncode	src/Geo/GeoClip.cpp	/^GeoClip::ClipEncode(const GeoPoint pt) const$/;"	f	class:GeoClip
ClipEncode	src/ui/canvas/memory/RasterCanvas.hpp	/^  unsigned ClipEncode(int x, int y) const {$/;"	f	class:RasterCanvas
ClipEncodeX	src/Geo/GeoClip.cpp	/^  void ClipEncodeX(const Angle& west, const Angle& east) {$/;"	f	class:ClipGeoPoint
ClipEncodeX	src/Geo/GeoClip.cpp	/^GeoClip::ClipEncodeX(const Angle x) const$/;"	f	class:GeoClip
ClipEncodeX	src/ui/canvas/memory/RasterCanvas.hpp	/^  unsigned ClipEncodeX(int x) const {$/;"	f	class:RasterCanvas
ClipEncodeY	src/Geo/GeoClip.cpp	/^  void ClipEncodeY(const Angle& south, const Angle& north) {$/;"	f	class:ClipGeoPoint
ClipEncodeY	src/Geo/GeoClip.cpp	/^GeoClip::ClipEncodeY(const Angle y) const$/;"	f	class:GeoClip
ClipEncodeY	src/ui/canvas/memory/RasterCanvas.hpp	/^  unsigned ClipEncodeY(int y) const {$/;"	f	class:RasterCanvas
ClipGeoPoint	src/Geo/GeoClip.cpp	/^  ClipGeoPoint(): clip_code(0) {}$/;"	f	class:ClipGeoPoint
ClipGeoPoint	src/Geo/GeoClip.cpp	/^  ClipGeoPoint(const GeoPoint& _p): GeoPoint(_p), clip_code(0)$/;"	f	class:ClipGeoPoint
ClipGeoPoint	src/Geo/GeoClip.cpp	/^class ClipGeoPoint: public GeoPoint {$/;"	c	file:
ClipHeightDelta	src/Terrain/RasterRenderer.cpp	/^ClipHeightDelta(TerrainHeight a, TerrainHeight b)$/;"	f	file:
ClipHeightDelta	src/Terrain/RasterRenderer.cpp	/^ClipHeightDelta(int d)$/;"	f	file:
ClipIncremental	src/ui/canvas/memory/RasterCanvas.hpp	/^  bool ClipIncremental(int &x1, int &y1, int &x2, int &y2,$/;"	f	class:RasterCanvas
ClipLine	src/Geo/GeoClip.cpp	/^GeoClip::ClipLine(GeoPoint &a, GeoPoint &b) const$/;"	f	class:GeoClip
ClipLine	src/ui/canvas/memory/RasterCanvas.hpp	/^  bool ClipLine(int &x1, int &y1, int &x2, int &y2) const {$/;"	f	class:RasterCanvas
ClipMax	src/ui/canvas/memory/SubCanvas.cpp	/^ClipMax(unsigned limit, int offset, unsigned size) {$/;"	f	file:
ClipPolygon	src/Geo/GeoClip.cpp	/^GeoClip::ClipPolygon(GeoPoint *dest,$/;"	f	class:GeoClip
ClipPolygonLatitude	src/Geo/GeoClip.cpp	/^ClipPolygonLatitude(const Angle south, const Angle north, GeoPoint *dest,$/;"	f	file:
ClipPolygonLongitude	src/Geo/GeoClip.cpp	/^ClipPolygonLongitude(const Angle west, const Angle east, GeoPoint *dest,$/;"	f	file:
ClipScaleAxis	src/ui/canvas/memory/RasterCanvas.hpp	/^  static bool ClipScaleAxis(int &dest_position, unsigned &dest_length,$/;"	f	class:RasterCanvas
ClipVertexLongitude	src/Geo/GeoClip.cpp	/^ClipVertexLongitude(const Angle west, const Angle east,$/;"	f	file:
ClipVertex_latitude	src/Geo/GeoClip.cpp	/^ClipVertex_latitude(const Angle south, const Angle north,$/;"	f	file:
ClockCache	src/time/ClockCache.hxx	/^class ClockCache {$/;"	c
Clone	src/Engine/Task/Ordered/Points/OrderedTaskPoint.cpp	/^OrderedTaskPoint::Clone(const TaskBehaviour &task_behaviour,$/;"	f	class:OrderedTaskPoint
Close	src/Device/Descriptor.cpp	/^DeviceDescriptor::Close()$/;"	f	class:DeviceDescriptor
Close	src/Kobo/WPASupplicant.cpp	/^WPASupplicant::Close()$/;"	f	class:WPASupplicant
Close	src/ProgressGlue.cpp	/^ProgressGlue::Close()$/;"	f	class:ProgressGlue
Close	src/Tracking/SkyLines/Client.cpp	/^SkyLinesTracking::Client::Close()$/;"	f	class:SkyLinesTracking::Client
Close	src/Weather/Rasp/RaspCache.cpp	/^RaspCache::Close()$/;"	f	class:RaspCache
Close	src/ui/event/poll/libinput/LibInputHandler.cpp	/^LibInputHandler::Close()$/;"	f	class:UI::LibInputHandler
Close	src/ui/event/poll/linux/Input.cpp	/^LinuxInputDevice::Close()$/;"	f	class:UI::LinuxInputDevice
CloseAlsaHandle	src/Audio/ALSAPCMPlayer.hpp	/^  static inline void CloseAlsaHandle(snd_pcm_t *handle) {$/;"	f	class:ALSAPCMPlayer
CloseDevice	src/ui/event/poll/libinput/LibInputHandler.cpp	/^LibInputHandler::CloseDevice(int fd)$/;"	f	class:UI::LibInputHandler
CloseLanguageFile	src/Language/LanguageGlue.cpp	/^CloseLanguageFile()$/;"	f
CloseNavpoints	src/Device/Driver/CAI302/Manage.cpp	/^CAI302Device::CloseNavpoints(OperationEnvironment &env)$/;"	f	class:CAI302Device
CloseNavpoints	src/Device/Driver/CAI302/Protocol.cpp	/^CAI302::CloseNavpoints(Port &port, OperationEnvironment &env)$/;"	f	class:CAI302
CloseTab	src/Dialogs/Task/Manager/Internal.hpp	/^    CloseTab,$/;"	e	enum:final::Tabs
ClosestPoint	src/Engine/Airspace/AirspaceCircle.cpp	/^AirspaceCircle::ClosestPoint(const GeoPoint &loc,$/;"	f	class:AirspaceCircle
ClosestPoint	src/Engine/Airspace/AirspacePolygon.cpp	/^AirspacePolygon::ClosestPoint(const GeoPoint &loc,$/;"	f	class:AirspacePolygon
ClosingPair	src/Engine/Contest/Solvers/TriangleContest.hpp	/^  typedef std::pair<unsigned, unsigned> ClosingPair;$/;"	t	class:TriangleContest
ClosingPairs	src/Engine/Contest/Solvers/TriangleContest.hpp	/^  struct ClosingPairs {$/;"	s	class:TriangleContest
CloudClient	src/Cloud/Client.hpp	/^  CloudClient(A &&_address, uint64_t _key,$/;"	f	struct:CloudClient
CloudClient	src/Cloud/Client.hpp	/^struct CloudClient$/;"	s
CloudClientContainer	src/Cloud/Client.cpp	/^CloudClientContainer::CloudClientContainer()$/;"	f	class:CloudClientContainer
CloudClientContainer	src/Cloud/Client.hpp	/^class CloudClientContainer {$/;"	c
CloudClientIndexable	src/Cloud/Client.hpp	/^struct CloudClientIndexable {$/;"	s
CloudConfigPanel	src/Dialogs/Settings/Panels/CloudConfigPanel.cpp	/^  CloudConfigPanel()$/;"	f	class:final
CloudData	src/Cloud/Data.hpp	/^struct CloudData {$/;"	s
CloudEnableDialog	src/Dialogs/Tracking/CloudEnableDialog.cpp	/^CloudEnableDialog()$/;"	f
CloudEnabled	src/Profile/ProfileKeys.cpp	/^const char CloudEnabled[] = "CloudEnabled";$/;"	m	namespace:ProfileKeys	file:
CloudKey	src/Profile/ProfileKeys.cpp	/^const char CloudKey[] = "CloudKey";$/;"	m	namespace:ProfileKeys	file:
CloudServer	src/Cloud/Main.cpp	/^  CloudServer(AllocatedPath &&_db_path, EventLoop &event_loop,$/;"	f	class:final
CloudSettings	src/Tracking/SkyLines/CloudSettings.hpp	/^struct CloudSettings {$/;"	s	namespace:SkyLinesTracking
CloudShowThermals	src/Profile/ProfileKeys.cpp	/^const char CloudShowThermals[] = "CloudShowThermals";$/;"	m	namespace:ProfileKeys	file:
CloudThermal	src/Cloud/Thermal.hpp	/^  CloudThermal(uint64_t _client_key,$/;"	f	struct:CloudThermal
CloudThermal	src/Cloud/Thermal.hpp	/^struct CloudThermal$/;"	s
CloudThermalContainer	src/Cloud/Thermal.cpp	/^CloudThermalContainer::CloudThermalContainer()$/;"	f	class:CloudThermalContainer
CloudThermalContainer	src/Cloud/Thermal.hpp	/^class CloudThermalContainer {$/;"	c
CloudThermalIndexable	src/Cloud/Thermal.hpp	/^struct CloudThermalIndexable {$/;"	s
CoPilotName	src/Dialogs/Settings/Panels/LoggerConfigPanel.cpp	/^  CoPilotName,$/;"	e	enum:ControlIndex	file:
CoPilotName	src/Profile/ProfileKeys.cpp	/^const char CoPilotName[] = "CoPilotName";$/;"	m	namespace:ProfileKeys	file:
CoarsePixelDistance	src/Terrain/RasterProjection.hpp	/^  double CoarsePixelDistance(const GeoPoint &location, unsigned pixels) const {$/;"	f	class:RasterProjection
CollectOverlays	src/Weather/PCMet/Overlays.cpp	/^PCMet::CollectOverlays()$/;"	f	class:PCMet
Color	src/ui/canvas/gdi/Color.hpp	/^  constexpr Color(uint8_t r, uint8_t g, uint8_t b) : value(RGB(r, g, b)) {}$/;"	f	class:Color
Color	src/ui/canvas/gdi/Color.hpp	/^  explicit constexpr Color(COLORREF c) : value(c) {}$/;"	f	class:Color
Color	src/ui/canvas/gdi/Color.hpp	/^  explicit constexpr Color(RGB8Color other)$/;"	f	class:Color
Color	src/ui/canvas/gdi/Color.hpp	/^class Color {$/;"	c
Color	src/ui/canvas/memory/Color.hpp	/^  Color(uint8_t r, uint8_t g, uint8_t b, uint8_t a=OPAQUE)$/;"	f	class:Color
Color	src/ui/canvas/memory/Color.hpp	/^  constexpr Color(uint8_t r, uint8_t g, uint8_t b,$/;"	f	class:Color
Color	src/ui/canvas/memory/Color.hpp	/^  explicit constexpr Color(RGB8Color other)$/;"	f	class:Color
Color	src/ui/canvas/memory/Color.hpp	/^  explicit constexpr Color(RGB8Color other, uint8_t _alpha=OPAQUE)$/;"	f	class:Color
Color	src/ui/canvas/memory/Color.hpp	/^  explicit constexpr Color(uint8_t _luminosity,$/;"	f	class:Color
Color	src/ui/canvas/memory/Color.hpp	/^class Color {$/;"	c
Color	src/ui/canvas/opengl/Color.hpp	/^  constexpr Color(GLubyte _r, GLubyte _g, GLubyte _b, GLubyte _a)$/;"	f	class:Color
Color	src/ui/canvas/opengl/Color.hpp	/^  constexpr Color(Internal,$/;"	f	class:Color
Color	src/ui/canvas/opengl/Color.hpp	/^  constexpr Color(uint8_t _r, uint8_t _g, uint8_t _b)$/;"	f	class:Color
Color	src/ui/canvas/opengl/Color.hpp	/^  explicit constexpr Color(RGB8Color other)$/;"	f	class:Color
Color	src/ui/canvas/opengl/Color.hpp	/^class Color {$/;"	c
ColorButtonRenderer	src/Renderer/ColorButtonRenderer.hpp	/^  ColorButtonRenderer(const ButtonLook &_look, Color _color)$/;"	f	class:ColorButtonRenderer
ColorButtonRenderer	src/Renderer/ColorButtonRenderer.hpp	/^class ColorButtonRenderer : public ButtonRenderer {$/;"	c
ColorKey	src/ui/canvas/memory/PixelOperations.hpp	/^  explicit constexpr ColorKey(argument_type _key):key(_key) {}$/;"	f	struct:ColorKey
ColorKey	src/ui/canvas/memory/PixelOperations.hpp	/^struct ColorKey {$/;"	s
ColorRamp	src/ui/canvas/Ramp.hpp	/^struct ColorRamp {$/;"	s
ColorRampLookup	src/ui/canvas/Ramp.cpp	/^ColorRampLookup(const int h,$/;"	f
ColorWithAlpha	src/ui/canvas/Color.hpp	/^ColorWithAlpha(const Color &c, uint8_t a)$/;"	f
Column	src/Form/DigitEntry.hpp	/^  struct Column {$/;"	s	class:CoordinateFormat
CombineAlpha	src/ui/canvas/opengl/ConstantAlpha.cpp	/^CombineAlpha(float alpha)$/;"	f	file:
ComboList	src/Form/DataField/ComboList.hpp	/^  ComboList()$/;"	f	class:ComboList
ComboList	src/Form/DataField/ComboList.hpp	/^class ComboList {$/;"	c
ComboListPopup	src/Dialogs/ComboPicker.cpp	/^static const ComboList *ComboListPopup;$/;"	v	file:
ComboPicker	src/Dialogs/ComboPicker.cpp	/^ComboPicker(const TCHAR *caption, DataField &df,$/;"	f
ComboPicker	src/Dialogs/ComboPicker.cpp	/^ComboPicker(const TCHAR *caption,$/;"	f
ComboPickerSupport	src/Dialogs/ComboPicker.cpp	/^  ComboPickerSupport(const ComboList &_combo_list)$/;"	f	class:ComboPickerSupport
ComboPickerSupport	src/Dialogs/ComboPicker.cpp	/^class ComboPickerSupport : public ListItemRenderer {$/;"	c	file:
Command	src/Device/Driver/LX/LXN.hpp	/^  enum Command {$/;"	g	namespace:LXN
Command	src/Device/Driver/LX/Protocol.hpp	/^  enum Command {$/;"	g	namespace:LX
Command	src/Device/Driver/Volkslogger/Protocol.hpp	/^  enum Command {$/;"	g	namespace:Volkslogger
CommandLine	src/CommandLine.cpp	/^namespace CommandLine {$/;"	n	file:
CommandLine	src/CommandLine.hpp	/^namespace CommandLine {$/;"	n
CommandMode	src/Device/Driver/CAI302/Mode.cpp	/^CAI302Device::CommandMode(OperationEnvironment &env)$/;"	f	class:CAI302Device
CommandMode	src/Device/Driver/CAI302/Protocol.cpp	/^CAI302::CommandMode(Port &port, OperationEnvironment &env)$/;"	f	class:CAI302
CommandMode	src/Device/Driver/LX/Protocol.cpp	/^LX::CommandMode(Port &port, OperationEnvironment &env)$/;"	f	class:LX
CommandModeQuick	src/Device/Driver/CAI302/Protocol.cpp	/^CAI302::CommandModeQuick(Port &port)$/;"	f	class:CAI302
CommandModeQuick	src/Device/Driver/LX/Protocol.cpp	/^LX::CommandModeQuick(Port &port, OperationEnvironment &env)$/;"	f	class:LX
Commit	src/Dialogs/Task/Manager/TaskManagerDialog.cpp	/^TaskManagerDialog::Commit()$/;"	f	class:TaskManagerDialog
Commit	src/Engine/Task/Ordered/OrderedTask.cpp	/^OrderedTask::Commit(const OrderedTask& that)$/;"	f	class:OrderedTask
Commit	src/Engine/Task/TaskManager.cpp	/^TaskManager::Commit(const OrderedTask &other)$/;"	f	class:TaskManager
Commit	src/MapWindow/StencilMapCanvas.cpp	/^StencilMapCanvas::Commit()$/;"	f	class:StencilMapCanvas
Commit	src/Renderer/TransparentRendererCache.cpp	/^TransparentRendererCache::Commit(Canvas &canvas,$/;"	f	class:TransparentRendererCache
Commit	src/Renderer/TransparentRendererCache.hpp	/^  void Commit(Canvas &canvas, const WindowProjection &projection) {$/;"	f	class:TransparentRendererCache
Commit	src/Repository/Parser.cpp	/^Commit(FileRepository &repository, AvailableFile &file)$/;"	f	file:
Commit	src/Topography/ShapeRenderer.hpp	/^  void Commit() {$/;"	f	class:ShapeRenderer
Commit	src/io/FileCache.cpp	/^FileCache::Commit(const TCHAR *name, FILE *file)$/;"	f	class:FileCache
Commit	src/io/FileOutputStream.cxx	/^FileOutputStream::Commit()$/;"	f	class:FileOutputStream
Commit	src/io/FileTransaction.cpp	/^FileTransaction::Commit()$/;"	f	class:FileTransaction
Commit	src/ui/canvas/opengl/BufferCanvas.cpp	/^BufferCanvas::Commit(Canvas &other)$/;"	f	class:BufferCanvas
CommitLine	src/IGC/IGCWriter.cpp	/^IGCWriter::CommitLine(char *line)$/;"	f	class:IGCWriter
CommitPoints	src/Engine/Route/FlatTriangleFan.cpp	/^FlatTriangleFan::CommitPoints(bool closed)$/;"	f	class:FlatTriangleFan
CommonInterface	src/Interface.hpp	/^namespace CommonInterface {$/;"	n
CommonProcessTimer	src/ProcessTimer.cpp	/^CommonProcessTimer()$/;"	f	file:
CommonStats	src/Engine/Task/Stats/CommonStats.hpp	/^class CommonStats $/;"	c
Compare	src/event/TimerList.hxx	/^	struct Compare {$/;"	s	class:final
CompareAirspaceVectors	src/Engine/Airspace/Airspaces.cpp	/^CompareAirspaceVectors(const AirspacesInterface::AirspaceVector &a,$/;"	f	file:
CompareBallastFraction	src/NMEA/ExternalSettings.hpp	/^  bool CompareBallastFraction(double value) const {$/;"	f	struct:ExternalSettings
CompareBallastOverload	src/NMEA/ExternalSettings.hpp	/^  bool CompareBallastOverload(double value) const {$/;"	f	struct:ExternalSettings
CompareBugs	src/NMEA/ExternalSettings.hpp	/^  bool CompareBugs(double value) const {$/;"	f	struct:ExternalSettings
CompareComment	src/InfoBoxes/Data.cpp	/^InfoBoxData::CompareComment(const InfoBoxData &other) const$/;"	f	class:InfoBoxData
CompareDirection	src/Waypoint/WaypointFilter.cpp	/^WaypointFilter::CompareDirection(const Waypoint &waypoint, Angle angle,$/;"	f	class:WaypointFilter
CompareDirection	src/Waypoint/WaypointFilter.cpp	/^WaypointFilter::CompareDirection(const Waypoint &waypoint,$/;"	f	class:WaypointFilter
CompareHorizontal	src/ui/canvas/memory/Bresenham.hpp	/^  static bool CompareHorizontal(const BresenhamIterator& i1,$/;"	f	class:BresenhamIterator
CompareMacCready	src/NMEA/ExternalSettings.hpp	/^  bool CompareMacCready(double value) const {$/;"	f	struct:ExternalSettings
CompareMapItems	src/MapWindow/Items/List.cpp	/^CompareMapItems(const MapItem *a, const MapItem *b)$/;"	f	file:
CompareName	src/Waypoint/WaypointFilter.cpp	/^WaypointFilter::CompareName(const Waypoint &waypoint) const$/;"	f	class:WaypointFilter
CompareName	src/Waypoint/WaypointFilter.cpp	/^WaypointFilter::CompareName(const Waypoint &waypoint, const TCHAR *name)$/;"	f	class:WaypointFilter
CompareNearestAirspace	src/Airspace/NearestAirspace.cpp	/^struct CompareNearestAirspace {$/;"	s	file:
CompareProjection	src/Projection/CompareProjection.hpp	/^class CompareProjection {$/;"	c
CompareQNH	src/NMEA/ExternalSettings.hpp	/^  bool CompareQNH(AtmosphericPressure value) const {$/;"	f	struct:ExternalSettings
CompareRoughly	src/Math/Angle.cpp	/^Angle::CompareRoughly(Angle other, Angle threshold) const$/;"	f	class:Angle
CompareSoonestAirspace	src/Engine/Airspace/SoonestAirspace.cpp	/^struct CompareSoonestAirspace {$/;"	s	file:
CompareTagName	src/XML/Parser.cpp	/^CompareTagName(const TCHAR *cclose, const TCHAR *copen)$/;"	f	file:
CompareTime	src/NMEA/ThermalLocator.cpp	/^CompareTime(const ThermalSource &a, const ThermalSource &b)$/;"	f	file:
CompareTitle	src/InfoBoxes/Data.cpp	/^InfoBoxData::CompareTitle(const InfoBoxData &other) const$/;"	f	class:InfoBoxData
CompareType	src/Waypoint/WaypointFilter.cpp	/^WaypointFilter::CompareType(const Waypoint &waypoint, TypeFilter type,$/;"	f	class:WaypointFilter
CompareType	src/Waypoint/WaypointFilter.cpp	/^WaypointFilter::CompareType(const Waypoint &waypoint,$/;"	f	class:WaypointFilter
CompareValue	src/InfoBoxes/Data.cpp	/^InfoBoxData::CompareValue(const InfoBoxData &other) const$/;"	f	class:InfoBoxData
CompareVerticalHorizontal	src/ui/canvas/memory/Bresenham.hpp	/^  static bool CompareVerticalHorizontal(const BresenhamIterator& i1,$/;"	f	class:BresenhamIterator
CompareVolume	src/NMEA/ExternalSettings.hpp	/^  bool CompareVolume(unsigned value) const {$/;"	f	struct:ExternalSettings
CompareWaypointItems	src/MapWindow/Items/List.cpp	/^CompareWaypointItems(const WaypointMapItem *a, const WaypointMapItem *b)$/;"	f	file:
CompareWingLoading	src/NMEA/ExternalSettings.hpp	/^  bool CompareWingLoading(double value) const {$/;"	f	struct:ExternalSettings
CompassRenderer	src/Renderer/CompassRenderer.hpp	/^  CompassRenderer(const MapLook &_look):look(_look) {}$/;"	f	class:CompassRenderer
CompassRenderer	src/Renderer/CompassRenderer.hpp	/^class CompassRenderer {$/;"	c
CompetitionClass	src/Device/Driver/LX/LXN.hpp	/^  struct CompetitionClass {$/;"	s	namespace:LXN
CompetitionID	src/Device/Driver/LX/Protocol.hpp	/^    char CompetitionID[4];$/;"	m	struct:LX::Pilot
CompetitionId	src/Profile/ProfileKeys.cpp	/^const char CompetitionId[] = "AircraftRego";$/;"	m	namespace:ProfileKeys	file:
CompileAttachShader	src/ui/canvas/opengl/Shaders.cpp	/^CompileAttachShader(GLProgram &program, GLenum type, const char *code)$/;"	f	file:
CompileProgram	src/ui/canvas/opengl/Shaders.cpp	/^CompileProgram(const char *vertex_shader, const char *fragment_shader)$/;"	f	file:
Complement	src/FLARM/Data.hpp	/^  void Complement(const FlarmData &add) {$/;"	f	struct:FlarmData
Complement	src/FLARM/Error.hpp	/^  void Complement(const FlarmError &add) {$/;"	f
Complement	src/FLARM/List.hpp	/^  void Complement(const TrafficList &add) {$/;"	f	struct:TrafficList
Complement	src/FLARM/Status.hpp	/^  void Complement(const FlarmStatus &add) {$/;"	f	struct:FlarmStatus
Complement	src/FLARM/Version.hpp	/^  void Complement(const FlarmVersion &add) {$/;"	f	struct:FlarmVersion
Complement	src/GliderLink/GliderLinkData.hpp	/^  void Complement(const GliderLinkData &add) {$/;"	f	struct:GliderLinkData
Complement	src/GliderLink/List.hpp	/^  void Complement(const GliderLinkTrafficList &add) {$/;"	f	struct:GliderLinkTrafficList
Complement	src/NMEA/Acceleration.cpp	/^AccelerationState::Complement(const AccelerationState &add)$/;"	f	class:AccelerationState
Complement	src/NMEA/Attitude.cpp	/^AttitudeState::Complement(const AttitudeState &add)$/;"	f	class:AttitudeState
Complement	src/NMEA/ExternalSettings.cpp	/^ExternalSettings::Complement(const ExternalSettings &add)$/;"	f	class:ExternalSettings
Complement	src/NMEA/Info.cpp	/^NMEAInfo::Complement(const NMEAInfo &add)$/;"	f	class:NMEAInfo
Complement	src/NMEA/SwitchState.cpp	/^SwitchState::Complement(const SwitchState &add)$/;"	f	class:SwitchState
Complement	src/NMEA/Validity.hpp	/^  bool Complement(const Validity &other) {$/;"	f	class:Validity
Complement	src/NMEA/VegaSwitchState.hpp	/^  void Complement(const VegaSwitchState &add) {$/;"	f	struct:VegaSwitchState
Component	src/ui/canvas/opengl/Color.hpp	/^  typedef GLfixed Component;$/;"	t	class:Color
ComposeWrite	src/Device/Driver/OpenVario.cpp	/^OpenVarioDevice::ComposeWrite(const char p_type,PolarCoefficients &p,$/;"	f	class:OpenVarioDevice
CompositingFilter	src/Topography/shapelib/mapserver.h	/^  } CompositingFilter;$/;"	t	typeref:struct:_CompositingFilter
CompositingOperation	src/Topography/shapelib/mapserver.h	/^  } CompositingOperation;$/;"	t	typeref:enum:__anon20
Compress	src/PageSettings.cpp	/^PageSettings::Compress()$/;"	f	class:PageSettings
Compute	src/Computer/AverageVarioComputer.cpp	/^AverageVarioComputer::Compute(const MoreData &basic,$/;"	f	class:AverageVarioComputer
Compute	src/Computer/BasicComputer.cpp	/^BasicComputer::Compute(MoreData &data,$/;"	f	class:BasicComputer
Compute	src/Computer/CuComputer.cpp	/^CuComputer::Compute(const NMEAInfo &basic, const DerivedInfo &calculated,$/;"	f	class:CuComputer
Compute	src/Computer/FlyingComputer.cpp	/^FlyingComputer::Compute(double takeoff_speed,$/;"	f	class:FlyingComputer
Compute	src/Computer/GlideRatioComputer.cpp	/^GlideRatioComputer::Compute(const MoreData &basic,$/;"	f	class:GlideRatioComputer
Compute	src/Computer/GroundSpeedComputer.cpp	/^GroundSpeedComputer::Compute(NMEAInfo &basic)$/;"	f	class:GroundSpeedComputer
Compute	src/Computer/LiftDatabaseComputer.cpp	/^LiftDatabaseComputer::Compute(LiftDatabase &lift_database,$/;"	f	class:LiftDatabaseComputer
Compute	src/Computer/ThermalBandComputer.cpp	/^ThermalBandComputer::Compute(const MoreData &basic,$/;"	f	class:ThermalBandComputer
Compute	src/Computer/Wind/Computer.cpp	/^WindComputer::Compute(const WindSettings &settings,$/;"	f	class:WindComputer
Compute	src/Engine/Task/Computer/IncrementalSpeedComputer.cpp	/^IncrementalSpeedComputer::Compute(DistanceStat &data, const double time)$/;"	f	class:IncrementalSpeedComputer
Compute	src/Engine/Task/Computer/WindowStatsComputer.cpp	/^WindowStatsComputer::Compute(double time, const TaskStats &task_stats,$/;"	f	class:WindowStatsComputer
ComputeAirspeed	src/Computer/BasicComputer.cpp	/^ComputeAirspeed(NMEAInfo &basic, const DerivedInfo &calculated)$/;"	f	file:
ComputeBruttoVario	src/Computer/BasicComputer.cpp	/^ComputeBruttoVario(MoreData &basic)$/;"	f	file:
ComputeDynamics	src/Computer/BasicComputer.cpp	/^ComputeDynamics(MoreData &basic, const DerivedInfo &calculated)$/;"	f	file:
ComputeEnergyHeight	src/Computer/BasicComputer.cpp	/^ComputeEnergyHeight(MoreData &basic)$/;"	f	file:
ComputeFlarmTeam	src/Computer/GlideComputer.cpp	/^ComputeFlarmTeam(const GeoPoint &location, const GeoPoint &reference_location,$/;"	f	file:
ComputeGPSVario	src/Computer/BasicComputer.cpp	/^ComputeGPSVario(MoreData &basic,$/;"	f	file:
ComputeHeadWind	src/Computer/Wind/Computer.cpp	/^WindComputer::ComputeHeadWind(const NMEAInfo &basic, DerivedInfo &info)$/;"	f	class:WindComputer
ComputeHeading	src/Computer/BasicComputer.cpp	/^ComputeHeading(AttitudeState &attitude, const NMEAInfo &basic,$/;"	f	file:
ComputeNavAltitude	src/Computer/BasicComputer.cpp	/^ComputeNavAltitude(MoreData &basic, const FeaturesSettings &features)$/;"	f	file:
ComputeNettoVario	src/Computer/BasicComputer.cpp	/^ComputeNettoVario(MoreData &basic, const VarioInfo &vario)$/;"	f	file:
ComputeNoncompVario	src/Android/BMP085Device.cpp	/^ComputeNoncompVario(const double pressure, const double d_pressure)$/;"	f	file:
ComputeNoncompVario	src/Android/I2CbaroDevice.cpp	/^ComputeNoncompVario(const double pressure, const double d_pressure)$/;"	f	file:
ComputeNoncompVario	src/Android/InternalSensors.cpp	/^ComputeNoncompVario(const double pressure, const double d_pressure)$/;"	f	file:
ComputeNoncompVario	src/Device/Driver/BlueFly/Parser.cpp	/^ComputeNoncompVario(const double pressure, const double d_pressure)$/;"	f	file:
ComputePressure	src/Computer/BasicComputer.cpp	/^ComputePressure(NMEAInfo &basic, const AtmosphericPressure qnh)$/;"	f	file:
ComputeTeamCode	src/Computer/GlideComputer.cpp	/^ComputeTeamCode(const GeoPoint &location, const GeoPoint &reference_location,$/;"	f	file:
ComputeTrack	src/Computer/BasicComputer.cpp	/^ComputeTrack(NMEAInfo &basic, const NMEAInfo &last)$/;"	f	file:
ComputeWindow	src/Engine/Task/Computer/TaskStatsComputer.cpp	/^TaskStatsComputer::ComputeWindow(double time, TaskStats &data)$/;"	f	class:TaskStatsComputer
ComputerSettings	src/Computer/Settings.hpp	/^struct ComputerSettings {$/;"	s
ComputerSettingsBlackboard	src/Blackboard/ComputerSettingsBlackboard.hpp	/^class ComputerSettingsBlackboard$/;"	c
Cond	src/thread/Cond.hxx	/^class Cond : public WindowsCond {};$/;"	c
ConditionMonitor	src/Computer/ConditionMonitor/ConditionMonitor.hpp	/^  constexpr ConditionMonitor(unsigned _interval_notification,$/;"	f	class:ConditionMonitor
ConditionMonitor	src/Computer/ConditionMonitor/ConditionMonitor.hpp	/^class ConditionMonitor$/;"	c
ConditionMonitorAATTime	src/Computer/ConditionMonitor/ConditionMonitorAATTime.hpp	/^  constexpr ConditionMonitorAATTime():ConditionMonitor(60 * 15, 10) {}$/;"	f	class:final
ConditionMonitorFinalGlide	src/Computer/ConditionMonitor/ConditionMonitorFinalGlide.hpp	/^  constexpr ConditionMonitorFinalGlide()$/;"	f	class:final
ConditionMonitorGlideTerrain	src/Computer/ConditionMonitor/ConditionMonitorGlideTerrain.hpp	/^  constexpr ConditionMonitorGlideTerrain():ConditionMonitor(60 * 5, 1) {}$/;"	f	class:final
ConditionMonitorLandableReachable	src/Computer/ConditionMonitor/ConditionMonitorLandableReachable.hpp	/^  constexpr ConditionMonitorLandableReachable()$/;"	f	class:final
ConditionMonitorSunset	src/Computer/ConditionMonitor/ConditionMonitorSunset.hpp	/^  constexpr ConditionMonitorSunset():ConditionMonitor(60 * 30, 60) {}$/;"	f	class:final
ConditionMonitorWind	src/Computer/ConditionMonitor/ConditionMonitorWind.hpp	/^  constexpr ConditionMonitorWind()$/;"	f	class:final
ConditionMonitorsUpdate	src/Computer/ConditionMonitor/ConditionMonitors.cpp	/^ConditionMonitorsUpdate(const NMEAInfo &basic, const DerivedInfo &calculated,$/;"	f
ConditionalWritePixel	src/ui/canvas/memory/PixelOperations.hpp	/^  ConditionalWritePixel(C &&c, O &&o)$/;"	f	struct:ConditionalWritePixel
ConditionalWritePixel	src/ui/canvas/memory/PixelOperations.hpp	/^  explicit constexpr ConditionalWritePixel(Args&&... args)$/;"	f	struct:ConditionalWritePixel
ConditionalWritePixel	src/ui/canvas/memory/PixelOperations.hpp	/^struct ConditionalWritePixel : private Check, private Operation {$/;"	s
CondorCreateOnPort	src/Device/Driver/Condor.cpp	/^CondorCreateOnPort(const DeviceConfig &config, gcc_unused Port &com_port)$/;"	f	file:
CondorDevice	src/Device/Driver/Condor.cpp	/^class CondorDevice : public AbstractDevice {$/;"	c	file:
ConfigPanel	src/Dialogs/Settings/Panels/ConfigPanel.hpp	/^namespace ConfigPanel {$/;"	n
ConfigurationExtraButtons	src/Dialogs/Settings/dlgConfiguration.cpp	/^  ConfigurationExtraButtons(const DialogLook &_look)$/;"	f	class:final
Configure	src/Audio/VarioGlue.cpp	/^AudioVarioGlue::Configure(const VarioSoundSettings &settings)$/;"	f	class:AudioVarioGlue
Configure	src/Topography/ShapeRenderer.hpp	/^  void Configure(const Pen *_pen, const Brush *_brush) {$/;"	f	class:ShapeRenderer
ConfirmDeleteProfile	src/Dialogs/ProfileListDialog.cpp	/^ConfirmDeleteProfile(const TCHAR *name)$/;"	f	file:
Connect	src/Device/Driver/IMI/Internal.cpp	/^IMIDevice::Connect(OperationEnvironment &env)$/;"	f	class:IMIDevice
Connect	src/Device/Driver/IMI/Protocol/Protocol.cpp	/^IMI::Connect(Port &port, OperationEnvironment &env)$/;"	f	class:IMI
Connect	src/Device/Driver/LX/Protocol.hpp	/^  Connect(Port &port, OperationEnvironment &env,$/;"	f	namespace:LX
Connect	src/Device/Driver/Volkslogger/Protocol.cpp	/^Volkslogger::Connect(Port &port, OperationEnvironment &env,$/;"	f	class:Volkslogger
Connect	src/Kobo/WPASupplicant.cpp	/^WPASupplicant::Connect(const char *path)$/;"	f	class:WPASupplicant
Connect	src/Kobo/WifiDialog.cpp	/^WifiListWidget::Connect()$/;"	f	class:WifiListWidget
Connect	src/event/net/ConnectSocket.cxx	/^Connect(const AddressInfo &address)$/;"	f	file:
Connect	src/event/net/ConnectSocket.cxx	/^Connect(const SocketAddress address)$/;"	f	file:
ConnectAndFlush	src/Device/Driver/Volkslogger/Protocol.cpp	/^Volkslogger::ConnectAndFlush(Port &port, OperationEnvironment &env,$/;"	f	class:Volkslogger
ConnectSocketHandler	src/event/net/ConnectSocket.hxx	/^class ConnectSocketHandler {$/;"	c
ConnectionProcessTimer	src/ProcessTimer.cpp	/^ConnectionProcessTimer()$/;"	f	file:
ConsoleOperationEnvironment	src/Operation/ConsoleOperationEnvironment.hpp	/^class ConsoleOperationEnvironment : public QuietOperationEnvironment {$/;"	c
ConstBuffer	src/util/ConstBuffer.hxx	/^struct ConstBuffer {$/;"	s
ConstBuffer	src/util/ConstBuffer.hxx	/^struct ConstBuffer<void> {$/;"	s
ConstDataNode	src/XML/DataNode.hpp	/^class ConstDataNode {$/;"	c
ConstImageBuffer	src/ui/canvas/memory/Buffer.hpp	/^  constexpr ConstImageBuffer(WritableImageBuffer<PixelTraits> other)$/;"	f	struct:ConstImageBuffer
ConstImageBuffer	src/ui/canvas/memory/Buffer.hpp	/^  constexpr ConstImageBuffer(rpointer _data, unsigned _pitch,$/;"	f	struct:ConstImageBuffer
ConstImageBuffer	src/ui/canvas/memory/Buffer.hpp	/^struct ConstImageBuffer {$/;"	s
Construct	src/net/IPv4Address.hxx	/^		:IPv4Address(Construct(_address, port)) {}$/;"	f	class:IPv4Address
Construct	src/net/IPv6Address.hxx	/^		:address(Construct(_address, port, scope_id)) {}$/;"	f	class:IPv6Address
Construct	src/util/Cache.hxx	/^		void Construct(K &&_key, U &&value) {$/;"	f	class:Cache::Item
Construct	src/util/Manual.hxx	/^	void Construct(Args&&... args) {$/;"	f	class:Manual
ContainerAttributeOffset	src/util/Cast.hxx	/^ContainerAttributeOffset(const A C::*p)$/;"	f
ContainerAttributeOffset	src/util/Cast.hxx	/^ContainerAttributeOffset(const C *null_c, const A C::*p)$/;"	f
ContainerAttributeOffset	src/util/ContainerCast.hxx	/^ContainerAttributeOffset(const A C::*p)$/;"	f
ContainerAttributeOffset	src/util/ContainerCast.hxx	/^ContainerAttributeOffset(const C *null_c, const A C::*p)$/;"	f
ContainerCast	src/util/Cast.hxx	/^ContainerCast(A &a, const A C::*member)$/;"	f
ContainerCast	src/util/Cast.hxx	/^ContainerCast(const A &a, const A C::*member)$/;"	f
ContainerCast	src/util/ContainerCast.hxx	/^ContainerCast(A &a, A C::*member)$/;"	f
ContainerCast	src/util/ContainerCast.hxx	/^ContainerCast(const A &a, A C::*member)$/;"	f
ContainerWidget	src/Widget/ContainerWidget.hpp	/^class ContainerWidget : public WindowWidget {$/;"	c
ContainerWindow	src/ui/window/ContainerWindow.hpp	/^class ContainerWindow : public PaintWindow {$/;"	c
Contains	src/MapWindow/Items/AirspaceBuilder.cpp	/^  bool Contains(const AbstractAirspace& as) const {$/;"	f	class:AirspaceWarningList
Contains	src/Math/Line2D.hpp	/^  constexpr bool Contains(Point p) const {$/;"	f	struct:Line2D
Contains	src/ui/window/custom/WList.cpp	/^WindowList::Contains(const Window &w) const$/;"	f	class:WindowList
Contains	src/util/StaticString.hxx	/^	bool Contains(const_pointer needle) const {$/;"	f	class:StaticStringBase
ContentString	src/Weather/METAR.hpp	/^  typedef StaticString<1024> ContentString;$/;"	t	struct:METAR
ContentString	src/Weather/TAF.hpp	/^  typedef StaticString<1024> ContentString;$/;"	t	struct:TAF
Contest	src/Engine/Contest/Settings.hpp	/^enum class Contest : uint8_t {$/;"	c
ContestClass	src/Device/Driver/LX/Protocol.hpp	/^  struct ContestClass {$/;"	s	namespace:LX
ContestComputer	src/Computer/ContestComputer.cpp	/^ContestComputer::ContestComputer(const Trace &trace_full,$/;"	f	class:ContestComputer
ContestComputer	src/Computer/ContestComputer.hpp	/^class ContestComputer {$/;"	c
ContestDijkstra	src/Engine/Contest/Solvers/ContestDijkstra.hpp	/^class ContestDijkstra : public AbstractContest, protected NavDijkstra, public TraceManager {$/;"	c
ContestDijkstra	src/Engine/Contest/Solvers/DMStQuad.cpp	/^  :ContestDijkstra(_trace, true, 4, 1000) {}$/;"	f
ContestDijkstra	src/Engine/Contest/Solvers/NetCoupe.cpp	/^  :ContestDijkstra(_trace, true, 4, 1000) {}$/;"	f
ContestDijkstra	src/Engine/Contest/Solvers/OLCClassic.cpp	/^  :ContestDijkstra(_trace, true, 6, 1000) {}$/;"	f
ContestDijkstra	src/Engine/Contest/Solvers/OLCSISAT.cpp	/^  :ContestDijkstra(_trace, true, 6, 1000) {}$/;"	f
ContestDijkstra	src/Engine/Contest/Solvers/OLCSprint.cpp	/^  :ContestDijkstra(_trace, false, 4, 0) {}$/;"	f
ContestManager	src/Engine/Contest/ContestManager.cpp	/^ContestManager::ContestManager(const Contest _contest,$/;"	f	class:ContestManager
ContestManager	src/Engine/Contest/ContestManager.hpp	/^class ContestManager$/;"	c
ContestResult	src/Engine/Contest/ContestResult.hpp	/^struct ContestResult$/;"	s
ContestSettings	src/Engine/Contest/Settings.hpp	/^struct ContestSettings {$/;"	s
ContestStatistics	src/Engine/Contest/ContestStatistics.hpp	/^struct ContestStatistics$/;"	s
ContestTracePoint	src/Engine/Contest/ContestTrace.hpp	/^struct ContestTracePoint {$/;"	s
ContestTraceVector	src/Engine/Contest/ContestTrace.hpp	/^class ContestTraceVector : public TrivialArray<ContestTracePoint, 10> {};$/;"	c
Contests	src/Dialogs/Settings/Panels/ScoringConfigPanel.cpp	/^  Contests,$/;"	e	enum:ControlIndex	file:
Context	src/Android/Context.hpp	/^  Context(JNIEnv *env, jobject obj):Java::GlobalObject(env, obj) {$/;"	f	class:Context
Context	src/Android/Context.hpp	/^class Context : public Java::GlobalObject {$/;"	c
Context	src/Device/Driver/LX/Convert.cpp	/^  Context()$/;"	f	struct:Context
Context	src/Device/Driver/LX/Convert.cpp	/^struct Context {$/;"	s	file:
ContourInterval	src/Terrain/RasterRenderer.cpp	/^ContourInterval(const TerrainHeight h, const unsigned contour_height_scale)$/;"	f	file:
ContourInterval	src/Terrain/RasterRenderer.cpp	/^ContourInterval(const unsigned h, const unsigned contour_height_scale)$/;"	f	file:
ContourStart	src/Terrain/RasterRenderer.cpp	/^RasterRenderer::ContourStart(const unsigned contour_height_scale)$/;"	f	class:RasterRenderer
Contours	src/Terrain/TerrainSettings.hpp	/^enum class Contours: uint8_t {$/;"	c
ContractLocalPath	src/LocalPath.cpp	/^ContractLocalPath(Path src)$/;"	f
ControlIndex	src/Dialogs/Airspace/AirspaceCRendererSettingsPanel.hpp	/^  enum ControlIndex {$/;"	g	class:AirspaceClassRendererSettingsPanel
ControlIndex	src/Dialogs/Device/DeviceEditWidget.cpp	/^enum ControlIndex {$/;"	g	file:
ControlIndex	src/Dialogs/MapItemListSettingsPanel.hpp	/^  enum ControlIndex {$/;"	g	class:final
ControlIndex	src/Dialogs/Settings/Panels/AirspaceConfigPanel.cpp	/^enum ControlIndex {$/;"	g	file:
ControlIndex	src/Dialogs/Settings/Panels/AudioConfigPanel.cpp	/^enum ControlIndex {$/;"	g	file:
ControlIndex	src/Dialogs/Settings/Panels/AudioVarioConfigPanel.cpp	/^enum ControlIndex {$/;"	g	file:
ControlIndex	src/Dialogs/Settings/Panels/CloudConfigPanel.cpp	/^enum ControlIndex {$/;"	g	file:
ControlIndex	src/Dialogs/Settings/Panels/GaugesConfigPanel.cpp	/^enum ControlIndex {$/;"	g	file:
ControlIndex	src/Dialogs/Settings/Panels/GlideComputerConfigPanel.cpp	/^enum ControlIndex {$/;"	g	file:
ControlIndex	src/Dialogs/Settings/Panels/InterfaceConfigPanel.cpp	/^enum ControlIndex {$/;"	g	file:
ControlIndex	src/Dialogs/Settings/Panels/LayoutConfigPanel.cpp	/^enum ControlIndex {$/;"	g	file:
ControlIndex	src/Dialogs/Settings/Panels/LoggerConfigPanel.cpp	/^enum ControlIndex {$/;"	g	file:
ControlIndex	src/Dialogs/Settings/Panels/MapDisplayConfigPanel.cpp	/^enum ControlIndex {$/;"	g	file:
ControlIndex	src/Dialogs/Settings/Panels/RouteConfigPanel.cpp	/^enum ControlIndex {$/;"	g	file:
ControlIndex	src/Dialogs/Settings/Panels/SafetyFactorsConfigPanel.cpp	/^enum ControlIndex {$/;"	g	file:
ControlIndex	src/Dialogs/Settings/Panels/ScoringConfigPanel.cpp	/^enum ControlIndex {$/;"	g	file:
ControlIndex	src/Dialogs/Settings/Panels/SiteConfigPanel.cpp	/^enum ControlIndex {$/;"	g	file:
ControlIndex	src/Dialogs/Settings/Panels/SymbolsConfigPanel.cpp	/^enum ControlIndex {$/;"	g	file:
ControlIndex	src/Dialogs/Settings/Panels/TaskDefaultsConfigPanel.cpp	/^enum ControlIndex {$/;"	g	file:
ControlIndex	src/Dialogs/Settings/Panels/TaskRulesConfigPanel.cpp	/^enum ControlIndex {$/;"	g	file:
ControlIndex	src/Dialogs/Settings/Panels/TerrainDisplayConfigPanel.cpp	/^enum ControlIndex {$/;"	g	file:
ControlIndex	src/Dialogs/Settings/Panels/TimeConfigPanel.cpp	/^enum ControlIndex {$/;"	g	file:
ControlIndex	src/Dialogs/Settings/Panels/TrackingConfigPanel.cpp	/^enum ControlIndex {$/;"	g	file:
ControlIndex	src/Dialogs/Settings/Panels/UnitsConfigPanel.cpp	/^enum ControlIndex {$/;"	g	file:
ControlIndex	src/Dialogs/Settings/Panels/VarioConfigPanel.cpp	/^enum ControlIndex {$/;"	g	file:
ControlIndex	src/Dialogs/Settings/Panels/WaypointDisplayConfigPanel.cpp	/^enum ControlIndex {$/;"	g	file:
ControlIndex	src/Dialogs/Settings/Panels/WeatherConfigPanel.cpp	/^enum ControlIndex {$/;"	g	file:
ControlIndex	src/Dialogs/Settings/WindSettingsPanel.hpp	/^  enum ControlIndex {$/;"	g	class:final
ControlIndex	src/Dialogs/Settings/dlgBasicSettings.cpp	/^enum ControlIndex {$/;"	g	file:
Controls	src/Dialogs/Airspace/AirspaceList.cpp	/^enum Controls {$/;"	g	file:
Controls	src/Dialogs/Device/CAI302/UnitsEditor.hpp	/^  enum Controls {$/;"	g	class:final
Controls	src/Dialogs/Device/FLARM/ConfigWidget.hpp	/^  enum Controls {$/;"	g	class:final
Controls	src/Dialogs/Device/LX/ManageNanoDialog.cpp	/^  enum Controls {$/;"	g	class:final	file:
Controls	src/Dialogs/Device/LX/NanoConfigWidget.hpp	/^  enum Controls {$/;"	g	class:final
Controls	src/Dialogs/Device/LX/V7ConfigWidget.hpp	/^  enum Controls {$/;"	g	class:final
Controls	src/Dialogs/Device/ManageFlarmDialog.cpp	/^  enum Controls {$/;"	g	class:final	file:
Controls	src/Dialogs/Device/Vega/SwitchesDialog.cpp	/^  enum Controls {$/;"	g	class:SwitchesLeft	file:
Controls	src/Dialogs/Device/Vega/SwitchesDialog.cpp	/^  enum Controls {$/;"	g	class:SwitchesRight	file:
Controls	src/Dialogs/Device/Vega/VegaDemoDialog.cpp	/^  enum Controls {$/;"	g	class:final	file:
Controls	src/Dialogs/Plane/PlaneDetailsDialog.cpp	/^  enum Controls {$/;"	g	class:final	file:
Controls	src/Dialogs/Plane/PlanePolarDialog.cpp	/^  enum Controls {$/;"	g	class:final	file:
Controls	src/Dialogs/ReplayDialog.cpp	/^  enum Controls {$/;"	g	class:final	file:
Controls	src/Dialogs/Settings/Panels/PagesConfigPanel.cpp	/^  enum Controls {$/;"	g	class:final	file:
Controls	src/Dialogs/Settings/dlgConfigInfoboxes.cpp	/^  enum Controls {$/;"	g	class:final	file:
Controls	src/Dialogs/StartupDialog.cpp	/^  enum Controls {$/;"	g	class:final	file:
Controls	src/Dialogs/StatusPanels/FlightStatusPanel.cpp	/^enum Controls {$/;"	g	file:
Controls	src/Dialogs/StatusPanels/RulesStatusPanel.cpp	/^enum Controls {$/;"	g	file:
Controls	src/Dialogs/StatusPanels/SystemStatusPanel.cpp	/^enum Controls {$/;"	g	file:
Controls	src/Dialogs/StatusPanels/TaskStatusPanel.cpp	/^enum Controls {$/;"	g	file:
Controls	src/Dialogs/StatusPanels/TimesStatusPanel.cpp	/^enum Controls {$/;"	g	file:
Controls	src/Dialogs/Task/Manager/TaskActionsPanel.hpp	/^  enum Controls {$/;"	g	class:TaskActionsPanel
Controls	src/Dialogs/Task/Manager/TaskPropertiesPanel.cpp	/^enum Controls {$/;"	g	file:
Controls	src/Dialogs/Task/Widgets/CylinderZoneEditWidget.cpp	/^enum Controls {$/;"	g	file:
Controls	src/Dialogs/Task/Widgets/KeyholeZoneEditWidget.cpp	/^enum Controls {$/;"	g	file:
Controls	src/Dialogs/Task/Widgets/LineSectorZoneEditWidget.cpp	/^enum Controls {$/;"	g	file:
Controls	src/Dialogs/Task/Widgets/SectorZoneEditWidget.cpp	/^enum Controls {$/;"	g	file:
Controls	src/Dialogs/Traffic/FlarmTrafficDetails.cpp	/^  enum Controls {$/;"	g	class:final	file:
Controls	src/Dialogs/Traffic/TeamCodeDialog.cpp	/^  enum Controls {$/;"	g	class:final	file:
Controls	src/Dialogs/Traffic/TrafficList.cpp	/^enum Controls {$/;"	g	file:
Controls	src/Dialogs/Waypoint/WaypointList.cpp	/^enum Controls {$/;"	g	file:
Controls	src/Dialogs/Weather/RASPDialog.cpp	/^  enum Controls {$/;"	g	class:final	file:
Controls	src/InfoBoxes/Panel/ATCReference.cpp	/^enum Controls {$/;"	g	file:
Convert	src/io/StringConverter.cpp	/^StringConverter::Convert(char *narrow)$/;"	f	class:StringConverter
ConvertABGRToARGB	src/Android/NativeView.cpp	/^ConvertABGRToARGB(UncompressedImage &image)$/;"	f	file:
ConvertBaudRate	src/Device/Driver/CAI302/Protocol.cpp	/^ConvertBaudRate(unsigned baud_rate)$/;"	f	file:
ConvertBearingToTeamCode	src/TeamCode/TeamCode.cpp	/^ConvertBearingToTeamCode(const Angle bearing, TCHAR *code)$/;"	f	file:
ConvertColorType	src/ui/canvas/custom/LibPNG.cpp	/^ConvertColorType(int color_type)$/;"	f	file:
ConvertDirectoryToRecordedFlightList	src/Device/Driver/Volkslogger/Logger.cpp	/^ConvertDirectoryToRecordedFlightList(const std::vector<DIRENTRY> &dir,$/;"	f	file:
ConvertImage	src/ui/canvas/memory/UncompressedImage.hpp	/^ConvertImage(WritableImageBuffer<PixelTraits> buffer,$/;"	f
ConvertLXNToIGC	src/Device/Driver/LX/Convert.cpp	/^LX::ConvertLXNToIGC(const void *_data, size_t _length,$/;"	f	class:LX
ConvertLine	src/ui/canvas/memory/UncompressedImage.hpp	/^ConvertLine(typename PixelTraits::rpointer dest, Reader src, unsigned n)$/;"	f
ConvertLineReader	src/io/ConvertLineReader.cpp	/^ConvertLineReader::ConvertLineReader(std::unique_ptr<LineReader<char>> &&_source,$/;"	f	class:ConvertLineReader
ConvertLineReader	src/io/ConvertLineReader.hpp	/^class ConvertLineReader : public TLineReader {$/;"	c
ConvertOZ	src/Device/Driver/IMI/Protocol/Conversion.cpp	/^IMI::ConvertOZ(const Declaration::TurnPoint &tp, bool is_start, bool is_finish,$/;"	f	class:IMI
ConvertRect	src/Topography/Convert.hpp	/^ConvertRect(const GeoBounds &br)$/;"	f
ConvertToChar	src/Device/Driver/IMI/Protocol/Conversion.cpp	/^IMI::ConvertToChar(const TCHAR* unicode, char* ascii, int outSize)$/;"	f	class:IMI
ConvertToDateTime	src/Device/Driver/IMI/Protocol/Conversion.cpp	/^IMI::ConvertToDateTime(IMI::IMIDATETIMESEC in)$/;"	f	class:IMI
ConvertUTF8ToWide	src/util/ConvertString.hpp	/^    :value(ConvertUTF8ToWide(_value)) {}$/;"	f	class:UTF8ToWideConverter
ConvertWaypoint	src/Device/Driver/IMI/Protocol/Conversion.cpp	/^IMI::ConvertWaypoint(const Waypoint &wp, TWaypoint &imiWp)$/;"	f	class:IMI
ConvertWideToACP	src/util/ConvertString.hpp	/^    :value(ConvertWideToACP(_value)) {}$/;"	f	class:WideToACPConverter
ConvertWideToUTF8	src/util/ConvertString.hpp	/^    :value(ConvertWideToUTF8(_value)) {}$/;"	f	class:WideToUTF8Converter
ConvexFilter	src/Math/ConvexFilter.hpp	/^class ConvexFilter: public LeastSquares$/;"	c
CoordinateFormat	src/Form/DigitEntry.hpp	/^enum class CoordinateFormat : uint8_t;$/;"	c
CoordinateFormat	src/Geo/CoordinateFormat.hpp	/^enum class CoordinateFormat: uint8_t {$/;"	c
Copy	src/Device/Driver/CAI302/Logger.cpp	/^Copy(BrokenDate &dest, const CAI302::DateTime &src)$/;"	f	file:
Copy	src/Device/Driver/CAI302/Logger.cpp	/^Copy(BrokenTime &dest, const CAI302::DateTime &src)$/;"	f	file:
Copy	src/Device/Driver/CAI302/Logger.cpp	/^Copy(RecordedFlightInfo &dest, unsigned index,$/;"	f	file:
Copy	src/Device/Driver/LX/Logger.cpp	/^Copy(RecordedFlightInfo &dest, const LX::FlightInfo &src)$/;"	f	file:
Copy	src/Device/Driver/OpenVario.cpp	/^OpenVarioDevice::Copy(PolarCoefficients &dest, const PolarCoefficients &src)$/;"	f	class:OpenVarioDevice
Copy	src/Engine/Task/AbstractTask.cpp	/^Copy(DistanceStat &stat, const GlideResult &solution)$/;"	f	file:
Copy	src/Kobo/Kernel.cpp	/^Copy(int out_fd, int in_fd, const char *out_path, const char *in_path)$/;"	f	file:
Copy	src/ui/canvas/gdi/Canvas.cpp	/^Canvas::Copy(PixelPoint dest_position, PixelSize dest_size,$/;"	f	class:Canvas
Copy	src/ui/canvas/gdi/Canvas.cpp	/^Canvas::Copy(const Bitmap &src)$/;"	f	class:Canvas
Copy	src/ui/canvas/gdi/Canvas.cpp	/^Canvas::Copy(const Canvas &src)$/;"	f	class:Canvas
Copy	src/ui/canvas/gdi/Canvas.hpp	/^  void Copy(PixelPoint dest_position, PixelSize dest_size,$/;"	f	class:Canvas
Copy	src/ui/canvas/memory/Canvas.cpp	/^Canvas::Copy(const Bitmap &_src)$/;"	f	class:Canvas
Copy	src/ui/canvas/memory/Canvas.cpp	/^Canvas::Copy(const Canvas &src)$/;"	f	class:Canvas
Copy	src/ui/canvas/opengl/Canvas.cpp	/^Canvas::Copy(const Bitmap &src)$/;"	f	class:Canvas
Copy16	src/ui/canvas/memory/NEON.hpp	/^  static void Copy16(uint8_t *gcc_restrict p, const uint8_t *gcc_restrict q) {$/;"	f	struct:NEONBytesTwice
CopyASCII	src/util/ASCII.cxx	/^CopyASCII(char *dest, const char *src)$/;"	f
CopyASCII	src/util/ASCII.cxx	/^CopyASCII(char *dest, size_t dest_size, const char *src, const char *src_end)$/;"	f
CopyASCII	src/util/WASCII.cxx	/^CopyASCII(char *dest, size_t dest_size, const wchar_t *src, const wchar_t *src_end)$/;"	f
CopyASCII	src/util/WASCII.cxx	/^CopyASCII(wchar_t *dest, const char *src)$/;"	f
CopyASCII	src/util/WASCII.cxx	/^CopyASCII(wchar_t *dest, const wchar_t *src)$/;"	f
CopyASCII	src/util/WASCII.cxx	/^CopyASCII(wchar_t *dest, size_t dest_size, const char *src, const char *src_end)$/;"	f
CopyASCII	src/util/WASCII.cxx	/^CopyASCII(wchar_t *dest, size_t dest_size,$/;"	f
CopyASCIIUpper	src/util/ASCII.cxx	/^CopyASCIIUpper(char *dest, const char *src)$/;"	f
CopyASCIIUpper	src/util/WASCII.cxx	/^CopyASCIIUpper(char *dest, const wchar_t *src)$/;"	f
CopyAnd	src/ui/canvas/gdi/Canvas.hpp	/^  void CopyAnd(const Canvas &src) {$/;"	f	class:Canvas
CopyAnd	src/ui/canvas/memory/Canvas.cpp	/^Canvas::CopyAnd(const Bitmap &src)$/;"	f	class:Canvas
CopyAnd	src/ui/canvas/memory/Canvas.hpp	/^  void CopyAnd(const Canvas &src) {$/;"	f	class:Canvas
CopyAndTo	src/Renderer/TransparentRendererCache.cpp	/^TransparentRendererCache::CopyAndTo(Canvas &canvas,$/;"	f	class:TransparentRendererCache
CopyAndTo	src/Renderer/TransparentRendererCache.hpp	/^  void CopyAndTo(Canvas &canvas) const {$/;"	f	class:TransparentRendererCache
CopyCleanFlarmString	src/Device/Driver/FLARM/TextProtocol.cpp	/^CopyCleanFlarmString(char *gcc_restrict dest, const char *gcc_restrict src)$/;"	f
CopyClicked	src/Dialogs/ProfileListDialog.cpp	/^ProfileListWidget::CopyClicked()$/;"	f	class:ProfileListWidget
CopyFrom	src/Device/Driver/Vega/Volatile.cpp	/^Vega::VolatileData::CopyFrom(const DerivedInfo &calculated)$/;"	f	class:Vega::VolatileData
CopyFrom	src/Device/Driver/Volkslogger/vlapi2.cpp	/^VLAPI_DATA::DATABASE::CopyFrom(const DBB &dbb)$/;"	f	class:VLAPI_DATA::DATABASE
CopyFrom	src/Terrain/RasterTile.cpp	/^RasterTile::CopyFrom(const struct jas_matrix &m)$/;"	f	class:RasterTile
CopyFromBGRA	src/ui/canvas/memory/Export.cpp	/^CopyFromBGRA(void *_dest_pixels, unsigned _dest_pitch, unsigned dest_bpp,$/;"	f
CopyFromGreyscale	src/ui/canvas/memory/Export.cpp	/^CopyFromGreyscale($/;"	f
CopyFromGreyscale	src/ui/canvas/sdl/TopCanvas.cpp	/^CopyFromGreyscale($/;"	f	file:
CopyGreyscale	src/ui/canvas/memory/Export.cpp	/^CopyGreyscale(uint8_t *dest_pixels, unsigned dest_pitch,$/;"	f	file:
CopyGreyscaleToRGB565	src/ui/canvas/memory/Export.hpp	/^CopyGreyscaleToRGB565(RGB565Color *gcc_restrict dest,$/;"	f
CopyGreyscaleToRGB8	src/ui/canvas/memory/Export.hpp	/^CopyGreyscaleToRGB8(uint32_t *gcc_restrict dest,$/;"	f
CopyIGCString	src/IGC/IGCString.cpp	/^CopyIGCString(char *dest, char *dest_limit, const TCHAR *src)$/;"	f
CopyIGCString	src/IGC/IGCString.cpp	/^CopyIGCString(char *dest, char *dest_limit, const char *src)$/;"	f
CopyList	src/Dialogs/Airspace/dlgAirspaceWarnings.cpp	/^AirspaceWarningListWidget::CopyList()$/;"	f	class:AirspaceWarningListWidget
CopyOr	src/ui/canvas/gdi/Canvas.hpp	/^  void CopyOr(const Canvas &src) {$/;"	f	class:Canvas
CopyOr	src/ui/canvas/memory/Canvas.hpp	/^  void CopyOr(const Bitmap &src) {$/;"	f	class:Canvas
CopyOverviewRow	src/Terrain/RasterTileCache.cpp	/^CopyOverviewRow(TerrainHeight *gcc_restrict dest, const jas_seqent_t *gcc_restrict src,$/;"	f	file:
CopyPaddedUpper	src/Device/Driver/Volkslogger/Util.cpp	/^CopyPaddedUpper(char *dest, size_t size, const char *src)$/;"	f
CopyPixels	src/ui/canvas/memory/MMX.hpp	/^  void CopyPixels(BGRA8Color *p, const BGRA8Color *q, unsigned n) const {$/;"	f	class:MMXAlphaPixelOperations
CopyPixels	src/ui/canvas/memory/MMX.hpp	/^  void CopyPixels(Luminosity8 *p, const Luminosity8 *q, unsigned n) const {$/;"	f	class:MMXAlphaPixelOperations
CopyPixels	src/ui/canvas/memory/MMX.hpp	/^  void CopyPixels(uint8_t *gcc_restrict p,$/;"	f	class:MMXAlphaPixelOperations
CopyPixels	src/ui/canvas/memory/NEON.hpp	/^  void CopyPixels(Luminosity8 *p, const Luminosity8 *q, unsigned n) const {$/;"	f	class:NEONAlphaPixelOperations
CopyPixels	src/ui/canvas/memory/NEON.hpp	/^  void CopyPixels(Luminosity8 *p, const Luminosity8 *q, unsigned n) const {$/;"	f	class:NEONBitOrPixelOperations
CopyPixels	src/ui/canvas/memory/NEON.hpp	/^  void CopyPixels(Luminosity8 *p, const Luminosity8 *q, unsigned n) const {$/;"	f	class:NEONTransparentPixelOperations
CopyPixels	src/ui/canvas/memory/NEON.hpp	/^  void CopyPixels(Luminosity8 *p, const Luminosity8 *q, unsigned n) const {$/;"	f	struct:NEONBytesTwice
CopyPixels	src/ui/canvas/memory/NEON.hpp	/^  void CopyPixels(uint8_t *gcc_restrict p,$/;"	f	class:NEONAlphaPixelOperations
CopyPixels	src/ui/canvas/memory/NEON.hpp	/^  void CopyPixels(uint8_t *gcc_restrict p,$/;"	f	class:NEONBitOrPixelOperations
CopyPixels	src/ui/canvas/memory/NEON.hpp	/^  void CopyPixels(uint8_t *gcc_restrict p,$/;"	f	class:NEONTransparentPixelOperations
CopyPixels	src/ui/canvas/memory/NEON.hpp	/^  void CopyPixels(uint8_t *gcc_restrict p,$/;"	f	struct:NEONBytesTwice
CopyPixels	src/ui/canvas/memory/Optimised.hpp	/^  void CopyPixels(rpointer p, const_rpointer q, unsigned n) const {$/;"	f	class:SelectOptimisedPixelOperations
CopyPixels	src/ui/canvas/memory/PixelOperations.hpp	/^  void CopyPixels(rpointer p, source_const_rpointer src,$/;"	f	struct:PerPixelOperations
CopyPixels	src/ui/canvas/memory/PixelTraits.hpp	/^  static void CopyPixels(rpointer p, const_rpointer src,$/;"	f	struct:GreyscalePixelTraits
CopyPixels	src/ui/canvas/memory/PixelTraits.hpp	/^  static void CopyPixels(rpointer p,$/;"	f	struct:BGRAPixelTraits
CopyRectangle	src/ui/canvas/memory/RasterCanvas.hpp	/^  void CopyRectangle(int x, int y, unsigned w, unsigned h,$/;"	f	class:RasterCanvas
CopyString	src/util/StringUtil.cpp	/^CopyString(char *gcc_restrict dest, const char *gcc_restrict src, size_t size)$/;"	f
CopyString	src/util/WStringUtil.cpp	/^CopyString(wchar_t *gcc_restrict dest, const wchar_t *gcc_restrict src,$/;"	f
CopyTerminatedUpper	src/Device/Driver/Volkslogger/Util.cpp	/^CopyTerminatedUpper(char *dest, const char *src, size_t size)$/;"	f
CopyTextRectangle	src/ui/canvas/memory/Canvas.cpp	/^CopyTextRectangle(SDLRasterCanvas &canvas, int x, int y,$/;"	f	file:
CopyTo	src/Device/Driver/Volkslogger/vlapi2.cpp	/^VLAPI_DATA::DATABASE::CopyTo(DBB &dbb) const$/;"	f	class:VLAPI_DATA::DATABASE
CopyTo	src/ui/canvas/opengl/BufferCanvas.cpp	/^BufferCanvas::CopyTo(Canvas &other)$/;"	f	class:BufferCanvas
CopyToArray	src/system/Process.hpp	/^CopyToArray(const char **dest)$/;"	f
CopyToArray	src/system/Process.hpp	/^CopyToArray(const char **dest, const char *src, Args... args)$/;"	f
CopyToNarrowBuffer	src/Device/Driver/Volkslogger/Declare.cpp	/^CopyToNarrowBuffer(char *dest, size_t max_size, const TCHAR *src)$/;"	f	file:
CopyToTexture	src/ui/canvas/opengl/Canvas.cpp	/^Canvas::CopyToTexture(GLTexture &texture, PixelRect src_rc) const$/;"	f	class:Canvas
CopyTransparentWhiteTo	src/Renderer/TransparentRendererCache.cpp	/^TransparentRendererCache::CopyTransparentWhiteTo(Canvas &canvas,$/;"	f	class:TransparentRendererCache
CopyTransparentWhiteTo	src/Renderer/TransparentRendererCache.hpp	/^  void CopyTransparentWhiteTo(Canvas &canvas) const {$/;"	f	class:TransparentRendererCache
CopyTruncateString	src/util/TruncateString.cpp	/^CopyTruncateString(TCHAR *dest, size_t dest_size, const TCHAR *src)$/;"	f
CopyTruncateString	src/util/TruncateString.cpp	/^CopyTruncateString(TCHAR *dest, size_t dest_size,$/;"	f
CopyTruncateString	src/util/TruncateString.cpp	/^CopyTruncateString(char *dest, size_t dest_size, const char *src)$/;"	f
CopyTurnPoint	src/Device/Driver/Volkslogger/Declare.cpp	/^CopyTurnPoint(VLAPI_DATA::DCLWPT &dest, const Declaration::TurnPoint &src)$/;"	f	file:
CopyUTF8	src/util/StaticString.cxx	/^CopyUTF8(char *dest, size_t dest_size, const char *src)$/;"	f
CopyUTF8	src/util/StaticString.cxx	/^CopyUTF8(wchar_t *dest, size_t dest_size, const char *src)$/;"	f
CopyUpper	src/Device/Driver/Volkslogger/Util.cpp	/^CopyUpper(char *dest, const char *src, const char *end)$/;"	f	file:
CopyWaypoint	src/Device/Driver/Volkslogger/Declare.cpp	/^CopyWaypoint(VLAPI_DATA::WPT &dest, const Waypoint &src)$/;"	f	file:
CorrectedWidth	src/ui/canvas/gdi/RawBitmap.cpp	/^CorrectedWidth(unsigned nWidth)$/;"	f	file:
CorrectedWidth	src/ui/canvas/memory/RawBitmap.cpp	/^CorrectedWidth(unsigned nWidth)$/;"	f	file:
CorrectedWidth	src/ui/canvas/opengl/RawBitmap.cpp	/^CorrectedWidth(unsigned nWidth)$/;"	f	file:
Count	src/Form/DataField/Enum.hpp	/^  unsigned Count() const {$/;"	f	class:final
Count	src/Polar/PolarStore.cpp	/^PolarStore::Count()$/;"	f	class:PolarStore
Count	src/Units/UnitsStore.cpp	/^Units::Store::Count()$/;"	f	class:Units::Store
Count	src/Weather/NOAAStore.hpp	/^  unsigned Count() const {$/;"	f	class:NOAAStore
CountDigits	src/TeamCode/TeamCode.cpp	/^CountDigits(unsigned value)$/;"	f	file:
CountWaypoints	src/Device/Driver/IMI/Protocol/IGC.cpp	/^CountWaypoints(const IMI::TWaypoint *wps)$/;"	f	file:
CounterToQuality	src/Computer/Wind/WindEKFGlue.cpp	/^CounterToQuality(unsigned i)$/;"	f	file:
Create	src/Android/NativeBMP085Listener.cpp	/^NativeBMP085Listener::Create(JNIEnv *env, BMP085Listener &listener)$/;"	f	class:NativeBMP085Listener
Create	src/Android/NativeI2CbaroListener.cpp	/^NativeI2CbaroListener::Create(JNIEnv *env, I2CbaroListener &listener)$/;"	f	class:NativeI2CbaroListener
Create	src/Android/NativeInputListener.cpp	/^NativeInputListener::Create(JNIEnv *env, DataHandler &handler)$/;"	f	class:NativeInputListener
Create	src/Android/NativeLeScanCallback.cpp	/^NativeLeScanCallback::Create(JNIEnv *env, LeScanCallback &cb)$/;"	f	class:NativeLeScanCallback
Create	src/Android/NativeNunchuckListener.cpp	/^NativeNunchuckListener::Create(JNIEnv *env, NunchuckListener &listener)$/;"	f	class:NativeNunchuckListener
Create	src/Android/NativePortListener.cpp	/^NativePortListener::Create(JNIEnv *env, PortListener &listener)$/;"	f	class:NativePortListener
Create	src/Android/NativeVoltageListener.cpp	/^NativeVoltageListener::Create(JNIEnv *env, VoltageListener &listener)$/;"	f	class:NativeVoltageListener
Create	src/Android/Vibrator.cpp	/^Vibrator::Create(JNIEnv *env, Context &context)$/;"	f	class:Vibrator
Create	src/Apple/InternalSensors.cpp	/^InternalSensors * InternalSensors::Create(unsigned int index)$/;"	f	class:InternalSensors
Create	src/Dialogs/Device/Vega/SwitchesDialog.cpp	/^  void Create() {$/;"	f	class:SwitchesLeft
Create	src/Dialogs/Device/Vega/SwitchesDialog.cpp	/^  void Create() {$/;"	f	class:SwitchesRight
Create	src/Engine/Waypoint/Waypoints.cpp	/^Waypoints::Create(const GeoPoint &location)$/;"	f	class:Waypoints
Create	src/Form/Button.cpp	/^Button::Create(ContainerWindow &parent, const ButtonLook &look,$/;"	f	class:Button
Create	src/Form/Button.cpp	/^Button::Create(ContainerWindow &parent,$/;"	f	class:Button
Create	src/Form/CharacterButton.cpp	/^CharacterButton::Create(ContainerWindow &parent, const ButtonLook &look,$/;"	f	class:CharacterButton
Create	src/Form/DigitEntry.cpp	/^DigitEntry::Create(ContainerWindow &parent, const PixelRect &rc,$/;"	f	class:DigitEntry
Create	src/Form/Draw.hpp	/^  void Create(ContainerWindow &parent,$/;"	f	class:WndOwnerDrawFrame
Create	src/Form/Form.cpp	/^WndForm::Create(SingleWindow &main_window, const PixelRect &rc,$/;"	f	class:WndForm
Create	src/Form/Form.cpp	/^WndForm::Create(SingleWindow &main_window,$/;"	f	class:WndForm
Create	src/Form/GridView.cpp	/^GridView::Create(ContainerWindow &parent, const DialogLook &look,$/;"	f	class:GridView
Create	src/Form/Panel.cpp	/^PanelControl::Create(ContainerWindow &parent, const DialogLook &look,$/;"	f	class:PanelControl
Create	src/InfoBoxes/Content/Factory.cpp	/^  static InfoBoxContent *Create() {$/;"	f	struct:IBFHelper
Create	src/InfoBoxes/Content/Factory.cpp	/^  static InfoBoxContent *Create() {$/;"	f	struct:IBFHelperInt
Create	src/InfoBoxes/Content/Factory.cpp	/^InfoBoxFactory::Create(Type type)$/;"	f	class:InfoBoxFactory
Create	src/InfoBoxes/InfoBoxManager.cpp	/^InfoBoxManager::Create(ContainerWindow &parent,$/;"	f	class:InfoBoxManager
Create	src/MainWindow.cpp	/^MainWindow::Create(PixelSize size, UI::TopWindowStyle style)$/;"	f	class:MainWindow
Create	src/MapWindow/TargetMapWindow.cpp	/^TargetMapWindow::Create(ContainerWindow &parent, PixelRect rc,$/;"	f	class:TargetMapWindow
Create	src/Menu/ShowMenuButton.cpp	/^ShowMenuButton::Create(ContainerWindow &parent, const PixelRect &rc,$/;"	f	class:ShowMenuButton
Create	src/PopupMessage.cpp	/^PopupMessage::Create(const PixelRect _rc)$/;"	f	class:PopupMessage
Create	src/ProgressGlue.cpp	/^ProgressGlue::Create(const TCHAR *text)$/;"	f	class:ProgressGlue
Create	src/Screen/Custom/LargeTextWindow.cpp	/^LargeTextWindow::Create(ContainerWindow &parent, PixelRect rc,$/;"	f	class:LargeTextWindow
Create	src/Screen/GDI/LargeTextWindow.cpp	/^LargeTextWindow::Create(ContainerWindow &parent, PixelRect rc,$/;"	f	class:LargeTextWindow
Create	src/Task/TaskFile.cpp	/^TaskFile::Create(Path path)$/;"	f	class:TaskFile
Create	src/Waypoint/Factory.hpp	/^  Waypoint Create(const GeoPoint &location) const {$/;"	f	class:WaypointFactory
Create	src/java/URL.cxx	/^Java::URL::Create(JNIEnv *env, const char *url)$/;"	f	class:Java::URL
Create	src/java/URL.hxx	/^	static jobject Create(JNIEnv *env, jstring url) {$/;"	f	class:Java::URL
Create	src/system/FileUtil.cpp	/^Directory::Create(Path path)$/;"	f	class:Directory
Create	src/system/SignalFD.cxx	/^SignalFD::Create(const sigset_t &mask)$/;"	f	class:SignalFD
Create	src/ui/canvas/Brush.hpp	/^Brush::Create(const Color c)$/;"	f	class:Brush
Create	src/ui/canvas/VirtualCanvas.hpp	/^  void Create(const Canvas &canvas) {$/;"	f	class:VirtualCanvas
Create	src/ui/canvas/android/TopCanvas.cpp	/^TopCanvas::Create(PixelSize new_size, bool full_screen, bool resizable)$/;"	f	class:TopCanvas
Create	src/ui/canvas/custom/Pen.cpp	/^Pen::Create(Style _style, unsigned _width, const Color c)$/;"	f	class:Pen
Create	src/ui/canvas/custom/Pen.cpp	/^Pen::Create(unsigned width, const Color c)$/;"	f	class:Pen
Create	src/ui/canvas/custom/TopCanvas.hpp	/^  void Create(EGLNativeDisplayType native_display,$/;"	f	class:DisplayOrientation
Create	src/ui/canvas/custom/TopCanvas.hpp	/^  void Create(_XDisplay *x_display,$/;"	f	class:DisplayOrientation
Create	src/ui/canvas/egl/TopCanvas.cpp	/^TopCanvas::Create(PixelSize new_size,$/;"	f	class:TopCanvas
Create	src/ui/canvas/fb/TopCanvas.cpp	/^TopCanvas::Create(PixelSize new_size,$/;"	f	class:TopCanvas
Create	src/ui/canvas/gdi/Brush.cpp	/^Brush::Create(const Bitmap &bitmap)$/;"	f	class:Brush
Create	src/ui/canvas/gdi/Brush.cpp	/^Brush::Create(const Color c)$/;"	f	class:Brush
Create	src/ui/canvas/gdi/BufferCanvas.cpp	/^BufferCanvas::Create(const Canvas &canvas)$/;"	f	class:BufferCanvas
Create	src/ui/canvas/gdi/BufferCanvas.cpp	/^BufferCanvas::Create(const Canvas &canvas, PixelSize new_size)$/;"	f	class:BufferCanvas
Create	src/ui/canvas/gdi/Canvas.hpp	/^  void Create(HDC _dc, PixelSize new_size) {$/;"	f	class:Canvas
Create	src/ui/canvas/gdi/Pen.cpp	/^Pen::Create(Style Style, unsigned width, const Color c)$/;"	f	class:Pen
Create	src/ui/canvas/gdi/Pen.cpp	/^Pen::Create(unsigned width, const Color c)$/;"	f	class:Pen
Create	src/ui/canvas/gdi/VirtualCanvas.cpp	/^VirtualCanvas::Create(PixelSize new_size)$/;"	f	class:VirtualCanvas
Create	src/ui/canvas/gdi/VirtualCanvas.cpp	/^VirtualCanvas::Create(const Canvas &canvas, PixelSize new_size)$/;"	f	class:VirtualCanvas
Create	src/ui/canvas/memory/Canvas.hpp	/^  void Create(WritableImageBuffer<ActivePixelTraits> _buffer) {$/;"	f	class:Canvas
Create	src/ui/canvas/memory/VirtualCanvas.cpp	/^VirtualCanvas::Create(PixelSize new_size)$/;"	f	class:VirtualCanvas
Create	src/ui/canvas/memory/VirtualCanvas.cpp	/^VirtualCanvas::Create(const Canvas &canvas, PixelSize new_size)$/;"	f	class:VirtualCanvas
Create	src/ui/canvas/opengl/BufferCanvas.cpp	/^BufferCanvas::Create(PixelSize new_size)$/;"	f	class:BufferCanvas
Create	src/ui/canvas/opengl/BufferCanvas.hpp	/^  void Create(const Canvas &canvas) {$/;"	f	class:DisplayOrientation
Create	src/ui/canvas/opengl/BufferCanvas.hpp	/^  void Create(const Canvas &canvas, PixelSize new_size) {$/;"	f	class:DisplayOrientation
Create	src/ui/canvas/opengl/Canvas.hpp	/^  void Create(PixelSize _size) {$/;"	f	class:Canvas
Create	src/ui/canvas/sdl/TopCanvas.cpp	/^TopCanvas::Create(SDL_Window *_window, PixelSize new_size)$/;"	f	class:TopCanvas
Create	src/ui/window/SingleWindow.hpp	/^  void Create(const TCHAR *text, PixelSize size,$/;"	f	class:UI::SingleWindow
Create	src/ui/window/SolidContainerWindow.hpp	/^  void Create(ContainerWindow &parent, PixelRect rc, Color _color,$/;"	f	class:SolidContainerWindow
Create	src/ui/window/custom/TopWindow.cpp	/^TopWindow::Create(const TCHAR *text, PixelSize size,$/;"	f	class:UI::TopWindow
Create	src/ui/window/gdi/TopWindow.cpp	/^TopWindow::Create(const TCHAR *cls, const TCHAR *text, PixelSize size,$/;"	f	class:UI::TopWindow
CreateAirspaceConfigPanel	src/Dialogs/Settings/Panels/AirspaceConfigPanel.cpp	/^CreateAirspaceConfigPanel()$/;"	f
CreateAngle	src/Form/DigitEntry.cpp	/^DigitEntry::CreateAngle(ContainerWindow &parent, const PixelRect &rc,$/;"	f	class:DigitEntry
CreateAudioConfigPanel	src/Dialogs/Settings/Panels/AudioConfigPanel.cpp	/^CreateAudioConfigPanel()$/;"	f
CreateAudioPlayer	src/Audio/SLES/Engine.hpp	/^    SLresult CreateAudioPlayer(SLObjectItf *pPlayer,$/;"	f	class:SLES::Engine
CreateAudioVarioConfigPanel	src/Dialogs/Settings/Panels/AudioVarioConfigPanel.cpp	/^CreateAudioVarioConfigPanel()$/;"	f
CreateBMP085Device	src/Android/BMP085Device.cpp	/^CreateBMP085Device(JNIEnv *env, jobject holder,$/;"	f	file:
CreateBindUDP	src/Tracking/SkyLines/Server.cpp	/^CreateBindUDP(SocketAddress address)$/;"	f	file:
CreateBorder	src/Look/ButtonLook.hpp	/^    void CreateBorder(Color light, Color dark) {$/;"	f	struct:ButtonLook::StateLook
CreateButtonLabels	src/Menu/ButtonLabel.cpp	/^ButtonLabel::CreateButtonLabels(ContainerWindow &parent, ButtonLook &look)$/;"	f	class:ButtonLabel
CreateButtons	src/Dialogs/Airspace/dlgAirspaceWarnings.cpp	/^  void CreateButtons(WidgetDialog &buttons) {$/;"	f	class:final
CreateButtons	src/Dialogs/Device/DeviceListDialog.cpp	/^DeviceListWidget::CreateButtons(WidgetDialog &dialog)$/;"	f	class:DeviceListWidget
CreateButtons	src/Dialogs/Device/PortMonitor.cpp	/^PortMonitorWidget::CreateButtons(WidgetDialog &dialog)$/;"	f	class:PortMonitorWidget
CreateButtons	src/Dialogs/Device/ScanBluetoothLeDialog.cpp	/^  void CreateButtons() {$/;"	f	class:final
CreateButtons	src/Dialogs/DownloadFilePicker.cpp	/^DownloadFilePickerWidget::CreateButtons()$/;"	f	class:DownloadFilePickerWidget
CreateButtons	src/Dialogs/KnobTextEntry.cpp	/^KnobTextEntryWidget::CreateButtons(WidgetDialog &dialog)$/;"	f	class:KnobTextEntryWidget
CreateButtons	src/Dialogs/MapItemListDialog.cpp	/^MapItemListWidget::CreateButtons(WidgetDialog &dialog)$/;"	f	class:MapItemListWidget
CreateButtons	src/Dialogs/Plane/PlaneListDialog.cpp	/^PlaneListWidget::CreateButtons(WidgetDialog &dialog)$/;"	f	class:PlaneListWidget
CreateButtons	src/Dialogs/Plane/PlanePolarDialog.cpp	/^  void CreateButtons(WidgetDialog &buttons) {$/;"	f	class:final
CreateButtons	src/Dialogs/ProfileListDialog.cpp	/^ProfileListWidget::CreateButtons(WidgetDialog &dialog)$/;"	f	class:ProfileListWidget
CreateButtons	src/Dialogs/ReplayDialog.cpp	/^  void CreateButtons(WidgetDialog &dialog) {$/;"	f	class:final
CreateButtons	src/Dialogs/Settings/Panels/PagesConfigPanel.cpp	/^  void CreateButtons(ButtonPanel &buttons) {$/;"	f	class:PageListWidget
CreateButtons	src/Dialogs/Task/AlternatesListDialog.cpp	/^AlternatesListWidget::CreateButtons(WidgetDialog &dialog)$/;"	f	class:AlternatesListWidget
CreateButtons	src/Dialogs/Task/Manager/TaskListPanel.cpp	/^  void CreateButtons(ButtonPanel &buttons) {$/;"	f	class:final
CreateButtons	src/Dialogs/Task/OptionalStartsDialog.cpp	/^  void CreateButtons(WidgetDialog &dialog) {$/;"	f	class:OptionStartsWidget
CreateButtons	src/Dialogs/Task/TaskPointDialog.cpp	/^  void CreateButtons() {$/;"	f	class:final
CreateButtons	src/Dialogs/Traffic/FlarmTrafficDetails.cpp	/^FlarmTrafficDetailsWidget::CreateButtons(WidgetDialog &buttons)$/;"	f	class:FlarmTrafficDetailsWidget
CreateButtons	src/Dialogs/Traffic/TeamCodeDialog.cpp	/^TeamCodeWidget::CreateButtons(WidgetDialog &buttons)$/;"	f	class:TeamCodeWidget
CreateButtons	src/Dialogs/Waypoint/Manager.cpp	/^WaypointManagerWidget::CreateButtons(WidgetDialog &dialog)$/;"	f	class:WaypointManagerWidget
CreateButtons	src/Dialogs/Weather/MapOverlayWidget.cpp	/^WeatherMapOverlayListWidget::CreateButtons(ButtonPanel &buttons)$/;"	f	class:WeatherMapOverlayListWidget
CreateButtons	src/Dialogs/Weather/NOAADetails.cpp	/^NOAADetailsWidget::CreateButtons(WidgetDialog &buttons)$/;"	f	class:NOAADetailsWidget
CreateButtons	src/Dialogs/Weather/NOAAList.cpp	/^NOAAListWidget::CreateButtons(ButtonPanel &buttons)$/;"	f	class:NOAAListWidget
CreateButtons	src/Kobo/KoboMenu.cpp	/^KoboMenuWidget::CreateButtons(WidgetDialog &buttons)$/;"	f	class:KoboMenuWidget
CreateButtons	src/Kobo/WifiDialog.cpp	/^  void CreateButtons(WidgetDialog &dialog) {$/;"	f	class:final
CreateCalculationThread	src/Protection.cpp	/^CreateCalculationThread()$/;"	f
CreateCloudConfigPanel	src/Dialogs/Settings/Panels/CloudConfigPanel.cpp	/^CreateCloudConfigPanel()$/;"	f
CreateComboList	src/Form/DataField/Angle.cpp	/^AngleDataField::CreateComboList(const TCHAR *reference) const$/;"	f	class:AngleDataField
CreateComboList	src/Form/DataField/Base.cpp	/^DataField::CreateComboList(const TCHAR *reference) const$/;"	f	class:DataField
CreateComboList	src/Form/DataField/Boolean.cpp	/^DataFieldBoolean::CreateComboList(const TCHAR *reference) const$/;"	f	class:DataFieldBoolean
CreateComboList	src/Form/DataField/Enum.cpp	/^DataFieldEnum::CreateComboList(const TCHAR *reference_string) const$/;"	f	class:DataFieldEnum
CreateComboList	src/Form/DataField/File.cpp	/^FileDataField::CreateComboList(const TCHAR *reference) const$/;"	f	class:FileDataField
CreateComboList	src/Form/DataField/Float.cpp	/^DataFieldFloat::CreateComboList(const TCHAR *reference_string) const$/;"	f	class:DataFieldFloat
CreateComboList	src/Form/DataField/Integer.cpp	/^DataFieldInteger::CreateComboList(const TCHAR *reference_string) const$/;"	f	class:DataFieldInteger
CreateComboList	src/Form/DataField/Time.cpp	/^DataFieldTime::CreateComboList(const TCHAR *reference_string) const$/;"	f	class:DataFieldTime
CreateDataPath	src/LocalPath.cpp	/^CreateDataPath()$/;"	f
CreateDirectionDataField	src/Dialogs/Airspace/AirspaceList.cpp	/^CreateDirectionDataField(DataFieldListener *listener)$/;"	f	file:
CreateDirectionDataField	src/Dialogs/Waypoint/WaypointList.cpp	/^CreateDirectionDataField(DataFieldListener *listener, Angle last_heading)$/;"	f	file:
CreateDistanceDataField	src/Dialogs/Airspace/AirspaceList.cpp	/^CreateDistanceDataField(DataFieldListener *listener)$/;"	f	file:
CreateDistanceDataField	src/Dialogs/Waypoint/WaypointList.cpp	/^CreateDistanceDataField(DataFieldListener *listener)$/;"	f	file:
CreateEGL	src/ui/canvas/egl/TopCanvas.cpp	/^TopCanvas::CreateEGL(EGLNativeDisplayType native_display,$/;"	f	class:TopCanvas
CreateEngine	src/Audio/SLES/Init.cpp	/^SLES::CreateEngine(SLObjectItf *pEngine, SLuint32 numOptions,$/;"	f	class:SLES
CreateExclusive	src/system/FileUtil.cpp	/^File::CreateExclusive(Path path)$/;"	f	class:File
CreateFunction	src/Widget/CreateWindowWidget.hpp	/^                                                WindowStyle style)> CreateFunction;$/;"	t	class:final
CreateGLX	src/ui/canvas/glx/TopCanvas.cpp	/^TopCanvas::CreateGLX(_XDisplay *_x_display,$/;"	f	class:TopCanvas
CreateGaugesConfigPanel	src/Dialogs/Settings/Panels/GaugesConfigPanel.cpp	/^CreateGaugesConfigPanel()$/;"	f
CreateGlideComputerConfigPanel	src/Dialogs/Settings/Panels/GlideComputerConfigPanel.cpp	/^CreateGlideComputerConfigPanel()$/;"	f
CreateI2CbaroDevice	src/Android/I2CbaroDevice.cpp	/^CreateI2CbaroDevice(JNIEnv *env, jobject holder,$/;"	f	file:
CreateInfoBoxesConfigPanel	src/Dialogs/Settings/Panels/InfoBoxesConfigPanel.cpp	/^CreateInfoBoxesConfigPanel()$/;"	f
CreateInputEventMetatable	src/lua/InputEvent.cpp	/^CreateInputEventMetatable(lua_State *L)$/;"	f	file:
CreateInstance	src/Audio/PCMPlayerFactory.hpp	/^inline PCMPlayer *CreateInstance()$/;"	f	namespace:PCMPlayerFactory
CreateInstanceForDirectAccess	src/Audio/PCMPlayerFactory.hpp	/^CreateInstanceForDirectAccess(EventLoop &event_loop)$/;"	f	namespace:PCMPlayerFactory
CreateInterfaceConfigPanel	src/Dialogs/Settings/Panels/InterfaceConfigPanel.cpp	/^CreateInterfaceConfigPanel()$/;"	f
CreateLatitude	src/Form/DigitEntry.cpp	/^DigitEntry::CreateLatitude(ContainerWindow &parent, const PixelRect &rc,$/;"	f	class:DigitEntry
CreateLayoutConfigPanel	src/Dialogs/Settings/Panels/LayoutConfigPanel.cpp	/^CreateLayoutConfigPanel()$/;"	f
CreateLeaf	src/util/RadixTree.hpp	/^    Node *CreateLeaf(const TCHAR *label, const T &value) const {$/;"	f	struct:RadixTree::Node
CreateLoggerConfigPanel	src/Dialogs/Settings/Panels/LoggerConfigPanel.cpp	/^CreateLoggerConfigPanel()$/;"	f
CreateLogoPage	src/Dialogs/dlgCredits.cpp	/^CreateLogoPage(ContainerWindow &parent, const PixelRect &rc,$/;"	f	file:
CreateLongitude	src/Form/DigitEntry.cpp	/^DigitEntry::CreateLongitude(ContainerWindow &parent, const PixelRect &rc,$/;"	f	class:DigitEntry
CreateMapDisplayConfigPanel	src/Dialogs/Settings/Panels/MapDisplayConfigPanel.cpp	/^CreateMapDisplayConfigPanel()$/;"	f
CreateNOAAListWidget	src/Dialogs/Weather/NOAAList.cpp	/^CreateNOAAListWidget()$/;"	f
CreateNameDataField	src/Dialogs/Airspace/AirspaceList.cpp	/^CreateNameDataField(DataFieldListener *listener)$/;"	f	file:
CreateNameDataField	src/Dialogs/Waypoint/WaypointList.cpp	/^CreateNameDataField(DataFieldListener *listener)$/;"	f	file:
CreateNative	src/ui/window/sdl/TopWindow.cpp	/^TopWindow::CreateNative(const TCHAR *_text, PixelSize new_size,$/;"	f	class:UI::TopWindow
CreateNative	src/ui/window/wayland/TopWindow.cpp	/^TopWindow::CreateNative(const TCHAR *text, PixelSize size,$/;"	f	class:UI::TopWindow
CreateNative	src/ui/window/x11/TopWindow.cpp	/^TopWindow::CreateNative(const TCHAR *text, PixelSize size,$/;"	f	class:UI::TopWindow
CreateNunchuckDevice	src/Android/NunchuckDevice.cpp	/^CreateNunchuckDevice(JNIEnv *env, jobject holder,$/;"	f	file:
CreateOZ	src/Task/TaskFileSeeYou.cpp	/^CreateOZ(const SeeYouTurnpointInformation &turnpoint_infos,$/;"	f	file:
CreateObservationZoneEditWidget	src/Dialogs/Task/TaskPointDialog.cpp	/^CreateObservationZoneEditWidget(ObservationZonePoint &oz, bool is_fai_general)$/;"	f	file:
CreateOnPort	src/Device/Driver.hpp	/^  Device *(*CreateOnPort)(const DeviceConfig &config, Port &com_port);$/;"	m	struct:DeviceRegister
CreateOutputMix	src/Audio/SLES/Engine.hpp	/^    SLresult CreateOutputMix(SLObjectItf *pMix,$/;"	f	class:SLES::Engine
CreatePCMetWidget	src/Dialogs/Weather/PCMetDialog.cpp	/^CreatePCMetWidget()$/;"	f
CreatePagesConfigPanel	src/Dialogs/Settings/Panels/PagesConfigPanel.cpp	/^CreatePagesConfigPanel()$/;"	f
CreateRoot	src/XML/Node.cpp	/^XMLNode::CreateRoot(const TCHAR *name)$/;"	f	class:XMLNode
CreateRouteConfigPanel	src/Dialogs/Settings/Panels/RouteConfigPanel.cpp	/^CreateRouteConfigPanel()$/;"	f
CreateSafetyFactorsConfigPanel	src/Dialogs/Settings/Panels/SafetyFactorsConfigPanel.cpp	/^CreateSafetyFactorsConfigPanel()$/;"	f
CreateScoringConfigPanel	src/Dialogs/Settings/Panels/ScoringConfigPanel.cpp	/^CreateScoringConfigPanel()$/;"	f
CreateSigned	src/Form/DigitEntry.cpp	/^DigitEntry::CreateSigned(ContainerWindow &parent, const PixelRect &rc,$/;"	f	class:DigitEntry
CreateSiteConfigPanel	src/Dialogs/Settings/Panels/SiteConfigPanel.cpp	/^CreateSiteConfigPanel()$/;"	f
CreateSymbolsConfigPanel	src/Dialogs/Settings/Panels/SymbolsConfigPanel.cpp	/^CreateSymbolsConfigPanel()$/;"	f
CreateTaskDefaultsConfigPanel	src/Dialogs/Settings/Panels/TaskDefaultsConfigPanel.cpp	/^CreateTaskDefaultsConfigPanel()$/;"	f
CreateTaskRulesConfigPanel	src/Dialogs/Settings/Panels/TaskRulesConfigPanel.cpp	/^CreateTaskRulesConfigPanel()$/;"	f
CreateTerrainDisplayConfigPanel	src/Dialogs/Settings/Panels/TerrainDisplayConfigPanel.cpp	/^CreateTerrainDisplayConfigPanel()$/;"	f
CreateTime	src/Form/DigitEntry.cpp	/^DigitEntry::CreateTime(ContainerWindow &parent, const PixelRect &rc,$/;"	f	class:DigitEntry
CreateTimeConfigPanel	src/Dialogs/Settings/Panels/TimeConfigPanel.cpp	/^CreateTimeConfigPanel()$/;"	f
CreateTimerMetatable	src/lua/Timer.cpp	/^CreateTimerMetatable(lua_State *L)$/;"	f	file:
CreateTrackingConfigPanel	src/Dialogs/Settings/Panels/TrackingConfigPanel.cpp	/^CreateTrackingConfigPanel()$/;"	f
CreateTypeDataField	src/Dialogs/Waypoint/WaypointList.cpp	/^CreateTypeDataField(DataFieldListener *listener)$/;"	f	file:
CreateUnitsConfigPanel	src/Dialogs/Settings/Panels/UnitsConfigPanel.cpp	/^CreateUnitsConfigPanel()$/;"	f
CreateUnsigned	src/Form/DigitEntry.cpp	/^DigitEntry::CreateUnsigned(ContainerWindow &parent, const PixelRect &rc,$/;"	f	class:DigitEntry
CreateVarioConfigPanel	src/Dialogs/Settings/Panels/VarioConfigPanel.cpp	/^CreateVarioConfigPanel()$/;"	f
CreateVoltageDevice	src/Android/VoltageDevice.cpp	/^CreateVoltageDevice(JNIEnv *env, jobject holder,$/;"	f	file:
CreateWaypointDisplayConfigPanel	src/Dialogs/Settings/Panels/WaypointDisplayConfigPanel.cpp	/^CreateWaypointDisplayConfigPanel()$/;"	f
CreateWaypointReader	src/Waypoint/WaypointReader.cpp	/^CreateWaypointReader(WaypointFileType type, WaypointFactory factory)$/;"	f	file:
CreateWeatherConfigPanel	src/Dialogs/Settings/Panels/WeatherConfigPanel.cpp	/^CreateWeatherConfigPanel()$/;"	f
CreateWeatherMapOverlayWidget	src/Dialogs/Weather/MapOverlayWidget.cpp	/^CreateWeatherMapOverlayWidget()$/;"	f
CreateWindConfigPanel	src/Dialogs/Settings/Panels/WindConfigPanel.cpp	/^CreateWindConfigPanel()$/;"	f
Credentials	src/Weather/PCMet/Settings.hpp	/^  struct Credentials {$/;"	s	struct:PCMetSettings
CriticalSection	src/thread/CriticalSection.hxx	/^class CriticalSection {$/;"	c
CropIncompleteUTF8	src/util/StaticString.hxx	/^	void CropIncompleteUTF8() {$/;"	f	class:NarrowString
CropIncompleteUTF8	src/util/StaticString.hxx	/^	void CropIncompleteUTF8() {$/;"	f	class:StaticString
CrossProduct	src/Geo/Flat/FlatGeoPoint.hpp	/^  constexpr int CrossProduct(FlatGeoPoint other) const {$/;"	f	struct:FlatGeoPoint
CrossProduct	src/Geo/Flat/FlatPoint.hpp	/^  constexpr double CrossProduct(const FlatPoint &p2) const {$/;"	f	struct:FlatPoint
CrossProduct	src/Math/Line2D.hpp	/^  constexpr product_type CrossProduct() const {$/;"	f	struct:Line2D
CrossSectionLook	src/Look/CrossSectionLook.hpp	/^struct CrossSectionLook {$/;"	s
CrossSectionRenderer	src/CrossSection/CrossSectionRenderer.cpp	/^CrossSectionRenderer::CrossSectionRenderer(const CrossSectionLook &_look,$/;"	f	class:CrossSectionRenderer
CrossSectionRenderer	src/CrossSection/CrossSectionRenderer.hpp	/^class CrossSectionRenderer :$/;"	c
CrossSectionWidget	src/CrossSection/CrossSectionWidget.hpp	/^class CrossSectionWidget : public WindowWidget,$/;"	c
CrossSectionWindow	src/CrossSection/CrossSectionWindow.hpp	/^  CrossSectionWindow(const CrossSectionLook &look,$/;"	f	class:CrossSectionWindow
CrossSectionWindow	src/CrossSection/CrossSectionWindow.hpp	/^class CrossSectionWindow$/;"	c
Cruise	src/Replay/TaskAutoPilot.hpp	/^    Cruise,$/;"	e	enum:TaskAutoPilot::AcState
CruiseEfficiency	src/InfoBoxes/Content/Type.hpp	/^    CruiseEfficiency,$/;"	e	enum:InfoBoxFactory::Type
CruiseGR	src/Computer/GlideComputerAirData.cpp	/^GlideComputerAirData::CruiseGR(const MoreData &basic, DerivedInfo &calculated)$/;"	f	class:GlideComputerAirData
CruiseMapScale	src/Profile/ProfileKeys.cpp	/^const char CruiseMapScale[] = "CruiseMapScale";$/;"	m	namespace:ProfileKeys	file:
CruiseToCirclingModeSwitchThreshold	src/Dialogs/Settings/Panels/GlideComputerConfigPanel.cpp	/^  CruiseToCirclingModeSwitchThreshold,$/;"	e	enum:ControlIndex	file:
CruiseToCirclingModeSwitchThreshold	src/Profile/ProfileKeys.cpp	/^const char CruiseToCirclingModeSwitchThreshold[] = "CruiseToCirclingModeSwitchThreshold";$/;"	m	namespace:ProfileKeys	file:
CtrlC	src/Device/Driver/CAI302/Protocol.hpp	37;"	d
CtrlC	src/Device/Driver/CaiGpsNav.cpp	/^static constexpr char CtrlC = '\\x03';$/;"	v	file:
CuComputer	src/Computer/CuComputer.hpp	/^class CuComputer {$/;"	c
CuSonde	src/Atmosphere/CuSonde.hpp	/^class CuSonde {$/;"	c
CurlEasy	src/net/http/Easy.hxx	/^	CurlEasy()$/;"	f	class:CurlEasy
CurlEasy	src/net/http/Easy.hxx	/^	explicit CurlEasy(const char *url)$/;"	f	class:CurlEasy
CurlEasy	src/net/http/Easy.hxx	/^class CurlEasy {$/;"	c
CurlGlobal	src/net/http/Global.cxx	/^CurlGlobal::CurlGlobal(EventLoop &_loop)$/;"	f	class:CurlGlobal
CurlMulti	src/net/http/Multi.hxx	/^	CurlMulti()$/;"	f	class:CurlMulti
CurlMulti	src/net/http/Multi.hxx	/^class CurlMulti {$/;"	c
CurlRequest	src/net/http/Request.cxx	/^CurlRequest::CurlRequest(CurlGlobal &_global,$/;"	f	class:CurlRequest
CurlRequest	src/net/http/Request.hxx	/^	CurlRequest(CurlGlobal &_global, const char *url,$/;"	f	class:final
CurlResponseHandler	src/net/http/Handler.hxx	/^class CurlResponseHandler {$/;"	c
CurlSlist	src/net/http/Slist.hxx	/^class CurlSlist {$/;"	c
CurlSocket	src/net/http/Global.cxx	/^	CurlSocket(CurlGlobal &_global, EventLoop &_loop, SocketDescriptor _fd)$/;"	f	class:final
CurrentThermal	src/Computer/GlideComputerAirData.cpp	/^GlideComputerAirData::CurrentThermal(const MoreData &basic,$/;"	f	class:GlideComputerAirData
CursorColorsInverted	src/Profile/ProfileKeys.cpp	/^const char CursorColorsInverted[] = "CursorColorsInverted";$/;"	m	namespace:ProfileKeys	file:
CursorInverted	src/Dialogs/Settings/Panels/LayoutConfigPanel.cpp	/^  CursorInverted,$/;"	e	enum:ControlIndex	file:
CursorSize	src/Dialogs/Settings/Panels/LayoutConfigPanel.cpp	/^  CursorSize,$/;"	e	enum:ControlIndex	file:
CursorSize	src/Profile/ProfileKeys.cpp	/^const char CursorSize[] = "CursorSize";$/;"	m	namespace:ProfileKeys	file:
CustomDPI	src/Dialogs/Settings/Panels/InterfaceConfigPanel.cpp	/^  CustomDPI,$/;"	e	enum:ControlIndex	file:
CustomDPI	src/Profile/ProfileKeys.cpp	/^const char CustomDPI[] = "CustomDPI";$/;"	m	namespace:ProfileKeys	file:
CylinderZone	src/Engine/Task/ObservationZones/CylinderZone.hpp	/^  CylinderZone(Shape _shape, bool _can_start_through_top,$/;"	f	class:CylinderZone
CylinderZone	src/Engine/Task/ObservationZones/CylinderZone.hpp	/^  CylinderZone(const CylinderZone &other, const GeoPoint &reference)$/;"	f	class:CylinderZone
CylinderZone	src/Engine/Task/ObservationZones/CylinderZone.hpp	/^  CylinderZone(const GeoPoint &loc, const double _radius = 10000.0)$/;"	f	class:CylinderZone
CylinderZone	src/Engine/Task/ObservationZones/CylinderZone.hpp	/^class CylinderZone : public ObservationZonePoint$/;"	c
CylinderZoneEditWidget	src/Dialogs/Task/Widgets/CylinderZoneEditWidget.hpp	/^class CylinderZoneEditWidget : public ObservationZoneEditWidget {$/;"	c
DAEC_KEYHOLE	src/Device/Declaration.hpp	/^      DAEC_KEYHOLE$/;"	e	enum:Declaration::TurnPoint::Shape
DAEC_KEYHOLE	src/Engine/Task/ObservationZones/ObservationZone.hpp	/^    DAEC_KEYHOLE,$/;"	m	class:ObservationZone::Shape
DALR	src/Atmosphere/CuSonde.cpp	40;"	d	file:
DANGER	src/Engine/Airspace/AirspaceClass.hpp	/^  DANGER,$/;"	e	enum:uint8_t
DASH1	src/ui/canvas/Pen.hpp	/^    DASH1 = PS_DASH,$/;"	e	enum:Pen::Style
DASH2	src/ui/canvas/Pen.hpp	/^    DASH2 = PS_DASH,$/;"	e	enum:Pen::Style
DASH3	src/ui/canvas/Pen.hpp	/^    DASH3 = PS_DASH,$/;"	e	enum:Pen::Style
DATABASE	src/Device/Driver/Volkslogger/vlapi2.h	/^  struct DATABASE {$/;"	s	class:VLAPI_DATA
DATANODE_HPP	src/XML/DataNode.hpp	24;"	d
DATANODE_XML_HPP	src/XML/DataNodeXML.hpp	24;"	d
DATE	src/Device/Driver/LX/LXN.hpp	/^    DATE = 0xfb,$/;"	e	enum:LXN::Command
DBB	src/Device/Driver/Volkslogger/dbbconv.cpp	/^DBB::DBB() {$/;"	f	class:DBB
DBB	src/Device/Driver/Volkslogger/dbbconv.h	/^class DBB {$/;"	c
DBBBeg	src/Device/Driver/Volkslogger/dbbconv.h	/^  static constexpr size_t DBBBeg = 0x0000;$/;"	m	class:DBB
DBBCONV_H	src/Device/Driver/Volkslogger/dbbconv.h	19;"	d
DBBEnd	src/Device/Driver/Volkslogger/dbbconv.h	/^  static constexpr size_t DBBEnd = DBBBeg + DBB_SIZE;$/;"	m	class:DBB
DBB_SIZE	src/Device/Driver/Volkslogger/dbbconv.h	/^  static constexpr size_t DBB_SIZE = 0x3000;$/;"	m	class:DBB
DBFFieldType	src/Topography/shapelib/mapshape.h	/^  typedef enum {FTString, FTInteger, FTDouble, FTInvalid} DBFFieldType;$/;"	t	typeref:enum:__anon77
DBFHandle	src/Topography/shapelib/mapshape.h	/^  typedef DBFInfo * DBFHandle;$/;"	t
DBFInfo	src/Topography/shapelib/mapshape.h	/^  } DBFInfo;$/;"	t	typeref:struct:__anon76
DBFIsValueNULL	src/Topography/shapelib/mapxbase.c	/^static int DBFIsValueNULL( const char* pszValue, char type )$/;"	f	file:
DBG1	src/zzip/__debug.h	39;"	d
DBG2	src/zzip/__debug.h	40;"	d
DBG3	src/zzip/__debug.h	41;"	d
DBG4	src/zzip/__debug.h	42;"	d
DBG5	src/zzip/__debug.h	43;"	d
DBG6	src/zzip/__debug.h	44;"	d
DCLWPT	src/Device/Driver/Volkslogger/vlapi2.h	/^  struct DCLWPT : public WPT {$/;"	s	class:VLAPI_DATA
DDMMSS	src/Geo/CoordinateFormat.hpp	/^  DDMMSS = 0,$/;"	m	class:CoordinateFormat
DDMMSS_S	src/Geo/CoordinateFormat.hpp	/^  DDMMSS_S,$/;"	m	class:CoordinateFormat
DDMM_MMM	src/Geo/CoordinateFormat.hpp	/^  DDMM_MMM,$/;"	m	class:CoordinateFormat
DD_DDDDD	src/Geo/CoordinateFormat.hpp	/^  DD_DDDDD,$/;"	m	class:CoordinateFormat
DEAD_BAND_ENABLED	src/Dialogs/Settings/Panels/AudioVarioConfigPanel.cpp	/^  DEAD_BAND_ENABLED,$/;"	e	enum:ControlIndex	file:
DEAD_BAND_MAX	src/Dialogs/Settings/Panels/AudioVarioConfigPanel.cpp	/^  DEAD_BAND_MAX,$/;"	e	enum:ControlIndex	file:
DEAD_BAND_MIN	src/Dialogs/Settings/Panels/AudioVarioConfigPanel.cpp	/^  DEAD_BAND_MIN,$/;"	e	enum:ControlIndex	file:
DECELWPNAMESIZE	src/Device/Driver/AltairPro.cpp	46;"	d	file:
DECELWPSIZE	src/Device/Driver/AltairPro.cpp	47;"	d	file:
DECIMAL_POINT	src/Form/DigitEntry.hpp	/^      DECIMAL_POINT,$/;"	m	class:CoordinateFormat::Column::Type
DECLARATION	src/Device/Driver/Volkslogger/vlapi2.h	/^  struct DECLARATION {$/;"	s	class:VLAPI_DATA
DECLARE	src/Device/Driver.hpp	/^    DECLARE = 0x2,$/;"	e	enum:DeviceRegister::__anon158
DECLARE	src/Dialogs/Task/Manager/TaskActionsPanel.hpp	/^    DECLARE,$/;"	e	enum:TaskActionsPanel::Controls
DEFAULT	src/DisplayOrientation.hpp	/^  DEFAULT,$/;"	m	class:DisplayOrientation
DEFAULT	src/Renderer/AirspaceRendererSettings.hpp	/^    DEFAULT,$/;"	m	class:AirspaceRendererSettings::FillMode
DEFAULT	src/UISettings.hpp	/^    DEFAULT,$/;"	m	class:UISettings::HapticFeedback
DEFAULT_ALSA_DEVICE	src/Audio/ALSAEnv.cpp	/^static constexpr char DEFAULT_ALSA_DEVICE[] = "default";$/;"	m	namespace:ALSAEnv	file:
DEFAULT_ALSA_LATENCY	src/Audio/ALSAEnv.cpp	/^static constexpr unsigned DEFAULT_ALSA_LATENCY = 100000;$/;"	m	namespace:ALSAEnv	file:
DEFAULT_DISPLAY_ORIENTATION	src/DisplayOrientation.hpp	/^static constexpr DisplayOrientation DEFAULT_DISPLAY_ORIENTATION =$/;"	v
DEFAULT_DRI_DEVICE	src/ui/canvas/egl/TopCanvas.cpp	/^constexpr const char * DEFAULT_DRI_DEVICE = "\/dev\/dri\/card0";$/;"	v
DEFAULT_DRI_DEVICE	src/ui/canvas/egl/TopCanvas.cpp	/^static constexpr const char *DEFAULT_DRI_DEVICE = "\/dev\/dri\/card1";$/;"	v	file:
DEFAULT_QUEUE_SIZE	src/Engine/Route/AStar.hpp	/^  static constexpr unsigned DEFAULT_QUEUE_SIZE = 1024;$/;"	m	class:AStar
DEFAULT_SHADING_ANGLE	src/Renderer/BackgroundRenderer.cpp	/^const Angle BackgroundRenderer::DEFAULT_SHADING_ANGLE = Angle::Degrees(-45);$/;"	m	class:BackgroundRenderer	file:
DEFAULT_SHADING_ANGLE	src/Renderer/BackgroundRenderer.hpp	/^  static const Angle DEFAULT_SHADING_ANGLE;$/;"	m	class:BackgroundRenderer
DEFAULT_TAKEOFF_SPEED	src/Computer/GlideComputerAirData.cpp	/^static constexpr double DEFAULT_TAKEOFF_SPEED = 10;$/;"	v	file:
DEFAULT_TASK_HPP	src/Task/DefaultTask.hpp	24;"	d
DEFAULT_UPDATE_TIME	src/Logger/LoggerFRecord.cpp	/^constexpr std::chrono::steady_clock::duration LoggerFRecord::DEFAULT_UPDATE_TIME;$/;"	m	class:LoggerFRecord	file:
DEFAULT_UPDATE_TIME	src/Logger/LoggerFRecord.hpp	/^  static constexpr std::chrono::steady_clock::duration DEFAULT_UPDATE_TIME = std::chrono::seconds(270);$/;"	m	class:LoggerFRecord
DEG	src/Units/Units.hpp	35;"	d
DEGREES	src/Form/DigitEntry.hpp	/^      DEGREES,$/;"	m	class:CoordinateFormat::Column::Type
DEGREES_CELCIUS	src/Units/Unit.hpp	/^  DEGREES_CELCIUS, \/\/ K = C° + 273,15$/;"	m	class:Unit
DEGREES_FAHRENHEIT	src/Units/Unit.hpp	/^  DEGREES_FAHRENHEIT, \/\/ K = (°F + 459,67) \/ 1,8$/;"	m	class:Unit
DEG_TO_RAD	src/Math/Constants.hpp	/^static constexpr double DEG_TO_RAD = .0174532925199432958;$/;"	v
DELETE	src/Dialogs/Plane/PlaneListDialog.cpp	51;"	d	file:
DELETE	src/Dialogs/Settings/Panels/PagesConfigPanel.cpp	44;"	d	file:
DELETE	src/Dialogs/Task/Manager/TaskListPanel.cpp	54;"	d	file:
DELETE	src/Dialogs/Waypoint/Manager.cpp	47;"	d	file:
DELETE_DISPOSER_HXX	src/util/DeleteDisposer.hxx	31;"	d
DELTA	src/Terrain/jasper/jpc/jpc_qmfb.c	1327;"	d	file:
DELTA_V_LIMIT	src/Gauge/GaugeVario.cpp	34;"	d	file:
DELTA_V_STEP	src/Gauge/GaugeVario.cpp	33;"	d	file:
DEMO_REPLAY_GLUE_HPP	src/Replay/DemoReplayGlue.hpp	25;"	d
DEMO_REPLAY_HPP	src/Replay/DemoReplay.hpp	25;"	d
DEPTH_ATTACHMENT	src/ui/canvas/opengl/FBO.hpp	/^static constexpr GLenum DEPTH_ATTACHMENT = GL_DEPTH_ATTACHMENT;$/;"	m	namespace:FBO
DEPTH_STENCIL	src/ui/canvas/opengl/FBO.hpp	/^static constexpr GLenum DEPTH_STENCIL = GL_DEPTH_STENCIL;$/;"	m	namespace:FBO
DEPTH_STENCIL	src/ui/canvas/opengl/FBO.hpp	/^static constexpr GLenum DEPTH_STENCIL = GL_DEPTH_STENCIL_EXT;$/;"	m	namespace:FBO
DEPTH_STENCIL	src/ui/canvas/opengl/FBO.hpp	/^static constexpr GLenum DEPTH_STENCIL = GL_DEPTH_STENCIL_NV;$/;"	m	namespace:FBO
DEPTH_STENCIL	src/ui/canvas/opengl/FBO.hpp	/^static constexpr GLenum DEPTH_STENCIL = GL_DEPTH_STENCIL_OES;$/;"	m	namespace:FBO
DEREFERENCE_ITERATOR_HXX	src/util/DereferenceIterator.hxx	31;"	d
DESCRIPTION	src/Dialogs/Settings/dlgConfigInfoboxes.cpp	/^    NAME, INFOBOX, CONTENT, DESCRIPTION$/;"	e	enum:final::Controls	file:
DESERIALISER_HPP	src/Task/Deserialiser.hpp	23;"	d
DETAILED	src/MapSettings.hpp	/^  DETAILED,$/;"	m	class:AircraftSymbol
DETAILS	src/Dialogs/Traffic/TrafficList.cpp	/^  DETAILS,$/;"	e	enum:Buttons	file:
DETAILS	src/Dialogs/Weather/NOAAList.cpp	/^    DETAILS,$/;"	e	enum:final::Buttons	file:
DEVICE_BLACKBOARD_H	src/Blackboard/DeviceBlackboard.hpp	25;"	d
DEVIMI_H	src/Device/Driver/IMI.hpp	8;"	d
DGPS	src/NMEA/GPSState.hpp	/^  DGPS,$/;"	m	class:FixQuality
DHV_XC	src/Engine/Contest/Settings.hpp	/^  DHV_XC,$/;"	m	class:Contest
DIALOGS_TEXT_ENTRY_HPP	src/Dialogs/TextEntry.hpp	25;"	d
DIALOG_TASK_HELPERS_HPP	src/Dialogs/Task/dlgTaskHelpers.hpp	25;"	d
DIFF_FILTER_HPP	src/Math/DiffFilter.hpp	24;"	d
DIGEST_LENGTH	src/Logger/GRecord.hpp	/^  static constexpr size_t DIGEST_LENGTH = N_MD5 * MD5::DIGEST_LENGTH;$/;"	m	class:GRecord
DIGEST_LENGTH	src/util/MD5.hpp	/^  static constexpr size_t DIGEST_LENGTH = 32;$/;"	m	class:MD5
DIGIT	src/Form/DigitEntry.hpp	/^      DIGIT,$/;"	m	class:CoordinateFormat::Column::Type
DIGIT19	src/Form/DigitEntry.hpp	/^      DIGIT19,$/;"	m	class:CoordinateFormat::Column::Type
DIGIT36	src/Form/DigitEntry.hpp	/^      DIGIT36,$/;"	m	class:CoordinateFormat::Column::Type
DIGIT6	src/Form/DigitEntry.hpp	/^      DIGIT6,$/;"	m	class:CoordinateFormat::Column::Type
DIJKSTRA_HPP	src/Engine/PathSolvers/Dijkstra.hpp	25;"	d
DIJKSTRA_MINMAX_OFFSET	src/Engine/PathSolvers/Dijkstra.hpp	29;"	d
DIRECTION	src/Dialogs/Airspace/AirspaceList.cpp	/^  DIRECTION,$/;"	e	enum:Controls	file:
DIRECTION	src/Dialogs/Waypoint/WaypointList.cpp	/^  DIRECTION,$/;"	e	enum:Controls	file:
DIRENTRY	src/Device/Driver/Volkslogger/vlconv.h	/^struct DIRENTRY {$/;"	s
DIR_SEPARATOR	src/Compatibility/path.h	31;"	d
DIR_SEPARATOR	src/Compatibility/path.h	36;"	d
DIR_SEPARATOR_S	src/Compatibility/path.h	32;"	d
DIR_SEPARATOR_S	src/Compatibility/path.h	37;"	d
DISABLE	src/Dialogs/Weather/MapOverlayWidget.cpp	/^    DISABLE,$/;"	e	enum:final::Buttons	file:
DISABLED	src/Device/Config.hpp	/^    DISABLED,$/;"	m	class:DeviceConfig::PortType
DISCONNECTED	src/net/State.hpp	/^  DISCONNECTED,$/;"	m	class:NetState
DISPLAY_TRACK_BEARING	src/Dialogs/Settings/Panels/SymbolsConfigPanel.cpp	/^  DISPLAY_TRACK_BEARING,$/;"	e	enum:ControlIndex	file:
DISTANCE	src/Dialogs/Airspace/AirspaceList.cpp	/^  DISTANCE,$/;"	e	enum:Controls	file:
DISTANCE	src/Dialogs/Traffic/FlarmTrafficDetails.cpp	/^    DISTANCE,$/;"	e	enum:final::Controls	file:
DISTANCE	src/Dialogs/Waypoint/WaypointList.cpp	/^  DISTANCE,$/;"	e	enum:Controls	file:
DISTANCE	src/Units/Group.hpp	/^  DISTANCE,$/;"	m	class:UnitGroup
DISTANCE_MEMENTO_HPP	src/Geo/Memento/DistanceMemento.hpp	24;"	d
DISTANCE_STAT_HPP	src/Engine/Task/Stats/DistanceStat.hpp	23;"	d
DLE	src/Device/Driver/Volkslogger/Protocol.hpp	/^    DLE = 0x10,$/;"	e	enum:Volkslogger::__anon164
DLGINFOBOXACCESS_HPP	src/Dialogs/dlgInfoBoxAccess.hpp	25;"	d
DMS	src/Math/Angle.hpp	/^    constexpr DMS(unsigned d, unsigned m=0, unsigned s=0, bool n=false)$/;"	f	struct:Angle::DMS
DMS	src/Math/Angle.hpp	/^  struct DMS {$/;"	s	class:Angle
DMST	src/Engine/Contest/Settings.hpp	/^  DMST,$/;"	m	class:Contest
DMStQuad	src/Engine/Contest/Solvers/DMStQuad.hpp	/^class DMStQuad : public ContestDijkstra {$/;"	c
DOLLAR_EXPAND_HPP	src/util/DollarExpand.hpp	25;"	d
DOWN	src/Dialogs/KnobTextEntry.cpp	/^  DOWN,$/;"	e	enum:Buttons	file:
DOWN	src/NMEA/SwitchState.hpp	/^    DOWN,$/;"	m	class:SwitchState::UserSwitch
DOWN	src/Renderer/SymbolRenderer.hpp	/^    DOWN,$/;"	e	enum:SymbolRenderer::Direction
DOWNLOAD	src/Device/Driver/CAI302/Internal.hpp	/^    DOWNLOAD,$/;"	m	class:CAI302Device::Mode
DOWNLOAD	src/Dialogs/Weather/RASPDialog.cpp	/^    DOWNLOAD,$/;"	e	enum:final::Controls	file:
DOWNLOAD	src/Form/DataField/ComboList.hpp	/^    static constexpr int DOWNLOAD = -800003;$/;"	m	struct:ComboList::Item
DPMSVersion	src/Hardware/VideoPower.h	/^  ULONG DPMSVersion;$/;"	m	struct:VIDEO_POWER_MANAGEMENT
DRAG_GESTURE	src/MapWindow/GlueMapWindow.hpp	/^    DRAG_GESTURE,$/;"	e	enum:GlueMapWindow::DragMode
DRAG_MULTI_TOUCH_PAN	src/MapWindow/GlueMapWindow.hpp	/^    DRAG_MULTI_TOUCH_PAN,$/;"	e	enum:GlueMapWindow::DragMode
DRAG_NONE	src/MapWindow/GlueMapWindow.hpp	/^    DRAG_NONE,$/;"	e	enum:GlueMapWindow::DragMode
DRAG_NONE	src/MapWindow/TargetMapWindow.hpp	/^    DRAG_NONE,$/;"	e	enum:TargetMapWindow::DragMode
DRAG_OZ	src/MapWindow/TargetMapWindow.hpp	/^    DRAG_OZ,$/;"	e	enum:TargetMapWindow::DragMode
DRAG_PAN	src/MapWindow/GlueMapWindow.hpp	/^    DRAG_PAN,$/;"	e	enum:GlueMapWindow::DragMode
DRAG_SIMULATOR	src/MapWindow/GlueMapWindow.hpp	/^    DRAG_SIMULATOR,$/;"	e	enum:GlueMapWindow::DragMode
DRAG_TARGET	src/MapWindow/TargetMapWindow.hpp	/^    DRAG_TARGET,$/;"	e	enum:TargetMapWindow::DragMode
DRAG_TARGET_OUTSIDE	src/MapWindow/TargetMapWindow.hpp	/^    DRAG_TARGET_OUTSIDE,$/;"	e	enum:TargetMapWindow::DragMode
DRAW_MOUSE_CURSOR	src/ui/canvas/memory/Features.hpp	32;"	d
DRAW_MOUSE_CURSOR	src/ui/opengl/Features.hpp	53;"	d
DROIDSOAR_V2	src/Device/Config.hpp	/^    DROIDSOAR_V2,$/;"	m	class:DeviceConfig::PortType
DROP_PLANE	src/FLARM/Traffic.hpp	/^    DROP_PLANE = 5,       \/\/!< drop plane for parachutes$/;"	m	class:FlarmTraffic::AircraftType
DRY_MASS	src/Dialogs/Plane/PlanePolarDialog.cpp	/^    DRY_MASS,$/;"	e	enum:final::Controls	file:
DTE	src/Device/Driver/Volkslogger/vlconv.cpp	/^  char A[10], DTE[10], FXA[10], PLT[80], GTY[50], GID[50], RFW[10], RHW[10],$/;"	m	struct:IGCHEADER	file:
DTM	src/Device/Driver/Volkslogger/vlconv.cpp	/^       FTY[50], DTM[10], CID[50], CCL[50], TZN[20];$/;"	m	struct:IGCHEADER	file:
DT_CALCRECT	src/unix/winuser.h	/^  DT_CALCRECT = 0x400,$/;"	e	enum:__anon6
DT_CENTER	src/unix/winuser.h	/^  DT_CENTER = 0x20,$/;"	e	enum:__anon6
DT_LEFT	src/unix/winuser.h	/^  DT_LEFT = 0x2,$/;"	e	enum:__anon6
DT_RIGHT	src/unix/winuser.h	/^  DT_RIGHT = 0x100,$/;"	e	enum:__anon6
DT_UNDERLINE	src/unix/winuser.h	/^  DT_UNDERLINE = 0x800,$/;"	e	enum:__anon6
DT_VCENTER	src/unix/winuser.h	/^  DT_VCENTER = 0x80,$/;"	e	enum:__anon6
DUMMY	src/Widget/RowFormWidget.hpp	/^      DUMMY,$/;"	m	class:RowFormWidget::Row::Type
DUMP_TIME	src/Dialogs/Plane/PlaneDetailsDialog.cpp	/^    DUMP_TIME,$/;"	e	enum:final::Controls	file:
DYNAMIC_FIFO_BUFFER_HXX	src/util/DynamicFifoBuffer.hxx	31;"	d
DarkColor	src/ui/canvas/Color.hpp	/^DarkColor(Color c)$/;"	f
DarkColor	src/ui/canvas/Color.hpp	/^DarkColor(uint8_t c)$/;"	f
Darken	src/ui/canvas/PortableColor.hpp	/^  constexpr RGB8Color Darken() const {$/;"	f	class:RGB8Color
Data	src/Operation/ThreadedOperationEnvironment.hpp	/^  struct Data {$/;"	s	class:ThreadedOperationEnvironment
Data	src/ResourceLoader.hpp	/^  typedef ConstBuffer<void> Data;$/;"	t	namespace:ResourceLoader
Data	src/Tracking/SkyLines/Data.hpp	/^struct Data {$/;"	s	namespace:SkyLinesTracking
Data	src/XML/Node.hpp	/^    Data(const TCHAR *_name, bool _is_declaration)$/;"	f	struct:XMLNode::Data
Data	src/XML/Node.hpp	/^    Data(const TCHAR *_name, size_t name_length, bool _is_declaration)$/;"	f	struct:XMLNode::Data
Data	src/XML/Node.hpp	/^  struct Data : private NonCopyable {$/;"	s	class:XMLNode
DataField	src/Form/DataField/Base.cpp	/^DataField::DataField(Type _type, bool _supports_combolist,$/;"	f	class:DataField
DataField	src/Form/DataField/Base.hpp	/^class DataField$/;"	c
DataFieldBoolean	src/Form/DataField/Boolean.hpp	/^  DataFieldBoolean(bool _value,$/;"	f	class:final
DataFieldEnum	src/Form/DataField/Enum.hpp	/^  DataFieldEnum(DataFieldListener *listener=nullptr)$/;"	f	class:final
DataFieldFloat	src/Form/DataField/Float.hpp	/^  DataFieldFloat(const TCHAR *edit_format, const TCHAR *display_format,$/;"	f	class:final
DataFieldInteger	src/Form/DataField/Integer.hpp	/^  DataFieldInteger(const TCHAR *edit_format, const TCHAR *display_format,$/;"	f	class:final
DataFieldKeyUp	src/Form/DataField/Float.cpp	/^static bool DataFieldKeyUp = false;$/;"	v	file:
DataFieldListener	src/Form/DataField/Listener.hpp	/^class DataFieldListener {$/;"	c
DataFieldString	src/Form/DataField/String.hpp	/^  DataFieldString(Type _type, const TCHAR *_value,$/;"	f	class:DataFieldString
DataFieldString	src/Form/DataField/String.hpp	/^  DataFieldString(const TCHAR *_value, DataFieldListener *listener=nullptr)$/;"	f	class:DataFieldString
DataFieldString	src/Form/DataField/String.hpp	/^class DataFieldString: public DataField$/;"	c
DataFieldTime	src/Form/DataField/Time.hpp	/^  DataFieldTime(int _min, int _max, int _value, unsigned _step,$/;"	f	class:final
DataGlobals	src/DataGlobals.hpp	/^namespace DataGlobals {$/;"	n
DataHandler	src/io/DataHandler.hpp	/^class DataHandler {$/;"	c
DataPath	src/Dialogs/Settings/Panels/SiteConfigPanel.cpp	/^  DataPath,$/;"	e	enum:ControlIndex	file:
DataReceived	src/Device/Driver.cpp	/^AbstractDevice::DataReceived(const void *data, size_t length, NMEAInfo &info)$/;"	f	class:AbstractDevice
DataReceived	src/Device/Driver/ATR833.cpp	/^ATR833Device::DataReceived(const void *data, size_t length,$/;"	f	class:ATR833Device
DataReceived	src/Device/Driver/KRT2.cpp	/^KRT2Device::DataReceived(const void *_data, size_t length,$/;"	f	class:KRT2Device
Date	src/Device/Driver/LX/LXN.hpp	/^  struct Date {$/;"	s	namespace:LXN
DateTime	src/Device/Driver/CAI302/Protocol.hpp	/^  struct DateTime {$/;"	s	namespace:CAI302
Daylight	src/Dialogs/StatusPanels/TimesStatusPanel.cpp	/^  Daylight,$/;"	e	enum:Controls	file:
Days	src/Engine/Airspace/AirspaceActivity.hpp	/^  struct Days$/;"	s	class:AirspaceActivity
DaysSince	src/time/BrokenDate.cpp	/^BrokenDate::DaysSince(const BrokenDate &other) const$/;"	f	class:BrokenDate
DebugCurrent	src/Dialogs/Device/DeviceListDialog.cpp	/^DeviceListWidget::DebugCurrent()$/;"	f	class:DeviceListWidget
Dec	src/Form/DataField/Angle.cpp	/^AngleDataField::Dec()$/;"	f	class:AngleDataField
Dec	src/Form/DataField/Base.cpp	/^DataField::Dec()$/;"	f	class:DataField
Dec	src/Form/DataField/Boolean.cpp	/^DataFieldBoolean::Dec()$/;"	f	class:DataFieldBoolean
Dec	src/Form/DataField/Enum.cpp	/^DataFieldEnum::Dec()$/;"	f	class:DataFieldEnum
Dec	src/Form/DataField/File.cpp	/^FileDataField::Dec()$/;"	f	class:FileDataField
Dec	src/Form/DataField/Float.cpp	/^DataFieldFloat::Dec()$/;"	f	class:DataFieldFloat
Dec	src/Form/DataField/Integer.cpp	/^DataFieldInteger::Dec()$/;"	f	class:DataFieldInteger
Dec	src/Form/DataField/Prefix.cpp	/^PrefixDataField::Dec()$/;"	f	class:PrefixDataField
Dec	src/Form/DataField/RoughTime.cpp	/^RoughTimeDataField::Dec()$/;"	f	class:RoughTimeDataField
Dec	src/Form/DataField/Time.cpp	/^DataFieldTime::Dec()$/;"	f	class:DataFieldTime
Decimate	src/Engine/ThermalBand/ThermalBand.cpp	/^ThermalBand::Decimate(bool update)$/;"	f	class:ThermalBand
Declaration	src/Device/Declaration.cpp	/^Declaration::Declaration(const LoggerSettings &logger_settings,$/;"	f	class:Declaration
Declaration	src/Device/Declaration.hpp	/^struct Declaration {$/;"	s
Declaration	src/Device/Driver/LX/Protocol.hpp	/^  struct Declaration {$/;"	s	namespace:LX
DeclarationWaypoint	src/Device/Driver/Volkslogger/Database.hpp	/^  struct DeclarationWaypoint : public Waypoint{$/;"	s	namespace:Volkslogger
DeclarationWrite	src/Device/Driver/IMI/Protocol/Protocol.cpp	/^IMI::DeclarationWrite(Port &port, const Declaration &decl,$/;"	f	class:IMI
Declare	src/Device/Descriptor.cpp	/^DeviceDescriptor::Declare(const struct Declaration &declaration,$/;"	f	class:DeviceDescriptor
Declare	src/Device/Driver.cpp	/^AbstractDevice::Declare(const Declaration &declaration, const Waypoint *home,$/;"	f	class:AbstractDevice
Declare	src/Device/Driver/AltairPro.cpp	/^AltairProDevice::Declare(const struct Declaration &declaration,$/;"	f	class:AltairProDevice
Declare	src/Device/Driver/CAI302/Declare.cpp	/^CAI302Device::Declare(const Declaration &declaration,$/;"	f	class:CAI302Device
Declare	src/Device/Driver/EW.cpp	/^EWDevice::Declare(const struct Declaration &declaration,$/;"	f	class:EWDevice
Declare	src/Device/Driver/EWMicroRecorder.cpp	/^EWMicroRecorderDevice::Declare(const Declaration &declaration,$/;"	f	class:EWMicroRecorderDevice
Declare	src/Device/Driver/FLARM/Declare.cpp	/^FlarmDevice::Declare(const Declaration &declaration,$/;"	f	class:FlarmDevice
Declare	src/Device/Driver/IMI/Declare.cpp	/^IMIDevice::Declare(const Declaration &declaration,$/;"	f	class:IMIDevice
Declare	src/Device/Driver/LX/Declare.cpp	/^LXDevice::Declare(const Declaration &declaration,$/;"	f	class:LXDevice
Declare	src/Device/Driver/LX/NanoDeclare.cpp	/^Nano::Declare(Port &port, const Declaration &declaration,$/;"	f	class:Nano
Declare	src/Device/Driver/Volkslogger/Declare.cpp	/^VolksloggerDevice::Declare(const Declaration &declaration,$/;"	f	class:VolksloggerDevice
Declare	src/Logger/ExternalLogger.cpp	/^ExternalLogger::Declare(const Declaration &decl, const Waypoint *home)$/;"	f	class:ExternalLogger
DeclareInner	src/Device/Driver/CAI302/Declare.cpp	/^DeclareInner(Port &port, const Declaration &declaration,$/;"	f	file:
DeclareInner	src/Device/Driver/EW.cpp	/^EWDevice::DeclareInner(const struct Declaration &declaration,$/;"	f	class:EWDevice
DeclareInner	src/Device/Driver/EWMicroRecorder.cpp	/^DeclareInner(Port &port, const Declaration &declaration,$/;"	f	file:
DeclareInner	src/Device/Driver/LX/Declare.cpp	/^DeclareInner(Port &port, const Declaration &declaration,$/;"	f	file:
DeclareInner	src/Device/Driver/Volkslogger/Declare.cpp	/^DeclareInner(Port &port, const unsigned bulkrate,$/;"	f	file:
DeclareInternal	src/Device/Driver/AltairPro.cpp	/^AltairProDevice::DeclareInternal(const struct Declaration &declaration,$/;"	f	class:AltairProDevice
DeclareInternal	src/Device/Driver/FLARM/Declare.cpp	/^FlarmDevice::DeclareInternal(const Declaration &declaration,$/;"	f	class:FlarmDevice
DeclareJob	src/Logger/ExternalLogger.cpp	/^  DeclareJob(DeviceDescriptor &_device, const struct Declaration &_declaration,$/;"	f	class:DeclareJob
DeclareJob	src/Logger/ExternalLogger.cpp	/^class DeclareJob {$/;"	c	file:
DeclareSave	src/Device/Driver/CAI302/Protocol.cpp	/^CAI302::DeclareSave(Port &port, OperationEnvironment &env)$/;"	f	class:CAI302
DeclareTP	src/Device/Driver/CAI302/Protocol.cpp	/^CAI302::DeclareTP(Port &port, unsigned i, const GeoPoint &location,$/;"	f	class:CAI302
DeclareToFLARM	src/Device/Descriptor.cpp	/^DeclareToFLARM(const struct Declaration &declaration, Port &port,$/;"	f	file:
DeclareToFLARM	src/Device/Descriptor.cpp	/^DeclareToFLARM(const struct Declaration &declaration,$/;"	f	file:
DecompressImageFile	src/ui/canvas/custom/Bitmap.cpp	/^DecompressImageFile(Path path)$/;"	f	file:
DecrementColumn	src/Form/DigitEntry.cpp	/^DigitEntry::DecrementColumn(unsigned i)$/;"	f	class:DigitEntry
DecrementDay	src/time/BrokenDate.cpp	/^BrokenDate::DecrementDay()$/;"	f	class:BrokenDate
DecrementLetter	src/Dialogs/KnobTextEntry.cpp	/^  void DecrementLetter() {$/;"	f	class:final
Default	src/Dialogs/DialogSettings.hpp	/^    Default,$/;"	m	class:DialogSettings::TextInputStyle
Default	src/PageSettings.hpp	/^  static PageLayout Default() {$/;"	f	struct:PageLayout
DefaultWidgetDialog	src/Dialogs/WidgetDialog.cpp	/^DefaultWidgetDialog(SingleWindow &parent, const DialogLook &look,$/;"	f
Defaults	src/Engine/Waypoint/Waypoint.hpp	/^    static constexpr Flags Defaults() {$/;"	f	struct:Waypoint::Flags
DeferredRestore	src/PageActions.cpp	/^PageActions::DeferredRestore()$/;"	f	class:PageActions
DeferredRestorePage	src/MainWindow.cpp	/^MainWindow::DeferredRestorePage()$/;"	f	class:MainWindow
Defined	src/system/OverlappedEvent.hpp	/^  bool Defined() const {$/;"	f	class:OverlappedEvent
Defined	src/ui/window/custom/Reference.hpp	/^  bool Defined() const {$/;"	f	class:WindowReference
Degrees	src/Math/Angle.hpp	/^  constexpr double Degrees() const {$/;"	f	class:Angle
Degrees	src/Math/Angle.hpp	/^  static Angle Degrees(double value) {$/;"	f	class:Angle
Degrees	src/Math/Angle.hpp	/^  static Angle Degrees(int value) {$/;"	f	class:Angle
Degrees	src/Math/Angle.hpp	/^  static Angle Degrees(unsigned value) {$/;"	f	class:Angle
Deinit	src/Apple/InternalSensors.cpp	/^void InternalSensors::Deinit()$/;"	f	class:InternalSensors
DeinitTrafficGlobals	src/FLARM/Glue.cpp	/^DeinitTrafficGlobals()$/;"	f
Deinitialise	src/Android/BMP085Device.cpp	/^BMP085Device::Deinitialise(JNIEnv *env)$/;"	f	class:BMP085Device
Deinitialise	src/Android/Bitmap.hpp	/^  static void Deinitialise(JNIEnv *env) {}$/;"	f	class:AndroidBitmap
Deinitialise	src/Android/BluetoothHelper.cpp	/^BluetoothHelper::Deinitialise(JNIEnv *env)$/;"	f	class:BluetoothHelper
Deinitialise	src/Android/Environment.cpp	/^Environment::Deinitialise(JNIEnv *env)$/;"	f	class:Environment
Deinitialise	src/Android/GliderLink.cpp	/^GliderLink::Deinitialise(JNIEnv *env)$/;"	f	class:GliderLink
Deinitialise	src/Android/I2CbaroDevice.cpp	/^I2CbaroDevice::Deinitialise(JNIEnv *env)$/;"	f	class:I2CbaroDevice
Deinitialise	src/Android/IOIOHelper.cpp	/^IOIOHelper::Deinitialise(JNIEnv *env)$/;"	f	class:IOIOHelper
Deinitialise	src/Android/InternalSensors.cpp	/^InternalSensors::Deinitialise(JNIEnv *env)$/;"	f	class:InternalSensors
Deinitialise	src/Android/NativeBMP085Listener.cpp	/^NativeBMP085Listener::Deinitialise(JNIEnv *env)$/;"	f	class:NativeBMP085Listener
Deinitialise	src/Android/NativeI2CbaroListener.cpp	/^NativeI2CbaroListener::Deinitialise(JNIEnv *env)$/;"	f	class:NativeI2CbaroListener
Deinitialise	src/Android/NativeInputListener.cpp	/^NativeInputListener::Deinitialise(JNIEnv *env)$/;"	f	class:NativeInputListener
Deinitialise	src/Android/NativeLeScanCallback.cpp	/^NativeLeScanCallback::Deinitialise(JNIEnv *env)$/;"	f	class:NativeLeScanCallback
Deinitialise	src/Android/NativeNunchuckListener.cpp	/^NativeNunchuckListener::Deinitialise(JNIEnv *env)$/;"	f	class:NativeNunchuckListener
Deinitialise	src/Android/NativePortListener.cpp	/^NativePortListener::Deinitialise(JNIEnv *env)$/;"	f	class:NativePortListener
Deinitialise	src/Android/NativeView.cpp	/^NativeView::Deinitialise(JNIEnv *env)$/;"	f	class:NativeView
Deinitialise	src/Android/NativeVoltageListener.cpp	/^NativeVoltageListener::Deinitialise(JNIEnv *env)$/;"	f	class:NativeVoltageListener
Deinitialise	src/Android/NunchuckDevice.cpp	/^NunchuckDevice::Deinitialise(JNIEnv *env)$/;"	f	class:NunchuckDevice
Deinitialise	src/Android/SoundUtil.cpp	/^SoundUtil::Deinitialise(JNIEnv *env)$/;"	f	class:SoundUtil
Deinitialise	src/Android/TextUtil.cpp	/^TextUtil::Deinitialise(JNIEnv *env)$/;"	f	class:TextUtil
Deinitialise	src/Android/VoltageDevice.cpp	/^VoltageDevice::Deinitialise(JNIEnv *env)$/;"	f	class:VoltageDevice
Deinitialise	src/Audio/VarioGlue.cpp	/^AudioVarioGlue::Deinitialise()$/;"	f	class:AudioVarioGlue
Deinitialise	src/MainWindow.cpp	/^MainWindow::Deinitialise()$/;"	f	class:MainWindow
Deinitialise	src/java/URL.cxx	/^Java::URL::Deinitialise(JNIEnv *env)$/;"	f	class:Java::URL
Deinitialise	src/net/http/Init.cpp	/^Net::Deinitialise()$/;"	f	class:Net
Deinitialise	src/ui/canvas/freetype/Init.cpp	/^FreeType::Deinitialise()$/;"	f	class:FreeType
DeinitialiseAsioThread	src/io/async/GlobalAsioThread.cpp	/^DeinitialiseAsioThread()$/;"	f
DeinitialiseDataPath	src/LocalPath.cpp	/^DeinitialiseDataPath()$/;"	f
DeinitialisePCMMixer	src/Audio/GlobalPCMMixer.cpp	/^DeinitialisePCMMixer()$/;"	f
DeinitialisePCMMixer	src/Audio/GlobalPCMMixer.hpp	/^DeinitialisePCMMixer()$/;"	f
DeinitialisePCMResourcePlayer	src/Audio/GlobalPCMResourcePlayer.cpp	/^DeinitialisePCMResourcePlayer()$/;"	f
DeinitialisePCMResourcePlayer	src/Audio/GlobalPCMResourcePlayer.hpp	/^DeinitialisePCMResourcePlayer()$/;"	f
DeinitialiseTTY	src/ui/canvas/tty/TopCanvas.cpp	/^TopCanvas::DeinitialiseTTY()$/;"	f	class:TopCanvas
DeinitialiseVolumeController	src/Audio/GlobalVolumeController.cpp	/^DeinitialiseVolumeController()$/;"	f
DeinitialiseVolumeController	src/Audio/GlobalVolumeController.hpp	/^DeinitialiseVolumeController()$/;"	f
Deinitialize	src/Look/GlobalFonts.cpp	/^Fonts::Deinitialize()$/;"	f	class:Fonts
Delete	src/system/FileUtil.hpp	/^  Delete(Path path)$/;"	f	namespace:File
Delete	src/ui/canvas/opengl/RenderBuffer.hpp	/^  void Delete() {$/;"	f	class:GLRenderBuffer
DeleteClicked	src/Dialogs/Plane/PlaneListDialog.cpp	/^PlaneListWidget::DeleteClicked()$/;"	f	class:PlaneListWidget
DeleteClicked	src/Dialogs/ProfileListDialog.cpp	/^ProfileListWidget::DeleteClicked()$/;"	f	class:ProfileListWidget
DeleteDisposer	src/util/DeleteDisposer.hxx	/^class DeleteDisposer {$/;"	c
DeleteFramebuffers	src/ui/canvas/opengl/FBO.cpp	/^FBO::DeleteFramebuffers(GLsizei n, GLuint *framebuffers)$/;"	f	class:FBO
DeleteOldestIGCFile	src/Logger/IGCFileCleanup.cpp	/^DeleteOldestIGCFile(unsigned current_year, Path pathname)$/;"	f	file:
DeleteRenderbuffers	src/ui/canvas/opengl/FBO.cpp	/^FBO::DeleteRenderbuffers(GLsizei n, GLuint *renderbuffers)$/;"	f	class:FBO
DeleteTask	src/Dialogs/Task/Manager/TaskListPanel.cpp	/^TaskListPanel::DeleteTask()$/;"	f	class:TaskListPanel
DeleteValue	src/Config/Registry.hpp	/^  bool DeleteValue(const TCHAR *name) {$/;"	f	class:RegistryKey
DeltaList	src/Engine/Trace/Trace.hpp	/^                                     boost::intrusive::constant_time_size<false>> DeltaList;$/;"	t	class:Trace
DeltaRank	src/Engine/Trace/Trace.hpp	/^    static bool DeltaRank(const TraceDelta &x, const TraceDelta &y) {$/;"	f	struct:Trace::TraceDelta
DeltaRankOp	src/Engine/Trace/Trace.hpp	/^    struct DeltaRankOp {$/;"	s	struct:Trace::TraceDelta
DeltaTime	src/Engine/Trace/Point.hpp	/^  unsigned DeltaTime(const TracePoint &previous) const {$/;"	f	class:TracePoint
DeltaTime	src/time/DeltaTime.hpp	/^class DeltaTime {$/;"	c
DemoReplay	src/Replay/DemoReplay.cpp	/^DemoReplay::DemoReplay():$/;"	f	class:DemoReplay
DemoReplay	src/Replay/DemoReplay.hpp	/^class DemoReplay$/;"	c
DemoReplayGlue	src/Replay/DemoReplayGlue.cpp	/^DemoReplayGlue::DemoReplayGlue(ProtectedTaskManager &_task_manager)$/;"	f	class:DemoReplayGlue
DemoReplayGlue	src/Replay/DemoReplayGlue.hpp	/^class DemoReplayGlue$/;"	c
DereferenceContainerAdapter	src/util/DereferenceIterator.hxx	/^class DereferenceContainerAdapter {$/;"	c
DereferenceIterator	src/util/DereferenceIterator.hxx	/^class DereferenceIterator {$/;"	c
DerivedInfo	src/NMEA/Derived.hpp	/^struct DerivedInfo: $/;"	s
Desaturate	src/ui/canvas/Color.cpp	/^Color Desaturate(Color c) {$/;"	f
Deserialise	src/Task/Deserialiser.cpp	/^Deserialise(GeoPoint &data, const ConstDataNode &node)$/;"	f	file:
Deserialise	src/Task/Deserialiser.cpp	/^Deserialise(OrderedTaskSettings &data, const ConstDataNode &node)$/;"	f	file:
DeserialiseOZ	src/Task/Deserialiser.cpp	/^DeserialiseOZ(const Waypoint &wp, const ConstDataNode &node, bool is_turnpoint)$/;"	f	file:
DeserialiseTaskpoint	src/Task/Deserialiser.cpp	/^DeserialiseTaskpoint(AbstractTaskFactory &fact, const ConstDataNode &node,$/;"	f	file:
DeserialiseWaypoint	src/Task/Deserialiser.cpp	/^DeserialiseWaypoint(const ConstDataNode &node, const Waypoints *waypoints)$/;"	f	file:
Deserialiser	src/Cloud/Serialiser.hpp	/^  explicit Deserialiser(Reader &_r):BufferedReader(_r) {}$/;"	f	class:Deserialiser
Deserialiser	src/Cloud/Serialiser.hpp	/^class Deserialiser : public BufferedReader {$/;"	c
Design	src/Engine/Util/AircraftStateFilter.cpp	/^AircraftStateFilter::Design(const double cutoff_wavelength)$/;"	f	class:AircraftStateFilter
DestinationAngleGround	src/Engine/GlideSolvers/GlideResult.cpp	/^GlideResult::DestinationAngleGround() const$/;"	f	class:GlideResult
Destroy	src/Audio/SLES/Object.hpp	/^    void Destroy() {$/;"	f	class:SLES::Object
Destroy	src/Engine/Airspace/Airspace.cpp	/^Airspace::Destroy()$/;"	f	class:Airspace
Destroy	src/InfoBoxes/InfoBoxManager.cpp	/^InfoBoxManager::Destroy()$/;"	f	class:InfoBoxManager
Destroy	src/MainWindow.cpp	/^MainWindow::Destroy()$/;"	f	class:MainWindow
Destroy	src/Menu/ButtonLabel.cpp	/^ButtonLabel::Destroy()$/;"	f	class:ButtonLabel
Destroy	src/ui/canvas/Brush.hpp	/^Brush::Destroy()$/;"	f	class:Brush
Destroy	src/ui/canvas/Pen.hpp	/^Pen::Destroy()$/;"	f	class:Pen
Destroy	src/ui/canvas/egl/TopCanvas.cpp	/^TopCanvas::Destroy()$/;"	f	class:TopCanvas
Destroy	src/ui/canvas/fb/TopCanvas.cpp	/^TopCanvas::Destroy()$/;"	f	class:TopCanvas
Destroy	src/ui/canvas/gdi/Brush.cpp	/^Brush::Destroy()$/;"	f	class:Brush
Destroy	src/ui/canvas/gdi/BufferCanvas.cpp	/^BufferCanvas::Destroy()$/;"	f	class:BufferCanvas
Destroy	src/ui/canvas/gdi/Canvas.hpp	/^  void Destroy() {$/;"	f	class:Canvas
Destroy	src/ui/canvas/gdi/Pen.cpp	/^Pen::Destroy()$/;"	f	class:Pen
Destroy	src/ui/canvas/gdi/VirtualCanvas.cpp	/^void VirtualCanvas::Destroy()$/;"	f	class:VirtualCanvas
Destroy	src/ui/canvas/glx/TopCanvas.cpp	/^TopCanvas::Destroy()$/;"	f	class:TopCanvas
Destroy	src/ui/canvas/memory/VirtualCanvas.cpp	/^VirtualCanvas::Destroy()$/;"	f	class:VirtualCanvas
Destroy	src/ui/canvas/opengl/BufferCanvas.cpp	/^BufferCanvas::Destroy()$/;"	f	class:BufferCanvas
Destroy	src/ui/canvas/sdl/TopCanvas.cpp	/^TopCanvas::Destroy()$/;"	f	class:TopCanvas
Destruct	src/util/Cache.hxx	/^		void Destruct() {$/;"	f	class:Cache::Item
Destruct	src/util/Manual.hxx	/^	void Destruct() {$/;"	f	class:Manual
DetachFramebuffer	src/ui/canvas/opengl/RenderBuffer.hpp	/^  static void DetachFramebuffer(GLenum attachment) {$/;"	f	class:GLRenderBuffer
DetailsClicked	src/Dialogs/Weather/NOAAList.cpp	/^NOAAListWidget::DetailsClicked()$/;"	f	class:NOAAListWidget
DetectAdditionalTemperaturesToken	src/Weather/METARParser.cpp	/^DetectAdditionalTemperaturesToken(const TCHAR *token)$/;"	f	file:
DetectCAVOK	src/Weather/METARParser.cpp	/^DetectCAVOK(const TCHAR *token)$/;"	f	file:
DetectFileType	src/Airspace/AirspaceParser.cpp	/^DetectFileType(const TCHAR *line)$/;"	f	file:
DetectGPS	src/Device/Port/ConfiguredPort.cpp	/^DetectGPS(TCHAR *path, size_t path_max_size)$/;"	f	file:
DetectICAOCodeToken	src/Weather/METARParser.cpp	/^DetectICAOCodeToken(const TCHAR *token)$/;"	f	file:
DetectInitialOrientation	src/Hardware/DisplayGlue.cpp	/^Display::DetectInitialOrientation()$/;"	f	class:Display
DetectKoboModel	src/Kobo/Model.cpp	/^DetectKoboModel()$/;"	f
DetectKoboModel	src/Kobo/Model.cpp	/^DetectKoboModel(const char *p)$/;"	f	file:
DetectLanguage	src/Language/LanguageGlue.cpp	/^DetectLanguage()$/;"	f	file:
DetectQNHToken	src/Weather/METARParser.cpp	/^DetectQNHToken(const TCHAR *token)$/;"	f	file:
DetectTemperaturesToken	src/Weather/METARParser.cpp	/^DetectTemperaturesToken(const TCHAR *token)$/;"	f	file:
DetectTimeCodeToken	src/Weather/METARParser.cpp	/^DetectTimeCodeToken(const TCHAR *token)$/;"	f	file:
DetectVisibilityToken	src/Weather/METARParser.cpp	/^DetectVisibilityToken(const TCHAR *token)$/;"	f	file:
DetectWindToken	src/Weather/METARParser.cpp	/^DetectWindToken(const TCHAR *token)$/;"	f	file:
DetermineTeamCodeRefLocation	src/Computer/GlideComputer.cpp	/^GlideComputer::DetermineTeamCodeRefLocation()$/;"	f	class:GlideComputer
DetermineWaypointFileType	src/Waypoint/WaypointFileType.cpp	/^DetermineWaypointFileType(Path path)$/;"	f
DetourCostMarker	src/Profile/ProfileKeys.cpp	/^const char DetourCostMarker[] = "DetourCostMarker";$/;"	m	namespace:ProfileKeys	file:
Device	src/Device/Driver.hpp	/^class Device {$/;"	c
DeviceBlackboard	src/Blackboard/DeviceBlackboard.cpp	/^DeviceBlackboard::DeviceBlackboard()$/;"	f	class:DeviceBlackboard
DeviceBlackboard	src/Blackboard/DeviceBlackboard.hpp	/^class DeviceBlackboard$/;"	c
DeviceConfig	src/Device/Config.hpp	/^struct DeviceConfig {$/;"	s
DeviceConfigOverlaps	src/Device/device.cpp	/^DeviceConfigOverlaps(const DeviceConfig &a, const DeviceConfig &b)$/;"	f	file:
DeviceConfigOverlaps	src/Device/device.cpp	/^DeviceConfigOverlaps(const DeviceConfig &config, I begin, I end)$/;"	f	file:
DeviceDeclare	src/Logger/ExternalLogger.cpp	/^DeviceDeclare(DeviceDescriptor &dev, const Declaration &declaration,$/;"	f	file:
DeviceDescriptor	src/Device/Descriptor.cpp	/^DeviceDescriptor::DeviceDescriptor(EventLoop &_event_loop,$/;"	f	class:DeviceDescriptor
DeviceDispatcher	src/Device/Dispatcher.hpp	/^  DeviceDispatcher(MultipleDevices &_devices, unsigned _exclude)$/;"	f	class:final
DeviceEditWidget	src/Dialogs/Device/DeviceEditWidget.hpp	/^class DeviceEditWidget : public RowFormWidget, DataFieldListener {$/;"	c
DeviceInfo	src/NMEA/DeviceInfo.hpp	/^struct DeviceInfo {$/;"	s
DeviceListWidget	src/Dialogs/Device/DeviceListDialog.cpp	/^  DeviceListWidget(const DialogLook &_look)$/;"	f	class:final
DevicePortChanged	src/UtilsSettings.cpp	/^bool DevicePortChanged = false;$/;"	v
DeviceRegister	src/Device/Driver.hpp	/^struct DeviceRegister {$/;"	s
DeviceSettingsMap	src/Device/SettingsMap.hpp	/^class DeviceSettingsMap {$/;"	c
DialogCatchCallback	src/lua/Dialogs.cpp	/^DialogCatchCallback(Lua::Error &&error)$/;"	f	file:
DialogEventLoop	src/ui/event/windows/Loop.hpp	/^  DialogEventLoop(EventQueue &_loop, HWND _dialog)$/;"	f	class:UI::DialogEventLoop
DialogEventLoop	src/ui/event/windows/Loop.hpp	/^class DialogEventLoop : public EventLoop {$/;"	c	namespace:UI
DialogFont	src/Profile/ProfileKeys.cpp	/^const char DialogFont[] = "DialogFont";$/;"	m	namespace:ProfileKeys	file:
DialogJobRunner	src/Dialogs/JobDialog.hpp	/^  DialogJobRunner(UI::SingleWindow &_parent, const DialogLook &_dialog_look,$/;"	f	class:DialogJobRunner
DialogJobRunner	src/Dialogs/JobDialog.hpp	/^class DialogJobRunner : public JobRunner {$/;"	c
DialogJobThread	src/Dialogs/JobDialog.cpp	/^  DialogJobThread(OperationEnvironment &_env, Job &_job, WndForm &_form)$/;"	f	class:DialogJobThread
DialogJobThread	src/Dialogs/JobDialog.cpp	/^class DialogJobThread : public JobThread {$/;"	c	file:
DialogLook	src/Look/DialogLook.hpp	/^struct DialogLook {$/;"	s
DialogSettings	src/Dialogs/DialogSettings.hpp	/^struct DialogSettings {$/;"	s
DiffFilter	src/Math/DiffFilter.hpp	/^class DiffFilter $/;"	c
DifferentialWindowFilter	src/Math/DifferentialWindowFilter.hpp	/^class DifferentialWindowFilter {$/;"	c
DigitEntry	src/Form/DigitEntry.cpp	/^DigitEntry::DigitEntry(const DialogLook &_look)$/;"	f	class:DigitEntry
Dijkstra	src/Engine/PathSolvers/Dijkstra.hpp	/^class Dijkstra$/;"	c
Dijkstra	src/Engine/PathSolvers/NavDijkstra.hpp	/^  typedef ::Dijkstra<ScanTaskPoint, DijkstraMap> Dijkstra;$/;"	t	class:NavDijkstra
DijkstraMap	src/Engine/PathSolvers/NavDijkstra.hpp	/^  struct DijkstraMap {$/;"	s	class:NavDijkstra
Direction	src/Dialogs/Settings/WindSettingsPanel.hpp	/^    Direction,$/;"	e	enum:final::ControlIndex
Direction	src/Form/GridView.hpp	/^  enum class Direction$/;"	c	class:GridView
Direction	src/Geo/ConvexHull/GrahamScan.cpp	/^Direction(const GeoPoint &p0, const GeoPoint &p1, const GeoPoint &p2,$/;"	f	file:
Direction	src/Renderer/SymbolRenderer.hpp	/^  enum Direction {$/;"	g	namespace:SymbolRenderer
Directory	src/system/FileUtil.hpp	/^namespace Directory$/;"	n
DirtyTaskListPanel	src/Dialogs/Task/Manager/TaskListPanel.cpp	/^DirtyTaskListPanel()$/;"	f
Disable	src/Device/Port/DumpPort.hpp	/^  void Disable() {$/;"	f	class:final
Disable	src/Terrain/RasterTile.hpp	/^  void Disable() {$/;"	f	class:RasterTile
DisableAll	src/Engine/Task/TaskBehaviour.cpp	/^TaskBehaviour::DisableAll()$/;"	f	class:TaskBehaviour
DisableAutoLogger	src/Dialogs/Settings/Panels/LoggerConfigPanel.cpp	/^  DisableAutoLogger,$/;"	e	enum:ControlIndex	file:
DisableAutoLogger	src/Profile/ProfileKeys.cpp	/^const char DisableAutoLogger[] = "DisableAutoLogger";$/;"	m	namespace:ProfileKeys	file:
DisableBulkMode	src/Device/Driver/CAI302/Mode.cpp	/^CAI302Device::DisableBulkMode(OperationEnvironment &env)$/;"	f	class:CAI302Device
DisableClicked	src/Dialogs/Weather/MapOverlayWidget.cpp	/^  void DisableClicked() {$/;"	f	class:final	file:
DisableDump	src/Device/Descriptor.cpp	/^DeviceDescriptor::DisableDump()$/;"	f	class:DeviceDescriptor
DisableGeoid	src/Device/Parser.hpp	/^  void DisableGeoid() {$/;"	f	class:NMEAParser
DisableNetwork	src/Kobo/WPASupplicant.cpp	/^WPASupplicant::DisableNetwork(unsigned id)$/;"	f	class:WPASupplicant
DisablePan	src/Pan.cpp	/^DisablePan()$/;"	f
DisallowLanguage	src/Language/Language.cpp	/^DisallowLanguage()$/;"	f
DisallowLanguage	src/Language/Language.hpp	/^static inline void DisallowLanguage() {}$/;"	f
DisassociatePointer	src/lua/Associate.cpp	/^Lua::DisassociatePointer(lua_State *L, const char *table, void *p)$/;"	f	class:Lua
Disconnect	src/Device/Driver/IMI/Internal.cpp	/^IMIDevice::Disconnect(OperationEnvironment &env)$/;"	f	class:IMIDevice
Disconnect	src/Device/Driver/IMI/Protocol/Protocol.cpp	/^IMI::Disconnect(Port &port, OperationEnvironment &env)$/;"	f	class:IMI
Dispatch	src/ui/event/android/Loop.cpp	/^EventLoop::Dispatch(const Event &event)$/;"	f	class:UI::EventLoop
Dispatch	src/ui/event/poll/Loop.cpp	/^EventLoop::Dispatch(const Event &event)$/;"	f	class:UI::EventLoop
Dispatch	src/ui/event/sdl/Loop.cpp	/^EventLoop::Dispatch(const Event &_event)$/;"	f	class:UI::EventLoop
Dispatch	src/ui/event/windows/Loop.cpp	/^DialogEventLoop::Dispatch(Event &event)$/;"	f	class:UI::DialogEventLoop
Dispatch	src/ui/event/windows/Loop.cpp	/^EventLoop::Dispatch(const Event &event)$/;"	f	class:UI::EventLoop
Display	src/Hardware/DisplayDPI.cpp	38;"	d	file:
Display	src/Hardware/DisplayDPI.cpp	42;"	d	file:
Display	src/Hardware/DisplayDPI.hpp	/^namespace Display {$/;"	n
Display	src/Hardware/DisplayGlue.hpp	/^namespace Display$/;"	n
Display	src/Hardware/DisplaySize.cpp	35;"	d	file:
Display	src/Hardware/DisplaySize.cpp	39;"	d	file:
Display	src/Hardware/DisplaySize.hpp	/^namespace Display {$/;"	n
Display	src/ui/canvas/custom/TopCanvas.hpp	57;"	d
Display	src/ui/canvas/custom/TopCanvas.hpp	61;"	d
Display	src/ui/canvas/opengl/Function.hpp	37;"	d
Display	src/ui/canvas/opengl/Function.hpp	43;"	d
Display	src/ui/egl/System.hpp	35;"	d
Display	src/ui/egl/System.hpp	47;"	d
Display	src/ui/event/poll/X11Queue.cpp	32;"	d	file:
Display	src/ui/event/poll/X11Queue.cpp	39;"	d	file:
Display	src/ui/event/poll/X11Queue.hpp	33;"	d
Display	src/ui/event/poll/X11Queue.hpp	39;"	d
Display	src/ui/glx/System.hpp	30;"	d
Display	src/ui/glx/System.hpp	36;"	d
Display	src/ui/window/TopWindow.hpp	63;"	d
Display	src/ui/window/TopWindow.hpp	71;"	d
DisplayGroundTrack	src/MapSettings.hpp	/^enum class DisplayGroundTrack: uint8_t {$/;"	c
DisplayInfoBox	src/InfoBoxes/InfoBoxManager.cpp	/^InfoBoxManager::DisplayInfoBox()$/;"	f	class:InfoBoxManager
DisplayMode	src/DisplayMode.hpp	/^enum class DisplayMode: uint8_t {$/;"	c
DisplayOrientation	src/DisplayOrientation.hpp	/^enum class DisplayOrientation : uint8_t {$/;"	c
DisplayOrientation	src/Hardware/RotateDisplay.hpp	/^enum class DisplayOrientation : uint8_t;$/;"	c
DisplayOrientation	src/ui/canvas/custom/TopCanvas.hpp	/^enum class DisplayOrientation : uint8_t;$/;"	c
DisplayOrientation	src/ui/canvas/opengl/BufferCanvas.hpp	/^enum class DisplayOrientation : uint8_t;$/;"	c
DisplayOrientation	src/ui/canvas/opengl/Globals.hpp	/^enum class DisplayOrientation : uint8_t;$/;"	c
DisplayOrientation	src/ui/canvas/opengl/Init.hpp	/^enum class DisplayOrientation : uint8_t;$/;"	c
DisplayOrientation	src/ui/event/poll/InputQueue.hpp	/^enum class DisplayOrientation : uint8_t;$/;"	c
DisplayOrientation	src/ui/event/poll/Queue.hpp	/^enum class DisplayOrientation : uint8_t;$/;"	c
DisplaySettings	src/DisplaySettings.hpp	/^struct DisplaySettings {$/;"	s
DisplaySkyLinesTrafficMapMode	src/MapSettings.hpp	/^enum class DisplaySkyLinesTrafficMapMode: uint8_t {$/;"	c
DisplayText	src/Profile/ProfileKeys.cpp	/^const char DisplayText[] = "DisplayText";$/;"	m	namespace:ProfileKeys	file:
DisplayTextType	src/Renderer/WaypointRendererSettings.hpp	/^  enum class DisplayTextType : uint8_t {$/;"	c	struct:WaypointRendererSettings
DisplayTrackBearing	src/Profile/ProfileKeys.cpp	/^const char DisplayTrackBearing[] = "DisplayTrackBearing";$/;"	m	namespace:ProfileKeys	file:
DisplayUpValue	src/Profile/ProfileKeys.cpp	/^const char DisplayUpValue[] = "DisplayUp";$/;"	m	namespace:ProfileKeys	file:
Disposer	src/Engine/Trace/Trace.hpp	/^  struct Disposer {$/;"	s	class:Trace
Distance	src/Dialogs/StatusPanels/FlightStatusPanel.cpp	/^  Distance,$/;"	e	enum:Controls	file:
Distance	src/Engine/Task/Points/TaskPoint.hpp	/^  double Distance(const GeoPoint &ref) const {$/;"	f	class:TaskPoint
Distance	src/Geo/Flat/FlatBoundingBox.cpp	/^FlatBoundingBox::Distance(const FlatBoundingBox &f) const$/;"	f	class:FlatBoundingBox
Distance	src/Geo/Flat/FlatGeoPoint.cpp	/^FlatGeoPoint::Distance(const FlatGeoPoint &sp) const$/;"	f	class:FlatGeoPoint
Distance	src/Geo/Flat/FlatPoint.hpp	/^  double Distance(FlatPoint p) const {$/;"	f	struct:FlatPoint
Distance	src/Geo/GeoPoint.cpp	/^GeoPoint::Distance(const GeoPoint &other) const$/;"	f	class:GeoPoint
Distance	src/Geo/Memento/DistanceMemento.cpp	/^DistanceMemento::Distance(const GeoPoint& _origin,$/;"	f	class:DistanceMemento
Distance1D	src/Geo/Flat/FlatBoundingBox.cpp	/^Distance1D(int a1, int a2, int b1, int b2)$/;"	f	file:
DistanceBearing	src/Geo/GeoPoint.cpp	/^GeoPoint::DistanceBearing(const GeoPoint &other) const$/;"	f	class:GeoPoint
DistanceBearingS	src/Geo/GeoPoint.cpp	/^GeoPoint::DistanceBearingS(const GeoPoint &other) const$/;"	f	class:GeoPoint
DistanceIsSignificant	src/Engine/Task/Ordered/OrderedTask.cpp	/^DistanceIsSignificant(const SearchPoint &a1, const SearchPoint &a2,$/;"	f	file:
DistanceIsSignificant	src/Engine/Task/Ordered/OrderedTask.cpp	/^OrderedTask::DistanceIsSignificant(const GeoPoint &location,$/;"	f	class:OrderedTask
DistanceMemento	src/Geo/Memento/DistanceMemento.hpp	/^  DistanceMemento(): value(-1.0) {}$/;"	f	class:DistanceMemento
DistanceMemento	src/Geo/Memento/DistanceMemento.hpp	/^class DistanceMemento$/;"	c
DistanceMetric	src/Engine/Trace/Trace.hpp	/^    static unsigned DistanceMetric(const TracePoint &last,$/;"	f	struct:Trace::TraceDelta
DistancePixelsCoarse	src/Terrain/RasterProjection.hpp	/^  gcc_pure unsigned DistancePixelsCoarse(double distance) const {$/;"	f	class:RasterProjection
DistancePixelsFine	src/Terrain/RasterProjection.cpp	/^RasterProjection::DistancePixelsFine(double distance) const$/;"	f	class:RasterProjection
DistanceS	src/Geo/GeoPoint.cpp	/^GeoPoint::DistanceS(const GeoPoint &other) const$/;"	f	class:GeoPoint
DistanceSquared	src/Geo/Flat/FlatGeoPoint.cpp	/^FlatGeoPoint::DistanceSquared(const FlatGeoPoint &sp) const$/;"	f	class:FlatGeoPoint
DistanceStat	src/Engine/Task/Stats/DistanceStat.hpp	/^class DistanceStat$/;"	c
DistanceStatComputer	src/Engine/Task/Computer/DistanceStatComputer.hpp	/^  DistanceStatComputer(const bool is_positive=true)$/;"	f	class:DistanceStatComputer
DistanceStatComputer	src/Engine/Task/Computer/DistanceStatComputer.hpp	/^class DistanceStatComputer {$/;"	c
DistanceTo	src/Engine/Task/ObservationZones/ObservationZonePoint.hpp	/^  double DistanceTo(const GeoPoint &ref) const {$/;"	f	class:ObservationZonePoint
DistanceTo	src/Geo/SearchPoint.hpp	/^  double DistanceTo(const GeoPoint &ref) const {$/;"	f	class:SearchPoint
DistanceUnit	src/Dialogs/Device/CAI302/UnitsEditor.hpp	/^    DistanceUnit,$/;"	e	enum:final::Controls
DistanceUnitsValue	src/Profile/ProfileKeys.cpp	/^const char DistanceUnitsValue[] = "DistanceUnit";$/;"	m	namespace:ProfileKeys	file:
DistinctIntersection	src/Geo/Flat/FlatRay.cpp	/^FlatRay::DistinctIntersection(const FlatRay& that) const$/;"	f	class:FlatRay
Dither	src/ui/canvas/memory/Dither.hpp	/^class Dither {$/;"	c
DitherGreyscale	src/ui/canvas/memory/Dither.cpp	/^Dither::DitherGreyscale(const uint8_t *gcc_restrict src,$/;"	f	class:Dither
Divert	src/Engine/Task/Unordered/AlternateTask.hpp	/^  struct Divert : public AlternatePoint {$/;"	s	class:final
DoAbsolute	src/ui/event/shared/RotatePointer.hpp	/^  PixelPoint DoAbsolute(PixelPoint p) const {$/;"	f	class:UI::RotatePointer
DoAdvance	src/Replay/TaskAutoPilot.cpp	/^TaskAutoPilot::DoAdvance(TaskAccessor& task)$/;"	f	class:TaskAutoPilot
DoBackspace	src/Dialogs/TouchTextEntry.cpp	/^DoBackspace()$/;"	f	file:
DoCharacter	src/Dialogs/TouchTextEntry.cpp	/^DoCharacter(TCHAR character)$/;"	f	file:
DoDeclare	src/Device/Descriptor.cpp	/^DoDeclare(const struct Declaration &declaration,$/;"	f	file:
DoDeviceDeclare	src/Logger/ExternalLogger.cpp	/^DoDeviceDeclare(DeviceDescriptor &device, const Declaration &declaration,$/;"	f	file:
DoDownloadFlight	src/Logger/ExternalLogger.cpp	/^DoDownloadFlight(DeviceDescriptor &device,$/;"	f	file:
DoGoto	src/Engine/Task/TaskManager.cpp	/^TaskManager::DoGoto(WaypointPtr &&wp)$/;"	f	class:TaskManager
DoGoto	src/Engine/Task/Unordered/GotoTask.cpp	/^GotoTask::DoGoto(WaypointPtr &&wp)$/;"	f	class:GotoTask
DoGoto	src/Task/ProtectedTaskManager.cpp	/^ProtectedTaskManager::DoGoto(WaypointPtr &&wp)$/;"	f	class:ProtectedTaskManager
DoGoto	src/Task/ProtectedTaskManager.hpp	/^  bool DoGoto(const WaypointPtr &wp) {$/;"	f	class:ProtectedTaskManager
DoLogging	src/Computer/StatsComputer.cpp	/^StatsComputer::DoLogging(const MoreData &basic,$/;"	f	class:StatsComputer
DoQueuedEvents	src/Input/InputQueue.cpp	/^InputEvents::DoQueuedEvents()$/;"	f	class:InputEvents
DoReadFlightList	src/Logger/ExternalLogger.cpp	/^DoReadFlightList(DeviceDescriptor &device, RecordedFlightList &flight_list)$/;"	f	file:
DoRelative	src/ui/event/shared/RotatePointer.hpp	/^  PixelPoint DoRelative(PixelPoint p) const {$/;"	f	class:UI::RotatePointer
DoesRequireArm	src/Engine/Task/Ordered/Points/StartPoint.hpp	/^  bool DoesRequireArm() const {$/;"	f	class:final
DollarExpand	src/util/DollarExpand.hpp	/^DollarExpand(const TCHAR *src, TCHAR *dest, size_t dest_size,$/;"	f
Donate	src/system/Path.hpp	/^  static AllocatedPath Donate(pointer value) {$/;"	f	class:AllocatedPath
Donate	src/util/LightString.hxx	/^		allocation(BasicAllocatedString<T>::Donate(_allocation)) {}$/;"	f	class:LightString
DotProduct	src/Geo/Flat/FlatGeoPoint.hpp	/^  constexpr int DotProduct(FlatGeoPoint other) const {$/;"	f	struct:FlatGeoPoint
DotProduct	src/Geo/Flat/FlatPoint.hpp	/^  constexpr double DotProduct(FlatPoint other) const {$/;"	f	struct:FlatPoint
DotProduct	src/Math/Line2D.hpp	/^  constexpr product_type DotProduct(Line2D<P> other) const {$/;"	f	struct:Line2D
DoubleBufferWindow	src/ui/window/DoubleBufferWindow.hpp	/^class DoubleBufferWindow : public PaintWindow {$/;"	c
DoubleClick	src/ui/window/custom/DoubleClick.hpp	/^class DoubleClick {$/;"	c
DoubleLegDistance	src/Engine/Task/Ordered/Points/OrderedTaskPoint.cpp	/^OrderedTaskPoint::DoubleLegDistance(const GeoPoint &ref) const$/;"	f	class:OrderedTaskPoint
DoublePoint2D	src/Math/Point2D.hpp	/^struct DoublePoint2D : Point2D<double> {$/;"	s	struct:UnsignedPoint2D
Download	src/Dialogs/DownloadFilePicker.cpp	/^DownloadFilePickerWidget::Download()$/;"	f	class:DownloadFilePickerWidget
Download	src/Dialogs/FileManager.cpp	/^ManagedFileListWidget::Download()$/;"	f	class:ManagedFileListWidget
DownloadCommand	src/Device/Driver/CAI302/Protocol.cpp	/^CAI302::DownloadCommand(Port &port, const char *command,$/;"	f	class:CAI302
DownloadFile	src/Dialogs/DownloadFilePicker.cpp	/^DownloadFile(const char *uri, const char *_base)$/;"	f	file:
DownloadFilePicker	src/Dialogs/DownloadFilePicker.cpp	/^DownloadFilePicker(FileType file_type)$/;"	f
DownloadFilePickerWidget	src/Dialogs/DownloadFilePicker.cpp	/^  DownloadFilePickerWidget(WidgetDialog &_dialog, FileType _file_type)$/;"	f	class:final
DownloadFlight	src/Device/Descriptor.cpp	/^DeviceDescriptor::DownloadFlight(const RecordedFlightInfo &flight,$/;"	f	class:DeviceDescriptor
DownloadFlight	src/Device/Driver.cpp	/^AbstractDevice::DownloadFlight(const RecordedFlightInfo &flight,$/;"	f	class:AbstractDevice
DownloadFlight	src/Device/Driver/CAI302/Logger.cpp	/^CAI302Device::DownloadFlight(const RecordedFlightInfo &flight,$/;"	f	class:CAI302Device
DownloadFlight	src/Device/Driver/FLARM/Logger.cpp	/^FlarmDevice::DownloadFlight(Path path, OperationEnvironment &env)$/;"	f	class:FlarmDevice
DownloadFlight	src/Device/Driver/FLARM/Logger.cpp	/^FlarmDevice::DownloadFlight(const RecordedFlightInfo &flight,$/;"	f	class:FlarmDevice
DownloadFlight	src/Device/Driver/Flytec/Logger.cpp	/^FlytecDevice::DownloadFlight(const RecordedFlightInfo &flight,$/;"	f	class:FlytecDevice
DownloadFlight	src/Device/Driver/IMI/Logger.cpp	/^IMIDevice::DownloadFlight(const RecordedFlightInfo &flight, Path path,$/;"	f	class:IMIDevice
DownloadFlight	src/Device/Driver/LX/Logger.cpp	/^LXDevice::DownloadFlight(const RecordedFlightInfo &flight,$/;"	f	class:LXDevice
DownloadFlight	src/Device/Driver/LX/NanoLogger.cpp	/^Nano::DownloadFlight(Port &port, const RecordedFlightInfo &flight,$/;"	f	class:Nano
DownloadFlight	src/Device/Driver/Volkslogger/Logger.cpp	/^VolksloggerDevice::DownloadFlight(const RecordedFlightInfo &flight,$/;"	f	class:VolksloggerDevice
DownloadFlightFrom	src/Logger/ExternalLogger.cpp	/^ExternalLogger::DownloadFlightFrom(DeviceDescriptor &device)$/;"	f	class:ExternalLogger
DownloadFlightFromCurrent	src/Dialogs/Device/DeviceListDialog.cpp	/^DeviceListWidget::DownloadFlightFromCurrent()$/;"	f	class:DeviceListWidget
DownloadFlightInner	src/Device/Driver/CAI302/Logger.cpp	/^DownloadFlightInner(Port &port, const RecordedFlightInfo &flight,$/;"	f	file:
DownloadFlightInner	src/Device/Driver/LX/Logger.cpp	/^DownloadFlightInner(Port &port, const RecordedFlightInfo &flight,$/;"	f	file:
DownloadFlightInner	src/Device/Driver/LX/NanoLogger.cpp	/^DownloadFlightInner(Port &port, const char *filename, BufferedOutputStream &os,$/;"	f	file:
DownloadFlightInner	src/Device/Driver/Volkslogger/Logger.cpp	/^DownloadFlightInner(Port &port, unsigned bulkrate,$/;"	f	file:
DownloadFlightJob	src/Logger/ExternalLogger.cpp	/^  DownloadFlightJob(DeviceDescriptor &_device,$/;"	f	class:DownloadFlightJob
DownloadFlightJob	src/Logger/ExternalLogger.cpp	/^class DownloadFlightJob {$/;"	c	file:
DownloadLatestImage	src/Weather/PCMet/Images.cpp	/^PCMet::DownloadLatestImage(const char *type, const char *area,$/;"	f	class:PCMet
DownloadListener	src/net/http/DownloadManager.hpp	/^class DownloadListener {$/;"	c	namespace:Net
DownloadMETAR	src/Weather/NOAADownloader.cpp	/^NOAADownloader::DownloadMETAR(const char *code, METAR &metar,$/;"	f	class:NOAADownloader
DownloadManager	src/net/http/DownloadManager.hpp	/^namespace Net::DownloadManager {$/;"	n	class:Net
DownloadMode	src/Device/Driver/CAI302/Mode.cpp	/^CAI302Device::DownloadMode(OperationEnvironment &env)$/;"	f	class:CAI302Device
DownloadMode	src/Device/Driver/CAI302/Protocol.cpp	/^CAI302::DownloadMode(Port &port, OperationEnvironment &env)$/;"	f	class:CAI302
DownloadNavpoint	src/Device/Driver/CAI302/Protocol.cpp	/^CAI302::DownloadNavpoint(Port &port, const GeoPoint &location,$/;"	f	class:CAI302
DownloadOverlay	src/Weather/PCMet/Overlays.cpp	/^PCMet::DownloadOverlay(const OverlayInfo &info, BrokenDateTime now_utc,$/;"	f	class:PCMet
DownloadPilot	src/Device/Driver/CAI302/Protocol.cpp	/^CAI302::DownloadPilot(Port &port, const Pilot &pilot, unsigned ordinal,$/;"	f	class:CAI302
DownloadPolar	src/Device/Driver/CAI302/Protocol.cpp	/^CAI302::DownloadPolar(Port &port, const Polar &polar,$/;"	f	class:CAI302
DownloadProgress	src/Dialogs/DownloadFilePicker.cpp	/^  DownloadProgress(ProgressDialog &_dialog,$/;"	f	class:final
DownloadStatus	src/Dialogs/FileManager.cpp	/^  struct DownloadStatus {$/;"	s	class:ManagedFileListWidget	file:
DownloadTAF	src/Weather/NOAADownloader.cpp	/^NOAADownloader::DownloadTAF(const char *code, TAF &taf,$/;"	f	class:NOAADownloader
DownloadToBuffer	src/net/http/ToBuffer.cpp	/^Net::DownloadToBuffer(CurlGlobal &curl, const char *url,$/;"	f	class:Net
DownloadToBuffer	src/net/http/ToBuffer.hpp	/^DownloadToBuffer(CurlGlobal &curl, const char *url,$/;"	f	namespace:Net
DownloadToBufferHandler	src/net/http/ToBuffer.cpp	/^  DownloadToBufferHandler(void *_buffer, size_t _max_size,$/;"	f	class:final
DownloadToBufferJob	src/net/http/ToBuffer.hpp	/^  DownloadToBufferJob(CurlGlobal &_curl, const char *_url,$/;"	f	class:Net::DownloadToBufferJob
DownloadToBufferJob	src/net/http/ToBuffer.hpp	/^class DownloadToBufferJob : public Job {$/;"	c	namespace:Net
DownloadToFile	src/net/http/ToFile.cpp	/^DownloadToFile(CurlGlobal &curl, const char *url,$/;"	f	file:
DownloadToFile	src/net/http/ToFile.cpp	/^Net::DownloadToFile(CurlGlobal &curl, const char *url,$/;"	f	class:Net
DownloadToFile	src/net/http/ToFile.hpp	/^DownloadToFile(CurlGlobal &curl, const char *url,$/;"	f	namespace:Net
DownloadToFileJob	src/net/http/ToFile.hpp	/^  DownloadToFileJob(CurlGlobal &_curl, const char *_url, Path _path)$/;"	f	class:Net::DownloadToFileJob
DownloadToFileJob	src/net/http/ToFile.hpp	/^class DownloadToFileJob : public Job {$/;"	c	namespace:Net
DownloadToFileTransaction	src/net/http/DownloadManager.cpp	/^DownloadToFileTransaction(CurlGlobal &curl,$/;"	f	file:
DragBegin	src/Form/ScrollBar.cpp	/^ScrollBar::DragBegin(PaintWindow *w, unsigned y)$/;"	f	class:ScrollBar
DragEnd	src/Form/ScrollBar.cpp	/^ScrollBar::DragEnd(PaintWindow *w)$/;"	f	class:ScrollBar
DragEnd	src/Form/TabMenuDisplay.cpp	/^TabMenuDisplay::DragEnd()$/;"	f	class:TabMenuDisplay
DragMode	src/Form/List.hpp	/^  enum class DragMode {$/;"	c	class:ListControl
DragMode	src/MapWindow/GlueMapWindow.hpp	/^  enum DragMode {$/;"	g	class:GlueMapWindow
DragMode	src/MapWindow/TargetMapWindow.hpp	/^  enum DragMode {$/;"	g	class:TargetMapWindow
DragMove	src/Form/ScrollBar.cpp	/^ScrollBar::DragMove(unsigned size, unsigned view_size, int y) const$/;"	f	class:ScrollBar
Drain	src/Device/Port/AndroidPort.cpp	/^AndroidPort::Drain()$/;"	f	class:AndroidPort
Drain	src/Device/Port/DumpPort.cpp	/^DumpPort::Drain()$/;"	f	class:DumpPort
Drain	src/Device/Port/K6BtPort.cpp	/^K6BtPort::Drain()$/;"	f	class:K6BtPort
Drain	src/Device/Port/NullPort.cpp	/^NullPort::Drain()$/;"	f	class:NullPort
Drain	src/Device/Port/SerialPort.cpp	/^SerialPort::Drain()$/;"	f	class:SerialPort
Drain	src/Device/Port/TTYPort.cpp	/^TTYPort::Drain()$/;"	f	class:TTYPort
Draw	src/CrossSection/AirspaceXSRenderer.cpp	/^AirspaceXSRenderer::Draw(Canvas &canvas, const ChartRenderer &chart,$/;"	f	class:AirspaceXSRenderer
Draw	src/CrossSection/TerrainXSRenderer.cpp	/^TerrainXSRenderer::Draw(Canvas &canvas, const ChartRenderer &chart,$/;"	f	class:TerrainXSRenderer
Draw	src/Form/TabDisplay.hpp	/^  void Draw(Canvas &canvas, const DialogLook &look,$/;"	f	class:TabButton
Draw	src/Form/TabMenuDisplay.hpp	/^    void Draw(Canvas &canvas, const DialogLook &look,$/;"	f	struct:final::MainMenuButton
Draw	src/Form/TabMenuDisplay.hpp	/^    void Draw(Canvas &canvas, const DialogLook &look,$/;"	f	struct:final::SubMenuButton
Draw	src/Kobo/PowerOff.cpp	/^Draw(Canvas &canvas)$/;"	f	file:
Draw	src/Renderer/AircraftRenderer.cpp	/^AircraftRenderer::Draw(Canvas &canvas, const MapSettings &settings_map,$/;"	f	class:AircraftRenderer
Draw	src/Renderer/AirspaceLabelRenderer.cpp	/^AirspaceLabelRenderer::Draw(Canvas &canvas,$/;"	f	class:AirspaceLabelRenderer
Draw	src/Renderer/AirspaceListRenderer.cpp	/^AirspaceListRenderer::Draw(Canvas &canvas, const PixelRect rc,$/;"	f	class:AirspaceListRenderer
Draw	src/Renderer/AirspaceListRenderer.cpp	/^Draw(Canvas &canvas, PixelRect rc,$/;"	f	file:
Draw	src/Renderer/AirspacePreviewRenderer.cpp	/^AirspacePreviewRenderer::Draw(Canvas &canvas, const AbstractAirspace &airspace,$/;"	f	class:AirspacePreviewRenderer
Draw	src/Renderer/AirspaceRenderer.cpp	/^AirspaceRenderer::Draw(Canvas &canvas,$/;"	f	class:AirspaceRenderer
Draw	src/Renderer/BackgroundRenderer.cpp	/^BackgroundRenderer::Draw(Canvas& canvas,$/;"	f	class:BackgroundRenderer
Draw	src/Renderer/BestCruiseArrowRenderer.cpp	/^BestCruiseArrowRenderer::Draw(Canvas &canvas, const TaskLook &look,$/;"	f	class:BestCruiseArrowRenderer
Draw	src/Renderer/ClimbPercentRenderer.cpp	/^ClimbPercentRenderer::Draw(const CirclingInfo& stats, Canvas &canvas,$/;"	f	class:ClimbPercentRenderer
Draw	src/Renderer/CompassRenderer.cpp	/^CompassRenderer::Draw(Canvas &canvas, const Angle screen_angle,$/;"	f	class:CompassRenderer
Draw	src/Renderer/FinalGlideBarRenderer.cpp	/^FinalGlideBarRenderer::Draw(Canvas &canvas, const PixelRect &rc,$/;"	f	class:FinalGlideBarRenderer
Draw	src/Renderer/FlightListRenderer.cpp	/^FlightListRenderer::Draw(Canvas &canvas, PixelRect rc)$/;"	f	class:FlightListRenderer
Draw	src/Renderer/HorizonRenderer.cpp	/^HorizonRenderer::Draw(Canvas &canvas, const PixelRect &rc,$/;"	f	class:HorizonRenderer
Draw	src/Renderer/MapItemListRenderer.cpp	/^Draw(Canvas &canvas, PixelRect rc,$/;"	f	file:
Draw	src/Renderer/MapItemListRenderer.cpp	/^Draw(Canvas &canvas, const PixelRect rc,$/;"	f	file:
Draw	src/Renderer/MapItemListRenderer.cpp	/^MapItemListRenderer::Draw(Canvas &canvas, const PixelRect rc,$/;"	f	class:MapItemListRenderer
Draw	src/Renderer/NOAAListRenderer.cpp	/^NOAAListRenderer::Draw(Canvas &canvas, PixelRect rc,$/;"	f	class:NOAAListRenderer
Draw	src/Renderer/NOAAListRenderer.cpp	/^NOAAListRenderer::Draw(Canvas &canvas, const PixelRect rc,$/;"	f	class:NOAAListRenderer
Draw	src/Renderer/OZPreviewRenderer.cpp	/^OZPreviewRenderer::Draw(Canvas &canvas, const ObservationZonePoint &oz,$/;"	f	class:OZPreviewRenderer
Draw	src/Renderer/OZRenderer.cpp	/^OZRenderer::Draw(Canvas &canvas, Layer layer, const Projection &projection,$/;"	f	class:OZRenderer
Draw	src/Renderer/RotatedPolygonRenderer.hpp	/^  void Draw(Canvas &canvas, unsigned start, unsigned n) const {$/;"	f	class:RotatedPolygonRenderer
Draw	src/Renderer/TabRenderer.cpp	/^TabRenderer::Draw(Canvas &canvas, const PixelRect &rc,$/;"	f	class:TabRenderer
Draw	src/Renderer/TaskPointRenderer.cpp	/^TaskPointRenderer::Draw(const TaskPoint &tp, Layer layer)$/;"	f	class:TaskPointRenderer
Draw	src/Renderer/TaskProgressRenderer.cpp	/^TaskProgressRenderer::Draw(const TaskSummary& summary, Canvas &canvas,$/;"	f	class:TaskProgressRenderer
Draw	src/Renderer/TaskRenderer.cpp	/^TaskRenderer::Draw(const AbortTask &task)$/;"	f	class:TaskRenderer
Draw	src/Renderer/TaskRenderer.cpp	/^TaskRenderer::Draw(const GotoTask &task)$/;"	f	class:TaskRenderer
Draw	src/Renderer/TaskRenderer.cpp	/^TaskRenderer::Draw(const OrderedTask &task)$/;"	f	class:TaskRenderer
Draw	src/Renderer/TaskRenderer.cpp	/^TaskRenderer::Draw(const TaskInterface &task)$/;"	f	class:TaskRenderer
Draw	src/Renderer/TextRenderer.cpp	/^TextRenderer::Draw(Canvas &canvas, PixelRect rc,$/;"	f	class:TextRenderer
Draw	src/Renderer/TrackLineRenderer.cpp	/^TrackLineRenderer::Draw(Canvas &canvas, const Angle screen_angle,$/;"	f	class:TrackLineRenderer
Draw	src/Renderer/TrackLineRenderer.cpp	/^TrackLineRenderer::Draw(Canvas &canvas,$/;"	f	class:TrackLineRenderer
Draw	src/Renderer/TrafficRenderer.cpp	/^TrafficRenderer::Draw(Canvas &canvas, const TrafficLook &traffic_look,$/;"	f	class:TrafficRenderer
Draw	src/Renderer/TrailRenderer.cpp	/^TrailRenderer::Draw(Canvas &canvas, const TraceComputer &trace_computer,$/;"	f	class:TrailRenderer
Draw	src/Renderer/TrailRenderer.cpp	/^TrailRenderer::Draw(Canvas &canvas, const WindowProjection &projection)$/;"	f	class:TrailRenderer
Draw	src/Renderer/VarioBarRenderer.cpp	/^VarioBarRenderer::Draw(Canvas &canvas, const PixelRect &rc,$/;"	f	class:VarioBarRenderer
Draw	src/Renderer/WaveRenderer.cpp	/^WaveRenderer::Draw(Canvas &canvas, const WindowProjection &projection,$/;"	f	class:WaveRenderer
Draw	src/Renderer/WaypointIconRenderer.cpp	/^WaypointIconRenderer::Draw(const Waypoint &waypoint, const PixelPoint &point,$/;"	f	class:WaypointIconRenderer
Draw	src/Renderer/WaypointListRenderer.cpp	/^Draw(Canvas &canvas, PixelRect rc,$/;"	f	file:
Draw	src/Renderer/WaypointListRenderer.cpp	/^WaypointListRenderer::Draw(Canvas &canvas, PixelRect rc,$/;"	f	class:WaypointListRenderer
Draw	src/Renderer/WaypointListRenderer.cpp	/^WaypointListRenderer::Draw(Canvas &canvas, const PixelRect rc,$/;"	f	class:WaypointListRenderer
Draw	src/Renderer/WaypointRenderer.cpp	/^  void Draw(Canvas &canvas) {$/;"	f	class:final
Draw	src/Renderer/WindArrowRenderer.cpp	/^WindArrowRenderer::Draw(Canvas &canvas, const Angle screen_angle,$/;"	f	class:WindArrowRenderer
Draw	src/Terrain/RasterRenderer.cpp	/^RasterRenderer::Draw(Canvas &canvas,$/;"	f	class:RasterRenderer
Draw	src/Terrain/TerrainRenderer.hpp	/^  void Draw(Canvas &canvas, const WindowProjection &projection) const {$/;"	f	class:TerrainRenderer
Draw	src/Topography/CachedTopographyRenderer.cpp	/^CachedTopographyRenderer::Draw(Canvas &canvas,$/;"	f	class:CachedTopographyRenderer
Draw	src/Topography/CachedTopographyRenderer.hpp	/^  void Draw(Canvas &canvas, const WindowProjection &projection) {$/;"	f	class:CachedTopographyRenderer
Draw	src/Topography/TopographyRenderer.cpp	/^TopographyRenderer::Draw(Canvas &canvas,$/;"	f	class:TopographyRenderer
Draw	src/Weather/Rasp/RaspRenderer.hpp	/^  void Draw(Canvas &canvas, const WindowProjection &projection) const {$/;"	f	class:RaspRenderer
Draw	src/ui/canvas/Icon.cpp	/^MaskedIcon::Draw(Canvas &canvas, PixelPoint p) const$/;"	f	class:MaskedIcon
Draw	src/ui/canvas/Icon.cpp	/^MaskedIcon::Draw(Canvas &canvas, const PixelRect &rc, bool inverse) const$/;"	f	class:MaskedIcon
DrawAnnulus	src/ui/canvas/gdi/Canvas.cpp	/^Canvas::DrawAnnulus(PixelPoint center,$/;"	f	class:Canvas
DrawAnnulus	src/ui/canvas/memory/Canvas.cpp	/^Canvas::DrawAnnulus(PixelPoint center,$/;"	f	class:Canvas
DrawAnnulus	src/ui/canvas/opengl/Canvas.cpp	/^Canvas::DrawAnnulus(PixelPoint center,$/;"	f	class:Canvas
DrawArc	src/ui/canvas/gdi/Canvas.cpp	/^Canvas::DrawArc(PixelPoint center, unsigned radius,$/;"	f	class:Canvas
DrawArc	src/ui/canvas/memory/Canvas.cpp	/^Canvas::DrawArc(PixelPoint center, unsigned radius,$/;"	f	class:Canvas
DrawArc	src/ui/canvas/opengl/Canvas.cpp	/^Canvas::DrawArc(PixelPoint center, unsigned radius,$/;"	f	class:Canvas
DrawArrow	src/Renderer/NextArrowRenderer.cpp	/^NextArrowRenderer::DrawArrow(Canvas &canvas, const PixelRect &rc,$/;"	f	class:NextArrowRenderer
DrawArrow	src/Renderer/SymbolRenderer.cpp	/^SymbolRenderer::DrawArrow(Canvas &canvas, PixelRect rc, Direction direction)$/;"	f	class:SymbolRenderer
DrawArrow	src/Renderer/WindArrowRenderer.cpp	/^WindArrowRenderer::DrawArrow(Canvas &canvas, PixelPoint pos, Angle angle,$/;"	f	class:WindArrowRenderer
DrawArrow	src/Renderer/WindChartRenderer.cpp	/^DrawArrow(Canvas &canvas, PixelPoint point, const double mag, const Angle angle)$/;"	f	file:
DrawBanner	src/Kobo/PowerOff.cpp	/^DrawBanner(Canvas &canvas, PixelRect &rc)$/;"	f	file:
DrawBearing	src/Renderer/TaskPointRenderer.cpp	/^TaskPointRenderer::DrawBearing(const TaskPoint &tp)$/;"	f	class:TaskPointRenderer
DrawBestCruiseTrack	src/MapWindow/MapWindowSymbols.cpp	/^MapWindow::DrawBestCruiseTrack(Canvas &canvas, const PixelPoint aircraft_pos) const$/;"	f	class:MapWindow
DrawButton	src/Dialogs/Task/Manager/TaskMapButtonRenderer.cpp	/^TaskMapButtonRenderer::DrawButton(Canvas &canvas, const PixelRect &rc,$/;"	f	class:TaskMapButtonRenderer
DrawButton	src/Dialogs/dlgQuickMenu.cpp	/^QuickMenuButtonRenderer::DrawButton(Canvas &canvas, const PixelRect &rc,$/;"	f	class:QuickMenuButtonRenderer
DrawButton	src/Menu/ShowMenuButton.cpp	/^ShowMenuButtonRenderer::DrawButton(Canvas &canvas, const PixelRect &rc,$/;"	f	class:ShowMenuButtonRenderer
DrawButton	src/Renderer/BitmapButtonRenderer.cpp	/^BitmapButtonRenderer::DrawButton(Canvas &canvas, const PixelRect &rc,$/;"	f	class:BitmapButtonRenderer
DrawButton	src/Renderer/ButtonRenderer.cpp	/^ButtonFrameRenderer::DrawButton(Canvas &canvas, PixelRect rc,$/;"	f	class:ButtonFrameRenderer
DrawButton	src/Renderer/ColorButtonRenderer.cpp	/^ColorButtonRenderer::DrawButton(Canvas &canvas, const PixelRect &rc,$/;"	f	class:ColorButtonRenderer
DrawButton	src/Renderer/SymbolButtonRenderer.cpp	/^SymbolButtonRenderer::DrawButton(Canvas &canvas, const PixelRect &rc,$/;"	f	class:SymbolButtonRenderer
DrawButton	src/Renderer/TextButtonRenderer.cpp	/^TextButtonRenderer::DrawButton(Canvas &canvas, const PixelRect &rc,$/;"	f	class:TextButtonRenderer
DrawCaption	src/Renderer/TextButtonRenderer.cpp	/^TextButtonRenderer::DrawCaption(Canvas &canvas, const PixelRect &rc,$/;"	f	class:TextButtonRenderer
DrawCircle	src/Gauge/ThermalAssistantWindow.cpp	/^ThermalAssistantWindow::DrawCircle(Canvas &canvas)$/;"	f	class:ThermalAssistantWindow
DrawCircle	src/MapWindow/StencilMapCanvas.cpp	/^StencilMapCanvas::DrawCircle(const PixelPoint &center, unsigned radius)$/;"	f	class:StencilMapCanvas
DrawCircle	src/ui/canvas/memory/RasterCanvas.hpp	/^  void DrawCircle(int x, int y, unsigned rad, color_type color) {$/;"	f	class:RasterCanvas
DrawCircle	src/ui/canvas/memory/RasterCanvas.hpp	/^  void DrawCircle(int x, int y, unsigned rad, color_type color,$/;"	f	class:RasterCanvas
DrawColumn	src/Renderer/TextRowRenderer.cpp	/^TextRowRenderer::DrawColumn(Canvas &canvas, const PixelRect &rc,$/;"	f	class:TextRowRenderer
DrawCompass	src/MapWindow/MapWindowSymbols.cpp	/^MapWindow::DrawCompass(Canvas &canvas, const PixelRect &rc) const$/;"	f	class:MapWindow
DrawContest	src/MapWindow/MapWindowContest.cpp	/^MapWindow::DrawContest(Canvas &canvas)$/;"	f	class:MapWindow
DrawContestSolution	src/Renderer/FlightStatisticsRenderer.cpp	/^FlightStatisticsRenderer::DrawContestSolution(Canvas &canvas,$/;"	f	class:FlightStatisticsRenderer
DrawContestTriangle	src/Renderer/FlightStatisticsRenderer.cpp	/^FlightStatisticsRenderer::DrawContestTriangle(Canvas &canvas, const Projection &projection,$/;"	f	class:FlightStatisticsRenderer
DrawCrossHairs	src/MapWindow/GlueMapWindowOverlays.cpp	/^GlueMapWindow::DrawCrossHairs(Canvas &canvas) const$/;"	f	class:GlueMapWindow
DrawDetailedAircraft	src/Renderer/AircraftRenderer.cpp	/^DrawDetailedAircraft(Canvas &canvas, bool inverse,$/;"	f	file:
DrawExactLine	src/ui/canvas/gdi/Canvas.hpp	/^  void DrawExactLine(const PixelPoint a, const PixelPoint b) {$/;"	f	class:Canvas
DrawExactLine	src/ui/canvas/gdi/Canvas.hpp	/^  void DrawExactLine(int ax, int ay, int bx, int by) {$/;"	f	class:Canvas
DrawExactLine	src/ui/canvas/memory/Canvas.hpp	/^  void DrawExactLine(const PixelPoint a, const PixelPoint b) {$/;"	f	class:Canvas
DrawFLARMTraffic	src/MapWindow/MapWindowTraffic.cpp	/^MapWindow::DrawFLARMTraffic(Canvas &canvas,$/;"	f	class:MapWindow
DrawFill	src/MapWindow/MapWindowGlideRange.cpp	/^  void DrawFill(Canvas &canvas) const {$/;"	f	struct:ProjectedFans
DrawFill	src/MapWindow/MapWindowGlideRange.cpp	/^  void DrawFill(Canvas &canvas, const BulkPixelPoint *points) const {$/;"	f	struct:ProjectedFan
DrawFill	src/MapWindow/MapWindowGlideRange.cpp	/^  void DrawFill(const BulkPixelPoint *points, unsigned start) const {$/;"	f	struct:ProjectedFan
DrawFill	src/Renderer/AirspaceRendererOther.cpp	/^AirspaceRenderer::DrawFill(Canvas &buffer_canvas, Canvas &stencil_canvas,$/;"	f	class:AirspaceRenderer
DrawFillCached	src/Renderer/AirspaceRendererOther.cpp	/^AirspaceRenderer::DrawFillCached(Canvas &canvas, Canvas &stencil_canvas,$/;"	f	class:AirspaceRenderer
DrawFilledRectangle	src/ui/canvas/gdi/Canvas.hpp	/^  void DrawFilledRectangle(const PixelRect &_rc, const Brush &brush) {$/;"	f	class:Canvas
DrawFilledRectangle	src/ui/canvas/gdi/Canvas.hpp	/^  void DrawFilledRectangle(const PixelRect &_rc, const HWColor color) {$/;"	f	class:Canvas
DrawFilledRectangle	src/ui/canvas/gdi/Canvas.hpp	/^  void DrawFilledRectangle(const PixelRect &rc, const Color color) {$/;"	f	class:Canvas
DrawFinalGlide	src/MapWindow/GlueMapWindowOverlays.cpp	/^GlueMapWindow::DrawFinalGlide(Canvas &canvas, const PixelRect &rc) const$/;"	f	class:GlueMapWindow
DrawFirstRow	src/Renderer/TwoTextRowsRenderer.cpp	/^TwoTextRowsRenderer::DrawFirstRow(Canvas &canvas, const PixelRect &rc,$/;"	f	class:TwoTextRowsRenderer
DrawFlightMode	src/MapWindow/GlueMapWindowOverlays.cpp	/^GlueMapWindow::DrawFlightMode(Canvas &canvas, const PixelRect &rc) const$/;"	f	class:GlueMapWindow
DrawFlights	src/Kobo/PowerOff.cpp	/^DrawFlights(Canvas &canvas, const PixelRect &rc)$/;"	f	file:
DrawFocusRectangle	src/ui/canvas/gdi/Canvas.hpp	/^  void DrawFocusRectangle(const PixelRect &_rc) {$/;"	f	class:Canvas
DrawFocusRectangle	src/ui/canvas/memory/Canvas.hpp	/^  void DrawFocusRectangle(const PixelRect &rc) {$/;"	f	class:Canvas
DrawFocusRectangle	src/ui/canvas/opengl/Canvas.cpp	/^Canvas::DrawFocusRectangle(PixelRect rc)$/;"	f	class:Canvas
DrawFormattedText	src/ui/canvas/gdi/Canvas.hpp	/^  unsigned DrawFormattedText(RECT rc, BasicStringView<TCHAR> text, unsigned format) {$/;"	f	class:Canvas
DrawGLinkTraffic	src/MapWindow/MapWindowTraffic.cpp	/^MapWindow::DrawGLinkTraffic(Canvas &canvas,$/;"	f	class:MapWindow
DrawGPSStatus	src/MapWindow/GlueMapWindowOverlays.cpp	/^GlueMapWindow::DrawGPSStatus(Canvas &canvas, const PixelRect &rc,$/;"	f	class:GlueMapWindow
DrawGeoBitmap	src/Renderer/GeoBitmapRenderer.cpp	/^DrawGeoBitmap(const RawBitmap &bitmap, PixelSize bitmap_size,$/;"	f
DrawGesture	src/MapWindow/GlueMapWindowOverlays.cpp	/^GlueMapWindow::DrawGesture(Canvas &canvas) const$/;"	f	class:GlueMapWindow
DrawGlassBackground	src/Renderer/GlassRenderer.cpp	/^DrawGlassBackground(Canvas &canvas, const PixelRect &rc, Color color)$/;"	f
DrawGlideThroughTerrain	src/MapWindow/MapWindowGlideRange.cpp	/^MapWindow::DrawGlideThroughTerrain(Canvas &canvas) const$/;"	f	class:MapWindow
DrawHLine	src/ui/canvas/memory/Canvas.cpp	/^Canvas::DrawHLine(int x1, int x2, int y, Color color)$/;"	f	class:Canvas
DrawHLine	src/ui/canvas/memory/RasterCanvas.hpp	/^  void DrawHLine(int x1, int x2, int y, color_type c) {$/;"	f	class:RasterCanvas
DrawHLine	src/ui/canvas/memory/RasterCanvas.hpp	/^  void DrawHLine(int x1, int x2, int y, color_type c,$/;"	f	class:RasterCanvas
DrawHLine	src/ui/canvas/opengl/Canvas.cpp	/^Canvas::DrawHLine(int x1, int x2, int y, Color color)$/;"	f	class:Canvas
DrawHangGlider	src/Renderer/AircraftRenderer.cpp	/^DrawHangGlider(Canvas &canvas, const AircraftLook &look,$/;"	f	file:
DrawInfo	src/Gauge/GaugeVario.hpp	/^  struct DrawInfo {$/;"	s	class:GaugeVario
DrawInternal	src/Renderer/AirspaceLabelRenderer.cpp	/^AirspaceLabelRenderer::DrawInternal(Canvas &canvas,$/;"	f	class:AirspaceLabelRenderer
DrawInternal	src/Renderer/AirspaceRendererGL.cpp	/^AirspaceRenderer::DrawInternal(Canvas &canvas,$/;"	f	class:AirspaceRenderer
DrawInternal	src/Renderer/AirspaceRendererOther.cpp	/^AirspaceRenderer::DrawInternal(Canvas &canvas, Canvas &stencil_canvas,$/;"	f	class:AirspaceRenderer
DrawIntersections	src/Renderer/AirspaceRenderer.cpp	/^AirspaceRenderer::DrawIntersections(Canvas &canvas,$/;"	f	class:AirspaceRenderer
DrawIsoline	src/Renderer/TaskPointRenderer.cpp	/^TaskPointRenderer::DrawIsoline(const AATPoint &tp)$/;"	f	class:TaskPointRenderer
DrawKeyhole	src/ui/canvas/gdi/Canvas.cpp	/^Canvas::DrawKeyhole(PixelPoint center,$/;"	f	class:Canvas
DrawKeyhole	src/ui/canvas/memory/Canvas.cpp	/^Canvas::DrawKeyhole(PixelPoint center,$/;"	f	class:Canvas
DrawKeyhole	src/ui/canvas/opengl/Canvas.cpp	/^Canvas::DrawKeyhole(PixelPoint center,$/;"	f	class:Canvas
DrawLabels	src/Topography/CachedTopographyRenderer.hpp	/^  void DrawLabels(Canvas &canvas, const WindowProjection &projection,$/;"	f	class:CachedTopographyRenderer
DrawLabels	src/Topography/TopographyRenderer.cpp	/^TopographyRenderer::DrawLabels(Canvas &canvas,$/;"	f	class:TopographyRenderer
DrawLandable	src/Renderer/WaypointIconRenderer.cpp	/^WaypointIconRenderer::DrawLandable(const Waypoint &waypoint,$/;"	f	class:WaypointIconRenderer
DrawLandableBase	src/Renderer/WaypointIconRenderer.cpp	/^DrawLandableBase(Canvas &canvas, const PixelPoint &pt, bool airport,$/;"	f	file:
DrawLandableRunway	src/Renderer/WaypointIconRenderer.cpp	/^DrawLandableRunway(Canvas &canvas, const PixelPoint &pt,$/;"	f	file:
DrawLine	src/ui/canvas/gdi/Canvas.cpp	/^Canvas::DrawLine(int ax, int ay, int bx, int by)$/;"	f	class:Canvas
DrawLine	src/ui/canvas/gdi/Canvas.hpp	/^  void DrawLine(const PixelPoint a, const PixelPoint b) {$/;"	f	class:Canvas
DrawLine	src/ui/canvas/memory/RasterCanvas.hpp	/^  void DrawLine(int x1, int y1, int x2, int y2, color_type c,$/;"	f	class:RasterCanvas
DrawLineDirect	src/ui/canvas/memory/RasterCanvas.hpp	/^  void DrawLineDirect(const int x1, const int y1, const int x2, const int y2,$/;"	f	class:RasterCanvas
DrawLinePiece	src/ui/canvas/gdi/Canvas.hpp	/^  void DrawLinePiece(const PixelPoint a, const PixelPoint b) {$/;"	f	class:Canvas
DrawLinePiece	src/ui/canvas/memory/Canvas.hpp	/^  void DrawLinePiece(const PixelPoint a, const PixelPoint b) {$/;"	f	class:Canvas
DrawLinePiece	src/ui/canvas/opengl/Canvas.cpp	/^Canvas::DrawLinePiece(const PixelPoint a, const PixelPoint b)$/;"	f	class:Canvas
DrawMapScale	src/MapWindow/GlueMapWindowOverlays.cpp	/^GlueMapWindow::DrawMapScale(Canvas &canvas, const PixelRect &rc,$/;"	f	class:GlueMapWindow
DrawMirroredPolygon	src/Renderer/AircraftRenderer.cpp	/^DrawMirroredPolygon(const BulkPixelPoint *src, unsigned points,$/;"	f	file:
DrawOZBackground	src/Renderer/TaskPointRenderer.cpp	/^TaskPointRenderer::DrawOZBackground(Canvas &canvas, const OrderedTaskPoint &tp,$/;"	f	class:TaskPointRenderer
DrawOZForeground	src/Renderer/TaskPointRenderer.cpp	/^TaskPointRenderer::DrawOZForeground(const OrderedTaskPoint &tp, int offset)$/;"	f	class:TaskPointRenderer
DrawOrdered	src/Renderer/TaskPointRenderer.cpp	/^TaskPointRenderer::DrawOrdered(const OrderedTaskPoint &tp, Layer layer)$/;"	f	class:TaskPointRenderer
DrawOutline	src/MapWindow/MapWindowGlideRange.cpp	/^  void DrawOutline(Canvas &canvas) const {$/;"	f	struct:ProjectedFans
DrawOutline	src/MapWindow/MapWindowGlideRange.cpp	/^  void DrawOutline(Canvas &canvas, const BulkPixelPoint *points) const {$/;"	f	struct:ProjectedFan
DrawOutline	src/MapWindow/MapWindowGlideRange.cpp	/^  void DrawOutline(unsigned start) const {$/;"	f	struct:ProjectedFan
DrawOutline	src/Renderer/AirspaceRendererOther.cpp	/^AirspaceRenderer::DrawOutline(Canvas &canvas,$/;"	f	class:AirspaceRenderer
DrawPanInfo	src/MapWindow/GlueMapWindowOverlays.cpp	/^GlueMapWindow::DrawPanInfo(Canvas &canvas) const$/;"	f	class:GlueMapWindow
DrawParaGlider	src/Renderer/AircraftRenderer.cpp	/^DrawParaGlider(Canvas &canvas, const AircraftLook &look,$/;"	f	file:
DrawPixel	src/ui/canvas/memory/RasterCanvas.hpp	/^  void DrawPixel(int x, int y, color_type c) {$/;"	f	class:RasterCanvas
DrawPixel	src/ui/canvas/memory/RasterCanvas.hpp	/^  void DrawPixel(int x, int y, color_type c, PixelOperations operations) {$/;"	f	class:RasterCanvas
DrawPolygon	src/CrossSection/TerrainXSRenderer.cpp	/^TerrainXSRenderer::DrawPolygon(Canvas &canvas, TerrainType type,$/;"	f	class:TerrainXSRenderer
DrawPolygon	src/ui/canvas/gdi/Canvas.hpp	/^  void DrawPolygon(const BulkPixelPoint *lppt, unsigned cPoints) {$/;"	f	class:Canvas
DrawPolygon	src/ui/canvas/memory/Canvas.cpp	/^Canvas::DrawPolygon(const BulkPixelPoint *lppt, unsigned cPoints)$/;"	f	class:Canvas
DrawPolygon	src/ui/canvas/opengl/Canvas.cpp	/^Canvas::DrawPolygon(const BulkPixelPoint *points, unsigned num_points)$/;"	f	class:Canvas
DrawPolyline	src/ui/canvas/gdi/Canvas.hpp	/^  void DrawPolyline(const BulkPixelPoint *lppt, unsigned cPoints) {$/;"	f	class:Canvas
DrawPolyline	src/ui/canvas/memory/Canvas.cpp	/^Canvas::DrawPolyline(const BulkPixelPoint *p, unsigned cPoints)$/;"	f	class:Canvas
DrawPolyline	src/ui/canvas/memory/Canvas.cpp	/^DrawPolyline(Canvas &canvas, PixelOperations operations, const Pen &pen,$/;"	f	file:
DrawPolyline	src/ui/canvas/memory/RasterCanvas.hpp	/^  void DrawPolyline(const PixelPoint *points, unsigned n, bool loop,$/;"	f	class:RasterCanvas
DrawPolyline	src/ui/canvas/opengl/Canvas.cpp	/^Canvas::DrawPolyline(const BulkPixelPoint *points, unsigned num_points)$/;"	f	class:Canvas
DrawPreparedPolygon	src/Renderer/TrailRenderer.cpp	/^TrailRenderer::DrawPreparedPolygon(Canvas &canvas, unsigned n)$/;"	f	class:TrailRenderer
DrawPreparedPolyline	src/Renderer/TrailRenderer.cpp	/^TrailRenderer::DrawPreparedPolyline(Canvas &canvas, unsigned n)$/;"	f	class:TrailRenderer
DrawProjected	src/Renderer/TrackLineRenderer.cpp	/^TrackLineRenderer::DrawProjected(Canvas &canvas,$/;"	f	class:TrackLineRenderer
DrawRaisedEdge	src/ui/canvas/gdi/Canvas.hpp	/^  void DrawRaisedEdge(PixelRect &_rc) {$/;"	f	class:Canvas
DrawRectangle	src/ui/canvas/memory/RasterCanvas.hpp	/^  void DrawRectangle(int x1, int y1, int x2, int y2, color_type c) {$/;"	f	class:RasterCanvas
DrawRectangle	src/ui/canvas/memory/RasterCanvas.hpp	/^  void DrawRectangle(int x1, int y1, int x2, int y2, color_type c,$/;"	f	class:RasterCanvas
DrawRightColumn	src/Renderer/TextRowRenderer.cpp	/^TextRowRenderer::DrawRightColumn(Canvas &canvas, const PixelRect &rc,$/;"	f	class:TextRowRenderer
DrawRightFirstRow	src/Renderer/TwoTextRowsRenderer.cpp	/^TwoTextRowsRenderer::DrawRightFirstRow(Canvas &canvas, const PixelRect &rc,$/;"	f	class:TwoTextRowsRenderer
DrawRightSecondRow	src/Renderer/TwoTextRowsRenderer.cpp	/^TwoTextRowsRenderer::DrawRightSecondRow(Canvas &canvas, const PixelRect &rc,$/;"	f	class:TwoTextRowsRenderer
DrawRiskMC	src/Renderer/ThermalBandRenderer.cpp	/^ThermalBandRenderer::DrawRiskMC(const DerivedInfo& calculated,$/;"	f	class:ThermalBandRenderer
DrawRoute	src/MapWindow/MapWindowTask.cpp	/^MapWindow::DrawRoute(Canvas &canvas)$/;"	f	class:MapWindow
DrawSearchPointVector	src/MapWindow/StencilMapCanvas.cpp	/^StencilMapCanvas::DrawSearchPointVector(const SearchPointVector &points)$/;"	f	class:StencilMapCanvas
DrawSecondRow	src/Renderer/TwoTextRowsRenderer.cpp	/^TwoTextRowsRenderer::DrawSecondRow(Canvas &canvas, const PixelRect &rc,$/;"	f	class:TwoTextRowsRenderer
DrawSegment	src/ui/canvas/gdi/Canvas.cpp	/^Canvas::DrawSegment(PixelPoint center, unsigned radius,$/;"	f	class:Canvas
DrawSegment	src/ui/canvas/memory/Canvas.cpp	/^Canvas::DrawSegment(PixelPoint center, unsigned radius,$/;"	f	class:Canvas
DrawSegment	src/ui/canvas/opengl/Canvas.cpp	/^Canvas::DrawSegment(PixelPoint center, unsigned radius,$/;"	f	class:Canvas
DrawShape	src/Renderer/AirspacePreviewRenderer.cpp	/^DrawShape(Canvas &canvas, AbstractAirspace::Shape shape, const PixelPoint pt,$/;"	f	file:
DrawSign	src/Renderer/SymbolRenderer.cpp	/^SymbolRenderer::DrawSign(Canvas &canvas, PixelRect rc, bool plus)$/;"	f	class:SymbolRenderer
DrawSimpleAircraft	src/Renderer/AircraftRenderer.cpp	/^DrawSimpleAircraft(Canvas &canvas, const AircraftLook &look,$/;"	f	file:
DrawSkyLinesTraffic	src/MapWindow/MapWindowTraffic.cpp	/^MapWindow::DrawSkyLinesTraffic(Canvas &canvas) const$/;"	f	class:MapWindow
DrawStallRatio	src/MapWindow/GlueMapWindowOverlays.cpp	/^GlueMapWindow::DrawStallRatio(Canvas &canvas, const PixelRect &rc) const$/;"	f	class:GlueMapWindow
DrawSymbol	src/Renderer/SymbolButtonRenderer.cpp	/^SymbolButtonRenderer::DrawSymbol(Canvas &canvas, PixelRect rc, bool enabled,$/;"	f	class:SymbolButtonRenderer
DrawSymbol	src/Renderer/WaypointRenderer.cpp	/^  void DrawSymbol(const struct WaypointRendererSettings &settings,$/;"	f	struct:VisibleWaypoint
DrawTarget	src/Renderer/TaskPointRenderer.cpp	/^TaskPointRenderer::DrawTarget(const TaskPoint &tp)$/;"	f	class:TaskPointRenderer
DrawTask	src/Dialogs/Task/Manager/TaskMapButtonRenderer.cpp	/^DrawTask(Canvas &canvas, const PixelRect rc,$/;"	f	file:
DrawTask	src/MapWindow/MapWindowTask.cpp	/^MapWindow::DrawTask(Canvas &canvas)$/;"	f	class:MapWindow
DrawTask	src/MapWindow/TargetMapWindow.cpp	/^TargetMapWindow::DrawTask(Canvas &canvas)$/;"	f	class:TargetMapWindow
DrawTaskLine	src/Renderer/TaskPointRenderer.cpp	/^TaskPointRenderer::DrawTaskLine(const GeoPoint &start, const GeoPoint &end)$/;"	f	class:TaskPointRenderer
DrawTaskOffTrackIndicator	src/MapWindow/MapWindowTask.cpp	/^MapWindow::DrawTaskOffTrackIndicator(Canvas &canvas)$/;"	f	class:MapWindow
DrawTeammate	src/MapWindow/MapWindowTraffic.cpp	/^MapWindow::DrawTeammate(Canvas &canvas) const$/;"	f	class:MapWindow
DrawTerrain	src/Profile/ProfileKeys.cpp	/^const char DrawTerrain[] = "DrawTerrain";$/;"	m	namespace:ProfileKeys	file:
DrawTerrainAbove	src/MapWindow/MapWindowGlideRange.cpp	/^MapWindow::DrawTerrainAbove(Canvas &canvas)$/;"	f	class:MapWindow
DrawTextRow	src/Renderer/TextRowRenderer.cpp	/^TextRowRenderer::DrawTextRow(Canvas &canvas, const PixelRect &rc,$/;"	f	class:TextRowRenderer
DrawThermalBand	src/MapWindow/GlueMapWindowOverlays.cpp	/^GlueMapWindow::DrawThermalBand(Canvas &canvas, const PixelRect &rc) const$/;"	f	class:GlueMapWindow
DrawThermalBand	src/Renderer/ThermalBandRenderer.cpp	/^ThermalBandRenderer::DrawThermalBand(const MoreData &basic,$/;"	f	class:ThermalBandRenderer
DrawThermalBandSpark	src/Renderer/ThermalBandRenderer.cpp	/^ThermalBandRenderer::DrawThermalBandSpark(const MoreData &basic,$/;"	f	class:ThermalBandRenderer
DrawThermalEstimate	src/MapWindow/GlueMapWindowOverlays.cpp	/^GlueMapWindow::DrawThermalEstimate(Canvas &canvas) const$/;"	f	class:GlueMapWindow
DrawThermalEstimate	src/MapWindow/MapWindowThermal.cpp	/^MapWindow::DrawThermalEstimate(Canvas &canvas) const$/;"	f	class:MapWindow
DrawThermalProfile	src/Renderer/ThermalBandRenderer.cpp	/^ThermalBandRenderer::DrawThermalProfile(const ThermalBand &thermal_band,$/;"	f	class:ThermalBandRenderer
DrawThermalSources	src/MapWindow/MapWindowThermal.cpp	/^DrawThermalSources(Canvas &canvas, const MaskedIcon &icon,$/;"	f	file:
DrawThickLine	src/ui/canvas/memory/RasterCanvas.hpp	/^  void DrawThickLine(int x1, int y1, int x2, int y2,$/;"	f	class:RasterCanvas
DrawThread	src/DrawThread.hpp	/^  DrawThread(GlueMapWindow &_map)$/;"	f	class:final
DrawTopography	src/Profile/ProfileKeys.cpp	/^const char DrawTopography[] = "DrawTopology";$/;"	m	namespace:ProfileKeys	file:
DrawTraceVector	src/Renderer/TrailRenderer.cpp	/^TrailRenderer::DrawTraceVector(Canvas &canvas, const Projection &projection,$/;"	f	class:TrailRenderer
DrawTrackBearing	src/MapWindow/MapWindowSymbols.cpp	/^MapWindow::DrawTrackBearing(Canvas &canvas, const PixelPoint aircraft_pos, bool circling) const$/;"	f	class:MapWindow
DrawTrail	src/MapWindow/MapWindowTrail.cpp	/^MapWindow::DrawTrail(Canvas &canvas, const PixelPoint aircraft_pos,$/;"	f	class:MapWindow
DrawTriangle	src/Renderer/TrailRenderer.cpp	/^TrailRenderer::DrawTriangle(Canvas &canvas, const Projection &projection,$/;"	f	class:TrailRenderer
DrawTriangleFan	src/ui/canvas/gdi/Canvas.hpp	/^  void DrawTriangleFan(const BulkPixelPoint *points, unsigned num_points) {$/;"	f	class:Canvas
DrawTriangleFan	src/ui/canvas/memory/Canvas.hpp	/^  void DrawTriangleFan(const BulkPixelPoint *points, unsigned num_points) {$/;"	f	class:Canvas
DrawTriangleFan	src/ui/canvas/opengl/Canvas.cpp	/^Canvas::DrawTriangleFan(const BulkPixelPoint *points, unsigned num_points)$/;"	f	class:Canvas
DrawTwoLines	src/ui/canvas/gdi/Canvas.cpp	/^Canvas::DrawTwoLines(int ax, int ay, int bx, int by, int cx, int cy)$/;"	f	class:Canvas
DrawTwoLines	src/ui/canvas/gdi/Canvas.hpp	/^  void DrawTwoLines(const PixelPoint a, const PixelPoint b,$/;"	f	class:Canvas
DrawVLine	src/ui/canvas/memory/RasterCanvas.hpp	/^  void DrawVLine(int x, int y1, int y2, color_type c,$/;"	f	class:RasterCanvas
DrawVario	src/MapWindow/GlueMapWindowOverlays.cpp	/^GlueMapWindow::DrawVario(Canvas &canvas, const PixelRect &rc) const$/;"	f	class:GlueMapWindow
DrawVerticalGradient	src/Renderer/GradientRenderer.cpp	/^DrawVerticalGradient(Canvas &canvas, const PixelRect &rc,$/;"	f
DrawWaves	src/MapWindow/MapWindowRender.cpp	/^MapWindow::DrawWaves(Canvas &canvas)$/;"	f	class:MapWindow
DrawWaypoint	src/Renderer/WaypointRenderer.cpp	/^  void DrawWaypoint(Canvas &canvas, const VisibleWaypoint &vwp) {$/;"	f	class:final
DrawWaypoints	src/MapWindow/MapWindowWaypoints.cpp	/^MapWindow::DrawWaypoints(Canvas &canvas)$/;"	f	class:MapWindow
DrawWaypoints	src/MapWindow/TargetMapWindow.cpp	/^TargetMapWindow::DrawWaypoints(Canvas &canvas)$/;"	f	class:TargetMapWindow
DrawWind	src/MapWindow/MapWindowSymbols.cpp	/^MapWindow::DrawWind(Canvas &canvas, const PixelPoint &Start,$/;"	f	class:MapWindow
DrawWorkingBand	src/Renderer/ThermalBandRenderer.cpp	/^ThermalBandRenderer::DrawWorkingBand(const DerivedInfo& calculated_info,$/;"	f	class:ThermalBandRenderer
Drift	src/Computer/ThermalLocator.cpp	/^ThermalLocator::Drift(const double t_0, const FlatProjection &projection,$/;"	f	class:ThermalLocator
Drift	src/Computer/ThermalLocator.cpp	/^ThermalLocator::Point::Drift(double t, const FlatProjection &projection,$/;"	f	class:ThermalLocator::Point
DriftedDistance	src/Engine/GlideSolvers/GlideState.cpp	/^GlideState::DriftedDistance(const double time) const$/;"	f	class:GlideState
Driver	src/Dialogs/Device/DeviceEditWidget.cpp	/^  I2CBus, I2CAddr, PressureUsage, Driver, UseSecondDriver, SecondDriver,$/;"	e	enum:ControlIndex	file:
DryMass	src/Profile/ProfileKeys.cpp	/^const char DryMass[] = "DryMass";$/;"	m	namespace:ProfileKeys	file:
DumpClients	src/Cloud/Data.cpp	/^CloudData::DumpClients()$/;"	f	class:CloudData
Duplicate	src/util/AllocatedString.hxx	/^		:BasicAllocatedString(Duplicate(src.value)) {}$/;"	f	class:BasicAllocatedString
Duplicate	src/util/AllocatedString.hxx	/^	static pointer Duplicate(const_pointer src) {$/;"	f	class:BasicAllocatedString
Duplicate	src/util/AllocatedString.hxx	/^	static pointer Duplicate(string_view src) {$/;"	f	class:BasicAllocatedString
Duration	src/FlightInfo.cpp	/^int FlightInfo::Duration() const {$/;"	f	class:FlightInfo
DynamicFifoBuffer	src/util/DynamicFifoBuffer.hxx	/^class DynamicFifoBuffer : protected ForeignFifoBuffer<T> {$/;"	c
DynamicLibrary	src/system/DynamicLibrary.hpp	/^  DynamicLibrary(const TCHAR *name)$/;"	f	class:DynamicLibrary
DynamicLibrary	src/system/DynamicLibrary.hpp	/^class DynamicLibrary {$/;"	c
EAST_WEST	src/Form/DigitEntry.hpp	/^      EAST_WEST,$/;"	m	class:CoordinateFormat::Column::Type
EDGE_CHECK	src/Topography/shapelib/mapprimitive.c	45;"	d	file:
EDIT	src/Widget/RowFormWidget.hpp	/^      EDIT,$/;"	m	class:RowFormWidget::Row::Type
EDITSTRINGSIZE	src/Form/DataField/String.hpp	30;"	d
EFFECTIVE_MC	src/Dialogs/StatusPanels/TaskStatusPanel.cpp	/^  EFFECTIVE_MC,$/;"	e	enum:Controls	file:
EGM96	src/Geo/Geoid.hpp	/^namespace EGM96$/;"	n
EGM96SIZE	src/Geo/Geoid.cpp	36;"	d	file:
EKF	src/NMEA/Derived.hpp	/^    EKF,$/;"	m	class:DerivedInfo::WindSource
ELEMENT_STAT_HPP	src/Engine/Task/Stats/ElementStat.hpp	23;"	d
ELEVATION	src/Dialogs/Waypoint/dlgWaypointEdit.cpp	/^    ELEVATION,$/;"	e	enum:final::Rows	file:
ELOOP	src/zzip/conf.h	148;"	d
ELOOP	src/zzip/conf.h	150;"	d
EMPTY	src/Device/Driver/LX/LXN.hpp	/^    EMPTY = 0x00,$/;"	e	enum:LXN::Command
EMPTY_TASK	src/Engine/Task/Factory/ValidationError.hpp	/^  EMPTY_TASK,$/;"	m	class:TaskValidationErrorType
ENABLED	src/Dialogs/Settings/Panels/CloudConfigPanel.cpp	/^  ENABLED,$/;"	e	enum:ControlIndex	file:
ENABLE_DETOUR_COST_MARKERS	src/Dialogs/Settings/Panels/SymbolsConfigPanel.cpp	/^  ENABLE_DETOUR_COST_MARKERS,$/;"	e	enum:ControlIndex	file:
ENABLE_FLARM_MAP	src/Dialogs/Settings/Panels/SymbolsConfigPanel.cpp	/^  ENABLE_FLARM_MAP,$/;"	e	enum:ControlIndex	file:
END	src/Device/Driver/LX/LXN.hpp	/^    END = 0x40,$/;"	e	enum:LXN::Command
END_RADIAL	src/Dialogs/Task/Widgets/SectorZoneEditWidget.cpp	/^  END_RADIAL,$/;"	e	enum:Controls	file:
ENQ	src/Device/Driver/Volkslogger/Protocol.hpp	/^    ENQ = 0x05,$/;"	e	enum:Volkslogger::__anon164
ENUM	src/Form/DataField/Base.hpp	/^    ENUM,$/;"	m	class:DataField::Type
ENUM_BIT_SET_HXX	src/util/EnumBitSet.hxx	31;"	d
ENUM_CAST_HPP	src/util/EnumCast.hpp	31;"	d
EOVERFLOW	src/zzip/file.c	1181;"	d	file:
EPDC_FLAG_ENABLE_INVERSION	src/ui/canvas/fb/mxcfb.h	110;"	d
EPDC_FLAG_FORCE_MONOCHROME	src/ui/canvas/fb/mxcfb.h	111;"	d
EPDC_FLAG_USE_ALT_BUFFER	src/ui/canvas/fb/mxcfb.h	112;"	d
EPOLL_FD_HXX	src/system/EpollFD.hxx	31;"	d
EQUAL	src/Topography/shapelib/mapserver.h	166;"	d
EQUAL	src/Topography/shapelib/mapserver.h	168;"	d
EQUALN	src/Topography/shapelib/mapserver.h	174;"	d
EQUALN	src/Topography/shapelib/mapserver.h	176;"	d
EQUATOR_RADIUS	src/Geo/WGS84.hpp	/^  static constexpr double EQUATOR_RADIUS = 6378137;$/;"	m	namespace:WGS84
EREMOTE	src/zzip/conf.h	143;"	d
ERROR	src/Dialogs/ProfilePasswordDialog.hpp	33;"	d
ERROR	src/Job/TriStateJob.hpp	/^  SUCCESS, ERROR, CANCELLED$/;"	m	class:TriStateJobResult
ERROR	src/Job/TriStateJob.hpp	32;"	d
ERROR	src/event/EpollEvents.hxx	/^	static constexpr unsigned ERROR = EPOLLERR;$/;"	m	struct:EpollEvents
ERROR	src/event/PollEvents.hxx	/^	static constexpr unsigned ERROR = POLLERR;$/;"	m	struct:PollEvents
ERROR	src/event/WinSelectEvents.hxx	/^	static constexpr unsigned ERROR = 0;$/;"	m	struct:WinSelectEvents
ERROR	src/event/WinSelectEvents.hxx	28;"	d
ESCAPE	src/Device/Driver/FLARM/BinaryProtocol.hpp	/^  static constexpr uint8_t ESCAPE = 0x78;$/;"	m	namespace:FLARM
ESCAPE	src/Device/Port/K6BtPort.hpp	/^  static constexpr uint8_t ESCAPE = 0xa5;$/;"	m	class:K6BtPort
ESCAPE_ESCAPE	src/Device/Driver/FLARM/BinaryProtocol.hpp	/^  static constexpr uint8_t ESCAPE_ESCAPE = 0x55;$/;"	m	namespace:FLARM
ESCAPE_START	src/Device/Driver/FLARM/BinaryProtocol.hpp	/^  static constexpr uint8_t ESCAPE_START = 0x31;$/;"	m	namespace:FLARM
ESTIMATION	src/NMEA/GPSState.hpp	/^  ESTIMATION,$/;"	m	class:FixQuality
ETETime	src/Dialogs/StatusPanels/TaskStatusPanel.cpp	/^  ETETime,$/;"	e	enum:Controls	file:
ETX	src/Device/Driver/Volkslogger/Protocol.hpp	/^    ETX = 0x03,$/;"	e	enum:Volkslogger::__anon164
EVENT	src/Device/Driver/LX/LXN.hpp	/^    EVENT = 0xf4,$/;"	e	enum:LXN::Command
EVENT_BACKEND_EVENTS_HXX	src/event/BackendEvents.hxx	21;"	d
EVENT_BACKEND_HXX	src/event/Backend.hxx	21;"	d
EVENT_CALLBACK	src/ui/event/sdl/Event.hpp	/^  EVENT_CALLBACK = SDL_USEREVENT,$/;"	e	enum:UI::__anon181
EVENT_EPOLL_BACKEND_HXX	src/event/EpollBackend.hxx	21;"	d
EVENT_EPOLL_EVENTS_HXX	src/event/EpollEvents.hxx	21;"	d
EVENT_FD_HXX	src/system/EventFD.hxx	31;"	d
EVENT_LOOP_HXX	src/event/Loop.hxx	21;"	d
EVENT_POLL_BACKEND_HXX	src/event/PollBackend.hxx	21;"	d
EVENT_POLL_EVENTS_HXX	src/event/PollEvents.hxx	21;"	d
EVENT_READ	src/event/WinSelectBackend.cxx	/^static constexpr int EVENT_READ = 0;$/;"	v	file:
EVENT_WINSELECT_BACKEND_HXX	src/event/WinSelectBackend.hxx	21;"	d
EVENT_WINSELECT_EVENTS_HXX	src/event/WinSelectEvents.hxx	21;"	d
EVENT_WRITE	src/event/WinSelectBackend.cxx	/^static constexpr int EVENT_WRITE = 1;$/;"	v	file:
EWCreateOnPort	src/Device/Driver/EW.cpp	/^EWCreateOnPort(const DeviceConfig &config, Port &com_port)$/;"	f	file:
EWDevice	src/Device/Driver/EW.cpp	/^  EWDevice(Port &_port)$/;"	f	class:EWDevice
EWDevice	src/Device/Driver/EW.cpp	/^class EWDevice : public AbstractDevice {$/;"	c	file:
EWMicroRecorderCreateOnPort	src/Device/Driver/EWMicroRecorder.cpp	/^EWMicroRecorderCreateOnPort(const DeviceConfig &config, Port &com_port)$/;"	f	file:
EWMicroRecorderDevice	src/Device/Driver/EWMicroRecorder.cpp	/^  EWMicroRecorderDevice(Port &_port)$/;"	f	class:EWMicroRecorderDevice
EWMicroRecorderDevice	src/Device/Driver/EWMicroRecorder.cpp	/^class EWMicroRecorderDevice : public AbstractDevice {$/;"	c	file:
EWMicroRecorderWriteWaypoint	src/Device/Driver/EWMicroRecorder.cpp	/^EWMicroRecorderWriteWaypoint(Port &port, const char *type,$/;"	f	file:
EXCEEDS_MAX_TURNPOINTS	src/Engine/Task/Factory/ValidationError.hpp	/^  EXCEEDS_MAX_TURNPOINTS,$/;"	m	class:TaskValidationErrorType
EXCEPTION_HXX	src/util/Exception.hxx	31;"	d
EXCLUDE_BMP_SUPPORT	src/Terrain/jasper/jas_config.h	28;"	d
EXCLUDE_JPG_SUPPORT	src/Terrain/jasper/jas_config.h	30;"	d
EXCLUDE_MIF_SUPPORT	src/Terrain/jasper/jas_config.h	26;"	d
EXCLUDE_PGX_SUPPORT	src/Terrain/jasper/jas_config.h	31;"	d
EXCLUDE_PNM_SUPPORT	src/Terrain/jasper/jas_config.h	27;"	d
EXCLUDE_RAS_SUPPORT	src/Terrain/jasper/jas_config.h	29;"	d
EXCLUDE_TIFF_SUPPORT	src/Terrain/jasper/jas_config.h	32;"	d
EXPOSE	src/ui/event/shared/Event.hpp	/^    EXPOSE,$/;"	e	enum:UI::Event::Type
EXTERNAL	src/Device/Driver/LX/LX1600.hpp	/^    EXTERNAL = 0,$/;"	m	class:LX1600::SCMode
EXTERNAL	src/NMEA/Derived.hpp	/^    EXTERNAL,$/;"	m	class:DerivedInfo::WindSource
EXTERNAL_WIND	src/Dialogs/Settings/WindSettingsPanel.hpp	/^    EXTERNAL_WIND,$/;"	e	enum:final::ControlIndex
EXTRACT_PARAMETERS_HPP	src/util/ExtractParameters.hpp	25;"	d
EarthDistanceToAngle	src/Geo/FAISphere.hpp	/^  EarthDistanceToAngle(double distance)$/;"	f	namespace:FAISphere
Edge	src/Engine/PathSolvers/Dijkstra.hpp	/^  struct Edge$/;"	s	class:Dijkstra
EdgeMap	src/Engine/PathSolvers/Dijkstra.hpp	/^  typedef typename MapTemplate::template Bind<Edge> EdgeMap;$/;"	t	class:Dijkstra
EditCallback	src/Form/Edit.hpp	/^  typedef bool (*EditCallback)(const TCHAR *caption, DataField &df,$/;"	t	class:WndProperty
EditClicked	src/Dialogs/Plane/PlaneListDialog.cpp	/^PlaneListWidget::EditClicked()$/;"	f	class:PlaneListWidget
EditCurrent	src/Dialogs/Device/DeviceListDialog.cpp	/^DeviceListWidget::EditCurrent()$/;"	f	class:DeviceListWidget
EditDataFieldDialog	src/Dialogs/DataField.cpp	/^EditDataFieldDialog(const TCHAR *caption, DataField &df,$/;"	f
EditDataFieldDialog	src/Kobo/FakeSymbols.cpp	/^EditDataFieldDialog(const TCHAR *caption, DataField &df,$/;"	f
EditTaskPoint	src/Dialogs/Task/Manager/TaskEditPanel.cpp	/^TaskEditPanel::EditTaskPoint(unsigned ItemIndex)$/;"	f	class:TaskEditPanel
EditUnits	src/Dialogs/Device/ManageCAI302Dialog.cpp	/^EditUnits(const DialogLook &look, CAI302Device &device)$/;"	f	file:
Elapsed	src/time/PeriodClock.hpp	/^  auto Elapsed() const {$/;"	f	class:PeriodClock
Elapsed	src/time/PeriodClock.hpp	/^  constexpr auto Elapsed(Stamp now) const {$/;"	f	class:PeriodClock
ElapsedUpdate	src/time/PeriodClock.hpp	/^  auto ElapsedUpdate() {$/;"	f	class:PeriodClock
ElementStat	src/Engine/Task/Stats/ElementStat.hpp	/^struct ElementStat$/;"	s
ElementStatComputer	src/Engine/Task/Computer/ElementStatComputer.cpp	/^ElementStatComputer::ElementStatComputer()$/;"	f	class:ElementStatComputer
ElementStatComputer	src/Engine/Task/Computer/ElementStatComputer.hpp	/^class ElementStatComputer$/;"	c
EliminateRedundant	src/NMEA/ExternalSettings.cpp	/^ExternalSettings::EliminateRedundant(const ExternalSettings &other,$/;"	f	class:ExternalSettings
Empty	src/ui/canvas/memory/Buffer.hpp	/^  static constexpr WritableImageBuffer<PixelTraits> Empty() {$/;"	f	struct:ConstImageBuffer
Empty	src/ui/canvas/memory/Buffer.hpp	/^  static constexpr WritableImageBuffer<PixelTraits> Empty() {$/;"	f	struct:WritableImageBuffer
Empty	src/util/AllocatedString.hxx	/^	static BasicAllocatedString Empty() {$/;"	f	class:BasicAllocatedString
Enable	src/Dialogs/Airspace/dlgAirspaceWarnings.cpp	/^AirspaceWarningListWidget::Enable()$/;"	f	class:AirspaceWarningListWidget
EnableArrivalAltitudeMapItem	src/Profile/ProfileKeys.cpp	/^const char EnableArrivalAltitudeMapItem[] = "EnableArrivalAltitudeMapItem";$/;"	m	namespace:ProfileKeys	file:
EnableBulkMode	src/Device/Driver/CAI302/Mode.cpp	/^CAI302Device::EnableBulkMode(OperationEnvironment &env)$/;"	f	class:CAI302Device
EnableCommandMode	src/Device/Driver/LX/Mode.cpp	/^LXDevice::EnableCommandMode(OperationEnvironment &env)$/;"	f	class:LXDevice
EnableCursorSelection	src/Dialogs/WidgetDialog.hpp	/^  void EnableCursorSelection(unsigned _index=0) {$/;"	f	class:WidgetDialog
EnableCursorSelection	src/Form/ButtonPanel.hpp	/^  void EnableCursorSelection(unsigned _index=0) {$/;"	f	class:ButtonPanel
EnableDisableCurrent	src/Dialogs/Device/DeviceListDialog.cpp	/^DeviceListWidget::EnableDisableCurrent()$/;"	f	class:DeviceListWidget
EnableExternalTriggerCruise	src/Dialogs/Settings/Panels/GlideComputerConfigPanel.cpp	/^  EnableExternalTriggerCruise,$/;"	e	enum:ControlIndex	file:
EnableExternalTriggerCruise	src/Profile/ProfileKeys.cpp	/^const char EnableExternalTriggerCruise[] = "EnableExternalTriggerCruise";$/;"	m	namespace:ProfileKeys	file:
EnableFLARMGauge	src/Dialogs/Settings/Panels/GaugesConfigPanel.cpp	/^  EnableFLARMGauge,$/;"	e	enum:ControlIndex	file:
EnableFLARMGauge	src/Profile/ProfileKeys.cpp	/^const char EnableFLARMGauge[] = "EnableFLARMGauge";$/;"	m	namespace:ProfileKeys	file:
EnableFLARMMap	src/Profile/ProfileKeys.cpp	/^const char EnableFLARMMap[] = "EnableFLARMDisplay";$/;"	m	namespace:ProfileKeys	file:
EnableFinalGlideBarMC0	src/Dialogs/Settings/Panels/GaugesConfigPanel.cpp	/^  EnableFinalGlideBarMC0,$/;"	e	enum:ControlIndex	file:
EnableFinalGlideBarMC0	src/Profile/ProfileKeys.cpp	/^const char EnableFinalGlideBarMC0[] = "EnableFinalGlideBarMC0";$/;"	m	namespace:ProfileKeys	file:
EnableFlightLogger	src/Dialogs/Settings/Panels/LoggerConfigPanel.cpp	/^  EnableFlightLogger,$/;"	e	enum:ControlIndex	file:
EnableFlightLogger	src/Profile/ProfileKeys.cpp	/^const char EnableFlightLogger[] = "EnableFlightLogger";$/;"	m	namespace:ProfileKeys	file:
EnableForever	src/Device/Port/DumpPort.hpp	/^  void EnableForever() {$/;"	f	class:final
EnableInterpolation	src/ui/canvas/Bitmap.hpp	/^  void EnableInterpolation() {}$/;"	f	class:final
EnableInterpolation	src/ui/canvas/opengl/Bitmap.cpp	/^Bitmap::EnableInterpolation()$/;"	f	class:Bitmap
EnableItemHelp	src/Form/DataField/Base.hpp	/^  virtual void EnableItemHelp(gcc_unused bool value) {};$/;"	f	class:DataField
EnableLocationMapItem	src/Profile/ProfileKeys.cpp	/^const char EnableLocationMapItem[] = "EnableLocationMapItem";$/;"	m	namespace:ProfileKeys	file:
EnableNMEA	src/Device/Descriptor.cpp	/^DeviceDescriptor::EnableNMEA(OperationEnvironment &env)$/;"	f	class:DeviceDescriptor
EnableNMEA	src/Device/Driver.cpp	/^AbstractDevice::EnableNMEA(OperationEnvironment &env)$/;"	f	class:AbstractDevice
EnableNMEA	src/Device/Driver/CAI302/Mode.cpp	/^CAI302Device::EnableNMEA(OperationEnvironment &env)$/;"	f	class:CAI302Device
EnableNMEA	src/Device/Driver/CaiGpsNav.cpp	/^CaiGpsNavDevice::EnableNMEA(OperationEnvironment &env)$/;"	f	class:CaiGpsNavDevice
EnableNMEA	src/Device/Driver/FLARM/Mode.cpp	/^FlarmDevice::EnableNMEA(OperationEnvironment &env)$/;"	f	class:FlarmDevice
EnableNMEA	src/Device/Driver/FlymasterF1.cpp	/^FlymasterF1Device::EnableNMEA(OperationEnvironment &env)$/;"	f	class:FlymasterF1Device
EnableNMEA	src/Device/Driver/LX/Mode.cpp	/^LXDevice::EnableNMEA(OperationEnvironment &env)$/;"	f	class:LXDevice
EnableNMEALogger	src/Dialogs/Settings/Panels/LoggerConfigPanel.cpp	/^  EnableNMEALogger,$/;"	e	enum:ControlIndex	file:
EnableNMEALogger	src/Profile/ProfileKeys.cpp	/^const char EnableNMEALogger[] = "EnableNMEALogger";$/;"	m	namespace:ProfileKeys	file:
EnableNanoNMEA	src/Device/Driver/LX/Mode.cpp	/^LXDevice::EnableNanoNMEA(OperationEnvironment &env)$/;"	f	class:LXDevice
EnableNavBaroAltitude	src/Dialogs/Settings/Panels/GlideComputerConfigPanel.cpp	/^  EnableNavBaroAltitude,$/;"	e	enum:ControlIndex	file:
EnableNavBaroAltitude	src/Profile/ProfileKeys.cpp	/^const char EnableNavBaroAltitude[] = "EnableNavBaroAltitude";$/;"	m	namespace:ProfileKeys	file:
EnableNetwork	src/Kobo/WPASupplicant.cpp	/^WPASupplicant::EnableNetwork(unsigned id)$/;"	f	class:WPASupplicant
EnablePassThrough	src/Device/Driver.cpp	/^AbstractDevice::EnablePassThrough(OperationEnvironment &env)$/;"	f	class:AbstractDevice
EnablePassThrough	src/Device/Driver/LX/Mode.cpp	/^LXDevice::EnablePassThrough(OperationEnvironment &env)$/;"	f	class:LXDevice
EnableTAGauge	src/Profile/ProfileKeys.cpp	/^const char EnableTAGauge[] = "EnableTAGauge";$/;"	m	namespace:ProfileKeys	file:
EnableTerrain	src/Dialogs/Settings/Panels/TerrainDisplayConfigPanel.cpp	/^  EnableTerrain,$/;"	e	enum:ControlIndex	file:
EnableThermalProfile	src/Dialogs/Settings/Panels/GaugesConfigPanel.cpp	/^  EnableThermalProfile,$/;"	e	enum:ControlIndex	file:
EnableThermalProfile	src/Profile/ProfileKeys.cpp	/^const char EnableThermalProfile[] = "EnableThermalProfile";$/;"	m	namespace:ProfileKeys	file:
EnableTopography	src/Dialogs/Settings/Panels/TerrainDisplayConfigPanel.cpp	/^  EnableTopography,$/;"	e	enum:ControlIndex	file:
EnableVarioBar	src/Dialogs/Settings/Panels/GaugesConfigPanel.cpp	/^  EnableVarioBar$/;"	e	enum:ControlIndex	file:
EnableVarioBar	src/Profile/ProfileKeys.cpp	/^const char EnableVarioBar[] = "EnableVarioBar";$/;"	m	namespace:ProfileKeys	file:
Enabled	src/Dialogs/Settings/Panels/AudioVarioConfigPanel.cpp	/^  Enabled,$/;"	e	enum:ControlIndex	file:
End	src/Device/Driver/LX/LXN.hpp	/^  struct End {$/;"	s	namespace:LXN
EndClose	src/Device/Port/BufferedPort.cpp	/^BufferedPort::EndClose()$/;"	f	class:BufferedPort
EndDeclaration	src/IGC/IGCWriter.cpp	/^IGCWriter::EndDeclaration()$/;"	f	class:IGCWriter
EndDrag	src/Form/TabDisplay.cpp	/^TabDisplay::EndDrag()$/;"	f	class:TabDisplay
EndElement	src/JSON/Writer.hpp	/^    void EndElement() {$/;"	f	class:JSON::ArrayWriter
EndElement	src/JSON/Writer.hpp	/^    void EndElement() {$/;"	f	class:JSON::ObjectWriter
EndOfLine	src/io/CSVLine.cpp	/^EndOfLine(const char *line)$/;"	f	file:
EndPoint	src/Geo/GeoVector.cpp	/^GeoVector::EndPoint(const GeoPoint &source) const$/;"	f	class:GeoVector
EndTracking	src/Tracking/LiveTrack24.cpp	/^LiveTrack24::EndTracking(SessionID session, unsigned packet_id,$/;"	f	class:LiveTrack24
EnforceTimeWindow	src/Engine/Trace/Trace.cpp	/^Trace::EnforceTimeWindow(unsigned latest_time)$/;"	f	class:Trace
Engine	src/Audio/SLES/Engine.hpp	/^    explicit Engine(SLEngineItf _engine):engine(_engine) {}$/;"	f	class:SLES::Engine
Engine	src/Audio/SLES/Engine.hpp	/^  class Engine {$/;"	c	namespace:SLES
Enqueue	src/Audio/AndroidPCMPlayer.cpp	/^AndroidPCMPlayer::Enqueue()$/;"	f	class:AndroidPCMPlayer
Enqueue	src/Audio/SLES/AndroidSimpleBufferQueue.hpp	/^    SLresult Enqueue(const void *pBuffer, SLuint32 size) {$/;"	f	class:SLES::AndroidSimpleBufferQueue
EnqueueRepositoryDownload	src/Repository/Glue.cpp	/^EnqueueRepositoryDownload(bool force)$/;"	f
EnsureConnected	src/Kobo/WifiDialog.cpp	/^WifiListWidget::EnsureConnected()$/;"	f	class:WifiListWidget
EnsureLoaded	src/Form/DataField/File.cpp	/^FileDataField::EnsureLoaded()$/;"	f	class:FileDataField
EnsureLoadedDeconst	src/Form/DataField/File.hpp	/^  void EnsureLoadedDeconst() const {$/;"	f	class:final
EnterDrawThread	src/Components.cpp	/^EnterDrawThread()$/;"	f
EnterDrawThread	src/thread/Debug.hpp	/^EnterDrawThread()$/;"	f
EnterFastMode	src/Android/Nook.cpp	/^Nook::EnterFastMode()$/;"	f	class:Nook
EnterPan	src/Pan.cpp	/^EnterPan()$/;"	f
Entry	src/Form/DataField/Enum.hpp	/^    Entry():string(nullptr), display_string(nullptr), help(nullptr) {}$/;"	f	class:final::Entry
Entry	src/Form/DataField/Enum.hpp	/^    Entry(Entry &&other)$/;"	f	class:final::Entry
Entry	src/Form/DataField/Enum.hpp	/^  class Entry {$/;"	c	class:final
EntryLetters	src/Dialogs/KnobTextEntry.cpp	/^static constexpr TCHAR EntryLetters[] =$/;"	v	file:
EntryPrecondition	src/Engine/Task/Ordered/Points/FinishPoint.cpp	/^FinishPoint::EntryPrecondition() const$/;"	f	class:FinishPoint
EntryPrecondition	src/Engine/Task/Points/ScoredTaskPoint.hpp	/^  virtual bool EntryPrecondition() const {$/;"	f	class:ScoredTaskPoint
EnumBitSet	src/util/EnumBitSet.hxx	/^class EnumBitSet {$/;"	c
EnumCast	src/util/EnumCast.hpp	/^struct EnumCast : public EnumCastInternal<T, sizeof(T)> {};$/;"	s
EnumCastHelper	src/util/EnumCast.hpp	/^struct EnumCastHelper {$/;"	s
EnumCastInternal	src/util/EnumCast.hpp	/^struct EnumCastInternal {};$/;"	s
EnumCastInternal	src/util/EnumCast.hpp	/^struct EnumCastInternal<T, sizeof(int)>$/;"	s
EnumCastInternal	src/util/EnumCast.hpp	/^struct EnumCastInternal<T, sizeof(uint16_t)>$/;"	s
EnumCastInternal	src/util/EnumCast.hpp	/^struct EnumCastInternal<T, sizeof(uint8_t)>$/;"	s
EnumKey	src/Config/Registry.hpp	/^  bool EnumKey(DWORD idx, TCHAR *name, size_t _name_max_length) const {$/;"	f	class:RegistryKey
Environment	src/Android/Environment.cpp	/^namespace Environment {$/;"	n	file:
Environment	src/Android/Environment.hpp	/^namespace Environment {$/;"	n
EpollBackend	src/event/EpollBackend.hxx	/^class EpollBackend$/;"	c
EpollBackendResult	src/event/EpollBackend.hxx	/^class EpollBackendResult$/;"	c
EpollEvents	src/event/EpollEvents.hxx	/^struct EpollEvents {$/;"	s
EpollFD	src/system/EpollFD.cxx	/^EpollFD::EpollFD()$/;"	f	class:EpollFD
EpollFD	src/system/EpollFD.hxx	/^class EpollFD {$/;"	c
Equal	src/Engine/PathSolvers/NavDijkstra.hpp	/^    struct Equal {$/;"	s	struct:NavDijkstra::DijkstraMap
Equals	src/Engine/Task/ObservationZones/AnnularSectorZone.cpp	/^AnnularSectorZone::Equals(const ObservationZonePoint &other) const$/;"	f	class:AnnularSectorZone
Equals	src/Engine/Task/ObservationZones/CylinderZone.cpp	/^CylinderZone::Equals(const ObservationZonePoint &other) const$/;"	f	class:CylinderZone
Equals	src/Engine/Task/ObservationZones/ObservationZonePoint.cpp	/^ObservationZonePoint::Equals(const ObservationZonePoint &other) const$/;"	f	class:ObservationZonePoint
Equals	src/Engine/Task/ObservationZones/SectorZone.cpp	/^SectorZone::Equals(const ObservationZonePoint &other) const$/;"	f	class:SectorZone
Equals	src/Engine/Task/ObservationZones/SymmetricSectorZone.cpp	/^SymmetricSectorZone::Equals(const ObservationZonePoint &other) const$/;"	f	class:SymmetricSectorZone
Equals	src/Engine/Task/Ordered/Points/AATPoint.cpp	/^AATPoint::Equals(const OrderedTaskPoint &other) const$/;"	f	class:AATPoint
Equals	src/Engine/Task/Ordered/Points/ASTPoint.cpp	/^ASTPoint::Equals(const OrderedTaskPoint &_other) const$/;"	f	class:ASTPoint
Equals	src/Engine/Task/Ordered/Points/OrderedTaskPoint.cpp	/^OrderedTaskPoint::Equals(const OrderedTaskPoint &other) const$/;"	f	class:OrderedTaskPoint
Equals	src/Geo/GeoPoint.hpp	/^  bool Equals(const GeoPoint other) const {$/;"	f	struct:GeoPoint
Equals	src/Geo/SearchPoint.hpp	/^  bool Equals(const SearchPoint& sp) const {$/;"	f	class:SearchPoint
EqualsPresetUnits	src/Units/UnitsStore.cpp	/^Units::Store::EqualsPresetUnits(const UnitSetting &config)$/;"	f	class:Units::Store
Erase	src/Engine/Waypoint/Waypoints.cpp	/^Waypoints::Erase(WaypointPtr &&wp)$/;"	f	class:Waypoints
EraseDelta	src/Engine/Trace/Trace.cpp	/^Trace::EraseDelta(const unsigned target_size, const unsigned recent)$/;"	f	class:Trace
EraseEarlierThan	src/Engine/Trace/Trace.cpp	/^Trace::EraseEarlierThan(const unsigned p_time)$/;"	f	class:Trace
EraseEarlierThan	src/Engine/Trace/Trace.hpp	/^  void EraseEarlierThan(double time) {$/;"	f	class:Trace
EraseInside	src/Engine/Trace/Trace.cpp	/^Trace::EraseInside(DeltaList::iterator it)$/;"	f	class:Trace
EraseLaterThan	src/Engine/Trace/Trace.cpp	/^Trace::EraseLaterThan(const unsigned min_time)$/;"	f	class:Trace
EraseLaterThan	src/Engine/Trace/Trace.hpp	/^  void EraseLaterThan(double time) {$/;"	f	class:Trace
EraseOptionalStartPoint	src/Engine/Task/Ordered/OrderedTask.cpp	/^OrderedTask::EraseOptionalStartPoint(const unsigned index)$/;"	f	class:OrderedTask
ErasePoint	src/Engine/Task/Ordered/OrderedTask.cpp	/^OrderedTask::ErasePoint(const unsigned index)$/;"	f	class:OrderedTask
EraseStart	src/Engine/Trace/Trace.cpp	/^Trace::EraseStart(TraceDelta &td)$/;"	f	class:Trace
EraseUserMarkers	src/Engine/Waypoint/Waypoints.cpp	/^Waypoints::EraseUserMarkers()$/;"	f	class:Waypoints
Error	src/Device/Port/Port.cpp	/^Port::Error(const char *msg)$/;"	f	class:Port
Error	src/event/net/cares/Error.hxx	/^class Error : public std::runtime_error {$/;"	c	namespace:Cares
Error	src/lua/Error.hxx	/^class Error : public std::runtime_error {$/;"	c	namespace:Lua
ErrorDistType	src/ui/canvas/memory/Dither.hpp	/^  typedef int ErrorDistType; \/\/ must be wider than 8bits$/;"	t	class:Dither
ErrorEllipse	src/Math/LeastSquares.hpp	/^struct ErrorEllipse {$/;"	s
ErrorMessage	src/Device/Driver/LevilAHRS_G.cpp	/^ErrorMessage(gcc_unused unsigned code)$/;"	f	file:
EstimateThermalBase	src/Computer/ThermalBase.cpp	/^EstimateThermalBase(const RasterTerrain *terrain,$/;"	f
EstimateTimeStep	src/Engine/ThermalBand/ThermalEncounterBand.cpp	/^ThermalEncounterBand::EstimateTimeStep(const double time,$/;"	f	class:ThermalEncounterBand
EstimatedSpeed	src/Dialogs/StatusPanels/TaskStatusPanel.cpp	/^  EstimatedSpeed,$/;"	e	enum:Controls	file:
Event	src/Device/Driver/LX/LXN.hpp	/^  struct Event {$/;"	s	namespace:LXN
Event	src/Input/InputConfig.hpp	/^  struct Event {$/;"	s	struct:InputConfig
Event	src/event/Chrono.hxx	/^namespace Event {$/;"	n
Event	src/ui/event/sdl/Event.hpp	/^struct Event {$/;"	s	namespace:UI
Event	src/ui/event/shared/Event.hpp	/^  Event(Callback _callback, void *_ptr)$/;"	f	struct:UI::Event
Event	src/ui/event/shared/Event.hpp	/^  Event(Type _type):type(_type) {}$/;"	f	struct:UI::Event
Event	src/ui/event/shared/Event.hpp	/^  Event(Type _type, PixelPoint _point)$/;"	f	struct:UI::Event
Event	src/ui/event/shared/Event.hpp	/^  Event(Type _type, unsigned _param):type(_type), param(_param) {}$/;"	f	struct:UI::Event
Event	src/ui/event/shared/Event.hpp	/^  Event(Type _type, unsigned _param, void *_ptr)$/;"	f	struct:UI::Event
Event	src/ui/event/shared/Event.hpp	/^  Event(Type _type, void *_ptr):type(_type), ptr(_ptr) {}$/;"	f	struct:UI::Event
Event	src/ui/event/shared/Event.hpp	/^struct Event {$/;"	s	namespace:UI
Event	src/ui/event/windows/Event.hpp	/^struct Event {$/;"	s	namespace:UI
EventBuilder	src/Input/InputParser.cpp	/^struct EventBuilder {$/;"	s	file:
EventFD	src/system/EventFD.cxx	/^EventFD::EventFD()$/;"	f	class:EventFD
EventFD	src/system/EventFD.hxx	/^class EventFD {$/;"	c
EventLoop	src/event/Loop.cxx	/^EventLoop::EventLoop($/;"	f	class:EventLoop
EventLoop	src/event/Loop.hxx	/^	EventLoop():EventLoop(ThreadId::GetCurrent()) {}$/;"	f	class:final
EventLoop	src/ui/event/android/Loop.hpp	/^  EventLoop(EventQueue &_queue, TopWindow &_top_window)$/;"	f	class:UI::EventLoop
EventLoop	src/ui/event/android/Loop.hpp	/^class EventLoop {$/;"	c	namespace:UI
EventLoop	src/ui/event/poll/Loop.hpp	/^  EventLoop(EventQueue &_queue, TopWindow &_top_window)$/;"	f	class:UI::EventLoop
EventLoop	src/ui/event/poll/Loop.hpp	/^  explicit EventLoop(EventQueue &_queue)$/;"	f	class:UI::EventLoop
EventLoop	src/ui/event/poll/Loop.hpp	/^class EventLoop {$/;"	c	namespace:UI
EventLoop	src/ui/event/sdl/Loop.hpp	/^  EventLoop(EventQueue &_queue, TopWindow &_top_window)$/;"	f	class:UI::EventLoop
EventLoop	src/ui/event/sdl/Loop.hpp	/^  explicit EventLoop(EventQueue &_queue)$/;"	f	class:UI::EventLoop
EventLoop	src/ui/event/sdl/Loop.hpp	/^class EventLoop {$/;"	c	namespace:UI
EventLoop	src/ui/event/windows/Loop.hpp	/^  explicit EventLoop(EventQueue &_queue):queue(_queue) {}$/;"	f	class:UI::EventLoop
EventLoop	src/ui/event/windows/Loop.hpp	/^class EventLoop {$/;"	c	namespace:UI
EventPipe	src/system/EventPipe.cxx	/^EventPipe::EventPipe()$/;"	f	class:EventPipe
EventPipe	src/system/EventPipe.hxx	/^class EventPipe {$/;"	c
EventQueue	src/ui/event/android/Queue.hpp	/^class EventQueue {$/;"	c	namespace:UI
EventQueue	src/ui/event/poll/Queue.cpp	/^EventQueue::EventQueue()$/;"	f	class:UI::EventQueue
EventQueue	src/ui/event/sdl/Queue.cpp	/^EventQueue::EventQueue()$/;"	f	class:UI::EventQueue
EventQueue	src/ui/event/sdl/Queue.hpp	/^class EventQueue {$/;"	c	namespace:UI
EventQueue	src/ui/event/windows/Queue.cpp	/^EventQueue::EventQueue()$/;"	f	class:UI::EventQueue
EventQueue	src/ui/event/windows/Queue.hpp	/^class EventQueue {$/;"	c	namespace:UI
ExactPixelPoint	src/ui/canvas/opengl/ExactPixelPoint.hpp	/^  constexpr ExactPixelPoint(GLexact _x, GLexact _y)$/;"	f	struct:ExactPixelPoint
ExactPixelPoint	src/ui/canvas/opengl/ExactPixelPoint.hpp	/^  constexpr ExactPixelPoint(PixelPoint p)$/;"	f	struct:ExactPixelPoint
ExactPixelPoint	src/ui/canvas/opengl/ExactPixelPoint.hpp	/^struct ExactPixelPoint : Point2D<GLexact> {$/;"	s
Exception	src/java/Exception.hxx	/^class Exception : public std::runtime_error {$/;"	c	namespace:Java
ExchangeBlackboard	src/ActionInterface.cpp	/^XCSoarInterface::ExchangeBlackboard()$/;"	f	class:XCSoarInterface
ExchangeBlackboard	src/MapWindow/GlueMapWindow.cpp	/^GlueMapWindow::ExchangeBlackboard()$/;"	f	class:GlueMapWindow
ExchangeDeviceBlackboard	src/ActionInterface.cpp	/^XCSoarInterface::ExchangeDeviceBlackboard()$/;"	f	class:XCSoarInterface
ExchangeRadioFrequencies	src/ActionInterface.cpp	/^void ActionInterface::ExchangeRadioFrequencies(bool to_devices)$/;"	f	class:ActionInterface
ExcludeAltitude	src/Engine/Airspace/AirspaceWarningManager.cpp	/^  bool ExcludeAltitude(const AbstractAirspace& airspace) {$/;"	f	class:final	file:
ExclusiveLease	src/thread/Guard.hpp	/^  class ExclusiveLease {$/;"	c	class:Guard
Exists	src/Form/DataField/Enum.hpp	/^  bool Exists(const TCHAR *text) const {$/;"	f	class:final
Exists	src/Profile/Map.hpp	/^  bool Exists(const char *key) const {$/;"	f	class:ProfileMap
Exists	src/Profile/ProfileMap.cpp	/^Profile::Exists(const char *key)$/;"	f	class:Profile
Exists	src/io/ZipArchive.cpp	/^ZipArchive::Exists(const char *name) const$/;"	f	class:ZipArchive
Exists	src/system/FileUtil.cpp	/^Directory::Exists(Path path)$/;"	f	class:Directory
Exists	src/system/FileUtil.cpp	/^File::Exists(Path path)$/;"	f	class:File
Exists	src/system/FileUtil.cpp	/^File::Exists(const char *path)$/;"	f	class:File
ExistsAny	src/system/FileUtil.cpp	/^File::ExistsAny(Path path)$/;"	f	class:File
ExistsIf	src/util/Algorithm.hpp	/^ExistsIf(I first, I last, P predicate)$/;"	f
ExistsItem	src/Weather/Rasp/RaspStore.cpp	/^RaspStore::ExistsItem(const ZipArchive &archive, Path name, unsigned time_index)$/;"	f	class:RaspStore
ExitFastMode	src/Android/Nook.cpp	/^Nook::ExitFastMode()$/;"	f	class:Nook
Expand	src/Geo/Flat/FlatBoundingBox.hpp	/^  void Expand(const FlatGeoPoint& p) {$/;"	f	struct:FlatBoundingBox
Expand	src/Menu/ButtonLabel.cpp	/^ButtonLabel::Expand(const TCHAR *text, TCHAR *buffer, size_t size)$/;"	f	class:ButtonLabel
ExpandByOne	src/Geo/Flat/FlatBoundingBox.hpp	/^  void ExpandByOne() {$/;"	f	struct:FlatBoundingBox
ExpandLocalPath	src/LocalPath.cpp	/^ExpandLocalPath(Path src)$/;"	f
ExpandMacros	src/Menu/ExpandMacros.cpp	/^ButtonLabel::ExpandMacros(const TCHAR *In, TCHAR *OutBuffer, size_t Size)$/;"	f	class:ButtonLabel
ExpandTaskMacros	src/Menu/ExpandMacros.cpp	/^ExpandTaskMacros(const TCHAR *name,$/;"	f	file:
ExpandTrafficMacros	src/Menu/ExpandMacros.cpp	/^ExpandTrafficMacros(const TCHAR *name)$/;"	f	file:
Expanded	src/Menu/ButtonLabel.hpp	/^  struct Expanded {$/;"	s	namespace:ButtonLabel
ExpectACK	src/Device/Driver/LX/Protocol.hpp	/^  ExpectACK(Port &port, OperationEnvironment &env,$/;"	f	namespace:LX
ExpectChecksum	src/Device/Driver/FLARM/Device.cpp	/^ExpectChecksum(Port &port, uint8_t checksum, OperationEnvironment &env)$/;"	f	file:
ExpectEnd	src/system/Args.hpp	/^  void ExpectEnd() {$/;"	f	class:Args
ExpectLine	src/Device/Util/NMEAReader.cpp	/^PortNMEAReader::ExpectLine(const char *_prefix, TimeoutClock timeout)$/;"	f	class:PortNMEAReader
ExpectNext	src/system/Args.hpp	/^  const char *ExpectNext() {$/;"	f	class:Args
ExpectNextDouble	src/system/Args.hpp	/^  double ExpectNextDouble() {$/;"	f	class:Args
ExpectNextInt	src/system/Args.hpp	/^  int ExpectNextInt() {$/;"	f	class:Args
ExpectNextPath	src/system/Args.hpp	/^  AllocatedPath ExpectNextPath() {$/;"	f	class:Args
ExpectNextPath	src/system/Args.hpp	/^  Path ExpectNextPath() {$/;"	f	class:Args
ExpectNextT	src/system/Args.hpp	/^  tstring ExpectNextT() {$/;"	f	class:Args
ExpectOK	src/Kobo/WPASupplicant.hpp	/^  bool ExpectOK() {$/;"	f	class:WPASupplicant
ExpectResponse	src/Kobo/WPASupplicant.cpp	/^WPASupplicant::ExpectResponse(const char *expected)$/;"	f	class:WPASupplicant
ExpectString	src/Device/Port/Port.cpp	/^Port::ExpectString(const char *token, OperationEnvironment &env,$/;"	f	class:Port
ExpectXOff	src/Device/Driver/Flytec/Logger.cpp	/^ExpectXOff(Port &port, OperationEnvironment &env,$/;"	f	file:
ExpectedMsgLength	src/Device/Driver/KRT2.cpp	/^KRT2Device::ExpectedMsgLength(const uint8_t *data, size_t length)$/;"	f	class:KRT2Device
ExpectedMsgLengthSTX	src/Device/Driver/KRT2.cpp	/^KRT2Device::ExpectedMsgLengthSTX(uint8_t code)$/;"	f	class:KRT2Device
Expire	src/Cloud/Client.cpp	/^CloudClientContainer::Expire(std::chrono::steady_clock::time_point before)$/;"	f	class:CloudClientContainer
Expire	src/Cloud/Thermal.cpp	/^CloudThermalContainer::Expire(std::chrono::steady_clock::time_point before)$/;"	f	class:CloudThermalContainer
Expire	src/Computer/GlideComputer.hpp	/^  void Expire() {$/;"	f	class:GlideComputer
Expire	src/FLARM/Data.hpp	/^  void Expire(double clock) {$/;"	f	struct:FlarmData
Expire	src/FLARM/Error.hpp	/^  void Expire(gcc_unused double clock) {$/;"	f
Expire	src/FLARM/List.hpp	/^  void Expire(double clock) {$/;"	f	struct:TrafficList
Expire	src/FLARM/Status.hpp	/^  void Expire(double clock) {$/;"	f	struct:FlarmStatus
Expire	src/FLARM/Version.hpp	/^  void Expire(gcc_unused double clock) {$/;"	f	struct:FlarmVersion
Expire	src/GliderLink/GliderLinkData.hpp	/^  void Expire(double clock) {$/;"	f	struct:GliderLinkData
Expire	src/GliderLink/List.hpp	/^  void Expire(double clock) {$/;"	f	struct:GliderLinkTrafficList
Expire	src/NMEA/Attitude.cpp	/^AttitudeState::Expire(double now)$/;"	f	class:AttitudeState
Expire	src/NMEA/Derived.cpp	/^DerivedInfo::Expire(double Time)$/;"	f	class:DerivedInfo
Expire	src/NMEA/ExternalSettings.cpp	/^ExternalSettings::Expire(double time)$/;"	f	class:ExternalSettings
Expire	src/NMEA/GPSState.cpp	/^GPSState::Expire(double now)$/;"	f	class:GPSState
Expire	src/NMEA/Info.cpp	/^NMEAInfo::Expire()$/;"	f	class:NMEAInfo
ExpireWallClock	src/Blackboard/DeviceBlackboard.cpp	/^DeviceBlackboard::ExpireWallClock()$/;"	f	class:DeviceBlackboard
ExpireWallClock	src/NMEA/Info.cpp	/^NMEAInfo::ExpireWallClock()$/;"	f	class:NMEAInfo
Expired	src/Computer/ClimbAverageCalculator.cpp	/^ClimbAverageCalculator::Expired(double now, double max_age) const$/;"	f	class:ClimbAverageCalculator
Export	src/Rough/RoughAngle.hpp	/^  static constexpr Angle Export(int16_t x) {$/;"	f	class:RoughAngle
Export	src/Rough/RoughSpeed.hpp	/^  static constexpr double Export(uint16_t x) {$/;"	f	class:RoughSpeed
Export	src/Rough/RoughVSpeed.hpp	/^  static double Export(int16_t x) {$/;"	f	class:RoughVSpeed
Export	src/ui/canvas/opengl/Color.hpp	/^  static constexpr uint8_t Export(Component value) {$/;"	f	class:Color
ExportAngle	src/Tracking/SkyLines/Export.hpp	/^ExportAngle(Angle src)$/;"	f	namespace:SkyLinesTracking
ExportFloat	src/ui/canvas/opengl/Color.hpp	/^  static constexpr GLfloat ExportFloat(Component value) {$/;"	f	class:Color
ExportGeoPoint	src/Tracking/SkyLines/Export.hpp	/^ExportGeoPoint(::GeoPoint src)$/;"	f	namespace:SkyLinesTracking
ExportOutputMode	src/Device/Driver/BlueFly/Internal.hpp	/^    static unsigned ExportOutputMode(unsigned value) {$/;"	f	struct:BlueFlyDevice::BlueFlySettings
ExportOutputMode	src/Device/Driver/BlueFly/Internal.hpp	/^    unsigned ExportOutputMode() const {$/;"	f	struct:BlueFlyDevice::BlueFlySettings
ExportPoint	src/Geo/GeoClip.hpp	/^  GeoPoint ExportPoint(GeoPoint pt) const {$/;"	f	class:GeoClip
ExportUSBStorage	src/Kobo/SystemDialog.cpp	/^SystemWidget::ExportUSBStorage()$/;"	f	class:SystemWidget
ExportVolume	src/Device/Driver/BlueFly/Internal.hpp	/^    static unsigned ExportVolume(double value) {$/;"	f	struct:BlueFlyDevice::BlueFlySettings
ExportVolume	src/Device/Driver/BlueFly/Internal.hpp	/^    unsigned ExportVolume() const {$/;"	f	struct:BlueFlyDevice::BlueFlySettings
Expose	src/ui/canvas/custom/TopCanvas.hpp	62;"	d
Expose	src/ui/egl/System.hpp	50;"	d
Expose	src/ui/glx/System.hpp	39;"	d
Expose	src/ui/window/TopWindow.hpp	72;"	d
ExtConfig	src/Device/Driver/LX/LXN.hpp	/^  struct ExtConfig {$/;"	s	namespace:LXN
Extend	src/Geo/GeoBounds.cpp	/^GeoBounds::Extend(const GeoPoint pt)$/;"	f	class:GeoBounds
ExtensionConfig	src/Device/Driver/LX/LXN.hpp	/^  struct ExtensionConfig {$/;"	s	namespace:LXN
ExtensionDefinition	src/Device/Driver/LX/LXN.hpp	/^  struct ExtensionDefinition {$/;"	s	namespace:LXN
External	src/Android/Battery.cpp	/^namespace Power::External {$/;"	n	class:Power::Power	file:
External	src/Hardware/Battery.cpp	/^  namespace External{$/;"	n	namespace:Power	file:
External	src/Hardware/Battery.hpp	/^  namespace External{$/;"	n	namespace:Power
ExternalLogger	src/Logger/ExternalLogger.hpp	/^namespace ExternalLogger {$/;"	n
ExternalSettings	src/NMEA/ExternalSettings.hpp	/^struct ExternalSettings {$/;"	s
ExternalWind	src/Profile/ProfileKeys.cpp	/^const char ExternalWind[] = "ExternalWind";$/;"	m	namespace:ProfileKeys	file:
ExtractHostResult	src/net/HostParser.hxx	/^struct ExtractHostResult {$/;"	s
ExtractParameters	src/util/ExtractParameters.cpp	/^ExtractParameters(const TCHAR *src, TCHAR *dst,$/;"	f
EyeCreateOnPort	src/Device/Driver/Eye.cpp	/^EyeCreateOnPort(gcc_unused const DeviceConfig &config, gcc_unused Port &com_port)$/;"	f	file:
EyeDevice	src/Device/Driver/Eye.cpp	/^class EyeDevice : public AbstractDevice {$/;"	c	file:
FACTORY_TYPE_HPP	src/Engine/Task/Factory/TaskFactoryType.hpp	24;"	d
FAI	src/Engine/Task/Shapes/FAITriangleSettings.hpp	/^    FAI,$/;"	m	class:FAITriangleSettings::Threshold
FAIGoalTaskFactory	src/Engine/Task/Factory/FAIGoalTaskFactory.cpp	/^FAIGoalTaskFactory::FAIGoalTaskFactory(OrderedTask& _task,$/;"	f	class:FAIGoalTaskFactory
FAIGoalTaskFactory	src/Engine/Task/Factory/FAIGoalTaskFactory.hpp	/^class FAIGoalTaskFactory: $/;"	c
FAIL1	src/zzip/__debug.h	67;"	d
FAIL2	src/zzip/__debug.h	68;"	d
FAIL3	src/zzip/__debug.h	69;"	d
FAIL4	src/zzip/__debug.h	70;"	d
FAIL5	src/zzip/__debug.h	71;"	d
FAIL6	src/zzip/__debug.h	72;"	d
FAILED	src/Device/Port/Port.hpp	/^    FAILED,$/;"	m	class:Port::WaitResult
FAILED	src/Device/Port/State.hpp	/^  FAILED,$/;"	m	class:PortState
FAILED	src/Engine/PathSolvers/SolverResult.hpp	/^  FAILED,$/;"	m	class:SolverResult
FAIORTaskFactory	src/Engine/Task/Factory/FAIORTaskFactory.cpp	/^FAIORTaskFactory::FAIORTaskFactory(OrderedTask& _task,$/;"	f	class:FAIORTaskFactory
FAIORTaskFactory	src/Engine/Task/Factory/FAIORTaskFactory.hpp	/^class FAIORTaskFactory: $/;"	c
FAISphere	src/Geo/FAISphere.hpp	/^namespace FAISphere {$/;"	n
FAITaskFactory	src/Engine/Task/Factory/FAITaskFactory.cpp	/^FAITaskFactory::FAITaskFactory(OrderedTask& _task,$/;"	f	class:FAITaskFactory
FAITaskFactory	src/Engine/Task/Factory/FAITaskFactory.cpp	/^FAITaskFactory::FAITaskFactory(const TaskFactoryConstraints &_constraints,$/;"	f	class:FAITaskFactory
FAITaskFactory	src/Engine/Task/Factory/FAITaskFactory.hpp	/^class FAITaskFactory: $/;"	c
FAITrianglePointValidator	src/Engine/Task/Shapes/FAITrianglePointValidator.cpp	/^FAITrianglePointValidator::FAITrianglePointValidator($/;"	f	class:FAITrianglePointValidator
FAITrianglePointValidator	src/Engine/Task/Shapes/FAITrianglePointValidator.hpp	/^class FAITrianglePointValidator$/;"	c
FAITriangleRules	src/Engine/Task/Shapes/FAITriangleRules.hpp	/^namespace FAITriangleRules {$/;"	n
FAITriangleSettings	src/Engine/Task/Shapes/FAITriangleSettings.hpp	/^struct FAITriangleSettings {$/;"	s
FAITriangleTaskFactory	src/Engine/Task/Factory/FAITriangleTaskFactory.cpp	/^FAITriangleTaskFactory::FAITriangleTaskFactory(OrderedTask& _task,$/;"	f	class:FAITriangleTaskFactory
FAITriangleTaskFactory	src/Engine/Task/Factory/FAITriangleTaskFactory.hpp	/^class FAITriangleTaskFactory: $/;"	c
FAITriangleThreshold	src/Profile/ProfileKeys.cpp	/^const char FAITriangleThreshold[] = "FAITriangleThreshold";$/;"	m	namespace:ProfileKeys	file:
FAITriangleValidator	src/Engine/Task/Shapes/FAITriangleTask.hpp	/^namespace FAITriangleValidator$/;"	n
FAI_FINISH_HEIGHT	src/Dialogs/Task/Manager/TaskPropertiesPanel.cpp	/^  FAI_FINISH_HEIGHT,$/;"	e	enum:Controls	file:
FAI_GENERAL	src/Engine/Task/Factory/TaskFactoryType.hpp	/^  FAI_GENERAL = 0,$/;"	m	class:TaskFactoryType
FAI_GOAL	src/Engine/Task/Factory/TaskFactoryType.hpp	/^  FAI_GOAL,$/;"	m	class:TaskFactoryType
FAI_GOAL_TASK_FACTORY_HPP	src/Engine/Task/Factory/FAIGoalTaskFactory.hpp	23;"	d
FAI_OR	src/Engine/Task/Factory/TaskFactoryType.hpp	/^  FAI_OR,$/;"	m	class:TaskFactoryType
FAI_OR_TASK_FACTORY_HPP	src/Engine/Task/Factory/FAIORTaskFactory.hpp	23;"	d
FAI_SECTOR	src/Engine/Task/Factory/TaskPointFactoryType.hpp	/^  FAI_SECTOR,$/;"	m	class:TaskPointFactoryType
FAI_SECTOR	src/Engine/Task/ObservationZones/ObservationZone.hpp	/^    FAI_SECTOR,$/;"	m	class:ObservationZone::Shape
FAI_TASK_FACTORY_HPP	src/Engine/Task/Factory/FAITaskFactory.hpp	23;"	d
FAI_TRIANGLE	src/Engine/Task/Factory/TaskFactoryType.hpp	/^  FAI_TRIANGLE,$/;"	m	class:TaskFactoryType
FAI_TRIANGLE_LEFT	src/Waypoint/WaypointFilter.hpp	/^  FAI_TRIANGLE_LEFT,$/;"	m	class:TypeFilter
FAI_TRIANGLE_RIGHT	src/Waypoint/WaypointFilter.hpp	/^  FAI_TRIANGLE_RIGHT,$/;"	m	class:TypeFilter
FAI_TRIANGLE_SECTOR_MAX	src/Engine/Task/Shapes/FAITriangleArea.hpp	/^static constexpr unsigned FAI_TRIANGLE_SECTOR_MAX = 8 * 3 * 10;$/;"	v
FAI_TRIANGLE_TASK_FACTORY_HPP	src/Engine/Task/Factory/FAITriangleTaskFactory.hpp	23;"	d
FAI_TRIANGLE_THRESHOLD	src/Dialogs/Settings/Panels/ScoringConfigPanel.cpp	/^  FAI_TRIANGLE_THRESHOLD,$/;"	e	enum:ControlIndex	file:
FALSE	src/util/TriState.hpp	/^  FALSE, TRUE, UNKNOWN$/;"	m	class:TriState
FALSE	src/util/TriState.hpp	47;"	d
FATAL_PROBLEM	src/FLARM/Error.hpp	/^    FATAL_PROBLEM = 0x03,$/;"	m	struct:FlarmError	typeref:enum:FlarmError::
FBO	src/ui/canvas/opengl/FBO.hpp	/^namespace FBO {$/;"	n
FB_POWERDOWN_DISABLE	src/ui/canvas/fb/mxcfb.h	114;"	d
FB_SYNC_CLK_IDLE_EN	src/ui/canvas/fb/mxcfb.h	33;"	d
FB_SYNC_CLK_LAT_FALL	src/ui/canvas/fb/mxcfb.h	31;"	d
FB_SYNC_DATA_INVERT	src/ui/canvas/fb/mxcfb.h	32;"	d
FB_SYNC_OE_LOW_ACT	src/ui/canvas/fb/mxcfb.h	30;"	d
FB_SYNC_SHARP_MODE	src/ui/canvas/fb/mxcfb.h	34;"	d
FB_SYNC_SWAP_RGB	src/ui/canvas/fb/mxcfb.h	35;"	d
FB_TEMP_AUTO_UPDATE_DISABLE	src/ui/canvas/fb/mxcfb.h	115;"	d
FDT	src/Device/Driver/Volkslogger/vlconv.cpp	/^  uint8_t FDT[3];$/;"	m	class:C_RECORD	file:
FEET	src/Units/Unit.hpp	/^  FEET,$/;"	m	class:Unit
FEET_PER_MINUTE	src/Units/Unit.hpp	/^  FEET_PER_MINUTE,$/;"	m	class:Unit
FIFTH	src/Engine/Contest/Solvers/ContestDijkstra.cpp	191;"	d	file:
FILE	src/Dialogs/ReplayDialog.cpp	/^    FILE,$/;"	e	enum:final::Controls	file:
FILE	src/Form/DataField/Base.hpp	/^    FILE,$/;"	m	class:DataField::Type
FILE_1	src/Waypoint/WaypointFilter.hpp	/^  FILE_1,$/;"	m	class:TypeFilter
FILE_2	src/Waypoint/WaypointFilter.hpp	/^  FILE_2,$/;"	m	class:TypeFilter
FILE_CACHE_MAGIC	src/io/FileCache.cpp	/^static constexpr unsigned FILE_CACHE_MAGIC = 0xab352f8a;$/;"	v	file:
FILE_DESCRIPTOR_HXX	src/io/FileDescriptor.hxx	31;"	d
FILE_OUTPUT_STREAM_HXX	src/io/FileOutputStream.hxx	31;"	d
FILE_READER_HXX	src/io/FileReader.hxx	31;"	d
FILLED	src/Renderer/LabelShape.hpp	/^  FILLED,$/;"	m	class:LabelShape
FILTER_HPP	src/Math/Filter.hpp	24;"	d
FILTER_NODE_TYPE_BBOX	src/Topography/shapelib/mapserver.h	/^    FILTER_NODE_TYPE_BBOX = 4,$/;"	e	enum:__anon21
FILTER_NODE_TYPE_BOUNDARY	src/Topography/shapelib/mapserver.h	/^    FILTER_NODE_TYPE_BOUNDARY = 6,$/;"	e	enum:__anon21
FILTER_NODE_TYPE_COMPARISON	src/Topography/shapelib/mapserver.h	/^    FILTER_NODE_TYPE_COMPARISON = 2,$/;"	e	enum:__anon21
FILTER_NODE_TYPE_FEATUREID	src/Topography/shapelib/mapserver.h	/^    FILTER_NODE_TYPE_FEATUREID = 10,$/;"	e	enum:__anon21
FILTER_NODE_TYPE_GEOMETRY_LINE	src/Topography/shapelib/mapserver.h	/^    FILTER_NODE_TYPE_GEOMETRY_LINE = 8,$/;"	e	enum:__anon21
FILTER_NODE_TYPE_GEOMETRY_POINT	src/Topography/shapelib/mapserver.h	/^    FILTER_NODE_TYPE_GEOMETRY_POINT = 7,$/;"	e	enum:__anon21
FILTER_NODE_TYPE_GEOMETRY_POLYGON	src/Topography/shapelib/mapserver.h	/^    FILTER_NODE_TYPE_GEOMETRY_POLYGON = 9,$/;"	e	enum:__anon21
FILTER_NODE_TYPE_LITERAL	src/Topography/shapelib/mapserver.h	/^    FILTER_NODE_TYPE_LITERAL = 5,$/;"	e	enum:__anon21
FILTER_NODE_TYPE_LOGICAL	src/Topography/shapelib/mapserver.h	/^    FILTER_NODE_TYPE_LOGICAL = 0,$/;"	e	enum:__anon21
FILTER_NODE_TYPE_PROPERTYNAME	src/Topography/shapelib/mapserver.h	/^    FILTER_NODE_TYPE_PROPERTYNAME = 3,$/;"	e	enum:__anon21
FILTER_NODE_TYPE_SPATIAL	src/Topography/shapelib/mapserver.h	/^    FILTER_NODE_TYPE_SPATIAL = 1,$/;"	e	enum:__anon21
FILTER_NODE_TYPE_TEMPORAL	src/Topography/shapelib/mapserver.h	/^    FILTER_NODE_TYPE_TEMPORAL = 11,$/;"	e	enum:__anon21
FILTER_NODE_TYPE_TIME_PERIOD	src/Topography/shapelib/mapserver.h	/^    FILTER_NODE_TYPE_TIME_PERIOD = 12$/;"	e	enum:__anon21
FILTER_NODE_TYPE_UNDEFINED	src/Topography/shapelib/mapserver.h	/^    FILTER_NODE_TYPE_UNDEFINED = -1,$/;"	e	enum:__anon21
FIN	src/Device/Driver/Volkslogger/vlconv.cpp	/^  C2 FIN;$/;"	m	class:C_RECORD	file:
FINALGLIDE	src/Engine/Task/TaskBehaviour.hpp	/^    FINALGLIDE = 0,$/;"	m	class:TaskBehaviour::AutoMCMode
FINAL_GLIDE	src/DisplayMode.hpp	/^  FINAL_GLIDE,$/;"	m	class:DisplayMode
FINISH	src/Engine/Task/Points/Type.hpp	/^  FINISH,$/;"	m	class:TaskPointType
FINISH	src/Waypoint/WaypointFilter.hpp	/^  FINISH,$/;"	m	class:TypeFilter
FINISHED	src/system/OverlappedEvent.hpp	/^    FINISHED,$/;"	e	enum:OverlappedEvent::WaitResult
FINISHPOINT_HPP	src/Engine/Task/Ordered/Points/FinishPoint.hpp	25;"	d
FINISH_CYLINDER	src/Engine/Task/Factory/TaskPointFactoryType.hpp	/^  FINISH_CYLINDER,$/;"	m	class:TaskPointFactoryType
FINISH_HEIGHT_REF	src/Dialogs/Task/Manager/TaskPropertiesPanel.cpp	/^  FINISH_HEIGHT_REF,$/;"	e	enum:Controls	file:
FINISH_LINE	src/Engine/Task/Factory/TaskPointFactoryType.hpp	/^  FINISH_LINE,$/;"	m	class:TaskPointFactoryType
FINISH_MIN_HEIGHT	src/Dialogs/Task/Manager/TaskPropertiesPanel.cpp	/^  FINISH_MIN_HEIGHT,$/;"	e	enum:Controls	file:
FINISH_SECTOR	src/Engine/Task/Factory/TaskPointFactoryType.hpp	/^  FINISH_SECTOR,$/;"	m	class:TaskPointFactoryType
FIN_MC0_ALTD	src/InfoBoxes/Content/Type.hpp	/^    FIN_MC0_ALTD,$/;"	e	enum:InfoBoxFactory::Type
FIRMWARE_TIMEOUT	src/FLARM/Error.hpp	/^    FIRMWARE_TIMEOUT = 0x11,$/;"	e	enum:uint8_t
FIRST_FIVE	src/Renderer/WaypointRendererSettings.hpp	/^    FIRST_FIVE,$/;"	m	class:WaypointRendererSettings::DisplayTextType
FIRST_THREE	src/Renderer/WaypointRendererSettings.hpp	/^    FIRST_THREE,$/;"	m	class:WaypointRendererSettings::DisplayTextType
FIRST_WORD	src/Renderer/WaypointRendererSettings.hpp	/^    FIRST_WORD,$/;"	m	class:WaypointRendererSettings::DisplayTextType
FIX	src/Tracking/SkyLines/Protocol.hpp	/^  FIX = 3,$/;"	e	enum:SkyLinesTracking::Type
FIXED	src/Task/TaskFileSeeYou.cpp	/^    FIXED,$/;"	e	enum:SeeYouTurnpointInformation::Style	file:
FIXED	src/Terrain/TerrainSettings.hpp	/^  FIXED,$/;"	m	class:SlopeShading
FLAG_AIRSPEED	src/Tracking/SkyLines/Protocol.hpp	/^  static const uint32_t FLAG_AIRSPEED = 0x8;$/;"	m	struct:SkyLinesTracking::FixPacket
FLAG_ALTITUDE	src/Tracking/SkyLines/Protocol.hpp	/^  static const uint32_t FLAG_ALTITUDE = 0x10;$/;"	m	struct:SkyLinesTracking::FixPacket
FLAG_BAD_KEY	src/Tracking/SkyLines/Protocol.hpp	/^  static const uint32_t FLAG_BAD_KEY = 0x1;$/;"	m	struct:SkyLinesTracking::ACKPacket
FLAG_CLUB	src/Tracking/SkyLines/Protocol.hpp	/^  static const uint32_t FLAG_CLUB = 0x2;$/;"	m	struct:SkyLinesTracking::TrafficRequestPacket
FLAG_ENL	src/Tracking/SkyLines/Protocol.hpp	/^  static const uint32_t FLAG_ENL = 0x40;$/;"	m	struct:SkyLinesTracking::FixPacket
FLAG_FOLLOWEES	src/Tracking/SkyLines/Protocol.hpp	/^  static const uint32_t FLAG_FOLLOWEES = 0x1;$/;"	m	struct:SkyLinesTracking::TrafficRequestPacket
FLAG_GROUND_SPEED	src/Tracking/SkyLines/Protocol.hpp	/^  static const uint32_t FLAG_GROUND_SPEED = 0x4;$/;"	m	struct:SkyLinesTracking::FixPacket
FLAG_LOCATION	src/Tracking/SkyLines/Protocol.hpp	/^  static const uint32_t FLAG_LOCATION = 0x1;$/;"	m	struct:SkyLinesTracking::FixPacket
FLAG_NEAR	src/Tracking/SkyLines/Protocol.hpp	/^  static const uint32_t FLAG_NEAR = 0x4;$/;"	m	struct:SkyLinesTracking::TrafficRequestPacket
FLAG_NOT_FOUND	src/Tracking/SkyLines/Protocol.hpp	/^  static const uint32_t FLAG_NOT_FOUND = 0x1;$/;"	m	struct:SkyLinesTracking::UserNameResponsePacket
FLAG_TRACK	src/Tracking/SkyLines/Protocol.hpp	/^  static const uint32_t FLAG_TRACK = 0x2;$/;"	m	struct:SkyLinesTracking::FixPacket
FLAG_VARIO	src/Tracking/SkyLines/Protocol.hpp	/^  static const uint32_t FLAG_VARIO = 0x20;$/;"	m	struct:SkyLinesTracking::FixPacket
FLAP_POSITION	src/Dialogs/Device/Vega/SwitchesDialog.cpp	/^    FLAP_POSITION,$/;"	e	enum:SwitchesLeft::Controls	file:
FLARM	src/Device/Driver/FLARM/BinaryProtocol.hpp	/^namespace FLARM {$/;"	n
FLARM	src/Device/Driver/FLARM/CRC16.hpp	/^namespace FLARM {$/;"	n
FLARM	src/Dialogs/StatusPanels/SystemStatusPanel.cpp	/^  FLARM,$/;"	e	enum:Controls	file:
FLARMConfigWidget	src/Dialogs/Device/FLARM/ConfigWidget.hpp	/^  FLARMConfigWidget(const DialogLook &look, FlarmDevice &_device)$/;"	f	class:final
FLARMNET	src/Repository/FileType.hpp	/^  FLARMNET,$/;"	m	class:FileType
FLARM_LOCK	src/Dialogs/Traffic/TeamCodeDialog.cpp	/^    FLARM_LOCK,$/;"	e	enum:final::Controls	file:
FLARM_RADAR	src/PageSettings.hpp	/^    FLARM_RADAR,$/;"	m	class:PageLayout::Main
FLARM_TRAFFIC_WINDOW_H	src/Gauge/FlarmTrafficWindow.hpp	25;"	d
FLARM_TRAFFIC_WINDOW_LOOK_HPP	src/Look/FlarmTrafficLook.hpp	25;"	d
FLASH_MEMORY	src/FLARM/Error.hpp	/^    FLASH_MEMORY = 0x61,$/;"	e	enum:uint8_t
FLATBOUNDINGBOX_HPP	src/Geo/Flat/FlatBoundingBox.hpp	23;"	d
FLATELLIPSE_HPP	src/Geo/Flat/FlatEllipse.hpp	24;"	d
FLATLINE_HPP	src/Geo/Flat/FlatLine.hpp	24;"	d
FLATPOINT_HPP	src/Geo/Flat/FlatPoint.hpp	23;"	d
FLATRAY_HPP	src/Geo/Flat/FlatRay.hpp	23;"	d
FLATTENING	src/Geo/WGS84.hpp	/^  static constexpr double FLATTENING = 1 \/ 298.257223563;$/;"	m	namespace:WGS84
FLAT_TRIANGLE_FAN_HPP	src/Engine/Route/FlatTriangleFan.hpp	24;"	d
FLAT_TRIANGLE_FAN_TREE_HPP	src/Engine/Route/FlatTriangleFanTree.hpp	24;"	d
FLDCCL	src/Device/Driver/Volkslogger/vlconv.h	37;"	d
FLDCID	src/Device/Driver/Volkslogger/vlconv.h	36;"	d
FLDEPEV	src/Device/Driver/Volkslogger/vlconv.h	62;"	d
FLDETKF	src/Device/Driver/Volkslogger/vlconv.h	63;"	d
FLDFDT	src/Device/Driver/Volkslogger/vlconv.h	41;"	d
FLDFIN	src/Device/Driver/Volkslogger/vlconv.h	45;"	d
FLDGID	src/Device/Driver/Volkslogger/vlconv.h	35;"	d
FLDGTY	src/Device/Driver/Volkslogger/vlconv.h	34;"	d
FLDHDR	src/Device/Driver/Volkslogger/vlconv.h	61;"	d
FLDLDG	src/Device/Driver/Volkslogger/vlconv.h	46;"	d
FLDNTP	src/Device/Driver/Volkslogger/vlconv.h	40;"	d
FLDPLT	src/Device/Driver/Volkslogger/vlconv.h	29;"	d
FLDPLT1	src/Device/Driver/Volkslogger/vlconv.h	30;"	d
FLDPLT2	src/Device/Driver/Volkslogger/vlconv.h	31;"	d
FLDPLT3	src/Device/Driver/Volkslogger/vlconv.h	32;"	d
FLDPLT4	src/Device/Driver/Volkslogger/vlconv.h	33;"	d
FLDSTA	src/Device/Driver/Volkslogger/vlconv.h	44;"	d
FLDTID	src/Device/Driver/Volkslogger/vlconv.h	42;"	d
FLDTKF	src/Device/Driver/Volkslogger/vlconv.h	43;"	d
FLDTP1	src/Device/Driver/Volkslogger/vlconv.h	48;"	d
FLDTP10	src/Device/Driver/Volkslogger/vlconv.h	57;"	d
FLDTP11	src/Device/Driver/Volkslogger/vlconv.h	58;"	d
FLDTP12	src/Device/Driver/Volkslogger/vlconv.h	59;"	d
FLDTP2	src/Device/Driver/Volkslogger/vlconv.h	49;"	d
FLDTP3	src/Device/Driver/Volkslogger/vlconv.h	50;"	d
FLDTP4	src/Device/Driver/Volkslogger/vlconv.h	51;"	d
FLDTP5	src/Device/Driver/Volkslogger/vlconv.h	52;"	d
FLDTP6	src/Device/Driver/Volkslogger/vlconv.h	53;"	d
FLDTP7	src/Device/Driver/Volkslogger/vlconv.h	54;"	d
FLDTP8	src/Device/Driver/Volkslogger/vlconv.h	55;"	d
FLDTP9	src/Device/Driver/Volkslogger/vlconv.h	56;"	d
FLDTZN	src/Device/Driver/Volkslogger/vlconv.h	38;"	d
FLEX_WING_FAI1	src/Tracking/LiveTrack24.hpp	/^  FLEX_WING_FAI1 = 2,$/;"	m	class:LiveTrack24::VehicleType
FLIGHTINFO	src/Device/Driver/Volkslogger/vlapi2.h	/^    struct FLIGHTINFO {$/;"	s	struct:VLAPI_DATA::DECLARATION
FLIGHT_INFO	src/Device/Driver/LX/LXN.hpp	/^    FLIGHT_INFO = 0xfc,$/;"	e	enum:LXN::Command
FLIGHT_LEVEL	src/Units/Unit.hpp	/^  FLIGHT_LEVEL,$/;"	m	class:Unit
FLIGHT_MODE	src/Dialogs/Device/Vega/SwitchesDialog.cpp	/^    FLIGHT_MODE,$/;"	e	enum:SwitchesRight::Controls	file:
FLIGHT_RECORDER	src/FLARM/Error.hpp	/^    FLIGHT_RECORDER = 0x91,$/;"	e	enum:uint8_t
FLIGHT_STATISTICS_HPP	src/FlightStatistics.hpp	25;"	d
FLIGHT_STATISTICS_RENDERER_HPP	src/Renderer/FlightStatisticsRenderer.hpp	25;"	d
FLOAT_RTK	src/NMEA/GPSState.hpp	/^  FLOAT_RTK,$/;"	m	class:FixQuality
FLUSH_BUFFERS	src/Device/Port/K6BtPort.hpp	/^  static constexpr uint8_t FLUSH_BUFFERS = 0x40;$/;"	m	class:K6BtPort
FLY	src/Dialogs/SimulatorPromptWindow.hpp	/^    FLY = 1000,$/;"	m	class:final::Result
FLYING_SAUCER	src/FLARM/Traffic.hpp	/^    FLYING_SAUCER = 10,   \/\/!< flying saucer (UFO)$/;"	m	class:FlarmTraffic::AircraftType
FNday	src/Math/SunEphemeris.cpp	/^SunEphemeris::FNday(const BrokenDateTime &date_time)$/;"	f	class:SunEphemeris
FOCUS_TIMEOUT_MAX	src/InfoBoxes/InfoBoxWindow.cpp	/^static constexpr std::chrono::steady_clock::duration FOCUS_TIMEOUT_MAX = std::chrono::seconds(20);$/;"	v	file:
FOLLOW_PAN	src/MapWindow/MapWindow.hpp	/^    FOLLOW_PAN,$/;"	e	enum:MapWindow::FollowMode
FOLLOW_SELF	src/MapWindow/MapWindow.hpp	/^    FOLLOW_SELF,$/;"	e	enum:MapWindow::FollowMode
FOREIGN_FIFO_BUFFER_HXX	src/util/ForeignFifoBuffer.hxx	31;"	d
FRAMEBUFFER	src/ui/canvas/opengl/FBO.hpp	/^static constexpr GLenum FRAMEBUFFER = GL_FRAMEBUFFER;$/;"	m	namespace:FBO
FRM_SIZE	src/Device/Driver/Volkslogger/dbbconv.h	/^  static constexpr size_t FRM_SIZE = 0x1000;$/;"	m	class:DBB
FRiskFunction	src/Engine/GlideSolvers/GlidePolar.cpp	/^FRiskFunction(const double x, const double k)$/;"	f	file:
FS	src/Waypoint/WaypointFileType.hpp	/^  FS,$/;"	m	class:WaypointFileType
FTDouble	src/Topography/shapelib/mapshape.h	/^  typedef enum {FTString, FTInteger, FTDouble, FTInvalid} DBFFieldType;$/;"	e	enum:__anon77
FTInteger	src/Topography/shapelib/mapshape.h	/^  typedef enum {FTString, FTInteger, FTDouble, FTInvalid} DBFFieldType;$/;"	e	enum:__anon77
FTInvalid	src/Topography/shapelib/mapshape.h	/^  typedef enum {FTString, FTInteger, FTDouble, FTInvalid} DBFFieldType;$/;"	e	enum:__anon77
FTP	src/Kobo/NetworkDialog.cpp	/^    FTP,$/;"	e	enum:final::Buttons	file:
FTString	src/Topography/shapelib/mapshape.h	/^  typedef enum {FTString, FTInteger, FTDouble, FTInvalid} DBFFieldType;$/;"	e	enum:__anon77
FTY	src/Device/Driver/Volkslogger/vlconv.cpp	/^       FTY[50], DTM[10], CID[50], CCL[50], TZN[20];$/;"	m	struct:IGCHEADER	file:
FT_Face	src/ui/canvas/Font.hpp	/^typedef struct FT_FaceRec_ *FT_Face;$/;"	t	typeref:struct:FT_FaceRec_
FT_Face	src/ui/canvas/freetype/Init.hpp	/^typedef struct FT_FaceRec_ *FT_Face;$/;"	t	typeref:struct:FT_FaceRec_
FULL	src/MapSettings.hpp	/^    FULL,$/;"	m	class:TrailSettings::Length
FULL_ARROW	src/MapSettings.hpp	/^  FULL_ARROW,$/;"	m	class:WindArrowStyle
FXA	src/Device/Driver/Volkslogger/vlconv.cpp	/^  char A[10], DTE[10], FXA[10], PLT[80], GTY[50], GID[50], RFW[10], RHW[10],$/;"	m	struct:IGCHEADER	file:
FactoryReset	src/Device/Driver/LX/LX1600.hpp	/^  FactoryReset(Port &port, OperationEnvironment &env)$/;"	f	namespace:LX1600
FadeToWhite	src/ui/canvas/opengl/Canvas.cpp	/^Canvas::FadeToWhite(GLubyte alpha)$/;"	f	class:Canvas
FadeToWhite	src/ui/canvas/opengl/Canvas.cpp	/^Canvas::FadeToWhite(PixelRect rc, GLubyte alpha)$/;"	f	class:Canvas
FakeBufferWindow	src/ui/window/FakeBufferWindow.hpp	/^class FakeBufferWindow : public PaintWindow {$/;"	c
FallbackElevation	src/Waypoint/Factory.cpp	/^WaypointFactory::FallbackElevation(Waypoint &waypoint) const$/;"	f	class:WaypointFactory
FastForward	src/Replay/Replay.hpp	/^  bool FastForward(double delta_s) {$/;"	f	class:final
FastIntegerRotation	src/Math/FastRotation.hpp	/^class FastIntegerRotation {$/;"	c
FastRotation	src/Math/FastRotation.hpp	/^class FastRotation {$/;"	c
FastRowRotation	src/Math/FastRotation.hpp	/^class FastRowRotation {$/;"	c
FatalError	src/MainWindow.cpp	/^FatalError(const TCHAR *msg)$/;"	f	file:
FdSet	src/net/http/Multi.hxx	/^	void FdSet(fd_set *read_fd_set, fd_set *write_fd_set, fd_set *exc_fd_set,$/;"	f	class:CurlMulti
FeaturesSettings	src/Computer/Settings.hpp	/^struct FeaturesSettings {$/;"	s
File	src/LocalPath.hpp	/^namespace File {$/;"	n
File	src/java/File.hxx	/^class File : public LocalObject {$/;"	c	namespace:Java
File	src/system/FileUtil.hpp	/^namespace File$/;"	n
FileASCII	src/Device/Driver/CAI302/Protocol.hpp	/^  struct FileASCII {$/;"	s	namespace:CAI302
FileBinary	src/Device/Driver/CAI302/Protocol.hpp	/^  struct FileBinary {$/;"	s	namespace:CAI302
FileCache	src/io/FileCache.cpp	/^FileCache::FileCache(AllocatedPath &&_cache_path)$/;"	f	class:FileCache
FileCache	src/io/FileCache.hpp	/^class FileCache {$/;"	c
FileData	src/Device/Driver/CAI302/Protocol.hpp	/^  struct FileData {$/;"	s	namespace:CAI302
FileDataField	src/Form/DataField/File.cpp	/^FileDataField::FileDataField(DataFieldListener *listener)$/;"	f	class:FileDataField
FileDescriptor	src/io/FileDescriptor.hxx	/^class FileDescriptor {$/;"	c
FileDescriptor	src/io/UniqueFileDescriptor.hxx	/^		:FileDescriptor(_fd) {}$/;"	f	class:UniqueFileDescriptor
FileDescriptor	src/io/UniqueFileDescriptor.hxx	/^		:FileDescriptor(other.Steal()) {}$/;"	f	class:UniqueFileDescriptor
FileDescriptor	src/net/SocketDescriptor.hxx	/^		:FileDescriptor(_fd) {}$/;"	f	class:SocketDescriptor
FileDescriptor	src/system/TTYDescriptor.hxx	/^		:FileDescriptor(_fd) {}$/;"	f	class:TTYDescriptor
FileHandle	src/io/FileHandle.hpp	/^  FileHandle(FileHandle &&other):file(other.file) {$/;"	f	class:FileHandle
FileHandle	src/io/FileHandle.hpp	/^  FileHandle(Path path, const TCHAR *mode) {$/;"	f	class:FileHandle
FileHandle	src/io/FileHandle.hpp	/^class FileHandle {$/;"	c
FileInfo	src/Device/Driver/CAI302/Protocol.hpp	/^    struct FileInfo {$/;"	s	struct:CAI302::FileList
FileInfo	src/io/FileCache.cpp	/^struct FileInfo {$/;"	s	file:
FileItem	src/Dialogs/FileManager.cpp	/^  struct FileItem {$/;"	s	class:ManagedFileListWidget	file:
FileLineReader	src/io/FileLineReader.hpp	/^  FileLineReader(Path path, Charset cs=Charset::UTF8)$/;"	f	class:FileLineReader
FileLineReader	src/io/FileLineReader.hpp	/^class FileLineReader : public ConvertLineReader {$/;"	c
FileLineReaderA	src/io/FileLineReader.hpp	/^  explicit FileLineReaderA(Path path)$/;"	f	class:FileLineReaderA
FileLineReaderA	src/io/FileLineReader.hpp	/^class FileLineReaderA : public NLineReader {$/;"	c
FileList	src/Device/Driver/CAI302/Protocol.hpp	/^  struct FileList {$/;"	s	namespace:CAI302
FileList	src/Repository/FileRepository.hpp	/^  typedef std::list<AvailableFile> FileList;$/;"	t	struct:FileRepository
FileMapping	src/system/FileMapping.cpp	/^FileMapping::FileMapping(Path path)$/;"	f	class:FileMapping
FileMapping	src/system/FileMapping.hpp	/^class FileMapping {$/;"	c
FileOutputStream	src/io/FileOutputStream.cxx	/^FileOutputStream::FileOutputStream(FileDescriptor _directory_fd,$/;"	f	class:FileOutputStream
FileOutputStream	src/io/FileOutputStream.cxx	/^FileOutputStream::FileOutputStream(Path _path, Mode _mode)$/;"	f	class:FileOutputStream
FilePicker	src/Dialogs/FilePicker.cpp	/^FilePicker(const TCHAR *caption, FileDataField &df,$/;"	f
FilePicker	src/Dialogs/FilePicker.cpp	/^FilePicker(const TCHAR *caption, const TCHAR *patterns)$/;"	f
FileReader	src/io/FileReader.cxx	/^FileReader::FileReader(Path _path)$/;"	f	class:FileReader
FileRepository	src/Repository/FileRepository.hpp	/^struct FileRepository {$/;"	s
FileSignatureASCII	src/Device/Driver/CAI302/Protocol.hpp	/^  struct FileSignatureASCII {$/;"	s	namespace:CAI302
FileTimeToInteger	src/io/FileCache.cpp	/^FileTimeToInteger(FILETIME ft)$/;"	f	file:
FileTimeToInteger	src/system/FileUtil.cpp	/^FileTimeToInteger(FILETIME ft)$/;"	f	file:
FileTransaction	src/io/FileTransaction.cpp	/^FileTransaction::FileTransaction(Path _path)$/;"	f	class:FileTransaction
FileTransaction	src/io/FileTransaction.hpp	/^class FileTransaction {$/;"	c
FileType	src/Repository/FileType.hpp	/^enum class FileType : uint8_t {$/;"	c
FileVisitor	src/Form/DataField/File.cpp	/^  FileVisitor(FileDataField &_datafield) : datafield(_datafield) {}$/;"	f	class:FileVisitor
FileVisitor	src/Form/DataField/File.cpp	/^class FileVisitor: public File::Visitor$/;"	c	file:
Fill	src/Computer/BasicComputer.cpp	/^BasicComputer::Fill(MoreData &data, const AtmosphericPressure qnh,$/;"	f	class:BasicComputer
Fill	src/Computer/BasicComputer.cpp	/^BasicComputer::Fill(MoreData &data, const ComputerSettings &settings_computer)$/;"	f	class:BasicComputer
Fill	src/Device/Util/NMEAReader.cpp	/^PortNMEAReader::Fill(TimeoutClock timeout)$/;"	f	class:PortNMEAReader
Fill	src/MapWindow/Items/AirspaceBuilder.cpp	/^  void Fill(const AirspaceWarningManager &awm) {$/;"	f	class:AirspaceWarningList
Fill	src/MapWindow/Items/AirspaceBuilder.cpp	/^  void Fill(const ProtectedAirspaceWarningManager &awm) {$/;"	f	class:AirspaceWarningList
Fill	src/Terrain/HeightMatrix.cpp	/^HeightMatrix::Fill(const RasterMap &map, const GeoBounds &bounds,$/;"	f	class:HeightMatrix
Fill	src/Terrain/HeightMatrix.cpp	/^HeightMatrix::Fill(const RasterMap &map, const WindowProjection &projection,$/;"	f	class:HeightMatrix
Fill	src/io/BufferedReader.cxx	/^BufferedReader::Fill(bool need_more)$/;"	f	class:BufferedReader
FillBrush	src/Dialogs/Airspace/AirspaceCRendererSettingsPanel.hpp	/^    FillBrush,$/;"	e	enum:AirspaceClassRendererSettingsPanel::ControlIndex
FillBuffer	src/io/GunzipReader.cxx	/^GunzipReader::FillBuffer()$/;"	f	class:GunzipReader
FillCircle	src/ui/canvas/memory/RasterCanvas.hpp	/^  void FillCircle(int x, int y, unsigned rad, color_type color) {$/;"	f	class:RasterCanvas
FillCircle	src/ui/canvas/memory/RasterCanvas.hpp	/^  void FillCircle(int x, int y, unsigned rad, color_type color,$/;"	f	class:RasterCanvas
FillColor	src/Dialogs/Airspace/AirspaceCRendererSettingsPanel.hpp	/^    FillColor,$/;"	e	enum:AirspaceClassRendererSettingsPanel::ControlIndex
FillDirectionEnum	src/Dialogs/Airspace/AirspaceList.cpp	/^FillDirectionEnum(DataFieldEnum &df)$/;"	f	file:
FillDistanceEnum	src/Dialogs/Airspace/AirspaceList.cpp	/^FillDistanceEnum(DataFieldEnum &df)$/;"	f	file:
FillLastUsedList	src/Dialogs/Waypoint/WaypointList.cpp	/^FillLastUsedList(WaypointList &list,$/;"	f	file:
FillList	src/Dialogs/Waypoint/WaypointList.cpp	/^FillList(WaypointList &list, const Waypoints &src,$/;"	f	file:
FillMode	src/Dialogs/Airspace/AirspaceCRendererSettingsPanel.hpp	/^    FillMode,$/;"	e	enum:AirspaceClassRendererSettingsPanel::ControlIndex
FillMode	src/Renderer/AirspaceRendererSettings.hpp	/^  enum class FillMode: uint8_t {$/;"	c	struct:AirspaceRendererSettings
FillMode	src/Renderer/AirspaceRendererSettings.hpp	/^  enum class FillMode: uint8_t$/;"	c	struct:AirspaceClassRendererSettings
FillPCMBuffer	src/Audio/PCMPlayer.cpp	/^PCMPlayer::FillPCMBuffer(int16_t *buffer, size_t n)$/;"	f	class:PCMPlayer
FillPager	src/Dialogs/Device/Vega/VegaConfigurationDialog.cpp	/^FillPager(PagerWidget &pager)$/;"	f	file:
FillPixel	src/ui/canvas/memory/MMX.hpp	/^  static __m64 FillPixel(__m64 x, __m64 v_alpha, __m64 v_color) {$/;"	f	class:MMXAlphaPixelOperations
FillPixels	src/ui/canvas/memory/MMX.hpp	/^  void FillPixels(BGRA8Color *p, unsigned n, BGRA8Color c) const {$/;"	f	class:MMXAlphaPixelOperations
FillPixels	src/ui/canvas/memory/MMX.hpp	/^  void FillPixels(Luminosity8 *p, unsigned n, Luminosity8 c) const {$/;"	f	class:MMXAlphaPixelOperations
FillPixels	src/ui/canvas/memory/MMX.hpp	/^  void FillPixels(__m64 *p, unsigned n, __m64 v_color) const {$/;"	f	class:MMXAlphaPixelOperations
FillPixels	src/ui/canvas/memory/NEON.hpp	/^  void FillPixels(Luminosity8 *p, unsigned n, Luminosity8 c) const {$/;"	f	class:NEONAlphaPixelOperations
FillPixels	src/ui/canvas/memory/NEON.hpp	/^  void FillPixels(uint8_t *p, unsigned n, uint8_t c) const {$/;"	f	class:NEONAlphaPixelOperations
FillPixels	src/ui/canvas/memory/Optimised.hpp	/^  void FillPixels(rpointer p, unsigned n, color_type c) const {$/;"	f	class:SelectOptimisedPixelOperations
FillPixels	src/ui/canvas/memory/PixelOperations.hpp	/^  void FillPixels(pointer p, unsigned n, source_color_type c) const {$/;"	f	struct:PerPixelOperations
FillPixels	src/ui/canvas/memory/PixelTraits.hpp	/^  static void FillPixels(pointer p, unsigned n, color_type c) {$/;"	f	struct:BGRAPixelTraits
FillPixels	src/ui/canvas/memory/PixelTraits.hpp	/^  static void FillPixels(pointer p, unsigned n, color_type c) {$/;"	f	struct:GreyscalePixelTraits
FillPointTypes	src/Dialogs/Settings/Panels/TaskDefaultsConfigPanel.cpp	/^FillPointTypes(DataFieldEnum &df,$/;"	f	file:
FillPointTypes	src/Dialogs/Settings/Panels/TaskDefaultsConfigPanel.cpp	/^FillPointTypes(WndProperty &wp,$/;"	f	file:
FillPolygon	src/ui/canvas/memory/RasterCanvas.hpp	/^  void FillPolygon(const PixelPoint *points, unsigned n, color_type color) {$/;"	f	class:RasterCanvas
FillPolygon	src/ui/canvas/memory/RasterCanvas.hpp	/^  void FillPolygon(const PixelPoint *points, unsigned n, color_type color,$/;"	f	class:RasterCanvas
FillPolygonFast	src/ui/canvas/memory/RasterCanvas.hpp	/^  void FillPolygonFast(const PixelPoint *points, unsigned n, color_type color,$/;"	f	class:RasterCanvas
FillRectangle	src/ui/canvas/memory/RasterCanvas.hpp	/^  void FillRectangle(int x1, int y1, int x2, int y2, color_type c) {$/;"	f	class:RasterCanvas
FillRectangle	src/ui/canvas/memory/RasterCanvas.hpp	/^  void FillRectangle(int x1, int y1, int x2, int y2, color_type c,$/;"	f	class:RasterCanvas
FillVario	src/Computer/BasicComputer.cpp	/^FillVario(MoreData &data)$/;"	f	file:
Filter	src/Math/Filter.hpp	/^class Filter {$/;"	c
FilterAirspaces	src/Engine/Airspace/AirspaceSorter.cpp	/^FilterAirspaces(const Airspaces &airspaces, const GeoPoint &location,$/;"	f
FilterEncodingNode	src/Topography/shapelib/mapserver.h	/^  } FilterEncodingNode;$/;"	t	typeref:struct:_FilterNode
FilterMode	src/Dialogs/Airspace/AirspaceList.cpp	/^AirspaceListWidget::FilterMode(bool direction)$/;"	f	class:AirspaceListWidget
FilterNodeType	src/Topography/shapelib/mapserver.h	/^  } FilterNodeType;$/;"	t	typeref:enum:__anon21
FinalGlide	src/Replay/TaskAutoPilot.hpp	/^    FinalGlide$/;"	e	enum:TaskAutoPilot::AcState
FinalGlideBarDisplayMode	src/MapSettings.hpp	/^enum class FinalGlideBarDisplayMode: uint8_t {$/;"	c
FinalGlideBarDisplayMode	src/Profile/ProfileKeys.cpp	/^const char FinalGlideBarDisplayMode[] = "FinalGlideBarDisplayMode";$/;"	m	namespace:ProfileKeys	file:
FinalGlideBarDisplayModeControl	src/Dialogs/Settings/Panels/GaugesConfigPanel.cpp	/^  FinalGlideBarDisplayModeControl,$/;"	e	enum:ControlIndex	file:
FinalGlideBarLook	src/Look/FinalGlideBarLook.hpp	/^struct FinalGlideBarLook {$/;"	s
FinalGlideBarRenderer	src/Renderer/FinalGlideBarRenderer.hpp	/^  FinalGlideBarRenderer(const FinalGlideBarLook &_look,$/;"	f	class:FinalGlideBarRenderer
FinalGlideBarRenderer	src/Renderer/FinalGlideBarRenderer.hpp	/^class FinalGlideBarRenderer {$/;"	c
FinalGlideTerrain	src/Computer/Settings.hpp	/^  enum class FinalGlideTerrain : uint8_t {$/;"	c	struct:FeaturesSettings
FinalGlideTerrain	src/Dialogs/Settings/Panels/RouteConfigPanel.cpp	/^  FinalGlideTerrain,$/;"	e	enum:ControlIndex	file:
FinalGlideTerrain	src/Profile/ProfileKeys.cpp	/^const char FinalGlideTerrain[] = "FinalGlideTerrain";$/;"	m	namespace:ProfileKeys	file:
Finalize	src/util/MD5.cpp	/^MD5::Finalize()$/;"	f	class:MD5
FinalizeBuffer	src/Logger/GRecord.cpp	/^GRecord::FinalizeBuffer()$/;"	f	class:GRecord
Find	src/Cloud/Client.cpp	/^CloudClientContainer::Find(uint64_t key)$/;"	f	class:CloudClientContainer
Find	src/FLARM/NameDatabase.cpp	/^FlarmNameDatabase::Find(FlarmId id) const$/;"	f	class:FlarmNameDatabase
Find	src/FLARM/NameDatabase.cpp	/^FlarmNameDatabase::Find(const TCHAR *name) const$/;"	f	class:FlarmNameDatabase
Find	src/Form/DataField/Enum.cpp	/^DataFieldEnum::Find(const TCHAR *text) const$/;"	f	class:DataFieldEnum
Find	src/Form/DataField/Enum.cpp	/^DataFieldEnum::Find(unsigned id) const$/;"	f	class:DataFieldEnum
Find	src/Form/DataField/File.cpp	/^FileDataField::Find(Path path) const$/;"	f	class:FileDataField
Find	src/Kobo/WifiDialog.cpp	/^WifiListWidget::Find(const WifiConfiguredNetworkInfo &c)$/;"	f	class:WifiListWidget
FindActiveIndex	src/Dialogs/Weather/MapOverlayWidget.cpp	/^  int FindActiveIndex() const {$/;"	f	class:final	file:
FindAndResolveInterfaceName	src/net/Resolver.cxx	/^FindAndResolveInterfaceName(char *host, size_t size)$/;"	f	file:
FindAt	src/ui/window/custom/WList.cpp	/^WindowList::FindAt(PixelPoint p)$/;"	f	class:WindowList
FindButton	src/Widget/KeyboardWidget.cpp	/^KeyboardWidget::FindButton(unsigned ch)$/;"	f	class:KeyboardWidget
FindByBSSID	src/Kobo/WifiDialog.cpp	/^WifiListWidget::FindByBSSID(const char *bssid)$/;"	f	class:WifiListWidget
FindByEvent	src/Menu/MenuData.cpp	/^Menu::FindByEvent(unsigned event) const$/;"	f	class:Menu
FindByID	src/Kobo/WifiDialog.cpp	/^WifiListWidget::FindByID(int id)$/;"	f	class:WifiListWidget
FindByName	src/Repository/FileRepository.cpp	/^FileRepository::FindByName(const char *name) const$/;"	f	class:FileRepository
FindChild	src/util/RadixTree.hpp	/^    struct Match FindChild(const TCHAR *key) const {$/;"	f	struct:RadixTree::Node
FindClearingPair	src/Engine/Route/AirspaceRoute.cpp	/^AirspaceRoute::FindClearingPair(const SearchPointVector &spv,$/;"	f	class:AirspaceRoute
FindCloudBase	src/Atmosphere/CuSonde.cpp	/^CuSonde::FindCloudBase(unsigned short level)$/;"	f	class:CuSonde
FindColumnAt	src/Form/DigitEntry.cpp	/^DigitEntry::FindColumnAt(unsigned x) const$/;"	f	class:DigitEntry
FindControl	src/ui/window/custom/WList.cpp	/^WindowList::FindControl(List::iterator i, WindowList::List::iterator end)$/;"	f	class:WindowList
FindControl	src/ui/window/custom/WList.cpp	/^WindowList::FindControl(WindowList::List::reverse_iterator i,$/;"	f	class:WindowList
FindDataPath	src/LocalPath.cpp	/^FindDataPath()$/;"	f	file:
FindDataPathAtModule	src/LocalPath.cpp	/^FindDataPathAtModule(HMODULE hModule)$/;"	f	file:
FindDecimalPoint	src/Form/DigitEntry.cpp	/^DigitEntry::FindDecimalPoint() const$/;"	f	class:DigitEntry
FindDefaultBoldFont	src/ui/canvas/custom/Files.cpp	/^FindDefaultBoldFont()$/;"	f
FindDefaultBoldItalicFont	src/ui/canvas/custom/Files.cpp	/^FindDefaultBoldItalicFont()$/;"	f
FindDefaultFont	src/ui/canvas/custom/Files.cpp	/^FindDefaultFont()$/;"	f
FindDefaultItalicFont	src/ui/canvas/custom/Files.cpp	/^FindDefaultItalicFont()$/;"	f
FindDefaultMonospaceFont	src/ui/canvas/custom/Files.cpp	/^FindDefaultMonospaceFont()$/;"	f
FindDriverByName	src/Device/Register.cpp	/^FindDriverByName(const TCHAR *name)$/;"	f
FindDriverDisplayName	src/Device/Register.cpp	/^FindDriverDisplayName(const TCHAR *name)$/;"	f
FindEditableLeft	src/Form/DigitEntry.cpp	/^DigitEntry::FindEditableLeft(int i) const$/;"	f	class:DigitEntry
FindEditableRight	src/Form/DigitEntry.cpp	/^DigitEntry::FindEditableRight(unsigned i) const$/;"	f	class:DigitEntry
FindEntryLetter	src/Dialogs/KnobTextEntry.cpp	/^FindEntryLetter(TCHAR ch)$/;"	f	file:
FindFile	src/ui/canvas/custom/Files.cpp	/^FindFile(const char *const*list)$/;"	f	file:
FindFirstControl	src/ui/window/custom/WList.cpp	/^WindowList::FindFirstControl()$/;"	f	class:WindowList
FindFirstRecordByCallSign	src/FLARM/FlarmNetDatabase.cpp	/^FlarmNetDatabase::FindFirstRecordByCallSign(const TCHAR *cn) const$/;"	f	class:FlarmNetDatabase
FindFlaggedHome	src/Waypoint/HomeGlue.cpp	/^WaypointGlue::FindFlaggedHome(Waypoints &waypoints,$/;"	f	class:WaypointGlue
FindFreeSpace	src/UtilsSystem.cpp	/^unsigned long FindFreeSpace(const TCHAR *path) {$/;"	f
FindHome	src/Engine/Waypoint/Waypoints.cpp	/^Waypoints::FindHome()$/;"	f	class:Waypoints
FindHomeId	src/Waypoint/HomeGlue.cpp	/^WaypointGlue::FindHomeId(Waypoints &waypoints,$/;"	f	class:WaypointGlue
FindHomeLocation	src/Waypoint/HomeGlue.cpp	/^WaypointGlue::FindHomeLocation(Waypoints &waypoints,$/;"	f	class:WaypointGlue
FindHorizontal	src/Airspace/NearestAirspace.cpp	/^FindHorizontal(const GeoPoint &location,$/;"	f	file:
FindHorizontal	src/Airspace/NearestAirspace.cpp	/^NearestAirspace::FindHorizontal(const MoreData &basic,$/;"	f	class:NearestAirspace
FindIdByName	src/FLARM/TrafficDatabases.cpp	/^TrafficDatabases::FindIdByName(const TCHAR *name) const$/;"	f	class:TrafficDatabases
FindIdsByCallSign	src/FLARM/FlarmDetails.cpp	/^FlarmDetails::FindIdsByCallSign(const TCHAR *cn, FlarmId array[],$/;"	f	class:FlarmDetails
FindIdsByCallSign	src/FLARM/FlarmNetDatabase.cpp	/^FlarmNetDatabase::FindIdsByCallSign(const TCHAR *cn, FlarmId array[],$/;"	f	class:FlarmNetDatabase
FindIdsByName	src/FLARM/TrafficDatabases.cpp	/^TrafficDatabases::FindIdsByName(const TCHAR *name,$/;"	f	class:TrafficDatabases
FindInSearchPaths	src/ui/canvas/custom/Files.cpp	/^FindInSearchPaths(Path suffix)$/;"	f	file:
FindItem	src/Dialogs/Traffic/TrafficList.cpp	/^  ItemList::iterator FindItem(FlarmId id) {$/;"	f	class:TrafficListWidget	file:
FindItemByName	src/Dialogs/Weather/MapOverlayWidget.cpp	/^  int FindItemByName(const TCHAR *name) const {$/;"	f	class:final	file:
FindLanguage	src/Language/LanguageGlue.cpp	/^FindLanguage(WORD language)$/;"	f	file:
FindLanguage	src/Language/LanguageGlue.cpp	/^FindLanguage(const TCHAR *resource)$/;"	f	file:
FindLanguage	src/Units/UnitsGlue.cpp	/^FindLanguage(LANGID lang)$/;"	f	file:
FindLanguage	src/Units/UnitsGlue.cpp	/^FindLanguage(const TCHAR* lang)$/;"	f	file:
FindLastControl	src/ui/window/custom/WList.cpp	/^WindowList::FindLastControl()$/;"	f	class:WindowList
FindLatestOverlay	src/Weather/PCMet/Overlays.cpp	/^FindLatestOverlay(PCMet::OverlayInfo &info)$/;"	f	file:
FindMarkerSegment	src/Terrain/RasterTileCache.cpp	/^RasterTileCache::FindMarkerSegment(uint32_t file_offset) const$/;"	f	class:RasterTileCache
FindMatTurnpoint	src/Monitor/MatTaskMonitor.cpp	/^FindMatTurnpoint()$/;"	f	file:
FindMaximumAlert	src/FLARM/List.cpp	/^TrafficList::FindMaximumAlert() const$/;"	f	class:TrafficList
FindMenuItemByEvent	src/Input/InputEvents.cpp	/^FindMenuItemByEvent(InputEvents::Mode mode, InputEvents::Mode overlay_mode,$/;"	f	file:
FindNameById	src/FLARM/TrafficDatabases.cpp	/^TrafficDatabases::FindNameById(FlarmId id) const$/;"	f	class:TrafficDatabases
FindNextChildControl	src/ui/window/custom/WList.cpp	/^WindowList::FindNextChildControl(Window *reference)$/;"	f	class:WindowList
FindNonWhiteSpace	src/XML/Parser.cpp	/^FindNonWhiteSpace(XML::Parser *pXML)$/;"	f	file:
FindNumberLeft	src/Form/DigitEntry.cpp	/^DigitEntry::FindNumberLeft(int i) const$/;"	f	class:DigitEntry
FindPath	src/Dialogs/ProfileListDialog.cpp	/^ProfileListWidget::FindPath(Path path) const$/;"	f	class:ProfileListWidget
FindPenultimateFinished	src/Engine/ThermalBand/ThermalEncounterBand.cpp	/^ThermalEncounterBand::FindPenultimateFinished(const unsigned index,$/;"	f	class:ThermalEncounterBand
FindPositiveArrival	src/Engine/Route/ReachFan.cpp	/^ReachFan::FindPositiveArrival(const AGeoPoint dest, const RoutePolars &rpolars,$/;"	f	class:ReachFan
FindPositiveArrival	src/Engine/Route/RoutePlanner.hpp	/^  bool FindPositiveArrival(const AGeoPoint &dest,$/;"	f	class:RoutePlanner
FindPositiveArrival	src/Task/RoutePlannerGlue.cpp	/^RoutePlannerGlue::FindPositiveArrival(const AGeoPoint &dest,$/;"	f	class:RoutePlannerGlue
FindPreviousChildControl	src/ui/window/custom/WList.cpp	/^WindowList::FindPreviousChildControl(Window *reference)$/;"	f	class:WindowList
FindQNHFromPressure	src/Atmosphere/Pressure.cpp	/^AtmosphericPressure::FindQNHFromPressure(const AtmosphericPressure pressure,$/;"	f	class:AtmosphericPressure
FindRecordById	src/FLARM/FlarmNetDatabase.hpp	/^  const FlarmNetRecord *FindRecordById(FlarmId id) const {$/;"	f	class:FlarmNetDatabase
FindRecordsByCallSign	src/FLARM/FlarmNetDatabase.cpp	/^FlarmNetDatabase::FindRecordsByCallSign(const TCHAR *cn,$/;"	f	class:FlarmNetDatabase
FindRemoteFile	src/Dialogs/FileManager.cpp	/^FindRemoteFile(const FileRepository &repository, const TCHAR *name)$/;"	f	file:
FindRemoteFile	src/Dialogs/FileManager.cpp	/^FindRemoteFile(const FileRepository &repository, const char *name)$/;"	f	file:
FindRetrowNested	src/util/Exception.hxx	/^FindRetrowNested(std::exception_ptr ep)$/;"	f
FindSolution	src/Engine/Route/RoutePlanner.cpp	/^RoutePlanner::FindSolution(const RoutePoint &final_point,$/;"	f	class:RoutePlanner
FindSoonestAirspace	src/Engine/Airspace/SoonestAirspace.cpp	/^FindSoonestAirspace(const Airspaces &airspaces,$/;"	f
FindSpecial	src/Device/Driver/FLARM/BinaryProtocol.cpp	/^FindSpecial(const uint8_t *const begin, const uint8_t *const end)$/;"	f	file:
FindStatusMessage	src/StatusMessage.cpp	/^FindStatusMessage(const TCHAR *key)$/;"	f
FindThermalHeight	src/Atmosphere/CuSonde.cpp	/^CuSonde::FindThermalHeight(unsigned short level)$/;"	f	class:CuSonde
FindTraffic	src/FLARM/List.hpp	/^  FlarmTraffic *FindTraffic(FlarmId id) {$/;"	f	struct:TrafficList
FindTraffic	src/FLARM/List.hpp	/^  FlarmTraffic *FindTraffic(const TCHAR *name) {$/;"	f	struct:TrafficList
FindTraffic	src/FLARM/List.hpp	/^  const FlarmTraffic *FindTraffic(FlarmId id) const {$/;"	f	struct:TrafficList
FindTraffic	src/FLARM/List.hpp	/^  const FlarmTraffic *FindTraffic(const TCHAR *name) const {$/;"	f	struct:TrafficList
FindTraffic	src/GliderLink/List.hpp	/^  GliderLinkTraffic *FindTraffic(GliderLinkId id) {$/;"	f	struct:GliderLinkTrafficList
FindTraffic	src/GliderLink/List.hpp	/^  const GliderLinkTraffic *FindTraffic(GliderLinkId id) const {$/;"	f	struct:GliderLinkTrafficList
FindVertical	src/Airspace/NearestAirspace.cpp	/^NearestAirspace::FindVertical(const MoreData &basic,$/;"	f	class:NearestAirspace
FindVisibleBySSID	src/Kobo/WifiDialog.cpp	/^WifiListWidget::FindVisibleBySSID(const char *ssid)$/;"	f	class:WifiListWidget
FindWaypoint	src/Waypoint/WaypointDetailsReader.cpp	/^FindWaypoint(Waypoints &way_points, const TCHAR *name)$/;"	f	file:
FinePixelDistance	src/Terrain/RasterProjection.cpp	/^RasterProjection::FinePixelDistance(const GeoPoint &location,$/;"	f	class:RasterProjection
Finish	src/Computer/FlyingComputer.cpp	/^FlyingComputer::Finish(FlyingState &flying, double time)$/;"	f	class:FlyingComputer
Finish	src/Renderer/OZRenderer.cpp	/^OZRenderer::Finish(Canvas &canvas, Layer layer) const$/;"	f	class:OZRenderer
Finish	src/Screen/StopWatch.hpp	/^  void Finish() {$/;"	f	class:ScreenStopWatch
Finish	src/UIUtil/GestureManager.cpp	/^GestureManager::Finish()$/;"	f	class:GestureManager
Finish	src/UIUtil/TrackingGestureManager.cpp	/^TrackingGestureManager::Finish()$/;"	f	class:TrackingGestureManager
FinishAlt	src/Dialogs/StatusPanels/RulesStatusPanel.cpp	/^  FinishAlt,$/;"	e	enum:Controls	file:
FinishBody	src/net/http/Request.cxx	/^CurlRequest::FinishBody()$/;"	f	class:CurlRequest
FinishConstraints	src/Engine/Task/Ordered/FinishConstraints.hpp	/^struct FinishConstraints {$/;"	s
FinishHeaders	src/net/http/Request.cxx	/^CurlRequest::FinishHeaders()$/;"	f	class:CurlRequest
FinishHeightRef	src/Dialogs/Settings/Panels/TaskRulesConfigPanel.cpp	/^  FinishHeightRef,$/;"	e	enum:ControlIndex	file:
FinishHeightRef	src/Profile/ProfileKeys.cpp	/^const char FinishHeightRef[] = "FinishHeightRef";$/;"	m	namespace:ProfileKeys	file:
FinishIsCurrent	src/Monitor/MatTaskMonitor.cpp	/^FinishIsCurrent(const OrderedTask &task)$/;"	f	file:
FinishIsCurrent	src/Monitor/MatTaskMonitor.cpp	/^FinishIsCurrent(const ProtectedTaskManager &task_manager)$/;"	f	file:
FinishMinHeight	src/Dialogs/Settings/Panels/TaskRulesConfigPanel.cpp	/^  FinishMinHeight,$/;"	e	enum:ControlIndex	file:
FinishMinHeight	src/Profile/ProfileKeys.cpp	/^const char FinishMinHeight[] = "FinishMinHeight";$/;"	m	namespace:ProfileKeys	file:
FinishPoint	src/Engine/Task/Ordered/Points/FinishPoint.cpp	/^FinishPoint::FinishPoint(std::unique_ptr<ObservationZonePoint> &&_oz, WaypointPtr && wp,$/;"	f	class:FinishPoint
FinishPolygon	src/Topography/ShapeRenderer.hpp	/^  void FinishPolygon(Canvas &canvas) {$/;"	f	class:ShapeRenderer
FinishPolyline	src/Topography/ShapeRenderer.hpp	/^  void FinishPolyline(Canvas &canvas) {$/;"	f	class:ShapeRenderer
FinishPreliminary	src/Dialogs/WidgetDialog.cpp	/^WidgetDialog::FinishPreliminary(Widget *_widget)$/;"	f	class:WidgetDialog
FinishRadius	src/Dialogs/Settings/Panels/TaskDefaultsConfigPanel.cpp	/^  FinishRadius,$/;"	e	enum:ControlIndex	file:
FinishRadius	src/Profile/ProfileKeys.cpp	/^const char FinishRadius[] = "FinishRadius";$/;"	m	namespace:ProfileKeys	file:
FinishStartup	src/MainWindow.cpp	/^MainWindow::FinishStartup()$/;"	f	class:MainWindow
FinishTileUpdate	src/Terrain/RasterTileCache.cpp	/^RasterTileCache::FinishTileUpdate()$/;"	f	class:RasterTileCache
FinishType	src/Dialogs/Settings/Panels/TaskDefaultsConfigPanel.cpp	/^  FinishType,$/;"	e	enum:ControlIndex	file:
FinishType	src/Profile/ProfileKeys.cpp	/^const char FinishType[] = "FinishType";$/;"	m	namespace:ProfileKeys	file:
Finish_Derived_Info	src/Computer/GlideComputerBlackboard.hpp	/^  DerivedInfo Finish_Derived_Info;$/;"	m	class:GlideComputerBlackboard
Fire	src/lua/InputEvent.cpp	/^bool LuaEventRegistry<T>::Fire(T event) {$/;"	f	class:LuaEventRegistry
FireGesture	src/lua/InputEvent.cpp	/^bool Lua::FireGesture(const TCHAR* gesture) {$/;"	f	class:Lua
FireGlideComputerEvent	src/lua/InputEvent.cpp	/^bool Lua::FireGlideComputerEvent(unsigned event) {$/;"	f	class:Lua
FireKey	src/lua/InputEvent.cpp	/^bool Lua::FireKey(unsigned key) {$/;"	f	class:Lua
FireNMEAEvent	src/lua/InputEvent.cpp	/^bool Lua::FireNMEAEvent(unsigned event) {$/;"	f	class:Lua
FirstIntersecting	src/Engine/Route/AirspaceRoute.cpp	/^AirspaceRoute::FirstIntersecting(const RouteLink &e) const$/;"	f	class:AirspaceRoute
FirstIntersection	src/Terrain/Intersection.cpp	/^RasterTileCache::FirstIntersection(const SignedRasterLocation origin,$/;"	f	class:RasterTileCache
FirstIntersection	src/Terrain/RasterMap.cpp	/^RasterMap::FirstIntersection(const GeoPoint &origin, const int h_origin,$/;"	f	class:RasterMap
FirstRun	src/MergeThread.hpp	/^  void FirstRun() {$/;"	f	class:final
FirstTraffic	src/FLARM/List.hpp	/^  const FlarmTraffic *FirstTraffic() const {$/;"	f	struct:TrafficList
FitButtonRow	src/Form/ButtonPanel.cpp	/^ButtonPanel::FitButtonRow(unsigned start, unsigned total_width) const$/;"	f	class:ButtonPanel
Fix	src/Device/Driver/IMI/Protocol/Types.hpp	/^  struct Fix$/;"	s	namespace:IMI
FixB	src/Device/Driver/IMI/Protocol/Types.hpp	/^  struct FixB$/;"	s	namespace:IMI
FixB2	src/Device/Driver/IMI/Protocol/Types.hpp	/^  struct FixB2$/;"	s	namespace:IMI
FixChecksum	src/Device/Driver/IMI/Protocol/Checksum.cpp	/^IMI::IMIBYTE IMI::FixChecksum(const void *message, unsigned bytes)$/;"	f	class:IMI
FixE	src/Device/Driver/IMI/Protocol/Types.hpp	/^  struct FixE$/;"	s	namespace:IMI
FixK	src/Device/Driver/IMI/Protocol/Types.hpp	/^  struct FixK$/;"	s	namespace:IMI
FixPacket	src/Tracking/SkyLines/Protocol.hpp	/^struct FixPacket {$/;"	s	namespace:SkyLinesTracking
FixQuality	src/NMEA/GPSState.hpp	/^enum class FixQuality: uint8_t {$/;"	c
FixedWindowWidget	src/Widget/FixedWindowWidget.hpp	/^class FixedWindowWidget : public WindowWidget {$/;"	c
Flags	src/Dialogs/Device/DeviceListDialog.cpp	/^  struct Flags {$/;"	s	class:final	file:
Flags	src/Engine/Waypoint/Waypoint.hpp	/^  struct Flags {$/;"	s	struct:Waypoint
FlapPosition	src/NMEA/SwitchState.hpp	/^  enum class FlapPosition : uint8_t {$/;"	c	struct:SwitchState
FlarmAutoZoom	src/Profile/ProfileKeys.cpp	/^const char FlarmAutoZoom[] = "FlarmRadarAutoZoom";$/;"	m	namespace:ProfileKeys	file:
FlarmCalculations	src/FLARM/FlarmCalculations.hpp	/^class FlarmCalculations$/;"	c
FlarmColor	src/FLARM/Color.hpp	/^enum class FlarmColor : uint8_t {$/;"	c
FlarmColorDatabase	src/FLARM/ColorDatabase.hpp	/^class FlarmColorDatabase {$/;"	c
FlarmColorPen	src/Gauge/FlarmTrafficWindow.cpp	/^FlarmColorPen(const FlarmTrafficLook &look, FlarmColor color)$/;"	f	file:
FlarmComputer	src/FLARM/FlarmComputer.hpp	/^class FlarmComputer {$/;"	c
FlarmCreateOnPort	src/Device/Driver/FLARM/Register.cpp	/^FlarmCreateOnPort(const DeviceConfig &config, Port &com_port)$/;"	f	file:
FlarmData	src/FLARM/Data.hpp	/^struct FlarmData {$/;"	s
FlarmDetails	src/FLARM/FlarmDetails.hpp	/^namespace FlarmDetails$/;"	n
FlarmDevice	src/Device/Driver/FLARM/Device.hpp	/^  FlarmDevice(Port &_port)$/;"	f	class:FlarmDevice
FlarmDevice	src/Device/Driver/FLARM/Device.hpp	/^class FlarmDevice: public AbstractDevice$/;"	c
FlarmError	src/FLARM/Error.hpp	/^struct FlarmError {$/;"	s
FlarmFile	src/Dialogs/Settings/Panels/SiteConfigPanel.cpp	/^  FlarmFile$/;"	e	enum:ControlIndex	file:
FlarmFile	src/Profile/ProfileKeys.cpp	/^const char FlarmFile[] = "FlarmFile";$/;"	m	namespace:ProfileKeys	file:
FlarmFileChanged	src/UtilsSettings.cpp	/^bool FlarmFileChanged = false;$/;"	v
FlarmFriends	src/FLARM/Friends.hpp	/^namespace FlarmFriends$/;"	n
FlarmId	src/FLARM/FlarmId.hpp	/^  FlarmId(uint32_t _value):value(_value) {}$/;"	f	class:FlarmId
FlarmId	src/FLARM/FlarmId.hpp	/^class FlarmId {$/;"	c
FlarmLocation	src/Profile/ProfileKeys.cpp	/^const char FlarmLocation[] = "FlarmLocation";$/;"	m	namespace:ProfileKeys	file:
FlarmNameDatabase	src/FLARM/NameDatabase.hpp	/^class FlarmNameDatabase {$/;"	c
FlarmNetDatabase	src/FLARM/FlarmNetDatabase.hpp	/^class FlarmNetDatabase {$/;"	c
FlarmNetReader	src/FLARM/FlarmNetReader.hpp	/^namespace FlarmNetReader$/;"	n
FlarmNetRecord	src/FLARM/FlarmNetRecord.hpp	/^struct FlarmNetRecord {$/;"	s
FlarmNorthUp	src/Profile/ProfileKeys.cpp	/^const char FlarmNorthUp[] = "FlarmRadarNorthUp";$/;"	m	namespace:ProfileKeys	file:
FlarmSideData	src/Profile/ProfileKeys.cpp	/^const char FlarmSideData[] = "FlarmRadarSideData";$/;"	m	namespace:ProfileKeys	file:
FlarmStatus	src/FLARM/Status.hpp	/^struct FlarmStatus {$/;"	s
FlarmTraffic	src/FLARM/Traffic.hpp	/^struct FlarmTraffic {$/;"	s
FlarmTrafficControl	src/Gauge/BigTrafficWidget.cpp	/^  FlarmTrafficControl(const FlarmTrafficLook &look)$/;"	f	class:FlarmTrafficControl
FlarmTrafficControl	src/Gauge/BigTrafficWidget.cpp	/^class FlarmTrafficControl : public FlarmTrafficWindow {$/;"	c	file:
FlarmTrafficDetailsWidget	src/Dialogs/Traffic/FlarmTrafficDetails.cpp	/^  FlarmTrafficDetailsWidget(WndForm &_dialog, FlarmId _target_id)$/;"	f	class:final
FlarmTrafficLook	src/Look/FlarmTrafficLook.hpp	/^struct FlarmTrafficLook {$/;"	s
FlarmTrafficWindow	src/Gauge/FlarmTrafficWindow.cpp	/^FlarmTrafficWindow::FlarmTrafficWindow(const FlarmTrafficLook &_look,$/;"	f	class:FlarmTrafficWindow
FlarmTrafficWindow	src/Gauge/FlarmTrafficWindow.hpp	/^class FlarmTrafficWindow : public PaintWindow {$/;"	c
FlarmVersion	src/FLARM/Version.hpp	/^struct FlarmVersion {$/;"	s
FlashRead	src/Device/Driver/IMI/Protocol/Communication.cpp	/^IMI::FlashRead(Port &port, void *buffer, unsigned address, unsigned size,$/;"	f	class:IMI
FlatBoundingBox	src/Engine/Contest/Solvers/TriangleContest.hpp	/^       bounding_box(FlatBoundingBox(parent.GetPoint(min).GetFlatLocation()))$/;"	f	struct:TriangleContest::TurnPointRange
FlatBoundingBox	src/Geo/Flat/FlatBoundingBox.hpp	/^  FlatBoundingBox(const FlatGeoPoint ll, const FlatGeoPoint ur)$/;"	f	struct:FlatBoundingBox
FlatBoundingBox	src/Geo/Flat/FlatBoundingBox.hpp	/^  FlatBoundingBox(const FlatGeoPoint loc, const unsigned range = 0)$/;"	f	struct:FlatBoundingBox
FlatBoundingBox	src/Geo/Flat/FlatBoundingBox.hpp	/^struct FlatBoundingBox$/;"	s
FlatDistanceTo	src/Engine/Waypoint/Waypoint.hpp	/^  unsigned FlatDistanceTo(const FlatGeoPoint &f) const {$/;"	f	struct:Waypoint
FlatDistanceTo	src/Geo/SearchPoint.hpp	/^  unsigned FlatDistanceTo(const SearchPoint &sp) const {$/;"	f	class:SearchPoint
FlatEllipse	src/Geo/Flat/FlatEllipse.cpp	/^FlatEllipse::FlatEllipse(const FlatPoint &_f1, const FlatPoint &_f2,$/;"	f	class:FlatEllipse
FlatEllipse	src/Geo/Flat/FlatEllipse.hpp	/^class FlatEllipse$/;"	c
FlatGeoPoint	src/Geo/Flat/FlatGeoPoint.hpp	/^struct FlatGeoPoint : IntPoint2D {$/;"	s
FlatGeoPoint_HPP	src/Geo/Flat/FlatGeoPoint.hpp	24;"	d
FlatLine	src/Geo/Flat/FlatLine.hpp	/^  FlatLine(const FlatPoint _p1, const FlatPoint _p2):Base(_p1, _p2) {}$/;"	f	class:FlatLine
FlatLine	src/Geo/Flat/FlatLine.hpp	/^class FlatLine : public Line2D<FlatPoint>$/;"	c
FlatPoint	src/Geo/Flat/FlatPoint.hpp	/^struct FlatPoint : DoublePoint2D$/;"	s
FlatProjection	src/Geo/Flat/FlatProjection.hpp	/^  explicit FlatProjection(const GeoPoint &_center) {$/;"	f	class:FlatProjection
FlatProjection	src/Geo/Flat/FlatProjection.hpp	/^class FlatProjection {$/;"	c
FlatRay	src/Geo/Flat/FlatRay.hpp	/^  FlatRay(const FlatGeoPoint& from, const FlatGeoPoint& to)$/;"	f	class:FlatRay
FlatRay	src/Geo/Flat/FlatRay.hpp	/^class FlatRay {$/;"	c
FlatSquareDistanceTo	src/Geo/SearchPoint.hpp	/^  unsigned FlatSquareDistanceTo(const SearchPoint& sp) const {$/;"	f	class:SearchPoint
FlatTriangleFan	src/Engine/Route/FlatTriangleFan.hpp	/^class FlatTriangleFan {$/;"	c
FlatTriangleFanTree	src/Engine/Route/FlatTriangleFanTree.hpp	/^class FlatTriangleFanTree: public FlatTriangleFan$/;"	c
FlatTriangleFanVisitor	src/Engine/Route/FlatTriangleFanTree.hpp	/^class FlatTriangleFanVisitor {$/;"	c
Flight	src/Device/Driver/IMI/Protocol/Types.hpp	/^  struct Flight$/;"	s	namespace:IMI
FlightDownload	src/Device/Driver/IMI/Protocol/Protocol.cpp	/^IMI::FlightDownload(Port &port, const RecordedFlightInfo &flight_info,$/;"	f	class:IMI
FlightFinish	src/Device/Driver/IMI/Protocol/Types.hpp	/^  struct FlightFinish$/;"	s	namespace:IMI
FlightInfo	src/Device/Driver/IMI/Protocol/Types.hpp	/^  struct FlightInfo$/;"	s	namespace:IMI
FlightInfo	src/Device/Driver/LX/LXN.hpp	/^  struct FlightInfo {$/;"	s	namespace:LXN
FlightInfo	src/Device/Driver/LX/Protocol.hpp	/^  struct FlightInfo {$/;"	s	namespace:LX
FlightInfo	src/FlightInfo.hpp	/^struct FlightInfo {$/;"	s
FlightListRenderer	src/Renderer/FlightListRenderer.hpp	/^  FlightListRenderer(const Font &_font, const Font &_header_font)$/;"	f	class:FlightListRenderer
FlightListRenderer	src/Renderer/FlightListRenderer.hpp	/^class FlightListRenderer {$/;"	c
FlightLogger	src/Logger/FlightLogger.hpp	/^  FlightLogger() {$/;"	f	class:FlightLogger
FlightLogger	src/Logger/FlightLogger.hpp	/^class FlightLogger {$/;"	c
FlightMode	src/NMEA/SwitchState.hpp	/^  enum class FlightMode: uint8_t {$/;"	c	struct:SwitchState
FlightParser	src/Logger/FlightParser.hpp	/^  FlightParser(NLineReader &_reader):reader(_reader), last(nullptr) {}$/;"	f	class:FlightParser
FlightParser	src/Logger/FlightParser.hpp	/^class FlightParser {$/;"	c
FlightSetupPanel	src/Dialogs/Settings/dlgBasicSettings.cpp	/^  FlightSetupPanel()$/;"	f	class:final
FlightState	src/Computer/GlideComputerAirData.cpp	/^GlideComputerAirData::FlightState(const NMEAInfo &basic,$/;"	f	class:GlideComputerAirData
FlightStatistics	src/FlightStatistics.hpp	/^class FlightStatistics {$/;"	c
FlightStatisticsRenderer	src/Renderer/FlightStatisticsRenderer.cpp	/^FlightStatisticsRenderer::FlightStatisticsRenderer(const ChartLook &_chart_look,$/;"	f	class:FlightStatisticsRenderer
FlightStatisticsRenderer	src/Renderer/FlightStatisticsRenderer.hpp	/^class FlightStatisticsRenderer {$/;"	c
FlightStatusPanel	src/Dialogs/StatusPanels/FlightStatusPanel.hpp	/^class FlightStatusPanel : public StatusPanel {$/;"	c
FlightTime	src/Dialogs/StatusPanels/TimesStatusPanel.cpp	/^  FlightTime,$/;"	e	enum:Controls	file:
FlightTimes	src/Computer/GlideComputerAirData.cpp	/^GlideComputerAirData::FlightTimes(const NMEAInfo &basic,$/;"	f	class:GlideComputerAirData
Flip	src/Math/Angle.hpp	/^  void Flip() {$/;"	f	class:Angle
Flip	src/ui/canvas/android/TopCanvas.cpp	/^TopCanvas::Flip()$/;"	f	class:TopCanvas
Flip	src/ui/canvas/egl/TopCanvas.cpp	/^TopCanvas::Flip()$/;"	f	class:TopCanvas
Flip	src/ui/canvas/fb/TopCanvas.cpp	/^TopCanvas::Flip()$/;"	f	class:TopCanvas
Flip	src/ui/canvas/glx/TopCanvas.cpp	/^TopCanvas::Flip()$/;"	f	class:TopCanvas
Flip	src/ui/canvas/sdl/TopCanvas.cpp	/^TopCanvas::Flip()$/;"	f	class:TopCanvas
Flip	src/ui/window/DoubleBufferWindow.cpp	/^DoubleBufferWindow::Flip()$/;"	f	class:DoubleBufferWindow
FlipBallastTimer	src/Dialogs/Settings/dlgBasicSettings.cpp	/^FlightSetupPanel::FlipBallastTimer()$/;"	f	class:FlightSetupPanel
Flipped	src/Math/Angle.hpp	/^  Angle Flipped() const {$/;"	f	class:Angle
FloatPoint2D	src/Math/Point2D.hpp	/^struct FloatPoint2D : Point2D<float> {$/;"	s	struct:UnsignedPoint2D
Flush	src/Cloud/Sender.cpp	/^ThermalResponseSender::Flush()$/;"	f	class:ThermalResponseSender
Flush	src/Cloud/Sender.cpp	/^TrafficResponseSender::Flush()$/;"	f	class:TrafficResponseSender
Flush	src/Device/Driver/LX/Protocol.hpp	/^    bool Flush() {$/;"	f	class:LX::CRCWriter
Flush	src/Device/Port/BufferedPort.cpp	/^BufferedPort::Flush()$/;"	f	class:BufferedPort
Flush	src/Device/Port/DumpPort.cpp	/^DumpPort::Flush()$/;"	f	class:DumpPort
Flush	src/Device/Port/K6BtPort.cpp	/^K6BtPort::Flush()$/;"	f	class:K6BtPort
Flush	src/Device/Port/NullPort.cpp	/^NullPort::Flush()$/;"	f	class:NullPort
Flush	src/Device/Port/SerialPort.cpp	/^SerialPort::Flush()$/;"	f	class:SerialPort
Flush	src/Device/Port/TTYPort.cpp	/^TTYPort::Flush()$/;"	f	class:TTYPort
Flush	src/Device/Util/NMEAReader.cpp	/^PortNMEAReader::Flush()$/;"	f	class:PortNMEAReader
Flush	src/IGC/IGCWriter.hpp	/^  void Flush() {$/;"	f	class:IGCWriter
Flush	src/Renderer/AirspaceRenderer.hpp	/^  void Flush() {$/;"	f	class:AirspaceRenderer
Flush	src/Renderer/BackgroundRenderer.cpp	/^BackgroundRenderer::Flush()$/;"	f	class:BackgroundRenderer
Flush	src/Terrain/TerrainRenderer.hpp	/^  void Flush() {$/;"	f	class:TerrainRenderer
Flush	src/Topography/CachedTopographyRenderer.hpp	/^  void Flush() {$/;"	f	class:CachedTopographyRenderer
Flush	src/Weather/Rasp/RaspRenderer.hpp	/^  void Flush() {$/;"	f	class:RaspRenderer
Flush	src/io/BufferedOutputStream.cxx	/^BufferedOutputStream::Flush()$/;"	f	class:BufferedOutputStream
Flush	src/io/FileCache.cpp	/^FileCache::Flush(const TCHAR *name)$/;"	f	class:FileCache
Flush	src/io/FileHandle.hpp	/^  bool Flush() {$/;"	f	class:FileHandle
Flush	src/io/TextWriter.hpp	/^  bool Flush() {$/;"	f	class:TextWriter
Flush	src/ui/canvas/custom/Cache.cpp	/^TextCache::Flush()$/;"	f	class:TextCache
FlushCaches	src/MapWindow/MapWindow.cpp	/^MapWindow::FlushCaches()$/;"	f	class:MapWindow
FlushRendererCaches	src/MainWindow.cpp	/^MainWindow::FlushRendererCaches()$/;"	f	class:MainWindow
FlushScreen	src/Screen/StopWatch.hpp	/^  static void FlushScreen() {$/;"	f	class:ScreenStopWatch
FlyNetCreateOnPort	src/Device/Driver/FlyNet.cpp	/^FlyNetCreateOnPort(const DeviceConfig &config, Port &com_port)$/;"	f	file:
FlyNetDevice	src/Device/Driver/FlyNet.cpp	/^class FlyNetDevice : public AbstractDevice {$/;"	c	file:
FlyingComputer	src/Computer/FlyingComputer.hpp	/^class FlyingComputer {$/;"	c
FlyingState	src/NMEA/FlyingState.hpp	/^struct FlyingState$/;"	s
FlymasterF1CreateOnPort	src/Device/Driver/FlymasterF1.cpp	/^FlymasterF1CreateOnPort(const DeviceConfig &config, Port &port)$/;"	f	file:
FlymasterF1Device	src/Device/Driver/FlymasterF1.cpp	/^  FlymasterF1Device(Port &_port):port(_port) {}$/;"	f	class:FlymasterF1Device
FlymasterF1Device	src/Device/Driver/FlymasterF1.cpp	/^class FlymasterF1Device : public AbstractDevice {$/;"	c	file:
FlytecCreateOnPort	src/Device/Driver/Flytec/Register.cpp	/^FlytecCreateOnPort(const DeviceConfig &config, Port &com_port)$/;"	f	file:
FlytecDevice	src/Device/Driver/Flytec/Device.hpp	/^  FlytecDevice(Port &_port):port(_port), last_time(0) {}$/;"	f	class:FlytecDevice
FlytecDevice	src/Device/Driver/Flytec/Device.hpp	/^class FlytecDevice : public AbstractDevice$/;"	c
FlytecParseBRSF	src/Device/Driver/Flytec/Parser.cpp	/^FlytecParseBRSF(NMEAInputLine &line, NMEAInfo &info)$/;"	f	file:
FlytecParseVMVABD	src/Device/Driver/Flytec/Parser.cpp	/^FlytecParseVMVABD(NMEAInputLine &line, NMEAInfo &info)$/;"	f	file:
FocusFirstControl	src/Dialogs/Task/Manager/Internal.hpp	/^  void FocusFirstControl() {$/;"	f	class:final
FollowMode	src/MapWindow/MapWindow.hpp	/^  enum FollowMode {$/;"	g	class:MapWindow
Font	src/Hardware/DisplayDPI.cpp	36;"	d	file:
Font	src/Hardware/DisplayDPI.cpp	40;"	d	file:
Font	src/Hardware/DisplaySize.cpp	33;"	d	file:
Font	src/Hardware/DisplaySize.cpp	37;"	d	file:
Font	src/ui/canvas/Font.hpp	/^class Font {$/;"	c
Font	src/ui/canvas/custom/TopCanvas.hpp	55;"	d
Font	src/ui/canvas/custom/TopCanvas.hpp	59;"	d
Font	src/ui/canvas/opengl/Function.hpp	35;"	d
Font	src/ui/canvas/opengl/Function.hpp	41;"	d
Font	src/ui/egl/System.hpp	33;"	d
Font	src/ui/egl/System.hpp	45;"	d
Font	src/ui/event/poll/X11Queue.cpp	30;"	d	file:
Font	src/ui/event/poll/X11Queue.cpp	37;"	d	file:
Font	src/ui/event/poll/X11Queue.hpp	31;"	d
Font	src/ui/event/poll/X11Queue.hpp	37;"	d
Font	src/ui/glx/System.hpp	28;"	d
Font	src/ui/glx/System.hpp	34;"	d
Font	src/ui/window/TopWindow.hpp	61;"	d
Font	src/ui/window/TopWindow.hpp	69;"	d
FontAirspaceColourDlgFont	src/Profile/ProfileKeys.cpp	/^const char FontAirspaceColourDlgFont[] = "AirspaceColourDlgFont";$/;"	m	namespace:ProfileKeys	file:
FontAirspacePressFont	src/Profile/ProfileKeys.cpp	/^const char FontAirspacePressFont[] = "AirspacePressFont";$/;"	m	namespace:ProfileKeys	file:
FontBugsBallastFont	src/Profile/ProfileKeys.cpp	/^const char FontBugsBallastFont[] = "BugsBallastFont";$/;"	m	namespace:ProfileKeys	file:
FontCDIWindowFont	src/Profile/ProfileKeys.cpp	/^const char FontCDIWindowFont[] = "CDIWindowFont";$/;"	m	namespace:ProfileKeys	file:
FontDescription	src/Look/FontDescription.cpp	/^FontDescription::FontDescription(unsigned height,$/;"	f	class:FontDescription
FontDescription	src/Look/FontDescription.hpp	/^  explicit constexpr FontDescription(unsigned _height,$/;"	f	class:FontDescription
FontDescription	src/Look/FontDescription.hpp	/^class FontDescription {$/;"	c
FontInfoWindowFont	src/Profile/ProfileKeys.cpp	/^const char FontInfoWindowFont[] = "InfoWindowFont";$/;"	m	namespace:ProfileKeys	file:
FontMapLabelFont	src/Profile/ProfileKeys.cpp	/^const char FontMapLabelFont[] = "MapLabelFont";$/;"	m	namespace:ProfileKeys	file:
FontMapLabelImportantFont	src/Profile/ProfileKeys.cpp	/^const char FontMapLabelImportantFont[] = "MapLabelImportantFont";$/;"	m	namespace:ProfileKeys	file:
FontMapWindowBoldFont	src/Profile/ProfileKeys.cpp	/^const char FontMapWindowBoldFont[] = "MapWindowBoldFont";$/;"	m	namespace:ProfileKeys	file:
FontMapWindowFont	src/Profile/ProfileKeys.cpp	/^const char FontMapWindowFont[] = "MapWindowFont";$/;"	m	namespace:ProfileKeys	file:
FontSettings	src/Look/FontSettings.hpp	/^struct FontSettings {$/;"	s
FontStatisticsFont	src/Profile/ProfileKeys.cpp	/^const char FontStatisticsFont[] = "StatisticsFont";$/;"	m	namespace:ProfileKeys	file:
FontTeamCodeFont	src/Profile/ProfileKeys.cpp	/^const char FontTeamCodeFont[] = "TeamCodeFont";$/;"	m	namespace:ProfileKeys	file:
FontTitleWindowFont	src/Profile/ProfileKeys.cpp	/^const char FontTitleWindowFont[] = "TitleWindowFont";$/;"	m	namespace:ProfileKeys	file:
Fonts	src/Look/DefaultFonts.hpp	/^namespace Fonts$/;"	n
Fonts	src/Look/GlobalFonts.hpp	/^namespace Fonts$/;"	n
ForEachChar	src/ui/canvas/freetype/Font.cpp	/^ForEachChar(TStringView text, F &&f)$/;"	f	file:
ForEachTime	src/Weather/Rasp/RaspStore.hpp	/^  void ForEachTime(unsigned item_index, C &&c) {$/;"	f	class:RaspStore
ForHorizontal	src/ui/canvas/memory/PixelTraits.hpp	/^    static void ForHorizontal(pointer p,$/;"	f	struct:GreyscalePixelTraits::Mixed
ForHorizontal	src/ui/canvas/memory/PixelTraits.hpp	/^  static void ForHorizontal(pointer p, unsigned n, F f) {$/;"	f	struct:BGRAPixelTraits
ForHorizontal	src/ui/canvas/memory/PixelTraits.hpp	/^  static void ForHorizontal(pointer p, unsigned n, F f) {$/;"	f	struct:GreyscalePixelTraits
ForHorizontal	src/ui/canvas/memory/PixelTraits.hpp	/^  static void ForHorizontal(rpointer p, const_rpointer q,$/;"	f	struct:BGRAPixelTraits
ForHorizontal	src/ui/canvas/memory/PixelTraits.hpp	/^  static void ForHorizontal(rpointer p, const_rpointer q,$/;"	f	struct:GreyscalePixelTraits
ForVertical	src/ui/canvas/memory/PixelTraits.hpp	/^  static void ForVertical(pointer p, unsigned pitch, unsigned n, F f) {$/;"	f	struct:BGRAPixelTraits
ForVertical	src/ui/canvas/memory/PixelTraits.hpp	/^  static void ForVertical(pointer p, unsigned pitch, unsigned n, F f) {$/;"	f	struct:GreyscalePixelTraits
ForceCalculation	src/Protection.cpp	/^ForceCalculation()$/;"	f
ForceModify	src/Form/DataField/File.cpp	/^FileDataField::ForceModify(Path path)$/;"	f	class:FileDataField
ForceTrigger	src/CalculationThread.cpp	/^CalculationThread::ForceTrigger()$/;"	f	class:CalculationThread
ForeignFifoBuffer	src/util/DynamicFifoBuffer.hxx	/^		:ForeignFifoBuffer<T>(n) {}$/;"	f	class:DynamicFifoBuffer
ForeignFifoBuffer	src/util/DynamicFifoBuffer.hxx	/^		:ForeignFifoBuffer<T>(new T[_capacity], _capacity) {}$/;"	f	class:DynamicFifoBuffer
ForeignFifoBuffer	src/util/ForeignFifoBuffer.hxx	/^class ForeignFifoBuffer {$/;"	c
ForkExec	src/system/Process.cpp	/^ForkExec(const char *const*argv)$/;"	f	file:
FormCharacter	src/Dialogs/TouchTextEntry.cpp	/^FormCharacter(unsigned ch)$/;"	f	file:
FormKeyDown	src/Dialogs/TouchTextEntry.cpp	/^FormKeyDown(unsigned key_code)$/;"	f	file:
Format	src/FLARM/FlarmId.cpp	/^FlarmId::Format(TCHAR *buffer) const$/;"	f	class:FlarmId
Format	src/FLARM/FlarmId.cpp	/^FlarmId::Format(char *buffer) const$/;"	f	class:FlarmId
Format	src/RadioFrequency.cpp	/^RadioFrequency::Format(TCHAR *buffer, size_t max_size) const$/;"	f	class:RadioFrequency
Format	src/Weather/NOAAFormatter.cpp	/^NOAAFormatter::Format(const NOAAStore::Item &station, tstring &output)$/;"	f	class:NOAAFormatter
Format	src/io/BufferedOutputStream.cxx	/^BufferedOutputStream::Format(const char *fmt, ...)$/;"	f	class:BufferedOutputStream
Format	src/io/TextWriter.cpp	/^TextWriter::Format(const TCHAR *fmt, ...)$/;"	f	class:TextWriter
Format	src/io/TextWriter.hpp	/^  void Format(const char *fmt, Args&&... args) {$/;"	f	class:TextWriter
Format	src/ui/canvas/custom/UncompressedImage.hpp	/^  enum class Format {$/;"	c	class:UncompressedImage
FormatAlternateUserAltitude	src/Formatter/UserUnits.cpp	/^FormatAlternateUserAltitude(double value, TCHAR *buffer, bool include_unit)$/;"	f
FormatAltitude	src/Formatter/AirspaceUserUnitsFormatter.cpp	/^AirspaceFormatter::FormatAltitude(TCHAR *buffer,$/;"	f	class:AirspaceFormatter
FormatAltitude	src/Formatter/Units.cpp	/^FormatAltitude(TCHAR *buffer, double value, Unit unit,$/;"	f
FormatAltitudeShort	src/Formatter/AirspaceUserUnitsFormatter.cpp	/^AirspaceFormatter::FormatAltitudeShort(TCHAR *buffer,$/;"	f	class:AirspaceFormatter
FormatAngleDelta	src/Formatter/AngleFormatter.cpp	/^FormatAngleDelta(TCHAR *buffer, size_t size, Angle value)$/;"	f
FormatAngleDelta	src/Formatter/AngleFormatter.hpp	/^FormatAngleDelta(Angle value)$/;"	f
FormatBearing	src/Formatter/AngleFormatter.cpp	/^FormatBearing(TCHAR *buffer, size_t size, Angle value, const TCHAR *suffix)$/;"	f
FormatBearing	src/Formatter/AngleFormatter.cpp	/^FormatBearing(TCHAR *buffer, size_t size, unsigned value_degrees,$/;"	f
FormatBearing	src/Formatter/AngleFormatter.hpp	/^FormatBearing(Angle value)$/;"	f
FormatBearing	src/Formatter/AngleFormatter.hpp	/^FormatBearing(unsigned degrees_value)$/;"	f
FormatByteSize	src/Formatter/ByteSizeFormatter.cpp	/^FormatByteSize(TCHAR *buffer, size_t size, unsigned long bytes, bool simple)$/;"	f
FormatComment	src/InfoBoxes/Data.hpp	/^  void FormatComment(const TCHAR *fmt, Args&&... args) {$/;"	f	struct:InfoBoxData
FormatCompetitionClass	src/Device/Driver/LX/LXN.cpp	/^LXN::FormatCompetitionClass(unsigned class_id)$/;"	f	class:LXN
FormatDecodedMETAR	src/Weather/NOAAFormatter.cpp	/^FormatDecodedMETAR(const METAR &metar, const ParsedMETAR &parsed,$/;"	f	file:
FormatDecodedMETARLine	src/Weather/NOAAFormatter.cpp	/^FormatDecodedMETARLine(const TCHAR *line, unsigned length,$/;"	f	file:
FormatDistance	src/Formatter/Units.cpp	/^FormatDistance(TCHAR *buffer, double value, Unit unit,$/;"	f
FormatDistanceSmart	src/Formatter/Units.cpp	/^FormatDistanceSmart(TCHAR *buffer, double value, Unit unit,$/;"	f
FormatGPRMB	src/Device/Driver/CaiLNav.cpp	/^FormatGPRMB(char *buffer, size_t buffer_size, const GeoPoint& here,$/;"	f	file:
FormatGPRMC	src/Device/Driver/CaiLNav.cpp	/^FormatGPRMC(char *buffer, size_t buffer_size, const MoreData &info)$/;"	f	file:
FormatGPSDate	src/Device/Driver/LX/LXN.cpp	/^LXN::FormatGPSDate(unsigned gps_date)$/;"	f	class:LXN
FormatGeoPoint	src/Device/Driver/CAI302/Protocol.cpp	/^FormatGeoPoint(char *buffer, const GeoPoint &location)$/;"	f	file:
FormatGeoPoint	src/Formatter/GeoPointFormatter.cpp	/^FormatGeoPoint(const GeoPoint &location, TCHAR *buffer, size_t size,$/;"	f
FormatGeoPoint	src/Formatter/GeoPointFormatter.hpp	/^FormatGeoPoint(const GeoPoint &location, CoordinateFormat format,$/;"	f
FormatGeoPoint	src/Formatter/UserGeoPointFormatter.cpp	/^FormatGeoPoint(const GeoPoint &location, TCHAR *buffer, size_t size,$/;"	f
FormatGeoPoint	src/Formatter/UserGeoPointFormatter.hpp	/^FormatGeoPoint(const GeoPoint &location, TCHAR separator = _T(' '))$/;"	f
FormatGlideRatio	src/Formatter/GlideRatioFormatter.cpp	/^FormatGlideRatio(TCHAR *buffer, size_t size, double gr)$/;"	f
FormatHexColor	src/Formatter/HexColor.cpp	/^FormatHexColor(char *buffer, size_t size, const RGB8Color color)$/;"	f
FormatIGCFilename	src/Formatter/IGCFilenameFormatter.cpp	/^FormatIGCFilename(TCHAR* buffer, const BrokenDate &date,$/;"	f
FormatIGCFilenameLong	src/Formatter/IGCFilenameFormatter.cpp	/^FormatIGCFilenameLong(TCHAR* buffer, const BrokenDate &date,$/;"	f
FormatIGCLocation	src/IGC/Generator.cpp	/^FormatIGCLocation(char *buffer, const GeoPoint &location)$/;"	f
FormatIGCTaskTimestamp	src/IGC/Generator.cpp	/^FormatIGCTaskTimestamp(char *buffer, const BrokenDateTime &date_time,$/;"	f
FormatIGCTaskTurnPoint	src/IGC/Generator.cpp	/^FormatIGCTaskTurnPoint(char *buffer, const GeoPoint &location,$/;"	f
FormatISO8601	src/Formatter/TimeFormatter.cpp	/^FormatISO8601(TCHAR *buffer, const BrokenDateTime &stamp)$/;"	f
FormatISO8601	src/Formatter/TimeFormatter.cpp	/^FormatISO8601(char *buffer, const BrokenDateTime &stamp)$/;"	f
FormatInteger	src/Formatter/Units.cpp	/^FormatInteger(TCHAR *buffer,$/;"	f	file:
FormatLabel	src/Renderer/WaypointRenderer.cpp	/^  void FormatLabel(TCHAR *buffer, size_t buffer_size,$/;"	f	class:final
FormatLatitude	src/Device/Driver/CaiLNav.cpp	/^FormatLatitude(char *buffer, size_t buffer_size, Angle latitude )$/;"	f	file:
FormatLatitude	src/Formatter/GeoPointFormatter.cpp	/^FormatLatitude(Angle latitude, TCHAR *buffer, size_t size,$/;"	f
FormatLatitude	src/Formatter/UserGeoPointFormatter.cpp	/^FormatLatitude(Angle latitude, TCHAR *buffer, size_t size)$/;"	f
FormatLine	src/io/TextWriter.hpp	/^  bool FormatLine(const TCHAR *fmt, Args&&... args) {$/;"	f	class:TextWriter
FormatLine	src/io/TextWriter.hpp	/^  void FormatLine(const char *fmt, Args&&... args) {$/;"	f	class:TextWriter
FormatLocalTimeHHMM	src/Formatter/LocalTimeFormatter.cpp	/^FormatLocalTimeHHMM(TCHAR *buffer, int time, RoughTimeDelta utc_offset)$/;"	f
FormatLocalTimeHHMM	src/Formatter/LocalTimeFormatter.hpp	/^FormatLocalTimeHHMM(int time, RoughTimeDelta utc_offset)$/;"	f
FormatLongitude	src/Device/Driver/CaiLNav.cpp	/^FormatLongitude(char *buffer, size_t buffer_size, Angle longitude)$/;"	f	file:
FormatLongitude	src/Formatter/GeoPointFormatter.cpp	/^FormatLongitude(Angle longitude, TCHAR *buffer, size_t size,$/;"	f
FormatLongitude	src/Formatter/UserGeoPointFormatter.cpp	/^FormatLongitude(Angle longitude, TCHAR *buffer, size_t size)$/;"	f
FormatMass	src/Formatter/Units.cpp	/^FormatMass(TCHAR *buffer, double value, Unit unit,$/;"	f
FormatPCAIB	src/Device/Driver/CaiLNav.cpp	/^FormatPCAIB(char *buffer, size_t buffer_size, const AGeoPoint& destination)$/;"	f	file:
FormatPolar	src/Polar/Parser.cpp	/^FormatPolar(const PolarInfo &polar, char *buffer, size_t max_size,$/;"	f
FormatPolarShape	src/Polar/Parser.cpp	/^FormatPolarShape(const PolarShape &shape, char *buffer, size_t max_size)$/;"	f
FormatPressure	src/Formatter/Units.cpp	/^FormatPressure(TCHAR *buffer, AtmosphericPressure pressure,$/;"	f
FormatRelativeAltitude	src/Formatter/Units.cpp	/^FormatRelativeAltitude(TCHAR *buffer, double value,$/;"	f
FormatRelativeUserAltitude	src/Formatter/UserUnits.cpp	/^FormatRelativeUserAltitude(double value, TCHAR *buffer, bool include_unit)$/;"	f
FormatSettings	src/FormatSettings.hpp	/^struct FormatSettings {$/;"	s
FormatSignedTimeHHMM	src/Formatter/TimeFormatter.cpp	/^FormatSignedTimeHHMM(TCHAR* buffer, int _time)$/;"	f
FormatSignedTimeHHMM	src/Formatter/TimeFormatter.hpp	/^FormatSignedTimeHHMM(int time)$/;"	f
FormatSmallDistance	src/Formatter/Units.cpp	/^FormatSmallDistance(TCHAR *buffer, double value, Unit unit,$/;"	f
FormatSmallUserDistance	src/Formatter/UserUnits.cpp	/^FormatSmallUserDistance(TCHAR *buffer, double value, bool include_unit,$/;"	f
FormatSpeed	src/Formatter/Units.cpp	/^FormatSpeed(TCHAR *buffer,$/;"	f
FormatTemperature	src/Formatter/Units.cpp	/^FormatTemperature(TCHAR *buffer, double value, Unit unit,$/;"	f
FormatTime	src/Formatter/TimeFormatter.cpp	/^FormatTime(TCHAR* buffer, double _time)$/;"	f
FormatTimeLong	src/Formatter/TimeFormatter.cpp	/^FormatTimeLong(TCHAR* buffer, double _time)$/;"	f
FormatTimeTwoLines	src/Formatter/TimeFormatter.cpp	/^FormatTimeTwoLines(TCHAR *buffer1, TCHAR *buffer2, int _time)$/;"	f
FormatTimespanSmart	src/Formatter/TimeFormatter.cpp	/^FormatTimespanSmart(TCHAR *buffer, int timespan, unsigned max_tokens,$/;"	f
FormatTimespanSmart	src/Formatter/TimeFormatter.hpp	/^FormatTimespanSmart(int timespan, unsigned max_tokens = 1,$/;"	f
FormatTitle	src/InfoBoxes/Data.hpp	/^  void FormatTitle(const TCHAR *fmt, Args&&... args) {$/;"	f	struct:InfoBoxData
FormatTitle	src/Renderer/WaypointRenderer.cpp	/^  void FormatTitle(TCHAR *buffer, size_t buffer_size,$/;"	f	class:final
FormatUTM	src/Formatter/GeoPointFormatter.cpp	/^FormatUTM(const GeoPoint &location, TCHAR *buffer, size_t size,$/;"	f	file:
FormatUserAltitude	src/Formatter/UserUnits.cpp	/^FormatUserAltitude(double value, TCHAR *buffer, bool include_unit)$/;"	f
FormatUserAltitude	src/Formatter/UserUnits.hpp	/^FormatUserAltitude(double value)$/;"	f
FormatUserDistance	src/Formatter/UserUnits.cpp	/^FormatUserDistance(double value, TCHAR *buffer, bool include_unit, int precision)$/;"	f
FormatUserDistanceSmart	src/Formatter/UserUnits.cpp	/^FormatUserDistanceSmart(double value, TCHAR *buffer, bool include_unit,$/;"	f
FormatUserDistanceSmart	src/Formatter/UserUnits.hpp	/^FormatUserDistanceSmart(double value)$/;"	f
FormatUserMapScale	src/Formatter/UserUnits.cpp	/^FormatUserMapScale(double value, TCHAR *buffer, bool include_unit)$/;"	f
FormatUserMass	src/Formatter/UserUnits.cpp	/^FormatUserMass(double value, TCHAR *buffer, bool include_unit)$/;"	f
FormatUserPressure	src/Formatter/UserUnits.cpp	/^FormatUserPressure(AtmosphericPressure pressure, TCHAR *buffer,$/;"	f
FormatUserSpeed	src/Formatter/UserUnits.cpp	/^FormatUserSpeed(double value, TCHAR *buffer, bool include_unit, bool precision)$/;"	f
FormatUserSpeed	src/Formatter/UserUnits.hpp	/^FormatUserSpeed(double value, bool precision=true)$/;"	f
FormatUserTaskSpeed	src/Formatter/UserUnits.cpp	/^FormatUserTaskSpeed(double value, TCHAR *buffer, bool include_unit,$/;"	f
FormatUserTaskSpeed	src/Formatter/UserUnits.hpp	/^FormatUserTaskSpeed(double value, bool precision=true)$/;"	f
FormatUserTemperature	src/Formatter/UserUnits.cpp	/^FormatUserTemperature(double value, TCHAR *buffer, bool include_unit)$/;"	f
FormatUserVerticalSpeed	src/Formatter/UserUnits.cpp	/^FormatUserVerticalSpeed(double value, TCHAR *buffer, bool include_unit,$/;"	f
FormatUserWindSpeed	src/Formatter/UserUnits.cpp	/^FormatUserWindSpeed(double value, TCHAR *buffer, bool include_unit,$/;"	f
FormatUserWingLoading	src/Formatter/UserUnits.cpp	/^FormatUserWingLoading(double value, TCHAR *buffer, bool include_unit)$/;"	f
FormatValue	src/InfoBoxes/Data.hpp	/^  void FormatValue(const TCHAR *fmt, Args&&... args) {$/;"	f	struct:InfoBoxData
FormatVerticalAngleDelta	src/Formatter/AngleFormatter.cpp	/^FormatVerticalAngleDelta(TCHAR *buffer, size_t size, Angle value)$/;"	f
FormatVerticalSpeed	src/Formatter/Units.cpp	/^FormatVerticalSpeed(TCHAR *buffer, double value, Unit unit,$/;"	f
FormatWaypointDetails	src/Renderer/WaypointListRenderer.cpp	/^FormatWaypointDetails(Buffer &buffer, const Waypoint &waypoint)$/;"	f	file:
FormatWingLoading	src/Formatter/Units.cpp	/^FormatWingLoading(TCHAR *buffer, double value, Unit unit,$/;"	f
ForwardLine	src/Device/Descriptor.cpp	/^DeviceDescriptor::ForwardLine(const char *line)$/;"	f	class:DeviceDescriptor
Found	src/Engine/Airspace/AirspaceWarningManager.cpp	/^  bool Found() const {$/;"	f	class:final
FourCorners	src/Projection/CompareProjection.hpp	/^  struct FourCorners : GeoQuadrilateral {$/;"	s	class:CompareProjection
Fraction	src/Math/Angle.cpp	/^Angle::Fraction(const Angle end, const double fraction) const$/;"	f	class:Angle
FrameHeader	src/Device/Driver/FLARM/BinaryProtocol.hpp	/^  struct FrameHeader$/;"	s	namespace:FLARM
FramebufferRenderbuffer	src/ui/canvas/opengl/FBO.cpp	/^FBO::FramebufferRenderbuffer(GLenum target, GLenum attachment,$/;"	f	class:FBO
FramebufferTexture2D	src/ui/canvas/opengl/FBO.cpp	/^FBO::FramebufferTexture2D(GLenum target, GLenum attachment,$/;"	f	class:FBO
Free	src/ui/canvas/memory/Buffer.hpp	/^  void Free() {$/;"	f	struct:WritableImageBuffer
FreeType	src/ui/canvas/freetype/Init.hpp	/^namespace FreeType {$/;"	n
FrmBeg	src/Device/Driver/Volkslogger/dbbconv.h	/^  static constexpr size_t FrmBeg = 0x3000;$/;"	m	class:DBB
FrmEnd	src/Device/Driver/Volkslogger/dbbconv.h	/^  static constexpr size_t FrmEnd = FrmBeg + FRM_SIZE;$/;"	m	class:DBB
FromCelsius	src/Atmosphere/Temperature.hpp	/^  static constexpr Temperature FromCelsius(double celsius_value) {$/;"	f	class:Temperature
FromDMS	src/Math/Angle.hpp	/^  static constexpr Angle FromDMS(unsigned d, unsigned m=0, unsigned s=0,$/;"	f	class:Angle
FromGeoPoint	src/Geo/UTM.cpp	/^UTM::FromGeoPoint(GeoPoint p)$/;"	f	class:UTM
FromHours	src/time/RoughTime.hpp	/^  static RoughTimeDelta FromHours(int _value) {$/;"	f	class:RoughTimeDelta
FromInteger	src/ui/canvas/memory/PixelTraits.hpp	/^  static constexpr color_type FromInteger(integer_type i) {$/;"	f	struct:BGRAPixelTraits
FromKelvin	src/Atmosphere/Temperature.hpp	/^  static constexpr Temperature FromKelvin(double kelvin_value) {$/;"	f	class:Temperature
FromMinuteOfDay	src/time/BrokenTime.cpp	/^BrokenTime::FromMinuteOfDay(unsigned minute_of_day)$/;"	f	class:BrokenTime
FromMinuteOfDay	src/time/RoughTime.hpp	/^  static RoughTime FromMinuteOfDay(unsigned mod) {$/;"	f	class:RoughTime
FromMinuteOfDayChecked	src/time/BrokenTime.cpp	/^BrokenTime::FromMinuteOfDayChecked(unsigned minute_of_day)$/;"	f	class:BrokenTime
FromMinuteOfDayChecked	src/time/RoughTime.hpp	/^  static RoughTime FromMinuteOfDayChecked(int mod) {$/;"	f	class:RoughTime
FromMinuteOfDayChecked	src/time/RoughTime.hpp	/^  static RoughTime FromMinuteOfDayChecked(unsigned mod) {$/;"	f	class:RoughTime
FromMinutes	src/time/RoughTime.hpp	/^  static RoughTimeDelta FromMinutes(int _value) {$/;"	f	class:RoughTimeDelta
FromNative	src/Atmosphere/Temperature.hpp	/^  static constexpr Temperature FromNative(double value) {$/;"	f	class:Temperature
FromProfile	src/Plane/PlaneGlue.cpp	/^PlaneGlue::FromProfile(Plane &plane, const ProfileMap &profile)$/;"	f	class:PlaneGlue
FromRGB	src/ui/canvas/PortableColor.hpp	/^  static uint8_t FromRGB(uint8_t r, uint8_t g, uint8_t b) {$/;"	f	class:Luminosity8
FromSecondOfDay	src/time/BrokenTime.cpp	/^BrokenTime::FromSecondOfDay(unsigned second_of_day)$/;"	f	class:BrokenTime
FromSecondOfDayChecked	src/time/BrokenTime.cpp	/^BrokenTime::FromSecondOfDayChecked(unsigned second_of_day)$/;"	f	class:BrokenTime
FromSecondOfDayChecked	src/time/RoughTime.hpp	/^  static RoughTime FromSecondOfDayChecked(unsigned sod) {$/;"	f	class:RoughTime
FromSeconds	src/time/RoughTime.hpp	/^  static RoughTimeDelta FromSeconds(int _value) {$/;"	f	class:RoughTimeDelta
FromUnixTimeUTC	src/time/BrokenDateTime.cpp	/^BrokenDateTime::FromUnixTimeUTC(int64_t _t)$/;"	f	class:BrokenDateTime
FromUser	src/Units/Temperature.cpp	/^Temperature::FromUser(double value)$/;"	f	class:Temperature
FromUserPressure	src/Units/Units.cpp	/^Units::FromUserPressure(double value)$/;"	f	class:Units
FromXMLString	src/XML/Parser.cpp	/^FromXMLString(const TCHAR *ss, size_t lo)$/;"	f	file:
FromXY	src/Math/Angle.hpp	/^  static Angle FromXY(const double x, const double y) {$/;"	f	class:Angle
Full	src/Dialogs/WidgetDialog.hpp	/^  struct Full {};$/;"	s	class:WidgetDialog
Full	src/Interface.hpp	/^  static inline const FullBlackboard &Full() {$/;"	f	namespace:CommonInterface
FullBlackboard	src/Blackboard/FullBlackboard.hpp	/^class FullBlackboard : public BaseBlackboard, public SettingsBlackboard {$/;"	c
FullCircle	src/Math/Angle.hpp	/^  static Angle FullCircle() {$/;"	f	class:Angle
FullFlush	src/Device/Port/Port.cpp	/^Port::FullFlush(OperationEnvironment &env,$/;"	f	class:Port
FullRead	src/Device/Port/Port.cpp	/^Port::FullRead(void *buffer, size_t length, OperationEnvironment &env,$/;"	f	class:Port
FullRead	src/io/FileDescriptor.cxx	/^FileDescriptor::FullRead(void *_buffer, std::size_t length)$/;"	f	class:FileDescriptor
FullRedraw	src/MainWindow.cpp	/^MainWindow::FullRedraw()$/;"	f	class:MainWindow
FullRedraw	src/MapWindow/GlueMapWindow.cpp	/^GlueMapWindow::FullRedraw()$/;"	f	class:GlueMapWindow
FullScreen	src/MainWindow.hpp	/^  bool FullScreen = false;$/;"	m	class:MainWindow
FullScreen	src/PageSettings.hpp	/^  static PageLayout FullScreen() {$/;"	f	struct:PageLayout
FullScreen	src/ui/window/TopWindow.hpp	/^  void FullScreen() {$/;"	f	class:UI::TopWindowStyle
FullWrite	src/Device/Port/Port.cpp	/^Port::FullWrite(const void *buffer, size_t length,$/;"	f	class:Port
FullWrite	src/io/FileDescriptor.cxx	/^FileDescriptor::FullWrite(const void *_buffer, std::size_t length)$/;"	f	class:FileDescriptor
FullWriteString	src/Device/Port/Port.cpp	/^Port::FullWriteString(const char *s,$/;"	f	class:Port
Function	src/Blackboard/ScopeCalculatedListener.hpp	/^                             const DerivedInfo &calculated)> Function;$/;"	t	class:ScopeCalculatedListener
Function	src/Blackboard/ScopeGPSListener.hpp	/^  typedef std::function<void(const MoreData &basic)> Function;$/;"	t	class:ScopeGPSListener
Function	src/ui/canvas/opengl/Function.hpp	/^typedef void (*Function)();$/;"	t	namespace:OpenGL
FunctionListItemRenderer	src/Form/List.hpp	/^  FunctionListItemRenderer(ListItemRendererFunction _function)$/;"	f	class:FunctionListItemRenderer
FunctionListItemRenderer	src/Form/List.hpp	/^class FunctionListItemRenderer : public ListItemRenderer {$/;"	c
FunctionTraits	src/util/BindMethod.hxx	/^struct FunctionTraits<R(Args...) noexcept(NoExcept)> {$/;"	s	namespace:BindMethodDetail
GAMMA	src/Terrain/jasper/jpc/jpc_qmfb.c	1326;"	d	file:
GAUGESCONFIGPANEL_HPP	src/Dialogs/Settings/Panels/GaugesConfigPanel.hpp	25;"	d
GAUGEVARIORANGE	src/Gauge/GaugeVario.hpp	/^  static constexpr int GAUGEVARIORANGE = 5;$/;"	m	class:GaugeVario
GAUGEVARIOSWEEP	src/Gauge/GaugeVario.hpp	/^  static constexpr int GAUGEVARIOSWEEP = 90;$/;"	m	class:GaugeVario
GAUGE_FLARM_HPP	src/Gauge/GaugeFLARM.hpp	25;"	d
GAUGE_THERMAL_ASSISTENT_HPP	src/Gauge/GaugeThermalAssistant.hpp	25;"	d
GAUGE_VARIO_H	src/Gauge/GaugeVario.hpp	25;"	d
GC2Event	src/Input/InputConfig.hpp	/^  unsigned short GC2Event[GCE_COUNT];$/;"	m	struct:InputConfig
GCC_CHECK_VERSION	src/util/Compiler.h	45;"	d
GCC_MAKE_VERSION	src/util/Compiler.h	27;"	d
GCC_OLDER_THAN	src/util/Compiler.h	60;"	d
GCC_VERSION	src/util/Compiler.h	30;"	d
GCC_VERSION	src/util/Compiler.h	32;"	d
GCE_AIRSPACE_ENTER	src/Input/InputQueue.hpp	/^  GCE_AIRSPACE_ENTER,$/;"	e	enum:__anon170
GCE_AIRSPACE_LEAVE	src/Input/InputQueue.hpp	/^  GCE_AIRSPACE_LEAVE,$/;"	e	enum:__anon170
GCE_ALTERNATE_CHANGED	src/Input/InputQueue.hpp	/^  GCE_ALTERNATE_CHANGED,$/;"	e	enum:__anon170
GCE_ARM_READY	src/Input/InputQueue.hpp	/^  GCE_ARM_READY,$/;"	e	enum:__anon170
GCE_COMMPORT_RESTART	src/Input/InputQueue.hpp	/^  GCE_COMMPORT_RESTART,$/;"	e	enum:__anon170
GCE_COUNT	src/Input/InputQueue.hpp	/^  GCE_COUNT			\/\/ How many we have for arrays etc$/;"	e	enum:__anon170
GCE_FLARM_NEWTRAFFIC	src/Input/InputQueue.hpp	/^  GCE_FLARM_NEWTRAFFIC,$/;"	e	enum:__anon170
GCE_FLARM_NOTRAFFIC	src/Input/InputQueue.hpp	/^  GCE_FLARM_NOTRAFFIC,$/;"	e	enum:__anon170
GCE_FLARM_TRAFFIC	src/Input/InputQueue.hpp	/^  GCE_FLARM_TRAFFIC,$/;"	e	enum:__anon170
GCE_FLIGHTMODE_CLIMB	src/Input/InputQueue.hpp	/^  GCE_FLIGHTMODE_CLIMB,$/;"	e	enum:__anon170
GCE_FLIGHTMODE_CRUISE	src/Input/InputQueue.hpp	/^  GCE_FLIGHTMODE_CRUISE,$/;"	e	enum:__anon170
GCE_FLIGHTMODE_FINALGLIDE	src/Input/InputQueue.hpp	/^  GCE_FLIGHTMODE_FINALGLIDE,$/;"	e	enum:__anon170
GCE_FLIGHTMODE_FINALGLIDE_ABOVE	src/Input/InputQueue.hpp	/^  GCE_FLIGHTMODE_FINALGLIDE_ABOVE,$/;"	e	enum:__anon170
GCE_FLIGHTMODE_FINALGLIDE_BELOW	src/Input/InputQueue.hpp	/^  GCE_FLIGHTMODE_FINALGLIDE_BELOW,$/;"	e	enum:__anon170
GCE_FLIGHTMODE_FINALGLIDE_TERRAIN	src/Input/InputQueue.hpp	/^  GCE_FLIGHTMODE_FINALGLIDE_TERRAIN,$/;"	e	enum:__anon170
GCE_GPS_CONNECTION_WAIT	src/Input/InputQueue.hpp	/^  GCE_GPS_CONNECTION_WAIT,$/;"	e	enum:__anon170
GCE_GPS_FIX_WAIT	src/Input/InputQueue.hpp	/^  GCE_GPS_FIX_WAIT,$/;"	e	enum:__anon170
GCE_HEIGHT_MAX	src/Input/InputQueue.hpp	/^  GCE_HEIGHT_MAX,$/;"	e	enum:__anon170
GCE_LANDABLE_UNREACHABLE	src/Input/InputQueue.hpp	/^  GCE_LANDABLE_UNREACHABLE,$/;"	e	enum:__anon170
GCE_LANDING	src/Input/InputQueue.hpp	/^  GCE_LANDING,$/;"	e	enum:__anon170
GCE_POLAR_CHANGED	src/Input/InputQueue.hpp	/^  GCE_POLAR_CHANGED,$/;"	e	enum:__anon170
GCE_Queue	src/Input/InputQueue.cpp	/^static int GCE_Queue[MAX_GCE_QUEUE];$/;"	v	file:
GCE_STARTUP_REAL	src/Input/InputQueue.hpp	/^  GCE_STARTUP_REAL,$/;"	e	enum:__anon170
GCE_STARTUP_SIMULATOR	src/Input/InputQueue.hpp	/^  GCE_STARTUP_SIMULATOR,$/;"	e	enum:__anon170
GCE_TAKEOFF	src/Input/InputQueue.hpp	/^  GCE_TAKEOFF,$/;"	e	enum:__anon170
GCE_TASK_FINISH	src/Input/InputQueue.hpp	/^  GCE_TASK_FINISH,$/;"	e	enum:__anon170
GCE_TASK_NEXTWAYPOINT	src/Input/InputQueue.hpp	/^  GCE_TASK_NEXTWAYPOINT,$/;"	e	enum:__anon170
GCE_TASK_START	src/Input/InputQueue.hpp	/^  GCE_TASK_START,$/;"	e	enum:__anon170
GCE_TEAM_POS_REACHED	src/Input/InputQueue.hpp	/^  GCE_TEAM_POS_REACHED,$/;"	e	enum:__anon170
GEAR_DOWN	src/Dialogs/Device/Vega/SwitchesDialog.cpp	/^    GEAR_DOWN,$/;"	e	enum:SwitchesLeft::Controls	file:
GENERIC	src/Widget/RowFormWidget.hpp	/^      GENERIC,$/;"	m	class:RowFormWidget::Row::Type
GEOELLIPSE_HPP	src/Geo/GeoEllipse.hpp	24;"	d
GEOID_H	src/Geo/Geoid.hpp	25;"	d
GEOPOINT	src/Form/DataField/Base.hpp	/^    GEOPOINT,$/;"	m	class:DataField::Type
GEOVECTOR_MEMENTO_HPP	src/Geo/Memento/GeoVectorMemento.hpp	24;"	d
GEO_VECTOR_HPP	src/Geo/GeoVector.hpp	24;"	d
GERMANY_NORTH	src/Weather/PCMet/Overlays.hpp	/^    GERMANY_NORTH,$/;"	m	class:PCMet::OverlayInfo::Area
GERMANY_SOUTH	src/Weather/PCMet/Overlays.hpp	/^    GERMANY_SOUTH,$/;"	m	class:PCMet::OverlayInfo::Area
GESTURE_MANAGER_HPP	src/UIUtil/GestureManager.hpp	31;"	d
GETPOWERMANAGEMENT	src/Hardware/VideoPower.h	30;"	d
GET_CLASS	src/Topography/shapelib/mapserver.h	456;"	d
GET_LAYER	src/Topography/shapelib/mapserver.h	455;"	d
GGA	src/Device/Parser.cpp	/^NMEAParser::GGA(NMEAInputLine &line, NMEAInfo &info)$/;"	f	class:NMEAParser
GID	src/Device/Driver/Volkslogger/vlconv.cpp	/^  char A[10], DTE[10], FXA[10], PLT[80], GTY[50], GID[50], RFW[10], RHW[10],$/;"	m	struct:IGCHEADER	file:
GIT_SUFFIX	src/Version.cpp	54;"	d	file:
GIT_SUFFIX	src/Version.cpp	56;"	d	file:
GLASS	src/InfoBoxes/InfoBoxSettings.hpp	/^    GLASS,$/;"	m	class:InfoBoxSettings::BorderStyle
GLArrayBuffer	src/ui/canvas/opengl/Buffer.hpp	/^class GLArrayBuffer : public GLBuffer<GL_ARRAY_BUFFER, GL_STATIC_DRAW> {$/;"	c
GLBlend	src/ui/canvas/opengl/Scope.hpp	/^  ScopeAlphaBlend() noexcept:GLBlend(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA) {}$/;"	f	class:ScopeAlphaBlend
GLBlend	src/ui/canvas/opengl/Scope.hpp	/^class GLBlend : public GLEnable<GL_BLEND> {$/;"	c
GLBuffer	src/ui/canvas/opengl/Buffer.hpp	/^class GLBuffer {$/;"	c
GLCanvasScissor	src/ui/canvas/opengl/Scissor.hpp	/^    :GLCanvasScissor(canvas.GetRect()) {}$/;"	f	class:GLCanvasScissor
GLCanvasScissor	src/ui/canvas/opengl/Scissor.hpp	/^class GLCanvasScissor : public GLEnable<GL_SCISSOR_TEST> {$/;"	c
GLCanvasScissor	src/ui/canvas/opengl/Scissor.hpp	/^class GLCanvasScissor : public GLScissor {$/;"	c
GLDonutVertices	src/ui/canvas/opengl/VertexArray.hpp	/^struct GLDonutVertices : public GLVertexArray<66> {$/;"	s
GLEnable	src/ui/canvas/opengl/Scope.hpp	/^class GLEnable {$/;"	c
GLExt	src/ui/canvas/opengl/Dynamic.cpp	/^namespace GLExt {$/;"	n	file:
GLExt	src/ui/canvas/opengl/Dynamic.hpp	/^namespace GLExt {$/;"	n
GLFrameBuffer	src/ui/canvas/opengl/FrameBuffer.hpp	/^class GLFrameBuffer {$/;"	c
GLIDE	src/Renderer/WaypointRendererSettings.hpp	/^    GLIDE,$/;"	m	class:WaypointRendererSettings::ArrivalHeightDisplay
GLIDECOMPUTERCONFIGPANEL_HPP	src/Dialogs/Settings/Panels/GlideComputerConfigPanel.hpp	25;"	d
GLIDECOMPUTER_BLACKBOARD_HPP	src/Computer/GlideComputerBlackboard.hpp	25;"	d
GLIDEPOLAR_HPP	src/Engine/GlideSolvers/GlidePolar.hpp	23;"	d
GLIDER	src/FLARM/Traffic.hpp	/^    GLIDER = 1,           \/\/!< glider \/ motor-glider$/;"	m	class:FlarmTraffic::AircraftType
GLIDER	src/Tracking/LiveTrack24.hpp	/^  GLIDER = 8,$/;"	m	class:LiveTrack24::VehicleType
GLIDER	src/Tracking/LiveTrack24/Settings.hpp	/^    GLIDER = 0,$/;"	m	class:LiveTrack24::Settings::VehicleType
GLIDERESULT_HPP	src/Engine/GlideSolvers/GlideResult.hpp	23;"	d
GLIDER_LINK	src/Device/Config.hpp	/^    GLIDER_LINK,$/;"	m	class:DeviceConfig::PortType
GLIDESTATE_HPP	src/Engine/GlideSolvers/GlideState.hpp	23;"	d
GLIDE_AND_TERRAIN	src/Renderer/WaypointRendererSettings.hpp	/^    GLIDE_AND_TERRAIN,$/;"	m	class:WaypointRendererSettings::ArrivalHeightDisplay
GLIDE_COMPUTER_INTERFACE_HPP	src/Computer/GlideComputerInterface.hpp	2;"	d
GLL	src/Device/Parser.cpp	/^NMEAParser::GLL(NMEAInputLine &line, NMEAInfo &info)$/;"	f	class:NMEAParser
GLO	src/Kobo/Model.hpp	/^  GLO,$/;"	m	class:KoboModel
GLOBAL_SLICE_ALLOCATOR_HXX	src/util/GlobalSliceAllocator.hxx	31;"	d
GLO_HD	src/Kobo/Model.hpp	/^  GLO_HD,$/;"	m	class:KoboModel
GLProgram	src/ui/canvas/opengl/Program.hpp	/^class GLProgram {$/;"	c
GLRenderBuffer	src/ui/canvas/opengl/RenderBuffer.hpp	/^  GLRenderBuffer() {$/;"	f	class:GLRenderBuffer
GLRenderBuffer	src/ui/canvas/opengl/RenderBuffer.hpp	/^class GLRenderBuffer {$/;"	c
GLSL_PRECISION	src/ui/canvas/opengl/Shaders.cpp	52;"	d	file:
GLSL_VERSION	src/ui/canvas/opengl/Shaders.cpp	51;"	d	file:
GLScissor	src/ui/canvas/opengl/Scissor.hpp	/^    :GLScissor(OpenGL::translate.x + rc.left,$/;"	f	class:GLCanvasScissor
GLScissor	src/ui/canvas/opengl/Scissor.hpp	/^    :GLScissor(OpenGL::translate.x,$/;"	f	class:GLCanvasScissor
GLScissor	src/ui/canvas/opengl/Scope.hpp	/^class GLScissor : public GLEnable<GL_SCISSOR_TEST> {$/;"	c
GLShader	src/ui/canvas/opengl/Program.hpp	/^class GLShader {$/;"	c
GLSurfaceListener	src/ui/canvas/opengl/Surface.hpp	/^struct GLSurfaceListener {$/;"	s
GLSurfaceListenerList	src/ui/canvas/opengl/Surface.cpp	/^typedef std::list<GLSurfaceListener *> GLSurfaceListenerList;$/;"	t	file:
GLTexture	src/ui/canvas/opengl/Texture.hpp	/^class GLTexture {$/;"	c
GLUE_GAUGE_VARIO_H	src/Gauge/GlueGaugeVario.hpp	25;"	d
GLVertexArray	src/ui/canvas/opengl/VertexArray.hpp	/^struct GLVertexArray {$/;"	s
GL_EXACT	src/ui/opengl/Types.hpp	/^static constexpr GLenum GL_EXACT = GL_FIXED;$/;"	v
GL_EXACT	src/ui/opengl/Types.hpp	/^static constexpr GLenum GL_EXACT = GL_FLOAT;$/;"	v
GL_VALUE	src/ui/opengl/Types.hpp	/^static constexpr GLenum GL_VALUE = GL_INT;$/;"	v
GL_VALUE	src/ui/opengl/Types.hpp	/^static constexpr GLenum GL_VALUE = GL_SHORT;$/;"	v
GLexact	src/ui/opengl/Types.hpp	/^typedef GLfixed GLexact;$/;"	t
GLexact	src/ui/opengl/Types.hpp	/^typedef GLfloat GLexact;$/;"	t
GLuvalue	src/ui/opengl/Types.hpp	/^typedef GLuint GLuvalue;$/;"	t
GLuvalue	src/ui/opengl/Types.hpp	/^typedef GLushort GLuvalue;$/;"	t
GLvalue	src/ui/opengl/Types.hpp	/^typedef GLint GLvalue;$/;"	t
GLvalue	src/ui/opengl/Types.hpp	/^typedef GLshort GLvalue;$/;"	t
GOTO	src/Dialogs/Task/AlternatesListDialog.cpp	/^    GOTO,$/;"	e	enum:final::Buttons	file:
GOTO	src/Engine/Task/TaskType.hpp	/^  GOTO,$/;"	m	class:TaskType
GOTOTASK_H	src/Engine/Task/Unordered/GotoTask.hpp	24;"	d
GPS	src/Dialogs/StatusPanels/SystemStatusPanel.cpp	/^  GPS,$/;"	e	enum:Controls	file:
GPS	src/NMEA/GPSState.hpp	/^  GPS,$/;"	m	class:FixQuality
GPSClock	src/time/GPSClock.hpp	/^  GPSClock():last(RESET_VALUE) {}$/;"	f	class:GPSClock
GPSClock	src/time/GPSClock.hpp	/^class GPSClock {$/;"	c
GPSState	src/NMEA/GPSState.hpp	/^struct GPSState$/;"	s
GPSStatus	src/FLARM/Status.hpp	/^  enum class GPSStatus: uint8_t {$/;"	c	struct:FlarmStatus
GPS_2D	src/FLARM/Status.hpp	/^    GPS_2D = 1,$/;"	m	class:FlarmStatus::GPSStatus
GPS_3D	src/FLARM/Status.hpp	/^    GPS_3D = 2,$/;"	m	class:FlarmStatus::GPSStatus
GPS_COMMUNICATION	src/FLARM/Error.hpp	/^    GPS_COMMUNICATION = 0x31,$/;"	e	enum:uint8_t
GPS_CONFIGURATION	src/FLARM/Error.hpp	/^    GPS_CONFIGURATION = 0x32,$/;"	e	enum:uint8_t
GPWIN	src/Device/Driver/PosiGraph.cpp	/^GPWIN(NMEAInputLine &line, NMEAInfo &info)$/;"	f	file:
GR	src/Computer/GlideComputerAirData.cpp	/^GlideComputerAirData::GR(const MoreData &basic, const FlyingState &flying,$/;"	f	class:GlideComputerAirData
GRADIENT	src/Units/Unit.hpp	/^  GRADIENT,$/;"	m	class:Unit
GRADIENT_HPP	src/Engine/Util/Gradient.hpp	23;"	d
GRAHAM_SCAN_HPP	src/Geo/ConvexHull/GrahamScan.hpp	24;"	d
GRAVITY	src/Geo/Gravity.hpp	/^static constexpr double GRAVITY = 9.81;$/;"	v
GRAY	src/ui/canvas/custom/UncompressedImage.hpp	/^    GRAY,$/;"	m	class:UncompressedImage::Format
GRAYSCALE_8BIT	src/ui/canvas/fb/mxcfb.h	72;"	d
GRAYSCALE_8BIT_INVERTED	src/ui/canvas/fb/mxcfb.h	73;"	d
GRECORD	src/Device/Driver/Volkslogger/grecord.cpp	/^GRECORD::GRECORD(FILE *ausgabedatei) {$/;"	f	class:GRECORD
GRECORD	src/Device/Driver/Volkslogger/grecord.h	/^class GRECORD {$/;"	c
GRECORD_H	src/Device/Driver/Volkslogger/grecord.h	19;"	d
GRECORD_HPP	src/Logger/GRecord.hpp	24;"	d
GREEN	src/FLARM/Color.hpp	/^  GREEN,$/;"	m	class:FlarmColor
GROUND	src/Terrain/Height.hpp	/^  UNKNOWN, GROUND, WATER$/;"	m	class:TerrainType
GRecord	src/Logger/GRecord.hpp	/^class GRecord$/;"	c
GSA	src/Device/Parser.cpp	/^NMEAParser::GSA(NMEAInputLine &line, NMEAInfo &info)$/;"	f	class:NMEAParser
GTY	src/Device/Driver/Volkslogger/vlconv.cpp	/^  char A[10], DTE[10], FXA[10], PLT[80], GTY[50], GID[50], RFW[10], RHW[10],$/;"	m	struct:IGCHEADER	file:
GUIStartLogger	src/Logger/Logger.cpp	/^Logger::GUIStartLogger(const NMEAInfo& gps_info,$/;"	f	class:Logger
GUIStopLogger	src/Logger/Logger.cpp	/^Logger::GUIStopLogger(const NMEAInfo &gps_info,$/;"	f	class:Logger
GUIToggleLogger	src/Logger/Logger.cpp	/^Logger::GUIToggleLogger(const NMEAInfo& gps_info,$/;"	f	class:Logger
GUNZIP_READER_HXX	src/io/GunzipReader.hxx	31;"	d
GaugeLocation	src/Gauge/TrafficSettings.hpp	/^  enum class GaugeLocation : uint8_t {$/;"	c	struct:TrafficSettings
GaugeThermalAssistantWindow	src/Gauge/GaugeThermalAssistant.cpp	/^class GaugeThermalAssistantWindow : public ThermalAssistantWindow {$/;"	c	file:
GaugeVario	src/Gauge/GaugeVario.hpp	/^class GaugeVario : public AntiFlickerWindow$/;"	c
GaugesConfigPanel	src/Dialogs/Settings/Panels/GaugesConfigPanel.cpp	/^  GaugesConfigPanel()$/;"	f	class:final
GdiLoadImage	src/ui/canvas/gdi/GdiPlusBitmap.cpp	/^GdiLoadImage(const TCHAR* filename)$/;"	f
GdiShutdown	src/ui/canvas/gdi/GdiPlusBitmap.cpp	/^GdiShutdown()$/;"	f
GdiStartup	src/ui/canvas/gdi/GdiPlusBitmap.cpp	/^GdiStartup()$/;"	f
Gen	src/ui/canvas/opengl/RenderBuffer.hpp	/^  void Gen() {$/;"	f	class:GLRenderBuffer
GenFramebuffers	src/ui/canvas/opengl/FBO.cpp	/^FBO::GenFramebuffers(GLsizei n, GLuint *framebuffers)$/;"	f	class:FBO
GenRenderbuffers	src/ui/canvas/opengl/FBO.cpp	/^FBO::GenRenderbuffers(GLsizei n, GLuint *renderbuffers)$/;"	f	class:FBO
GeneralInfo	src/Device/Driver/CAI302/Protocol.hpp	/^  struct GeneralInfo {$/;"	s	namespace:CAI302
Generate	src/Terrain/TerrainRenderer.cpp	/^TerrainRenderer::Generate(const WindowProjection &map_projection,$/;"	f	class:TerrainRenderer
Generate	src/Weather/Rasp/RaspRenderer.cpp	/^RaspRenderer::Generate(const WindowProjection &projection,$/;"	f	class:RaspRenderer
Generate	src/ui/event/android/Queue.cpp	/^EventQueue::Generate(Event &event)$/;"	f	class:UI::EventQueue
Generate	src/ui/event/poll/InputQueue.cpp	/^InputEventQueue::Generate(Event &event)$/;"	f	class:UI::InputEventQueue
Generate	src/ui/event/poll/Queue.cpp	/^EventQueue::Generate(Event &event)$/;"	f	class:UI::EventQueue
Generate	src/ui/event/poll/WaylandQueue.cpp	/^WaylandEventQueue::Generate(Event &event)$/;"	f	class:UI::WaylandEventQueue
Generate	src/ui/event/poll/X11Queue.hpp	/^  bool Generate(Event &event) {$/;"	f	class:UI::X11EventQueue
Generate	src/ui/event/poll/linux/MergeMouse.cpp	/^MergeMouse::Generate()$/;"	f	class:UI::MergeMouse
Generate	src/ui/event/sdl/Queue.cpp	/^EventQueue::Generate(Event &event)$/;"	f	class:UI::EventQueue
GenerateArcExcluding	src/Engine/Task/ObservationZones/Boundary.cpp	/^OZBoundary::GenerateArcExcluding(const GeoPoint &center, double radius,$/;"	f	class:OZBoundary
GenerateFAITriangleArea	src/Engine/Task/Shapes/FAITriangleArea.cpp	/^GenerateFAITriangleArea(GeoPoint *dest,$/;"	f
GenerateFAITriangleLargeBottom	src/Engine/Task/Shapes/FAITriangleArea.cpp	/^GenerateFAITriangleLargeBottom(GeoPoint *dest,$/;"	f	file:
GenerateFAITriangleLargeBottomLeft	src/Engine/Task/Shapes/FAITriangleArea.cpp	/^GenerateFAITriangleLargeBottomLeft(GeoPoint *dest,$/;"	f	file:
GenerateFAITriangleLargeBottomRight	src/Engine/Task/Shapes/FAITriangleArea.cpp	/^GenerateFAITriangleLargeBottomRight(GeoPoint *dest,$/;"	f	file:
GenerateFAITriangleLargeLeft1	src/Engine/Task/Shapes/FAITriangleArea.cpp	/^GenerateFAITriangleLargeLeft1(GeoPoint *dest,$/;"	f	file:
GenerateFAITriangleLargeLeft2	src/Engine/Task/Shapes/FAITriangleArea.cpp	/^GenerateFAITriangleLargeLeft2(GeoPoint *dest,$/;"	f	file:
GenerateFAITriangleLargeRight1	src/Engine/Task/Shapes/FAITriangleArea.cpp	/^GenerateFAITriangleLargeRight1(GeoPoint *dest,$/;"	f	file:
GenerateFAITriangleLargeRight2	src/Engine/Task/Shapes/FAITriangleArea.cpp	/^GenerateFAITriangleLargeRight2(GeoPoint *dest,$/;"	f	file:
GenerateFAITriangleLargeTop	src/Engine/Task/Shapes/FAITriangleArea.cpp	/^GenerateFAITriangleLargeTop(GeoPoint *dest,$/;"	f	file:
GenerateFAITriangleLeft	src/Engine/Task/Shapes/FAITriangleArea.cpp	/^GenerateFAITriangleLeft(GeoPoint *dest,$/;"	f	file:
GenerateFAITriangleRight	src/Engine/Task/Shapes/FAITriangleArea.cpp	/^GenerateFAITriangleRight(GeoPoint *dest,$/;"	f	file:
GenerateFAITriangleTop	src/Engine/Task/Shapes/FAITriangleArea.cpp	/^GenerateFAITriangleTop(GeoPoint *dest,$/;"	f	file:
GenerateImage	src/Terrain/RasterRenderer.cpp	/^RasterRenderer::GenerateImage(bool do_shading,$/;"	f	class:RasterRenderer
GenerateIntermediate	src/Engine/Route/RoutePolars.cpp	/^RoutePolars::GenerateIntermediate(const RoutePoint& _dest,$/;"	f	class:RoutePolars
GenerateKey	src/Tracking/SkyLines/Key.cpp	/^SkyLinesTracking::GenerateKey()$/;"	f	class:SkyLinesTracking
GenerateSessionID	src/Tracking/LiveTrack24.cpp	/^LiveTrack24::GenerateSessionID()$/;"	f	class:LiveTrack24
GenerateSessionID	src/Tracking/LiveTrack24.cpp	/^LiveTrack24::GenerateSessionID(UserID user_id)$/;"	f	class:LiveTrack24
GenerateSlopeImage	src/Terrain/RasterRenderer.cpp	/^RasterRenderer::GenerateSlopeImage(unsigned height_scale,$/;"	f	class:RasterRenderer
GenerateTakeoffPoint	src/Engine/Waypoint/Waypoints.cpp	/^Waypoints::GenerateTakeoffPoint(const GeoPoint& location,$/;"	f	class:Waypoints
GenerateUnshadedImage	src/Terrain/RasterRenderer.cpp	/^RasterRenderer::GenerateUnshadedImage(unsigned height_scale,$/;"	f	class:RasterRenderer
GenericCreateOnPort	src/Device/Driver/Generic.cpp	/^GenericCreateOnPort(const DeviceConfig &config, Port &com_port)$/;"	f	file:
GenericDevice	src/Device/Driver/Generic.cpp	/^class GenericDevice : public AbstractDevice {$/;"	c	file:
GeoAngle	src/Cloud/Dump.hpp	/^  constexpr GeoAngle(Angle _angle):Angle(_angle) {}$/;"	f	struct:GeoAngle
GeoAngle	src/Cloud/Dump.hpp	/^struct GeoAngle : Angle {$/;"	s
GeoBounds	src/Geo/GeoBounds.hpp	/^  GeoBounds(const GeoPoint north_west, const GeoPoint south_east)$/;"	f	class:GeoBounds
GeoBounds	src/Geo/GeoBounds.hpp	/^  GeoBounds(const GeoPoint pt)$/;"	f	class:GeoBounds
GeoBounds	src/Geo/GeoBounds.hpp	/^class GeoBounds {$/;"	c
GeoClip	src/Geo/GeoClip.hpp	/^  GeoClip(const GeoBounds &other)$/;"	f	class:GeoClip
GeoClip	src/Geo/GeoClip.hpp	/^class GeoClip : protected GeoBounds {$/;"	c
GeoEllipse	src/Geo/GeoEllipse.cpp	/^GeoEllipse::GeoEllipse(const GeoPoint &f1, const GeoPoint &f2,$/;"	f	class:GeoEllipse
GeoEllipse	src/Geo/GeoEllipse.hpp	/^class GeoEllipse$/;"	c
GeoFrom2D	src/MapWindow/OverlayBitmap.cpp	/^GeoFrom2D(DoublePoint2D p)$/;"	f	file:
GeoPoint	src/Geo/GeoPoint.hpp	/^  GeoPoint(const Angle _longitude, const Angle _latitude) :$/;"	f	struct:GeoPoint
GeoPoint	src/Geo/GeoPoint.hpp	/^struct GeoPoint {$/;"	s
GeoPoint	src/Tracking/SkyLines/Protocol.hpp	/^struct GeoPoint {$/;"	s	namespace:SkyLinesTracking
GeoPointDataField	src/Form/DataField/GeoPoint.hpp	/^  GeoPointDataField(GeoPoint _value, CoordinateFormat _format,$/;"	f	class:final
GeoPointEntryDialog	src/Dialogs/GeoPointEntry.cpp	/^GeoPointEntryDialog(const TCHAR *caption, GeoPoint &value,$/;"	f
GeoQuadrilateral	src/Geo/Quadrilateral.hpp	/^struct GeoQuadrilateral {$/;"	s
GeoQuadrilateral	src/Projection/CompareProjection.cpp	/^  :GeoQuadrilateral(projection.GetGeoQuadrilateral()) {}$/;"	f
GeoTo2D	src/Geo/ConvexHull/PolygonInterior.cpp	/^GeoTo2D(GeoPoint p)$/;"	f	file:
GeoTo2D	src/MapWindow/OverlayBitmap.cpp	/^GeoTo2D(GeoPoint p)$/;"	f	file:
GeoVector	src/Geo/GeoVector.cpp	/^GeoVector::GeoVector(const GeoPoint &source, const GeoPoint &target)$/;"	f	class:GeoVector
GeoVector	src/Geo/GeoVector.hpp	/^  GeoVector(double _distance, Angle _bearing)$/;"	f	struct:GeoVector
GeoVector	src/Geo/GeoVector.hpp	/^struct GeoVector {$/;"	s
GeoVectorMemento	src/Geo/Memento/GeoVectorMemento.hpp	/^  GeoVectorMemento()$/;"	f	class:GeoVectorMemento
GeoVectorMemento	src/Geo/Memento/GeoVectorMemento.hpp	/^class GeoVectorMemento $/;"	c
Geometry	src/Gauge/GaugeVario.hpp	/^  struct Geometry {$/;"	s	class:GaugeVario
Geometry	src/InfoBoxes/InfoBoxSettings.hpp	/^  enum class Geometry : uint8_t {$/;"	c	struct:InfoBoxSettings
Gesture2Event	src/Input/InputConfig.hpp	/^  RadixTree<unsigned> Gesture2Event;$/;"	m	struct:InputConfig
GestureLook	src/Look/GestureLook.hpp	/^struct GestureLook$/;"	s
GestureManager	src/UIUtil/GestureManager.hpp	/^  GestureManager():$/;"	f	class:GestureManager
GestureManager	src/UIUtil/GestureManager.hpp	/^class GestureManager$/;"	c
Get	src/Engine/Waypoint/Waypoints.cpp	/^Waypoints::WaypointNameTree::Get(const TCHAR *name) const$/;"	f	class:Waypoints::WaypointNameTree
Get	src/FLARM/ColorDatabase.hpp	/^  FlarmColor Get(FlarmId id) const {$/;"	f	class:FlarmColorDatabase
Get	src/FLARM/NameDatabase.cpp	/^FlarmNameDatabase::Get(FlarmId id) const$/;"	f	class:FlarmNameDatabase
Get	src/FLARM/NameDatabase.cpp	/^FlarmNameDatabase::Get(const TCHAR *name) const$/;"	f	class:FlarmNameDatabase
Get	src/FLARM/NameDatabase.cpp	/^FlarmNameDatabase::Get(const TCHAR *name, FlarmId *buffer, unsigned max) const$/;"	f	class:FlarmNameDatabase
Get	src/NMEA/ClimbHistory.hpp	/^  double Get(unsigned speed) const {$/;"	f	class:ClimbHistory
Get	src/Profile/Map.hpp	/^  bool Get(const char *key, BasicStringBuffer<TCHAR, max> &value) const {$/;"	f	class:ProfileMap
Get	src/Profile/Map.hpp	/^  const char *Get(const char *key, const char *default_value=nullptr) const {$/;"	f	class:ProfileMap
Get	src/Profile/NumericValue.cpp	/^ProfileMap::Get(const char *key, bool &value) const$/;"	f	class:ProfileMap
Get	src/Profile/NumericValue.cpp	/^ProfileMap::Get(const char *key, double &value) const$/;"	f	class:ProfileMap
Get	src/Profile/NumericValue.cpp	/^ProfileMap::Get(const char *key, int &value) const$/;"	f	class:ProfileMap
Get	src/Profile/NumericValue.cpp	/^ProfileMap::Get(const char *key, short &value) const$/;"	f	class:ProfileMap
Get	src/Profile/NumericValue.cpp	/^ProfileMap::Get(const char *key, uint16_t &value) const$/;"	f	class:ProfileMap
Get	src/Profile/NumericValue.cpp	/^ProfileMap::Get(const char *key, uint8_t &value) const$/;"	f	class:ProfileMap
Get	src/Profile/NumericValue.cpp	/^ProfileMap::Get(const char *key, unsigned &value) const$/;"	f	class:ProfileMap
Get	src/Profile/ProfileMap.cpp	/^Profile::Get(const char *key, TCHAR *value, std::size_t max_size)$/;"	f	class:Profile
Get	src/Profile/ProfileMap.cpp	/^Profile::Get(const char *key, bool &value)$/;"	f	class:Profile
Get	src/Profile/ProfileMap.cpp	/^Profile::Get(const char *key, const char *default_value)$/;"	f	class:Profile
Get	src/Profile/ProfileMap.cpp	/^Profile::Get(const char *key, double &value)$/;"	f	class:Profile
Get	src/Profile/ProfileMap.cpp	/^Profile::Get(const char *key, int &value)$/;"	f	class:Profile
Get	src/Profile/ProfileMap.cpp	/^Profile::Get(const char *key, short &value)$/;"	f	class:Profile
Get	src/Profile/ProfileMap.cpp	/^Profile::Get(const char *key, uint16_t &value)$/;"	f	class:Profile
Get	src/Profile/ProfileMap.cpp	/^Profile::Get(const char *key, uint8_t &value)$/;"	f	class:Profile
Get	src/Profile/ProfileMap.cpp	/^Profile::Get(const char *key, unsigned &value)$/;"	f	class:Profile
Get	src/Profile/ProfileMap.hpp	/^  Get(const char *key, BasicStringBuffer<TCHAR, max> &value)$/;"	f	namespace:Profile
Get	src/Profile/StringValue.cpp	/^ProfileMap::Get(const char *key, TCHAR *value, size_t max_size) const$/;"	f	class:ProfileMap
Get	src/Terrain/RasterBuffer.hpp	/^  TerrainHeight Get(unsigned x, unsigned y) const {$/;"	f	class:RasterBuffer
Get	src/net/http/FormData.hpp	/^  const struct curl_httppost *Get() const {$/;"	f	class:Net::MultiPartFormData
Get	src/ui/canvas/custom/LibTiff.cpp	/^  TIFF *Get() {$/;"	f	class:TiffLoader
Get	src/ui/event/android/Loop.cpp	/^EventLoop::Get(Event &event)$/;"	f	class:UI::EventLoop
Get	src/ui/event/poll/Loop.cpp	/^EventLoop::Get(Event &event)$/;"	f	class:UI::EventLoop
Get	src/ui/event/poll/libinput/UdevContext.hpp	/^  struct udev *Get() {$/;"	f	class:UdevContext
Get	src/ui/event/sdl/Loop.cpp	/^EventLoop::Get(Event &event)$/;"	f	class:UI::EventLoop
Get	src/ui/event/windows/Loop.cpp	/^EventLoop::Get(Event &event)$/;"	f	class:UI::EventLoop
Get	src/ui/window/custom/Reference.hpp	/^  Window *Get(const ContainerWindow &root) const {$/;"	f	class:WindowReference
Get	src/util/AllocatedGrid.hxx	/^	const_reference Get(unsigned x, unsigned y) const {$/;"	f	class:AllocatedGrid
Get	src/util/AllocatedGrid.hxx	/^	reference Get(unsigned x, unsigned y) {$/;"	f	class:AllocatedGrid
Get	src/util/Cache.hxx	/^	const Data *Get(K &&key) {$/;"	f	class:Cache
Get	src/util/Manual.hxx	/^	T &Get() {$/;"	f	class:Manual
Get	src/util/Manual.hxx	/^	const T &Get() const {$/;"	f	class:Manual
Get	src/util/RadixTree.hpp	/^    T *Get(const TCHAR *key) {$/;"	f	struct:RadixTree::Node
Get	src/util/RadixTree.hpp	/^    const T *Get(const TCHAR *key) const {$/;"	f	struct:RadixTree::Node
Get	src/util/RadixTree.hpp	/^  T &Get(const TCHAR *key, T &default_value) {$/;"	f	class:RadixTree
Get	src/util/RadixTree.hpp	/^  const T &Get(const TCHAR *key, const T &default_value) const {$/;"	f	class:RadixTree
GetAATTaskPoint	src/Engine/Task/Ordered/OrderedTask.cpp	/^OrderedTask::GetAATTaskPoint(unsigned TPindex) const$/;"	f	class:OrderedTask
GetALSADeviceName	src/Audio/ALSAEnv.cpp	/^const char *GetALSADeviceName()$/;"	f	namespace:ALSAEnv
GetALSALatency	src/Audio/ALSAEnv.cpp	/^unsigned GetALSALatency()$/;"	f	namespace:ALSAEnv
GetAWP	src/Replay/TaskAutoPilot.cpp	/^TaskAutoPilot::GetAWP(const TaskAccessor &task)$/;"	f	class:TaskAutoPilot
GetAckDay	src/Airspace/ProtectedAirspaceWarningManager.cpp	/^ProtectedAirspaceWarningManager::GetAckDay(const AbstractAirspace &airspace) const$/;"	f	class:ProtectedAirspaceWarningManager
GetAckDay	src/Engine/Airspace/AirspaceWarning.hpp	/^  bool GetAckDay() const {$/;"	f	class:AirspaceWarning
GetAckDay	src/Engine/Airspace/AirspaceWarningManager.cpp	/^AirspaceWarningManager::GetAckDay(const AbstractAirspace &airspace) const$/;"	f	class:AirspaceWarningManager
GetAcknowledge	src/NMEA/VegaSwitchState.hpp	/^  constexpr bool GetAcknowledge() const {$/;"	f	struct:VegaSwitchState
GetActiveIndex	src/Engine/Task/Ordered/OrderedTask.hpp	/^  unsigned GetActiveIndex() const {$/;"	f	class:final
GetActiveState	src/Engine/Task/Ordered/Points/OrderedTaskPoint.hpp	/^  ActiveState GetActiveState() const {$/;"	f	class:OrderedTaskPoint
GetActiveTask	src/Engine/Task/TaskManager.hpp	/^  const AbstractTask *GetActiveTask() const {$/;"	f	class:TaskManager
GetActiveTaskPoint	src/Engine/Task/TaskManager.cpp	/^TaskManager::GetActiveTaskPoint() const$/;"	f	class:TaskManager
GetActiveTaskPointIndex	src/Engine/Task/TaskManager.cpp	/^TaskManager::GetActiveTaskPointIndex() const$/;"	f	class:TaskManager
GetActiveTaskPointIndex	src/Replay/TaskAccessor.hpp	/^  unsigned GetActiveTaskPointIndex() const {$/;"	f	class:TaskAccessor
GetActiveTaskPointLocation	src/Replay/TaskAccessor.hpp	/^  GeoPoint GetActiveTaskPointLocation() const {$/;"	f	class:TaskAccessor
GetActiveTrafficCount	src/FLARM/List.hpp	/^  unsigned GetActiveTrafficCount() const {$/;"	f	struct:TrafficList
GetActiveWaypoint	src/Task/ProtectedTaskManager.cpp	/^ProtectedTaskManager::GetActiveWaypoint() const$/;"	f	class:ProtectedTaskManager
GetAirbrakeLocked	src/NMEA/VegaSwitchState.hpp	/^  constexpr bool GetAirbrakeLocked() const {$/;"	f	struct:VegaSwitchState
GetAirbrakeNotLocked	src/NMEA/VegaSwitchState.hpp	/^  constexpr bool GetAirbrakeNotLocked() const {$/;"	f	struct:VegaSwitchState
GetAirspace	src/Engine/Airspace/Airspace.hpp	/^  AbstractAirspace &GetAirspace() const {$/;"	f	class:final
GetAirspace	src/Engine/Airspace/AirspaceSorter.hpp	/^  const AbstractAirspace &GetAirspace() const {$/;"	f	class:AirspaceSelectInfo
GetAirspace	src/Engine/Airspace/AirspaceWarning.hpp	/^  const AbstractAirspace &GetAirspace() const {$/;"	f	class:AirspaceWarning
GetAirspaceColor	src/Profile/AirspaceConfig.cpp	/^GetAirspaceColor(const ProfileMap &map, unsigned i, RGB8Color &color)$/;"	f	file:
GetAirspaceWarnings	src/Components.cpp	/^GetAirspaceWarnings()$/;"	f
GetAirspaceWarnings	src/Computer/GlideComputer.hpp	/^  ProtectedAirspaceWarningManager &GetAirspaceWarnings() {$/;"	f	class:GlideComputer
GetAirspaceWarnings	src/Computer/GlideComputer.hpp	/^  const ProtectedAirspaceWarningManager &GetAirspaceWarnings() const {$/;"	f	class:GlideComputer
GetAirspaces	src/Renderer/AirspaceLabelRenderer.hpp	/^  const Airspaces *GetAirspaces() const {$/;"	f	class:AirspaceLabelRenderer
GetAirspaces	src/Renderer/AirspaceRenderer.hpp	/^  const Airspaces *GetAirspaces() const {$/;"	f	class:AirspaceRenderer
GetAllowedCharacters	src/Form/DataField/Prefix.hpp	/^  const TCHAR *GetAllowedCharacters() const {$/;"	f	class:final
GetAllowedCharactersFunction	src/Form/DataField/Prefix.hpp	/^  const AllowedCharactersFunction &GetAllowedCharactersFunction() const {$/;"	f	class:final
GetAlternateAltitudeUnit	src/Formatter/UserUnits.cpp	/^GetAlternateAltitudeUnit(Unit unit)$/;"	f	file:
GetAlternates	src/Engine/Task/TaskManager.cpp	/^TaskManager::GetAlternates() const$/;"	f	class:TaskManager
GetAltitude	src/Engine/Airspace/AirspaceAltitude.cpp	/^AirspaceAltitude::GetAltitude(const AltitudeState &state) const$/;"	f	class:AirspaceAltitude
GetAltitude	src/Engine/Trace/Point.hpp	/^  double GetAltitude() const {$/;"	f	class:TracePoint
GetAltitudeColor	src/Look/TrailLook.cpp	/^GetAltitudeColor(short ramp_h) {$/;"	f	file:
GetAltitudeColorIndex	src/Renderer/TrailRenderer.cpp	/^GetAltitudeColorIndex(double alt, double min_alt, double max_alt)$/;"	f	file:
GetAltitudeName	src/Units/Units.cpp	/^Units::GetAltitudeName()$/;"	f	class:Units
GetAltitudeUnit	src/Device/Driver/CAI302/Protocol.hpp	/^    unsigned GetAltitudeUnit() const {$/;"	f	struct:CAI302::Pilot
GetAltitudeUnit	src/Profile/UnitsConfig.cpp	/^GetAltitudeUnit(const ProfileMap &map, const char *key, const char *legacy_key,$/;"	f	file:
GetAngle	src/Geo/Flat/FlatLine.cpp	/^FlatLine::GetAngle() const$/;"	f	class:FlatLine
GetAngleValue	src/Form/DigitEntry.cpp	/^DigitEntry::GetAngleValue() const$/;"	f	class:DigitEntry
GetAnyAltitude	src/NMEA/Info.hpp	/^  std::pair<bool, double> GetAnyAltitude() const {$/;"	f	struct:NMEAInfo
GetAppendSerial	src/Engine/Trace/Trace.hpp	/^  const Serial &GetAppendSerial() const {$/;"	f	class:Trace
GetApproximateScale	src/Geo/Flat/FlatProjection.hpp	/^  double GetApproximateScale() const {$/;"	f	class:FlatProjection
GetArea	src/Repository/AvailableFile.hpp	/^  const char *GetArea() const {$/;"	f	struct:AvailableFile
GetArrivalAltitude	src/Engine/GlideSolvers/GlideResult.hpp	/^  double GetArrivalAltitude() const {$/;"	f	struct:GlideResult
GetArrivalAltitude	src/Engine/GlideSolvers/GlideResult.hpp	/^  double GetArrivalAltitude(double start_altitude) const {$/;"	f	struct:GlideResult
GetArrivalAltitudeWithDrift	src/Engine/GlideSolvers/GlideResult.hpp	/^  double GetArrivalAltitudeWithDrift(double start_altitude) const {$/;"	f	struct:GlideResult
GetAsBoolean	src/Form/DataField/Boolean.hpp	/^  bool GetAsBoolean() const {$/;"	f	class:final
GetAsDisplayString	src/Form/DataField/Angle.cpp	/^AngleDataField::GetAsDisplayString() const$/;"	f	class:AngleDataField
GetAsDisplayString	src/Form/DataField/Base.cpp	/^DataField::GetAsDisplayString() const$/;"	f	class:DataField
GetAsDisplayString	src/Form/DataField/Enum.cpp	/^DataFieldEnum::GetAsDisplayString() const$/;"	f	class:DataFieldEnum
GetAsDisplayString	src/Form/DataField/File.cpp	/^FileDataField::GetAsDisplayString() const$/;"	f	class:FileDataField
GetAsDisplayString	src/Form/DataField/Float.cpp	/^DataFieldFloat::GetAsDisplayString() const$/;"	f	class:DataFieldFloat
GetAsDisplayString	src/Form/DataField/Integer.cpp	/^DataFieldInteger::GetAsDisplayString() const$/;"	f	class:DataFieldInteger
GetAsDisplayString	src/Form/DataField/Password.cpp	/^PasswordDataField::GetAsDisplayString() const$/;"	f	class:PasswordDataField
GetAsDisplayString	src/Form/DataField/Prefix.cpp	/^PrefixDataField::GetAsDisplayString() const$/;"	f	class:PrefixDataField
GetAsDisplayString	src/Form/DataField/RoughTime.cpp	/^RoughTimeDataField::GetAsDisplayString() const$/;"	f	class:RoughTimeDataField
GetAsDisplayString	src/Form/DataField/Time.cpp	/^DataFieldTime::GetAsDisplayString() const$/;"	f	class:DataFieldTime
GetAsFixed	src/Form/DataField/Float.hpp	/^  double GetAsFixed() const {$/;"	f	class:final
GetAsInteger	src/Form/DataField/Angle.cpp	/^AngleDataField::GetAsInteger() const$/;"	f	class:AngleDataField
GetAsInteger	src/Form/DataField/Base.cpp	/^DataField::GetAsInteger() const$/;"	f	class:DataField
GetAsInteger	src/Form/DataField/Boolean.cpp	/^DataFieldBoolean::GetAsInteger() const$/;"	f	class:DataFieldBoolean
GetAsInteger	src/Form/DataField/Enum.cpp	/^DataFieldEnum::GetAsInteger() const$/;"	f	class:DataFieldEnum
GetAsInteger	src/Form/DataField/File.cpp	/^FileDataField::GetAsInteger() const$/;"	f	class:FileDataField
GetAsInteger	src/Form/DataField/Float.cpp	/^DataFieldFloat::GetAsInteger() const$/;"	f	class:DataFieldFloat
GetAsInteger	src/Form/DataField/Integer.cpp	/^DataFieldInteger::GetAsInteger() const$/;"	f	class:DataFieldInteger
GetAsInteger	src/Form/DataField/RoughTime.cpp	/^RoughTimeDataField::GetAsInteger() const$/;"	f	class:RoughTimeDataField
GetAsString	src/Form/DataField/Angle.cpp	/^AngleDataField::GetAsString() const$/;"	f	class:AngleDataField
GetAsString	src/Form/DataField/Base.cpp	/^DataField::GetAsString() const$/;"	f	class:DataField
GetAsString	src/Form/DataField/Boolean.cpp	/^DataFieldBoolean::GetAsString() const$/;"	f	class:DataFieldBoolean
GetAsString	src/Form/DataField/Enum.cpp	/^DataFieldEnum::GetAsString() const$/;"	f	class:DataFieldEnum
GetAsString	src/Form/DataField/File.cpp	/^FileDataField::GetAsString() const$/;"	f	class:FileDataField
GetAsString	src/Form/DataField/Float.cpp	/^DataFieldFloat::GetAsString() const$/;"	f	class:DataFieldFloat
GetAsString	src/Form/DataField/GeoPoint.cpp	/^GeoPointDataField::GetAsString() const$/;"	f	class:GeoPointDataField
GetAsString	src/Form/DataField/Integer.cpp	/^DataFieldInteger::GetAsString() const$/;"	f	class:DataFieldInteger
GetAsString	src/Form/DataField/RoughTime.cpp	/^RoughTimeDataField::GetAsString() const$/;"	f	class:RoughTimeDataField
GetAsString	src/Form/DataField/String.cpp	/^DataFieldString::GetAsString() const$/;"	f	class:DataFieldString
GetAsString	src/Form/DataField/Time.cpp	/^DataFieldTime::GetAsString() const$/;"	f	class:DataFieldTime
GetAttribute	src/XML/Node.cpp	/^XMLNode::GetAttribute(const TCHAR *name) const$/;"	f	class:XMLNode
GetAutoZoom	src/Gauge/BigTrafficWidget.cpp	/^  bool GetAutoZoom() const {$/;"	f	class:FlarmTrafficControl
GetAverage	src/Computer/ClimbAverageCalculator.cpp	/^ClimbAverageCalculator::GetAverage(double time, double altitude,$/;"	f	class:ClimbAverageCalculator
GetAverage	src/Gauge/ThermalAssistantRenderer.cpp	/^ThermalAssistantRenderer::LiftPoints::GetAverage() const$/;"	f	class:ThermalAssistantRenderer::LiftPoints
GetAverage	src/MapWindow/GlueMapWindowDisplayMode.cpp	/^OffsetHistory::GetAverage() const$/;"	f	class:OffsetHistory
GetAverageDeltaDistance	src/Engine/Trace/Trace.hpp	/^  unsigned GetAverageDeltaDistance() const {$/;"	f	class:Trace
GetAverageDeltaTime	src/Engine/Trace/Trace.hpp	/^  unsigned GetAverageDeltaTime() const {$/;"	f	class:Trace
GetAverageSpeed	src/Engine/GlideSolvers/GlidePolar.cpp	/^double GlidePolar::GetAverageSpeed() const$/;"	f	class:GlidePolar
GetBack	src/Engine/Trace/Trace.hpp	/^  TraceDelta &GetBack() {$/;"	f	class:Trace
GetBackgroundColor	src/Look/DialogLook.hpp	/^    Color GetBackgroundColor(bool is_selected, bool is_focused,$/;"	f	struct:DialogLook::__anon13
GetBackgroundColor	src/ui/canvas/gdi/Canvas.hpp	/^  Color GetBackgroundColor() const {$/;"	f	class:Canvas
GetBackgroundColor	src/ui/canvas/memory/Canvas.hpp	/^  Color GetBackgroundColor() const {$/;"	f	class:Canvas
GetBackgroundColor	src/ui/canvas/opengl/Canvas.hpp	/^  Color GetBackgroundColor() const {$/;"	f	class:Canvas
GetBackupPairs	src/Engine/Route/AirspaceRoute.cpp	/^AirspaceRoute::GetBackupPairs(const SearchPointVector &spv,$/;"	f	class:AirspaceRoute
GetBallast	src/Engine/GlideSolvers/GlidePolar.hpp	/^  double GetBallast() const {$/;"	f	class:GlidePolar
GetBallastLitres	src/Engine/GlideSolvers/GlidePolar.cpp	/^GlidePolar::GetBallastLitres() const$/;"	f	class:GlidePolar
GetBallastRatio	src/Engine/GlideSolvers/GlidePolar.hpp	/^  double GetBallastRatio() const {$/;"	f	class:GlidePolar
GetBase	src/Engine/Airspace/AbstractAirspace.hpp	/^  const AirspaceAltitude &GetBase() const { return altitude_base; }$/;"	f	class:AbstractAirspace
GetBase	src/system/Path.cpp	/^Path::GetBase() const$/;"	f	class:Path
GetBase	src/system/Path.hpp	/^  Path GetBase() const {$/;"	f	class:AllocatedPath
GetBaseAltitude	src/Engine/Airspace/AbstractAirspace.hpp	/^  double GetBaseAltitude(const AltitudeState &state) const {$/;"	f	class:AbstractAirspace
GetBaseElevation	src/Engine/Task/Points/TaskWaypoint.hpp	/^  double GetBaseElevation() const {$/;"	f	class:TaskWaypoint
GetBaudRate	src/Device/Driver/FLARM/Device.cpp	/^FlarmDevice::GetBaudRate(unsigned &baud_id, OperationEnvironment &env)$/;"	f	class:FlarmDevice
GetBaudRateIndex	src/Device/Driver/Volkslogger/Protocol.cpp	/^GetBaudRateIndex(unsigned baud_rate)$/;"	f	file:
GetBaudrate	src/Device/Port/AndroidPort.cpp	/^AndroidPort::GetBaudrate() const$/;"	f	class:AndroidPort
GetBaudrate	src/Device/Port/DumpPort.cpp	/^DumpPort::GetBaudrate() const$/;"	f	class:DumpPort
GetBaudrate	src/Device/Port/K6BtPort.cpp	/^K6BtPort::GetBaudrate() const$/;"	f	class:K6BtPort
GetBaudrate	src/Device/Port/NullPort.cpp	/^NullPort::GetBaudrate() const$/;"	f	class:NullPort
GetBaudrate	src/Device/Port/SerialPort.cpp	/^SerialPort::GetBaudrate() const$/;"	f	class:SerialPort
GetBaudrate	src/Device/Port/TTYPort.cpp	/^TTYPort::GetBaudrate() const$/;"	f	class:TTYPort
GetBearing	src/Engine/Util/AircraftStateFilter.cpp	/^AircraftStateFilter::GetBearing() const$/;"	f	class:AircraftStateFilter
GetBearing	src/TeamCode/TeamCode.cpp	/^TeamCode::GetBearing() const$/;"	f	class:TeamCode
GetBest	src/net/AddressInfo.cxx	/^AddressInfoList::GetBest() const$/;"	f	class:AddressInfoList
GetBestAlternateID	src/Input/TaskEventObserver.cpp	/^GetBestAlternateID(const TaskManager &tm)$/;"	f	file:
GetBestDistancePrecision	src/Formatter/Units.cpp	/^GetBestDistancePrecision(double value, Unit unit, double threshold = 100)$/;"	f	file:
GetBestDistanceUnit	src/Formatter/Units.cpp	/^GetBestDistanceUnit(double value, Unit unit, double threshold = 2500)$/;"	f	file:
GetBestGlideRatioSpeed	src/Engine/GlideSolvers/GlidePolar.cpp	/^GlidePolar::GetBestGlideRatioSpeed(double head_wind) const$/;"	f	class:GlidePolar
GetBestIndex	src/Engine/Contest/ContestStatistics.hpp	/^  int GetBestIndex(const int solution_index) const {$/;"	f	struct:ContestStatistics
GetBestLD	src/Engine/GlideSolvers/GlidePolar.hpp	/^  double GetBestLD() const$/;"	f	class:GlidePolar
GetBigIcon	src/Topography/TopographyFile.hpp	/^  ResourceId GetBigIcon() const {$/;"	f	class:TopographyFile
GetBindAPI	src/ui/canvas/egl/TopCanvas.cpp	/^GetBindAPI()$/;"	f	file:
GetBlock	src/Device/Driver/Volkslogger/dbbconv.h	/^  const void *GetBlock(size_t offset=0) const {$/;"	f	class:DBB
GetBlock	src/Device/Driver/Volkslogger/dbbconv.h	/^  void *GetBlock(size_t offset=0) {$/;"	f	class:DBB
GetBorder	src/InfoBoxes/InfoBoxLayout.cpp	/^InfoBoxLayout::GetBorder(InfoBoxSettings::Geometry geometry, bool landscape,$/;"	f	class:InfoBoxLayout
GetBottom	src/Geo/Flat/FlatBoundingBox.hpp	/^  constexpr int GetBottom() const {$/;"	f	struct:FlatBoundingBox
GetBottomRight	src/Geo/Flat/FlatBoundingBox.hpp	/^  constexpr FlatGeoPoint GetBottomRight() const {$/;"	f	struct:FlatBoundingBox
GetBottomWidgetRect	src/MainWindow.cpp	/^GetBottomWidgetRect(const PixelRect &rc, const Widget *bottom_widget)$/;"	f	file:
GetBoundary	src/Engine/Task/ObservationZones/AnnularSectorZone.cpp	/^AnnularSectorZone::GetBoundary() const$/;"	f	class:AnnularSectorZone
GetBoundary	src/Engine/Task/ObservationZones/CylinderZone.cpp	/^CylinderZone::GetBoundary() const$/;"	f	class:CylinderZone
GetBoundary	src/Engine/Task/ObservationZones/KeyholeZone.cpp	/^KeyholeZone::GetBoundary() const$/;"	f	class:KeyholeZone
GetBoundary	src/Engine/Task/ObservationZones/ObservationZoneClient.cpp	/^ObservationZoneClient::GetBoundary() const$/;"	f	class:ObservationZoneClient
GetBoundary	src/Engine/Task/ObservationZones/SectorZone.cpp	/^SectorZone::GetBoundary() const$/;"	f	class:SectorZone
GetBoundaryPoints	src/Engine/Task/Points/SampledTaskPoint.hpp	/^  const SearchPointVector &GetBoundaryPoints() const {$/;"	f	class:SampledTaskPoint
GetBoundingBox	src/Engine/Airspace/AbstractAirspace.cpp	/^AbstractAirspace::GetBoundingBox(const FlatProjection &projection)$/;"	f	class:AbstractAirspace
GetBounds	src/Terrain/RasterMap.hpp	/^  const GeoBounds &GetBounds() const {$/;"	f	class:RasterMap
GetBounds	src/Terrain/RasterRenderer.hpp	/^  const GeoBounds &GetBounds() const {$/;"	f	class:RasterRenderer
GetBounds	src/Terrain/RasterTileCache.hpp	/^  const GeoBounds &GetBounds() const {$/;"	f	class:RasterTileCache
GetBuffer	src/ui/canvas/RawBitmap.hpp	/^  RawColor *GetBuffer() {$/;"	f	class:final
GetBuffer	src/ui/canvas/RawBitmap.hpp	/^  const RawColor *GetBuffer() const {$/;"	f	class:final
GetBugs	src/Engine/GlideSolvers/GlidePolar.hpp	/^  double GetBugs() const {$/;"	f	class:GlidePolar
GetButton	src/Dialogs/Settings/dlgConfiguration.cpp	/^  Button &GetButton(unsigned number) {$/;"	f	class:final
GetButtonCaption	src/Widget/TabWidget.cpp	/^TabWidget::GetButtonCaption(unsigned i) const$/;"	f	class:TabWidget
GetButtonIndexAt	src/Form/TabDisplay.cpp	/^TabDisplay::GetButtonIndexAt(PixelPoint p) const$/;"	f	class:TabDisplay
GetButtonLook	src/Dialogs/WidgetDialog.hpp	/^  const ButtonLook &GetButtonLook() const {$/;"	f	class:WidgetDialog
GetButtonPosition	src/Form/TabMenuDisplay.cpp	/^TabMenuDisplay::GetButtonPosition(MenuTabIndex i) const$/;"	f	class:TabMenuDisplay
GetButtonPosition	src/Menu/MenuBar.cpp	/^GetButtonPosition(unsigned i, PixelRect rc)$/;"	f	file:
GetButtonRect	src/Dialogs/StartupDialog.cpp	/^  PixelRect GetButtonRect(PixelRect rc) {$/;"	f	class:final	file:
GetByGroup	src/Units/Settings.cpp	/^UnitSetting::GetByGroup(UnitGroup group) const$/;"	f	class:UnitSetting
GetCaption	src/Form/Form.hpp	/^  const TCHAR *GetCaption() const {$/;"	f	class:WndForm
GetCaption	src/Form/TabDisplay.hpp	/^  const TCHAR *GetCaption(unsigned i) const {$/;"	f	class:final
GetCaption	src/Form/TabMenuDisplay.cpp	/^TabMenuDisplay::GetCaption(TCHAR buffer[], size_t size) const$/;"	f	class:TabMenuDisplay
GetCaption	src/InfoBoxes/Content/Factory.cpp	/^InfoBoxFactory::GetCaption(Type type)$/;"	f	class:InfoBoxFactory
GetCaption	src/Renderer/SymbolButtonRenderer.hpp	/^  StaticString<64>::const_pointer GetCaption() const {$/;"	f	class:SymbolButtonRenderer
GetCaption	src/Renderer/TextButtonRenderer.hpp	/^  StaticString<64>::const_pointer GetCaption() const {$/;"	f	class:TextButtonRenderer
GetCatchCallback	src/lua/Catch.cpp	/^GetCatchCallback(lua_State *L)$/;"	f	file:
GetCenter	src/Engine/Airspace/AirspacePolygon.cpp	/^AirspacePolygon::GetCenter() const$/;"	f	class:AirspacePolygon
GetCenter	src/Geo/Flat/FlatBoundingBox.cpp	/^FlatBoundingBox::GetCenter() const$/;"	f	class:FlatBoundingBox
GetCenter	src/Geo/Flat/FlatProjection.hpp	/^  const GeoPoint &GetCenter() const {$/;"	f	class:FlatProjection
GetCenter	src/Geo/GeoBounds.cpp	/^GeoBounds::GetCenter() const$/;"	f	class:GeoBounds
GetCenter	src/Topography/TopographyFile.hpp	/^  const GeoPoint &GetCenter() const {$/;"	f	class:TopographyFile
GetCentralMeridian	src/Geo/UTM.cpp	/^GetCentralMeridian(unsigned zone_number)$/;"	f	file:
GetChanged	src/Dialogs/WidgetDialog.hpp	/^  bool GetChanged() const {$/;"	f	class:WidgetDialog
GetChar	src/Device/Port/Port.cpp	/^Port::GetChar()$/;"	f	class:Port
GetCharacter	src/Form/CharacterButton.hpp	/^  unsigned GetCharacter() const {$/;"	f	class:CharacterButton
GetCharacter	src/ui/event/sdl/Event.hpp	/^  unsigned GetCharacter(size_t characterIdx) const {$/;"	f	struct:UI::Event
GetCharacter	src/ui/event/shared/Event.hpp	/^  unsigned GetCharacter(size_t characterIdx) const {$/;"	f	struct:UI::Event
GetCharacter	src/ui/event/windows/Event.hpp	/^  unsigned GetCharacter(size_t characterIdx) const {$/;"	f	struct:UI::Event
GetCharacterCount	src/ui/event/sdl/Event.hpp	/^  size_t GetCharacterCount() const {$/;"	f	struct:UI::Event
GetCharacterCount	src/ui/event/shared/Event.hpp	/^  size_t GetCharacterCount() const {$/;"	f	struct:UI::Event
GetCharacterCount	src/ui/event/windows/Event.hpp	/^  size_t GetCharacterCount() const {$/;"	f	struct:UI::Event
GetChildNode	src/XML/Node.cpp	/^XMLNode::GetChildNode(const TCHAR *name) const$/;"	f	class:XMLNode
GetCircling	src/NMEA/VegaSwitchState.hpp	/^  constexpr bool GetCircling() const {$/;"	f	struct:VegaSwitchState
GetClass	src/Formatter/AirspaceFormatter.cpp	/^AirspaceFormatter::GetClass(AirspaceClass airspace_class)$/;"	f	class:AirspaceFormatter
GetClass	src/Formatter/AirspaceFormatter.cpp	/^AirspaceFormatter::GetClass(const AbstractAirspace &airspace)$/;"	f	class:AirspaceFormatter
GetClassShort	src/Formatter/AirspaceFormatter.cpp	/^AirspaceFormatter::GetClassShort(AirspaceClass airspace_class)$/;"	f	class:AirspaceFormatter
GetClassShort	src/Formatter/AirspaceFormatter.cpp	/^AirspaceFormatter::GetClassShort(const AbstractAirspace &airspace)$/;"	f	class:AirspaceFormatter
GetClearance	src/Engine/Airspace/AbstractAirspace.cpp	/^AbstractAirspace::GetClearance(const FlatProjection &projection) const$/;"	f	class:AbstractAirspace
GetClientAreaWindow	src/Form/Form.hpp	/^  ContainerWindow &GetClientAreaWindow() {$/;"	f	class:WndForm
GetClimbRate	src/Engine/Airspace/AirspaceAircraftPerformance.hpp	/^  double GetClimbRate() const {$/;"	f	class:AirspaceAircraftPerformance
GetClimbRate	src/Engine/Util/AircraftStateFilter.hpp	/^  inline double GetClimbRate() const {$/;"	f	class:AircraftStateFilter
GetCoPilot	src/Device/Driver/FLARM/Device.cpp	/^FlarmDevice::GetCoPilot(TCHAR *buffer, size_t length,$/;"	f	class:FlarmDevice
GetCode	src/TeamCode/TeamCode.hpp	/^  const TCHAR *GetCode() const {$/;"	f	class:TeamCode
GetCodeString	src/FLARM/Error.hpp	/^  const TCHAR *GetCodeString() const {$/;"	f
GetCodeT	src/Weather/NOAAStore.cpp	/^NOAAStore::Item::GetCodeT() const$/;"	f	class:NOAAStore::Item
GetCodeT	src/Weather/NOAAStore.hpp	/^    const char *GetCodeT() const {$/;"	f	struct:NOAAStore::Item
GetCoefficients	src/Engine/GlideSolvers/GlidePolar.hpp	/^  PolarCoefficients GetCoefficients() const {$/;"	f	class:GlidePolar
GetColor	src/FLARM/TrafficDatabases.hpp	/^  FlarmColor GetColor(FlarmId id) const$/;"	f	struct:TrafficDatabases
GetColor	src/Look/InfoBoxLook.hpp	/^  Color GetColor(int i, Color default_color) const {$/;"	f	struct:InfoBoxLook
GetColor	src/Look/TrailLook.cpp	/^GetColor(TrailSettings::Type type, short ramp_h)$/;"	f	file:
GetColor	src/Profile/Screen.cpp	/^ProfileMap::GetColor(const char *key, RGB8Color &color) const$/;"	f	class:ProfileMap
GetColor	src/Topography/TopographyFile.hpp	/^  Color GetColor() const {$/;"	f	class:TopographyFile
GetColor	src/ui/canvas/Brush.hpp	/^  const Color GetColor() const { return color; }$/;"	f	class:Brush
GetColor	src/ui/canvas/Pen.hpp	/^  GetColor() const$/;"	f	class:Pen
GetColumnWidth	src/Form/GridView.hpp	/^  unsigned GetColumnWidth() const {$/;"	f	class:GridView
GetCommentColor	src/Look/InfoBoxLook.hpp	/^  Color GetCommentColor(int i) const {$/;"	f	struct:InfoBoxLook
GetCommonStats	src/Engine/Task/TaskManager.hpp	/^  const CommonStats& GetCommonStats() const {$/;"	f	class:TaskManager
GetCompatibleDC	src/ui/canvas/gdi/Canvas.hpp	/^  HDC GetCompatibleDC() {$/;"	f	class:Canvas
GetCompetitionClass	src/Device/Driver/FLARM/Device.cpp	/^FlarmDevice::GetCompetitionClass(TCHAR *buffer, size_t length,$/;"	f	class:FlarmDevice
GetCompetitionId	src/Device/Driver/FLARM/Device.cpp	/^FlarmDevice::GetCompetitionId(TCHAR *buffer, size_t length,$/;"	f	class:FlarmDevice
GetCompositor	src/ui/event/poll/Queue.hpp	/^  struct wl_compositor *GetCompositor() {$/;"	f	class:DisplayOrientation::final
GetCompositor	src/ui/event/poll/WaylandQueue.hpp	/^  struct wl_compositor *GetCompositor() {$/;"	f	class:UI::final
GetComputerSettings	src/Blackboard/ComputerSettingsBlackboard.hpp	/^  const ComputerSettings& GetComputerSettings() const {$/;"	f	class:ComputerSettingsBlackboard
GetComputerSettings	src/Interface.hpp	/^  static inline const ComputerSettings& GetComputerSettings() {$/;"	f	namespace:CommonInterface
GetComputerSettings	src/MapWindow/MapWindowBlackboard.hpp	/^  const ComputerSettings &GetComputerSettings() const {$/;"	f	class:MapWindowBlackboard
GetComputerSettings	src/MapWindow/TargetMapWindow.cpp	/^GetComputerSettings()$/;"	f	file:
GetComputerSettings	src/Menu/ExpandMacros.cpp	/^GetComputerSettings()$/;"	f	file:
GetConfig	src/Device/Descriptor.hpp	/^  const DeviceConfig &GetConfig() const {$/;"	f	class:final
GetConfig	src/Device/Driver/FLARM/Device.cpp	/^FlarmDevice::GetConfig(const char *setting, TCHAR *buffer, size_t length,$/;"	f	class:FlarmDevice
GetConfig	src/Device/Driver/FLARM/Device.cpp	/^FlarmDevice::GetConfig(const char *setting, char *buffer, size_t length,$/;"	f	class:FlarmDevice
GetConfig	src/Engine/Airspace/AirspaceWarningManager.hpp	/^  const AirspaceWarningConfig &GetConfig() const {$/;"	f	class:AirspaceWarningManager
GetConfiguredLayout	src/PageActions.cpp	/^PageActions::GetConfiguredLayout()$/;"	f	class:PageActions
GetConstraints	src/Engine/Task/Factory/AbstractTaskFactory.hpp	/^  const TaskFactoryConstraints &GetConstraints() const {$/;"	f	class:AbstractTaskFactory
GetContents	src/Dialogs/Settings/dlgConfigInfoboxes.cpp	/^  InfoBoxFactory::Type GetContents(unsigned i) const {$/;"	f	class:final
GetContest	src/Computer/TraceComputer.hpp	/^  const Trace &GetContest() const {$/;"	f	class:TraceComputer
GetCorrectedWidth	src/ui/canvas/RawBitmap.hpp	/^  unsigned GetCorrectedWidth() const {$/;"	f	class:final
GetCovAbsAbs	src/Math/KalmanFilter1d.hpp	/^  double GetCovAbsAbs() const { return p_abs_abs_; }$/;"	f	class:KalmanFilter1d
GetCovAbsAbs	src/Math/SelfTimingKalmanFilter1d.hpp	/^  double GetCovAbsAbs() const { return filter_.GetCovAbsAbs(); }$/;"	f	class:SelfTimingKalmanFilter1d
GetCovAbsVel	src/Math/KalmanFilter1d.hpp	/^  double GetCovAbsVel() const { return p_abs_vel_; }$/;"	f	class:KalmanFilter1d
GetCovAbsVel	src/Math/SelfTimingKalmanFilter1d.hpp	/^  double GetCovAbsVel() const { return filter_.GetCovAbsVel(); }$/;"	f	class:SelfTimingKalmanFilter1d
GetCovVelVel	src/Math/KalmanFilter1d.hpp	/^  double GetCovVelVel() const { return p_vel_vel_; }$/;"	f	class:KalmanFilter1d
GetCovVelVel	src/Math/SelfTimingKalmanFilter1d.hpp	/^  double GetCovVelVel() const { return filter_.GetCovVelVel(); }$/;"	f	class:SelfTimingKalmanFilter1d
GetCruiseDescent	src/Engine/Airspace/AirspaceAircraftPerformance.hpp	/^  double GetCruiseDescent() const {$/;"	f	class:AirspaceAircraftPerformance
GetCruiseEfficiency	src/Engine/GlideSolvers/GlidePolar.hpp	/^  double GetCruiseEfficiency() const {$/;"	f	class:GlidePolar
GetCruiseSpeed	src/Engine/Airspace/AirspaceAircraftPerformance.hpp	/^  double GetCruiseSpeed() const {$/;"	f	class:AirspaceAircraftPerformance
GetCuSonde	src/Computer/CuComputer.hpp	/^  const CuSonde &GetCuSonde() const {$/;"	f	class:CuComputer
GetCuSonde	src/Computer/GlideComputer.hpp	/^  const CuSonde &GetCuSonde() const {$/;"	f	class:GlideComputer
GetCurrentCPU	src/Screen/StopWatch.hpp	/^  static cpu_stamp_t GetCurrentCPU() {$/;"	f	class:ScreenStopWatch
GetCurrentClock	src/Screen/StopWatch.hpp	/^  static clock_stamp_t GetCurrentClock() {$/;"	f	class:ScreenStopWatch
GetCurrentInfoBox	src/Dialogs/Settings/dlgConfigInfoboxes.cpp	/^  unsigned GetCurrentInfoBox() const {$/;"	f	class:final
GetCurrentLayout	src/PageActions.cpp	/^PageActions::GetCurrentLayout()$/;"	f	class:PageActions
GetCurrentPage	src/Form/GridView.hpp	/^  unsigned GetCurrentPage() const {$/;"	f	class:GridView
GetCursor	src/Form/TabMenuDisplay.hpp	/^  unsigned GetCursor() const {$/;"	f	class:final
GetCursorId	src/Dialogs/Traffic/TrafficList.cpp	/^  FlarmId GetCursorId() const {$/;"	f	class:TrafficListWidget
GetCursorIndex	src/Dialogs/MapItemListDialog.cpp	/^  unsigned GetCursorIndex() const {$/;"	f	class:final
GetCursorIndex	src/Dialogs/Task/AlternatesListDialog.cpp	/^  unsigned GetCursorIndex() const {$/;"	f	class:final
GetCursorIndex	src/Dialogs/Task/OptionalStartsDialog.cpp	/^  unsigned GetCursorIndex() const {$/;"	f	class:OptionStartsWidget
GetCursorObject	src/Dialogs/Waypoint/WaypointList.cpp	/^  WaypointPtr GetCursorObject() const {$/;"	f	class:final
GetCustom	src/InfoBoxes/Data.hpp	/^  bool GetCustom() const {$/;"	f	struct:InfoBoxData
GetCylinderRadiusOrMinusOne	src/Engine/Task/Ordered/OrderedTask.cpp	/^GetCylinderRadiusOrMinusOne(const ObservationZone &oz)$/;"	f	file:
GetCylinderRadiusOrMinusOne	src/Engine/Task/Ordered/OrderedTask.cpp	/^GetCylinderRadiusOrMinusOne(const ObservationZoneClient &p)$/;"	f	file:
GetDPI	src/Hardware/DisplayDPI.cpp	/^GetDPI()$/;"	f	file:
GetData	src/Audio/PCMBufferDataSource.cpp	/^PCMBufferDataSource::GetData(int16_t *buffer, size_t n)$/;"	f	class:PCMBufferDataSource
GetData	src/Audio/PCMMixerDataSource.cpp	/^PCMMixerDataSource::GetData(int16_t *buffer, size_t n)$/;"	f	class:PCMMixerDataSource
GetData	src/Audio/PCMSynthesiser.hpp	/^  size_t GetData(int16_t *buffer, size_t n) {$/;"	f	class:PCMSynthesiser
GetData	src/Dialogs/Device/CAI302/UnitsEditor.hpp	/^  const CAI302::Pilot &GetData() const {$/;"	f	class:final
GetData	src/Dialogs/Settings/dlgConfigInfoboxes.cpp	/^  const InfoBoxSettings::Panel &GetData() const {$/;"	f	class:final
GetData	src/Terrain/HeightMatrix.hpp	/^  const TerrainHeight *GetData() const {$/;"	f	class:HeightMatrix
GetData	src/Terrain/RasterBuffer.hpp	/^  TerrainHeight *GetData() {$/;"	f	class:RasterBuffer
GetData	src/Terrain/RasterBuffer.hpp	/^  const TerrainHeight *GetData() const {$/;"	f	class:RasterBuffer
GetData	src/ui/canvas/custom/UncompressedImage.hpp	/^  const void *GetData() const {$/;"	f	class:UncompressedImage
GetData	src/util/Cache.hxx	/^		const Data &GetData() const {$/;"	f	class:Cache::Item
GetDataAt	src/Terrain/RasterBuffer.hpp	/^  const TerrainHeight *GetDataAt(unsigned x, unsigned y) const {$/;"	f	class:RasterBuffer
GetDataEnd	src/Terrain/HeightMatrix.hpp	/^  const TerrainHeight *GetDataEnd() const {$/;"	f	class:HeightMatrix
GetDataPending	src/Device/Port/SerialPort.cpp	/^SerialPort::GetDataPending() const$/;"	f	class:SerialPort
GetDataQueued	src/Device/Port/SerialPort.cpp	/^SerialPort::GetDataQueued() const$/;"	f	class:SerialPort
GetDateTimeAt	src/NMEA/Info.cpp	/^NMEAInfo::GetDateTimeAt(double other_time) const$/;"	f	class:NMEAInfo
GetDefault	src/Polar/PolarGlue.cpp	/^PolarGlue::GetDefault()$/;"	f	class:PolarGlue
GetDefaultFinishType	src/Engine/Task/Factory/AbstractTaskFactory.cpp	/^AbstractTaskFactory::GetDefaultFinishType() const$/;"	f	class:AbstractTaskFactory
GetDefaultIntermediateType	src/Engine/Task/Factory/AbstractTaskFactory.cpp	/^AbstractTaskFactory::GetDefaultIntermediateType() const$/;"	f	class:AbstractTaskFactory
GetDefaultPort	src/Tracking/SkyLines/Client.hpp	/^  static unsigned GetDefaultPort() {$/;"	f	class:SkyLinesTracking::final
GetDefaultPort	src/Tracking/SkyLines/Server.hpp	/^  static unsigned GetDefaultPort() {$/;"	f	class:SkyLinesTracking::Server
GetDefaultPortString	src/Tracking/SkyLines/Server.hpp	/^  static const char *GetDefaultPortString() {$/;"	f	class:SkyLinesTracking::Server
GetDefaultStartType	src/Engine/Task/Factory/AbstractTaskFactory.cpp	/^AbstractTaskFactory::GetDefaultStartType() const$/;"	f	class:AbstractTaskFactory
GetDefaults	src/Look/DefaultFonts.cpp	/^Fonts::GetDefaults()$/;"	f	class:Fonts
GetDescentRate	src/Engine/Airspace/AirspaceAircraftPerformance.hpp	/^  double GetDescentRate() const {$/;"	f	class:AirspaceAircraftPerformance
GetDescription	src/InfoBoxes/Content/Factory.cpp	/^InfoBoxFactory::GetDescription(Type type)$/;"	f	class:InfoBoxFactory
GetDevice	src/Device/Descriptor.hpp	/^  Device *GetDevice() {$/;"	f	class:final
GetDeviceConfig	src/Profile/DeviceConfig.cpp	/^Profile::GetDeviceConfig(const ProfileMap &map, unsigned n,$/;"	f	class:Profile
GetDeviceName	src/Device/Driver/IMI/Protocol/IGC.cpp	/^IMI::GetDeviceName(unsigned i)$/;"	f	class:IMI
GetDialogContent	src/InfoBoxes/Content/Alternate.cpp	/^InfoBoxContentAlternateGR::GetDialogContent()$/;"	f	class:InfoBoxContentAlternateGR
GetDialogContent	src/InfoBoxes/Content/Alternate.cpp	/^InfoBoxContentAlternateName::GetDialogContent()$/;"	f	class:InfoBoxContentAlternateName
GetDialogContent	src/InfoBoxes/Content/Altitude.cpp	/^InfoBoxContentAltitude::GetDialogContent() {$/;"	f	class:InfoBoxContentAltitude
GetDialogContent	src/InfoBoxes/Content/Base.cpp	/^InfoBoxContent::GetDialogContent()$/;"	f	class:InfoBoxContent
GetDialogContent	src/InfoBoxes/Content/Contest.cpp	/^InfoBoxContentOLC::GetDialogContent()$/;"	f	class:InfoBoxContentOLC
GetDialogContent	src/InfoBoxes/Content/Contest.cpp	/^InfoBoxContentOLCSpeed::GetDialogContent()$/;"	f	class:InfoBoxContentOLCSpeed
GetDialogContent	src/InfoBoxes/Content/MacCready.cpp	/^InfoBoxContentMacCready::GetDialogContent() {$/;"	f	class:InfoBoxContentMacCready
GetDialogContent	src/InfoBoxes/Content/Radio.cpp	/^InfoBoxContentActiveRadioFrequency::GetDialogContent() {$/;"	f	class:InfoBoxContentActiveRadioFrequency
GetDialogContent	src/InfoBoxes/Content/Radio.cpp	/^InfoBoxContentStandbyRadioFrequency::GetDialogContent() {$/;"	f	class:InfoBoxContentStandbyRadioFrequency
GetDialogContent	src/InfoBoxes/Content/Task.cpp	/^InfoBoxContentNextWaypoint::GetDialogContent()$/;"	f	class:InfoBoxContentNextWaypoint
GetDialogContent	src/InfoBoxes/Content/Team.cpp	/^InfoBoxContentTeamCode::GetDialogContent()$/;"	f	class:InfoBoxContentTeamCode
GetDialogContent	src/InfoBoxes/Content/Trace.cpp	/^InfoBoxContentBarogram::GetDialogContent()$/;"	f	class:InfoBoxContentBarogram
GetDialogContent	src/InfoBoxes/Content/Weather.cpp	/^InfoBoxContentWindArrow::GetDialogContent()$/;"	f	class:InfoBoxContentWindArrow
GetDialogContent	src/InfoBoxes/InfoBoxWindow.cpp	/^InfoBoxWindow::GetDialogContent() const$/;"	f	class:InfoBoxWindow
GetDialogLook	src/Dialogs/MapItemListSettingsPanel.cpp	/^  :RowFormWidget(UIGlobals::GetDialogLook()) {}$/;"	f
GetDialogLook	src/InfoBoxes/Panel/ATCReference.cpp	/^    :RowFormWidget(UIGlobals::GetDialogLook()) {}$/;"	f	class:ATCReferencePanel
GetDialogLook	src/Kobo/KoboMenu.cpp	/^UIGlobals::GetDialogLook()$/;"	f	class:UIGlobals
GetDialogLook	src/UIGlobals.cpp	/^UIGlobals::GetDialogLook()$/;"	f	class:UIGlobals
GetDialogSettings	src/Kobo/KoboMenu.cpp	/^UIGlobals::GetDialogSettings()$/;"	f	class:UIGlobals
GetDialogSettings	src/UIGlobals.cpp	/^UIGlobals::GetDialogSettings()$/;"	f	class:UIGlobals
GetDialogStyle	src/Dialogs/WidgetDialog.cpp	/^GetDialogStyle()$/;"	f	file:
GetDigest	src/Logger/GRecord.cpp	/^GRecord::GetDigest(char *output) const$/;"	f	class:GRecord
GetDigest	src/util/MD5.cpp	/^MD5::GetDigest(char *buffer) const$/;"	f	class:MD5
GetDirection	src/Engine/Waypoint/Runway.hpp	/^  Angle GetDirection() const {$/;"	f	class:Runway
GetDirectionData	src/Dialogs/Waypoint/WaypointList.cpp	/^GetDirectionData(TCHAR *buffer, size_t size, int direction_filter_index,$/;"	f	file:
GetDirectionDegrees	src/Engine/Waypoint/Runway.hpp	/^  unsigned GetDirectionDegrees() const {$/;"	f	class:Runway
GetDirectionName	src/Engine/Waypoint/Runway.hpp	/^  unsigned GetDirectionName() const {$/;"	f	class:Runway
GetDisplay	src/ui/event/poll/Queue.hpp	/^  _XDisplay *GetDisplay() const {$/;"	f	class:DisplayOrientation::final
GetDisplay	src/ui/event/poll/Queue.hpp	/^  struct wl_display *GetDisplay() {$/;"	f	class:DisplayOrientation::final
GetDisplay	src/ui/event/poll/WaylandQueue.hpp	/^  struct wl_display *GetDisplay() {$/;"	f	class:UI::final
GetDisplay	src/ui/event/poll/X11Queue.hpp	/^  _XDisplay *GetDisplay() const {$/;"	f	class:UI::X11EventQueue
GetDisplayMode	src/MapWindow/GlueMapWindow.hpp	/^  DisplayMode GetDisplayMode() const {$/;"	f	class:GlueMapWindow
GetDisplayName	src/Device/Descriptor.cpp	/^DeviceDescriptor::GetDisplayName() const$/;"	f	class:DeviceDescriptor
GetDisplaySettings	src/Interface.hpp	/^  static inline const DisplaySettings& GetDisplaySettings() {$/;"	f	namespace:CommonInterface
GetDisplayString	src/Form/DataField/Enum.hpp	/^    const TCHAR *GetDisplayString() const {$/;"	f	class:final::Entry
GetDistance	src/Engine/Task/Stats/DistanceStat.hpp	/^  double GetDistance() const {$/;"	f	class:DistanceStat
GetDistance	src/Geo/Flat/FlatLine.hpp	/^  double GetDistance() const {$/;"	f	class:FlatLine
GetDistance	src/Terrain/RasterTile.hpp	/^  int GetDistance() const {$/;"	f	class:RasterTile
GetDistanceName	src/Units/Units.cpp	/^Units::GetDistanceName()$/;"	f	class:Units
GetDistanceUnit	src/Device/Driver/CAI302/Protocol.hpp	/^    unsigned GetDistanceUnit() const {$/;"	f	struct:CAI302::Pilot
GetDistanceUnit	src/Profile/UnitsConfig.cpp	/^GetDistanceUnit(const ProfileMap &map, const char *key, const char *legacy_key,$/;"	f	file:
GetDoubleValue	src/Form/DigitEntry.cpp	/^DigitEntry::GetDoubleValue() const$/;"	f	class:DigitEntry
GetDrawingRect	src/Renderer/ButtonRenderer.cpp	/^ButtonFrameRenderer::GetDrawingRect(PixelRect rc, bool pressed) const$/;"	f	class:ButtonFrameRenderer
GetDriverByIndex	src/Device/Register.cpp	/^GetDriverByIndex(unsigned i)$/;"	f
GetDryMass	src/Engine/GlideSolvers/GlidePolar.hpp	/^  double GetDryMass() const {$/;"	f	class:GlidePolar
GetEPE	src/Logger/LoggerEPE.cpp	/^IGCWriter::GetEPE(const GPSState &gps)$/;"	f	class:IGCWriter
GetEast	src/Geo/GeoBounds.hpp	/^  constexpr Angle GetEast() const {$/;"	f	class:GeoBounds
GetEclipticLongitude	src/Math/SunEphemeris.cpp	/^SunEphemeris::GetEclipticLongitude(double d, Angle L)$/;"	f	class:SunEphemeris
GetEffectiveExtraPosition	src/Widget/TabWidget.hpp	/^  const PixelRect &GetEffectiveExtraPosition() const {$/;"	f	class:TabWidget
GetElevation	src/Computer/ThermalBase.cpp	/^GetElevation(RasterTerrain::Lease &map, const GeoPoint loc)$/;"	f	file:
GetElevation	src/Engine/Task/Ordered/Points/FinishPoint.cpp	/^FinishPoint::GetElevation() const$/;"	f	class:FinishPoint
GetElevation	src/Engine/Task/Ordered/Points/IntermediatePoint.cpp	/^IntermediateTaskPoint::GetElevation() const$/;"	f	class:IntermediateTaskPoint
GetElevation	src/Engine/Task/Ordered/Points/StartPoint.cpp	/^StartPoint::GetElevation() const$/;"	f	class:StartPoint
GetElevation	src/Engine/Task/Unordered/UnorderedTaskPoint.cpp	/^UnorderedTaskPoint::GetElevation() const$/;"	f	class:UnorderedTaskPoint
GetEmptySlot	src/PopupMessage.cpp	/^PopupMessage::GetEmptySlot()$/;"	f	class:PopupMessage
GetEnd	src/time/RoughTime.hpp	/^  constexpr const RoughTime &GetEnd() const {$/;"	f	class:RoughTimeSpan
GetEndPoint	src/Replay/AircraftSim.cpp	/^AircraftSim::GetEndPoint(const Angle heading, const double timestep) const$/;"	f	class:AircraftSim
GetEndRadial	src/Engine/Task/ObservationZones/SectorZone.hpp	/^  Angle GetEndRadial() const {$/;"	f	class:SectorZone
GetEngineNoiseLevel	src/Engine/Trace/Point.hpp	/^  unsigned GetEngineNoiseLevel() const {$/;"	f	class:TracePoint
GetEnteredState	src/Engine/Task/Points/ScoredTaskPoint.hpp	/^  const AircraftState &GetEnteredState() const {$/;"	f	class:ScoredTaskPoint
GetEnum	src/Profile/Map.hpp	/^  bool GetEnum(const char *key, T &value) const {$/;"	f	class:ProfileMap
GetEnum	src/Profile/ProfileMap.hpp	/^  static inline bool GetEnum(const char *key, T &value)$/;"	f	namespace:Profile
GetErrorMessage	src/Device/Descriptor.hpp	/^  tstring GetErrorMessage() const {$/;"	f	class:final
GetEstimatedTotalTime	src/Engine/Task/Stats/TaskStats.hpp	/^  double GetEstimatedTotalTime() const {$/;"	f	class:TaskStats
GetExtension	src/system/Path.cpp	/^Path::GetExtension() const$/;"	f	class:Path
GetExtension	src/system/Path.hpp	/^  const_pointer GetExtension() const {$/;"	f	class:AllocatedPath
GetExtra	src/Widget/TabWidget.hpp	/^  Widget &GetExtra() {$/;"	f	class:TabWidget
GetFDF	src/Device/Driver/Volkslogger/dbbconv.h	/^  const void *GetFDF(size_t offset=0) const {$/;"	f	class:DBB
GetFDF	src/Device/Driver/Volkslogger/dbbconv.h	/^  void *GetFDF(size_t offset=0) {$/;"	f	class:DBB
GetFactory	src/Engine/Task/TaskManager.cpp	/^TaskManager::GetFactory() const$/;"	f	class:TaskManager
GetFactoryConstraints	src/Engine/Task/Ordered/OrderedTask.cpp	/^OrderedTask::GetFactoryConstraints() const$/;"	f	class:OrderedTask
GetFactoryType	src/Engine/Task/Ordered/OrderedTask.hpp	/^  TaskFactoryType GetFactoryType() const {$/;"	f	class:final
GetFactoryTypes	src/Engine/Task/Ordered/OrderedTask.cpp	/^OrderedTask::GetFactoryTypes(gcc_unused bool all) const$/;"	f	class:OrderedTask
GetFamily	src/net/AddressInfo.hxx	/^	constexpr int GetFamily() const {$/;"	f	class:AddressInfo
GetField	src/ui/canvas/custom/LibTiff.cpp	/^  void GetField(uint32 tag, int &value_r) {$/;"	f	class:TiffLoader
GetFieldDirect	src/Terrain/Intersection.cpp	/^RasterTileCache::GetFieldDirect(const unsigned px, const unsigned py) const$/;"	f	class:RasterTileCache
GetFileType	src/Form/DataField/File.hpp	/^  FileType GetFileType() const {$/;"	f	class:final
GetFilename	src/Replay/Replay.hpp	/^  Path GetFilename() const {$/;"	f	class:final
GetFineHeight	src/Terrain/RasterBuffer.hpp	/^  unsigned GetFineHeight() const {$/;"	f	class:RasterBuffer
GetFineHeight	src/Terrain/RasterTileCache.hpp	/^  unsigned GetFineHeight() const {$/;"	f	class:RasterTileCache
GetFineTileHeight	src/Terrain/RasterTileCache.hpp	/^  unsigned GetFineTileHeight() const {$/;"	f	class:RasterTileCache
GetFineTileWidth	src/Terrain/RasterTileCache.hpp	/^  unsigned GetFineTileWidth() const {$/;"	f	class:RasterTileCache
GetFineWidth	src/Terrain/RasterBuffer.hpp	/^  unsigned GetFineWidth() const {$/;"	f	class:RasterBuffer
GetFineWidth	src/Terrain/RasterTileCache.hpp	/^  unsigned GetFineWidth() const {$/;"	f	class:RasterTileCache
GetFinishTypes	src/Engine/Task/Factory/AbstractTaskFactory.hpp	/^  const LegalPointSet &GetFinishTypes() const {$/;"	f	class:AbstractTaskFactory
GetFirstChild	src/XML/Node.hpp	/^  XMLNode *GetFirstChild() {$/;"	f	class:XMLNode
GetFirstChild	src/XML/Node.hpp	/^  const XMLNode *GetFirstChild() const {$/;"	f	class:XMLNode
GetFirstFont	src/Renderer/TwoTextRowsRenderer.hpp	/^  const Font &GetFirstFont() const {$/;"	f	class:TwoTextRowsRenderer
GetFirstPointer	src/util/RadixTree.hpp	/^    T *GetFirstPointer() {$/;"	f	struct:RadixTree::LeafList
GetFirstPointer	src/util/RadixTree.hpp	/^    const T *GetFirstPointer() const {$/;"	f	struct:RadixTree::LeafList
GetFirstWaypoint	src/Device/Declaration.hpp	/^  const Waypoint &GetFirstWaypoint() const {$/;"	f	struct:Declaration
GetFirstY	src/Renderer/TwoTextRowsRenderer.hpp	/^  int GetFirstY() const {$/;"	f	class:TwoTextRowsRenderer
GetFlapLanding	src/NMEA/VegaSwitchState.hpp	/^  constexpr bool GetFlapLanding() const {$/;"	f	struct:VegaSwitchState
GetFlapNegative	src/NMEA/VegaSwitchState.hpp	/^  constexpr bool GetFlapNegative() const {$/;"	f	struct:VegaSwitchState
GetFlapPositive	src/NMEA/VegaSwitchState.hpp	/^  constexpr bool GetFlapPositive() const {$/;"	f	struct:VegaSwitchState
GetFlapZero	src/NMEA/VegaSwitchState.hpp	/^  constexpr bool GetFlapZero() const {$/;"	f	struct:VegaSwitchState
GetFlatLocation	src/Geo/SearchPoint.hpp	/^  const FlatGeoPoint &GetFlatLocation() const {$/;"	f	class:SearchPoint
GetFlavourWidget	src/MainWindow.cpp	/^MainWindow::GetFlavourWidget(const TCHAR *flavour)$/;"	f	class:MainWindow
GetFlightNumber	src/Logger/ExternalLogger.cpp	/^GetFlightNumber(const RecordedFlightList &flight_list,$/;"	f	file:
GetFlightStats	src/Computer/GlideComputer.hpp	/^  const FlightStatistics &GetFlightStats() const {$/;"	f	class:GlideComputer
GetFlightStats	src/Computer/StatsComputer.hpp	/^  FlightStatistics &GetFlightStats() { return flightstats; }$/;"	f	class:StatsComputer
GetFlightStats	src/Computer/StatsComputer.hpp	/^  const FlightStatistics &GetFlightStats() const { return flightstats; }$/;"	f	class:StatsComputer
GetFloor	src/Engine/Route/RoutePolars.hpp	/^  int GetFloor() const {$/;"	f	class:RoutePolars
GetFont	src/Screen/LargeTextWindow.hpp	/^  const Font &GetFont() const {$/;"	f	class:LargeTextWindow
GetFontHeight	src/ui/canvas/gdi/Canvas.cpp	/^Canvas::GetFontHeight() const$/;"	f	class:Canvas
GetFontHeight	src/ui/canvas/memory/Canvas.hpp	/^  unsigned GetFontHeight() const {$/;"	f	class:Canvas
GetFontHeight	src/ui/canvas/opengl/Canvas.hpp	/^  unsigned GetFontHeight() const {$/;"	f	class:Canvas
GetFormat	src/Form/DataField/GeoPoint.hpp	/^  CoordinateFormat GetFormat() const {$/;"	f	class:final
GetFormat	src/ui/canvas/custom/UncompressedImage.hpp	/^  Format GetFormat() const {$/;"	f	class:UncompressedImage
GetFormatSettings	src/UIGlobals.cpp	/^UIGlobals::GetFormatSettings()$/;"	f	class:UIGlobals
GetFriendColor	src/FLARM/Friends.cpp	/^FlarmFriends::GetFriendColor(FlarmId id)$/;"	f	class:FlarmFriends
GetFront	src/Engine/Trace/Trace.hpp	/^  TraceDelta &GetFront() {$/;"	f	class:Trace
GetFull	src/Computer/TraceComputer.hpp	/^  const Trace &GetFull() const {$/;"	f	class:TraceComputer
GetFullScreen	src/MainWindow.hpp	/^  bool GetFullScreen() const {$/;"	f	class:MainWindow
GetFullScreen	src/ui/window/TopWindow.hpp	/^  bool GetFullScreen() const {$/;"	f	class:UI::TopWindowStyle
GetGPSDeviceName	src/Logger/LoggerImpl.cpp	/^GetGPSDeviceName()$/;"	f	file:
GetGPSName	src/Device/Driver/IMI/Protocol/IGC.cpp	/^IMI::GetGPSName(unsigned i)$/;"	f	class:IMI
GetGPSStatus	src/InfoBoxes/Content/Other.cpp	/^GetGPSStatus(const NMEAInfo &basic)$/;"	f	file:
GetGearExtended	src/NMEA/VegaSwitchState.hpp	/^  constexpr bool GetGearExtended() const {$/;"	f	struct:VegaSwitchState
GetGeoAngle	src/Form/DigitEntry.cpp	/^DigitEntry::GetGeoAngle(CoordinateFormat format) const$/;"	f	class:DigitEntry
GetGeoBounds	src/Engine/Airspace/AbstractAirspace.cpp	/^AbstractAirspace::GetGeoBounds() const$/;"	f	class:AbstractAirspace
GetGeoHeight	src/Geo/GeoBounds.hpp	/^  double GetGeoHeight() const {$/;"	f	class:GeoBounds
GetGeoPoint	src/Profile/GeoValue.cpp	/^ProfileMap::GetGeoPoint(const char *key, GeoPoint &value) const$/;"	f	class:ProfileMap
GetGeoWidth	src/Geo/GeoBounds.hpp	/^  double GetGeoWidth() const {$/;"	f	class:GeoBounds
GetGesture	src/UIUtil/GestureManager.cpp	/^GestureManager::GetGesture() const$/;"	f	class:GestureManager
GetGlidePolar	src/Engine/Task/TaskManager.hpp	/^  const GlidePolar &GetGlidePolar() const {$/;"	f	class:TaskManager
GetGlidePolar	src/Replay/TaskAccessor.hpp	/^  GlidePolar GetGlidePolar() const {$/;"	f	class:TaskAccessor
GetHFFXARecord	src/Logger/LoggerEPE.cpp	/^IGCWriter::GetHFFXARecord()$/;"	f	class:IGCWriter
GetHeader	src/Device/Driver/Volkslogger/dbbconv.h	/^  Volkslogger::TableHeader *GetHeader(unsigned i) {$/;"	f	class:DBB
GetHeader	src/Device/Driver/Volkslogger/dbbconv.h	/^  const Volkslogger::TableHeader *GetHeader(unsigned i) const {$/;"	f	class:DBB
GetHeadingDeviation	src/Replay/TaskAutoPilot.cpp	/^TaskAutoPilot::GetHeadingDeviation()$/;"	f	class:TaskAutoPilot
GetHeadingString	src/Dialogs/Airspace/AirspaceList.cpp	/^GetHeadingString(TCHAR *buffer)$/;"	f	file:
GetHectoPascal	src/Atmosphere/Pressure.hpp	/^  double GetHectoPascal() const {$/;"	f	class:AtmosphericPressure
GetHeight	src/Android/Bitmap.hpp	/^  static unsigned GetHeight(JNIEnv *env, jobject bitmap) {$/;"	f	class:AndroidBitmap
GetHeight	src/Engine/Route/FlatTriangleFan.hpp	/^  int GetHeight() const {$/;"	f	class:FlatTriangleFan
GetHeight	src/Form/ScrollBar.hpp	/^  int GetHeight() const {$/;"	f	class:ScrollBar
GetHeight	src/Geo/Flat/FlatBoundingBox.hpp	/^  constexpr unsigned GetHeight() const {$/;"	f	struct:FlatBoundingBox
GetHeight	src/Geo/GeoBounds.hpp	/^  Angle GetHeight() const {$/;"	f	class:GeoBounds
GetHeight	src/Look/FontDescription.hpp	/^  constexpr unsigned GetHeight() const {$/;"	f	class:FontDescription
GetHeight	src/Look/FontDescription.hpp	/^  unsigned GetHeight() const {$/;"	f	class:FontDescription
GetHeight	src/Renderer/TextRenderer.cpp	/^TextRenderer::GetHeight(Canvas &canvas, PixelRect rc,$/;"	f	class:TextRenderer
GetHeight	src/Renderer/TextRenderer.cpp	/^TextRenderer::GetHeight(Canvas &canvas, unsigned width,$/;"	f	class:TextRenderer
GetHeight	src/Renderer/TextRenderer.cpp	/^TextRenderer::GetHeight(const Font &font, unsigned width,$/;"	f	class:TextRenderer
GetHeight	src/Terrain/HeightMatrix.hpp	/^  unsigned GetHeight() const {$/;"	f	class:HeightMatrix
GetHeight	src/Terrain/RasterBuffer.hpp	/^  unsigned GetHeight() const {$/;"	f	class:RasterBuffer
GetHeight	src/Terrain/RasterMap.cpp	/^RasterMap::GetHeight(const GeoPoint &location) const$/;"	f	class:RasterMap
GetHeight	src/Terrain/RasterRenderer.hpp	/^  unsigned GetHeight() const {$/;"	f	class:RasterRenderer
GetHeight	src/Terrain/RasterTile.cpp	/^RasterTile::GetHeight(unsigned x, unsigned y) const$/;"	f	class:RasterTile
GetHeight	src/Terrain/RasterTileCache.cpp	/^RasterTileCache::GetHeight(unsigned px, unsigned py) const$/;"	f	class:RasterTileCache
GetHeight	src/Terrain/RasterTileCache.hpp	/^  unsigned int GetHeight() const { return height; }$/;"	f	class:RasterTileCache
GetHeight	src/ui/canvas/Bitmap.hpp	/^  unsigned GetHeight() const {$/;"	f	class:final
GetHeight	src/ui/canvas/RawBitmap.hpp	/^  unsigned GetHeight() const {$/;"	f	class:final
GetHeight	src/ui/canvas/custom/UncompressedImage.hpp	/^  unsigned GetHeight() const {$/;"	f	class:UncompressedImage
GetHeight	src/ui/canvas/fb/TopCanvas.cpp	/^GetHeight(const struct fb_var_screeninfo &vinfo)$/;"	f	file:
GetHeight	src/ui/canvas/gdi/Canvas.hpp	/^  unsigned GetHeight() const {$/;"	f	class:Canvas
GetHeight	src/ui/canvas/memory/Canvas.hpp	/^  unsigned GetHeight() const {$/;"	f	class:Canvas
GetHeight	src/ui/canvas/opengl/Canvas.hpp	/^  unsigned GetHeight() const {$/;"	f	class:Canvas
GetHeight	src/ui/event/shared/RotatePointer.hpp	/^  constexpr unsigned GetHeight() const {$/;"	f	class:UI::RotatePointer
GetHeight	src/util/AllocatedGrid.hxx	/^	constexpr unsigned GetHeight() const {$/;"	f	class:AllocatedGrid
GetHeightMatrix	src/Terrain/RasterRenderer.hpp	/^  const HeightMatrix &GetHeightMatrix() const {$/;"	f	class:RasterRenderer
GetHeightRef	src/Task/Deserialiser.cpp	/^GetHeightRef(const ConstDataNode &node, const TCHAR *nodename)$/;"	f	file:
GetHeightRef	src/Task/Serialiser.cpp	/^GetHeightRef(AltitudeReference height_ref)$/;"	f	file:
GetHelp	src/Form/DataField/Enum.cpp	/^DataFieldEnum::GetHelp() const$/;"	f	class:DataFieldEnum
GetHelp	src/Form/DataField/Enum.hpp	/^    const TCHAR *GetHelp() const {$/;"	f	class:final::Entry
GetHolder	src/Android/IOIOHelper.hpp	/^  jobject GetHolder() {$/;"	f	class:IOIOHelper
GetHome	src/Engine/Waypoint/Waypoints.hpp	/^  WaypointPtr GetHome() const {$/;"	f	class:Waypoints
GetHomeDataPath	src/LocalPath.cpp	/^GetHomeDataPath(bool create=false)$/;"	f	file:
GetHour	src/time/RoughTime.hpp	/^  constexpr unsigned GetHour() const {$/;"	f	class:RoughTime
GetHourAngle	src/Math/SunEphemeris.cpp	/^SunEphemeris::GetHourAngle(Angle lat, Angle declin)$/;"	f	class:SunEphemeris
GetHourAngleTwilight	src/Math/SunEphemeris.cpp	/^SunEphemeris::GetHourAngleTwilight(Angle lat, Angle declin)$/;"	f	class:SunEphemeris
GetHull	src/Engine/Route/FlatTriangleFan.hpp	/^  ConstBuffer<FlatGeoPoint> GetHull(bool closed) const {$/;"	f	class:FlatTriangleFan
GetIBType	src/Profile/InfoBoxConfig.cpp	/^GetIBType(const ProfileMap &map, const char *key, InfoBoxFactory::Type &val)$/;"	f	file:
GetIRecord	src/Logger/LoggerEPE.cpp	/^IGCWriter::GetIRecord()$/;"	f	class:IGCWriter
GetIcon	src/Topography/TopographyFile.hpp	/^  ResourceId GetIcon() const {$/;"	f	class:TopographyFile
GetIconLook	src/UIGlobals.cpp	/^UIGlobals::GetIconLook()$/;"	f	class:UIGlobals
GetId	src/FLARM/FlarmNetRecord.cpp	/^FlarmNetRecord::GetId() const$/;"	f	class:FlarmNetRecord
GetId	src/Form/DataField/Enum.hpp	/^    unsigned GetId() const {$/;"	f	class:final::Entry
GetIf	src/util/RadixTree.hpp	/^    T *GetIf(const P &predicate) {$/;"	f	struct:RadixTree::LeafList
GetIf	src/util/RadixTree.hpp	/^    T *GetIf(const TCHAR *key, const P &predicate) {$/;"	f	struct:RadixTree::Node
GetIf	src/util/RadixTree.hpp	/^    const T *GetIf(const P &predicate) const {$/;"	f	struct:RadixTree::LeafList
GetIf	src/util/RadixTree.hpp	/^    const T *GetIf(const TCHAR *key, const P &predicate) const {$/;"	f	struct:RadixTree::Node
GetIf	src/util/RadixTree.hpp	/^  T &GetIf(const TCHAR *key, T &default_value, const P &predicate) {$/;"	f	class:RadixTree
GetIf	src/util/RadixTree.hpp	/^  const T &GetIf(const TCHAR *key, const T &default_value,$/;"	f	class:RadixTree
GetImage	src/Terrain/RasterRenderer.hpp	/^  const RawBitmap &GetImage() const {$/;"	f	class:RasterRenderer
GetIndex	src/Device/Descriptor.hpp	/^  unsigned GetIndex() const {$/;"	f	class:final
GetIndexInTask	src/Task/MapTaskManager.cpp	/^GetIndexInTask(const OrderedTask &task, const Waypoint &waypoint)$/;"	f	file:
GetIndexInTask	src/Task/MapTaskManager.cpp	/^MapTaskManager::GetIndexInTask(const Waypoint &waypoint)$/;"	f	class:MapTaskManager
GetIndexOfItemInFocus	src/Form/GridView.cpp	/^GridView::GetIndexOfItemInFocus() const$/;"	f	class:GridView
GetIndices	src/Topography/XShape.cpp	/^XShape::GetIndices(int thinning_level, ShapeScalar min_distance,$/;"	f	class:XShape
GetInfoBoxLook	src/Dialogs/Settings/dlgConfigInfoboxes.cpp	/^  const InfoBoxLook &GetInfoBoxLook() const {$/;"	f	class:final
GetInitialOrientation	src/ui/window/TopWindow.hpp	/^  DisplayOrientation GetInitialOrientation() const {$/;"	f	class:UI::TopWindowStyle
GetInnerRadius	src/Engine/Task/ObservationZones/AnnularSectorZone.hpp	/^  double GetInnerRadius() const {$/;"	f	class:AnnularSectorZone
GetInnerRadius	src/Engine/Task/ObservationZones/KeyholeZone.hpp	/^  double GetInnerRadius() const {$/;"	f	class:final
GetIntegerAltitude	src/Engine/Trace/Point.hpp	/^  int GetIntegerAltitude() const {$/;"	f	class:TracePoint
GetIntegerValue	src/Form/DataField/Angle.hpp	/^  unsigned GetIntegerValue() const {$/;"	f	class:final
GetIntegerValue	src/Form/DigitEntry.cpp	/^DigitEntry::GetIntegerValue() const$/;"	f	class:DigitEntry
GetInterface	src/Audio/SLES/Object.hpp	/^    SLresult GetInterface(const SLInterfaceID iid, void *pInterface) {$/;"	f	class:SLES::Object
GetIntermediateTypes	src/Engine/Task/Factory/AbstractTaskFactory.hpp	/^  const LegalPointSet &GetIntermediateTypes() const {$/;"	f	class:AbstractTaskFactory
GetInterpolated	src/Terrain/RasterBuffer.cpp	/^RasterBuffer::GetInterpolated(unsigned lx, unsigned ly) const$/;"	f	class:RasterBuffer
GetInterpolated	src/Terrain/RasterBuffer.cpp	/^RasterBuffer::GetInterpolated(unsigned lx, unsigned ly,$/;"	f	class:RasterBuffer
GetInterpolatedHeight	src/Terrain/RasterMap.cpp	/^RasterMap::GetInterpolatedHeight(const GeoPoint &location) const$/;"	f	class:RasterMap
GetInterpolatedHeight	src/Terrain/RasterTile.cpp	/^RasterTile::GetInterpolatedHeight(unsigned lx, unsigned ly,$/;"	f	class:RasterTile
GetInterpolatedHeight	src/Terrain/RasterTileCache.cpp	/^RasterTileCache::GetInterpolatedHeight(unsigned int lx, unsigned int ly) const$/;"	f	class:RasterTileCache
GetInvMC	src/Engine/GlideSolvers/GlidePolar.hpp	/^  double GetInvMC() const {$/;"	f	class:GlidePolar
GetItem	src/Form/DataField/File.cpp	/^FileDataField::GetItem(unsigned index) const$/;"	f	class:FileDataField
GetItem	src/Polar/PolarStore.cpp	/^PolarStore::GetItem(unsigned i)$/;"	f	class:PolarStore
GetItemCount	src/Weather/Rasp/RaspStore.hpp	/^  unsigned GetItemCount() const {$/;"	f	class:RaspStore
GetItemHelpEnabled	src/Form/DataField/Base.hpp	/^  bool GetItemHelpEnabled() {$/;"	f	class:DataField
GetItemInfo	src/Weather/Rasp/RaspStore.hpp	/^  const MapItem &GetItemInfo(unsigned i) const {$/;"	f	class:RaspStore
GetKey	src/Tracking/SkyLines/Client.hpp	/^  uint64_t GetKey() const {$/;"	f	class:SkyLinesTracking::final
GetKey	src/util/Cache.hxx	/^		const Key &GetKey() const {$/;"	f	class:Cache::Item
GetKeyCode	src/ui/event/sdl/Event.hpp	/^  unsigned GetKeyCode() const {$/;"	f	struct:UI::Event
GetKeyCode	src/ui/event/shared/Event.hpp	/^  unsigned GetKeyCode() const {$/;"	f	struct:UI::Event
GetKeyCode	src/ui/event/windows/Event.hpp	/^  unsigned GetKeyCode() const {$/;"	f	struct:UI::Event
GetKeyEvent	src/Input/InputConfig.hpp	/^  unsigned GetKeyEvent(unsigned mode, unsigned key_code) const {$/;"	f	struct:InputConfig
GetKiloHertz	src/RadioFrequency.hpp	/^  unsigned GetKiloHertz() const {$/;"	f	class:RadioFrequency
GetLDOverGround	src/Engine/GlideSolvers/GlidePolar.cpp	/^GlidePolar::GetLDOverGround(Angle track, SpeedVector wind) const$/;"	f	class:GlidePolar
GetLDOverGround	src/Engine/GlideSolvers/GlidePolar.cpp	/^GlidePolar::GetLDOverGround(const AircraftState &state) const$/;"	f	class:GlidePolar
GetLabel	src/Topography/XShape.hpp	/^  const TCHAR *GetLabel() const {$/;"	f	class:XShape
GetLabel	src/Weather/Rasp/RaspRenderer.hpp	/^  const TCHAR *GetLabel() const {$/;"	f	class:RaspRenderer
GetLastIntermediateAchieved	src/Engine/Task/Ordered/OrderedTask.cpp	/^OrderedTask::GetLastIntermediateAchieved() const$/;"	f	class:OrderedTask
GetLastModification	src/system/FileUtil.cpp	/^File::GetLastModification(Path path)$/;"	f	class:File
GetLastState	src/Replay/AircraftSim.hpp	/^  const AircraftState& GetLastState() const {$/;"	f	class:AircraftSim
GetLastWaypoint	src/Device/Declaration.hpp	/^  const Waypoint &GetLastWaypoint() const {$/;"	f	struct:Declaration
GetLatitude	src/Form/DigitEntry.cpp	/^DigitEntry::GetLatitude(CoordinateFormat format) const$/;"	f	class:DigitEntry
GetLeft	src/Form/ScrollBar.hpp	/^  unsigned GetLeft(const PixelSize size) const {$/;"	f	class:ScrollBar
GetLeft	src/Geo/Flat/FlatBoundingBox.hpp	/^  constexpr int GetLeft() const {$/;"	f	struct:FlatBoundingBox
GetLegStats	src/Replay/TaskAccessor.hpp	/^  const ElementStat GetLegStats() const {$/;"	f	class:TaskAccessor
GetLegacyAltitudeUnit	src/Profile/UnitsConfig.cpp	/^GetLegacyAltitudeUnit(const ProfileMap &map, const char *key, Unit &value)$/;"	f	file:
GetLegacyAutoWindMode	src/Computer/Wind/Settings.hpp	/^  unsigned GetLegacyAutoWindMode() const {$/;"	f	struct:WindSettings
GetLegacyDistanceUnit	src/Profile/UnitsConfig.cpp	/^GetLegacyDistanceUnit(const ProfileMap &map, const char *key, Unit &value)$/;"	f	file:
GetLegacySpeedUnit	src/Profile/UnitsConfig.cpp	/^GetLegacySpeedUnit(const ProfileMap &map, const char *key, Unit &value)$/;"	f	file:
GetLegacyTemperatureUnit	src/Profile/UnitsConfig.cpp	/^GetLegacyTemperatureUnit(const ProfileMap &map, const char *key, Unit &value)$/;"	f	file:
GetLegacyVerticalSpeedUnit	src/Profile/UnitsConfig.cpp	/^GetLegacyVerticalSpeedUnit(const ProfileMap &map, const char *key, Unit &value)$/;"	f	file:
GetLength	src/Computer/WaveResult.hpp	/^  double GetLength() const {$/;"	f	struct:WaveInfo
GetLength	src/Engine/Task/ObservationZones/LineSectorZone.hpp	/^  double GetLength() const {$/;"	f	class:LineSectorZone
GetLength	src/Engine/Waypoint/Runway.hpp	/^  unsigned GetLength() const {$/;"	f	class:Runway
GetLength	src/net/http/ToBuffer.hpp	/^  size_t GetLength() const {$/;"	f	class:Net::DownloadToBufferJob
GetLine	src/Device/Util/NMEAReader.cpp	/^PortNMEAReader::GetLine()$/;"	f	class:PortNMEAReader
GetLineMaskPosition	src/ui/canvas/memory/Murphy.hpp	/^  unsigned GetLineMaskPosition() const {$/;"	f	struct:MurphyIterator
GetLineSpacing	src/Android/TextUtil.hpp	/^  unsigned GetLineSpacing() const {$/;"	f	class:TextUtil
GetLinear	src/util/AllocatedGrid.hxx	/^	const_reference GetLinear(unsigned i) const {$/;"	f	class:AllocatedGrid
GetLinear	src/util/AllocatedGrid.hxx	/^	reference GetLinear(unsigned i) {$/;"	f	class:AllocatedGrid
GetLines	src/Topography/XShape.hpp	/^  ConstBuffer<uint16_t> GetLines() const {$/;"	f	class:XShape
GetList	src/Waypoint/LastUsed.cpp	/^LastUsedWaypoints::GetList()$/;"	f	class:LastUsedWaypoints
GetLiveBlackboard	src/Interface.hpp	/^  static inline LiveBlackboard &GetLiveBlackboard() {$/;"	f	namespace:CommonInterface
GetLocalValue	src/Form/DataField/RoughTime.hpp	/^  RoughTime GetLocalValue() const {$/;"	f	class:final
GetLocation	src/Device/Declaration.hpp	/^  const GeoPoint &GetLocation(const unsigned i) const {$/;"	f	struct:Declaration
GetLocation	src/Device/Driver/Volkslogger/Database.cpp	/^Volkslogger::Waypoint::GetLocation() const$/;"	f	class:Volkslogger::Waypoint
GetLocation	src/Engine/Task/Points/SampledTaskPoint.hpp	/^  const GeoPoint &GetLocation() const {$/;"	f	class:SampledTaskPoint
GetLocation	src/Engine/Task/Points/TaskPoint.hpp	/^  const GeoPoint &GetLocation() const {$/;"	f	class:TaskPoint
GetLocation	src/Geo/SearchPoint.hpp	/^  const GeoPoint &GetLocation() const {$/;"	f	class:SearchPoint
GetLocation	src/MapWindow/MapWindow.hpp	/^  GeoPoint GetLocation() const {$/;"	f	class:MapWindow
GetLocation	src/TeamCode/TeamCode.cpp	/^TeamCode::GetLocation(const GeoPoint ref) const$/;"	f	class:TeamCode
GetLocationMax	src/Engine/Task/Points/SampledTaskPoint.hpp	/^  const GeoPoint &GetLocationMax() const {$/;"	f	class:SampledTaskPoint
GetLocationMin	src/Engine/Task/Points/SampledTaskPoint.hpp	/^  const GeoPoint &GetLocationMin() const {$/;"	f	class:SampledTaskPoint
GetLocationRemaining	src/Engine/Task/Ordered/Points/AATPoint.cpp	/^AATPoint::GetLocationRemaining() const$/;"	f	class:AATPoint
GetLocationRemaining	src/Engine/Task/Points/ScoredTaskPoint.hpp	/^  const GeoPoint &GetLocationRemaining() const {$/;"	f	class:ScoredTaskPoint
GetLocationRemaining	src/Engine/Task/Points/TaskPoint.hpp	/^  virtual const GeoPoint &GetLocationRemaining() const {$/;"	f	class:TaskPoint
GetLocationScored	src/Engine/Task/Points/ScoredTaskPoint.cpp	/^ScoredTaskPoint::GetLocationScored() const$/;"	f	class:ScoredTaskPoint
GetLocationTarget	src/Engine/Task/TaskManager.cpp	/^TaskManager::GetLocationTarget(const unsigned index) const$/;"	f	class:TaskManager
GetLocationTravelled	src/Engine/Task/Points/ScoredTaskPoint.hpp	/^  const GeoPoint &GetLocationTravelled() const {$/;"	f	class:ScoredTaskPoint
GetLogbookContents	src/Device/Driver/LX/NanoLogger.cpp	/^GetLogbookContents(Port &port, PortNMEAReader &reader,$/;"	f	file:
GetLongitude	src/Form/DigitEntry.cpp	/^DigitEntry::GetLongitude(CoordinateFormat format) const$/;"	f	class:DigitEntry
GetLook	src/Dialogs/Task/Manager/Internal.hpp	/^  const DialogLook &GetLook() const {$/;"	f	class:final
GetLook	src/Form/ButtonPanel.hpp	/^  const ButtonLook &GetLook() const {$/;"	f	class:ButtonPanel
GetLook	src/Form/Form.hpp	/^  const DialogLook &GetLook() const {$/;"	f	class:WndForm
GetLook	src/Form/TabDisplay.hpp	/^  const DialogLook &GetLook() const {$/;"	f	class:final
GetLook	src/Gauge/ThermalAssistantRenderer.hpp	/^  const ThermalAssistantLook &GetLook() {$/;"	f	class:ThermalAssistantRenderer
GetLook	src/InfoBoxes/InfoBoxWindow.hpp	/^  const InfoBoxLook &GetLook() const {$/;"	f	class:InfoBoxWindow
GetLook	src/MainWindow.hpp	/^  const Look &GetLook() const {$/;"	f	class:MainWindow
GetLook	src/Renderer/AirspaceLabelRenderer.hpp	/^  const AirspaceLook &GetLook() const {$/;"	f	class:AirspaceLabelRenderer
GetLook	src/Renderer/AirspaceRenderer.hpp	/^  const AirspaceLook &GetLook() const {$/;"	f	class:AirspaceRenderer
GetLook	src/Renderer/ButtonRenderer.hpp	/^  const ButtonLook &GetLook() const {$/;"	f	class:ButtonFrameRenderer
GetLook	src/Renderer/FinalGlideBarRenderer.hpp	/^  const FinalGlideBarLook &GetLook() const {$/;"	f	class:FinalGlideBarRenderer
GetLook	src/Renderer/SymbolButtonRenderer.hpp	/^  const ButtonLook &GetLook() const {$/;"	f	class:SymbolButtonRenderer
GetLook	src/Renderer/TextButtonRenderer.hpp	/^  const ButtonLook &GetLook() const {$/;"	f	class:TextButtonRenderer
GetLook	src/Renderer/VarioBarRenderer.hpp	/^  const VarioBarLook &GetLook() const {$/;"	f	class:VarioBarRenderer
GetLook	src/Renderer/WaypointRenderer.hpp	/^  const WaypointLook &GetLook() const {$/;"	f	class:WaypointRenderer
GetLook	src/UIGlobals.cpp	/^UIGlobals::GetLook()$/;"	f	class:UIGlobals
GetLowerLeft	src/Geo/Flat/FlatBoundingBox.hpp	/^  constexpr const FlatGeoPoint &GetLowerLeft() const {$/;"	f	struct:FlatBoundingBox
GetLuaState	src/lua/Timer.cpp	/^  lua_State *GetLuaState() {$/;"	f	class:final
GetLuminosity	src/ui/canvas/PortableColor.hpp	/^  constexpr uint8_t GetLuminosity() const {$/;"	f	class:Luminosity8
GetLuminosity	src/ui/canvas/memory/Color.hpp	/^  constexpr uint8_t GetLuminosity() const {$/;"	f	class:Color
GetMC	src/Engine/GlideSolvers/GlidePolar.hpp	/^  double GetMC() const {$/;"	f	class:GlidePolar
GetMacAddress	src/Tracking/SkyLines/Key.cpp	/^GetMacAddress(MacAddress &address, const char *interface_name)$/;"	f	file:
GetMainMenuButton	src/Form/TabMenuDisplay.hpp	/^  const MainMenuButton &GetMainMenuButton(unsigned main_menu_index) const {$/;"	f	class:final
GetMainMenuButtonSize	src/Form/TabMenuDisplay.hpp	/^  const PixelRect &GetMainMenuButtonSize(unsigned i) const {$/;"	f	class:final
GetMainRect	src/MainWindow.hpp	/^  PixelRect GetMainRect() const {$/;"	f	class:MainWindow
GetMainRect	src/MainWindow.hpp	/^  const PixelRect &GetMainRect(const PixelRect &full_rc) const {$/;"	f	class:MainWindow
GetMainWindow	src/Form/Form.cpp	/^WndForm::GetMainWindow()$/;"	f	class:WndForm
GetMainWindow	src/Kobo/KoboMenu.cpp	/^UIGlobals::GetMainWindow()$/;"	f	class:UIGlobals
GetMainWindow	src/UIGlobals.cpp	/^UIGlobals::GetMainWindow()$/;"	f	class:UIGlobals
GetManager	src/Computer/WarningComputer.hpp	/^  ProtectedAirspaceWarningManager &GetManager() {$/;"	f	class:WarningComputer
GetManager	src/Computer/WarningComputer.hpp	/^  const ProtectedAirspaceWarningManager &GetManager() const {$/;"	f	class:WarningComputer
GetMap	src/MainWindow.hpp	/^  GlueMapWindow *GetMap() {$/;"	f	class:MainWindow
GetMap	src/UIGlobals.cpp	/^UIGlobals::GetMap()$/;"	f	class:UIGlobals
GetMap	src/Weather/Rasp/RaspCache.hpp	/^  const RasterMap *GetMap() const {$/;"	f	class:RaspCache
GetMapCenter	src/Terrain/RasterMap.hpp	/^  GeoPoint GetMapCenter() const {$/;"	f	class:RasterMap
GetMapIfActive	src/MainWindow.cpp	/^MainWindow::GetMapIfActive()$/;"	f	class:MainWindow
GetMapIfActive	src/UIGlobals.cpp	/^UIGlobals::GetMapIfActive()$/;"	f	class:UIGlobals
GetMapLabel	src/Weather/Rasp/RaspCache.cpp	/^RaspCache::GetMapLabel() const$/;"	f	class:RaspCache
GetMapLook	src/UIGlobals.cpp	/^UIGlobals::GetMapLook()$/;"	f	class:UIGlobals
GetMapName	src/Weather/Rasp/RaspCache.cpp	/^RaspCache::GetMapName() const$/;"	f	class:RaspCache
GetMapRectAbove	src/MainWindow.cpp	/^GetMapRectAbove(const PixelRect &rc, const PixelRect &bottom_rect)$/;"	f	file:
GetMapSettings	src/Blackboard/MapSettingsBlackboard.hpp	/^  const MapSettings& GetMapSettings() const {$/;"	f	class:MapSettingsBlackboard
GetMapSettings	src/Blackboard/SettingsBlackboard.hpp	/^  const MapSettings &GetMapSettings() const {$/;"	f	class:SettingsBlackboard
GetMapSettings	src/Interface.hpp	/^  static inline const MapSettings& GetMapSettings() {$/;"	f	namespace:CommonInterface
GetMapSettings	src/MapWindow/MapWindowBlackboard.hpp	/^  const MapSettings &GetMapSettings() const {$/;"	f	class:MapWindowBlackboard
GetMapSettings	src/MapWindow/TargetMapWindow.cpp	/^GetMapSettings()$/;"	f	file:
GetMapSettings	src/Menu/ExpandMacros.cpp	/^GetMapSettings()$/;"	f	file:
GetMargin	src/Renderer/ButtonRenderer.cpp	/^ButtonFrameRenderer::GetMargin()$/;"	f	class:ButtonFrameRenderer
GetMask	src/ui/canvas/Pen.hpp	/^  constexpr unsigned GetMask() const {$/;"	f	class:Pen
GetMassUnit	src/Profile/UnitsConfig.cpp	/^GetMassUnit(const ProfileMap &map, const char *key, Unit &value)$/;"	f	file:
GetMaxDt	src/Math/SelfTimingKalmanFilter1d.cpp	/^SelfTimingKalmanFilter1d::GetMaxDt() const$/;"	f	class:SelfTimingKalmanFilter1d
GetMaxElevation	src/Terrain/RasterTileCache.hpp	/^  TerrainHeight GetMaxElevation() const {$/;"	f	class:RasterTileCache
GetMaxN	src/Engine/ThermalBand/ThermalBand.cpp	/^ThermalBand::GetMaxN() const$/;"	f	class:ThermalBand
GetMaxNumber	src/Form/DigitEntry.hpp	/^    constexpr unsigned GetMaxNumber() const {$/;"	f	struct:CoordinateFormat::Column
GetMaxSafeVolume	src/Audio/PCMMixer.hpp	/^  static constexpr unsigned GetMaxSafeVolume() {$/;"	f	class:final
GetMaxSafeVolume	src/Audio/PCMMixerDataSource.hpp	/^  static constexpr unsigned GetMaxSafeVolume() {$/;"	f	class:PCMMixerDataSource
GetMaxSize	src/Engine/Trace/Trace.hpp	/^  unsigned GetMaxSize() const {$/;"	f	class:Trace
GetMaxSpeed	src/Engine/Airspace/AirspaceAircraftPerformance.hpp	/^  double GetMaxSpeed() const {$/;"	f	class:AirspaceAircraftPerformance
GetMaxTime	src/Replay/CatmullRomInterpolator.hpp	/^  GetMaxTime() const$/;"	f	class:CatmullRomInterpolator
GetMaxValue	src/Audio/VolumeController.hpp	/^  static constexpr unsigned GetMaxValue() {$/;"	f	class:final
GetMaxW	src/Engine/ThermalBand/ThermalBand.cpp	/^ThermalBand::GetMaxW() const$/;"	f	class:ThermalBand
GetMaxWorkingHeight	src/FlightStatistics.cpp	/^FlightStatistics::GetMaxWorkingHeight() const$/;"	f	class:FlightStatistics
GetMaximum	src/Terrain/RasterBuffer.cpp	/^RasterBuffer::GetMaximum() const$/;"	f	class:RasterBuffer
GetMaximumLegDistance	src/Engine/Task/Points/TaskLeg.cpp	/^TaskLeg::GetMaximumLegDistance() const$/;"	f	class:TaskLeg
GetMeanSunLongitude	src/Math/SunEphemeris.cpp	/^SunEphemeris::GetMeanSunLongitude(double d)$/;"	f	class:SunEphemeris
GetMenu	src/Input/InputEvents.cpp	/^InputEvents::GetMenu(const TCHAR *mode)$/;"	f	class:InputEvents
GetMenuItem	src/Input/InputConfig.hpp	/^  const MenuItem &GetMenuItem(unsigned mode, unsigned location) const {$/;"	f	struct:InputConfig
GetMessage	src/Device/Driver/IMI/Protocol/MessageParser.cpp	/^IMI::MessageParser::GetMessage()$/;"	f	class:IMI::MessageParser
GetMiddle	src/Gauge/ThermalAssistantRenderer.hpp	/^  const PixelPoint &GetMiddle() const {$/;"	f	class:ThermalAssistantRenderer
GetMiddle	src/Math/Line2D.hpp	/^  constexpr Point GetMiddle() const {$/;"	f	struct:Line2D
GetMinMax	src/Renderer/TrailRenderer.cpp	/^GetMinMax(TrailSettings::Type type, const TracePointVector &trace)$/;"	f	file:
GetMinPointsForShapeType	src/Topography/XShape.cpp	/^GetMinPointsForShapeType(int shapelib_type)$/;"	f	file:
GetMinTime	src/Replay/CatmullRomInterpolator.hpp	/^  GetMinTime() const$/;"	f	class:CatmullRomInterpolator
GetMinWorkingHeight	src/FlightStatistics.cpp	/^FlightStatistics::GetMinWorkingHeight() const$/;"	f	class:FlightStatistics
GetMinimumButtonWidth	src/Dialogs/dlgQuickMenu.cpp	/^QuickMenuButtonRenderer::GetMinimumButtonWidth() const$/;"	f	class:QuickMenuButtonRenderer
GetMinimumButtonWidth	src/Renderer/BitmapButtonRenderer.cpp	/^BitmapButtonRenderer::GetMinimumButtonWidth() const$/;"	f	class:BitmapButtonRenderer
GetMinimumButtonWidth	src/Renderer/ButtonRenderer.cpp	/^ButtonRenderer::GetMinimumButtonWidth() const$/;"	f	class:ButtonRenderer
GetMinimumButtonWidth	src/Renderer/TextButtonRenderer.cpp	/^TextButtonRenderer::GetMinimumButtonWidth() const$/;"	f	class:TextButtonRenderer
GetMinimumLegDistance	src/Engine/Task/Points/TaskLeg.cpp	/^TaskLeg::GetMinimumLegDistance() const$/;"	f	class:TaskLeg
GetMinimumPointDistance	src/Topography/TopographyFile.cpp	/^TopographyFile::GetMinimumPointDistance(unsigned level) const$/;"	f	class:TopographyFile
GetMinimumWidth	src/Form/Button.cpp	/^Button::GetMinimumWidth() const$/;"	f	class:Button
GetMinute	src/time/RoughTime.hpp	/^  constexpr unsigned GetMinute() const {$/;"	f	class:RoughTime
GetMinuteOfDay	src/time/BrokenTime.hpp	/^  unsigned GetMinuteOfDay() const {$/;"	f	struct:BrokenTime
GetMinuteOfDay	src/time/RoughTime.hpp	/^  constexpr unsigned GetMinuteOfDay() const {$/;"	f	class:RoughTime
GetMode	src/Engine/Task/TaskManager.hpp	/^  TaskType GetMode() const {$/;"	f	class:TaskManager
GetModifySerial	src/Engine/Trace/Trace.hpp	/^  const Serial &GetModifySerial() const {$/;"	f	class:Trace
GetMousePosition	src/ui/event/poll/InputQueue.hpp	/^  PixelPoint GetMousePosition() const {$/;"	f	class:DisplayOrientation::final
GetMousePosition	src/ui/event/poll/Queue.hpp	/^  PixelPoint GetMousePosition() const {$/;"	f	class:DisplayOrientation::final
GetMutatedPointType	src/Engine/Task/Factory/AATTaskFactory.cpp	/^AATTaskFactory::GetMutatedPointType(const OrderedTaskPoint &tp) const$/;"	f	class:AATTaskFactory
GetMutatedPointType	src/Engine/Task/Factory/AbstractTaskFactory.cpp	/^AbstractTaskFactory::GetMutatedPointType(const OrderedTaskPoint &tp) const$/;"	f	class:AbstractTaskFactory
GetMutatedPointType	src/Engine/Task/Factory/FAITaskFactory.cpp	/^FAITaskFactory::GetMutatedPointType(const OrderedTaskPoint &tp) const$/;"	f	class:FAITaskFactory
GetMutatedPointType	src/Engine/Task/Factory/MatTaskFactory.cpp	/^MatTaskFactory::GetMutatedPointType(const OrderedTaskPoint &tp) const$/;"	f	class:MatTaskFactory
GetMutatedPointType	src/Engine/Task/Factory/RTTaskFactory.cpp	/^RTTaskFactory::GetMutatedPointType(const OrderedTaskPoint &tp) const$/;"	f	class:RTTaskFactory
GetName	src/Device/Declaration.hpp	/^  const TCHAR *GetName(const unsigned i) const {$/;"	f	struct:Declaration
GetName	src/Engine/Airspace/AbstractAirspace.hpp	/^  const TCHAR *GetName() const {$/;"	f	class:AbstractAirspace
GetName	src/Engine/Task/Ordered/OrderedTask.hpp	/^  const StaticString<64> &GetName() const {$/;"	f	class:final
GetName	src/InfoBoxes/Content/Factory.cpp	/^InfoBoxFactory::GetName(Type type)$/;"	f	class:InfoBoxFactory
GetName	src/Repository/AvailableFile.hpp	/^  const char *GetName() const {$/;"	f	struct:AvailableFile
GetName	src/Task/Serialiser.cpp	/^GetName(TaskPointType type, bool mode_optional_start)$/;"	f	file:
GetName	src/Task/Serialiser.cpp	/^GetName(const OrderedTaskPoint &tp, bool mode_optional_start)$/;"	f	file:
GetName	src/Task/TaskFile.cpp	/^TaskFile::GetName(unsigned index) const$/;"	f	class:TaskFile
GetName	src/Task/TaskStore.cpp	/^TaskStore::GetName(unsigned index) const$/;"	f	class:TaskStore
GetName	src/Task/TaskStore.hpp	/^    tstring::const_pointer GetName() const {$/;"	f	struct:TaskStore::Item
GetName	src/Units/UnitsStore.cpp	/^Units::Store::GetName(unsigned i)$/;"	f	class:Units::Store
GetName	src/XML/Node.hpp	/^  const TCHAR *GetName() const {$/;"	f	class:XMLNode
GetNameFromAddress	src/Android/BluetoothHelper.cpp	/^BluetoothHelper::GetNameFromAddress(JNIEnv *env, const char *address)$/;"	f	class:BluetoothHelper
GetNanoSetting	src/Device/Driver/LX/Settings.cpp	/^LXDevice::GetNanoSetting(const char *name) const$/;"	f	class:LXDevice
GetNative	src/ui/canvas/Bitmap.hpp	/^  ConstImageBuffer<BitmapPixelTraits> GetNative() const {$/;"	f	class:final
GetNative	src/ui/canvas/Bitmap.hpp	/^  GLTexture *GetNative() const {$/;"	f	class:final
GetNative	src/ui/canvas/Bitmap.hpp	/^  HBITMAP GetNative() const {$/;"	f	class:final
GetNative	src/ui/canvas/gdi/Color.hpp	/^  constexpr COLORREF GetNative() const {$/;"	f	class:Color
GetNativeSize	src/ui/canvas/egl/TopCanvas.cpp	/^TopCanvas::GetNativeSize() const$/;"	f	class:TopCanvas
GetNativeSize	src/ui/canvas/fb/TopCanvas.cpp	/^TopCanvas::GetNativeSize() const$/;"	f	class:TopCanvas
GetNativeSize	src/ui/canvas/glx/TopCanvas.cpp	/^TopCanvas::GetNativeSize() const$/;"	f	class:TopCanvas
GetNativeSize	src/ui/canvas/sdl/TopCanvas.cpp	/^TopCanvas::GetNativeSize() const$/;"	f	class:TopCanvas
GetNativeValue	src/ui/canvas/PortableColor.hpp	/^  constexpr uint16_t GetNativeValue() const {$/;"	f	class:RGB555Color
GetNativeValue	src/ui/canvas/PortableColor.hpp	/^  constexpr uint16_t GetNativeValue() const {$/;"	f	class:RGB565Color
GetNearest	src/Engine/Route/AirspaceRoute.cpp	/^  AIVResult GetNearest() const {$/;"	f	class:final
GetNearest	src/Engine/Waypoint/Waypoints.cpp	/^Waypoints::GetNearest(const GeoPoint &loc, double range) const$/;"	f	class:Waypoints
GetNearestIf	src/Engine/Waypoint/Waypoints.cpp	/^Waypoints::GetNearestIf(const GeoPoint &loc, double range,$/;"	f	class:Waypoints
GetNearestLandable	src/Engine/Waypoint/Waypoints.cpp	/^Waypoints::GetNearestLandable(const GeoPoint &loc, double range) const$/;"	f	class:Waypoints
GetNearestTime	src/Weather/Rasp/RaspStore.cpp	/^RaspStore::GetNearestTime(unsigned item_index, unsigned time_index) const$/;"	f	class:RaspStore
GetNetState	src/net/State.cpp	/^GetNetState()$/;"	f
GetNetState	src/net/State.hpp	/^GetNetState()$/;"	f
GetNettoHeight	src/Form/ScrollBar.hpp	/^  int GetNettoHeight() const {$/;"	f	class:ScrollBar
GetNewDisplayMode	src/DisplayMode.cpp	/^GetNewDisplayMode(const InfoBoxSettings &settings, const UIState &ui_state,$/;"	f
GetNewWarningPtr	src/Engine/Airspace/AirspaceWarningManager.cpp	/^AirspaceWarningManager::GetNewWarningPtr(const AbstractAirspace &airspace)$/;"	f	class:AirspaceWarningManager
GetNext	src/Engine/Task/Ordered/Points/OrderedTaskPoint.hpp	/^  OrderedTaskPoint *GetNext() {$/;"	f	class:OrderedTaskPoint
GetNext	src/Engine/Task/Ordered/Points/OrderedTaskPoint.hpp	/^  const OrderedTaskPoint *GetNext() const {$/;"	f	class:OrderedTaskPoint
GetNext	src/Engine/Task/Points/TaskLeg.cpp	/^TaskLeg::GetNext() const$/;"	f	class:TaskLeg
GetNext	src/Engine/Task/Points/TaskLeg.cpp	/^TaskLeg::GetNext()$/;"	f	class:TaskLeg
GetNext	src/system/Args.hpp	/^  const char *GetNext() {$/;"	f	class:Args
GetNextChar	src/XML/Parser.cpp	/^GetNextChar(XML::Parser *pXML)$/;"	f	file:
GetNextEnabledItemIndex	src/Form/GridView.cpp	/^GridView::GetNextEnabledItemIndex(signed currIndex, Direction direction) const$/;"	f	class:GridView
GetNextItemIndex	src/Form/GridView.cpp	/^GridView::GetNextItemIndex(unsigned currIndex, Direction direction) const$/;"	f	class:GridView
GetNextLegEqThermal	src/Engine/GlideSolvers/GlidePolar.cpp	/^GlidePolar::GetNextLegEqThermal(double current_wind, double next_wind) const$/;"	f	class:GlidePolar
GetNextLegVector	src/Engine/Task/Ordered/Points/OrderedTaskPoint.cpp	/^OrderedTaskPoint::GetNextLegVector() const$/;"	f	class:OrderedTaskPoint
GetNextLegVector	src/Engine/Task/Points/TaskPoint.cpp	/^TaskPoint::GetNextLegVector() const$/;"	f	class:TaskPoint
GetNextRow	src/ui/canvas/RawBitmap.hpp	/^  RawColor *GetNextRow(RawColor *row) {$/;"	f	class:final
GetNextScaleThreshold	src/Topography/TopographyFile.hpp	/^  double GetNextScaleThreshold(double map_scale) const {$/;"	f	class:TopographyFile
GetNextScaleThreshold	src/Topography/TopographyStore.cpp	/^TopographyStore::GetNextScaleThreshold(double map_scale) const$/;"	f	class:TopographyStore
GetNextToken	src/XML/Parser.cpp	/^XML::GetNextToken(Parser *pXML)$/;"	f	class:XML
GetNominalLegDistance	src/Engine/Task/Points/TaskLeg.hpp	/^  double GetNominalLegDistance() const {$/;"	f	class:TaskLeg
GetNominalLegVector	src/Engine/Task/Points/TaskLeg.cpp	/^TaskLeg::GetNominalLegVector() const$/;"	f	class:TaskLeg
GetNominalPoints	src/Engine/Task/Points/SampledTaskPoint.hpp	/^  const SearchPointVector &GetNominalPoints() const {$/;"	f	class:SampledTaskPoint
GetNorth	src/Geo/GeoBounds.hpp	/^  constexpr Angle GetNorth() const {$/;"	f	class:GeoBounds
GetNorthEast	src/Geo/GeoBounds.hpp	/^  constexpr GeoPoint GetNorthEast() const {$/;"	f	class:GeoBounds
GetNorthUp	src/Gauge/BigTrafficWidget.cpp	/^  bool GetNorthUp() const {$/;"	f	class:FlarmTrafficControl
GetNorthWest	src/Geo/GeoBounds.hpp	/^  constexpr GeoPoint GetNorthWest() const {$/;"	f	class:GeoBounds
GetNow	src/time/PeriodClock.hpp	/^  static auto GetNow() {$/;"	f	class:PeriodClock
GetNumColumns	src/Form/GridView.hpp	/^  unsigned GetNumColumns() const {$/;"	f	class:GridView
GetNumFiles	src/Form/DataField/File.cpp	/^FileDataField::GetNumFiles() const$/;"	f	class:FileDataField
GetNumMainMenuItems	src/Form/TabMenuDisplay.hpp	/^  unsigned GetNumMainMenuItems() const {$/;"	f	class:final
GetNumPages	src/Form/TabMenuDisplay.hpp	/^  unsigned GetNumPages() const {$/;"	f	class:final
GetNumRows	src/Form/GridView.hpp	/^  unsigned GetNumRows() const {$/;"	f	class:GridView
GetNumberOfFlights	src/Device/Driver/LX/NanoLogger.cpp	/^GetNumberOfFlights(Port &port, PortNMEAReader &reader,$/;"	f	file:
GetOZSize	src/Engine/Task/Factory/AbstractTaskFactory.cpp	/^GetOZSize(const ObservationZonePoint &oz)$/;"	f	file:
GetObject	src/Dialogs/Task/Widgets/CylinderZoneEditWidget.hpp	/^  CylinderZone &GetObject() {$/;"	f	class:CylinderZoneEditWidget
GetObject	src/Dialogs/Task/Widgets/CylinderZoneEditWidget.hpp	/^  const CylinderZone &GetObject() const {$/;"	f	class:CylinderZoneEditWidget
GetObject	src/Dialogs/Task/Widgets/LineSectorZoneEditWidget.hpp	/^  LineSectorZone &GetObject() {$/;"	f	class:LineSectorZoneEditWidget
GetObject	src/Dialogs/Task/Widgets/LineSectorZoneEditWidget.hpp	/^  const LineSectorZone &GetObject() const {$/;"	f	class:LineSectorZoneEditWidget
GetObject	src/Dialogs/Task/Widgets/ObservationZoneEditWidget.hpp	/^  ObservationZone &GetObject() {$/;"	f	class:ObservationZoneEditWidget
GetObject	src/Dialogs/Task/Widgets/ObservationZoneEditWidget.hpp	/^  const ObservationZone &GetObject() const {$/;"	f	class:ObservationZoneEditWidget
GetObject	src/event/PollResultGeneric.hxx	30;"	d
GetObservationZone	src/Engine/Task/ObservationZones/ObservationZoneClient.hpp	/^  ObservationZonePoint &GetObservationZone() {$/;"	f	class:ObservationZoneClient
GetObservationZone	src/Engine/Task/ObservationZones/ObservationZoneClient.hpp	/^  const ObservationZonePoint &GetObservationZone() const {$/;"	f	class:ObservationZoneClient
GetOffset	src/Topography/XShape.hpp	/^  unsigned GetOffset() const {$/;"	f	class:XShape
GetOldest	src/util/Cache.hxx	/^	Item &GetOldest() {$/;"	f	class:Cache
GetOldestIGCFile	src/Logger/IGCFileCleanup.cpp	/^  Path GetOldestIGCFile() const {$/;"	f	class:OldIGCFileFinder
GetOptionalStartPoint	src/Engine/Task/Ordered/OrderedTask.hpp	/^  const OrderedTaskPoint &GetOptionalStartPoint(unsigned i) const {$/;"	f	class:final
GetOptionalStartPointCount	src/Engine/Task/Ordered/OrderedTask.hpp	/^  unsigned GetOptionalStartPointCount() const {$/;"	f	class:final
GetOptionalStartPoints	src/Engine/Task/Ordered/OrderedTask.hpp	/^  ConstTaskPointList GetOptionalStartPoints() const {$/;"	f	class:final
GetOrderedTask	src/Engine/Task/TaskManager.hpp	/^  const OrderedTask &GetOrderedTask() const {$/;"	f	class:TaskManager
GetOrderedTaskSettings	src/Engine/Task/Factory/AbstractTaskFactory.cpp	/^AbstractTaskFactory::GetOrderedTaskSettings() const$/;"	f	class:AbstractTaskFactory
GetOrderedTaskSettings	src/Engine/Task/Ordered/OrderedTask.hpp	/^  const OrderedTaskSettings &GetOrderedTaskSettings() const {$/;"	f	class:final
GetOrderedTaskSettings	src/Task/ProtectedTaskManager.cpp	/^ProtectedTaskManager::GetOrderedTaskSettings() const$/;"	f	class:ProtectedTaskManager
GetOrigin	src/Engine/Route/FlatTriangleFan.hpp	/^  AFlatGeoPoint GetOrigin() const {$/;"	f	class:FlatTriangleFan
GetOrigin	src/Engine/Task/Points/TaskLeg.cpp	/^TaskLeg::GetOrigin() const$/;"	f	class:TaskLeg
GetOverlay	src/MapWindow/MapWindow.hpp	/^  const MapOverlay *GetOverlay() const {$/;"	f	class:MapWindow
GetPageMainIndex	src/Form/TabMenuDisplay.hpp	/^  unsigned GetPageMainIndex(unsigned page) const {$/;"	f	class:final
GetPageNum	src/Form/TabMenuDisplay.cpp	/^TabMenuDisplay::GetPageNum(MenuTabIndex i) const$/;"	f	class:TabMenuDisplay
GetPageParentCaption	src/Form/TabMenuDisplay.hpp	/^  const TCHAR *GetPageParentCaption(unsigned page) const {$/;"	f	class:final
GetPaintCanvas	src/ui/window/DoubleBufferWindow.hpp	/^  Canvas &GetPaintCanvas() {$/;"	f	class:DoubleBufferWindow
GetPairs	src/Engine/Route/AirspaceRoute.cpp	/^AirspaceRoute::GetPairs(const SearchPointVector &spv,$/;"	f	class:AirspaceRoute
GetPanelIndex	src/ActionInterface.cpp	/^GetPanelIndex(const UIState &ui_state)$/;"	f	file:
GetParameter	src/Weather/Rasp/RaspCache.hpp	/^  unsigned GetParameter() const {$/;"	f	class:RaspCache
GetParameter	src/Weather/Rasp/RaspRenderer.hpp	/^  unsigned GetParameter() const {$/;"	f	class:RaspRenderer
GetParent	src/system/Path.cpp	/^Path::GetParent() const$/;"	f	class:Path
GetParent	src/system/Path.hpp	/^  AllocatedPath GetParent() const {$/;"	f	class:AllocatedPath
GetPascal	src/Atmosphere/Pressure.hpp	/^  double GetPascal() const {$/;"	f	class:AtmosphericPressure
GetPath	src/Dialogs/DownloadFilePicker.cpp	/^  AllocatedPath &&GetPath() {$/;"	f	class:final
GetPath	src/Profile/PathValue.cpp	/^ProfileMap::GetPath(const char *key) const$/;"	f	class:ProfileMap
GetPath	src/Profile/Profile.cpp	/^Profile::GetPath()$/;"	f	class:Profile
GetPath	src/Profile/Profile.cpp	/^Profile::GetPath(const char *key)$/;"	f	class:Profile
GetPath	src/Task/TaskStore.cpp	/^TaskStore::GetPath(unsigned index) const$/;"	f	class:TaskStore
GetPath	src/Task/TaskStore.hpp	/^    Path GetPath() const {$/;"	f	struct:TaskStore::Item
GetPathBase	src/Profile/PathValue.cpp	/^ProfileMap::GetPathBase(const char *key) const$/;"	f	class:ProfileMap
GetPathFile	src/Form/DataField/File.cpp	/^FileDataField::GetPathFile() const$/;"	f	class:FileDataField
GetPathIsEqual	src/Profile/PathValue.cpp	/^ProfileMap::GetPathIsEqual(const char *key, Path value) const$/;"	f	class:ProfileMap
GetPathIsEqual	src/Profile/Profile.cpp	/^Profile::GetPathIsEqual(const char *key, Path value)$/;"	f	class:Profile
GetPen	src/Look/ChartLook.hpp	/^  const Pen &GetPen(Style style) const {$/;"	f	struct:ChartLook
GetPenWidth	src/Topography/TopographyFile.hpp	/^  unsigned GetPenWidth() const {$/;"	f	class:TopographyFile
GetPercentScale	src/UISettings.hpp	/^  unsigned GetPercentScale() const {$/;"	f	struct:UISettings
GetPersistentCallback	src/lua/Persistent.cpp	/^GetPersistentCallback(lua_State *L)$/;"	f	file:
GetPilot	src/Device/Driver/FLARM/Device.cpp	/^FlarmDevice::GetPilot(TCHAR *buffer, size_t length, OperationEnvironment &env)$/;"	f	class:FlarmDevice
GetPitch	src/ui/canvas/custom/UncompressedImage.hpp	/^  unsigned GetPitch() const {$/;"	f	class:UncompressedImage
GetPixelTraits	src/ui/canvas/memory/RasterCanvas.hpp	/^  PixelTraits &GetPixelTraits() {$/;"	f	class:RasterCanvas
GetPlaneRegistration	src/Device/Driver/FLARM/Device.cpp	/^FlarmDevice::GetPlaneRegistration(TCHAR *buffer, size_t length,$/;"	f	class:FlarmDevice
GetPlaneType	src/Device/Driver/FLARM/Device.cpp	/^FlarmDevice::GetPlaneType(TCHAR *buffer, size_t length,$/;"	f	class:FlarmDevice
GetPlannedVector	src/Engine/Task/Points/TaskLeg.cpp	/^TaskLeg::GetPlannedVector() const$/;"	f	class:TaskLeg
GetPoint	src/Engine/Route/RoutePolar.hpp	/^  const RoutePolarPoint& GetPoint(const int index) const {$/;"	f	class:RoutePolar
GetPoint	src/Engine/Task/Ordered/OrderedTask.hpp	/^  OrderedTaskPoint &GetPoint(const unsigned i) {$/;"	f	class:final
GetPoint	src/Engine/Task/Ordered/OrderedTask.hpp	/^  const OrderedTaskPoint &GetPoint(const unsigned i) const {$/;"	f	class:final
GetPointDefaultSizes	src/Engine/Task/Factory/AbstractTaskFactory.cpp	/^AbstractTaskFactory::GetPointDefaultSizes(const TaskPointFactoryType type,$/;"	f	class:AbstractTaskFactory
GetPointDefaultSizes	src/Engine/Task/Factory/FAITaskFactory.cpp	/^FAITaskFactory::GetPointDefaultSizes(const TaskPointFactoryType type,$/;"	f	class:FAITaskFactory
GetPointSearchPoints	src/Engine/Task/Ordered/OrderedTask.cpp	/^OrderedTask::GetPointSearchPoints(unsigned tp) const$/;"	f	class:OrderedTask
GetPointer	src/system/OverlappedEvent.hpp	/^  OVERLAPPED *GetPointer() {$/;"	f	class:OverlappedEvent
GetPointerAt	src/util/AllocatedGrid.hxx	/^	const_iterator GetPointerAt(unsigned x, unsigned y) const {$/;"	f	class:AllocatedGrid
GetPointerAt	src/util/AllocatedGrid.hxx	/^	iterator GetPointerAt(unsigned x, unsigned y) {$/;"	f	class:AllocatedGrid
GetPoints	src/Engine/Airspace/AbstractAirspace.hpp	/^  const SearchPointVector &GetPoints() const {$/;"	f	class:AbstractAirspace
GetPoints	src/Engine/Task/Ordered/OrderedTask.hpp	/^  ConstTaskPointList GetPoints() const {$/;"	f	class:final
GetPoints	src/Engine/Trace/Trace.cpp	/^Trace::GetPoints(TracePointVector &v, unsigned min_time,$/;"	f	class:Trace
GetPoints	src/Engine/Trace/Trace.cpp	/^Trace::GetPoints(TracePointVector& iov) const$/;"	f	class:Trace
GetPoints	src/Engine/Trace/Trace.cpp	/^Trace::GetPoints(TracePointerVector &v) const$/;"	f	class:Trace
GetPoints	src/Topography/XShape.hpp	/^  const ShapePoint *GetPoints() const {$/;"	f	class:XShape
GetPoints	src/UIUtil/TrackingGestureManager.hpp	/^  const PointVector &GetPoints() const {$/;"	f	class:TrackingGestureManager
GetPolygonPoints	src/Renderer/AirspacePreviewRenderer.cpp	/^GetPolygonPoints(std::vector<BulkPixelPoint> &pts,$/;"	f	file:
GetPortName	src/Device/Config.cpp	/^DeviceConfig::GetPortName(TCHAR *buffer, size_t max_size) const$/;"	f	class:DeviceConfig
GetPortableColor	src/Look/TrailLook.cpp	/^GetPortableColor(TrailSettings::Type type, short ramp_h)$/;"	f	file:
GetPosition	src/UIUtil/KineticManager.cpp	/^KineticManager::GetPosition()$/;"	f	class:KineticManager
GetPosition	src/io/ZipReader.cpp	/^ZipReader::GetPosition() const$/;"	f	class:ZipReader
GetPosition	src/ui/event/poll/linux/MergeMouse.hpp	/^  PixelPoint GetPosition() const {$/;"	f	class:UI::final
GetPositiveFractional	src/Form/DigitEntry.cpp	/^DigitEntry::GetPositiveFractional() const$/;"	f	class:DigitEntry
GetPositiveInteger	src/Form/DigitEntry.cpp	/^DigitEntry::GetPositiveInteger() const$/;"	f	class:DigitEntry
GetPredictedState	src/Engine/Navigation/Aircraft.cpp	/^AircraftState::GetPredictedState(double in_time) const$/;"	f	class:AircraftState
GetPredictedState	src/Engine/Util/AircraftStateFilter.cpp	/^AircraftStateFilter::GetPredictedState(const double in_time) const$/;"	f	class:AircraftStateFilter
GetPressureFormat	src/Formatter/Units.cpp	/^GetPressureFormat(Unit unit, bool include_unit)$/;"	f
GetPressureName	src/Units/Units.cpp	/^Units::GetPressureName()$/;"	f	class:Units
GetPressureStep	src/Formatter/Units.cpp	/^GetPressureStep(Unit unit)$/;"	f
GetPressureUnit	src/Device/Driver/CAI302/Protocol.hpp	/^    unsigned GetPressureUnit() const {$/;"	f	struct:CAI302::Pilot
GetPressureUnit	src/Profile/UnitsConfig.cpp	/^GetPressureUnit(const ProfileMap &map, const char *key, Unit &value)$/;"	f	file:
GetPrevious	src/Engine/Task/Ordered/Points/OrderedTaskPoint.hpp	/^  OrderedTaskPoint *GetPrevious() {$/;"	f	class:OrderedTaskPoint
GetPrevious	src/Engine/Task/Ordered/Points/OrderedTaskPoint.hpp	/^  const OrderedTaskPoint *GetPrevious() const {$/;"	f	class:OrderedTaskPoint
GetPrimaryDataPath	src/LocalPath.cpp	/^GetPrimaryDataPath()$/;"	f
GetProcAddress	src/ui/canvas/opengl/Function.hpp	/^GetProcAddress(const char *name)$/;"	f	namespace:OpenGL
GetProduct	src/Android/NativeView.hpp	/^  const char *GetProduct() {$/;"	f	class:NativeView
GetProjection	src/Airspace/ProtectedAirspaceWarningManager.cpp	/^ProtectedAirspaceWarningManager::GetProjection() const$/;"	f	class:ProtectedAirspaceWarningManager
GetProjection	src/Engine/Airspace/AirspaceWarningManager.cpp	/^AirspaceWarningManager::GetProjection() const$/;"	f	class:AirspaceWarningManager
GetProjection	src/Engine/Airspace/Airspaces.hpp	/^  const FlatProjection &GetProjection() const {$/;"	f	class:Airspaces
GetProjection	src/Engine/Route/ReachFan.hpp	/^  const FlatProjection &GetProjection() const {$/;"	f	class:ReachFan
GetProjection	src/Engine/Trace/Trace.hpp	/^  const TaskProjection &GetProjection() const {$/;"	f	class:Trace
GetProjection	src/MainWindow.cpp	/^MainWindow::GetProjection() const$/;"	f	class:MainWindow
GetProjection	src/Terrain/RasterMap.hpp	/^  const RasterProjection &GetProjection() const {$/;"	f	class:RasterMap
GetProtectedRoutePlanner	src/Computer/GlideComputer.hpp	/^  const ProtectedRoutePlanner &GetProtectedRoutePlanner() const {$/;"	f	class:GlideComputer
GetProtectedRoutePlanner	src/Computer/RouteComputer.hpp	/^  const ProtectedRoutePlanner &GetProtectedRoutePlanner() const {$/;"	f	class:RouteComputer
GetProtectedRoutePlanner	src/Computer/TaskComputer.hpp	/^  const ProtectedRoutePlanner &GetProtectedRoutePlanner() const {$/;"	f	class:TaskComputer
GetProtectedTaskManager	src/Computer/GlideComputer.hpp	/^  const ProtectedTaskManager &GetProtectedTaskManager() const {$/;"	f	class:GlideComputer
GetProtectedTaskManager	src/Computer/TaskComputer.hpp	/^  const ProtectedTaskManager &GetProtectedTaskManager() const {$/;"	f	class:TaskComputer
GetProtocol	src/net/AddressInfo.hxx	/^	constexpr int GetProtocol() const {$/;"	f	class:AddressInfo
GetPureGlideAltitudeDifference	src/Engine/GlideSolvers/GlideResult.hpp	/^  double GetPureGlideAltitudeDifference(double start_altitude) const {$/;"	f	struct:GlideResult
GetQuantisation	src/Terrain/RasterRenderer.cpp	/^GetQuantisation()$/;"	f	file:
GetRadioText	src/Engine/Airspace/AbstractAirspace.hpp	/^  const tstring &GetRadioText() const {$/;"	f	class:AbstractAirspace
GetRadius	src/Engine/Airspace/AirspaceCircle.hpp	/^  const double &GetRadius() const {$/;"	f	class:final
GetRadius	src/Engine/Task/ObservationZones/CylinderZone.hpp	/^  double GetRadius() const {$/;"	f	class:CylinderZone
GetRadius	src/Gauge/ThermalAssistantRenderer.hpp	/^  unsigned GetRadius() const{$/;"	f	class:ThermalAssistantRenderer
GetRadius	src/MapWindow/TargetMapWindow.cpp	/^GetRadius(const ObservationZonePoint &oz)$/;"	f	file:
GetRadius	src/MapWindow/TargetMapWindow.cpp	/^GetRadius(const OrderedTaskPoint &tp)$/;"	f	file:
GetRandomOZPoint	src/Replay/TaskAccessor.hpp	/^  GeoPoint GetRandomOZPoint(unsigned index, const double noise) const {$/;"	f	class:TaskAccessor
GetRandomPointInSector	src/Engine/Task/ObservationZones/CylinderZone.cpp	/^CylinderZone::GetRandomPointInSector(const double mag) const$/;"	f	class:CylinderZone
GetRandomPointInSector	src/Engine/Task/ObservationZones/ObservationZoneClient.cpp	/^ObservationZoneClient::GetRandomPointInSector(const double mag) const$/;"	f	class:ObservationZoneClient
GetRange	src/Device/Driver/FLARM/Device.cpp	/^FlarmDevice::GetRange(unsigned &range, OperationEnvironment &env)$/;"	f	class:FlarmDevice
GetRange	src/TeamCode/TeamCode.cpp	/^TeamCode::GetRange() const$/;"	f	class:TeamCode
GetRasp	src/DataGlobals.cpp	/^DataGlobals::GetRasp()$/;"	f	class:DataGlobals
GetRasp	src/MapWindow/MapWindow.hpp	/^  const std::shared_ptr<RaspStore> &GetRasp() const {$/;"	f	class:MapWindow
GetReachPolar	src/Engine/Task/TaskManager.hpp	/^  const GlidePolar &GetReachPolar() const {$/;"	f	class:TaskManager
GetRealCoefficients	src/Engine/GlideSolvers/GlidePolar.hpp	/^  PolarCoefficients GetRealCoefficients() const {$/;"	f	class:GlidePolar
GetReceived	src/net/http/ToBuffer.cpp	/^  size_t GetReceived() const {$/;"	f	class:final
GetRecentTime	src/Engine/Trace/Trace.cpp	/^Trace::GetRecentTime(const unsigned t) const$/;"	f	class:Trace
GetRecommendedColumnWidth	src/Form/TabDisplay.cpp	/^TabDisplay::GetRecommendedColumnWidth() const$/;"	f	class:TabDisplay
GetRecommendedHeight	src/Form/TabDisplay.cpp	/^TabButton::GetRecommendedHeight(const DialogLook &look) const$/;"	f	class:TabButton
GetRecommendedRowHeight	src/Form/TabDisplay.cpp	/^TabDisplay::GetRecommendedRowHeight() const$/;"	f	class:TabDisplay
GetRecommendedSize	src/Form/DigitEntry.hpp	/^  PixelSize GetRecommendedSize() const {$/;"	f	class:CoordinateFormat
GetRecommendedWidth	src/Form/TabDisplay.cpp	/^TabButton::GetRecommendedWidth(const DialogLook &look) const$/;"	f	class:TabButton
GetRect	src/PopupMessage.cpp	/^PopupMessage::GetRect() const$/;"	f	class:PopupMessage
GetRect	src/PopupMessage.cpp	/^PopupMessage::GetRect(unsigned width, unsigned height) const$/;"	f	class:PopupMessage
GetRect	src/ui/canvas/fb/TopCanvas.cpp	/^TopCanvas::GetRect() const$/;"	f	class:TopCanvas
GetRect	src/ui/canvas/gdi/Canvas.hpp	/^  PixelRect GetRect() const {$/;"	f	class:Canvas
GetRect	src/ui/canvas/memory/Canvas.hpp	/^  PixelRect GetRect() const {$/;"	f	class:Canvas
GetRect	src/ui/canvas/opengl/Canvas.hpp	/^  PixelRect GetRect() const {$/;"	f	class:Canvas
GetRect	src/ui/canvas/sdl/TopCanvas.cpp	/^TopCanvas::GetRect() const$/;"	f	class:TopCanvas
GetReference	src/Engine/Task/ObservationZones/ObservationZonePoint.hpp	/^  const GeoPoint &GetReference() const {$/;"	f	class:ObservationZonePoint
GetReferenceLocation	src/Engine/Airspace/AirspacePolygon.cpp	/^AirspacePolygon::GetReferenceLocation() const$/;"	f	class:AirspacePolygon
GetReferenceMass	src/Engine/GlideSolvers/GlidePolar.hpp	/^  double GetReferenceMass() const {$/;"	f	class:GlidePolar
GetRegularFileInfo	src/io/FileCache.cpp	/^GetRegularFileInfo(Path path, FileInfo &info)$/;"	f	file:
GetRemaining	src/Dialogs/Task/TargetDialog.cpp	/^  const PixelRect &GetRemaining() const {$/;"	f	class:RowLayout
GetRemainingAltitudeDifference	src/Replay/TaskAccessor.hpp	/^  double GetRemainingAltitudeDifference() const {$/;"	f	class:TaskAccessor
GetRemainingOrZero	src/time/TimeoutClock.hpp	/^  std::chrono::steady_clock::duration GetRemainingOrZero() const {$/;"	f	class:TimeoutClock
GetRemainingSigned	src/time/TimeoutClock.hpp	/^  std::chrono::steady_clock::duration GetRemainingSigned() const {$/;"	f	class:TimeoutClock
GetRemainingSize	src/util/StringBuilder.hxx	/^	constexpr size_type GetRemainingSize() const {$/;"	f	class:StringBuilder
GetRemainingVector	src/Engine/Task/Points/TaskLeg.cpp	/^TaskLeg::GetRemainingVector(const GeoPoint &ref) const$/;"	f	class:TaskLeg
GetRenderableType	src/ui/canvas/egl/TopCanvas.cpp	/^GetRenderableType()$/;"	f	file:
GetRepeat	src/NMEA/VegaSwitchState.hpp	/^  constexpr bool GetRepeat() const {$/;"	f	struct:VegaSwitchState
GetRequiredAltitude	src/Engine/GlideSolvers/GlideResult.hpp	/^  double GetRequiredAltitude() const {$/;"	f	struct:GlideResult
GetRequiredAltitudeWithDrift	src/Engine/GlideSolvers/GlideResult.hpp	/^  double GetRequiredAltitudeWithDrift() const {$/;"	f	struct:GlideResult
GetResizable	src/ui/window/TopWindow.hpp	/^  bool GetResizable() const {$/;"	f	class:UI::TopWindowStyle
GetResult	src/Engine/Contest/ContestStatistics.hpp	/^  const ContestResult &GetResult(const int solution_index = -1) const {$/;"	f	struct:ContestStatistics
GetResult	src/Job/TriStateJob.hpp	/^  TriStateJobResult GetResult() const {$/;"	f	class:final
GetRetrospective	src/Computer/GlideComputer.hpp	/^  const Retrospective &GetRetrospective() const {$/;"	f	class:GlideComputer
GetRight	src/Geo/Flat/FlatBoundingBox.hpp	/^  constexpr int GetRight() const {$/;"	f	struct:FlatBoundingBox
GetRight	src/ui/window/Window.hpp	/^  int GetRight() const {$/;"	f	class:Window
GetRiskMC	src/Engine/GlideSolvers/GlidePolar.cpp	/^GlidePolar::GetRiskMC(double height_fraction, const double riskGamma) const$/;"	f	class:GlidePolar
GetRoutePlanner	src/Computer/RouteComputer.hpp	/^  const RoutePlannerGlue &GetRoutePlanner() const {$/;"	f	class:RouteComputer
GetRow	src/Terrain/HeightMatrix.hpp	/^  const TerrainHeight *GetRow(unsigned y) const {$/;"	f	class:HeightMatrix
GetRowCount	src/Screen/Custom/LargeTextWindow.cpp	/^LargeTextWindow::GetRowCount() const$/;"	f	class:LargeTextWindow
GetRowCount	src/Screen/LargeTextWindow.hpp	/^  unsigned GetRowCount() const {$/;"	f	class:LargeTextWindow
GetRowHeight	src/Form/GridView.hpp	/^  unsigned GetRowHeight() const {$/;"	f	class:GridView
GetSBestLD	src/Engine/GlideSolvers/GlidePolar.hpp	/^  GetSBestLD() const$/;"	f	class:GlidePolar
GetSHA256	src/net/http/ToFile.hpp	/^  const auto &GetSHA256() const {$/;"	f	class:Net::DownloadToFileJob
GetSIU	src/Logger/LoggerEPE.cpp	/^IGCWriter::GetSIU(const GPSState &gps)$/;"	f	class:IGCWriter
GetSMax	src/Engine/GlideSolvers/GlidePolar.hpp	/^  double GetSMax() const {$/;"	f	class:GlidePolar
GetSMin	src/Engine/GlideSolvers/GlidePolar.hpp	/^  double GetSMin() const {$/;"	f	class:GlidePolar
GetSafetyHeight	src/Engine/Route/RoutePolars.hpp	/^  int GetSafetyHeight() const {$/;"	f	class:RoutePolars
GetSafetyPolar	src/Engine/Task/TaskManager.hpp	/^  const GlidePolar &GetSafetyPolar() const {$/;"	f	class:TaskManager
GetSampleRate	src/Audio/ToneSynthesiser.hpp	/^  unsigned GetSampleRate() const {$/;"	f	class:ToneSynthesiser
GetSampledPoints	src/Engine/Task/Points/SampledTaskPoint.hpp	/^  const SearchPointVector &GetSampledPoints() const {$/;"	f	class:SampledTaskPoint
GetScoreExit	src/Engine/Task/Ordered/Points/ASTPoint.hpp	/^  bool GetScoreExit() const {$/;"	f	class:final
GetScoredDistance	src/Engine/Task/Points/TaskLeg.cpp	/^TaskLeg::GetScoredDistance(const GeoPoint &ref) const$/;"	f	class:TaskLeg
GetScrollHeight	src/Form/ScrollBar.hpp	/^  int GetScrollHeight() const {$/;"	f	class:ScrollBar
GetSearchPoints	src/Engine/Task/Ordered/Points/OrderedTaskPoint.cpp	/^OrderedTaskPoint::GetSearchPoints() const$/;"	f	class:OrderedTaskPoint
GetSearchPoints	src/Engine/Task/Points/SampledTaskPoint.cpp	/^SampledTaskPoint::GetSearchPoints() const$/;"	f	class:SampledTaskPoint
GetSecondFont	src/Renderer/TwoTextRowsRenderer.hpp	/^  const Font &GetSecondFont() const {$/;"	f	class:TwoTextRowsRenderer
GetSecondOfDay	src/time/BrokenTime.hpp	/^  unsigned GetSecondOfDay() const {$/;"	f	struct:BrokenTime
GetSecondY	src/Renderer/TwoTextRowsRenderer.hpp	/^  int GetSecondY() const {$/;"	f	class:TwoTextRowsRenderer
GetSectorAngle	src/Engine/Task/ObservationZones/SymmetricSectorZone.hpp	/^  Angle GetSectorAngle() const {$/;"	f	class:SymmetricSectorZone
GetSectorEnd	src/Engine/Task/ObservationZones/SectorZone.hpp	/^  const GeoPoint& GetSectorEnd() const {$/;"	f	class:SectorZone
GetSectorStart	src/Engine/Task/ObservationZones/SectorZone.hpp	/^  const GeoPoint& GetSectorStart() const {$/;"	f	class:SectorZone
GetSelectedAddress	src/Dialogs/Device/ScanBluetoothLeDialog.cpp	/^  const auto &GetSelectedAddress() const {$/;"	f	class:final
GetSelectedAirspace	src/Dialogs/Airspace/dlgAirspaceWarnings.cpp	/^AirspaceWarningListWidget::GetSelectedAirspace() const$/;"	f	class:AirspaceWarningListWidget
GetSelectedPath	src/Dialogs/ProfileListDialog.cpp	/^  Path GetSelectedPath() const {$/;"	f	class:final
GetSensorName	src/Device/Driver/IMI/Protocol/IGC.cpp	/^IMI::GetSensorName(unsigned i)$/;"	f	class:IMI
GetSerial	src/Engine/Airspace/AirspaceWarningManager.hpp	/^  unsigned GetSerial() const {$/;"	f	class:AirspaceWarningManager
GetSerial	src/Engine/Airspace/Airspaces.hpp	/^  const Serial &GetSerial() const {$/;"	f	class:Airspaces
GetSerial	src/Engine/Waypoint/Waypoints.hpp	/^  const Serial &GetSerial() const {$/;"	f	class:Waypoints
GetSerial	src/Terrain/RasterMap.hpp	/^  const Serial &GetSerial() const {$/;"	f	class:RasterMap
GetSerial	src/Terrain/RasterTerrain.hpp	/^  const Serial &GetSerial() const {$/;"	f	class:RasterTerrain
GetSerial	src/Terrain/RasterTileCache.hpp	/^  const Serial &GetSerial() const {$/;"	f	class:RasterTileCache
GetSerial	src/Topography/TopographyFile.hpp	/^  const Serial &GetSerial() const {$/;"	f	class:TopographyFile
GetSerial	src/Topography/TopographyStore.hpp	/^  unsigned GetSerial() const {$/;"	f	class:TopographyStore
GetServer	src/Tracking/LiveTrack24.cpp	/^LiveTrack24::GetServer()$/;"	f	class:LiveTrack24
GetSetting	src/Device/Driver/FLARM/Settings.cpp	/^FlarmDevice::GetSetting(const char *name) const$/;"	f	class:FlarmDevice
GetSetting	src/Device/Driver/Vega/Settings.cpp	/^VegaDevice::GetSetting(const char *name) const$/;"	f	class:VegaDevice
GetSettings	src/Terrain/TerrainRenderer.hpp	/^  const TerrainRendererSettings &GetSettings() const {$/;"	f	class:TerrainRenderer
GetSeverityString	src/FLARM/Error.hpp	/^  const TCHAR *GetSeverityString() const {$/;"	f
GetShape	src/Engine/Airspace/AbstractAirspace.hpp	/^  Shape GetShape() const {$/;"	f	class:AbstractAirspace
GetShape	src/Engine/Task/ObservationZones/ObservationZone.hpp	/^  Shape GetShape() const {$/;"	f	class:ObservationZone
GetShapeEditor	src/Dialogs/Plane/PlanePolarDialog.cpp	/^  PolarShapeEditWidget &GetShapeEditor() {$/;"	f	class:final	file:
GetShell	src/ui/event/poll/Queue.hpp	/^  struct wl_shell *GetShell() {$/;"	f	class:DisplayOrientation::final
GetShell	src/ui/event/poll/WaylandQueue.hpp	/^  struct wl_shell *GetShell() {$/;"	f	class:UI::final
GetShowMenuButtonRect	src/MainWindow.cpp	/^GetShowMenuButtonRect(const PixelRect rc)$/;"	f	file:
GetSinkTone	src/Device/Driver/CAI302/Protocol.hpp	/^    unsigned GetSinkTone() const {$/;"	f	struct:CAI302::Pilot
GetSize	src/Android/NativeView.hpp	/^  PixelSize GetSize() const {$/;"	f	class:NativeView
GetSize	src/Engine/Airspace/Airspaces.cpp	/^Airspaces::GetSize() const$/;"	f	class:Airspaces
GetSize	src/Form/TabDisplay.hpp	/^  unsigned GetSize() const {$/;"	f	class:final
GetSize	src/Hardware/DisplaySize.cpp	/^Display::GetSize(PixelSize fallback)$/;"	f	class:Display
GetSize	src/io/ConvertLineReader.cpp	/^ConvertLineReader::GetSize() const$/;"	f	class:ConvertLineReader
GetSize	src/io/FileLineReader.cpp	/^FileLineReaderA::GetSize() const$/;"	f	class:FileLineReaderA
GetSize	src/io/LineReader.hpp	/^  virtual long GetSize() const {$/;"	f	class:LineReader
GetSize	src/io/ZipLineReader.cpp	/^ZipLineReaderA::GetSize() const$/;"	f	class:ZipLineReaderA
GetSize	src/io/ZipReader.cpp	/^ZipReader::GetSize() const$/;"	f	class:ZipReader
GetSize	src/system/FileUtil.cpp	/^File::GetSize(Path path)$/;"	f	class:File
GetSize	src/ui/canvas/Bitmap.hpp	/^  PixelSize GetSize() const {$/;"	f	class:final
GetSize	src/ui/canvas/Bitmap.hpp	/^  const PixelSize &GetSize() const {$/;"	f	class:final
GetSize	src/ui/canvas/Icon.hpp	/^  const PixelSize &GetSize() const {$/;"	f	class:MaskedIcon
GetSize	src/ui/canvas/custom/TopCanvas.hpp	/^  PixelSize GetSize() const {$/;"	f	class:DisplayOrientation
GetSize	src/ui/canvas/custom/UncompressedImage.hpp	/^  PixelSize GetSize() const {$/;"	f	class:UncompressedImage
GetSize	src/ui/canvas/fb/TopCanvas.cpp	/^GetSize(const struct fb_var_screeninfo &vinfo)$/;"	f	file:
GetSize	src/ui/canvas/gdi/Bitmap.cpp	/^Bitmap::GetSize() const$/;"	f	class:Bitmap
GetSize	src/ui/canvas/gdi/Canvas.hpp	/^  const PixelSize &GetSize() const {$/;"	f	class:Canvas
GetSize	src/ui/canvas/memory/Canvas.hpp	/^  PixelSize GetSize() const {$/;"	f	class:Canvas
GetSize	src/ui/canvas/opengl/Canvas.hpp	/^  PixelSize GetSize() const {$/;"	f	class:Canvas
GetSize	src/util/AllocatedGrid.hxx	/^	constexpr unsigned GetSize() const {$/;"	f	class:AllocatedGrid
GetSkipSteps	src/Topography/TopographyFile.cpp	/^TopographyFile::GetSkipSteps(double map_scale) const$/;"	f	class:TopographyFile
GetSkyLinesData	src/Tracking/TrackingGlue.hpp	/^  const SkyLinesTracking::Data &GetSkyLinesData() const {$/;"	f	class:final
GetSliceCenter	src/Engine/ThermalBand/ThermalBand.cpp	/^ThermalBand::GetSliceCenter(const unsigned index) const$/;"	f	class:ThermalBand
GetSliderHeight	src/Form/ScrollBar.hpp	/^  int GetSliderHeight() const {$/;"	f	class:ScrollBar
GetSmallerDistanceUnit	src/Formatter/Units.cpp	/^GetSmallerDistanceUnit(Unit unit)$/;"	f	file:
GetSnailColorIndex	src/Renderer/TrailRenderer.cpp	/^GetSnailColorIndex(double vario, double min_vario, double max_vario)$/;"	f	file:
GetSolution	src/Engine/Airspace/AirspaceWarning.hpp	/^  const AirspaceInterceptSolution &GetSolution() const {$/;"	f	class:AirspaceWarning
GetSolution	src/Engine/Contest/ContestStatistics.hpp	/^  const ContestTraceVector &GetSolution(const int solution_index = -1) const {$/;"	f	struct:ContestStatistics
GetSolution	src/Engine/Route/RoutePlanner.hpp	/^  const Route &GetSolution() const {$/;"	f	class:RoutePlanner
GetSolution	src/Task/RoutePlannerGlue.hpp	/^  const Route &GetSolution() const {$/;"	f	class:RoutePlannerGlue
GetSource	src/io/ConvertLineReader.hpp	/^  LineReader<char> &GetSource() {$/;"	f	class:ConvertLineReader
GetSouth	src/Geo/GeoBounds.hpp	/^  constexpr Angle GetSouth() const {$/;"	f	class:GeoBounds
GetSouthEast	src/Geo/GeoBounds.hpp	/^  constexpr GeoPoint GetSouthEast() const {$/;"	f	class:GeoBounds
GetSouthWest	src/Geo/GeoBounds.hpp	/^  constexpr GeoPoint GetSouthWest() const {$/;"	f	class:GeoBounds
GetSpacing	src/Engine/ThermalBand/ThermalBand.hpp	/^  double GetSpacing() const {$/;"	f	class:ThermalBand
GetSparkRect	src/InfoBoxes/Content/Trace.cpp	/^GetSparkRect(PixelRect rc)$/;"	f	file:
GetSpeed	src/Engine/Contest/ContestResult.hpp	/^  constexpr double GetSpeed() const {$/;"	f	struct:ContestResult
GetSpeed	src/Engine/Task/Stats/DistanceStat.hpp	/^  double GetSpeed() const {$/;"	f	class:DistanceStat
GetSpeed	src/Engine/Util/AircraftStateFilter.cpp	/^AircraftStateFilter::GetSpeed() const$/;"	f	class:AircraftStateFilter
GetSpeedCommand	src/NMEA/VegaSwitchState.hpp	/^  constexpr bool GetSpeedCommand() const {$/;"	f	struct:VegaSwitchState
GetSpeedIncremental	src/Engine/Task/Stats/DistanceStat.hpp	/^  double GetSpeedIncremental() const {$/;"	f	class:DistanceStat
GetSpeedName	src/Units/Units.cpp	/^Units::GetSpeedName()$/;"	f	class:Units
GetSpeedUnit	src/Device/Driver/CAI302/Protocol.hpp	/^    unsigned GetSpeedUnit() const {$/;"	f	struct:CAI302::Pilot
GetSpeedUnit	src/Profile/UnitsConfig.cpp	/^GetSpeedUnit(const ProfileMap &map, const char *key, const char *legacy_key,$/;"	f	file:
GetSprint	src/Computer/TraceComputer.hpp	/^  const Trace &GetSprint() const {$/;"	f	class:TraceComputer
GetSquaredDistance	src/Math/Line2D.hpp	/^  constexpr product_type GetSquaredDistance() const {$/;"	f	struct:Line2D
GetStandardFontFace	src/Look/StandardFonts.hpp	/^GetStandardFontFace()$/;"	f
GetStandardMonospaceFontFace	src/Look/StandardFonts.hpp	/^GetStandardMonospaceFontFace()$/;"	f
GetStart	src/time/RoughTime.hpp	/^  constexpr const RoughTime &GetStart() const {$/;"	f	class:RoughTimeSpan
GetStartAltitude	src/Engine/GlideSolvers/GlideResult.hpp	/^  double GetStartAltitude() const {$/;"	f	struct:GlideResult
GetStartLocation	src/Replay/TaskAutoPilot.cpp	/^TaskAutoPilot::GetStartLocation(const TaskAccessor& task, bool previous)$/;"	f	class:TaskAutoPilot
GetStartRadial	src/Engine/Task/ObservationZones/SectorZone.hpp	/^  Angle GetStartRadial() const {$/;"	f	class:SectorZone
GetStartTypes	src/Engine/Task/Factory/AbstractTaskFactory.hpp	/^  const LegalPointSet &GetStartTypes() const {$/;"	f	class:AbstractTaskFactory
GetState	src/Audio/SLES/AndroidSimpleBufferQueue.hpp	/^    SLresult GetState(SLAndroidSimpleBufferQueueState *pState) {$/;"	f	class:SLES::AndroidSimpleBufferQueue
GetState	src/Device/Descriptor.cpp	/^DeviceDescriptor::GetState() const$/;"	f	class:DeviceDescriptor
GetState	src/Device/Port/AndroidPort.cpp	/^AndroidPort::GetState() const$/;"	f	class:AndroidPort
GetState	src/Device/Port/DumpPort.cpp	/^DumpPort::GetState() const$/;"	f	class:DumpPort
GetState	src/Device/Port/K6BtPort.cpp	/^K6BtPort::GetState() const$/;"	f	class:K6BtPort
GetState	src/Device/Port/NullPort.cpp	/^NullPort::GetState() const$/;"	f	class:NullPort
GetState	src/Device/Port/SerialPort.cpp	/^SerialPort::GetState() const$/;"	f	class:SerialPort
GetState	src/Device/Port/TCPPort.cpp	/^TCPPort::GetState() const$/;"	f	class:TCPPort
GetState	src/Device/Port/TTYPort.cpp	/^TTYPort::GetState() const$/;"	f	class:TTYPort
GetState	src/Device/Port/UDPPort.cpp	/^UDPPort::GetState() const$/;"	f	class:UDPPort
GetState	src/Engine/Task/Ordered/SmartTaskAdvance.cpp	/^SmartTaskAdvance::GetState() const$/;"	f	class:SmartTaskAdvance
GetState	src/Form/CheckBox.hpp	/^  bool GetState() const {$/;"	f	class:CheckBoxControl
GetState	src/Replay/AircraftSim.hpp	/^  AircraftState& GetState() {$/;"	f	class:AircraftSim
GetState	src/Replay/AircraftSim.hpp	/^  const AircraftState& GetState() const {$/;"	f	class:AircraftSim
GetState	src/lua/Value.hxx	/^	lua_State *GetState() const {$/;"	f	class:Lua::Value
GetStationName	src/Device/Driver/KRT2.cpp	/^KRT2Device::GetStationName(char *station_name, const TCHAR *name)$/;"	f	class:KRT2Device
GetStats	src/Engine/Contest/ContestManager.hpp	/^  const ContestStatistics &GetStats() const {$/;"	f	class:ContestManager
GetStats	src/Engine/Task/TaskManager.cpp	/^TaskManager::GetStats() const$/;"	f	class:TaskManager
GetStealthMode	src/Device/Driver/FLARM/Device.cpp	/^FlarmDevice::GetStealthMode(bool &enabled, OperationEnvironment &env)$/;"	f	class:FlarmDevice
GetStep	src/Form/DataField/Float.hpp	/^  double GetStep() const {$/;"	f	class:final
GetStore	src/Topography/TopographyRenderer.hpp	/^  const TopographyStore &GetStore() const {$/;"	f	class:TopographyRenderer
GetStore	src/Weather/Rasp/RaspCache.hpp	/^  const RaspStore &GetStore() const {$/;"	f	class:RaspCache
GetString	src/Form/DataField/Enum.hpp	/^    const TCHAR *GetString() const {$/;"	f	class:final::Entry
GetSubMenuButton	src/Form/TabMenuDisplay.hpp	/^  const SubMenuButton &GetSubMenuButton(unsigned page) const {$/;"	f	class:final
GetSubMenuButtonSize	src/Form/TabMenuDisplay.hpp	/^  const PixelRect &GetSubMenuButtonSize(unsigned i) const {$/;"	f	class:final
GetSystemService	src/Android/Context.cpp	/^Context::GetSystemService(JNIEnv *env, const char *name)$/;"	f	class:Context
GetSystemService	src/Android/Context.cpp	/^Context::GetSystemService(JNIEnv *env, jstring name)$/;"	f	class:Context
GetSystemSettings	src/Blackboard/SettingsBlackboard.hpp	/^  const SystemSettings &GetSystemSettings() const {$/;"	f	class:SettingsBlackboard
GetSystemSettings	src/Interface.hpp	/^  static inline const SystemSettings &GetSystemSettings() {$/;"	f	namespace:CommonInterface
GetSystemUTCOffset	src/system/Clock.cpp	/^GetSystemUTCOffset()$/;"	f
GetTabLineHeight	src/Form/TabMenuDisplay.cpp	/^GetTabLineHeight()$/;"	f	file:
GetTarget	src/Engine/Task/Ordered/Points/AATPoint.hpp	/^  const GeoPoint &GetTarget() const {$/;"	f	class:final
GetTarget	src/Gauge/FlarmTrafficWindow.hpp	/^  const FlarmTraffic *GetTarget() const {$/;"	f	class:FlarmTrafficWindow
GetTarget	src/Replay/TaskAutoPilot.cpp	/^TaskAutoPilot::GetTarget(const TaskAccessor& task) const$/;"	f	class:TaskAutoPilot
GetTargetHeight	src/Replay/TaskAccessor.hpp	/^  double GetTargetHeight() const {$/;"	f	class:TaskAccessor
GetTargetHeight	src/Replay/TaskAutoPilot.cpp	/^TaskAutoPilot::GetTargetHeight(const TaskAccessor& task) const$/;"	f	class:TaskAutoPilot
GetTargetLocation	src/Engine/Task/Ordered/Points/AATPoint.hpp	/^  const GeoPoint &GetTargetLocation() const {$/;"	f	class:final
GetTargetRangeRadial	src/Engine/Task/Ordered/Points/AATPoint.cpp	/^AATPoint::GetTargetRangeRadial(double oldrange) const$/;"	f	class:AATPoint
GetTask	src/Dialogs/Task/Manager/Internal.hpp	/^  const OrderedTask &GetTask() const {$/;"	f	class:final
GetTask	src/Task/TaskFile.cpp	/^TaskFile::GetTask(Path path, const TaskBehaviour &task_behaviour,$/;"	f	class:TaskFile
GetTask	src/Task/TaskFileIGC.cpp	/^TaskFileIGC::GetTask(const TaskBehaviour &task_behaviour,$/;"	f	class:TaskFileIGC
GetTask	src/Task/TaskFileSeeYou.cpp	/^TaskFileSeeYou::GetTask(const TaskBehaviour &task_behaviour,$/;"	f	class:TaskFileSeeYou
GetTask	src/Task/TaskFileXCSoar.cpp	/^TaskFileXCSoar::GetTask(const TaskBehaviour &task_behaviour,$/;"	f	class:TaskFileXCSoar
GetTask	src/Task/TaskStore.cpp	/^TaskStore::GetTask(unsigned index, const TaskBehaviour &task_behaviour)$/;"	f	class:TaskStore
GetTaskAdvance	src/Engine/Task/Ordered/OrderedTask.hpp	/^  const TaskAdvance &GetTaskAdvance() const {$/;"	f	class:final
GetTaskBehaviour	src/Engine/Task/TaskManager.hpp	/^  const TaskBehaviour &GetTaskBehaviour() const {$/;"	f	class:TaskManager
GetTaskBehaviour	src/Task/MapTaskManager.cpp	/^GetTaskBehaviour()$/;"	f	file:
GetTaskData	src/Dialogs/Task/TargetDialog.cpp	/^TargetWidget::GetTaskData()$/;"	f	class:TargetWidget
GetTaskFactoryType	src/Task/Deserialiser.cpp	/^GetTaskFactoryType(const ConstDataNode &node)$/;"	f	file:
GetTaskFactoryType	src/Task/Serialiser.cpp	/^GetTaskFactoryType(TaskFactoryType type)$/;"	f	file:
GetTaskPoint	src/Engine/Task/Ordered/OrderedTask.hpp	/^  const OrderedTaskPoint &GetTaskPoint(const unsigned index) const {$/;"	f	class:final
GetTaskProjection	src/Engine/Task/Ordered/OrderedTask.hpp	/^  GetTaskProjection() const {$/;"	f	class:final
GetTaskSpeedName	src/Units/Units.cpp	/^Units::GetTaskSpeedName()$/;"	f	class:Units
GetTemperatureName	src/Units/Units.cpp	/^Units::GetTemperatureName()$/;"	f	class:Units
GetTemperatureUnit	src/Device/Driver/CAI302/Protocol.hpp	/^    unsigned GetTemperatureUnit() const {$/;"	f	struct:CAI302::Pilot
GetTemperatureUnit	src/Profile/UnitsConfig.cpp	/^GetTemperatureUnit(const ProfileMap &map, const char *key,$/;"	f	file:
GetTemporaryPath	src/io/FileTransaction.hpp	/^  Path GetTemporaryPath() const {$/;"	f	class:FileTransaction
GetTerrainBase	src/Engine/Route/ReachFan.hpp	/^  int GetTerrainBase() const {$/;"	f	class:ReachFan
GetTerrainBase	src/Engine/Route/RoutePlanner.hpp	/^  int GetTerrainBase() const {$/;"	f	class:RoutePlanner
GetTerrainBase	src/Task/RoutePlannerGlue.cpp	/^RoutePlannerGlue::GetTerrainBase() const$/;"	f	class:RoutePlannerGlue
GetTerrainBaseFallback	src/NMEA/Derived.hpp	/^  double GetTerrainBaseFallback() const {$/;"	f	struct:TerrainInfo
GetTerrainCenter	src/Terrain/RasterTerrain.hpp	/^  GeoPoint GetTerrainCenter() const {$/;"	f	class:RasterTerrain
GetTerrainHeight	src/Terrain/RasterTerrain.hpp	/^  TerrainHeight GetTerrainHeight(const GeoPoint location) const {$/;"	f	class:RasterTerrain
GetTerrainReachProjection	src/Engine/Route/RoutePlanner.hpp	/^  const FlatProjection &GetTerrainReachProjection() const {$/;"	f	class:RoutePlanner
GetTerrainReachProjection	src/Task/ProtectedRoutePlanner.cpp	/^ProtectedRoutePlanner::GetTerrainReachProjection() const$/;"	f	class:ProtectedRoutePlanner
GetTerrainReachProjection	src/Task/RoutePlannerGlue.hpp	/^  const FlatProjection &GetTerrainReachProjection() const {$/;"	f	class:RoutePlannerGlue
GetTextColor	src/Look/DialogLook.hpp	/^    Color GetTextColor(bool is_selected, bool is_focused,$/;"	f	struct:DialogLook::__anon13
GetTextColor	src/ui/canvas/gdi/Canvas.hpp	/^  Color GetTextColor() const {$/;"	f	class:Canvas
GetTextColor	src/ui/canvas/memory/Canvas.hpp	/^  Color GetTextColor() const {$/;"	f	class:Canvas
GetTextColor	src/ui/canvas/opengl/Canvas.hpp	/^  Color GetTextColor() const {$/;"	f	class:Canvas
GetTextN	src/Menu/ButtonLabel.cpp	/^GetTextN(const TCHAR *src, const TCHAR *src_end,$/;"	f	file:
GetThinningLevel	src/Topography/TopographyFile.cpp	/^TopographyFile::GetThinningLevel(double map_scale) const$/;"	f	class:TopographyFile
GetThreshold	src/Engine/Task/Shapes/FAITriangleSettings.cpp	/^FAITriangleSettings::GetThreshold() const$/;"	f	class:FAITriangleSettings
GetTileCache	src/Terrain/RasterMap.hpp	/^  RasterTileCache &GetTileCache() {$/;"	f	class:RasterMap
GetTime	src/Engine/Trace/Point.hpp	/^  unsigned GetTime() const {$/;"	f	class:TracePoint
GetTime	src/Replay/AircraftSim.hpp	/^  double GetTime() const {$/;"	f	class:AircraftSim
GetTime	src/Weather/Rasp/RaspCache.cpp	/^RaspCache::GetTime() const$/;"	f	class:RaspCache
GetTimeElapsed	src/Engine/ThermalBand/ThermalBand.cpp	/^ThermalBand::GetTimeElapsed() const$/;"	f	class:ThermalBand
GetTimeFraction	src/Replay/CatmullRomInterpolator.hpp	/^  GetTimeFraction(const double time, bool limit_range = true) const$/;"	f	class:CatmullRomInterpolator
GetTimeScale	src/Replay/Replay.hpp	/^  double GetTimeScale() const {$/;"	f	class:final
GetTimeValue	src/Form/DigitEntry.cpp	/^DigitEntry::GetTimeValue() const$/;"	f	class:DigitEntry
GetTimeZone	src/Form/DataField/RoughTime.hpp	/^  RoughTimeDelta GetTimeZone() const {$/;"	f	class:final
GetTimeout	src/net/http/Multi.hxx	/^	long GetTimeout() const {$/;"	f	class:CurlMulti
GetTitle	src/InfoBoxes/Data.hpp	/^  const TCHAR *GetTitle() const {$/;"	f	struct:InfoBoxData
GetTitle	src/InfoBoxes/InfoBoxWindow.hpp	/^  const TCHAR* GetTitle() {$/;"	f	class:InfoBoxWindow
GetTitleColor	src/Look/InfoBoxLook.hpp	/^  Color GetTitleColor(int i) const {$/;"	f	struct:InfoBoxLook
GetTop	src/Engine/Airspace/AbstractAirspace.hpp	/^  const AirspaceAltitude &GetTop() const { return altitude_top; }$/;"	f	class:AbstractAirspace
GetTop	src/Geo/Flat/FlatBoundingBox.hpp	/^  constexpr int GetTop() const {$/;"	f	struct:FlatBoundingBox
GetTopAltitude	src/Engine/Airspace/AbstractAirspace.hpp	/^  double GetTopAltitude(const AltitudeState &state) const {$/;"	f	class:AbstractAirspace
GetTopLeft	src/Geo/Flat/FlatBoundingBox.hpp	/^  constexpr FlatGeoPoint GetTopLeft() const {$/;"	f	struct:FlatBoundingBox
GetTopRow	src/ui/canvas/RawBitmap.hpp	/^  RawColor *GetTopRow() {$/;"	f	class:final
GetTotalMass	src/Engine/GlideSolvers/GlidePolar.cpp	/^GlidePolar::GetTotalMass() const$/;"	f	class:GlidePolar
GetTraceComputer	src/Computer/GlideComputer.hpp	/^  const TraceComputer &GetTraceComputer() const {$/;"	f	class:GlideComputer
GetTraceComputer	src/Computer/TaskComputer.hpp	/^  const TraceComputer &GetTraceComputer() const {$/;"	f	class:TaskComputer
GetTravelledVector	src/Engine/Task/Points/TaskLeg.cpp	/^TaskLeg::GetTravelledVector(const GeoPoint &ref) const$/;"	f	class:TaskLeg
GetType	src/Engine/Airspace/AbstractAirspace.hpp	/^  AirspaceClass GetType() const {$/;"	f	class:AbstractAirspace
GetType	src/Engine/Task/Factory/AbstractTaskFactory.cpp	/^AbstractTaskFactory::GetType(const OrderedTaskPoint &point) const$/;"	f	class:AbstractTaskFactory
GetType	src/Engine/Task/Points/TaskPoint.hpp	/^  TaskPointType GetType() const {$/;"	f	class:TaskPoint
GetType	src/Form/DataField/Base.hpp	/^  Type GetType() const {$/;"	f	class:DataField
GetType	src/Terrain/Height.hpp	/^  constexpr TerrainType GetType() const {$/;"	f	class:TerrainHeight
GetType	src/net/AddressInfo.hxx	/^	constexpr int GetType() const {$/;"	f	class:AddressInfo
GetTypeString	src/FLARM/Traffic.cpp	/^FlarmTraffic::GetTypeString(AircraftType type)$/;"	f	class:FlarmTraffic
GetUISettings	src/Blackboard/SettingsBlackboard.hpp	/^  const UISettings &GetUISettings() const {$/;"	f	class:SettingsBlackboard
GetUISettings	src/Interface.hpp	/^  static inline const UISettings &GetUISettings() {$/;"	f	namespace:CommonInterface
GetUIState	src/Interface.hpp	/^  static inline const UIState &GetUIState() {$/;"	f	namespace:CommonInterface
GetUIState	src/MapWindow/MapWindowBlackboard.hpp	/^  const UIState &GetUIState() const {$/;"	f	class:MapWindowBlackboard
GetUIState	src/Menu/ExpandMacros.cpp	/^GetUIState()$/;"	f	file:
GetURI	src/Repository/AvailableFile.hpp	/^  const char *GetURI() const {$/;"	f	struct:AvailableFile
GetUnitBits	src/Device/Driver/CAI302/Protocol.hpp	/^    unsigned GetUnitBits(unsigned bit, unsigned n) const {$/;"	f	struct:CAI302::Pilot
GetUnitName	src/Units/Descriptor.cpp	/^Units::GetUnitName(Unit unit)$/;"	f	class:Units
GetUnsignedValue	src/Dialogs/Device/FLARM/ConfigWidget.cpp	/^GetUnsignedValue(const FlarmDevice &device, const char *name,$/;"	f	file:
GetUnsignedValue	src/Form/DigitEntry.cpp	/^DigitEntry::GetUnsignedValue() const$/;"	f	class:DigitEntry
GetUpperCharacter	src/Form/CharacterButton.cpp	/^CharacterButton::GetUpperCharacter() const$/;"	f	class:CharacterButton
GetUpperRight	src/Geo/Flat/FlatBoundingBox.hpp	/^  constexpr const FlatGeoPoint &GetUpperRight() const {$/;"	f	struct:FlatBoundingBox
GetUserAltitudeUnit	src/Units/Units.cpp	/^Units::GetUserAltitudeUnit()$/;"	f	class:Units
GetUserDistanceUnit	src/Units/Units.cpp	/^Units::GetUserDistanceUnit()$/;"	f	class:Units
GetUserID	src/Tracking/LiveTrack24.cpp	/^LiveTrack24::GetUserID(const TCHAR *username, const TCHAR *password,$/;"	f	class:LiveTrack24
GetUserMassUnit	src/Units/Units.cpp	/^Units::GetUserMassUnit()$/;"	f	class:Units
GetUserPressureFormat	src/Formatter/UserUnits.cpp	/^GetUserPressureFormat(bool include_unit)$/;"	f
GetUserPressureStep	src/Formatter/UserUnits.cpp	/^GetUserPressureStep()$/;"	f
GetUserPressureUnit	src/Units/Units.cpp	/^Units::GetUserPressureUnit()$/;"	f	class:Units
GetUserSpeedUnit	src/Units/Units.cpp	/^Units::GetUserSpeedUnit()$/;"	f	class:Units
GetUserSwitchDown	src/NMEA/VegaSwitchState.hpp	/^  constexpr bool GetUserSwitchDown() const {$/;"	f	struct:VegaSwitchState
GetUserSwitchMiddle	src/NMEA/VegaSwitchState.hpp	/^  constexpr bool GetUserSwitchMiddle() const {$/;"	f	struct:VegaSwitchState
GetUserSwitchUp	src/NMEA/VegaSwitchState.hpp	/^  constexpr bool GetUserSwitchUp() const {$/;"	f	struct:VegaSwitchState
GetUserTaskSpeedUnit	src/Units/Units.cpp	/^Units::GetUserTaskSpeedUnit()$/;"	f	class:Units
GetUserTemperatureUnit	src/Units/Units.cpp	/^Units::GetUserTemperatureUnit()$/;"	f	class:Units
GetUserUnitByGroup	src/Units/Units.cpp	/^Units::GetUserUnitByGroup(UnitGroup group)$/;"	f	class:Units
GetUserVerticalSpeedFormat	src/Formatter/UserUnits.cpp	/^GetUserVerticalSpeedFormat(bool include_unit, bool include_sign)$/;"	f
GetUserVerticalSpeedStep	src/Formatter/UserUnits.cpp	/^GetUserVerticalSpeedStep()$/;"	f
GetUserVerticalSpeedUnit	src/Units/Units.cpp	/^Units::GetUserVerticalSpeedUnit()$/;"	f	class:Units
GetUserWindSpeedUnit	src/Units/Units.cpp	/^Units::GetUserWindSpeedUnit()$/;"	f	class:Units
GetUserWingLoadingUnit	src/Units/Units.cpp	/^Units::GetUserWingLoadingUnit()$/;"	f	class:Units
GetV60InfoBoxManagerConfig	src/Profile/InfoBoxConfig.cpp	/^GetV60InfoBoxManagerConfig(const ProfileMap &map, InfoBoxSettings &settings)$/;"	f	file:
GetV7Setting	src/Device/Driver/LX/Settings.cpp	/^LXDevice::GetV7Setting(const char *name) const$/;"	f	class:LXDevice
GetVBestLD	src/Engine/GlideSolvers/GlidePolar.hpp	/^  double GetVBestLD() const {$/;"	f	class:GlidePolar
GetVMax	src/Engine/GlideSolvers/GlidePolar.hpp	/^  double GetVMax() const {$/;"	f	class:GlidePolar
GetVMin	src/Engine/GlideSolvers/GlidePolar.hpp	/^  double GetVMin() const {$/;"	f	class:GlidePolar
GetVTakeoff	src/Engine/GlideSolvers/GlidePolar.cpp	/^GlidePolar::GetVTakeoff() const$/;"	f	class:GlidePolar
GetVTakeoffFallback	src/Computer/Wind/Computer.cpp	/^GetVTakeoffFallback(const GlidePolar &glide_polar)$/;"	f	file:
GetValidFinishTypes	src/Engine/Task/Factory/AbstractTaskFactory.hpp	/^  const LegalPointSet &GetValidFinishTypes() const {$/;"	f	class:AbstractTaskFactory
GetValidIntermediateTypes	src/Engine/Task/Factory/AbstractTaskFactory.cpp	/^AbstractTaskFactory::GetValidIntermediateTypes(unsigned position) const$/;"	f	class:AbstractTaskFactory
GetValidIntermediateTypes	src/Engine/Task/Factory/AbstractTaskFactory.hpp	/^  const LegalPointSet &GetValidIntermediateTypes() const {$/;"	f	class:AbstractTaskFactory
GetValidStartTypes	src/Engine/Task/Factory/AbstractTaskFactory.hpp	/^  const LegalPointSet &GetValidStartTypes() const {$/;"	f	class:AbstractTaskFactory
GetValidTypes	src/Engine/Task/Factory/AbstractTaskFactory.cpp	/^AbstractTaskFactory::GetValidTypes(unsigned position) const$/;"	f	class:AbstractTaskFactory
GetValue	src/Config/Registry.hpp	/^  bool GetValue(const TCHAR *name, DWORD &value_r) const {$/;"	f	class:RegistryKey
GetValue	src/Config/Registry.hpp	/^  bool GetValue(const TCHAR *name, LPDWORD type_r,$/;"	f	class:RegistryKey
GetValue	src/Config/Registry.hpp	/^  bool GetValue(const TCHAR *name, TCHAR *value, unsigned max_length) const {$/;"	f	class:RegistryKey
GetValue	src/Dialogs/KnobTextEntry.cpp	/^  TCHAR *GetValue() {$/;"	f	class:final
GetValue	src/Dialogs/Plane/PlaneDetailsDialog.cpp	/^  const Plane &GetValue() const {$/;"	f	class:final
GetValue	src/Dialogs/Plane/PlanePolarDialog.cpp	/^  const Plane &GetValue() const {$/;"	f	class:final
GetValue	src/Dialogs/Waypoint/dlgWaypointEdit.cpp	/^  const Waypoint &GetValue() const {$/;"	f	class:final
GetValue	src/Form/DataField/Angle.hpp	/^  Angle GetValue() const {$/;"	f	class:final
GetValue	src/Form/DataField/Enum.cpp	/^DataFieldEnum::GetValue() const$/;"	f	class:DataFieldEnum
GetValue	src/Form/DataField/GeoPoint.hpp	/^  GeoPoint GetValue() const {$/;"	f	class:final
GetValue	src/Form/DataField/RoughTime.hpp	/^  RoughTime GetValue() const {$/;"	f	class:final
GetValue	src/Screen/ProgressBar.hpp	/^  unsigned GetValue() const {$/;"	f	class:ProgressBar
GetValue	src/Terrain/Height.hpp	/^  constexpr int16_t GetValue() const {$/;"	f	class:TerrainHeight
GetValueAndCommentRect	src/InfoBoxes/InfoBoxWindow.hpp	/^  const PixelRect GetValueAndCommentRect() const {$/;"	f	class:InfoBoxWindow
GetValueColor	src/Look/InfoBoxLook.hpp	/^  Color GetValueColor(int i) const {$/;"	f	struct:InfoBoxLook
GetValueFromTeamCode	src/TeamCode/TeamCode.cpp	/^GetValueFromTeamCode(const TCHAR *code, unsigned length)$/;"	f	file:
GetValueOr0	src/Terrain/Height.hpp	/^  constexpr int16_t GetValueOr0() const {$/;"	f	class:TerrainHeight
GetValueRect	src/InfoBoxes/InfoBoxWindow.hpp	/^  const PixelRect GetValueRect() const {$/;"	f	class:InfoBoxWindow
GetVario	src/Engine/Trace/Point.hpp	/^  double GetVario() const {$/;"	f	class:TracePoint
GetVario1Color	src/Look/TrailLook.cpp	/^GetVario1Color(short ramp_h) {$/;"	f	file:
GetVario2Color	src/Look/TrailLook.cpp	/^GetVario2Color(short ramp_h) {$/;"	f	file:
GetVarioScaleNegative	src/FlightStatistics.cpp	/^FlightStatistics::GetVarioScaleNegative() const$/;"	f	class:FlightStatistics
GetVarioScalePositive	src/FlightStatistics.cpp	/^FlightStatistics::GetVarioScalePositive() const$/;"	f	class:FlightStatistics
GetVarioUnit	src/Device/Driver/CAI302/Protocol.hpp	/^    unsigned GetVarioUnit() const {$/;"	f	struct:CAI302::Pilot
GetVector	src/Engine/Airspace/AirspaceSorter.cpp	/^AirspaceSelectInfo::GetVector(const GeoPoint &location,$/;"	f	class:AirspaceSelectInfo
GetVector	src/Math/Line2D.hpp	/^  constexpr Point GetVector() const {$/;"	f	struct:Line2D
GetVector	src/Replay/CatmullRomInterpolator.hpp	/^  GetVector(double _time) const$/;"	f	class:CatmullRomInterpolator
GetVector	src/Waypoint/WaypointList.cpp	/^WaypointListItem::GetVector(const GeoPoint &location) const$/;"	f	class:WaypointListItem
GetVectorPlanned	src/Engine/Task/Points/TaskLeg.hpp	/^  const GeoVector &GetVectorPlanned() const {$/;"	f	class:TaskLeg
GetVectorRemaining	src/Engine/Task/Points/TaskLeg.hpp	/^  const GeoVector &GetVectorRemaining() const {$/;"	f	class:TaskLeg
GetVectorRemaining	src/Engine/Task/Unordered/UnorderedTaskPoint.cpp	/^UnorderedTaskPoint::GetVectorRemaining(const GeoPoint &reference) const$/;"	f	class:UnorderedTaskPoint
GetVectorTravelled	src/Engine/Task/Points/TaskLeg.hpp	/^  const GeoVector &GetVectorTravelled() const {$/;"	f	class:TaskLeg
GetVegaDevice	src/Input/InputEventsVega.cpp	/^GetVegaDevice(DeviceDescriptor &device)$/;"	f	file:
GetVerticalSpeedFormat	src/Formatter/Units.cpp	/^GetVerticalSpeedFormat(Unit unit, bool include_unit, bool include_sign)$/;"	f
GetVerticalSpeedName	src/Units/Units.cpp	/^Units::GetVerticalSpeedName()$/;"	f	class:Units
GetVerticalSpeedStep	src/Formatter/Units.cpp	/^GetVerticalSpeedStep(Unit unit)$/;"	f
GetVerticalSpeedUnit	src/Profile/UnitsConfig.cpp	/^GetVerticalSpeedUnit(const ProfileMap &map, const char *key,$/;"	f	file:
GetVibrator	src/Android/Context.cpp	/^Context::GetVibrator(JNIEnv *env)$/;"	f	class:Context
GetVirtualTime	src/Replay/Replay.hpp	/^  double GetVirtualTime() const {$/;"	f	class:final
GetVisibleCanvas	src/ui/window/DoubleBufferWindow.hpp	/^  const Canvas &GetVisibleCanvas() const {$/;"	f	class:DoubleBufferWindow
GetVisibleLocation	src/Input/InputEventsActions.cpp	/^GetVisibleLocation()$/;"	f	file:
GetVisibleRows	src/Screen/Custom/LargeTextWindow.cpp	/^LargeTextWindow::GetVisibleRows() const$/;"	f	class:LargeTextWindow
GetWarning	src/Engine/Airspace/AirspaceWarningManager.cpp	/^AirspaceWarningManager::GetWarning(const AbstractAirspace &airspace)$/;"	f	class:AirspaceWarningManager
GetWarningManager	src/Renderer/AirspaceLabelRenderer.hpp	/^  const ProtectedAirspaceWarningManager *GetWarningManager() const {$/;"	f	class:AirspaceLabelRenderer
GetWarningManager	src/Renderer/AirspaceRenderer.hpp	/^  const ProtectedAirspaceWarningManager *GetWarningManager() const {$/;"	f	class:AirspaceRenderer
GetWarningPtr	src/Engine/Airspace/AirspaceWarningManager.cpp	/^AirspaceWarningManager::GetWarningPtr(const AbstractAirspace &airspace)$/;"	f	class:AirspaceWarningManager
GetWarningPtr	src/Engine/Airspace/AirspaceWarningManager.hpp	/^  const AirspaceWarning *GetWarningPtr(const AbstractAirspace &airspace) const {$/;"	f	class:AirspaceWarningManager
GetWarningState	src/Engine/Airspace/AirspaceWarning.hpp	/^  State GetWarningState() const {$/;"	f	class:AirspaceWarning
GetWaypoint	src/Device/Declaration.hpp	/^  const Waypoint &GetWaypoint(unsigned i) const {$/;"	f	struct:Declaration
GetWaypoint	src/Engine/Task/Points/TaskWaypoint.hpp	/^  const Waypoint &GetWaypoint() const {$/;"	f	class:TaskWaypoint
GetWaypointIcon	src/Renderer/WaypointIconRenderer.cpp	/^GetWaypointIcon(const WaypointLook &look, const Waypoint &wp,$/;"	f	file:
GetWaypointPtr	src/Engine/Task/Points/TaskWaypoint.hpp	/^  WaypointPtr GetWaypointPtr() const {$/;"	f	class:TaskWaypoint
GetWest	src/Geo/GeoBounds.hpp	/^  constexpr Angle GetWest() const {$/;"	f	class:GeoBounds
GetWidget	src/Dialogs/WidgetDialog.hpp	/^  Widget &GetWidget() {$/;"	f	class:WidgetDialog
GetWidth	src/Android/Bitmap.hpp	/^  static unsigned GetWidth(JNIEnv *env, jobject bitmap) {$/;"	f	class:AndroidBitmap
GetWidth	src/Form/DigitEntry.hpp	/^    constexpr unsigned GetWidth() const {$/;"	f	struct:CoordinateFormat::Column
GetWidth	src/Form/ScrollBar.hpp	/^  int GetWidth() const {$/;"	f	class:ScrollBar
GetWidth	src/Geo/Flat/FlatBoundingBox.hpp	/^  constexpr unsigned GetWidth() const {$/;"	f	struct:FlatBoundingBox
GetWidth	src/Geo/GeoBounds.hpp	/^  Angle GetWidth() const {$/;"	f	class:GeoBounds
GetWidth	src/Terrain/HeightMatrix.hpp	/^  unsigned GetWidth() const {$/;"	f	class:HeightMatrix
GetWidth	src/Terrain/RasterBuffer.hpp	/^  unsigned GetWidth() const {$/;"	f	class:RasterBuffer
GetWidth	src/Terrain/RasterRenderer.hpp	/^  unsigned GetWidth() const {$/;"	f	class:RasterRenderer
GetWidth	src/Terrain/RasterTileCache.hpp	/^  unsigned int GetWidth() const { return width; }$/;"	f	class:RasterTileCache
GetWidth	src/ui/canvas/Bitmap.hpp	/^  unsigned GetWidth() const {$/;"	f	class:final
GetWidth	src/ui/canvas/Pen.hpp	/^  GetWidth() const$/;"	f	class:Pen
GetWidth	src/ui/canvas/RawBitmap.hpp	/^  unsigned GetWidth() const {$/;"	f	class:final
GetWidth	src/ui/canvas/custom/UncompressedImage.hpp	/^  unsigned GetWidth() const {$/;"	f	class:UncompressedImage
GetWidth	src/ui/canvas/fb/TopCanvas.cpp	/^GetWidth(const struct fb_var_screeninfo &vinfo)$/;"	f	file:
GetWidth	src/ui/canvas/gdi/Canvas.hpp	/^  unsigned GetWidth() const {$/;"	f	class:Canvas
GetWidth	src/ui/canvas/memory/Canvas.hpp	/^  unsigned GetWidth() const {$/;"	f	class:Canvas
GetWidth	src/ui/canvas/opengl/Canvas.hpp	/^  unsigned GetWidth() const {$/;"	f	class:Canvas
GetWidth	src/ui/event/shared/RotatePointer.hpp	/^  constexpr unsigned GetWidth() const {$/;"	f	class:UI::RotatePointer
GetWidth	src/util/AllocatedGrid.hxx	/^	constexpr unsigned GetWidth() const {$/;"	f	class:AllocatedGrid
GetWifiToggleCaption	src/Kobo/NetworkDialog.cpp	/^GetWifiToggleCaption()$/;"	f	file:
GetWind	src/Computer/Wind/Store.cpp	/^WindStore::GetWind(double Time, double h, bool &found) const$/;"	f	class:WindStore
GetWindOrZero	src/NMEA/Derived.hpp	/^  SpeedVector GetWindOrZero() const {$/;"	f	struct:DerivedInfo
GetWindSpeedName	src/Units/Units.cpp	/^Units::GetWindSpeedName()$/;"	f	class:Units
GetWindStore	src/Computer/GlideComputer.hpp	/^  const WindStore &GetWindStore() const {$/;"	f	class:GlideComputer
GetWindStore	src/Computer/GlideComputerAirData.hpp	/^  const WindStore &GetWindStore() const {$/;"	f	class:GlideComputerAirData
GetWindStore	src/Computer/Wind/Computer.hpp	/^  const WindStore &GetWindStore() const {$/;"	f	class:WindComputer
GetWingArea	src/Engine/GlideSolvers/GlidePolar.hpp	/^  double GetWingArea() const {$/;"	f	class:GlidePolar
GetWingLoading	src/Engine/GlideSolvers/GlidePolar.cpp	/^GlidePolar::GetWingLoading() const$/;"	f	class:GlidePolar
GetWingLoadingUnit	src/Profile/UnitsConfig.cpp	/^GetWingLoadingUnit(const ProfileMap &map, const char *key, Unit &value)$/;"	f	file:
GetX	src/Engine/Waypoint/Waypoints.hpp	/^    int GetX(const WaypointPtr &wp) const {$/;"	f	struct:Waypoints::WaypointAccessor
GetX	src/Renderer/TwoTextRowsRenderer.hpp	/^  int GetX() const {$/;"	f	class:TwoTextRowsRenderer
GetX	src/ui/event/poll/libinput/LibInputHandler.hpp	/^  unsigned GetX() const {$/;"	f	class:UI::final
GetXAbs	src/Math/KalmanFilter1d.hpp	/^  double GetXAbs() const { return x_abs_; }$/;"	f	class:KalmanFilter1d
GetXAbs	src/Math/SelfTimingKalmanFilter1d.hpp	/^  double GetXAbs() const { return filter_.GetXAbs(); }$/;"	f	class:SelfTimingKalmanFilter1d
GetXDPI	src/Hardware/DisplayDPI.cpp	/^Display::GetXDPI(unsigned custom_dpi)$/;"	f	class:Display
GetXVel	src/Math/KalmanFilter1d.hpp	/^  double GetXVel() const { return x_vel_; }$/;"	f	class:KalmanFilter1d
GetXVel	src/Math/SelfTimingKalmanFilter1d.hpp	/^  double GetXVel() const { return filter_.GetXVel(); }$/;"	f	class:SelfTimingKalmanFilter1d
GetY	src/Engine/Waypoint/Waypoints.hpp	/^    int GetY(const WaypointPtr &wp) const {$/;"	f	struct:Waypoints::WaypointAccessor
GetY	src/ui/event/poll/libinput/LibInputHandler.hpp	/^  unsigned GetY() const {$/;"	f	class:UI::final
GetYDPI	src/Hardware/DisplayDPI.cpp	/^Display::GetYDPI(unsigned custom_dpi)$/;"	f	class:Display
GetZoomDistance	src/Gauge/BigTrafficWidget.cpp	/^FlarmTrafficControl::GetZoomDistance(unsigned zoom)$/;"	f	class:FlarmTrafficControl
GlideAngleGround	src/Engine/GlideSolvers/GlideResult.cpp	/^GlideResult::GlideAngleGround() const$/;"	f	class:GlideResult
GlideComputer	src/Computer/GlideComputer.cpp	/^GlideComputer::GlideComputer(const ComputerSettings &_settings,$/;"	f	class:GlideComputer
GlideComputer	src/Computer/GlideComputer.hpp	/^class GlideComputer : public GlideComputerBlackboard$/;"	c
GlideComputerAirData	src/Computer/GlideComputerAirData.cpp	/^GlideComputerAirData::GlideComputerAirData(const Waypoints &_way_points)$/;"	f	class:GlideComputerAirData
GlideComputerAirData	src/Computer/GlideComputerAirData.hpp	/^class GlideComputerAirData {$/;"	c
GlideComputerBlackboard	src/Computer/GlideComputerBlackboard.hpp	/^class GlideComputerBlackboard:$/;"	c
GlideComputerConfigPanel	src/Dialogs/Settings/Panels/GlideComputerConfigPanel.cpp	/^  GlideComputerConfigPanel()$/;"	f	class:final
GlideComputerEvents	src/Computer/Events.hpp	/^  GlideComputerEvents():enable_team(false) {}$/;"	f	class:final
GlidePolar	src/Engine/GlideSolvers/GlidePolar.cpp	/^GlidePolar::GlidePolar(const double _mc, const double _bugs, const double _ballast)$/;"	f	class:GlidePolar
GlidePolar	src/Engine/GlideSolvers/GlidePolar.hpp	/^class GlidePolar$/;"	c
GlidePolarCaption	src/Renderer/GlidePolarRenderer.cpp	/^GlidePolarCaption(TCHAR *sTmp, const GlidePolar &glide_polar)$/;"	f
GlidePolarSpeedToFly	src/Engine/GlideSolvers/GlidePolar.cpp	/^  GlidePolarSpeedToFly(const GlidePolar &_polar, const double net_sink_rate,$/;"	f	class:final
GlideRatioCalculator	src/Computer/GlideRatioCalculator.hpp	/^class GlideRatioCalculator {$/;"	c
GlideRatioComputer	src/Computer/GlideRatioComputer.hpp	/^class GlideRatioComputer {$/;"	c
GlideResult	src/Engine/GlideSolvers/GlideResult.cpp	/^GlideResult::GlideResult(const GlideState &task, const double V)$/;"	f	class:GlideResult
GlideResult	src/Engine/GlideSolvers/GlideResult.hpp	/^struct GlideResult {$/;"	s
GlideSettings	src/Engine/GlideSolvers/GlideSettings.hpp	/^struct GlideSettings {$/;"	s
GlideSolutionPlanned	src/Engine/Task/Solvers/TaskSolution.cpp	/^TaskSolution::GlideSolutionPlanned(const OrderedTaskPoint &taskpoint,$/;"	f	class:TaskSolution
GlideSolutionRemaining	src/Engine/Task/Solvers/TaskSolution.cpp	/^TaskSolution::GlideSolutionRemaining(const GeoPoint &location,$/;"	f	class:TaskSolution
GlideSolutionRemaining	src/Engine/Task/Solvers/TaskSolution.cpp	/^TaskSolution::GlideSolutionRemaining(const TaskPoint &taskpoint,$/;"	f	class:TaskSolution
GlideSolutionSink	src/Engine/Task/Solvers/TaskSolution.cpp	/^TaskSolution::GlideSolutionSink(const TaskPoint &taskpoint,$/;"	f	class:TaskSolution
GlideSolutionTravelled	src/Engine/Task/Solvers/TaskSolution.cpp	/^TaskSolution::GlideSolutionTravelled(const OrderedTaskPoint &taskpoint,$/;"	f	class:TaskSolution
GlideState	src/Engine/GlideSolvers/GlideState.cpp	/^GlideState::GlideState(const GeoVector &vector, const double htarget,$/;"	f	class:GlideState
GlideState	src/Engine/GlideSolvers/GlideState.hpp	/^struct GlideState {$/;"	s
GliderID	src/Device/Driver/LX/Protocol.hpp	/^    char GliderID[8];$/;"	m	struct:LX::Pilot
GliderLink	src/Android/GliderLink.cpp	/^GliderLink::GliderLink(JNIEnv* env, jobject obj)$/;"	f	class:GliderLink
GliderLink	src/Android/GliderLink.hpp	/^class GliderLink {$/;"	c
GliderLinkData	src/GliderLink/GliderLinkData.hpp	/^struct GliderLinkData {$/;"	s
GliderLinkId	src/GliderLink/GliderLinkId.hpp	/^  GliderLinkId(uint32_t _value):value(_value) {}$/;"	f	class:GliderLinkId
GliderLinkId	src/GliderLink/GliderLinkId.hpp	/^class GliderLinkId {$/;"	c
GliderLinkTraffic	src/GliderLink/Traffic.hpp	/^struct GliderLinkTraffic {$/;"	s
GliderLinkTrafficList	src/GliderLink/List.hpp	/^struct GliderLinkTrafficList {$/;"	s
GliderScreenPosition	src/Dialogs/Settings/Panels/MapDisplayConfigPanel.cpp	/^  GliderScreenPosition,$/;"	e	enum:ControlIndex	file:
GliderScreenPosition	src/Profile/ProfileKeys.cpp	/^const char GliderScreenPosition[] = "GliderScreenPosition";$/;"	m	namespace:ProfileKeys	file:
GliderType	src/Device/Driver/LX/Protocol.hpp	/^    char GliderType[12];$/;"	m	struct:LX::Pilot
GlobalObject	src/java/Object.hxx	/^class GlobalObject : public GlobalRef<jobject> {$/;"	c	namespace:Java
GlobalRef	src/java/Object.hxx	/^		:GlobalRef<jobject>(env, obj) {}$/;"	f	class:Java::GlobalObject
GlobalRef	src/java/Ref.hxx	/^class GlobalRef {$/;"	c	namespace:Java
GlobalSliceAllocator	src/util/SliceAllocator.hxx	/^	GlobalSliceAllocator(const GlobalSliceAllocator<U, size> &) {}$/;"	f	class:GlobalSliceAllocator
GlobalSliceAllocator	src/util/SliceAllocator.hxx	/^class GlobalSliceAllocator {$/;"	c
Glue	src/Tracking/SkyLines/Glue.cpp	/^SkyLinesTracking::Glue::Glue(EventLoop &event_loop,$/;"	f	class:SkyLinesTracking::Glue
Glue	src/Tracking/SkyLines/Glue.hpp	/^class Glue {$/;"	c	namespace:SkyLinesTracking
GlueFlightLogger	src/Logger/GlueFlightLogger.cpp	/^GlueFlightLogger::GlueFlightLogger(LiveBlackboard &_blackboard)$/;"	f	class:GlueFlightLogger
GlueFlightLogger	src/Logger/GlueFlightLogger.hpp	/^class GlueFlightLogger : public FlightLogger, private NullBlackboardListener {$/;"	c
GlueMapWindow	src/MapWindow/GlueMapWindow.cpp	/^GlueMapWindow::GlueMapWindow(const Look &look)$/;"	f	class:GlueMapWindow
GlueMapWindow	src/MapWindow/GlueMapWindow.hpp	/^class GlueMapWindow : public MapWindow {$/;"	c
GmTime	src/time/Convert.cxx	/^GmTime(std::chrono::system_clock::time_point tp)$/;"	f
GotoTask	src/Engine/Task/Unordered/GotoTask.cpp	/^GotoTask::GotoTask(const TaskBehaviour &tb,$/;"	f	class:GotoTask
GradientValid	src/Engine/Util/Gradient.cpp	/^GradientValid(const double d)$/;"	f
GrahamScan	src/Geo/ConvexHull/GrahamScan.cpp	/^GrahamScan::GrahamScan(SearchPointVector& sps, const double sign_tolerance):$/;"	f	class:GrahamScan
GrahamScan	src/Geo/ConvexHull/GrahamScan.hpp	/^class GrahamScan: private NonCopyable$/;"	c
GrayPixelReader	src/ui/canvas/memory/UncompressedImage.hpp	/^struct GrayPixelReader {$/;"	s
Green	src/ui/canvas/PortableColor.hpp	/^  constexpr uint8_t Green() const {$/;"	f	class:BGR8Color
Green	src/ui/canvas/PortableColor.hpp	/^  constexpr uint8_t Green() const {$/;"	f	class:BGRA8Color
Green	src/ui/canvas/PortableColor.hpp	/^  constexpr uint8_t Green() const {$/;"	f	class:RGB8Color
Green	src/ui/canvas/gdi/Color.hpp	/^  uint8_t Green() const$/;"	f	class:Color
Green	src/ui/canvas/memory/Color.hpp	/^  uint8_t Green() const$/;"	f	class:Color
Green	src/ui/canvas/opengl/Color.hpp	/^  Green() const$/;"	f	class:Color
GreyscalePixelTraits	src/ui/canvas/memory/PixelTraits.hpp	/^struct GreyscalePixelTraits {$/;"	s
GreyscaleToRGB565	src/ui/canvas/memory/Export.hpp	/^GreyscaleToRGB565(Luminosity8 luminosity)$/;"	f
GreyscaleToRGB8	src/ui/canvas/memory/Export.hpp	/^GreyscaleToRGB8(Luminosity8 luminosity)$/;"	f
GridLocation	src/Terrain/ScanLine.cpp	/^  GridLocation(const RasterLocation &other,$/;"	f	struct:GridLocation
GridLocation	src/Terrain/ScanLine.cpp	/^struct GridLocation : public RasterLocation {$/;"	s	file:
GridRay	src/Terrain/ScanLine.cpp	/^  GridRay(unsigned _tile_width, unsigned _tile_height,$/;"	f	struct:GridRay
GridRay	src/Terrain/ScanLine.cpp	/^struct GridRay {$/;"	s	file:
GridView	src/Form/GridView.hpp	/^class GridView : public PanelControl {$/;"	c
GroundSpeedComputer	src/Computer/GroundSpeedComputer.hpp	/^  GroundSpeedComputer() {$/;"	f	class:GroundSpeedComputer
GroundSpeedComputer	src/Computer/GroundSpeedComputer.hpp	/^class GroundSpeedComputer {$/;"	c
Grow	src/Geo/Flat/FlatBoundingBox.hpp	/^  FlatBoundingBox &Grow(int delta) {$/;"	f	struct:FlatBoundingBox
Grow	src/ui/canvas/BufferCanvas.cpp	/^BufferCanvas::Grow(PixelSize new_size)$/;"	f	class:BufferCanvas
GrowDiscard	src/util/AllocatedGrid.hxx	/^	void GrowDiscard(unsigned _width, unsigned _height) {$/;"	f	class:AllocatedGrid
GrowPreserveFill	src/util/AllocatedGrid.hxx	/^	void GrowPreserveFill(unsigned _width, unsigned _height,$/;"	f	class:AllocatedGrid
Guard	src/thread/Guard.hpp	/^class Guard {$/;"	c
GunzipReader	src/io/GunzipReader.cxx	/^GunzipReader::GunzipReader(Reader &_next)$/;"	f	class:GunzipReader
HALF	src/Math/FastRotation.hpp	/^  static constexpr int HALF = ONE \/ 2;$/;"	m	class:FastIntegerRotation
HANDICAP	src/Dialogs/Plane/PlaneDetailsDialog.cpp	/^    HANDICAP,$/;"	e	enum:final::Controls	file:
HANGGLIDER	src/MapSettings.hpp	/^  HANGGLIDER,$/;"	m	class:AircraftSymbol
HANGGLIDER_FLEX	src/Tracking/LiveTrack24/Settings.hpp	/^    HANGGLIDER_FLEX = 4,$/;"	m	class:LiveTrack24::Settings::VehicleType
HANGGLIDER_RIGID	src/Tracking/LiveTrack24/Settings.hpp	/^    HANGGLIDER_RIGID = 5,$/;"	m	class:LiveTrack24::Settings::VehicleType
HANGUP	src/event/EpollEvents.hxx	/^	static constexpr unsigned HANGUP = EPOLLHUP;$/;"	m	struct:EpollEvents
HANGUP	src/event/PollEvents.hxx	/^	static constexpr unsigned HANGUP = POLLHUP;$/;"	m	struct:PollEvents
HANGUP	src/event/WinSelectEvents.hxx	/^	static constexpr unsigned HANGUP = 0;$/;"	m	struct:WinSelectEvents
HANG_GLIDER	src/FLARM/Traffic.hpp	/^    HANG_GLIDER = 6,      \/\/!< hang-glider (hard)$/;"	m	class:FlarmTraffic::AircraftType
HASH_SIZE	src/Topography/shapelib/mapstring.c	1437;"	d	file:
HAVE_ALPHA_BLEND	src/ui/canvas/gdi/Features.hpp	37;"	d
HAVE_ALPHA_BLEND	src/ui/canvas/memory/Features.hpp	29;"	d
HAVE_BATTERY	src/Hardware/Battery.hpp	28;"	d
HAVE_BUILTIN_LANGUAGES	src/Language/LanguageGlue.hpp	45;"	d
HAVE_CLIPPING	src/ui/canvas/gdi/Features.hpp	31;"	d
HAVE_CMDLINE_FULLSCREEN	src/CommandLine.hpp	35;"	d
HAVE_CMDLINE_REPLAY	src/CommandLine.hpp	42;"	d
HAVE_CPU_FREQUENCY	src/Hardware/CPU.hpp	28;"	d
HAVE_DOWNLOAD_MANAGER	src/net/http/Features.hpp	30;"	d
HAVE_DPI_DETECTION	src/Hardware/DisplayDPI.hpp	30;"	d
HAVE_DYNAMIC_MAPBUFFER	src/ui/opengl/Features.hpp	49;"	d
HAVE_DYNAMIC_MULTI_DRAW_ARRAYS	src/ui/canvas/opengl/Dynamic.hpp	31;"	d
HAVE_EXT_VOLUME_CONTROLLER	src/Audio/Features.hpp	53;"	d
HAVE_HATCHED_BRUSH	src/ui/canvas/gdi/Features.hpp	33;"	d
HAVE_HIGHDPI_SUPPORT	src/ui/window/sdl/Features.hpp	30;"	d
HAVE_HTTP	src/net/http/Features.hpp	27;"	d
HAVE_INTERNAL_GPS	src/Device/Features.hpp	34;"	d
HAVE_LIVETRACK24	src/Tracking/Features.hpp	32;"	d
HAVE_LRINT	src/Topography/shapelib/mapserver-config.h	23;"	d
HAVE_LRINTF	src/Topography/shapelib/mapserver-config.h	22;"	d
HAVE_MULTI_TOUCH	src/ui/window/android/Features.hpp	27;"	d
HAVE_MULTI_TOUCH	src/ui/window/sdl/Features.hpp	27;"	d
HAVE_NATIVE_GETTEXT	src/Language/LanguageGlue.hpp	41;"	d
HAVE_NET_STATE	src/net/State.hpp	28;"	d
HAVE_NET_STATE_ROAMING	src/net/State.hpp	29;"	d
HAVE_NOAA	src/Weather/Features.hpp	30;"	d
HAVE_OES_DRAW_TEXTURE	src/ui/opengl/Features.hpp	39;"	d
HAVE_OES_MAPBUFFER	src/ui/opengl/Features.hpp	45;"	d
HAVE_O_TMPFILE	src/io/FileOutputStream.hxx	54;"	d
HAVE_PCMET	src/Weather/Features.hpp	31;"	d
HAVE_PCM_MIXER	src/Audio/Features.hpp	38;"	d
HAVE_PCM_PLAYER	src/Audio/Features.hpp	34;"	d
HAVE_PTHREAD_SETNAME_NP	src/thread/Name.hpp	30;"	d
HAVE_PTHREAD_SETNAME_NP	src/thread/Name.hpp	35;"	d
HAVE_RUN_FILE	src/system/RunFile.hpp	31;"	d
HAVE_SHOW_MENU_BUTTON	src/MainWindow.hpp	38;"	d
HAVE_SKYLINES_TRACKING	src/Tracking/SkyLines/Features.hpp	27;"	d
HAVE_STRCASECMP	src/Topography/shapelib/mapserver-config.h	9;"	d
HAVE_STRCASESTR	src/Topography/shapelib/mapserver-config.h	10;"	d
HAVE_STRDUP	src/Topography/shapelib/mapserver-config.h	11;"	d
HAVE_STRLCAT	src/Topography/shapelib/mapserver-config.h	14;"	d
HAVE_STRLCPY	src/Topography/shapelib/mapserver-config.h	15;"	d
HAVE_STRLEN	src/Topography/shapelib/mapserver-config.h	18;"	d
HAVE_STRNCASECMP	src/Topography/shapelib/mapserver-config.h	19;"	d
HAVE_STRRSTR	src/Topography/shapelib/mapserver-config.h	8;"	d
HAVE_SYNC_FETCH_AND_ADD	src/Topography/shapelib/mapserver-config.h	24;"	d
HAVE_TCP	src/net/Features.hxx	27;"	d
HAVE_TEXT_CACHE	src/ui/canvas/memory/Features.hpp	27;"	d
HAVE_TEXT_CACHE	src/ui/opengl/Features.hpp	31;"	d
HAVE_THREADED_EVENT_LOOP	src/event/Features.h	9;"	d
HAVE_TRACKING	src/Tracking/Features.hpp	36;"	d
HAVE_UN	src/net/Features.hxx	30;"	d
HAVE_VIBRATOR	src/Hardware/Vibrator.hpp	36;"	d
HAVE_VOLUME_CONTROLLER	src/Audio/Features.hpp	44;"	d
HAVE_VSNPRINTF	src/Topography/shapelib/mapserver-config.h	20;"	d
HDM	src/Device/Parser.cpp	/^NMEAParser::HDM(NMEAInputLine &line, NMEAInfo &info)$/;"	f	class:NMEAParser
HEADER	src/Device/Driver/Volkslogger/dbbconv.h	/^  struct HEADER {$/;"	s	class:DBB
HEADERS	src/net/http/Request.hxx	/^		HEADERS,$/;"	m	class:final::State
HEADING_UP	src/MapSettings.hpp	/^  HEADING_UP,$/;"	m	class:MapOrientation
HECTOPASCAL	src/Units/Unit.hpp	/^  HECTOPASCAL,$/;"	m	class:Unit
HEIGHT_STEP	src/Atmosphere/CuSonde.hpp	/^  static constexpr unsigned HEIGHT_STEP = 100;$/;"	m	class:CuSonde
HELICOPTER	src/FLARM/Traffic.hpp	/^    HELICOPTER = 3,       \/\/!< helicopter \/ rotorcraft$/;"	m	class:FlarmTraffic::AircraftType
HEX_STRING_HPP	src/util/HexString.hpp	25;"	d
HGAIN	src/Terrain/jasper/jpc/jpc_qmfb.c	1329;"	d	file:
HIGH	src/Hardware/Battery.hpp	/^      HIGH,$/;"	e	enum:Power::Battery::batterystatus
HIKE	src/Tracking/LiveTrack24.hpp	/^  HIKE = 16400,$/;"	m	class:LiveTrack24::VehicleType
HINT1	src/zzip/__debug.h	46;"	d
HINT2	src/zzip/__debug.h	47;"	d
HINT3	src/zzip/__debug.h	48;"	d
HINT4	src/zzip/__debug.h	49;"	d
HINT5	src/zzip/__debug.h	50;"	d
HINT6	src/zzip/__debug.h	51;"	d
HLine	src/Form/HLine.hpp	/^  HLine(const DialogLook &_look) {}$/;"	f	class:HLine
HLine	src/Form/HLine.hpp	/^  HLine(const DialogLook &_look):look(_look) {}$/;"	f	class:HLine
HLine	src/Form/HLine.hpp	/^class HLine : public PaintWindow {$/;"	c
HOME	src/Engine/Task/TaskBehaviour.hpp	/^  HOME,$/;"	m	class:AbortTaskMode
HORIZON	src/PageSettings.hpp	/^    HORIZON,$/;"	m	class:PageLayout::Main
HORIZONTAL	src/Widget/TabWidget.hpp	/^    HORIZONTAL,$/;"	m	class:TabWidget::Orientation
HORIZONTAL_SPEED	src/Units/Group.hpp	/^  HORIZONTAL_SPEED,$/;"	m	class:UnitGroup
HORIZON_LOOK_HPP	src/Look/HorizonLook.hpp	25;"	d
HORIZON_RENDERER_HPP	src/Renderer/HorizonRenderer.hpp	25;"	d
HOT_AIR_BALLOON	src/Tracking/LiveTrack24.hpp	/^  HOT_AIR_BALLOON = 128,$/;"	m	class:LiveTrack24::VehicleType
HOT_AIR_BALLOON	src/Tracking/LiveTrack24/Settings.hpp	/^    HOT_AIR_BALLOON = 3,$/;"	m	class:LiveTrack24::Settings::VehicleType
HOUR	src/Form/DigitEntry.hpp	/^      HOUR, \/\/ i.e. DIGIT24$/;"	m	class:CoordinateFormat::Column::Type
HWColor	src/ui/canvas/gdi/Color.hpp	/^  constexpr HWColor():value(0) {}$/;"	f	class:HWColor
HWColor	src/ui/canvas/gdi/Color.hpp	/^  explicit constexpr HWColor(COLORREF c):value(c) {}$/;"	f	class:HWColor
HWColor	src/ui/canvas/gdi/Color.hpp	/^class HWColor {$/;"	c
Half	src/Geo/Flat/FlatPoint.hpp	/^  FlatPoint Half() const {$/;"	f	struct:FlatPoint
Half	src/Math/Angle.hpp	/^  Angle Half() const {$/;"	f	class:Angle
HalfAngle	src/Math/Angle.cpp	/^Angle::HalfAngle(const Angle end) const$/;"	f	class:Angle
HalfCircle	src/Math/Angle.hpp	/^  static Angle HalfCircle() {$/;"	f	class:Angle
Handicap	src/Profile/ProfileKeys.cpp	/^const char Handicap[] = "Handicap";$/;"	m	namespace:ProfileKeys	file:
HandleEvent	src/ui/event/poll/X11Queue.cpp	/^X11EventQueue::HandleEvent(_XEvent &event)$/;"	f	class:UI::X11EventQueue
HandleEvent	src/ui/event/poll/libinput/LibInputHandler.cpp	/^LibInputHandler::HandleEvent(struct libinput_event *li_event)$/;"	f	class:UI::LibInputHandler
HandleExtConfig	src/Device/Driver/LX/Convert.cpp	/^HandleExtConfig(BufferedOutputStream &os, const struct LXN::ExtConfig &packet,$/;"	f	file:
HandleFlightLine	src/Device/Driver/LX/NanoLogger.cpp	/^HandleFlightLine(const char *_line, BufferedOutputStream &os,$/;"	f	file:
HandleKey	src/InfoBoxes/Content/Base.cpp	/^InfoBoxContent::HandleKey(const InfoBoxKeyCodes keycode)$/;"	f	class:InfoBoxContent
HandleKey	src/InfoBoxes/Content/Direction.cpp	/^InfoBoxContentTrack::HandleKey(const InfoBoxKeyCodes keycode)$/;"	f	class:InfoBoxContentTrack
HandleKey	src/InfoBoxes/Content/Speed.cpp	/^InfoBoxContentSpeedGround::HandleKey(const InfoBoxKeyCodes keycode)$/;"	f	class:InfoBoxContentSpeedGround
HandleKey	src/InfoBoxes/Content/Team.cpp	/^InfoBoxContentTeamCode::HandleKey(const InfoBoxKeyCodes keycode)$/;"	f	class:InfoBoxContentTeamCode
HandleKey	src/InfoBoxes/Content/Weather.cpp	/^InfoBoxContentTemperatureForecast::HandleKey(const InfoBoxKeyCodes keycode)$/;"	f	class:InfoBoxContentTemperatureForecast
HandleKey	src/InfoBoxes/InfoBoxWindow.cpp	/^InfoBoxWindow::HandleKey(InfoBoxContent::InfoBoxKeyCodes keycode)$/;"	f	class:InfoBoxWindow
HandleMessages	src/ui/event/windows/Queue.cpp	/^HandleMessages(UINT wMsgFilterMin, UINT wMsgFilterMax)$/;"	f	namespace:UI
HandlePaintMessages	src/ui/event/windows/Queue.cpp	/^EventQueue::HandlePaintMessages()$/;"	f	class:UI::EventQueue
HandlePendingEvents	src/ui/event/poll/libinput/LibInputHandler.cpp	/^LibInputHandler::HandlePendingEvents()$/;"	f	class:UI::LibInputHandler
HandlePosition	src/Device/Driver/LX/Convert.cpp	/^HandlePosition(BufferedOutputStream &os, Context &context,$/;"	f	file:
HandleSTXCommand	src/Device/Driver/KRT2.cpp	/^KRT2Device::HandleSTXCommand(const struct stx_msg * msg, struct NMEAInfo & info)$/;"	f	class:KRT2Device
Handler	src/Tracking/SkyLines/Handler.hpp	/^class Handler {$/;"	c	namespace:SkyLinesTracking
Handler	src/event/net/cares/Handler.hxx	/^class Handler {$/;"	c	namespace:Cares
Handshake	src/Device/Driver/Volkslogger/Protocol.cpp	/^Volkslogger::Handshake(Port &port, OperationEnvironment &env,$/;"	f	class:Volkslogger
HapticFeedback	src/Dialogs/Settings/Panels/InterfaceConfigPanel.cpp	/^  HapticFeedback$/;"	e	enum:ControlIndex	file:
HapticFeedback	src/Profile/ProfileKeys.cpp	/^const char HapticFeedback[] = "HapticFeedback";$/;"	m	namespace:ProfileKeys	file:
HapticFeedback	src/UISettings.hpp	/^  enum class HapticFeedback : uint8_t {$/;"	c	struct:UISettings
HasAlarm	src/FLARM/Traffic.hpp	/^  bool HasAlarm() const {$/;"	f	class:FlarmTraffic::AircraftType
HasBallast	src/Engine/GlideSolvers/GlidePolar.hpp	/^  bool HasBallast() const {$/;"	f	class:GlidePolar
HasBegun	src/time/RoughTime.hpp	/^  constexpr bool HasBegun(RoughTime now) const {$/;"	f	class:RoughTimeSpan
HasChildren	src/XML/Node.hpp	/^    bool HasChildren() const {$/;"	f	struct:XMLNode::Data
HasColors	src/Asset.hpp	/^HasColors()$/;"	f
HasCursorKeys	src/Asset.hpp	/^HasCursorKeys()$/;"	f
HasDetails	src/Dialogs/MapItemListDialog.cpp	/^HasDetails(const MapItem &item)$/;"	f	file:
HasEPaper	src/Asset.hpp	/^HasEPaper()$/;"	f
HasElevation	src/MapWindow/Items/MapItem.hpp	/^  bool HasElevation() const {$/;"	f	struct:ArrivalAltitudeMapItem
HasElevation	src/MapWindow/Items/MapItem.hpp	/^  bool HasElevation() const {$/;"	f	struct:LocationMapItem
HasEnded	src/time/RoughTime.hpp	/^  constexpr bool HasEnded(RoughTime now) const {$/;"	f	class:RoughTimeSpan
HasEntered	src/Engine/Task/Points/ScoredTaskPoint.hpp	/^  bool HasEntered() const {$/;"	f	class:ScoredTaskPoint
HasEntered	src/Replay/TaskAccessor.hpp	/^  bool HasEntered(unsigned index) const {$/;"	f	class:TaskAccessor
HasExited	src/Engine/Task/Points/ScoredTaskPoint.hpp	/^  bool HasExited() const {$/;"	f	class:ScoredTaskPoint
HasExpired	src/time/TimeoutClock.hpp	/^  bool HasExpired() const {$/;"	f	class:TimeoutClock
HasFailed	src/Device/Port/TTYEnumerator.hpp	/^  bool HasFailed() const {$/;"	f	class:TTYEnumerator
HasFinish	src/Engine/Task/Ordered/OrderedTask.hpp	/^  bool HasFinish() const {$/;"	f	class:final
HasFinished	src/Job/Async.hpp	/^  bool HasFinished() const {$/;"	f	class:final
HasFinished	src/Replay/TaskAutoPilot.cpp	/^TaskAutoPilot::HasFinished(const TaskAccessor &task) const$/;"	f	class:TaskAutoPilot
HasHandler	src/lua/InputEvent.cpp	/^bool LuaEventRegistry<T>::HasHandler(T event) const {$/;"	f	class:LuaEventRegistry
HasHash	src/Repository/AvailableFile.hpp	/^  bool HasHash() const {$/;"	f	struct:AvailableFile
HasIOIOLib	src/Asset.hpp	/^HasIOIOLib()$/;"	f
HasKeyboard	src/Asset.cpp	/^HasKeyboard()$/;"	f
HasKeyboard	src/Asset.hpp	/^HasKeyboard()$/;"	f
HasKeyboard	src/ui/event/poll/InputQueue.hpp	/^  bool HasKeyboard() const {$/;"	f	class:DisplayOrientation::final
HasKeyboard	src/ui/event/poll/Queue.hpp	/^  bool HasKeyboard() const {$/;"	f	class:DisplayOrientation::final
HasKeyboard	src/ui/event/poll/libinput/LibInputHandler.hpp	/^  bool HasKeyboard() const {$/;"	f	class:UI::final
HasLe	src/Android/BluetoothHelper.cpp	/^BluetoothHelper::HasLe(JNIEnv *env)$/;"	f	class:BluetoothHelper
HasLittleMemory	src/Asset.hpp	/^HasLittleMemory()$/;"	f
HasName	src/FLARM/Traffic.hpp	/^  bool HasName() const {$/;"	f	class:FlarmTraffic::AircraftType
HasName	src/GliderLink/Traffic.hpp	/^  bool HasName() const {$/;"	f	struct:GliderLinkTraffic
HasNext	src/Weather/NOAAFormatter.cpp	/^  bool HasNext() const {$/;"	f	class:NOAALineSplitter
HasOptionalStarts	src/Engine/Task/Ordered/OrderedTask.hpp	/^  bool HasOptionalStarts() const {$/;"	f	class:final
HasPassThrough	src/Device/Driver.hpp	/^  bool HasPassThrough() const {$/;"	f	struct:DeviceRegister
HasPointer	src/Asset.cpp	/^HasPointer()$/;"	f
HasPointer	src/Asset.hpp	/^HasPointer()$/;"	f
HasPointer	src/ui/event/poll/InputQueue.hpp	/^  bool HasPointer() const {$/;"	f	class:DisplayOrientation::final
HasPointer	src/ui/event/poll/Queue.hpp	/^  bool HasPointer() const {$/;"	f	class:DisplayOrientation::final
HasPointer	src/ui/event/poll/libinput/LibInputHandler.hpp	/^  bool HasPointer() const {$/;"	f	class:UI::final
HasPointer	src/ui/event/poll/linux/MergeMouse.hpp	/^  bool HasPointer() const {$/;"	f	class:UI::final
HasPointerAssociations	src/lua/Associate.cpp	/^Lua::HasPointerAssociations(lua_State *L, const char *table,$/;"	f	class:Lua
HasPoints	src/UIUtil/TrackingGestureManager.hpp	/^  bool HasPoints() const {$/;"	f	class:TrackingGestureManager
HasPortFailed	src/Device/Descriptor.hpp	/^  bool HasPortFailed() const {$/;"	f	class:final
HasSampled	src/Engine/Task/Points/SampledTaskPoint.hpp	/^  bool HasSampled() const {$/;"	f	class:SampledTaskPoint
HasSession	src/Tracking/TrackingGlue.hpp	/^    bool HasSession() {$/;"	f	struct:final::LiveTrack24State
HasStart	src/Engine/Task/Ordered/OrderedTask.hpp	/^  bool HasStart() const {$/;"	f	class:final
HasTarget	src/Engine/Task/Points/TaskPoint.hpp	/^  bool HasTarget() const {$/;"	f	class:TaskPoint
HasTarget	src/Replay/TaskAutoPilot.cpp	/^TaskAutoPilot::HasTarget(const TaskAccessor& task) const$/;"	f	class:TaskAutoPilot
HasTargets	src/Engine/Task/Ordered/OrderedTask.cpp	/^OrderedTask::HasTargets() const$/;"	f	class:OrderedTask
HasTimeout	src/Device/Driver.hpp	/^  bool HasTimeout() const {$/;"	f	struct:DeviceRegister
HasTouchScreen	src/Asset.cpp	/^HasTouchScreen()$/;"	f
HasTouchScreen	src/Asset.hpp	/^HasTouchScreen()$/;"	f
HasTouchScreen	src/ui/event/poll/InputQueue.hpp	/^  bool HasTouchScreen() const {$/;"	f	class:DisplayOrientation::final
HasTouchScreen	src/ui/event/poll/Queue.hpp	/^  bool HasTouchScreen() const {$/;"	f	class:DisplayOrientation::final
HasTouchScreen	src/ui/event/poll/libinput/LibInputHandler.hpp	/^  bool HasTouchScreen() const {$/;"	f	class:UI::final
HasVario	src/InfoBoxes/InfoBoxLayout.hpp	/^    bool HasVario() const {$/;"	f	struct:InfoBoxLayout::Layout
HasWarning	src/Dialogs/Airspace/dlgAirspaceWarnings.cpp	/^AirspaceWarningListWidget::HasWarning() const$/;"	f	class:AirspaceWarningListWidget
Hash	src/Engine/PathSolvers/NavDijkstra.hpp	/^    struct Hash {$/;"	s	struct:NavDijkstra::DijkstraMap
Hash	src/ui/canvas/custom/Cache.cpp	/^  struct Hash {$/;"	s	struct:TextCacheKey	file:
HaveAudioVario	src/Audio/VarioGlue.cpp	/^AudioVarioGlue::HaveAudioVario()$/;"	f	class:AudioVarioGlue
HaveBottomWidget	src/MainWindow.hpp	/^  bool HaveBottomWidget() const {$/;"	f	class:MainWindow
HaveClipping	src/Screen/Features.hpp	/^HaveClipping()$/;"	f
HaveExtVolumeController	src/Audio/Features.hpp	/^HaveExtVolumeController()$/;"	f
HaveGLES	src/ui/opengl/Features.hpp	/^HaveGLES()$/;"	f
HaveGLES2	src/ui/opengl/Features.hpp	/^HaveGLES2()$/;"	f
HavePCMMixer	src/Audio/Features.hpp	/^HavePCMMixer()$/;"	f
HavePCMPlayer	src/Audio/Features.hpp	/^HavePCMPlayer()$/;"	f
HaveVibrator	src/Hardware/Vibrator.cpp	/^HaveVibrator()$/;"	f
HaveVibrator	src/Hardware/Vibrator.hpp	/^HaveVibrator()$/;"	f
HaveVolumeController	src/Audio/Features.hpp	/^HaveVolumeController()$/;"	f
HeadWindSimplified	src/InfoBoxes/Content/Type.hpp	/^    HeadWindSimplified,$/;"	e	enum:InfoBoxFactory::Type
Header	src/Tracking/SkyLines/Protocol.hpp	/^struct Header {$/;"	s	namespace:SkyLinesTracking
HectoPascal	src/Atmosphere/Pressure.hpp	/^  AtmosphericPressure HectoPascal(double value) {$/;"	f	class:AtmosphericPressure
HeightMatrix	src/Terrain/HeightMatrix.hpp	/^  HeightMatrix():width(0), height(0) {}$/;"	f	class:HeightMatrix
HeightMatrix	src/Terrain/HeightMatrix.hpp	/^class HeightMatrix {$/;"	c
HeightToAngle	src/Terrain/RasterProjection.hpp	/^  constexpr Angle HeightToAngle(double pixels) const {$/;"	f	class:RasterProjection
HelpDialog	src/Dialogs/HelpDialog.cpp	/^HelpDialog(const TCHAR *Caption, const TCHAR *HelpText)$/;"	f
HexDump	src/HexDump.hpp	/^HexDump(const char *prefix, const void *_data, size_t length)$/;"	f
HexDump	src/HexDump.hpp	/^HexDump(const void *data, size_t length)$/;"	f
HexDumpLine	src/HexDump.hpp	/^HexDumpLine(const char *prefix, unsigned offset,$/;"	f
Hide	src/Dialogs/Airspace/dlgAirspaceWarnings.cpp	/^Hide()$/;"	f	file:
Hide	src/InfoBoxes/InfoBoxManager.cpp	/^InfoBoxManager::Hide()$/;"	f	class:InfoBoxManager
HideAll	src/Form/ButtonPanel.cpp	/^ButtonPanel::HideAll()$/;"	f	class:ButtonPanel
HideButton	src/Menu/MenuBar.cpp	/^MenuBar::HideButton(unsigned i)$/;"	f	class:MenuBar
HideMenu	src/Input/InputEvents.cpp	/^InputEvents::HideMenu()$/;"	f	class:InputEvents
HideWidget	src/Monitor/AirspaceWarningMonitor.cpp	/^AirspaceWarningMonitor::HideWidget()$/;"	f	class:AirspaceWarningMonitor
HighScore	src/Dialogs/DialogSettings.hpp	/^    HighScore,$/;"	m	class:DialogSettings::TextInputStyle
Highlight	src/ui/canvas/gdi/Color.hpp	/^  Highlight() const$/;"	f	class:Color
Highlight	src/ui/canvas/memory/Color.hpp	/^  Highlight() const$/;"	f	class:Color
Highlight	src/ui/canvas/opengl/Color.hpp	/^  Highlight() const$/;"	f	class:Color
HighlightNext	src/Form/TabMenuDisplay.cpp	/^TabMenuDisplay::HighlightNext()$/;"	f	class:TabMenuDisplay
HighlightPrevious	src/Form/TabMenuDisplay.cpp	/^TabMenuDisplay::HighlightPrevious()$/;"	f	class:TabMenuDisplay
Histogram	src/Math/Histogram.hpp	/^class Histogram$/;"	c
HistoryItem	src/Computer/ClimbAverageCalculator.hpp	/^    constexpr HistoryItem(double _time, double _altitude)$/;"	f	struct:ClimbAverageCalculator::HistoryItem
HistoryItem	src/Computer/ClimbAverageCalculator.hpp	/^  struct HistoryItem$/;"	s	class:ClimbAverageCalculator
HomeLocation	src/Profile/ProfileKeys.cpp	/^const char HomeLocation[] = "HomeLocation";$/;"	m	namespace:ProfileKeys	file:
HomeWaypoint	src/Profile/ProfileKeys.cpp	/^const char HomeWaypoint[] = "HomeWaypoint";$/;"	m	namespace:ProfileKeys	file:
HookDetection	src/util/IntrusiveList.hxx	/^	struct HookDetection {$/;"	s	class:IntrusiveList
HorizonLook	src/Look/HorizonLook.hpp	/^struct HorizonLook {$/;"	s
HorizonRenderer	src/Renderer/HorizonRenderer.hpp	/^namespace HorizonRenderer$/;"	n
HorizonWindow	src/HorizonWidget.cpp	/^class HorizonWindow : public AntiFlickerWindow {$/;"	c	file:
HorizontalRange	src/Form/ButtonPanel.cpp	/^ButtonPanel::HorizontalRange(PixelRect rc, unsigned start, unsigned end)$/;"	f	class:ButtonPanel
Hours	src/Math/Angle.hpp	/^  constexpr double Hours() const {$/;"	f	class:Angle
I2CAddr	src/Dialogs/Device/DeviceEditWidget.cpp	/^  I2CBus, I2CAddr, PressureUsage, Driver, UseSecondDriver, SecondDriver,$/;"	e	enum:ControlIndex	file:
I2CBus	src/Dialogs/Device/DeviceEditWidget.cpp	/^  I2CBus, I2CAddr, PressureUsage, Driver, UseSecondDriver, SecondDriver,$/;"	e	enum:ControlIndex	file:
I2CPRESSURESENSOR	src/Device/Config.hpp	/^    I2CPRESSURESENSOR,$/;"	m	class:DeviceConfig::PortType
I2CbaroDevice	src/Android/I2CbaroDevice.cpp	/^I2CbaroDevice::I2CbaroDevice(unsigned _index,$/;"	f	class:I2CbaroDevice
I2CbaroListener	src/Android/I2CbaroListener.hpp	/^class I2CbaroListener {$/;"	c
IBFHelper	src/InfoBoxes/Content/Factory.cpp	/^struct IBFHelper {$/;"	s	file:
IBFHelperInt	src/InfoBoxes/Content/Factory.cpp	/^struct IBFHelperInt {$/;"	s	file:
IBP_AUTO	src/Dialogs/Settings/Panels/PagesConfigPanel.cpp	/^  static constexpr unsigned IBP_AUTO = 0x7001;$/;"	m	class:final	file:
IBP_NONE	src/Dialogs/Settings/Panels/PagesConfigPanel.cpp	/^  static constexpr unsigned IBP_NONE = 0x7000;$/;"	m	class:final	file:
ICC_CS_GRAY	src/Terrain/jasper/jp2/jp2_cod.h	319;"	d
ICC_CS_RGB	src/Terrain/jasper/jp2/jp2_cod.h	317;"	d
ICC_CS_YCBCR	src/Terrain/jasper/jp2/jp2_cod.h	318;"	d
IDABORT	src/Dialogs/Message.hpp	/^  IDABORT,$/;"	e	enum:__anon4
IDB_XCSOARLSWIFT	src/resource-launch.h	2;"	d
IDB_XCSOARLSWIFTSIM	src/resource-launch.h	3;"	d
IDCANCEL	src/Dialogs/Message.hpp	/^  IDCANCEL = 3,$/;"	e	enum:__anon4
IDD_DIALOG_TOOLTIP	src/resource-launch.h	1;"	d
IDIGNORE	src/Dialogs/Message.hpp	/^  IDIGNORE,$/;"	e	enum:__anon4
IDNO	src/Dialogs/Message.hpp	/^  IDNO,$/;"	e	enum:__anon4
IDOK	src/Dialogs/Message.hpp	/^  IDOK,$/;"	e	enum:__anon4
IDRETRY	src/Dialogs/Message.hpp	/^  IDRETRY,$/;"	e	enum:__anon4
IDYES	src/Dialogs/Message.hpp	/^  IDYES,$/;"	e	enum:__anon4
IGCCharToNum	src/Logger/IGCFileCleanup.cpp	/^IGCCharToNum(TCHAR c)$/;"	f	file:
IGCDeclarationHeader	src/IGC/IGCDeclaration.hpp	/^struct IGCDeclarationHeader {$/;"	s
IGCDeclarationTurnpoint	src/IGC/IGCDeclaration.hpp	/^struct IGCDeclarationTurnpoint {$/;"	s
IGCExtension	src/IGC/IGCExtensions.hpp	/^struct IGCExtension {$/;"	s
IGCExtensions	src/IGC/IGCExtensions.hpp	/^struct IGCExtensions : public TrivialArray<IGCExtension, 16> {$/;"	s
IGCFileCleanup	src/Logger/IGCFileCleanup.cpp	/^IGCFileCleanup(unsigned current_year)$/;"	f
IGCFix	src/IGC/IGCFix.hpp	/^struct IGCFix$/;"	s
IGCHEADER	src/Device/Driver/Volkslogger/vlconv.cpp	/^  IGCHEADER(void)$/;"	f	struct:IGCHEADER
IGCHEADER	src/Device/Driver/Volkslogger/vlconv.cpp	/^struct IGCHEADER$/;"	s	file:
IGCHeader	src/IGC/IGCHeader.hpp	/^struct IGCHeader {$/;"	s
IGCMakeTaskLanding	src/IGC/Generator.hpp	/^IGCMakeTaskLanding()$/;"	f
IGCMakeTaskTakeoff	src/IGC/Generator.hpp	/^IGCMakeTaskTakeoff()$/;"	f
IGCParseDate	src/IGC/IGCParser.cpp	/^IGCParseDate(const char *buffer, BrokenDate &date)$/;"	f	file:
IGCParseDateRecord	src/IGC/IGCParser.cpp	/^IGCParseDateRecord(const char *line, BrokenDate &date)$/;"	f
IGCParseDeclarationHeader	src/IGC/IGCParser.cpp	/^IGCParseDeclarationHeader(const char *line, IGCDeclarationHeader &header)$/;"	f
IGCParseDeclarationTurnpoint	src/IGC/IGCParser.cpp	/^IGCParseDeclarationTurnpoint(const char *line, IGCDeclarationTurnpoint &tp)$/;"	f
IGCParseExtensions	src/IGC/IGCParser.cpp	/^IGCParseExtensions(const char *buffer, IGCExtensions &extensions)$/;"	f
IGCParseFix	src/IGC/IGCParser.cpp	/^IGCParseFix(const char *buffer, const IGCExtensions &extensions, IGCFix &fix)$/;"	f
IGCParseHeader	src/IGC/IGCParser.cpp	/^IGCParseHeader(const char *line, IGCHeader &header)$/;"	f
IGCParseLocation	src/IGC/IGCParser.cpp	/^IGCParseLocation(const char *buffer, GeoPoint &location)$/;"	f
IGCParseTime	src/IGC/IGCParser.cpp	/^IGCParseTime(const char *buffer, BrokenTime &time)$/;"	f
IGCWriter	src/IGC/IGCWriter.cpp	/^IGCWriter::IGCWriter(Path path)$/;"	f	class:IGCWriter
IGCWriter	src/IGC/IGCWriter.hpp	/^class IGCWriter {$/;"	c
IGC_REPLAY_HPP	src/Replay/IgcReplay.hpp	25;"	d
IGUR_sizet	src/Topography/shapelib/mapxbase.c	/^static inline void IGUR_sizet(size_t ignored) { (void)ignored; }  \/* Ignore GCC Unused Result *\/$/;"	f	file:
IID_ANDROIDSIMPLEBUFFERQUEUE	src/Audio/SLES/Init.cpp	/^    *IID_ANDROIDSIMPLEBUFFERQUEUE;$/;"	m	namespace:SLES	file:
IID_ENGINE	src/Audio/SLES/Init.cpp	/^  const SLInterfaceID *IID_ENGINE, *IID_PLAY,$/;"	m	namespace:SLES	file:
IID_PLAY	src/Audio/SLES/Init.cpp	/^  const SLInterfaceID *IID_ENGINE, *IID_PLAY,$/;"	m	namespace:SLES	file:
ILECCreateOnPort	src/Device/Driver/ILEC.cpp	/^ILECCreateOnPort(const DeviceConfig &config, Port &com_port)$/;"	f	file:
ILECDevice	src/Device/Driver/ILEC.cpp	/^class ILECDevice : public AbstractDevice {$/;"	c	file:
IMI	src/Device/Driver/IMI/Protocol/Checksum.hpp	/^namespace IMI$/;"	n
IMI	src/Device/Driver/IMI/Protocol/Communication.cpp	/^namespace IMI$/;"	n	file:
IMI	src/Device/Driver/IMI/Protocol/Communication.hpp	/^namespace IMI$/;"	n
IMI	src/Device/Driver/IMI/Protocol/Conversion.hpp	/^namespace IMI$/;"	n
IMI	src/Device/Driver/IMI/Protocol/IGC.cpp	/^namespace IMI$/;"	n	file:
IMI	src/Device/Driver/IMI/Protocol/IGC.hpp	/^namespace IMI$/;"	n
IMI	src/Device/Driver/IMI/Protocol/MessageParser.cpp	/^namespace IMI {$/;"	n	file:
IMI	src/Device/Driver/IMI/Protocol/MessageParser.hpp	/^namespace IMI$/;"	n
IMI	src/Device/Driver/IMI/Protocol/Protocol.cpp	/^namespace IMI$/;"	n	file:
IMI	src/Device/Driver/IMI/Protocol/Protocol.hpp	/^namespace IMI$/;"	n
IMI	src/Device/Driver/IMI/Protocol/Types.hpp	/^namespace IMI$/;"	n
IMIBYTE	src/Device/Driver/IMI/Protocol/Types.hpp	/^  typedef uint8_t IMIBYTE;$/;"	t	namespace:IMI
IMICHAR	src/Device/Driver/IMI/Protocol/Types.hpp	/^  typedef char IMICHAR;$/;"	t	namespace:IMI
IMICOMM_BIGPARAM1	src/Device/Driver/IMI/Protocol/Types.hpp	393;"	d
IMICOMM_BIGPARAM2	src/Device/Driver/IMI/Protocol/Types.hpp	394;"	d
IMICOMM_CRC_LEN	src/Device/Driver/IMI/Protocol/Types.hpp	/^  const unsigned IMICOMM_CRC_LEN   = 2;$/;"	m	namespace:IMI
IMICOMM_MAKEBIGPARAM	src/Device/Driver/IMI/Protocol/Types.hpp	392;"	d
IMICOMM_MAX_MSG_SIZE	src/Device/Driver/IMI/Protocol/MessageParser.cpp	27;"	d	file:
IMICOMM_MSG_HEADER_SIZE	src/Device/Driver/IMI/Protocol/Types.hpp	391;"	d
IMICOMM_SYNC_CHAR1	src/Device/Driver/IMI/Protocol/Types.hpp	/^  const IMIBYTE IMICOMM_SYNC_CHAR1 = 'E';$/;"	m	namespace:IMI
IMICOMM_SYNC_CHAR2	src/Device/Driver/IMI/Protocol/Types.hpp	/^  const IMIBYTE IMICOMM_SYNC_CHAR2 = 'X';$/;"	m	namespace:IMI
IMICOMM_SYNC_LEN	src/Device/Driver/IMI/Protocol/Types.hpp	/^  const unsigned IMICOMM_SYNC_LEN  = 2;$/;"	m	namespace:IMI
IMICreateOnPort	src/Device/Driver/IMI/Register.cpp	/^IMICreateOnPort(const DeviceConfig &config, Port &com_port)$/;"	f	file:
IMIDATETIMESEC	src/Device/Driver/IMI/Protocol/Types.hpp	/^  typedef uint32_t IMIDATETIMESEC;$/;"	t	namespace:IMI
IMIDDWORD	src/Device/Driver/IMI/Protocol/Types.hpp	/^  typedef uint64_t IMIDDWORD;$/;"	t	namespace:IMI
IMIDECL_CCL_LENGTH	src/Device/Driver/IMI/Protocol/Types.hpp	/^  const unsigned IMIDECL_CCL_LENGTH = 20;$/;"	m	namespace:IMI
IMIDECL_CID_LENGTH	src/Device/Driver/IMI/Protocol/Types.hpp	/^  const unsigned IMIDECL_CID_LENGTH = 4;$/;"	m	namespace:IMI
IMIDECL_CLB_LENGTH	src/Device/Driver/IMI/Protocol/Types.hpp	/^  const unsigned IMIDECL_CLB_LENGTH = 20;$/;"	m	namespace:IMI
IMIDECL_CM2_LENGTH	src/Device/Driver/IMI/Protocol/Types.hpp	/^  const unsigned IMIDECL_CM2_LENGTH = 30;$/;"	m	namespace:IMI
IMIDECL_GID_LENGTH	src/Device/Driver/IMI/Protocol/Types.hpp	/^  const unsigned IMIDECL_GID_LENGTH = 12;$/;"	m	namespace:IMI
IMIDECL_GTY_LENGTH	src/Device/Driver/IMI/Protocol/Types.hpp	/^  const unsigned IMIDECL_GTY_LENGTH = 20;$/;"	m	namespace:IMI
IMIDECL_MAX_WAYPOINTS	src/Device/Driver/IMI/Protocol/Types.hpp	/^  const unsigned IMIDECL_MAX_WAYPOINTS    = 15;$/;"	m	namespace:IMI
IMIDECL_PLT_LENGTH	src/Device/Driver/IMI/Protocol/Types.hpp	/^  const unsigned IMIDECL_PLT_LENGTH = 30;$/;"	m	namespace:IMI
IMIDECL_SIT_LENGTH	src/Device/Driver/IMI/Protocol/Types.hpp	/^  const unsigned IMIDECL_SIT_LENGTH = 20;$/;"	m	namespace:IMI
IMIDECL_TASK_NAME_LENGTH	src/Device/Driver/IMI/Protocol/Types.hpp	/^  const unsigned IMIDECL_TASK_NAME_LENGTH = 30;$/;"	m	namespace:IMI
IMIDECL_WP_NAME_LENGTH	src/Device/Driver/IMI/Protocol/Types.hpp	/^  const unsigned IMIDECL_WP_NAME_LENGTH   = 12;$/;"	m	namespace:IMI
IMIDWORD	src/Device/Driver/IMI/Protocol/Types.hpp	/^  typedef uint32_t IMIDWORD;$/;"	t	namespace:IMI
IMIDevice	src/Device/Driver/IMI/Internal.hpp	/^  IMIDevice(Port &_port):port(_port) {}$/;"	f	class:IMIDevice
IMIDevice	src/Device/Driver/IMI/Internal.hpp	/^class IMIDevice : public AbstractDevice {$/;"	c
IMIFIX_E_TYPE_COMMENT	src/Device/Driver/IMI/Protocol/Types.hpp	356;"	d
IMIFIX_E_TYPE_PEV	src/Device/Driver/IMI/Protocol/Types.hpp	357;"	d
IMIFIX_E_TYPE_SATELLITES	src/Device/Driver/IMI/Protocol/Types.hpp	355;"	d
IMIFIX_E_TYPE_TASK	src/Device/Driver/IMI/Protocol/Types.hpp	358;"	d
IMIFIX_ID_B2_RECORD	src/Device/Driver/IMI/Protocol/Types.hpp	299;"	d
IMIFIX_ID_B_RECORD	src/Device/Driver/IMI/Protocol/Types.hpp	298;"	d
IMIFIX_ID_DELETED	src/Device/Driver/IMI/Protocol/Types.hpp	296;"	d
IMIFIX_ID_E_RECORD	src/Device/Driver/IMI/Protocol/Types.hpp	300;"	d
IMIFIX_ID_FREE	src/Device/Driver/IMI/Protocol/Types.hpp	303;"	d
IMIFIX_ID_IMIDECLARATION	src/Device/Driver/IMI/Protocol/Types.hpp	297;"	d
IMIFIX_ID_K_RECORD	src/Device/Driver/IMI/Protocol/Types.hpp	301;"	d
IMIFIX_ID_X_RECORD	src/Device/Driver/IMI/Protocol/Types.hpp	302;"	d
IMIIS_FIX	src/Device/Driver/IMI/Protocol/Types.hpp	305;"	d
IMINO_ENL_MASK	src/Device/Driver/IMI/Protocol/Types.hpp	/^  const unsigned IMINO_ENL_MASK = 0x80;$/;"	m	namespace:IMI
IMIRSA_MAX_BITS	src/Device/Driver/IMI/Protocol/Types.hpp	/^  const unsigned IMIRSA_MAX_BITS = 1024;$/;"	m	namespace:IMI
IMISDWORD	src/Device/Driver/IMI/Protocol/Types.hpp	/^  typedef int32_t IMISDWORD;$/;"	t	namespace:IMI
IMISWORD	src/Device/Driver/IMI/Protocol/Types.hpp	/^  typedef int16_t IMISWORD;$/;"	t	namespace:IMI
IMIWORD	src/Device/Driver/IMI/Protocol/Types.hpp	/^  typedef uint16_t IMIWORD;$/;"	t	namespace:IMI
IMI_DAYS_IN_MONTH	src/Device/Driver/IMI/Protocol/Conversion.cpp	/^static constexpr IMI::IMIBYTE IMI_DAYS_IN_MONTH[12] =$/;"	v	file:
IMI_DAYS_IN_YEAR	src/Device/Driver/IMI/Protocol/Conversion.cpp	37;"	d	file:
IMI_ISLEAP	src/Device/Driver/IMI/Protocol/Conversion.cpp	36;"	d	file:
IMI_SECONDS_IN_DAY	src/Device/Driver/IMI/Protocol/Conversion.cpp	35;"	d	file:
IMI_SECONDS_IN_HOUR	src/Device/Driver/IMI/Protocol/Conversion.cpp	34;"	d	file:
IMI_SECONDS_IN_MINUTE	src/Device/Driver/IMI/Protocol/Conversion.cpp	33;"	d	file:
IMPLICIT_FLAGS	src/event/SocketEvent.hxx	/^	static constexpr unsigned IMPLICIT_FLAGS = ERROR|HANGUP;$/;"	m	class:final
IMPORTANT	src/FLARM/Traffic.hpp	/^    IMPORTANT = 2,$/;"	m	class:FlarmTraffic::AlarmType
INCH_MERCURY	src/Units/Unit.hpp	/^  INCH_MERCURY,$/;"	m	class:Unit
INCOMPLETE	src/Engine/PathSolvers/SolverResult.hpp	/^  INCOMPLETE,$/;"	m	class:SolverResult
INCORRECT_NUMBER_TURNPOINTS	src/Engine/Task/Factory/ValidationError.hpp	/^  INCORRECT_NUMBER_TURNPOINTS,$/;"	m	class:TaskValidationErrorType
INDENTCHAR	src/XML/Writer.cpp	33;"	d	file:
INFINITY	src/Terrain/jasper/jas_types.h	109;"	d
INFINITY	src/Topography/shapelib/mapprimitive.c	48;"	d	file:
INFLATE_HPP	src/Dialogs/Inflate.hpp	25;"	d
INFOBOX	src/Dialogs/Settings/dlgConfigInfoboxes.cpp	/^    NAME, INFOBOX, CONTENT, DESCRIPTION$/;"	e	enum:final::Controls	file:
INFOBOXESCONFIGPANEL_HPP	src/Dialogs/Settings/Panels/InfoBoxesConfigPanel.hpp	25;"	d
INFOBOXES_CONFIG_DIALOG_HPP	src/Dialogs/Settings/dlgConfigInfoboxes.hpp	25;"	d
INFORMATION_ONLY	src/FLARM/Error.hpp	/^    INFORMATION_ONLY = 0x01,$/;"	m	struct:FlarmError	typeref:enum:FlarmError::
INFO_ALERT	src/FLARM/Traffic.hpp	/^    INFO_ALERT = 4,$/;"	m	class:FlarmTraffic::AlarmType
INFO_BOX_PANEL	src/Dialogs/Settings/Panels/PagesConfigPanel.cpp	/^    INFO_BOX_PANEL,$/;"	e	enum:final::Controls	file:
INITIALISED	src/Widget/ManagedWidget.hpp	/^    INITIALISED,$/;"	m	class:ManagedWidget::State
INIT_LABEL_STYLE	src/Topography/shapelib/mapserver.h	3124;"	d
INIT_STROKE_STYLE	src/Topography/shapelib/mapserver.h	3066;"	d
INIT_SYMBOL_STYLE	src/Topography/shapelib/mapserver.h	3097;"	d
INNER_RADIUS	src/Dialogs/Task/Widgets/KeyholeZoneEditWidget.cpp	/^  INNER_RADIUS,$/;"	e	enum:Controls	file:
INNER_RADIUS	src/Dialogs/Task/Widgets/SectorZoneEditWidget.cpp	/^  INNER_RADIUS,$/;"	e	enum:Controls	file:
INPUT_ACKNOWLEDGE	src/NMEA/VegaSwitchState.hpp	/^    INPUT_ACKNOWLEDGE = 8,$/;"	e	enum:VegaSwitchState::InputBits
INPUT_AIRBRAKE_LOCKED	src/NMEA/VegaSwitchState.hpp	/^    INPUT_AIRBRAKE_LOCKED = 21,$/;"	e	enum:VegaSwitchState::InputBits
INPUT_AIRBRAKE_NOT_LOCKED	src/NMEA/VegaSwitchState.hpp	/^    INPUT_AIRBRAKE_NOT_LOCKED = 6,$/;"	e	enum:VegaSwitchState::InputBits
INPUT_FLAP_NEGATIVE	src/NMEA/VegaSwitchState.hpp	/^    INPUT_FLAP_NEGATIVE = 2,$/;"	e	enum:VegaSwitchState::InputBits
INPUT_FLAP_POSITIVE	src/NMEA/VegaSwitchState.hpp	/^    INPUT_FLAP_POSITIVE = 0,$/;"	e	enum:VegaSwitchState::InputBits
INPUT_FLAP_ZERO	src/NMEA/VegaSwitchState.hpp	/^    INPUT_FLAP_ZERO = 1,$/;"	e	enum:VegaSwitchState::InputBits
INPUT_GEAR_EXTENDED	src/NMEA/VegaSwitchState.hpp	/^    INPUT_GEAR_EXTENDED = 5,$/;"	e	enum:VegaSwitchState::InputBits
INPUT_MASK_ACK	src/NMEA/VegaSwitchState.hpp	/^  static constexpr unsigned INPUT_MASK_ACK = 1 << INPUT_ACKNOWLEDGE;$/;"	m	struct:VegaSwitchState
INPUT_MASK_AIRBRAKE_LOCKED	src/NMEA/VegaSwitchState.hpp	/^  static constexpr unsigned INPUT_MASK_AIRBRAKE_LOCKED = 1 << INPUT_AIRBRAKE_LOCKED;$/;"	m	struct:VegaSwitchState
INPUT_MASK_AIRBRAKE_NOT_LOCKED	src/NMEA/VegaSwitchState.hpp	/^  static constexpr unsigned INPUT_MASK_AIRBRAKE_NOT_LOCKED = 1 << INPUT_AIRBRAKE_NOT_LOCKED;$/;"	m	struct:VegaSwitchState
INPUT_MASK_FLAP_NEGATIVE	src/NMEA/VegaSwitchState.hpp	/^  static constexpr unsigned INPUT_MASK_FLAP_NEGATIVE = 1 << INPUT_FLAP_NEGATIVE;$/;"	m	struct:VegaSwitchState
INPUT_MASK_FLAP_POSITIVE	src/NMEA/VegaSwitchState.hpp	/^  static constexpr unsigned INPUT_MASK_FLAP_POSITIVE = 1 << INPUT_FLAP_POSITIVE;$/;"	m	struct:VegaSwitchState
INPUT_MASK_FLAP_ZERO	src/NMEA/VegaSwitchState.hpp	/^  static constexpr unsigned INPUT_MASK_FLAP_ZERO = 1 << INPUT_FLAP_ZERO;$/;"	m	struct:VegaSwitchState
INPUT_MASK_GEAR_EXTENDED	src/NMEA/VegaSwitchState.hpp	/^  static constexpr unsigned INPUT_MASK_GEAR_EXTENDED = 1 << INPUT_GEAR_EXTENDED;$/;"	m	struct:VegaSwitchState
INPUT_MASK_REP	src/NMEA/VegaSwitchState.hpp	/^  static constexpr unsigned INPUT_MASK_REP = 1 << INPUT_REPEAT;$/;"	m	struct:VegaSwitchState
INPUT_MASK_SC	src/NMEA/VegaSwitchState.hpp	/^  static constexpr unsigned INPUT_MASK_SC = 1 << INPUT_SPEED_COMMAND;$/;"	m	struct:VegaSwitchState
INPUT_MASK_USER_SWITCH_DOWN	src/NMEA/VegaSwitchState.hpp	/^  static constexpr unsigned INPUT_MASK_USER_SWITCH_DOWN = 1 << INPUT_USER_SWITCH_DOWN;$/;"	m	struct:VegaSwitchState
INPUT_MASK_USER_SWITCH_MIDDLE	src/NMEA/VegaSwitchState.hpp	/^  static constexpr unsigned INPUT_MASK_USER_SWITCH_MIDDLE = 1 << INPUT_USER_SWITCH_MIDDLE;$/;"	m	struct:VegaSwitchState
INPUT_MASK_USER_SWITCH_UP	src/NMEA/VegaSwitchState.hpp	/^  static constexpr unsigned INPUT_MASK_USER_SWITCH_UP = 1 << INPUT_USER_SWITCH_UP;$/;"	m	struct:VegaSwitchState
INPUT_REPEAT	src/NMEA/VegaSwitchState.hpp	/^    INPUT_REPEAT = 9,$/;"	e	enum:VegaSwitchState::InputBits
INPUT_SPEED_COMMAND	src/NMEA/VegaSwitchState.hpp	/^    INPUT_SPEED_COMMAND = 3,$/;"	e	enum:VegaSwitchState::InputBits
INPUT_STALL	src/NMEA/VegaSwitchState.hpp	/^    INPUT_STALL = 20,$/;"	e	enum:VegaSwitchState::InputBits
INPUT_USER_SWITCH_DOWN	src/NMEA/VegaSwitchState.hpp	/^    INPUT_USER_SWITCH_DOWN = 25,$/;"	e	enum:VegaSwitchState::InputBits
INPUT_USER_SWITCH_MIDDLE	src/NMEA/VegaSwitchState.hpp	/^    INPUT_USER_SWITCH_MIDDLE = 24,$/;"	e	enum:VegaSwitchState::InputBits
INPUT_USER_SWITCH_UP	src/NMEA/VegaSwitchState.hpp	/^    INPUT_USER_SWITCH_UP = 23,$/;"	e	enum:VegaSwitchState::InputBits
INSIDE	src/Renderer/AirspaceRendererSettings.hpp	/^  INSIDE,$/;"	m	class:AirspaceDisplayMode
INTEGER	src/Form/DataField/Base.hpp	/^    INTEGER,$/;"	m	class:DataField::Type
INTERFACECONFIGPANEL_HPP	src/Dialogs/Settings/Panels/InterfaceConfigPanel.hpp	25;"	d
INTERFACE_BLACKBOARD_H	src/Blackboard/InterfaceBlackboard.hpp	25;"	d
INTERMEDIATEPOINT_H	src/Engine/Task/Ordered/Points/IntermediatePoint.hpp	24;"	d
INTERNAL	src/Device/Config.hpp	/^    INTERNAL,$/;"	m	class:DeviceConfig::PortType
INTERSECT_BITS	src/Terrain/RasterTileCache.hpp	/^  static constexpr unsigned INTERSECT_BITS = 7;$/;"	m	class:RasterTileCache
INTERVAL	src/ui/window/custom/DoubleClick.cpp	/^constexpr std::chrono::milliseconds DoubleClick::INTERVAL;$/;"	m	class:DoubleClick	file:
INTERVAL	src/ui/window/custom/DoubleClick.hpp	/^  static constexpr auto INTERVAL = std::chrono::milliseconds(IsKobo() ? 750 : 500);$/;"	m	class:DoubleClick
INT_ANGLE_MASK	src/Math/FastTrig.hpp	/^static constexpr unsigned INT_ANGLE_MASK = INT_ANGLE_RANGE - 1;$/;"	v
INT_ANGLE_MULT	src/Math/FastTrig.hpp	/^static constexpr double INT_ANGLE_MULT = INT_ANGLE_RANGE \/ M_2PI;$/;"	v
INT_ANGLE_RANGE	src/Math/FastTrig.hpp	/^static constexpr unsigned INT_ANGLE_RANGE = 4096;$/;"	v
INT_QUARTER_CIRCLE	src/Math/FastTrig.hpp	/^static constexpr unsigned INT_QUARTER_CIRCLE = INT_ANGLE_RANGE \/ 4;$/;"	v
INVALID	src/Dialogs/Plane/PlanePolarDialog.cpp	/^    INVALID,$/;"	e	enum:final::Controls	file:
INVALID	src/Engine/Route/ReachResult.hpp	/^    INVALID,$/;"	m	class:ReachResult::Validity
INVALID	src/NMEA/VegaSwitchState.hpp	/^  static constexpr unsigned INVALID = -1;$/;"	m	struct:VegaSwitchState
INVALID	src/Task/MapTaskManager.hpp	/^    INVALID,$/;"	e	enum:MapTaskManager::TaskEditResult
INVALID	src/Terrain/Height.hpp	/^  static constexpr int16_t INVALID = -32768;$/;"	m	class:TerrainHeight
INVALID	src/time/RoughTime.hpp	/^  static constexpr uint16_t INVALID = -1;$/;"	m	class:RoughTime
INVALID	src/ui/canvas/custom/UncompressedImage.hpp	/^    INVALID,$/;"	m	class:UncompressedImage::Format
INVALID_GR	src/Computer/GlideRatioCalculator.hpp	/^static constexpr double INVALID_GR = 999;$/;"	v
INVERSE_2G	src/Computer/BasicComputer.cpp	/^static constexpr double INVERSE_2G = INVERSE_G \/ 2.;$/;"	v	file:
INVERSE_G	src/Computer/BasicComputer.cpp	/^static constexpr double INVERSE_G = 1. \/ GRAVITY;$/;"	v	file:
INVERTED	src/Device/Driver/LX/LX1600.hpp	/^    INVERTED = 1,$/;"	m	class:LX1600::SCControlMode
IOIOHelper	src/Android/IOIOHelper.cpp	/^IOIOHelper::IOIOHelper(JNIEnv *env)$/;"	f	class:IOIOHelper
IOIOHelper	src/Android/IOIOHelper.hpp	/^class IOIOHelper : protected Java::GlobalObject {$/;"	c
IOIOUART	src/Device/Config.hpp	/^    IOIOUART,$/;"	m	class:DeviceConfig::PortType
IOIOVOLTAGE	src/Device/Config.hpp	/^    IOIOVOLTAGE,$/;"	m	class:DeviceConfig::PortType
IPV4_ADDRESS_HXX	src/net/IPv4Address.hxx	31;"	d
IPV6_ADDRESS_HXX	src/net/IPv6Address.hxx	31;"	d
IP_ADDRESS	src/Dialogs/Device/DeviceEditWidget.cpp	/^  IP_ADDRESS,$/;"	e	enum:ControlIndex	file:
IPv4Address	src/net/IPv4Address.hxx	/^class IPv4Address {$/;"	c
IPv6Address	src/net/IPv6Address.hxx	/^		:IPv6Address(IN6ADDR_ANY_INIT, port, scope_id) {}$/;"	f	class:IPv6Address
IPv6Address	src/net/IPv6Address.hxx	/^class IPv6Address {$/;"	c
ISOLINECROSSINGFINDER_HPP	src/Engine/Task/PathSolvers/IsolineCrossingFinder.hpp	24;"	d
ISO_LATIN_1	src/io/Charset.hpp	/^  ISO_LATIN_1,$/;"	m	class:Charset
IS_BIG_ENDIAN	src/util/ByteOrder.hxx	41;"	d
IS_BIG_ENDIAN	src/util/ByteOrder.hxx	45;"	d
IS_BIG_ENDIAN	src/util/ByteOrder.hxx	51;"	d
IS_BIG_ENDIAN	src/util/ByteOrder.hxx	54;"	d
IS_BIG_ENDIAN	src/util/ByteOrder.hxx	60;"	d
IS_BIG_ENDIAN	src/util/ByteOrder.hxx	63;"	d
IS_BIG_ENDIAN	src/util/ByteOrder.hxx	70;"	d
IS_BIG_ENDIAN	src/util/ByteOrder.hxx	73;"	d
IS_LITTLE_ENDIAN	src/util/ByteOrder.hxx	40;"	d
IS_LITTLE_ENDIAN	src/util/ByteOrder.hxx	44;"	d
IS_LITTLE_ENDIAN	src/util/ByteOrder.hxx	50;"	d
IS_LITTLE_ENDIAN	src/util/ByteOrder.hxx	53;"	d
IS_LITTLE_ENDIAN	src/util/ByteOrder.hxx	59;"	d
IS_LITTLE_ENDIAN	src/util/ByteOrder.hxx	62;"	d
IS_LITTLE_ENDIAN	src/util/ByteOrder.hxx	69;"	d
IS_LITTLE_ENDIAN	src/util/ByteOrder.hxx	72;"	d
IS_PARALLEL_OFFSET	src/Topography/shapelib/mapserver.h	1051;"	d
IS_PERPENDICULAR_OFFSET	src/Topography/shapelib/mapserver.h	1188;"	d
IS_THIRDPARTY_LAYER_CONNECTIONTYPE	src/Topography/shapelib/mapserver.h	519;"	d
ITEM	src/Dialogs/Weather/RASPDialog.cpp	/^    ITEM,$/;"	e	enum:final::Controls	file:
ITERABLE_SPLIT_STRING_HXX	src/util/IterableSplitString.hxx	31;"	d
Icon	src/Dialogs/DialogSettings.hpp	/^    Icon,$/;"	m	class:DialogSettings::TabStyle
IconLook	src/Look/IconLook.hpp	/^struct IconLook {$/;"	s
IconStretchFixed10	src/ui/canvas/Icon.cpp	/^IconStretchFixed10(unsigned source_dpi)$/;"	f	file:
IconStretchInteger	src/ui/canvas/Icon.cpp	/^IconStretchInteger(unsigned source_dpi)$/;"	f	file:
IdCompare	src/Cloud/Client.hpp	/^  struct IdCompare {$/;"	s	struct:CloudClient
IdSet	src/Cloud/Client.hpp	/^                                boost::intrusive::constant_time_size<false>> IdSet;$/;"	t	class:CloudClientContainer
IgcReplay	src/Replay/IgcReplay.cpp	/^IgcReplay::IgcReplay(std::unique_ptr<NLineReader> &&_reader)$/;"	f	class:IgcReplay
IgcReplay	src/Replay/IgcReplay.hpp	/^class IgcReplay: public AbstractReplay$/;"	c
IgnoreBitmapAlpha	src/MapWindow/OverlayBitmap.hpp	/^  void IgnoreBitmapAlpha() {$/;"	f	class:final
IgnoreNMEAChecksum	src/Profile/ProfileKeys.cpp	/^const char IgnoreNMEAChecksum[] = "IgnoreNMEAChecksum";$/;"	m	namespace:ProfileKeys	file:
ImageArea	src/Weather/PCMet/Images.hpp	/^struct ImageArea {$/;"	s	namespace:PCMet
ImageType	src/Weather/PCMet/Images.hpp	/^struct ImageType {$/;"	s	namespace:PCMet
ImageTypeListWidget	src/Dialogs/Weather/PCMetDialog.cpp	/^  explicit ImageTypeListWidget(ImageAreaListWidget &_area_list)$/;"	f	class:final
Import	src/Form/DataField/Angle.cpp	/^AngleDataField::Import(int value)$/;"	f	class:AngleDataField
Import	src/Form/DataField/Angle.hpp	/^  static unsigned Import(Angle value) {$/;"	f	class:final
Import	src/Form/DataField/Angle.hpp	/^  static unsigned Import(unsigned value) {$/;"	f	class:final
Import	src/NMEA/Validity.hpp	/^    :last(Import(_last)) {}$/;"	f	class:Validity
Import	src/Rough/RoughAngle.hpp	/^  static constexpr int16_t Import(Angle x) {$/;"	f	class:RoughAngle
Import	src/Rough/RoughSpeed.hpp	/^  static constexpr uint16_t Import(double x) {$/;"	f	class:RoughSpeed
Import	src/Rough/RoughVSpeed.hpp	/^  static int16_t Import(double x) {$/;"	f	class:RoughVSpeed
Import	src/ui/canvas/memory/Canvas.cpp	/^  static constexpr ActivePixelTraits::color_type Import(Color color) {$/;"	f	class:SDLRasterCanvas
Import	src/ui/canvas/opengl/Color.hpp	/^  static constexpr Component Import(uint8_t value) {$/;"	f	class:Color
ImportAlphaTexture	src/ui/canvas/opengl/UncompressedImage.cpp	/^ImportAlphaTexture(const UncompressedImage &image)$/;"	f
ImportAltitudeUnit	src/Profile/UnitsConfig.cpp	/^ImportAltitudeUnit(unsigned tmp)$/;"	f	file:
ImportAngle	src/Tracking/SkyLines/Import.hpp	/^ImportAngle(int32_t src)$/;"	f	namespace:SkyLinesTracking
ImportClicked	src/Dialogs/Plane/PlanePolarDialog.cpp	/^PlanePolarWidget::ImportClicked()$/;"	f	class:PlanePolarWidget
ImportDeprecatedLoggerSerial	src/IGC/IGCParser.cpp	/^ImportDeprecatedLoggerSerial(char id[4], unsigned serial)$/;"	f	file:
ImportDistanceUnit	src/Profile/UnitsConfig.cpp	/^ImportDistanceUnit(unsigned tmp)$/;"	f	file:
ImportGeoPoint	src/Tracking/SkyLines/Import.hpp	/^ImportGeoPoint(SkyLinesTracking::GeoPoint src)$/;"	f	namespace:SkyLinesTracking
ImportLabel	src/Topography/XShape.cpp	/^ImportLabel(const char *src)$/;"	f	file:
ImportLongitude	src/Geo/GeoClip.hpp	/^  Angle ImportLongitude(Angle l) const {$/;"	f	class:GeoClip
ImportPoint	src/Geo/GeoClip.hpp	/^  GeoPoint ImportPoint(GeoPoint pt) const {$/;"	f	class:GeoClip
ImportRect	src/Topography/Convert.hpp	/^ImportRect(const rectObj r)$/;"	f
ImportSpeedUnit	src/Profile/UnitsConfig.cpp	/^ImportSpeedUnit(unsigned tmp)$/;"	f	file:
ImportSurface	src/ui/canvas/memory/UncompressedImage.hpp	/^ImportSurface(WritableImageBuffer<PixelTraits> &buffer,$/;"	f
ImportTemperatureUnit	src/Profile/UnitsConfig.cpp	/^ImportTemperatureUnit(unsigned tmp)$/;"	f	file:
ImportTexture	src/ui/canvas/opengl/UncompressedImage.cpp	/^ImportTexture(const UncompressedImage &image)$/;"	f
ImportTimeMs	src/Tracking/SkyLines/Import.hpp	/^ImportTimeMs(uint32_t src_be)$/;"	f	namespace:SkyLinesTracking
ImportVerticalSpeedUnit	src/Profile/UnitsConfig.cpp	/^ImportVerticalSpeedUnit(unsigned tmp)$/;"	f	file:
InBlackout	src/Computer/Wind/WindEKFGlue.hpp	/^  bool InBlackout(const unsigned time) const {$/;"	f	class:WindEKFGlue
InCirclingMode	src/MapWindow/GlueMapWindow.hpp	/^  bool InCirclingMode() const {$/;"	f	class:GlueMapWindow
InDeadBand	src/Audio/VarioSynthesiser.hpp	/^  bool InDeadBand(int ivario) {$/;"	f	class:final
InDrawThread	src/Components.cpp	/^InDrawThread()$/;"	f
InInHeightLimit	src/Engine/Task/Ordered/Points/FinishPoint.cpp	/^FinishPoint::InInHeightLimit(const AircraftState &state) const$/;"	f	class:FinishPoint
InMainThread	src/thread/Debug.cpp	/^InMainThread()$/;"	f
InStartSector	src/Monitor/TaskConstraintsMonitor.cpp	/^InStartSector()$/;"	f	file:
Inc	src/Form/DataField/Angle.cpp	/^AngleDataField::Inc()$/;"	f	class:AngleDataField
Inc	src/Form/DataField/Base.cpp	/^DataField::Inc()$/;"	f	class:DataField
Inc	src/Form/DataField/Boolean.cpp	/^DataFieldBoolean::Inc()$/;"	f	class:DataFieldBoolean
Inc	src/Form/DataField/Enum.cpp	/^DataFieldEnum::Inc()$/;"	f	class:DataFieldEnum
Inc	src/Form/DataField/File.cpp	/^FileDataField::Inc()$/;"	f	class:FileDataField
Inc	src/Form/DataField/Float.cpp	/^DataFieldFloat::Inc()$/;"	f	class:DataFieldFloat
Inc	src/Form/DataField/Integer.cpp	/^DataFieldInteger::Inc()$/;"	f	class:DataFieldInteger
Inc	src/Form/DataField/Prefix.cpp	/^PrefixDataField::Inc()$/;"	f	class:PrefixDataField
Inc	src/Form/DataField/RoughTime.cpp	/^RoughTimeDataField::Inc()$/;"	f	class:RoughTimeDataField
Inc	src/Form/DataField/Time.cpp	/^DataFieldTime::Inc()$/;"	f	class:DataFieldTime
IncludeRecordInGCalc	src/Logger/GRecord.cpp	/^GRecord::IncludeRecordInGCalc(const char *in)$/;"	f	class:GRecord
IncrementActiveTaskPoint	src/Engine/Task/TaskManager.cpp	/^TaskManager::IncrementActiveTaskPoint(int offset)$/;"	f	class:TaskManager
IncrementActiveTaskPoint	src/Task/ProtectedTaskManager.cpp	/^ProtectedTaskManager::IncrementActiveTaskPoint(int offset)$/;"	f	class:ProtectedTaskManager
IncrementActiveTaskPointArm	src/Task/ProtectedTaskManager.cpp	/^ProtectedTaskManager::IncrementActiveTaskPointArm(int offset)$/;"	f	class:ProtectedTaskManager
IncrementColumn	src/Form/DigitEntry.cpp	/^DigitEntry::IncrementColumn(unsigned i)$/;"	f	class:DigitEntry
IncrementDay	src/time/BrokenDate.cpp	/^BrokenDate::IncrementDay()$/;"	f	class:BrokenDate
IncrementLetter	src/Dialogs/KnobTextEntry.cpp	/^  void IncrementLetter() {$/;"	f	class:final
IncrementalSpeedComputer	src/Engine/Task/Computer/IncrementalSpeedComputer.cpp	/^IncrementalSpeedComputer::IncrementalSpeedComputer(const bool _is_positive)$/;"	f	class:IncrementalSpeedComputer
IncrementalSpeedComputer	src/Engine/Task/Computer/IncrementalSpeedComputer.hpp	/^class IncrementalSpeedComputer {$/;"	c
IndexAtX	src/Terrain/ScanLine.cpp	/^IndexAtX(const GridRay &ray, int x)$/;"	f	file:
IndexAtY	src/Terrain/ScanLine.cpp	/^IndexAtY(const GridRay &ray, int y)$/;"	f	file:
IndexToDXDY	src/Engine/Route/RoutePolar.cpp	/^RoutePolar::IndexToDXDY(const int index)$/;"	f	class:RoutePolar
IndexToTime	src/Weather/Rasp/RaspStore.cpp	/^RaspStore::IndexToTime(unsigned index)$/;"	f	class:RaspStore
InfoBoxConfig	src/PageSettings.hpp	/^    constexpr InfoBoxConfig(bool _auto_switch, unsigned _panel)$/;"	f	struct:PageLayout::InfoBoxConfig
InfoBoxConfig	src/PageSettings.hpp	/^  struct InfoBoxConfig {$/;"	s	struct:PageLayout
InfoBoxContent	src/InfoBoxes/Content/Base.hpp	/^class InfoBoxContent$/;"	c
InfoBoxContentActiveRadioFrequency	src/InfoBoxes/Content/Radio.hpp	/^class InfoBoxContentActiveRadioFrequency : public InfoBoxContent$/;"	c
InfoBoxContentAlternateGR	src/InfoBoxes/Content/Alternate.hpp	/^  InfoBoxContentAlternateGR(const unsigned _index):$/;"	f	class:InfoBoxContentAlternateGR
InfoBoxContentAlternateGR	src/InfoBoxes/Content/Alternate.hpp	/^class InfoBoxContentAlternateGR : public InfoBoxContent$/;"	c
InfoBoxContentAlternateName	src/InfoBoxes/Content/Alternate.hpp	/^  InfoBoxContentAlternateName(const unsigned _index):$/;"	f	class:InfoBoxContentAlternateName
InfoBoxContentAlternateName	src/InfoBoxes/Content/Alternate.hpp	/^class InfoBoxContentAlternateName : public InfoBoxContent$/;"	c
InfoBoxContentAltitude	src/InfoBoxes/Content/Altitude.hpp	/^class InfoBoxContentAltitude : public InfoBoxContent$/;"	c
InfoBoxContentAltitudeGPS	src/InfoBoxes/Content/Altitude.hpp	/^class InfoBoxContentAltitudeGPS : public InfoBoxContentAltitude$/;"	c
InfoBoxContentBarogram	src/InfoBoxes/Content/Trace.hpp	/^class InfoBoxContentBarogram : public InfoBoxContentAltitude$/;"	c
InfoBoxContentCallback	src/InfoBoxes/Content/Factory.cpp	/^  InfoBoxContentCallback(void (*_update)(InfoBoxData &data),$/;"	f	class:InfoBoxContentCallback
InfoBoxContentCallback	src/InfoBoxes/Content/Factory.cpp	/^class InfoBoxContentCallback : public InfoBoxContent {$/;"	c	file:
InfoBoxContentCirclingAverageSpark	src/InfoBoxes/Content/Trace.hpp	/^class InfoBoxContentCirclingAverageSpark : public InfoBoxContentSpark$/;"	c
InfoBoxContentClimbPercent	src/InfoBoxes/Content/Thermal.hpp	/^class InfoBoxContentClimbPercent : public InfoBoxContent$/;"	c
InfoBoxContentHorizon	src/InfoBoxes/Content/Other.hpp	/^class InfoBoxContentHorizon : public InfoBoxContent$/;"	c
InfoBoxContentMacCready	src/InfoBoxes/Content/MacCready.hpp	/^class InfoBoxContentMacCready : public InfoBoxContent$/;"	c
InfoBoxContentNettoVarioSpark	src/InfoBoxes/Content/Trace.hpp	/^class InfoBoxContentNettoVarioSpark : public InfoBoxContentSpark$/;"	c
InfoBoxContentNextArrow	src/InfoBoxes/Content/Task.hpp	/^class InfoBoxContentNextArrow: public InfoBoxContent$/;"	c
InfoBoxContentNextWaypoint	src/InfoBoxes/Content/Task.hpp	/^class InfoBoxContentNextWaypoint : public InfoBoxContent$/;"	c
InfoBoxContentOLC	src/InfoBoxes/Content/Contest.hpp	/^class InfoBoxContentOLC: public InfoBoxContent$/;"	c
InfoBoxContentOLCSpeed	src/InfoBoxes/Content/Contest.hpp	/^class InfoBoxContentOLCSpeed: public InfoBoxContent$/;"	c
InfoBoxContentSpark	src/InfoBoxes/Content/Trace.hpp	/^class InfoBoxContentSpark: public InfoBoxContent$/;"	c
InfoBoxContentSpeedGround	src/InfoBoxes/Content/Speed.hpp	/^class InfoBoxContentSpeedGround : public InfoBoxContent$/;"	c
InfoBoxContentStandbyRadioFrequency	src/InfoBoxes/Content/Radio.hpp	/^class InfoBoxContentStandbyRadioFrequency : public InfoBoxContent$/;"	c
InfoBoxContentTaskProgress	src/InfoBoxes/Content/Trace.hpp	/^class InfoBoxContentTaskProgress : public InfoBoxContent$/;"	c
InfoBoxContentTeamCode	src/InfoBoxes/Content/Team.hpp	/^class InfoBoxContentTeamCode : public InfoBoxContent$/;"	c
InfoBoxContentTemperatureForecast	src/InfoBoxes/Content/Weather.hpp	/^class InfoBoxContentTemperatureForecast : public InfoBoxContent$/;"	c
InfoBoxContentThermalAssistant	src/InfoBoxes/Content/Thermal.cpp	/^InfoBoxContentThermalAssistant::InfoBoxContentThermalAssistant()$/;"	f	class:InfoBoxContentThermalAssistant
InfoBoxContentThermalAssistant	src/InfoBoxes/Content/Thermal.hpp	/^class InfoBoxContentThermalAssistant: public InfoBoxContent$/;"	c
InfoBoxContentThermalBand	src/InfoBoxes/Content/Trace.hpp	/^class InfoBoxContentThermalBand : public InfoBoxContent$/;"	c
InfoBoxContentTrack	src/InfoBoxes/Content/Direction.hpp	/^class InfoBoxContentTrack : public InfoBoxContent$/;"	c
InfoBoxContentVarioSpark	src/InfoBoxes/Content/Trace.hpp	/^class InfoBoxContentVarioSpark : public InfoBoxContentSpark$/;"	c
InfoBoxContentWindArrow	src/InfoBoxes/Content/Weather.hpp	/^class InfoBoxContentWindArrow: public InfoBoxContent$/;"	c
InfoBoxData	src/InfoBoxes/Data.hpp	/^struct InfoBoxData {$/;"	s
InfoBoxDrawIfDirty	src/InfoBoxes/InfoBoxManager.cpp	/^InfoBoxManager::InfoBoxDrawIfDirty()$/;"	f	class:InfoBoxManager
InfoBoxFactory	src/InfoBoxes/Content/Factory.hpp	/^namespace InfoBoxFactory$/;"	n
InfoBoxFactory	src/InfoBoxes/Content/Type.hpp	/^namespace InfoBoxFactory$/;"	n
InfoBoxGeometry	src/Profile/ProfileKeys.cpp	/^const char InfoBoxGeometry[] = "InfoBoxGeometry";$/;"	m	namespace:ProfileKeys	file:
InfoBoxKeyCodes	src/InfoBoxes/Content/Base.hpp	/^  enum InfoBoxKeyCodes {$/;"	g	class:InfoBoxContent
InfoBoxLayout	src/InfoBoxes/InfoBoxLayout.cpp	/^namespace InfoBoxLayout$/;"	n	file:
InfoBoxLayout	src/InfoBoxes/InfoBoxLayout.hpp	/^namespace InfoBoxLayout$/;"	n
InfoBoxLayout	src/InfoBoxes/InfoBoxManager.hpp	/^namespace InfoBoxLayout {$/;"	n
InfoBoxLayout	src/MainWindow.hpp	/^namespace InfoBoxLayout { struct Layout; }$/;"	n
InfoBoxLook	src/Look/InfoBoxLook.hpp	/^struct InfoBoxLook {$/;"	s
InfoBoxManager	src/InfoBoxes/InfoBoxManager.cpp	/^namespace InfoBoxManager$/;"	n	file:
InfoBoxManager	src/InfoBoxes/InfoBoxManager.hpp	/^namespace InfoBoxManager$/;"	n
InfoBoxPanel	src/InfoBoxes/Panel/Panel.hpp	/^  InfoBoxPanel(const TCHAR *_name, std::unique_ptr<Widget> (*_load)(unsigned id))$/;"	f	struct:InfoBoxPanel
InfoBoxPanel	src/InfoBoxes/Panel/Panel.hpp	/^struct InfoBoxPanel {$/;"	s
InfoBoxPreview	src/Dialogs/Settings/dlgConfigInfoboxes.cpp	/^class InfoBoxPreview : public PaintWindow {$/;"	c	file:
InfoBoxSettings	src/InfoBoxes/InfoBoxSettings.hpp	/^struct InfoBoxSettings {$/;"	s
InfoBoxWindow	src/InfoBoxes/InfoBoxWindow.cpp	/^InfoBoxWindow::InfoBoxWindow(ContainerWindow &parent, PixelRect rc,$/;"	f	class:InfoBoxWindow
InfoBoxWindow	src/InfoBoxes/InfoBoxWindow.hpp	/^class InfoBoxWindow : public LazyPaintWindow$/;"	c
InfoBoxesConfigPanel	src/Dialogs/Settings/Panels/InfoBoxesConfigPanel.cpp	/^  InfoBoxesConfigPanel()$/;"	f	class:final
InfoBoxesConfigWidget	src/Dialogs/Settings/dlgConfigInfoboxes.cpp	/^  InfoBoxesConfigWidget(WndForm &_dialog,$/;"	f	class:final
InfoRead	src/net/http/Multi.cxx	/^CurlMulti::InfoRead(const CURL *easy)$/;"	f	class:CurlMulti
InformUnavailable	src/Device/Driver/OpenVario.cpp	/^OpenVarioDevice::InformUnavailable(const char *obj, OperationEnvironment &env)$/;"	f	class:OpenVarioDevice
Init	src/Apple/InternalSensors.cpp	/^void InternalSensors::Init()$/;"	f	class:InternalSensors
Init	src/Computer/Wind/WindEKF.cpp	/^WindEKF::Init()$/;"	f	class:WindEKF
Init	src/Device/Simulator.cpp	/^Simulator::Init(NMEAInfo &basic)$/;"	f	class:Simulator
Init	src/Look/FontDescription.cpp	/^FontDescription::Init(const TCHAR *face,$/;"	f	class:FontDescription
Init	src/ResourceLoader.cpp	/^ResourceLoader::Init(HINSTANCE hInstance)$/;"	f	class:ResourceLoader
Init	src/event/net/cares/Init.cxx	/^Init::Init()$/;"	f	class:Cares::Init
Init	src/event/net/cares/Init.hxx	/^class Init {$/;"	c	namespace:Cares
InitALSADeviceName	src/Audio/ALSAEnv.cpp	/^static const char *InitALSADeviceName()$/;"	f	namespace:ALSAEnv
InitALSALatency	src/Audio/ALSAEnv.cpp	/^static unsigned InitALSALatency()$/;"	f	namespace:ALSAEnv
InitAirspace	src/lua/Airspace.cpp	/^Lua::InitAirspace(lua_State *L)$/;"	f	class:Lua
InitAssociatePointer	src/lua/Associate.cpp	/^Lua::InitAssociatePointer(lua_State *L, const char *table)$/;"	f	class:Lua
InitBlackboard	src/lua/Blackboard.cpp	/^Lua::InitBlackboard(lua_State *L)$/;"	f	class:Lua
InitDialogs	src/lua/Dialogs.cpp	/^Lua::InitDialogs(lua_State *L)$/;"	f	class:Lua
InitExternalVolumeControl	src/Audio/VolumeController.cpp	/^VolumeController::InitExternalVolumeControl(unsigned initial_vol_percent)$/;"	f	class:VolumeController
InitInputEvent	src/lua/InputEvent.cpp	/^Lua::InitInputEvent(lua_State *L)$/;"	f	class:Lua
InitLanguage	src/Language/LanguageGlue.cpp	/^InitLanguage()$/;"	f
InitLegacy	src/lua/Legacy.cpp	/^Lua::InitLegacy(lua_State *L)$/;"	f	class:Lua
InitLog	src/lua/Log.cpp	/^Lua::InitLog(lua_State *L)$/;"	f	class:Lua
InitLogger	src/lua/Logger.cpp	/^Lua::InitLogger(lua_State *L)$/;"	f	class:Lua
InitMap	src/lua/Map.cpp	/^Lua::InitMap(lua_State *L)$/;"	f	class:Lua
InitMenu	src/Form/TabMenuDisplay.cpp	/^TabMenuDisplay::InitMenu(const TabMenuGroup groups[], unsigned n_groups)$/;"	f	class:TabMenuDisplay
InitPersistent	src/lua/Persistent.cpp	/^Lua::InitPersistent(lua_State *L)$/;"	f	class:Lua
InitReplay	src/lua/Replay.cpp	/^Lua::InitReplay(lua_State *L)$/;"	f	class:Lua
InitSettings	src/lua/Settings.cpp	/^Lua::InitSettings(lua_State *L)$/;"	f	class:Lua
InitShaders	src/ui/canvas/opengl/Shaders.cpp	/^OpenGL::InitShaders()$/;"	f	class:OpenGL
InitTargetPoints	src/Dialogs/Task/TargetDialog.cpp	/^TargetWidget::InitTargetPoints(int _target_point)$/;"	f	class:TargetWidget
InitTask	src/lua/Task.cpp	/^Lua::InitTask(lua_State *L)$/;"	f	class:Lua
InitThreadDebug	src/thread/Debug.cpp	/^InitThreadDebug()$/;"	f
InitThreadDebug	src/thread/Debug.hpp	/^InitThreadDebug()$/;"	f
InitTimer	src/lua/Timer.cpp	/^Lua::InitTimer(lua_State *L)$/;"	f	class:Lua
InitTracking	src/lua/Tracking.cpp	/^Lua::InitTracking(lua_State *L)$/;"	f	class:Lua
InitUsb	src/Android/Nook.cpp	/^Nook::InitUsb()$/;"	f	class:Nook
InitWind	src/lua/Wind.cpp	/^Lua::InitWind(lua_State *L)$/;"	f	class:Lua
InitialOrientation	src/ui/window/TopWindow.hpp	/^  void InitialOrientation(DisplayOrientation orientation) {$/;"	f	class:UI::TopWindowStyle
Initialise	src/Android/BMP085Device.cpp	/^BMP085Device::Initialise(JNIEnv *env)$/;"	f	class:BMP085Device
Initialise	src/Android/Bitmap.cpp	/^AndroidBitmap::Initialise(JNIEnv *env)$/;"	f	class:AndroidBitmap
Initialise	src/Android/BluetoothHelper.cpp	/^BluetoothHelper::Initialise(JNIEnv *env)$/;"	f	class:BluetoothHelper
Initialise	src/Android/Environment.cpp	/^Environment::Initialise(JNIEnv *env)$/;"	f	class:Environment
Initialise	src/Android/GliderLink.cpp	/^GliderLink::Initialise(JNIEnv *env)$/;"	f	class:GliderLink
Initialise	src/Android/I2CbaroDevice.cpp	/^I2CbaroDevice::Initialise(JNIEnv *env)$/;"	f	class:I2CbaroDevice
Initialise	src/Android/IOIOHelper.cpp	/^IOIOHelper::Initialise(JNIEnv *env)$/;"	f	class:IOIOHelper
Initialise	src/Android/InternalSensors.cpp	/^InternalSensors::Initialise(JNIEnv *env)$/;"	f	class:InternalSensors
Initialise	src/Android/NativeBMP085Listener.cpp	/^NativeBMP085Listener::Initialise(JNIEnv *env)$/;"	f	class:NativeBMP085Listener
Initialise	src/Android/NativeI2CbaroListener.cpp	/^NativeI2CbaroListener::Initialise(JNIEnv *env)$/;"	f	class:NativeI2CbaroListener
Initialise	src/Android/NativeInputListener.cpp	/^NativeInputListener::Initialise(JNIEnv *env)$/;"	f	class:NativeInputListener
Initialise	src/Android/NativeLeScanCallback.cpp	/^NativeLeScanCallback::Initialise(JNIEnv *env)$/;"	f	class:NativeLeScanCallback
Initialise	src/Android/NativeNunchuckListener.cpp	/^NativeNunchuckListener::Initialise(JNIEnv *env)$/;"	f	class:NativeNunchuckListener
Initialise	src/Android/NativePortListener.cpp	/^NativePortListener::Initialise(JNIEnv *env)$/;"	f	class:NativePortListener
Initialise	src/Android/NativeView.cpp	/^NativeView::Initialise(JNIEnv *env)$/;"	f	class:NativeView
Initialise	src/Android/NativeVoltageListener.cpp	/^NativeVoltageListener::Initialise(JNIEnv *env)$/;"	f	class:NativeVoltageListener
Initialise	src/Android/NunchuckDevice.cpp	/^NunchuckDevice::Initialise(JNIEnv *env)$/;"	f	class:NunchuckDevice
Initialise	src/Android/PortBridge.cpp	/^PortBridge::Initialise(JNIEnv *env)$/;"	f	class:PortBridge
Initialise	src/Android/SoundUtil.cpp	/^SoundUtil::Initialise(JNIEnv *env)$/;"	f	class:SoundUtil
Initialise	src/Android/TextUtil.cpp	/^TextUtil::Initialise(JNIEnv *_env)$/;"	f	class:TextUtil
Initialise	src/Android/Vibrator.cpp	/^Vibrator::Initialise(JNIEnv *env)$/;"	f	class:Vibrator
Initialise	src/Android/VoltageDevice.cpp	/^VoltageDevice::Initialise(JNIEnv *env)$/;"	f	class:VoltageDevice
Initialise	src/Audio/SLES/Init.cpp	/^SLES::Initialise()$/;"	f	class:SLES
Initialise	src/Audio/VarioGlue.cpp	/^AudioVarioGlue::Initialise()$/;"	f	class:AudioVarioGlue
Initialise	src/Computer/GlideComputer.cpp	/^GlideComputer::Initialise()$/;"	f	class:GlideComputer
Initialise	src/Engine/Route/RoutePolar.cpp	/^RoutePolar::Initialise(const GlideSettings &settings, const GlidePolar& polar,$/;"	f	class:RoutePolar
Initialise	src/Engine/Route/RoutePolars.cpp	/^RoutePolars::Initialise(const GlideSettings &settings, const GlidePolar &polar,$/;"	f	class:RoutePolars
Initialise	src/Look/AircraftLook.cpp	/^AircraftLook::Initialise()$/;"	f	class:AircraftLook
Initialise	src/Look/AirspaceLook.cpp	/^AirspaceClassLook::Initialise(const AirspaceClassRendererSettings &settings)$/;"	f	class:AirspaceClassLook
Initialise	src/Look/AirspaceLook.cpp	/^AirspaceLook::Initialise(const AirspaceRendererSettings &settings,$/;"	f	class:AirspaceLook
Initialise	src/Look/ButtonLook.cpp	/^ButtonLook::Initialise(const Font &_font)$/;"	f	class:ButtonLook
Initialise	src/Look/ChartLook.cpp	/^ChartLook::Initialise()$/;"	f	class:ChartLook
Initialise	src/Look/CheckBoxLook.cpp	/^CheckBoxLook::Initialise(const Font &_font)$/;"	f	class:CheckBoxLook
Initialise	src/Look/ClimbPercentLook.cpp	/^ClimbPercentLook::Initialise()$/;"	f	class:ClimbPercentLook
Initialise	src/Look/CrossSectionLook.cpp	/^CrossSectionLook::Initialise(const Font &_grid_font)$/;"	f	class:CrossSectionLook
Initialise	src/Look/DialogLook.cpp	/^DialogLook::Initialise()$/;"	f	class:DialogLook
Initialise	src/Look/FinalGlideBarLook.cpp	/^FinalGlideBarLook::Initialise(const Font &_font)$/;"	f	class:FinalGlideBarLook
Initialise	src/Look/FlarmTrafficLook.cpp	/^FlarmTrafficLook::Initialise(const TrafficLook &other, bool small, bool inverse)$/;"	f	class:FlarmTrafficLook
Initialise	src/Look/GestureLook.cpp	/^GestureLook::Initialise()$/;"	f	class:GestureLook
Initialise	src/Look/HorizonLook.cpp	/^HorizonLook::Initialise()$/;"	f	class:HorizonLook
Initialise	src/Look/IconLook.cpp	/^IconLook::Initialise()$/;"	f	class:IconLook
Initialise	src/Look/InfoBoxLook.cpp	/^InfoBoxLook::Initialise(bool _inverse, bool use_colors,$/;"	f	class:InfoBoxLook
Initialise	src/Look/Look.cpp	/^Look::Initialise(const Font &map_font)$/;"	f	class:Look
Initialise	src/Look/MapLook.cpp	/^MapLook::Initialise(const MapSettings &settings,$/;"	f	class:MapLook
Initialise	src/Look/NOAALook.cpp	/^NOAALook::Initialise()$/;"	f	class:NOAALook
Initialise	src/Look/OverlayLook.cpp	/^OverlayLook::Initialise(const Font &font, const Font &bold_font)$/;"	f	class:OverlayLook
Initialise	src/Look/TaskLook.cpp	/^TaskLook::Initialise()$/;"	f	class:TaskLook
Initialise	src/Look/TerminalLook.cpp	/^TerminalLook::Initialise()$/;"	f	class:TerminalLook
Initialise	src/Look/ThermalAssistantLook.cpp	/^ThermalAssistantLook::Initialise(bool small, bool inverse)$/;"	f	class:ThermalAssistantLook
Initialise	src/Look/ThermalBandLook.cpp	/^ThermalBandLook::Initialise(bool _inverse, Color sky_color)$/;"	f	class:ThermalBandLook
Initialise	src/Look/TopographyLook.cpp	/^TopographyLook::Initialise()$/;"	f	class:TopographyLook
Initialise	src/Look/TraceHistoryLook.cpp	/^TraceHistoryLook::Initialise(bool _inverse)$/;"	f	class:TraceHistoryLook
Initialise	src/Look/TrafficLook.cpp	/^TrafficLook::Initialise(const Font &_font)$/;"	f	class:TrafficLook
Initialise	src/Look/TrailLook.cpp	/^TrailLook::Initialise(const TrailSettings &settings)$/;"	f	class:TrailLook
Initialise	src/Look/VarioBarLook.cpp	/^VarioBarLook::Initialise(const Font &_font)$/;"	f	class:VarioBarLook
Initialise	src/Look/VarioLook.cpp	/^VarioLook::Initialise(bool _inverse, bool _colors,$/;"	f	class:VarioLook
Initialise	src/Look/WaveLook.cpp	/^WaveLook::Initialise()$/;"	f	class:WaveLook
Initialise	src/Look/WaypointLook.cpp	/^WaypointLook::Initialise(const WaypointRendererSettings &settings,$/;"	f	class:WaypointLook
Initialise	src/Look/WindArrowLook.cpp	/^WindArrowLook::Initialise(const Font &_font, bool inverse)$/;"	f	class:WindArrowLook
Initialise	src/MainWindow.cpp	/^MainWindow::Initialise()$/;"	f	class:MainWindow
Initialise	src/Widget/ManagedWidget.cpp	/^ManagedWidget::Initialise(ContainerWindow &_parent, const PixelRect &_position)$/;"	f	class:ManagedWidget
Initialise	src/java/InputStream.cxx	/^Java::InputStream::Initialise(JNIEnv *env)$/;"	f	class:Java::InputStream
Initialise	src/java/Object.cxx	/^Java::Object::Initialise(JNIEnv *env)$/;"	f	class:Java::Object
Initialise	src/java/URL.cxx	/^Java::URL::Initialise(JNIEnv *env)$/;"	f	class:Java::URL
Initialise	src/java/URL.cxx	/^Java::URLConnection::Initialise(JNIEnv *env)$/;"	f	class:Java::URLConnection
Initialise	src/net/http/Init.cpp	/^Net::Initialise(EventLoop &event_loop)$/;"	f	class:Net
Initialise	src/ui/canvas/freetype/Font.cpp	/^Font::Initialise()$/;"	f	class:Font
Initialise	src/ui/canvas/freetype/Init.cpp	/^FreeType::Initialise()$/;"	f	class:FreeType
Initialise	src/ui/canvas/opengl/FBO.cpp	/^FBO::Initialise()$/;"	f	class:FBO
Initialise	src/ui/canvas/opengl/Init.cpp	/^OpenGL::Initialise()$/;"	f	class:OpenGL
Initialise	src/util/MD5.cpp	/^MD5::Initialise()$/;"	f	class:MD5
Initialise	src/util/MD5.hpp	/^  void Initialise(const State &_state) {$/;"	f	class:MD5
InitialiseAsioThread	src/io/async/GlobalAsioThread.cpp	/^InitialiseAsioThread()$/;"	f
InitialiseConfigured	src/Look/Look.cpp	/^Look::InitialiseConfigured(const UISettings &settings,$/;"	f	class:Look
InitialiseConfigured	src/MainWindow.cpp	/^MainWindow::InitialiseConfigured()$/;"	f	class:MainWindow
InitialiseDataPath	src/LocalPath.cpp	/^InitialiseDataPath()$/;"	f
InitialiseLogFonts	src/Look/DefaultFonts.cpp	/^InitialiseLogFonts(FontSettings &settings)$/;"	f	file:
InitialisePCMMixer	src/Audio/GlobalPCMMixer.cpp	/^InitialisePCMMixer(EventLoop &event_loop)$/;"	f
InitialisePCMMixer	src/Audio/GlobalPCMMixer.hpp	/^InitialisePCMMixer(EventLoop &)$/;"	f
InitialisePCMResourcePlayer	src/Audio/GlobalPCMResourcePlayer.cpp	/^InitialisePCMResourcePlayer()$/;"	f
InitialisePCMResourcePlayer	src/Audio/GlobalPCMResourcePlayer.hpp	/^InitialisePCMResourcePlayer()$/;"	f
InitialiseTTY	src/ui/canvas/tty/TopCanvas.cpp	/^TopCanvas::InitialiseTTY()$/;"	f	class:TopCanvas
InitialiseVolumeController	src/Audio/GlobalVolumeController.cpp	/^InitialiseVolumeController()$/;"	f
InitialiseVolumeController	src/Audio/GlobalVolumeController.hpp	/^InitialiseVolumeController()$/;"	f
Initialize	src/Computer/GlideRatioCalculator.cpp	/^GlideRatioCalculator::Initialize(const ComputerSettings &settings)$/;"	f	class:GlideRatioCalculator
Initialize	src/Logger/GRecord.cpp	/^GRecord::Initialize()$/;"	f	class:GRecord
Initialize	src/Look/DefaultFonts.cpp	/^Fonts::Initialize()$/;"	f	class:Fonts
InputBits	src/NMEA/VegaSwitchState.hpp	/^  enum InputBits {$/;"	g	struct:VegaSwitchState
InputConfig	src/Input/InputConfig.hpp	/^struct InputConfig {$/;"	s
InputEventQueue	src/ui/event/poll/InputQueue.cpp	/^InputEventQueue::InputEventQueue(EventQueue &queue)$/;"	f	class:UI::InputEventQueue
InputEvents	src/Input/InputEvents.cpp	/^namespace InputEvents$/;"	n	file:
InputEvents	src/Input/InputEvents.hpp	/^namespace InputEvents$/;"	n
InputEvents	src/Input/InputLookup.hpp	/^namespace InputEvents$/;"	n
InputEvents	src/Input/InputQueue.hpp	/^namespace InputEvents$/;"	n
InputFile	src/Dialogs/Settings/Panels/InterfaceConfigPanel.cpp	/^  InputFile,$/;"	e	enum:ControlIndex	file:
InputFile	src/Profile/ProfileKeys.cpp	/^const char InputFile[] = "InputFile"; \/\/ pL$/;"	m	namespace:ProfileKeys	file:
InputFileChanged	src/UtilsSettings.cpp	/^bool InputFileChanged = false;$/;"	v
InputStream	src/java/InputStream.hxx	/^class InputStream {$/;"	c	namespace:Java
InsMod	src/Kobo/System.cpp	/^InsMod(const char *path, Args... args)$/;"	f	file:
Insert	src/Cloud/Client.cpp	/^CloudClientContainer::Insert(CloudClient &client)$/;"	f	class:CloudClientContainer
Insert	src/Cloud/Thermal.cpp	/^CloudThermalContainer::Insert(CloudThermal &thermal)$/;"	f	class:CloudThermalContainer
Insert	src/Engine/Task/Factory/AbstractTaskFactory.cpp	/^AbstractTaskFactory::Insert(const OrderedTaskPoint &new_tp,$/;"	f	class:AbstractTaskFactory
Insert	src/Engine/Task/Ordered/OrderedTask.cpp	/^OrderedTask::Insert(const OrderedTaskPoint &new_tp, const unsigned position)$/;"	f	class:OrderedTask
Insert	src/FLARM/FlarmNetDatabase.cpp	/^FlarmNetDatabase::Insert(const FlarmNetRecord &record)$/;"	f	class:FlarmNetDatabase
Insert	src/lua/InputEvent.cpp	/^  bool Insert(T code, LuaInputEvent* event) {$/;"	f	class:LuaEventRegistry
InsertInTask	src/Dialogs/Waypoint/WaypointCommandsWidget.cpp	/^InsertInTask(ProtectedTaskManager &task_manager,$/;"	f	file:
InsertInTask	src/Task/MapTaskManager.cpp	/^MapTaskManager::InsertInTask(WaypointPtr &&waypoint)$/;"	f	class:MapTaskManager
Inside	src/Engine/Airspace/AbstractAirspace.cpp	/^AbstractAirspace::Inside(const AircraftState &state) const$/;"	f	class:AbstractAirspace
Inside	src/Engine/Airspace/AbstractAirspace.cpp	/^AbstractAirspace::Inside(const AltitudeState &state) const$/;"	f	class:AbstractAirspace
Inside	src/Engine/Airspace/AirspaceCircle.cpp	/^AirspaceCircle::Inside(const GeoPoint &loc) const$/;"	f	class:AirspaceCircle
Inside	src/Engine/Airspace/AirspacePolygon.cpp	/^AirspacePolygon::Inside(const GeoPoint &loc) const$/;"	f	class:AirspacePolygon
InsideOthers	src/Engine/Route/AirspaceRoute.cpp	/^AirspaceRoute::InsideOthers(const AGeoPoint &origin) const$/;"	f	class:AirspaceRoute
InstantSpeed	src/Engine/GlideSolvers/InstantSpeed.cpp	/^GlideResult::InstantSpeed(const AircraftState& aircraft,$/;"	f	class:GlideResult
IntPoint2D	src/Math/Point2D.hpp	/^struct IntPoint2D : Point2D<int> {$/;"	s	struct:UnsignedPoint2D
Integrate	src/Replay/AircraftSim.cpp	/^AircraftSim::Integrate(const Angle heading, const double timestep)$/;"	f	class:AircraftSim
Intercept	src/Engine/Airspace/AbstractAirspace.cpp	/^AbstractAirspace::Intercept(const AircraftState &state,$/;"	f	class:AbstractAirspace
Intercept	src/Engine/Airspace/AirspaceIntersectionVisitor.cpp	/^AirspaceIntersectionVisitor::Intercept(const AbstractAirspace &as,$/;"	f	class:AirspaceIntersectionVisitor
InterceptHorizontal	src/Engine/Airspace/AbstractAirspace.cpp	/^AbstractAirspace::InterceptHorizontal(const AircraftState &state,$/;"	f	class:AbstractAirspace
InterceptVertical	src/Engine/Airspace/AbstractAirspace.cpp	/^AbstractAirspace::InterceptVertical(const AircraftState &state,$/;"	f	class:AbstractAirspace
InterfaceBlackboard	src/Blackboard/InterfaceBlackboard.hpp	/^class InterfaceBlackboard : public LiveBlackboard$/;"	c
InterfaceConfigPanel	src/Dialogs/Settings/Panels/InterfaceConfigPanel.cpp	/^  InterfaceConfigPanel()$/;"	f	class:final
IntermediatePoint	src/Geo/GeoPoint.cpp	/^GeoPoint::IntermediatePoint(const GeoPoint &destination, $/;"	f	class:GeoPoint
IntermediateTaskPoint	src/Engine/Task/Ordered/Points/IntermediatePoint.cpp	/^IntermediateTaskPoint::IntermediateTaskPoint(TaskPointType _type,$/;"	f	class:IntermediateTaskPoint
IntermediateTaskPoint	src/Engine/Task/Ordered/Points/IntermediatePoint.hpp	/^class IntermediateTaskPoint: $/;"	c
Internal	src/ui/canvas/opengl/Color.hpp	/^  struct Internal {};$/;"	s	class:Color
InternalSensors	src/Android/InternalSensors.cpp	/^InternalSensors::InternalSensors(JNIEnv *env, jobject gps_obj,$/;"	f	class:InternalSensors
InternalSensors	src/Android/InternalSensors.hpp	/^class InternalSensors {$/;"	c
InternalSensors	src/Apple/InternalSensors.cpp	/^InternalSensors::InternalSensors(unsigned int _index)$/;"	f	class:InternalSensors
InternalSensors	src/Apple/InternalSensors.hpp	/^class InternalSensors {$/;"	c
Interpolate	src/Geo/GeoPoint.cpp	/^GeoPoint::Interpolate(const GeoPoint &end, const double t) const$/;"	f	class:GeoPoint
Interpolate	src/Math/Line2D.hpp	/^  constexpr Point Interpolate(double ratio) const {$/;"	f	struct:Line2D
Interpolate	src/Replay/CatmullRomInterpolator.hpp	/^  Interpolate(double _time) const$/;"	f	class:CatmullRomInterpolator
Interpolate	src/ui/canvas/Ramp.cpp	/^Interpolate(RGB8Color c1, RGB8Color c2,$/;"	f	file:
Interpolate	src/ui/canvas/Ramp.cpp	/^Interpolate(int h, const ColorRamp *c1, const ColorRamp *c2,$/;"	f	file:
InterpolateLocationMinMax	src/Engine/Task/Points/SampledTaskPoint.hpp	/^  GeoPoint InterpolateLocationMinMax(double p) const {$/;"	f	class:SampledTaskPoint
Intersect	src/Geo/Flat/FlatEllipse.cpp	/^FlatEllipse::Intersect(const FlatLine &line, FlatPoint &i1, FlatPoint &i2) const$/;"	f	class:FlatEllipse
IntersectCircle	src/Geo/Flat/FlatLine.cpp	/^FlatLine::IntersectCircle(const double r, const FlatPoint c,$/;"	f	class:FlatLine
IntersectExtended	src/Geo/Flat/FlatEllipse.cpp	/^FlatEllipse::IntersectExtended(const FlatPoint &pe, FlatPoint &i1,$/;"	f	class:FlatEllipse
IntersectExtended	src/Geo/GeoEllipse.cpp	/^GeoEllipse::IntersectExtended(const GeoPoint &p, GeoPoint &i1,$/;"	f	class:GeoEllipse
IntersectOriginCircle	src/Geo/Flat/FlatLine.cpp	/^FlatLine::IntersectOriginCircle(const double r,$/;"	f	class:FlatLine
IntersectWith	src/Geo/GeoBounds.cpp	/^GeoBounds::IntersectWith(const GeoBounds &other)$/;"	f	class:GeoBounds
Intersection	src/Engine/Airspace/AirspaceIntersectSort.hpp	/^  typedef std::pair<double, GeoPoint> Intersection;$/;"	t	class:AirspaceIntersectSort
Intersection	src/Engine/Airspace/AirspaceWarningManager.cpp	/^  void Intersection(const AbstractAirspace& airspace) {$/;"	f	class:final
Intersection	src/Engine/Route/RoutePlanner.cpp	/^RoutePlanner::Intersection(const AGeoPoint& origin,$/;"	f	class:RoutePlanner
Intersection	src/Engine/Route/RoutePolars.cpp	/^RoutePolars::Intersection(const AGeoPoint &origin,$/;"	f	class:RoutePolars
Intersection	src/Task/ProtectedRoutePlanner.cpp	/^ProtectedRoutePlanner::Intersection(const AGeoPoint &origin,$/;"	f	class:ProtectedRoutePlanner
Intersection	src/Task/RoutePlannerGlue.cpp	/^RoutePlannerGlue::Intersection(const AGeoPoint &origin,$/;"	f	class:RoutePlannerGlue
Intersection	src/Terrain/Intersection.cpp	/^RasterTileCache::Intersection(const SignedRasterLocation origin,$/;"	f	class:RasterTileCache
Intersection	src/Terrain/RasterMap.cpp	/^RasterMap::Intersection(const GeoPoint& origin,$/;"	f	class:RasterMap
Intersects	src/Engine/Airspace/Airspace.cpp	/^Airspace::Intersects(const GeoPoint &g1, const GeoPoint &end,$/;"	f	class:Airspace
Intersects	src/Engine/Airspace/AirspaceCircle.cpp	/^AirspaceCircle::Intersects(const GeoPoint &start, const GeoPoint &end,$/;"	f	class:AirspaceCircle
Intersects	src/Engine/Airspace/AirspacePolygon.cpp	/^AirspacePolygon::Intersects(const GeoPoint &start, const GeoPoint &end,$/;"	f	class:AirspacePolygon
Intersects	src/Geo/Flat/FlatBoundingBox.cpp	/^FlatBoundingBox::Intersects(const FlatRay& ray) const$/;"	f	class:FlatBoundingBox
Intersects	src/Geo/Flat/FlatRay.cpp	/^FlatRay::Intersects(const FlatRay &that) const$/;"	f	class:FlatRay
Intersects	src/Task/ProtectedTaskManager.cpp	/^ReachIntersectionTest::Intersects(const AGeoPoint& destination)$/;"	f	class:ReachIntersectionTest
IntersectsDistinct	src/Geo/Flat/FlatRay.cpp	/^FlatRay::IntersectsDistinct(const FlatRay& that) const$/;"	f	class:FlatRay
IntersectsRatio	src/Geo/Flat/FlatRay.cpp	/^FlatRay::IntersectsRatio(const FlatRay &that) const$/;"	f	class:FlatRay
IntersectsWith	src/Geo/SearchPointVector.cpp	/^SearchPointVector::IntersectsWith(const FlatRay &ray) const$/;"	f	class:SearchPointVector
Interval_Check	src/Computer/ConditionMonitor/ConditionMonitor.hpp	/^  double Interval_Check;$/;"	m	class:ConditionMonitor
Interval_Notification	src/Computer/ConditionMonitor/ConditionMonitor.hpp	/^  double Interval_Notification;$/;"	m	class:ConditionMonitor
IntrusiveList	src/util/IntrusiveList.hxx	/^class IntrusiveList {$/;"	c
IntrusiveListHook	src/util/IntrusiveList.hxx	/^class IntrusiveListHook {$/;"	c
IntrusiveListNode	src/util/IntrusiveList.hxx	/^struct IntrusiveListNode {$/;"	s
Invalid	src/Engine/Airspace/AirspaceInterceptSolution.hpp	/^  static AirspaceInterceptSolution Invalid() {$/;"	f	struct:AirspaceInterceptSolution
Invalid	src/Engine/Contest/Solvers/TraceManager.cpp	/^   predicted(TracePoint::Invalid())$/;"	f
Invalid	src/Engine/GlideSolvers/GlidePolar.hpp	/^  static GlidePolar Invalid() {$/;"	f	class:GlidePolar
Invalid	src/Engine/Trace/Point.hpp	/^  static TracePoint Invalid() {$/;"	f	class:TracePoint
Invalid	src/Geo/GeoBounds.hpp	/^  static GeoBounds Invalid() {$/;"	f	class:GeoBounds
Invalid	src/Geo/GeoPoint.hpp	/^  static GeoPoint Invalid() {$/;"	f	struct:GeoPoint
Invalid	src/Geo/GeoVector.hpp	/^  static GeoVector Invalid() {$/;"	f	struct:GeoVector
Invalid	src/Geo/SearchPoint.hpp	/^  static SearchPoint Invalid() {$/;"	f	class:SearchPoint
Invalid	src/Renderer/WaypointIconRenderer.hpp	/^    Invalid,$/;"	e	enum:WaypointIconRenderer::Reachability
Invalid	src/Renderer/WaypointRenderer.hpp	/^    Invalid,$/;"	e	enum:WaypointRenderer::Reachability
Invalid	src/Terrain/Height.hpp	/^  static constexpr TerrainHeight Invalid() {$/;"	f	class:TerrainHeight
Invalid	src/time/BrokenDate.hpp	/^  static BrokenDate Invalid() {$/;"	f	struct:BrokenDate
Invalid	src/time/BrokenDateTime.hpp	/^  static BrokenDateTime Invalid() {$/;"	f	struct:BrokenDateTime
Invalid	src/time/BrokenTime.hpp	/^  static BrokenTime Invalid() {$/;"	f	struct:BrokenTime
Invalid	src/time/RoughTime.hpp	/^  static constexpr RoughTime Invalid() {$/;"	f	class:RoughTime
Invalid	src/time/RoughTime.hpp	/^  static constexpr RoughTimeSpan Invalid() {$/;"	f	class:RoughTimeSpan
Invalidate	src/Renderer/TransparentRendererCache.hpp	/^  void Invalidate() {$/;"	f	class:TransparentRendererCache
Invalidate	src/Terrain/RasterRenderer.hpp	/^  void Invalidate() {$/;"	f	class:RasterRenderer
InvalidateBuffer	src/Dialogs/Task/Manager/TaskMapButtonRenderer.hpp	/^  void InvalidateBuffer() {$/;"	f	class:TaskMapButtonRenderer
InvalidateButton	src/Form/TabMenuDisplay.hpp	/^  void InvalidateButton(MenuTabIndex i) {$/;"	f	class:final
InvalidateLayout	src/Form/TabDisplay.hpp	/^  void InvalidateLayout() {$/;"	f	class:TabButton
InvalidateLayout	src/Renderer/TabRenderer.hpp	/^  void InvalidateLayout() {$/;"	f	class:TabRenderer
InvalidateLayout	src/Renderer/TextRenderer.hpp	/^  void InvalidateLayout() {}$/;"	f	class:TextRenderer
InvalidateTaskView	src/Dialogs/Task/Manager/TaskManagerDialog.cpp	/^TaskManagerDialog::InvalidateTaskView()$/;"	f	class:TaskManagerDialog
Invert	src/ui/canvas/PortableColor.hpp	/^  constexpr RGB8Color Invert() const {$/;"	f	class:RGB8Color
InvertRectangle	src/ui/canvas/gdi/Canvas.hpp	/^  void InvertRectangle(const PixelRect &rc) {$/;"	f	class:Canvas
InvertRectangle	src/ui/canvas/gdi/Canvas.hpp	/^  void InvertRectangle(const RECT r) {$/;"	f	class:Canvas
InvertRectangle	src/ui/canvas/memory/Canvas.cpp	/^Canvas::InvertRectangle(PixelRect r)$/;"	f	class:Canvas
InvertRectangle	src/ui/canvas/opengl/Canvas.cpp	/^Canvas::InvertRectangle(PixelRect r)$/;"	f	class:Canvas
Invoke	src/ui/event/shared/Timer.cpp	/^Timer::Invoke()$/;"	f	class:UI::Timer
InvokeTimer	src/ui/event/sdl/Queue.cpp	/^InvokeTimer(void *ctx)$/;"	f	namespace:UI
IsAATStateReady	src/Engine/Task/Ordered/TaskAdvance.cpp	/^TaskAdvance::IsAATStateReady(const bool has_entered,$/;"	f	class:TaskAdvance
IsAbove	src/Engine/Airspace/AirspaceAltitude.cpp	/^AirspaceAltitude::IsAbove(const AltitudeState &state, const double margin) const$/;"	f	class:AirspaceAltitude
IsAboveSlider	src/Form/ScrollBar.hpp	/^  bool IsAboveSlider(int y) const {$/;"	f	class:ScrollBar
IsAbsolute	src/system/Path.cpp	/^Path::IsAbsolute() const$/;"	f	class:Path
IsAbsolute	src/system/Path.hpp	/^  bool IsAbsolute() const {$/;"	f	class:AllocatedPath
IsAchievable	src/Engine/GlideSolvers/GlideResult.hpp	/^  bool IsAchievable() const {$/;"	f	struct:GlideResult
IsAchievable	src/Engine/Route/RoutePolars.cpp	/^RoutePolars::IsAchievable(const RouteLink& link, const bool check_ceiling) const$/;"	f	class:RoutePolars
IsAchievable	src/Engine/Task/Stats/ElementStat.hpp	/^  bool IsAchievable() const {$/;"	f	struct:ElementStat
IsAckExpired	src/Engine/Airspace/AirspaceWarning.cpp	/^AirspaceWarning::IsAckExpired() const$/;"	f	class:AirspaceWarning
IsActive	src/Engine/Airspace/AbstractAirspace.hpp	/^  bool IsActive() const {$/;"	f	class:AbstractAirspace
IsActive	src/Engine/Airspace/AirspaceWarningManager.cpp	/^AirspaceWarningManager::IsActive(const AbstractAirspace &airspace) const$/;"	f	class:AirspaceWarningManager
IsActive	src/Logger/LoggerImpl.hpp	/^  bool IsActive() const {$/;"	f	class:LoggerImpl
IsActive	src/Replay/Replay.hpp	/^  bool IsActive() const {$/;"	f	class:final
IsActive	src/ui/event/PeriodicTimer.hpp	/^  bool IsActive() const {$/;"	f	class:UI::final
IsAddressFamilyBetter	src/net/AddressInfo.cxx	/^IsAddressFamilyBetter(int previous, int next)$/;"	f	file:
IsAirport	src/Engine/Waypoint/Waypoint.hpp	/^  IsAirport() const$/;"	f	struct:Waypoint
IsAirspaceAltitudeVisible	src/Airspace/AirspaceVisibility.cpp	/^IsAirspaceAltitudeVisible(const AbstractAirspace &airspace,$/;"	f
IsAirspaceEnabled	src/Engine/Route/Config.hpp	/^  bool IsAirspaceEnabled() const {$/;"	f	struct:RoutePlannerConfig
IsAirspaceEnabled	src/Engine/Route/RoutePolars.hpp	/^  bool IsAirspaceEnabled() const {$/;"	f	class:RoutePolars
IsAirspaceTypeVisible	src/Airspace/AirspaceVisibility.cpp	/^IsAirspaceTypeVisible(const AbstractAirspace &airspace,$/;"	f
IsAlive	src/Device/Descriptor.cpp	/^DeviceDescriptor::IsAlive() const$/;"	f	class:DeviceDescriptor
IsAllowedIGCChar	src/Device/Driver/Volkslogger/vlapihlp.cpp	/^IsAllowedIGCChar(char ch)$/;"	f	file:
IsAncientHardware	src/Asset.hpp	/^IsAncientHardware()$/;"	f
IsAndroid	src/Asset.hpp	/^IsAndroid()$/;"	f
IsAndroidInternalGPS	src/Device/Config.hpp	/^  bool IsAndroidInternalGPS() const {$/;"	f	struct:DeviceConfig
IsAngleInSector	src/Engine/Task/ObservationZones/SectorZone.cpp	/^SectorZone::IsAngleInSector(const Angle b) const$/;"	f	class:SectorZone
IsApple	src/Asset.hpp	/^IsApple()$/;"	f
IsArmed	src/Engine/Task/Ordered/TaskAdvance.hpp	/^  bool IsArmed() const {$/;"	f	class:TaskAdvance
IsAt	src/ui/window/custom/WList.cpp	/^IsAt(Window &w, PixelPoint p)$/;"	f	file:
IsAutoMCCruiseEnabled	src/Engine/Task/TaskBehaviour.hpp	/^  bool IsAutoMCCruiseEnabled() const {$/;"	f	struct:TaskBehaviour
IsAutoMCFinalGlideEnabled	src/Engine/Task/TaskBehaviour.hpp	/^  bool IsAutoMCFinalGlideEnabled() const {$/;"	f	struct:TaskBehaviour
IsAutoWindEnabled	src/Computer/Wind/Settings.hpp	/^  bool IsAutoWindEnabled() const {$/;"	f	struct:WindSettings
IsAvailable	src/Device/Config.cpp	/^DeviceConfig::IsAvailable() const$/;"	f	class:DeviceConfig
IsBadSignal	src/Logger/LoggerFRecord.hpp	/^  static bool IsBadSignal(const GPSState &gps) {$/;"	f	class:LoggerFRecord
IsBallastable	src/Engine/GlideSolvers/GlidePolar.cpp	/^GlidePolar::IsBallastable() const$/;"	f	class:GlidePolar
IsBankAngleUseable	src/NMEA/Attitude.hpp	/^  bool IsBankAngleUseable() const {$/;"	f	struct:AttitudeState
IsBase	src/system/Path.cpp	/^Path::IsBase() const$/;"	f	class:Path
IsBase	src/system/Path.hpp	/^  bool IsBase() const {$/;"	f	class:AllocatedPath
IsBaseTerrain	src/Engine/Airspace/AbstractAirspace.hpp	/^  bool IsBaseTerrain() const {$/;"	f	class:AbstractAirspace
IsBelow	src/Engine/Airspace/AirspaceAltitude.cpp	/^AirspaceAltitude::IsBelow(const AltitudeState &state, const double margin) const$/;"	f	class:AirspaceAltitude
IsBelowSlider	src/Form/ScrollBar.hpp	/^  bool IsBelowSlider(int y) const {$/;"	f	class:ScrollBar
IsBetter	src/net/AddressInfo.cxx	/^IsBetter(const AddressInfo &previous, const AddressInfo &next)$/;"	f	file:
IsBetter	src/net/AddressInfo.cxx	/^IsBetter(const AddressInfo *previous, const AddressInfo &next)$/;"	f	file:
IsBigEndian	src/Audio/PCMSynthesiser.hpp	/^  bool IsBigEndian() const {$/;"	f	class:PCMSynthesiser
IsBlack	src/ui/canvas/memory/PixelTraits.hpp	/^  static constexpr bool IsBlack(color_type c) {$/;"	f	struct:BGRAPixelTraits
IsBlack	src/ui/canvas/memory/PixelTraits.hpp	/^  static constexpr bool IsBlack(color_type c) {$/;"	f	struct:GreyscalePixelTraits
IsBold	src/Look/FontDescription.hpp	/^  constexpr bool IsBold() const {$/;"	f	class:FontDescription
IsBorrowed	src/Device/Descriptor.hpp	/^  bool IsBorrowed() const {$/;"	f	class:final
IsBoundaryScored	src/Engine/Task/Points/SampledTaskPoint.hpp	/^  bool IsBoundaryScored() const {$/;"	f	class:SampledTaskPoint
IsBufferValid	src/Dialogs/Task/Manager/TaskMapButtonRenderer.hpp	/^  bool IsBufferValid(PixelSize new_size) const {$/;"	f	class:TaskMapButtonRenderer
IsBusy	src/Job/Async.hpp	/^  bool IsBusy() const {$/;"	f	class:final
IsBusy	src/thread/StandbyThread.hpp	/^  bool IsBusy() const {$/;"	f	class:StandbyThread
IsButtonEnabled	src/Menu/MenuBar.hpp	/^  bool IsButtonEnabled(unsigned i) const {$/;"	f	class:MenuBar
IsCharDev	src/Device/Port/TTYPort.cpp	/^IsCharDev(const char *path)$/;"	f	file:
IsClassEnabled	src/Engine/Airspace/AirspaceWarningConfig.hpp	/^  bool IsClassEnabled(AirspaceClass cls) const {$/;"	f	struct:AirspaceWarningConfig
IsCloseTo	src/Engine/Waypoint/Waypoint.cpp	/^Waypoint::IsCloseTo(const GeoPoint &_location, const double range) const$/;"	f	class:Waypoint
IsCloseToTarget	src/Engine/Task/Ordered/Points/AATPoint.cpp	/^AATPoint::IsCloseToTarget(const AircraftState& state, const double threshold) const$/;"	f	class:AATPoint
IsClosed	src/Engine/Task/Factory/AbstractTaskFactory.cpp	/^AbstractTaskFactory::IsClosed() const$/;"	f	class:AbstractTaskFactory
IsCondor	src/Device/Descriptor.hpp	/^  bool IsCondor() const {$/;"	f	class:final
IsConfigured	src/Device/Descriptor.hpp	/^  bool IsConfigured() const {$/;"	f	class:final
IsConnected	src/Kobo/WPASupplicant.hpp	/^  bool IsConnected() const {$/;"	f	class:WPASupplicant
IsConnected	src/Tracking/SkyLines/Client.hpp	/^  bool IsConnected() const {$/;"	f	class:SkyLinesTracking::final
IsConnected	src/Tracking/SkyLines/Glue.cpp	/^SkyLinesTracking::Glue::IsConnected() const$/;"	f	class:SkyLinesTracking::Glue
IsCovered	src/ui/window/custom/WList.cpp	/^WindowList::IsCovered(const Window &w) const$/;"	f	class:WindowList
IsCtrlKeyPressed	src/MapWindow/GlueMapWindowEvents.cpp	/^IsCtrlKeyPressed()$/;"	f	file:
IsCurrent	src/Engine/Task/Ordered/Points/OrderedTaskPoint.hpp	/^  bool IsCurrent() const {$/;"	f	class:OrderedTaskPoint
IsCursorKey	src/Android/EventBridge.cpp	/^IsCursorKey(unsigned key_code)$/;"	f	file:
IsDataPending	src/Device/Port/SerialPort.hpp	/^  bool IsDataPending() const {$/;"	f	class:SerialPort
IsDatePlausible	src/time/BrokenDateTime.hpp	/^  bool IsDatePlausible() const {$/;"	f	struct:BrokenDateTime
IsDebug	src/Asset.hpp	/^IsDebug()$/;"	f
IsDeclaration	src/XML/Node.hpp	/^  bool IsDeclaration() const {$/;"	f	class:XMLNode
IsDefault	src/Input/InputEvents.cpp	/^InputEvents::IsDefault()$/;"	f	class:InputEvents
IsDefined	src/Airspace/NearestAirspace.hpp	/^  bool IsDefined() const {$/;"	f	class:NearestAirspace
IsDefined	src/Computer/ClimbAverageCalculator.hpp	/^    bool IsDefined() const {$/;"	f	struct:ClimbAverageCalculator::HistoryItem
IsDefined	src/Computer/StateClock.hpp	/^  bool IsDefined() const {$/;"	f	class:StateClock
IsDefined	src/Computer/WaveResult.hpp	/^  bool IsDefined() const {$/;"	f	struct:WaveInfo
IsDefined	src/Device/Driver/CAI302/Protocol.hpp	/^      bool IsDefined() const {$/;"	f	struct:CAI302::FileList::FileInfo
IsDefined	src/Device/Driver/CAI302/Protocol.hpp	/^    bool IsDefined() const {$/;"	f	struct:CAI302::DateTime
IsDefined	src/Dialogs/Waypoint/WaypointList.cpp	/^  bool IsDefined() const {$/;"	f	struct:WaypointListDialogState
IsDefined	src/Engine/Airspace/SoonestAirspace.cpp	/^  bool IsDefined() const {$/;"	f	struct:SoonestAirspace
IsDefined	src/Engine/Contest/ContestResult.hpp	/^  constexpr bool IsDefined() const {$/;"	f	struct:ContestResult
IsDefined	src/Engine/GlideSolvers/GlideResult.hpp	/^  bool IsDefined() const {$/;"	f	struct:GlideResult
IsDefined	src/Engine/Task/Stats/DistanceStat.hpp	/^  bool IsDefined() const {$/;"	f	class:DistanceStat
IsDefined	src/Engine/Trace/Point.hpp	/^  bool IsDefined() const {$/;"	f	class:TracePoint
IsDefined	src/FLARM/FlarmId.hpp	/^  bool IsDefined() const {$/;"	f	class:FlarmId
IsDefined	src/FLARM/Traffic.hpp	/^  bool IsDefined() const {$/;"	f	class:FlarmTraffic::AircraftType
IsDefined	src/Form/ScrollBar.hpp	/^  bool IsDefined() const {$/;"	f	class:ScrollBar
IsDefined	src/GliderLink/Traffic.hpp	/^  bool IsDefined() const {$/;"	f	struct:GliderLinkTraffic
IsDefined	src/IGC/IGCFix.hpp	/^  bool IsDefined() const {$/;"	f	struct:IGCFix
IsDefined	src/Menu/MenuData.hpp	/^  bool IsDefined() const {$/;"	f	class:MenuItem
IsDefined	src/NMEA/ClimbInfo.hpp	/^  bool IsDefined() const {$/;"	f	struct:OneClimbInfo
IsDefined	src/NMEA/VegaSwitchState.hpp	/^  constexpr bool IsDefined() const {$/;"	f	struct:VegaSwitchState
IsDefined	src/PageSettings.hpp	/^  bool IsDefined() const {$/;"	f	struct:PageLayout
IsDefined	src/RadioFrequency.hpp	/^  constexpr bool IsDefined() const {$/;"	f	class:RadioFrequency
IsDefined	src/ResourceId.hpp	/^  constexpr bool IsDefined() const {$/;"	f	class:ResourceId
IsDefined	src/TeamCode/TeamCode.hpp	/^  bool IsDefined() const {$/;"	f	class:TeamCode
IsDefined	src/Terrain/RasterBuffer.hpp	/^  bool IsDefined() const {$/;"	f	class:RasterBuffer
IsDefined	src/Terrain/RasterMap.hpp	/^  bool IsDefined() const {$/;"	f	class:RasterMap
IsDefined	src/Terrain/RasterTile.hpp	/^  bool IsDefined() const {$/;"	f	class:RasterTile
IsDefined	src/Tracking/SkyLines/Client.hpp	/^  bool IsDefined() const {$/;"	f	class:SkyLinesTracking::final
IsDefined	src/Weather/PCMet/Overlays.hpp	/^  bool IsDefined() const {$/;"	f	struct:PCMet::Overlay
IsDefined	src/Weather/PCMet/Settings.hpp	/^    bool IsDefined() const {$/;"	f	struct:PCMetSettings::Credentials
IsDefined	src/system/ConvertPathName.hpp	/^  bool IsDefined() const {$/;"	f	class:NarrowPathName
IsDefined	src/system/ConvertPathName.hpp	/^  bool IsDefined() const {$/;"	f	class:PathName
IsDefined	src/system/DynamicLibrary.hpp	/^  bool IsDefined() const {$/;"	f	class:DynamicLibrary
IsDefined	src/time/DeltaTime.hpp	/^  bool IsDefined() const {$/;"	f	class:DeltaTime
IsDefined	src/time/PeriodClock.hpp	/^  constexpr bool IsDefined() const {$/;"	f	class:PeriodClock
IsDefined	src/time/RoughTime.hpp	/^  constexpr bool IsDefined() const {$/;"	f	class:RoughTimeSpan
IsDefined	src/ui/canvas/Bitmap.hpp	/^  bool IsDefined() const {$/;"	f	class:final
IsDefined	src/ui/canvas/Brush.hpp	/^  IsDefined() const$/;"	f	class:Brush
IsDefined	src/ui/canvas/Icon.hpp	/^  bool IsDefined() const {$/;"	f	class:MaskedIcon
IsDefined	src/ui/canvas/Pen.hpp	/^  IsDefined() const$/;"	f	class:Pen
IsDefined	src/ui/canvas/custom/TopCanvas.hpp	/^  bool IsDefined() const {$/;"	f	class:DisplayOrientation
IsDefined	src/ui/canvas/custom/UncompressedImage.hpp	/^  bool IsDefined() const {$/;"	f	class:UncompressedImage
IsDefined	src/ui/canvas/gdi/Canvas.hpp	/^  bool IsDefined() const {$/;"	f	class:Canvas
IsDefined	src/ui/canvas/memory/Canvas.hpp	/^  bool IsDefined() const {$/;"	f	class:Canvas
IsDefined	src/ui/canvas/opengl/BufferCanvas.hpp	/^  bool IsDefined() const {$/;"	f	class:DisplayOrientation
IsDefined	src/ui/canvas/opengl/Canvas.hpp	/^  bool IsDefined() const {$/;"	f	class:Canvas
IsDefined	src/util/AllocatedGrid.hxx	/^	constexpr bool IsDefined() const {$/;"	f	class:AllocatedGrid
IsDeltaConsiderable	src/Engine/Route/ReachResult.hpp	/^  bool IsDeltaConsiderable() const {$/;"	f	struct:ReachResult
IsDetected	src/FLARM/Data.hpp	/^  bool IsDetected() const {$/;"	f	struct:FlarmData
IsDirSeparator	src/Compatibility/path.h	/^IsDirSeparator(TCHAR ch)$/;"	f
IsDirectionDefined	src/Engine/Waypoint/Runway.hpp	/^  bool IsDirectionDefined() const {$/;"	f	class:Runway
IsDirty	src/Terrain/RasterMap.hpp	/^  bool IsDirty() const {$/;"	f	class:RasterMap
IsDirty	src/Terrain/RasterTileCache.hpp	/^  bool IsDirty() const {$/;"	f	class:RasterTileCache
IsDisabled	src/Device/Config.hpp	/^  bool IsDisabled() const {$/;"	f	struct:DeviceConfig
IsDisabled	src/Terrain/RasterTile.hpp	/^  bool IsDisabled() const {$/;"	f	class:RasterTile
IsDithered	src/Asset.hpp	/^IsDithered()$/;"	f
IsDots	src/system/FileUtil.cpp	/^IsDots(const TCHAR* str)$/;"	f	file:
IsDragging	src/Form/ScrollBar.hpp	/^  bool IsDragging() const {$/;"	f	class:ScrollBar
IsDrive	src/system/Path.cpp	/^IsDrive(Path::const_pointer p)$/;"	f	file:
IsDriver	src/Device/Config.hpp	/^  bool IsDriver(const TCHAR *name) const {$/;"	f	struct:DeviceConfig
IsDriver	src/Device/Descriptor.cpp	/^DeviceDescriptor::IsDriver(const TCHAR *name) const$/;"	f	class:DeviceDescriptor
IsDumpEnabled	src/Device/Descriptor.cpp	/^DeviceDescriptor::IsDumpEnabled() const$/;"	f	class:DeviceDescriptor
IsDynamic	src/Menu/MenuData.hpp	/^  bool IsDynamic() const {$/;"	f	class:MenuItem
IsEarlierThan	src/Engine/Airspace/AirspaceInterceptSolution.hpp	/^  bool IsEarlierThan(const AirspaceInterceptSolution &other) const {$/;"	f	struct:AirspaceInterceptSolution
IsEdge	src/Engine/Trace/Trace.hpp	/^    bool IsEdge() const {$/;"	f	struct:Trace::TraceDelta
IsEditable	src/Form/DigitEntry.hpp	/^    constexpr bool IsEditable() const {$/;"	f	struct:CoordinateFormat::Column
IsEmbedded	src/Asset.hpp	/^IsEmbedded()$/;"	f
IsEmpty	src/Airspace/ProtectedAirspaceWarningManager.cpp	/^ProtectedAirspaceWarningManager::IsEmpty() const$/;"	f	class:ProtectedAirspaceWarningManager
IsEmpty	src/Engine/Airspace/Airspaces.cpp	/^Airspaces::IsEmpty() const$/;"	f	class:Airspaces
IsEmpty	src/Engine/Route/FlatTriangleFan.hpp	/^  bool IsEmpty() const {$/;"	f	class:FlatTriangleFan
IsEmpty	src/Engine/Route/ReachFan.hpp	/^  bool IsEmpty() const {$/;"	f	class:ReachFan
IsEmpty	src/Engine/Waypoint/Waypoints.hpp	/^  bool IsEmpty() const {$/;"	f	class:Waypoints
IsEmpty	src/FLARM/FlarmNetDatabase.hpp	/^  bool IsEmpty() const {$/;"	f	class:FlarmNetDatabase
IsEmpty	src/FLARM/List.hpp	/^  bool IsEmpty() const {$/;"	f	struct:TrafficList
IsEmpty	src/Geo/GeoBounds.hpp	/^  constexpr bool IsEmpty() const {$/;"	f	class:GeoBounds
IsEmpty	src/GliderLink/List.hpp	/^  bool IsEmpty() const {$/;"	f	struct:GliderLinkTrafficList
IsEmpty	src/InfoBoxes/InfoBoxSettings.cpp	/^InfoBoxSettings::Panel::IsEmpty() const$/;"	f	class:InfoBoxSettings::Panel
IsEmpty	src/Replay/TaskAccessor.hpp	/^  virtual bool IsEmpty() const {$/;"	f	class:TaskAccessor
IsEmpty	src/Repository/AvailableFile.hpp	/^  bool IsEmpty() const {$/;"	f	struct:AvailableFile
IsEmpty	src/Topography/TopographyFile.hpp	/^  bool IsEmpty() const {$/;"	f	class:TopographyFile
IsEmpty	src/Tracking/SkyLines/Queue.hpp	/^  bool IsEmpty() const {$/;"	f	class:SkyLinesTracking::Queue
IsEmpty	src/io/CSVLine.hpp	/^  bool IsEmpty() const {$/;"	f	class:CSVLine
IsEmpty	src/system/Args.hpp	/^  bool IsEmpty() const {$/;"	f	class:Args
IsEmpty	src/system/Path.hpp	/^  bool IsEmpty() const {$/;"	f	class:AllocatedPath
IsEmpty	src/system/Path.hpp	/^  bool IsEmpty() const {$/;"	f	class:Path
IsEmpty	src/util/Cache.hxx	/^	bool IsEmpty() const {$/;"	f	class:Cache
IsEmpty	src/util/StringParser.hxx	/^	bool IsEmpty() const {$/;"	f	class:StringParser
IsEnabled	src/Device/Port/DumpPort.hpp	/^  bool IsEnabled() const {$/;"	f	class:final
IsEnabled	src/Menu/ButtonLabel.cpp	/^ButtonLabel::IsEnabled(unsigned i)$/;"	f	class:ButtonLabel
IsEnabled	src/Terrain/RasterTile.hpp	/^  bool IsEnabled() const {$/;"	f	class:RasterTile
IsEnabled	src/Tracking/SkyLines/Client.hpp	/^  bool IsEnabled() const {$/;"	f	class:SkyLinesTracking::final
IsEqual	src/Device/Driver/OpenVario.cpp	/^OpenVarioDevice::IsEqual(const PolarCoefficients &p1, const PolarCoefficients &p2)$/;"	f	class:OpenVarioDevice
IsError	src/FLARM/Error.hpp	/^  bool IsError() const {$/;"	f
IsExtensionSupported	src/ui/canvas/opengl/Extension.cpp	/^OpenGL::IsExtensionSupported(const char *extension)$/;"	f	class:OpenGL
IsFAIAngle	src/Engine/Task/Shapes/FAITrianglePointValidator.cpp	/^FAITrianglePointValidator::IsFAIAngle(const GeoPoint &p0, const GeoPoint &p1,$/;"	f	class:FAITrianglePointValidator
IsFAITriangleApplicable	src/Gauge/TaskView.cpp	/^IsFAITriangleApplicable(TaskFactoryType factory)$/;"	f	file:
IsFAITriangleApplicable	src/Gauge/TaskView.cpp	/^IsFAITriangleApplicable(const OrderedTask &task)$/;"	f	file:
IsFAITrianglePoint	src/Engine/Task/Shapes/FAITrianglePointValidator.cpp	/^FAITrianglePointValidator::IsFAITrianglePoint(const Waypoint& wp,$/;"	f	class:FAITrianglePointValidator
IsFLARM	src/Blackboard/DeviceBlackboard.hpp	/^  bool IsFLARM(unsigned i) const {$/;"	f	class:DeviceBlackboard
IsFai	src/Engine/Task/Factory/TaskFactoryType.hpp	/^IsFai(TaskFactoryType ftype)$/;"	f
IsFarFromTarget	src/Replay/TaskAutoPilot.cpp	/^TaskAutoPilot::IsFarFromTarget(const TaskAccessor& task,$/;"	f	class:TaskAutoPilot
IsFinalGlide	src/Engine/GlideSolvers/GlideResult.cpp	/^GlideResult::IsFinalGlide() const$/;"	f	class:GlideResult
IsFinished	src/Computer/AutoQNH.hpp	/^  bool IsFinished() const {$/;"	f	class:AutoQNH
IsFinished	src/Replay/TaskAccessor.hpp	/^  bool IsFinished() const {$/;"	f	class:TaskAccessor
IsFinishpoint	src/Engine/Waypoint/Waypoint.hpp	/^  IsFinishpoint() const$/;"	f	struct:Waypoint
IsFixedSize	src/Engine/Task/Factory/Constraints.hpp	/^  bool IsFixedSize() const {$/;"	f	struct:TaskFactoryConstraints
IsFlarm	src/Dialogs/Traffic/TrafficList.cpp	/^    bool IsFlarm() const {$/;"	f	struct:TrafficListWidget::Item
IsFlavour	src/Input/InputEvents.cpp	/^InputEvents::IsFlavour(const TCHAR *_flavour)$/;"	f	class:InputEvents
IsFlipped	src/ui/canvas/Bitmap.hpp	/^  bool IsFlipped() const {$/;"	f	class:final
IsFlipped	src/ui/canvas/custom/UncompressedImage.hpp	/^  bool IsFlipped() const {$/;"	f	class:UncompressedImage
IsForbiddenFlarmChar	src/Device/Driver/FLARM/TextProtocol.cpp	/^IsForbiddenFlarmChar(unsigned char ch)$/;"	f	file:
IsFull	src/Engine/Task/Ordered/OrderedTask.cpp	/^OrderedTask::IsFull() const$/;"	f	class:OrderedTask
IsFull	src/util/Cache.hxx	/^	bool IsFull() const {$/;"	f	class:Cache
IsFull	src/util/StringBuilder.hxx	/^	constexpr bool IsFull() const {$/;"	f	class:StringBuilder
IsFullMatch	src/util/RadixTree.hpp	/^      bool IsFullMatch(const TCHAR *key) const {$/;"	f	struct:RadixTree::Node::Match
IsFuture	src/Engine/Task/Ordered/Points/OrderedTaskPoint.hpp	/^  bool IsFuture() const {$/;"	f	class:OrderedTaskPoint
IsFuture	src/io/FileCache.cpp	/^  bool IsFuture() const {$/;"	f	struct:FileInfo
IsGesture	src/Input/InputEvents.cpp	/^InputEvents::IsGesture(const TCHAR *data)$/;"	f	class:InputEvents
IsGesture	src/lua/InputEvent.cpp	/^bool Lua::IsGesture(const TCHAR* gesture) {$/;"	f	class:Lua
IsGlidePossible	src/Engine/GlideSolvers/GlidePolar.cpp	/^GlidePolar::IsGlidePossible(const GlideState &task) const$/;"	f	class:GlidePolar
IsGliding	src/NMEA/FlyingState.hpp	/^  bool IsGliding() const {$/;"	f	struct:FlyingState
IsHeadingUseable	src/NMEA/Attitude.hpp	/^  bool IsHeadingUseable() const {$/;"	f	struct:AttitudeState
IsHollow	src/ui/canvas/Brush.hpp	/^  constexpr bool IsHollow() const {$/;"	f	class:Brush
IsHomogeneous	src/Engine/Task/Factory/AbstractTaskFactory.cpp	/^AbstractTaskFactory::IsHomogeneous() const$/;"	f	class:AbstractTaskFactory
IsHugeTopographyFile	src/Topography/TopographyStore.cpp	/^IsHugeTopographyFile(const char *name)$/;"	f	file:
IsHullExtended	src/Engine/Route/RoutePlanner.cpp	/^RoutePlanner::IsHullExtended(const RoutePoint &p)$/;"	f	class:RoutePlanner
IsIOS	src/Asset.hpp	/^IsIOS()$/;"	f
IsInOrderedTask	src/Monitor/MatTaskMonitor.cpp	/^IsInOrderedTask(const ProtectedTaskManager &task_manager, const Waypoint &wp)$/;"	f	file:
IsInSector	src/Engine/Task/ObservationZones/AnnularSectorZone.cpp	/^AnnularSectorZone::IsInSector(const GeoPoint &location) const$/;"	f	class:AnnularSectorZone
IsInSector	src/Engine/Task/ObservationZones/KeyholeZone.cpp	/^KeyholeZone::IsInSector(const GeoPoint &location) const$/;"	f	class:KeyholeZone
IsInSector	src/Engine/Task/ObservationZones/ObservationZoneClient.cpp	/^ObservationZoneClient::IsInSector(const GeoPoint &location) const$/;"	f	class:ObservationZoneClient
IsInSector	src/Engine/Task/ObservationZones/SectorZone.cpp	/^SectorZone::IsInSector(const GeoPoint &location) const$/;"	f	class:SectorZone
IsInSector	src/Engine/Task/Ordered/Points/FinishPoint.cpp	/^FinishPoint::IsInSector(const AircraftState &state) const$/;"	f	class:FinishPoint
IsInSector	src/Engine/Task/Ordered/Points/OrderedTaskPoint.cpp	/^OrderedTaskPoint::IsInSector(const AircraftState &ref) const$/;"	f	class:OrderedTaskPoint
IsInSector	src/Engine/Task/Ordered/Points/StartPoint.cpp	/^StartPoint::IsInSector(const AircraftState &state) const$/;"	f	class:StartPoint
IsInTask	src/Monitor/MatTaskMonitor.cpp	/^IsInTask(const OrderedTask &task, const Waypoint &wp)$/;"	f	file:
IsInsaneChar	src/Device/Util/LineSplitter.cpp	/^IsInsaneChar(char ch)$/;"	f	file:
IsInside	src/Engine/Airspace/Airspace.cpp	/^Airspace::IsInside(const AircraftState &loc) const$/;"	f	class:Airspace
IsInside	src/Engine/Airspace/Airspace.cpp	/^Airspace::IsInside(const GeoPoint &loc) const$/;"	f	class:Airspace
IsInside	src/Engine/Route/FlatTriangleFan.cpp	/^FlatTriangleFan::IsInside(FlatGeoPoint p, bool closed) const$/;"	f	class:FlatTriangleFan
IsInside	src/Form/ScrollBar.hpp	/^  bool IsInside(const PixelPoint &pt) const {$/;"	f	class:ScrollBar
IsInside	src/Geo/Flat/FlatBoundingBox.cpp	/^FlatBoundingBox::IsInside(const FlatGeoPoint& loc) const$/;"	f	class:FlatBoundingBox
IsInside	src/Geo/GeoBounds.hpp	/^  bool IsInside(Angle _longitude, Angle _latitude) const {$/;"	f	class:GeoBounds
IsInside	src/Geo/GeoBounds.hpp	/^  bool IsInside(const GeoBounds &interior) const {$/;"	f	class:GeoBounds
IsInside	src/Geo/GeoBounds.hpp	/^  bool IsInside(const GeoPoint pt) const {$/;"	f	class:GeoBounds
IsInside	src/Geo/SearchPointVector.cpp	/^SearchPointVector::IsInside(const FlatGeoPoint &pt) const$/;"	f	class:SearchPointVector
IsInside	src/Geo/SearchPointVector.cpp	/^SearchPointVector::IsInside(const GeoPoint &pt) const$/;"	f	class:SearchPointVector
IsInside	src/MapWindow/OverlayBitmap.cpp	/^MapOverlayBitmap::IsInside(GeoPoint p) const$/;"	f	class:MapOverlayBitmap
IsInside	src/Terrain/RasterMap.hpp	/^  bool IsInside(const GeoPoint &pt) const {$/;"	f	class:RasterMap
IsInside	src/Terrain/RasterTileCache.hpp	/^  bool IsInside(RasterLocation p) const {$/;"	f	class:RasterTileCache
IsInside	src/Weather/Rasp/RaspCache.cpp	/^RaspCache::IsInside(GeoPoint p) const$/;"	f	class:RaspCache
IsInside	src/Weather/Rasp/RaspRenderer.hpp	/^  bool IsInside(GeoPoint p) const {$/;"	f	class:RaspRenderer
IsInside	src/time/RoughTime.hpp	/^  constexpr bool IsInside(RoughTime now) const {$/;"	f	class:RoughTimeSpan
IsInsideDownArrow	src/Form/ScrollBar.hpp	/^  bool IsInsideDownArrow(int y) const {$/;"	f	class:ScrollBar
IsInsideSlider	src/Form/ScrollBar.hpp	/^  bool IsInsideSlider(const PixelPoint pt) const {$/;"	f	class:ScrollBar
IsInsideUpArrow	src/Form/ScrollBar.hpp	/^  bool IsInsideUpArrow(int y) const {$/;"	f	class:ScrollBar
IsIntermediatePoint	src/Engine/Task/Points/TaskPoint.hpp	/^  bool IsIntermediatePoint() const {$/;"	f	class:TaskPoint
IsInternalFile	src/Form/DataField/File.cpp	/^IsInternalFile(const TCHAR* str)$/;"	f	file:
IsInvalid	src/Terrain/Height.hpp	/^  constexpr bool IsInvalid() const {$/;"	f	class:TerrainHeight
IsItalic	src/Look/FontDescription.hpp	/^  constexpr bool IsItalic() const {$/;"	f	class:FontDescription
IsKey	src/ui/event/sdl/Event.hpp	/^  bool IsKey() const {$/;"	f	struct:UI::Event
IsKey	src/ui/event/shared/Event.hpp	/^  bool IsKey() const {$/;"	f	struct:UI::Event
IsKey	src/ui/event/windows/Event.hpp	/^  bool IsKey() const {$/;"	f	struct:UI::Event
IsKeyDown	src/ui/event/sdl/Event.hpp	/^  bool IsKeyDown() const {$/;"	f	struct:UI::Event
IsKeyDown	src/ui/event/shared/Event.hpp	/^  bool IsKeyDown() const {$/;"	f	struct:UI::Event
IsKeyDown	src/ui/event/windows/Event.hpp	/^  bool IsKeyDown() const {$/;"	f	struct:UI::Event
IsKobo	src/Asset.hpp	/^IsKobo()$/;"	f
IsKoboOTGKernel	src/Kobo/Kernel.cpp	/^IsKoboOTGKernel()$/;"	f
IsKoboWifiOn	src/Kobo/System.cpp	/^IsKoboWifiOn()$/;"	f
IsLX16xx	src/Device/Driver/LX/Internal.hpp	/^  bool IsLX16xx() const {$/;"	f	class:LXDevice
IsLabelImportant	src/Topography/TopographyFile.hpp	/^  bool IsLabelImportant(double map_scale) const {$/;"	f	class:TopographyFile
IsLabelVisible	src/Topography/TopographyFile.hpp	/^  bool IsLabelVisible(double map_scale) const {$/;"	f	class:TopographyFile
IsLandable	src/Engine/Waypoint/Waypoint.hpp	/^  IsLandable() const$/;"	f	struct:Waypoint
IsLandable	src/Engine/Waypoint/Waypoints.cpp	/^IsLandable(const Waypoint &wp)$/;"	f	file:
IsLandscape	src/Widget/KeyboardWidget.hpp	/^  static bool IsLandscape(const PixelRect &rc) {$/;"	f	class:KeyboardWidget
IsLargeSizeDifference	src/Terrain/TerrainRenderer.cpp	/^IsLargeSizeDifference(const GeoBounds &a, const GeoBounds &b)$/;"	f	file:
IsLengthDefined	src/Engine/Waypoint/Runway.hpp	/^  bool IsLengthDefined() const {$/;"	f	class:Runway
IsLogger	src/Device/Descriptor.cpp	/^DeviceDescriptor::IsLogger() const$/;"	f	class:DeviceDescriptor
IsLogger	src/Device/Driver.hpp	/^  bool IsLogger() const {$/;"	f	struct:DeviceRegister
IsLoggerActive	src/Logger/Logger.cpp	/^Logger::IsLoggerActive() const$/;"	f	class:Logger
IsMacOSX	src/Asset.hpp	/^IsMacOSX()$/;"	f
IsMain	src/Form/TabMenuDisplay.hpp	/^    bool IsMain() const {$/;"	f	struct:final::MenuTabIndex
IsManageable	src/Device/Descriptor.cpp	/^DeviceDescriptor::IsManageable() const$/;"	f	class:DeviceDescriptor
IsManageable	src/Device/Driver.hpp	/^  bool IsManageable() const {$/;"	f	struct:DeviceRegister
IsMapActive	src/MainWindow.hpp	/^  bool IsMapActive() const {$/;"	f	class:MainWindow
IsMidnightWraparound	src/Device/Parser.cpp	/^IsMidnightWraparound(double this_time, double last_time)$/;"	f	file:
IsMode	src/Engine/Task/TaskManager.hpp	/^  bool IsMode(const TaskType _mode) const {$/;"	f	class:TaskManager
IsModified	src/Dialogs/Airspace/dlgAirspace.cpp	/^  bool IsModified() const {$/;"	f	class:AirspaceSettingsListWidget
IsModified	src/Dialogs/Task/OptionalStartsDialog.cpp	/^  bool IsModified() const {$/;"	f	class:OptionStartsWidget
IsModified	src/Dialogs/Task/TaskPointDialog.cpp	/^  bool IsModified() const {$/;"	f	class:final
IsModified	src/Dialogs/Waypoint/Manager.cpp	/^  bool IsModified() const {$/;"	f	class:final
IsModified	src/Profile/Map.hpp	/^  bool IsModified() const {$/;"	f	class:ProfileMap
IsModified	src/Profile/ProfileMap.cpp	/^Profile::IsModified()$/;"	f	class:Profile
IsMonospace	src/Look/FontDescription.hpp	/^  constexpr bool IsMonospace() const {$/;"	f	class:FontDescription
IsMouse	src/ui/event/sdl/Event.hpp	/^  bool IsMouse() const {$/;"	f	struct:UI::Event
IsMouse	src/ui/event/shared/Event.hpp	/^  bool IsMouse() const {$/;"	f	struct:UI::Event
IsMouse	src/ui/event/windows/Event.hpp	/^  bool IsMouse() const {$/;"	f	struct:UI::Event
IsMouseDown	src/ui/event/sdl/Event.hpp	/^  bool IsMouseDown() const {$/;"	f	struct:UI::Event
IsMouseDown	src/ui/event/shared/Event.hpp	/^  bool IsMouseDown() const {$/;"	f	struct:UI::Event
IsMouseDown	src/ui/event/windows/Event.hpp	/^  bool IsMouseDown() const {$/;"	f	struct:UI::Event
IsNMEAOut	src/Device/Descriptor.cpp	/^DeviceDescriptor::IsNMEAOut() const$/;"	f	class:DeviceDescriptor
IsNMEAOut	src/Device/Driver.hpp	/^  bool IsNMEAOut() const {$/;"	f	struct:DeviceRegister
IsNano	src/Device/Driver/LX/Internal.hpp	/^  bool IsNano() const {$/;"	f	class:LXDevice
IsNearSelf	src/MapWindow/MapWindow.hpp	/^  bool IsNearSelf() const {$/;"	f	class:MapWindow
IsNearZero	src/Terrain/WorldFile.cpp	/^IsNearZero(double value)$/;"	f	file:
IsNegative	src/Form/DigitEntry.hpp	/^    constexpr bool IsNegative() const {$/;"	f	struct:CoordinateFormat::Column
IsNegative	src/Form/DigitEntry.hpp	/^  bool IsNegative() const {$/;"	f	class:CoordinateFormat
IsNegative	src/Math/Angle.hpp	/^  bool IsNegative() const {$/;"	f	class:Angle
IsNegative	src/Rough/RoughAltitude.hpp	/^  bool IsNegative() const {$/;"	f	class:RoughAltitude
IsNew	src/PopupMessage.hpp	/^    bool IsNew() const {$/;"	f	struct:PopupMessage::Message
IsNewerThan	src/Engine/Trace/Point.hpp	/^  bool IsNewerThan(const TracePoint &other) const {$/;"	f	class:TracePoint
IsNewlyExpired	src/PopupMessage.hpp	/^    bool IsNewlyExpired(std::chrono::steady_clock::time_point now) const {$/;"	f	struct:PopupMessage::Message
IsNonZero	src/Geo/SpeedVector.hpp	/^  constexpr bool IsNonZero() const {$/;"	f	struct:SpeedVector
IsNone	src/Form/TabMenuDisplay.hpp	/^    bool IsNone() const {$/;"	f	struct:final::MenuTabIndex
IsNookSimpleTouch	src/Android/Product.hpp	/^IsNookSimpleTouch()$/;"	f
IsNull	src/system/Path.hpp	/^  bool IsNull() const {$/;"	f	class:AllocatedPath
IsNull	src/system/Path.hpp	/^  constexpr bool IsNull() const {$/;"	f	class:Path
IsNumber	src/Form/DigitEntry.hpp	/^    constexpr bool IsNumber() const {$/;"	f	struct:CoordinateFormat::Column
IsOSHapticFeedbackEnabled	src/Android/Vibrator.cpp	/^bool Vibrator::IsOSHapticFeedbackEnabled()$/;"	f	class:Vibrator
IsOccupied	src/Device/Descriptor.hpp	/^  bool IsOccupied() const {$/;"	f	class:final
IsOk	src/Engine/GlideSolvers/GlideResult.hpp	/^  IsOk() const$/;"	f	struct:GlideResult
IsOlderThan	src/Engine/Trace/Point.hpp	/^  bool IsOlderThan(const TracePoint &other) const {$/;"	f	class:TracePoint
IsOpaque	src/ui/canvas/memory/Color.hpp	/^  constexpr bool IsOpaque() const {$/;"	f	class:Color
IsOpaque	src/ui/canvas/opengl/Color.hpp	/^  constexpr bool IsOpaque() const {$/;"	f	class:Color
IsOpen	src/io/FileHandle.hpp	/^  bool IsOpen() const {$/;"	f	class:FileHandle
IsOpen	src/io/TextWriter.hpp	/^  bool IsOpen() const {$/;"	f	class:TextWriter
IsOpen	src/ui/event/poll/linux/Input.hpp	/^  bool IsOpen() const {$/;"	f	class:UI::final
IsOrdered	src/Replay/TaskAccessor.hpp	/^  bool IsOrdered() const {$/;"	f	class:TaskAccessor
IsPanning	src/MapWindow/MapWindow.hpp	/^  bool IsPanning() const {$/;"	f	class:MapWindow
IsPanning	src/Pan.cpp	/^IsPanning()$/;"	f
IsPassive	src/FLARM/Traffic.hpp	/^  bool IsPassive() const {$/;"	f	class:FlarmTraffic::AircraftType
IsPast	src/Engine/Task/Ordered/Points/OrderedTaskPoint.hpp	/^  bool IsPast() const {$/;"	f	class:OrderedTaskPoint
IsPenOverBrush	src/ui/canvas/memory/Canvas.hpp	/^  bool IsPenOverBrush() const {$/;"	f	class:Canvas
IsPenOverBrush	src/ui/canvas/opengl/Canvas.hpp	/^  bool IsPenOverBrush() const {$/;"	f	class:Canvas
IsPersistent	src/lua/Persistent.cpp	/^Lua::IsPersistent(lua_State *L)$/;"	f	class:Lua
IsPersistent	src/ui/window/FakeBufferWindow.hpp	/^  static constexpr bool IsPersistent() {$/;"	f	class:FakeBufferWindow
IsPitchAngleUseable	src/NMEA/Attitude.hpp	/^  bool IsPitchAngleUseable() const {$/;"	f	struct:AttitudeState
IsPlausible	src/Atmosphere/Pressure.hpp	/^  bool IsPlausible() const {$/;"	f	class:AtmosphericPressure
IsPlausible	src/time/BrokenDate.hpp	/^  bool IsPlausible() const {$/;"	f	struct:BrokenDate
IsPlausible	src/time/BrokenDateTime.hpp	/^  bool IsPlausible() const {$/;"	f	struct:BrokenDateTime
IsPlausible	src/time/BrokenTime.hpp	/^  bool IsPlausible() const {$/;"	f	struct:BrokenTime
IsPointOverButton	src/Form/TabMenuDisplay.cpp	/^TabMenuDisplay::IsPointOverButton(PixelPoint Pos, unsigned mainIndex) const$/;"	f	class:TabMenuDisplay
IsPointerDevice	src/ui/event/poll/linux/Input.cpp	/^IsPointerDevice(int fd)$/;"	f	namespace:UI
IsPositionFinish	src/Engine/Task/Factory/AbstractTaskFactory.cpp	/^AbstractTaskFactory::IsPositionFinish(const unsigned position) const$/;"	f	class:AbstractTaskFactory
IsPositionIntermediate	src/Engine/Task/Factory/AbstractTaskFactory.cpp	/^AbstractTaskFactory::IsPositionIntermediate(const unsigned position) const$/;"	f	class:AbstractTaskFactory
IsPositionStart	src/Engine/Task/Factory/AbstractTaskFactory.hpp	/^  bool IsPositionStart(const unsigned position) const {$/;"	f	class:AbstractTaskFactory
IsPositive	src/Math/Angle.hpp	/^  bool IsPositive() const {$/;"	f	class:Angle
IsPositive	src/Rough/RoughAltitude.hpp	/^  bool IsPositive() const {$/;"	f	class:RoughAltitude
IsPowered	src/FLARM/Traffic.hpp	/^  bool IsPowered() const {$/;"	f	class:FlarmTraffic::AircraftType
IsPredecessorAllowed	src/Engine/Task/Ordered/Points/OrderedTaskPoint.hpp	/^  bool IsPredecessorAllowed() const {$/;"	f	class:OrderedTaskPoint
IsPressureSensor	src/Device/Config.hpp	/^  bool IsPressureSensor() const {$/;"	f	struct:DeviceConfig
IsPressureSensor	src/Device/Config.hpp	/^  static bool IsPressureSensor(PortType port_type) {$/;"	f	struct:DeviceConfig
IsPrintable	src/HexDump.hpp	/^IsPrintable(uint8_t ch)$/;"	f
IsQuit	src/ui/event/android/Queue.hpp	/^  bool IsQuit() const {$/;"	f	class:UI::EventQueue
IsQuit	src/ui/event/poll/Queue.hpp	/^  bool IsQuit() const {$/;"	f	class:DisplayOrientation::final
IsQuit	src/ui/event/sdl/Queue.hpp	/^  bool IsQuit() const {$/;"	f	class:UI::EventQueue
IsReachEnabled	src/Engine/Route/Config.hpp	/^  bool IsReachEnabled() const {$/;"	f	struct:RoutePlannerConfig
IsReachRelevant	src/Engine/Route/ReachResult.hpp	/^  bool IsReachRelevant() const {$/;"	f	struct:ReachResult
IsReachable	src/Renderer/WaypointRenderer.cpp	/^  bool IsReachable() const {$/;"	f	struct:VisibleWaypoint
IsReachableDirect	src/Engine/Route/ReachResult.hpp	/^  bool IsReachableDirect() const {$/;"	f	struct:ReachResult
IsReachableTerrain	src/Engine/Route/ReachResult.hpp	/^  bool IsReachableTerrain() const {$/;"	f	struct:ReachResult
IsRequested	src/Terrain/RasterTile.hpp	/^  bool IsRequested() const {$/;"	f	class:RasterTile
IsReservedIGCChar	src/IGC/IGCString.hpp	/^IsReservedIGCChar(char ch)$/;"	f
IsRotated	src/Terrain/WorldFile.cpp	/^  constexpr bool IsRotated() const {$/;"	f	struct:WorldFileData
IsRunning	src/MainWindow.hpp	/^  bool IsRunning() {$/;"	f	class:MainWindow
IsScreenInitialized	src/Screen/Debug.cpp	/^IsScreenInitialized()$/;"	f
IsSetUnique	src/Engine/Route/RoutePlanner.cpp	/^RoutePlanner::IsSetUnique(const RouteLinkBase &e)$/;"	f	class:RoutePlanner
IsSign	src/Form/DigitEntry.hpp	/^    constexpr bool IsSign() const {$/;"	f	struct:CoordinateFormat::Column
IsSigned	src/Form/DigitEntry.hpp	/^  bool IsSigned() const {$/;"	f	class:CoordinateFormat
IsSkyLines	src/Dialogs/Traffic/TrafficList.cpp	/^    bool IsSkyLines() const {$/;"	f	struct:TrafficListWidget::Item
IsSpecial	src/Terrain/Height.hpp	/^  constexpr bool IsSpecial() const {$/;"	f	class:TerrainHeight
IsSpike	src/Engine/Route/FlatTriangleFan.cpp	/^IsSpike(FlatGeoPoint a, FlatGeoPoint b, FlatGeoPoint c)$/;"	f	file:
IsStarted	src/Replay/TaskAccessor.hpp	/^  bool IsStarted() const {$/;"	f	class:TaskAccessor
IsStartpoint	src/Engine/Waypoint/Waypoint.hpp	/^  IsStartpoint() const$/;"	f	struct:Waypoint
IsStateAccepted	src/Engine/Airspace/AirspaceWarning.hpp	/^  bool IsStateAccepted(const State _state) const {$/;"	f	class:AirspaceWarning
IsStateReady	src/Engine/Task/Ordered/TaskAdvance.cpp	/^TaskAdvance::IsStateReady(const TaskPoint &tp,$/;"	f	class:TaskAdvance
IsSteady	src/UIUtil/KineticManager.cpp	/^KineticManager::IsSteady()$/;"	f	class:KineticManager
IsStopped	src/thread/StandbyThread.hpp	/^  bool IsStopped() const {$/;"	f	class:StandbyThread
IsSub	src/Form/TabMenuDisplay.hpp	/^    bool IsSub() const {$/;"	f	struct:final::MenuTabIndex
IsSuccessorAllowed	src/Engine/Task/Ordered/Points/OrderedTaskPoint.hpp	/^  bool IsSuccessorAllowed() const {$/;"	f	class:OrderedTaskPoint
IsTargetLocked	src/Engine/Task/Ordered/Points/AATPoint.hpp	/^  bool IsTargetLocked() const {$/;"	f	class:final
IsTargetVisible	src/Renderer/TaskPointRenderer.cpp	/^TaskPointRenderer::IsTargetVisible(const TaskPoint &tp) const$/;"	f	class:TaskPointRenderer
IsTaskLegVisible	src/Renderer/TaskLegRenderer.cpp	/^IsTaskLegVisible(const OrderedTaskPoint &tp)$/;"	f	file:
IsTerrain	src/Engine/Airspace/AirspaceAltitude.hpp	/^  bool IsTerrain() const {$/;"	f	struct:AirspaceAltitude
IsTerrainEnabled	src/Engine/Route/Config.hpp	/^  bool IsTerrainEnabled() const {$/;"	f	struct:RoutePlannerConfig
IsTerrainEnabled	src/Engine/Route/RoutePolars.hpp	/^  bool IsTerrainEnabled() const {$/;"	f	class:RoutePolars
IsTerrainReachEmpty	src/Engine/Route/RoutePlanner.hpp	/^  bool IsTerrainReachEmpty() const {$/;"	f	class:RoutePlanner
IsTerrainReachEmpty	src/Task/ProtectedRoutePlanner.hpp	/^  bool IsTerrainReachEmpty() const {$/;"	f	class:ProtectedRoutePlanner
IsTerrainReachEmpty	src/Task/RoutePlannerGlue.hpp	/^  bool IsTerrainReachEmpty() const {$/;"	f	class:RoutePlannerGlue
IsTileSegment	src/Terrain/Loader.cpp	/^IsTileSegment(unsigned id)$/;"	f	file:
IsTileSegment	src/Terrain/RasterTileCache.hpp	/^    bool IsTileSegment() const {$/;"	f	struct:RasterTileCache::MarkerSegmentInfo
IsTimeAvailable	src/Weather/Rasp/RaspStore.hpp	/^  bool IsTimeAvailable(unsigned item_index, unsigned time_index) const {$/;"	f	class:RaspStore
IsTimePlausible	src/time/BrokenDateTime.hpp	/^  bool IsTimePlausible() const {$/;"	f	struct:BrokenDateTime
IsTowing	src/NMEA/FlyingState.hpp	/^  bool IsTowing() const {$/;"	f	struct:FlyingState
IsTransparent	src/ui/canvas/memory/Color.hpp	/^  constexpr bool IsTransparent() const {$/;"	f	class:Color
IsTransparent	src/ui/canvas/opengl/Color.hpp	/^  constexpr bool IsTransparent() const {$/;"	f	class:Color
IsTrivial	src/Engine/Route/RoutePlanner.hpp	/^  virtual bool IsTrivial() const {$/;"	f	class:RoutePlanner
IsTurningReachEnabled	src/Engine/Route/Config.hpp	/^  bool IsTurningReachEnabled() const {$/;"	f	struct:RoutePlannerConfig
IsTurningReachEnabled	src/Engine/Route/RoutePolars.hpp	/^  bool IsTurningReachEnabled() const {$/;"	f	class:RoutePolars
IsTurnpoint	src/Engine/Waypoint/Waypoint.hpp	/^  IsTurnpoint() const$/;"	f	struct:Waypoint
IsUnique	src/Engine/Task/Factory/AbstractTaskFactory.cpp	/^AbstractTaskFactory::IsUnique() const$/;"	f	class:AbstractTaskFactory
IsUnknown	src/PopupMessage.hpp	/^    bool IsUnknown() const {$/;"	f	struct:PopupMessage::Message
IsUserIdle	src/ui/event/Idle.cpp	/^IsUserIdle(unsigned duration_ms)$/;"	f
IsUserInput	src/ui/event/sdl/Event.hpp	/^  bool IsUserInput() const {$/;"	f	struct:UI::Event
IsUserInput	src/ui/event/shared/Event.hpp	/^  bool IsUserInput() const {$/;"	f	struct:UI::Event
IsUserInput	src/ui/event/windows/Event.hpp	/^  bool IsUserInput() const {$/;"	f	struct:UI::Event
IsUserKnown	src/Tracking/SkyLines/Data.hpp	/^  bool IsUserKnown(uint32_t id) const {$/;"	f	struct:SkyLinesTracking::Data
IsV7	src/Device/Driver/LX/Internal.hpp	/^  bool IsV7() const {$/;"	f	class:LXDevice
IsValid	src/Computer/Wind/CirclingWind.hpp	/^    bool IsValid() const {$/;"	f	struct:CirclingWind::Result
IsValid	src/Device/Driver/LX/Protocol.hpp	/^    bool IsValid() const {$/;"	f	struct:LX::FlightInfo
IsValid	src/Engine/Airspace/AirspaceInterceptSolution.hpp	/^  bool IsValid() const {$/;"	f	struct:AirspaceInterceptSolution
IsValid	src/Engine/GlideSolvers/GlidePolar.hpp	/^  bool IsValid() const {$/;"	f	class:GlidePolar
IsValid	src/Geo/Flat/FlatProjection.hpp	/^  bool IsValid() const {$/;"	f	class:FlatProjection
IsValid	src/Geo/GeoBounds.hpp	/^  bool IsValid() const {$/;"	f	class:GeoBounds
IsValid	src/Geo/GeoPoint.hpp	/^  bool IsValid() const {$/;"	f	struct:GeoPoint
IsValid	src/Geo/GeoVector.hpp	/^  inline bool IsValid() const {$/;"	f	struct:GeoVector
IsValid	src/Geo/SearchPoint.hpp	/^  bool IsValid() const {$/;"	f	class:SearchPoint
IsValid	src/NMEA/Validity.hpp	/^  constexpr bool IsValid() const {$/;"	f	class:Validity
IsValid	src/Polar/Polar.hpp	/^  bool IsValid() const {$/;"	f	struct:PolarInfo
IsValid	src/Repository/AvailableFile.hpp	/^  bool IsValid() const {$/;"	f	struct:AvailableFile
IsValid	src/Terrain/RasterTileCache.hpp	/^  bool IsValid() const {$/;"	f	class:RasterTileCache
IsValid	src/time/RoughTime.hpp	/^  constexpr bool IsValid() const {$/;"	f	class:RoughTime
IsValidCode	src/Weather/NOAAStore.cpp	/^NOAAStore::IsValidCode(const TCHAR* code)$/;"	f	class:NOAAStore
IsValidCode	src/Weather/NOAAStore.cpp	/^NOAAStore::IsValidCode(const char *code)$/;"	f	class:NOAAStore
IsValidEWChar	src/Device/Driver/EWMicroRecorder.cpp	/^IsValidEWChar(char ch)$/;"	f	file:
IsValidFinishType	src/Engine/Task/Factory/AbstractTaskFactory.hpp	/^  bool IsValidFinishType(TaskPointFactoryType type) const {$/;"	f	class:AbstractTaskFactory
IsValidIGCChar	src/IGC/IGCString.hpp	/^IsValidIGCChar(TCHAR ch)$/;"	f
IsValidIGCChar	src/IGC/IGCString.hpp	/^IsValidIGCChar(char ch)$/;"	f
IsValidIndex	src/Engine/Task/Ordered/OrderedTask.hpp	/^  bool IsValidIndex(unsigned i) const {$/;"	f	class:final
IsValidIntermediateType	src/Engine/Task/Factory/AbstractTaskFactory.hpp	/^  bool IsValidIntermediateType(TaskPointFactoryType type) const {$/;"	f	class:AbstractTaskFactory
IsValidMapOrientation	src/Profile/MapProfile.cpp	/^IsValidMapOrientation(unsigned value)$/;"	f	file:
IsValidStartType	src/Engine/Task/Factory/AbstractTaskFactory.hpp	/^  bool IsValidStartType(TaskPointFactoryType type) const {$/;"	f	class:AbstractTaskFactory
IsValidType	src/Engine/Task/Factory/AbstractTaskFactory.cpp	/^AbstractTaskFactory::IsValidType(const OrderedTaskPoint &new_tp,$/;"	f	class:AbstractTaskFactory
IsVega	src/Device/Config.hpp	/^  bool IsVega() const {$/;"	f	struct:DeviceConfig
IsVega	src/Device/Descriptor.hpp	/^  bool IsVega() const {$/;"	f	class:final
IsVertical	src/Form/TabDisplay.hpp	/^  bool IsVertical() const {$/;"	f	class:final
IsVertical	src/Widget/TabWidget.hpp	/^    static bool IsVertical(Orientation orientation, PixelRect rc) {$/;"	f	struct:TabWidget::Layout
IsVisible	src/Topography/TopographyFile.hpp	/^  bool IsVisible(double map_scale) const {$/;"	f	class:TopographyFile
IsVisible	src/ui/event/poll/Queue.hpp	/^  bool IsVisible() const {$/;"	f	class:DisplayOrientation::final
IsVisible	src/ui/event/poll/WaylandQueue.hpp	/^  bool IsVisible() const {$/;"	f	class:UI::final
IsVisible	src/ui/event/poll/X11Queue.hpp	/^  bool IsVisible() const {$/;"	f	class:UI::X11EventQueue
IsWarning	src/FLARM/Error.hpp	/^  bool IsWarning() const {$/;"	f
IsWater	src/Terrain/Height.hpp	/^  constexpr bool IsWater() const {$/;"	f	class:TerrainHeight
IsWhite	src/ui/canvas/memory/PixelTraits.hpp	/^  static constexpr bool IsWhite(color_type c) {$/;"	f	struct:BGRAPixelTraits
IsWhite	src/ui/canvas/memory/PixelTraits.hpp	/^  static constexpr bool IsWhite(color_type c) {$/;"	f	struct:GreyscalePixelTraits
IsWrappedSpike	src/Engine/Route/FlatTriangleFan.cpp	/^IsWrappedSpike(ConstBuffer<FlatGeoPoint> hull)$/;"	f	file:
IsZero	src/Geo/SpeedVector.hpp	/^  constexpr bool IsZero() const {$/;"	f	struct:SpeedVector
IsZero	src/Rough/RoughDistance.hpp	/^  bool IsZero() const {$/;"	f	class:RoughDistance
Item	src/Device/SettingsMap.hpp	/^    explicit Item(const V &_value):value(_value) {}$/;"	f	struct:DeviceSettingsMap::Item
Item	src/Device/SettingsMap.hpp	/^  struct Item {$/;"	s	class:DeviceSettingsMap
Item	src/Dialogs/Device/DeviceListDialog.cpp	/^  union Item {$/;"	u	class:final	file:
Item	src/Dialogs/Device/ScanBluetoothLeDialog.cpp	/^    Item(const char *_address, const char *_name)$/;"	f	struct:final::Item
Item	src/Dialogs/Device/ScanBluetoothLeDialog.cpp	/^  struct Item {$/;"	s	class:final	file:
Item	src/Dialogs/Traffic/TrafficList.cpp	/^    explicit Item(FlarmId _id)$/;"	f	struct:TrafficListWidget::Item
Item	src/Dialogs/Traffic/TrafficList.cpp	/^    explicit Item(uint32_t _id, uint32_t _time_of_day_ms,$/;"	f	struct:TrafficListWidget::Item
Item	src/Dialogs/Traffic/TrafficList.cpp	/^  struct Item {$/;"	s	class:TrafficListWidget	file:
Item	src/Dialogs/Weather/MapOverlayWidget.cpp	/^    Item(const TCHAR *_name, Path _path)$/;"	f	struct:final::Item
Item	src/Dialogs/Weather/MapOverlayWidget.cpp	/^    explicit Item(PCMet::OverlayInfo &&_pc_met)$/;"	f	struct:final::Item
Item	src/Dialogs/Weather/MapOverlayWidget.cpp	/^  struct Item {$/;"	s	class:final	file:
Item	src/Form/DataField/ComboList.cpp	/^ComboList::Item::Item(int _int_value,$/;"	f	class:ComboList::Item
Item	src/Form/DataField/ComboList.hpp	/^  struct Item {$/;"	s	class:ComboList
Item	src/Form/DataField/File.hpp	/^    Item():filename(nullptr), path(nullptr) {}$/;"	f	struct:final::Item
Item	src/Form/DataField/File.hpp	/^    Item(Item &&src):filename(src.filename), path(std::move(src.path)) {$/;"	f	struct:final::Item
Item	src/Form/DataField/File.hpp	/^  struct Item {$/;"	s	class:final
Item	src/Polar/PolarStore.hpp	/^  struct Item$/;"	s	namespace:PolarStore
Item	src/Task/TaskStore.hpp	/^    Item(Path the_filename,$/;"	f	struct:TaskStore::Item
Item	src/Task/TaskStore.hpp	/^  struct Item$/;"	s	class:TaskStore
Item	src/Weather/NOAAStore.hpp	/^  struct Item$/;"	s	class:NOAAStore
Item	src/event/PollBackend.hxx	/^	struct Item$/;"	s	class:PollBackend
Item	src/event/PollResultGeneric.hxx	/^	struct Item$/;"	s	class:PollResultGeneric
Item	src/event/WinSelectBackend.hxx	/^	struct Item$/;"	s	class:WinSelectBackend
Item	src/net/http/DownloadManager.cpp	/^  struct Item {$/;"	s	class:final	file:
Item	src/util/Cache.hxx	/^	class Item$/;"	c	class:Cache
Item	src/util/SliceAllocator.hxx	/^	struct Item {$/;"	s	class:SliceAllocator
ItemEqual	src/util/Cache.hxx	/^	struct ItemEqual : Equal {$/;"	s	class:Cache
ItemHash	src/util/Cache.hxx	/^	struct ItemHash : Hash {$/;"	s	class:Cache
ItemHelpCallback_t	src/Dialogs/ListPicker.hpp	/^typedef const TCHAR* (*ItemHelpCallback_t)(unsigned item);$/;"	t
ItemList	src/Dialogs/Traffic/TrafficList.cpp	/^  typedef std::vector<Item> ItemList;$/;"	t	class:TrafficListWidget	file:
ItemList	src/util/Cache.hxx	/^				       boost::intrusive::constant_time_size<false>> ItemList;$/;"	t	class:Cache
ItemVector	src/Task/TaskStore.hpp	/^  typedef std::vector<TaskStore::Item> ItemVector;$/;"	t	class:TaskStore
Iteration	src/ui/canvas/memory/Murphy.hpp	/^  void Iteration(uint8_t miter,$/;"	f	struct:MurphyIterator
Iterator	src/util/IterableSplitString.hxx	/^		Iterator(StringView _s, value_type _separator)$/;"	f	class:BasicIterableSplitString::final
Iterator	src/util/IterableSplitString.hxx	/^		constexpr Iterator(std::nullptr_t n)$/;"	f	class:BasicIterableSplitString::final
JAS_ABS	src/Terrain/jasper/jas_math.h	98;"	d
JAS_ATTRIBUTE_CONST	src/Terrain/jasper/jas_compiler.h	74;"	d
JAS_ATTRIBUTE_CONST	src/Terrain/jasper/jas_compiler.h	82;"	d
JAS_ATTRIBUTE_DISABLE_USAN	src/Terrain/jasper/jas_compiler.h	91;"	d
JAS_ATTRIBUTE_DISABLE_USAN	src/Terrain/jasper/jas_compiler.h	94;"	d
JAS_ATTRIBUTE_DISABLE_USAN	src/Terrain/jasper/jas_compiler.h	97;"	d
JAS_ATTRIBUTE_PURE	src/Terrain/jasper/jas_compiler.h	75;"	d
JAS_ATTRIBUTE_PURE	src/Terrain/jasper/jas_compiler.h	83;"	d
JAS_CAST	src/Terrain/jasper/jas_types.h	121;"	d
JAS_COMPILER_H	src/Terrain/jasper/jas_compiler.h	63;"	d
JAS_CONFIG_H	src/Terrain/jasper/jas_config.h	2;"	d
JAS_DBGLOG	src/Terrain/jasper/jas_debug.h	90;"	d
JAS_DBGLOG	src/Terrain/jasper/jas_debug.h	93;"	d
JAS_DBLTOFIX	src/Terrain/jasper/jas_fix.h	118;"	d
JAS_DEBUG_H	src/Terrain/jasper/jas_debug.h	68;"	d
JAS_DEC_DEFAULT_MAX_SAMPLES	src/Terrain/jasper/jas_config.h	23;"	d
JAS_DEPRECATED	src/Terrain/jasper/jas_compiler.h	73;"	d
JAS_DEPRECATED	src/Terrain/jasper/jas_compiler.h	81;"	d
JAS_DLLEXPORT	src/Terrain/jasper/jas_config.h	19;"	d
JAS_DLLLOCAL	src/Terrain/jasper/jas_config.h	20;"	d
JAS_ENABLE_32BIT	src/Terrain/jasper/jas_config.h	7;"	d
JAS_FIXTODBL	src/Terrain/jasper/jas_fix.h	114;"	d
JAS_FIXTOINT	src/Terrain/jasper/jas_fix.h	110;"	d
JAS_FIX_ABS	src/Terrain/jasper/jas_fix.h	281;"	d
JAS_FIX_ADD	src/Terrain/jasper/jas_fix.h	133;"	d
JAS_FIX_ADD	src/Terrain/jasper/jas_fix.h	135;"	d
JAS_FIX_ADD_FAST	src/Terrain/jasper/jas_fix.h	139;"	d
JAS_FIX_ADD_OFLOW	src/Terrain/jasper/jas_fix.h	142;"	d
JAS_FIX_ASL	src/Terrain/jasper/jas_fix.h	224;"	d
JAS_FIX_ASL	src/Terrain/jasper/jas_fix.h	226;"	d
JAS_FIX_ASL_FAST	src/Terrain/jasper/jas_fix.h	231;"	d
JAS_FIX_ASL_OFLOW	src/Terrain/jasper/jas_fix.h	236;"	d
JAS_FIX_ASR	src/Terrain/jasper/jas_fix.h	241;"	d
JAS_FIX_ASR	src/Terrain/jasper/jas_fix.h	243;"	d
JAS_FIX_ASR_FAST	src/Terrain/jasper/jas_fix.h	248;"	d
JAS_FIX_ASR_UFLOW	src/Terrain/jasper/jas_fix.h	253;"	d
JAS_FIX_CMP	src/Terrain/jasper/jas_fix.h	297;"	d
JAS_FIX_DIV	src/Terrain/jasper/jas_fix.h	190;"	d
JAS_FIX_DIV	src/Terrain/jasper/jas_fix.h	192;"	d
JAS_FIX_DIV_FAST	src/Terrain/jasper/jas_fix.h	197;"	d
JAS_FIX_DIV_UFLOW	src/Terrain/jasper/jas_fix.h	202;"	d
JAS_FIX_FLOOR	src/Terrain/jasper/jas_fix.h	329;"	d
JAS_FIX_GT	src/Terrain/jasper/jas_fix.h	309;"	d
JAS_FIX_GTE	src/Terrain/jasper/jas_fix.h	313;"	d
JAS_FIX_H	src/Terrain/jasper/jas_fix.h	70;"	d
JAS_FIX_HALF	src/Terrain/jasper/jas_fix.h	98;"	d
JAS_FIX_ISINT	src/Terrain/jasper/jas_fix.h	285;"	d
JAS_FIX_LT	src/Terrain/jasper/jas_fix.h	301;"	d
JAS_FIX_LTE	src/Terrain/jasper/jas_fix.h	305;"	d
JAS_FIX_MINUSEQ	src/Terrain/jasper/jas_fix.h	269;"	d
JAS_FIX_MUL	src/Terrain/jasper/jas_fix.h	151;"	d
JAS_FIX_MUL	src/Terrain/jasper/jas_fix.h	153;"	d
JAS_FIX_MULBYINT	src/Terrain/jasper/jas_fix.h	173;"	d
JAS_FIX_MULBYINT	src/Terrain/jasper/jas_fix.h	175;"	d
JAS_FIX_MULBYINT_FAST	src/Terrain/jasper/jas_fix.h	180;"	d
JAS_FIX_MULBYINT_OFLOW	src/Terrain/jasper/jas_fix.h	185;"	d
JAS_FIX_MULEQ	src/Terrain/jasper/jas_fix.h	273;"	d
JAS_FIX_MUL_FAST	src/Terrain/jasper/jas_fix.h	158;"	d
JAS_FIX_MUL_OFLOW	src/Terrain/jasper/jas_fix.h	164;"	d
JAS_FIX_NEG	src/Terrain/jasper/jas_fix.h	207;"	d
JAS_FIX_NEG	src/Terrain/jasper/jas_fix.h	209;"	d
JAS_FIX_NEG_FAST	src/Terrain/jasper/jas_fix.h	213;"	d
JAS_FIX_NEG_OFLOW	src/Terrain/jasper/jas_fix.h	219;"	d
JAS_FIX_OFLOW	src/Terrain/jasper/jas_fix.h	338;"	d
JAS_FIX_ONE	src/Terrain/jasper/jas_fix.h	94;"	d
JAS_FIX_PLUSEQ	src/Terrain/jasper/jas_fix.h	265;"	d
JAS_FIX_ROUND	src/Terrain/jasper/jas_fix.h	321;"	d
JAS_FIX_SGN	src/Terrain/jasper/jas_fix.h	289;"	d
JAS_FIX_SUB	src/Terrain/jasper/jas_fix.h	261;"	d
JAS_FIX_UFLOW	src/Terrain/jasper/jas_fix.h	342;"	d
JAS_FIX_ZERO	src/Terrain/jasper/jas_fix.h	90;"	d
JAS_FORCE_INLINE	src/Terrain/jasper/jas_compiler.h	76;"	d
JAS_FORCE_INLINE	src/Terrain/jasper/jas_compiler.h	84;"	d
JAS_HAVE_FCNTL_H	src/Terrain/jasper/jas_config.h	8;"	d
JAS_HAVE_GETRUSAGE	src/Terrain/jasper/jas_config.h	15;"	d
JAS_HAVE_GETTIMEOFDAY	src/Terrain/jasper/jas_config.h	14;"	d
JAS_HAVE_IO_H	src/Terrain/jasper/jas_config.h	9;"	d
JAS_HAVE_SNPRINTF	src/Terrain/jasper/jas_config.h	17;"	d
JAS_HAVE_SYS_TIME_H	src/Terrain/jasper/jas_config.h	12;"	d
JAS_HAVE_SYS_TYPES_H	src/Terrain/jasper/jas_config.h	13;"	d
JAS_HAVE_UNISTD_H	src/Terrain/jasper/jas_config.h	10;"	d
JAS_HAVE_WINDOWS_H	src/Terrain/jasper/jas_config.h	11;"	d
JAS_IMAGE_CDT_GETPREC	src/Terrain/jasper/jas_image.h	/^static inline uint_least8_t JAS_IMAGE_CDT_GETPREC(uint_least8_t dtype)$/;"	f
JAS_IMAGE_CDT_GETSGND	src/Terrain/jasper/jas_image.h	/^static inline bool JAS_IMAGE_CDT_GETSGND(uint_least8_t dtype)$/;"	f
JAS_IMAGE_CDT_SETPREC	src/Terrain/jasper/jas_image.h	/^static inline uint_least8_t JAS_IMAGE_CDT_SETPREC(uint_least8_t dtype)$/;"	f
JAS_IMAGE_CDT_SETSGND	src/Terrain/jasper/jas_image.h	/^static inline uint_least8_t JAS_IMAGE_CDT_SETSGND(bool sgnd)$/;"	f
JAS_IMAGE_COORD_MAX	src/Terrain/jasper/jas_image.h	140;"	d
JAS_IMAGE_COORD_MIN	src/Terrain/jasper/jas_image.h	141;"	d
JAS_IMAGE_CT_COLOR	src/Terrain/jasper/jas_image.h	120;"	d
JAS_IMAGE_CT_GRAY_Y	src/Terrain/jasper/jas_image.h	131;"	d
JAS_IMAGE_CT_OPACITY	src/Terrain/jasper/jas_image.h	121;"	d
JAS_IMAGE_CT_RGB_B	src/Terrain/jasper/jas_image.h	125;"	d
JAS_IMAGE_CT_RGB_G	src/Terrain/jasper/jas_image.h	124;"	d
JAS_IMAGE_CT_RGB_R	src/Terrain/jasper/jas_image.h	123;"	d
JAS_IMAGE_CT_UNKNOWN	src/Terrain/jasper/jas_image.h	119;"	d
JAS_IMAGE_CT_YCBCR_CB	src/Terrain/jasper/jas_image.h	128;"	d
JAS_IMAGE_CT_YCBCR_CR	src/Terrain/jasper/jas_image.h	129;"	d
JAS_IMAGE_CT_YCBCR_Y	src/Terrain/jasper/jas_image.h	127;"	d
JAS_IMAGE_H	src/Terrain/jasper/jas_image.h	70;"	d
JAS_IMAGE_INMEMTHRESH	src/Terrain/jasper/jas_image.h	113;"	d
JAS_IMAGE_KIBI	src/Terrain/jasper/jas_image.h	109;"	d
JAS_IMAGE_MAXFMTS	src/Terrain/jasper/jas_image.h	284;"	d
JAS_IMAGE_MEBI	src/Terrain/jasper/jas_image.h	110;"	d
JAS_INTTOFIX	src/Terrain/jasper/jas_fix.h	106;"	d
JAS_KIBI	src/Terrain/jasper/jas_math.h	94;"	d
JAS_LIKELY	src/Terrain/jasper/jas_compiler.h	78;"	d
JAS_LIKELY	src/Terrain/jasper/jas_compiler.h	86;"	d
JAS_MALLOC_H	src/Terrain/jasper/jas_malloc.h	71;"	d
JAS_MATH_H	src/Terrain/jasper/jas_math.h	70;"	d
JAS_MATRIX_REF	src/Terrain/jasper/jas_seq.h	97;"	d
JAS_MAX	src/Terrain/jasper/jas_math.h	106;"	d
JAS_MB_ADJUST	src/Terrain/jasper/base/jas_malloc.c	97;"	d	file:
JAS_MB_SIZE	src/Terrain/jasper/base/jas_malloc.c	99;"	d	file:
JAS_MEBI	src/Terrain/jasper/jas_math.h	95;"	d
JAS_MIN	src/Terrain/jasper/jas_math.h	102;"	d
JAS_MOD	src/Terrain/jasper/jas_math.h	111;"	d
JAS_ONES	src/Terrain/jasper/jas_math.h	116;"	d
JAS_SEQ_H	src/Terrain/jasper/jas_seq.h	70;"	d
JAS_STREAM_APPEND	src/Terrain/jasper/jas_stream.h	114;"	d
JAS_STREAM_BINARY	src/Terrain/jasper/jas_stream.h	116;"	d
JAS_STREAM_BUFMODEMASK	src/Terrain/jasper/jas_stream.h	131;"	d
JAS_STREAM_BUFSIZE	src/Terrain/jasper/jas_stream.h	160;"	d
JAS_STREAM_CREATE	src/Terrain/jasper/jas_stream.h	118;"	d
JAS_STREAM_EOF	src/Terrain/jasper/jas_stream.h	146;"	d
JAS_STREAM_ERR	src/Terrain/jasper/jas_stream.h	148;"	d
JAS_STREAM_ERRMASK	src/Terrain/jasper/jas_stream.h	152;"	d
JAS_STREAM_FILEOBJ_DELONCLOSE	src/Terrain/jasper/jas_stream.h	260;"	d
JAS_STREAM_FILEOBJ_NOCLOSE	src/Terrain/jasper/jas_stream.h	262;"	d
JAS_STREAM_FREEBUF	src/Terrain/jasper/jas_stream.h	135;"	d
JAS_STREAM_FULLBUF	src/Terrain/jasper/jas_stream.h	129;"	d
JAS_STREAM_H	src/Terrain/jasper/jas_stream.h	70;"	d
JAS_STREAM_LINEBUF	src/Terrain/jasper/jas_stream.h	127;"	d
JAS_STREAM_MAXPUTBACK	src/Terrain/jasper/jas_stream.h	165;"	d
JAS_STREAM_PERMS	src/Terrain/jasper/jas_stream.h	162;"	d
JAS_STREAM_RDBUF	src/Terrain/jasper/jas_stream.h	137;"	d
JAS_STREAM_READ	src/Terrain/jasper/jas_stream.h	110;"	d
JAS_STREAM_RWLIMIT	src/Terrain/jasper/jas_stream.h	150;"	d
JAS_STREAM_UNBUF	src/Terrain/jasper/jas_stream.h	125;"	d
JAS_STREAM_WRBUF	src/Terrain/jasper/jas_stream.h	139;"	d
JAS_STREAM_WRITE	src/Terrain/jasper/jas_stream.h	112;"	d
JAS_STRINGIFY	src/Terrain/jasper/jas_debug.h	120;"	d
JAS_STRINGIFYX	src/Terrain/jasper/jas_debug.h	123;"	d
JAS_TYPES_H	src/Terrain/jasper/jas_types.h	70;"	d
JAS_UINTFAST32_NUMBITS	src/Terrain/jasper/jas_types.h	126;"	d
JAS_UNLIKELY	src/Terrain/jasper/jas_compiler.h	79;"	d
JAS_UNLIKELY	src/Terrain/jasper/jas_compiler.h	87;"	d
JAS_UNREACHABLE	src/Terrain/jasper/jas_compiler.h	77;"	d
JAS_UNREACHABLE	src/Terrain/jasper/jas_compiler.h	85;"	d
JAS_VERSION	src/Terrain/jasper/jas_config.h	6;"	d
JAVA_CLASS_HXX	src/java/Class.hxx	31;"	d
JAVA_EXCEPTION_HXX	src/java/Exception.hxx	31;"	d
JAVA_FILE_HXX	src/java/File.hxx	31;"	d
JAVA_GLOBAL_HXX	src/java/Global.hxx	31;"	d
JAVA_INPUT_STREAM_HXX	src/java/InputStream.hxx	31;"	d
JAVA_OBJECT_HXX	src/java/Object.hxx	31;"	d
JAVA_PATH_HXX	src/java/Path.hxx	31;"	d
JAVA_REF_HXX	src/java/Ref.hxx	31;"	d
JAVA_STRING_HXX	src/java/String.hxx	31;"	d
JAVA_URL_HXX	src/java/URL.hxx	31;"	d
JET_AIRCRAFT	src/FLARM/Traffic.hpp	/^    JET_AIRCRAFT = 9,     \/\/!< jet aircraft$/;"	m	class:FlarmTraffic::AircraftType
JP2_BOX_BPCC	src/Terrain/jasper/jp2/jp2_cod.h	103;"	d
JP2_BOX_CDEF	src/Terrain/jasper/jp2/jp2_cod.h	107;"	d
JP2_BOX_CMAP	src/Terrain/jasper/jp2/jp2_cod.h	106;"	d
JP2_BOX_COLR	src/Terrain/jasper/jp2/jp2_cod.h	104;"	d
JP2_BOX_FTYP	src/Terrain/jasper/jp2/jp2_cod.h	100;"	d
JP2_BOX_HDRLEN	src/Terrain/jasper/jp2/jp2_cod.h	96;"	d
JP2_BOX_IHDR	src/Terrain/jasper/jp2/jp2_cod.h	102;"	d
JP2_BOX_JP	src/Terrain/jasper/jp2/jp2_cod.h	99;"	d
JP2_BOX_JP2C	src/Terrain/jasper/jp2/jp2_cod.h	111;"	d
JP2_BOX_JP2H	src/Terrain/jasper/jp2/jp2_cod.h	101;"	d
JP2_BOX_JP2I	src/Terrain/jasper/jp2/jp2_cod.h	112;"	d
JP2_BOX_NODATA	src/Terrain/jasper/jp2/jp2_cod.h	120;"	d
JP2_BOX_PCLR	src/Terrain/jasper/jp2/jp2_cod.h	105;"	d
JP2_BOX_RES	src/Terrain/jasper/jp2/jp2_cod.h	108;"	d
JP2_BOX_RESC	src/Terrain/jasper/jp2/jp2_cod.h	109;"	d
JP2_BOX_RESD	src/Terrain/jasper/jp2/jp2_cod.h	110;"	d
JP2_BOX_SUPER	src/Terrain/jasper/jp2/jp2_cod.h	119;"	d
JP2_BOX_UINF	src/Terrain/jasper/jp2/jp2_cod.h	115;"	d
JP2_BOX_ULST	src/Terrain/jasper/jp2/jp2_cod.h	116;"	d
JP2_BOX_URL	src/Terrain/jasper/jp2/jp2_cod.h	117;"	d
JP2_BOX_UUID	src/Terrain/jasper/jp2/jp2_cod.h	114;"	d
JP2_BOX_XML	src/Terrain/jasper/jp2/jp2_cod.h	113;"	d
JP2_BPCTODTYPE	src/Terrain/jasper/jp2/jp2_cod.h	/^static inline uint_least8_t JP2_BPCTODTYPE(uint_least8_t bpc)$/;"	f
JP2_CDEF_ASOC_ALL	src/Terrain/jasper/jp2/jp2_cod.h	211;"	d
JP2_CDEF_ASOC_NONE	src/Terrain/jasper/jp2/jp2_cod.h	212;"	d
JP2_CDEF_GRAY_Y	src/Terrain/jasper/jp2/jp2_cod.h	206;"	d
JP2_CDEF_RGB_B	src/Terrain/jasper/jp2/jp2_cod.h	200;"	d
JP2_CDEF_RGB_G	src/Terrain/jasper/jp2/jp2_cod.h	199;"	d
JP2_CDEF_RGB_R	src/Terrain/jasper/jp2/jp2_cod.h	198;"	d
JP2_CDEF_TYPE_COLOR	src/Terrain/jasper/jp2/jp2_cod.h	208;"	d
JP2_CDEF_TYPE_OPACITY	src/Terrain/jasper/jp2/jp2_cod.h	209;"	d
JP2_CDEF_TYPE_UNSPEC	src/Terrain/jasper/jp2/jp2_cod.h	210;"	d
JP2_CDEF_YCBCR_CB	src/Terrain/jasper/jp2/jp2_cod.h	203;"	d
JP2_CDEF_YCBCR_CR	src/Terrain/jasper/jp2/jp2_cod.h	204;"	d
JP2_CDEF_YCBCR_Y	src/Terrain/jasper/jp2/jp2_cod.h	202;"	d
JP2_CMAP_DIRECT	src/Terrain/jasper/jp2/jp2_cod.h	238;"	d
JP2_CMAP_PALETTE	src/Terrain/jasper/jp2/jp2_cod.h	239;"	d
JP2_COD_H	src/Terrain/jasper/jp2/jp2_cod.h	71;"	d
JP2_COLR_ENUM	src/Terrain/jasper/jp2/jp2_cod.h	169;"	d
JP2_COLR_ICC	src/Terrain/jasper/jp2/jp2_cod.h	170;"	d
JP2_COLR_PRI	src/Terrain/jasper/jp2/jp2_cod.h	171;"	d
JP2_COLR_SGRAY	src/Terrain/jasper/jp2/jp2_cod.h	174;"	d
JP2_COLR_SRGB	src/Terrain/jasper/jp2/jp2_cod.h	173;"	d
JP2_COLR_SYCC	src/Terrain/jasper/jp2/jp2_cod.h	175;"	d
JP2_DTYPETOBPC	src/Terrain/jasper/jp2/jp2_cod.h	/^static inline uint_least8_t JP2_DTYPETOBPC(uint_least8_t dtype)$/;"	f
JP2_FTYP_COMPATCODE	src/Terrain/jasper/jp2/jp2_cod.h	136;"	d
JP2_FTYP_MAJVER	src/Terrain/jasper/jp2/jp2_cod.h	134;"	d
JP2_FTYP_MAXCOMPATCODES	src/Terrain/jasper/jp2/jp2_cod.h	133;"	d
JP2_FTYP_MINVER	src/Terrain/jasper/jp2/jp2_cod.h	135;"	d
JP2_IHDR_BPCNULL	src/Terrain/jasper/jp2/jp2_cod.h	148;"	d
JP2_IHDR_COMPTYPE	src/Terrain/jasper/jp2/jp2_cod.h	147;"	d
JP2_JP_LEN	src/Terrain/jasper/jp2/jp2_cod.h	125;"	d
JP2_JP_MAGIC	src/Terrain/jasper/jp2/jp2_cod.h	124;"	d
JP2_SPTOBPC	src/Terrain/jasper/jp2/jp2_cod.h	89;"	d
JPC_AGGCTXNO	src/Terrain/jasper/jpc/jpc_t1cod.h	171;"	d
JPC_ASR	src/Terrain/jasper/jpc/jpc_t1cod.h	/^static inline jpc_fix_t JPC_ASR(jpc_fix_t x, int n)$/;"	f
JPC_BITSTREAM_EOF	src/Terrain/jasper/jpc/jpc_bs.h	105;"	d
JPC_BITSTREAM_ERR	src/Terrain/jasper/jpc/jpc_bs.h	107;"	d
JPC_BITSTREAM_NOCLOSE	src/Terrain/jasper/jpc/jpc_bs.h	103;"	d
JPC_BITSTREAM_READ	src/Terrain/jasper/jpc/jpc_bs.h	94;"	d
JPC_BITSTREAM_WRITE	src/Terrain/jasper/jpc/jpc_bs.h	96;"	d
JPC_BS_H	src/Terrain/jasper/jpc/jpc_bs.h	71;"	d
JPC_CEILDIV	src/Terrain/jasper/jpc/jpc_math.h	81;"	d
JPC_CEILDIVPOW2	src/Terrain/jasper/jpc/jpc_math.h	87;"	d
JPC_CLNPASS	src/Terrain/jasper/jpc/jpc_t1cod.h	/^	JPC_CLNPASS, \/*< cleanup *\/$/;"	e	enum:jpc_passtype
JPC_COC	src/Terrain/jasper/jpc/jpc_dec.c	136;"	d	file:
JPC_COD_CPRLPRG	src/Terrain/jasper/jpc/jpc_cs.h	254;"	d
JPC_COD_EPH	src/Terrain/jasper/jpc/jpc_cs.h	237;"	d
JPC_COD_H	src/Terrain/jasper/jpc/jpc_cod.h	69;"	d
JPC_COD_LRCPPRG	src/Terrain/jasper/jpc/jpc_cs.h	245;"	d
JPC_COD_MCT	src/Terrain/jasper/jpc/jpc_cs.h	273;"	d
JPC_COD_NOMCT	src/Terrain/jasper/jpc/jpc_cs.h	272;"	d
JPC_COD_PCRLPRG	src/Terrain/jasper/jpc/jpc_cs.h	252;"	d
JPC_COD_RLCPPRG	src/Terrain/jasper/jpc/jpc_cs.h	248;"	d
JPC_COD_RPCLPRG	src/Terrain/jasper/jpc/jpc_cs.h	250;"	d
JPC_COD_SOP	src/Terrain/jasper/jpc/jpc_cs.h	235;"	d
JPC_COM_BIN	src/Terrain/jasper/jpc/jpc_cs.h	555;"	d
JPC_COM_LATIN	src/Terrain/jasper/jpc/jpc_cs.h	556;"	d
JPC_COX_CBLKSIZEEXPN	src/Terrain/jasper/jpc/jpc_cs.h	/^static inline unsigned JPC_COX_CBLKSIZEEXPN(unsigned x)$/;"	f
JPC_COX_GETCBLKSIZEEXPN	src/Terrain/jasper/jpc/jpc_cs.h	/^static inline unsigned JPC_COX_GETCBLKSIZEEXPN(unsigned x)$/;"	f
JPC_COX_INS	src/Terrain/jasper/jpc/jpc_cs.h	268;"	d
JPC_COX_LAZY	src/Terrain/jasper/jpc/jpc_cs.h	260;"	d
JPC_COX_PRT	src/Terrain/jasper/jpc/jpc_cs.h	233;"	d
JPC_COX_PTERM	src/Terrain/jasper/jpc/jpc_cs.h	264;"	d
JPC_COX_RESET	src/Terrain/jasper/jpc/jpc_cs.h	261;"	d
JPC_COX_RFT	src/Terrain/jasper/jpc/jpc_cs.h	269;"	d
JPC_COX_SEGSYM	src/Terrain/jasper/jpc/jpc_cs.h	265;"	d
JPC_COX_TERMALL	src/Terrain/jasper/jpc/jpc_cs.h	262;"	d
JPC_COX_VSC	src/Terrain/jasper/jpc/jpc_cs.h	263;"	d
JPC_CSET	src/Terrain/jasper/jpc/jpc_dec.c	132;"	d	file:
JPC_CS_H	src/Terrain/jasper/jpc/jpc_cs.h	71;"	d
JPC_CS_INIT	src/Terrain/jasper/jpc/jpc_cs.h	107;"	d
JPC_CS_MHDR	src/Terrain/jasper/jpc/jpc_cs.h	109;"	d
JPC_CS_MTLR	src/Terrain/jasper/jpc/jpc_cs.h	113;"	d
JPC_CS_TDATA	src/Terrain/jasper/jpc/jpc_cs.h	115;"	d
JPC_CS_THDR	src/Terrain/jasper/jpc/jpc_cs.h	111;"	d
JPC_DEC_H	src/Terrain/jasper/jpc/jpc_dec.h	71;"	d
JPC_ESGN	src/Terrain/jasper/jpc/jpc_t1cod.h	144;"	d
JPC_ESIG	src/Terrain/jasper/jpc/jpc_t1cod.h	130;"	d
JPC_FIX_FRACBITS	src/Terrain/jasper/jpc/jpc_fix.h	100;"	d
JPC_FIX_H	src/Terrain/jasper/jpc/jpc_fix.h	71;"	d
JPC_FIX_HALF	src/Terrain/jasper/jpc/jpc_fix.h	111;"	d
JPC_FIX_ONE	src/Terrain/jasper/jpc/jpc_fix.h	110;"	d
JPC_FIX_ZERO	src/Terrain/jasper/jpc/jpc_fix.h	109;"	d
JPC_FLOORDIV	src/Terrain/jasper/jpc/jpc_math.h	78;"	d
JPC_FLOORDIVPOW2	src/Terrain/jasper/jpc/jpc_math.h	84;"	d
JPC_FLT_H	src/Terrain/jasper/jpc/jpc_flt.h	71;"	d
JPC_GETMAGCTXNO	src/Terrain/jasper/jpc/jpc_t1cod.h	/^static inline uint_least8_t JPC_GETMAGCTXNO(unsigned f)$/;"	f
JPC_GETREFNMSEDEC	src/Terrain/jasper/jpc/jpc_t1cod.h	/^static inline jpc_fix_t JPC_GETREFNMSEDEC(jpc_fix_t x, int bitpos)$/;"	f
JPC_GETSCCTXNO	src/Terrain/jasper/jpc/jpc_t1cod.h	/^static inline uint_least8_t JPC_GETSCCTXNO(unsigned f)$/;"	f
JPC_GETSIGNMSEDEC	src/Terrain/jasper/jpc/jpc_t1cod.h	/^static inline jpc_fix_t JPC_GETSIGNMSEDEC(jpc_fix_t x, int bitpos)$/;"	f
JPC_GETSPB	src/Terrain/jasper/jpc/jpc_t1cod.h	/^static inline bool JPC_GETSPB(unsigned f)$/;"	f
JPC_GETZCCTXNO	src/Terrain/jasper/jpc/jpc_t1cod.h	/^static inline uint_least8_t JPC_GETZCCTXNO(unsigned f, enum jpc_tsfb_orient orient)$/;"	f
JPC_ISTERMINATED	src/Terrain/jasper/jpc/jpc_t1cod.c	/^bool JPC_ISTERMINATED(unsigned passno, unsigned firstpassno, unsigned numpasses, bool termall,$/;"	f
JPC_MAGCTXNO	src/Terrain/jasper/jpc/jpc_t1cod.h	175;"	d
JPC_MATH_H	src/Terrain/jasper/jpc/jpc_math.h	63;"	d
JPC_MAXBANDS	src/Terrain/jasper/jpc/jpc_cs.h	93;"	d
JPC_MAXLYRS	src/Terrain/jasper/jpc/jpc_cs.h	96;"	d
JPC_MAXRLVLS	src/Terrain/jasper/jpc/jpc_cs.h	90;"	d
JPC_MCT_H	src/Terrain/jasper/jpc/jpc_mct.h	71;"	d
JPC_MCT_ICT	src/Terrain/jasper/jpc/jpc_mct.h	92;"	d
JPC_MCT_NONE	src/Terrain/jasper/jpc/jpc_mct.h	91;"	d
JPC_MCT_RCT	src/Terrain/jasper/jpc/jpc_mct.h	93;"	d
JPC_MH	src/Terrain/jasper/jpc/jpc_dec.c	104;"	d	file:
JPC_MHSIZ	src/Terrain/jasper/jpc/jpc_dec.c	102;"	d	file:
JPC_MHSOC	src/Terrain/jasper/jpc/jpc_dec.c	100;"	d	file:
JPC_MQCOD_H	src/Terrain/jasper/jpc/jpc_mqcod.h	71;"	d
JPC_MQDEC_H	src/Terrain/jasper/jpc/jpc_mqdec.h	71;"	d
JPC_MS_COC	src/Terrain/jasper/jpc/jpc_cs.h	679;"	d
JPC_MS_COD	src/Terrain/jasper/jpc/jpc_cs.h	678;"	d
JPC_MS_COM	src/Terrain/jasper/jpc/jpc_cs.h	698;"	d
JPC_MS_CRG	src/Terrain/jasper/jpc/jpc_cs.h	697;"	d
JPC_MS_EOC	src/Terrain/jasper/jpc/jpc_cs.h	672;"	d
JPC_MS_EPH	src/Terrain/jasper/jpc/jpc_cs.h	694;"	d
JPC_MS_HASPARMS	src/Terrain/jasper/jpc/jpc_cs.h	/^static inline bool JPC_MS_HASPARMS(unsigned x)$/;"	f
JPC_MS_INMAX	src/Terrain/jasper/jpc/jpc_cs.h	666;"	d
JPC_MS_INMIN	src/Terrain/jasper/jpc/jpc_cs.h	664;"	d
JPC_MS_MAX	src/Terrain/jasper/jpc/jpc_cs.h	661;"	d
JPC_MS_MIN	src/Terrain/jasper/jpc/jpc_cs.h	658;"	d
JPC_MS_PLM	src/Terrain/jasper/jpc/jpc_cs.h	687;"	d
JPC_MS_PLT	src/Terrain/jasper/jpc/jpc_cs.h	688;"	d
JPC_MS_POC	src/Terrain/jasper/jpc/jpc_cs.h	683;"	d
JPC_MS_PPM	src/Terrain/jasper/jpc/jpc_cs.h	689;"	d
JPC_MS_PPT	src/Terrain/jasper/jpc/jpc_cs.h	690;"	d
JPC_MS_QCC	src/Terrain/jasper/jpc/jpc_cs.h	682;"	d
JPC_MS_QCD	src/Terrain/jasper/jpc/jpc_cs.h	681;"	d
JPC_MS_RGN	src/Terrain/jasper/jpc/jpc_cs.h	680;"	d
JPC_MS_SIZ	src/Terrain/jasper/jpc/jpc_cs.h	675;"	d
JPC_MS_SOC	src/Terrain/jasper/jpc/jpc_cs.h	669;"	d
JPC_MS_SOD	src/Terrain/jasper/jpc/jpc_cs.h	671;"	d
JPC_MS_SOP	src/Terrain/jasper/jpc/jpc_cs.h	693;"	d
JPC_MS_SOT	src/Terrain/jasper/jpc/jpc_cs.h	670;"	d
JPC_MS_TLM	src/Terrain/jasper/jpc/jpc_cs.h	686;"	d
JPC_MT	src/Terrain/jasper/jpc/jpc_dec.c	110;"	d	file:
JPC_NESIG	src/Terrain/jasper/jpc/jpc_t1cod.h	120;"	d
JPC_NMSEDEC_BITS	src/Terrain/jasper/jpc/jpc_t1cod.h	87;"	d
JPC_NMSEDEC_FRACBITS	src/Terrain/jasper/jpc/jpc_t1cod.h	88;"	d
JPC_NOMINALGAIN	src/Terrain/jasper/jpc/jpc_t1cod.c	/^unsigned JPC_NOMINALGAIN(unsigned qmfbid, unsigned numlvls, unsigned lvlno, enum jpc_tsfb_orient orient)$/;"	f
JPC_NSGN	src/Terrain/jasper/jpc/jpc_t1cod.h	142;"	d
JPC_NSIG	src/Terrain/jasper/jpc/jpc_t1cod.h	128;"	d
JPC_NUMAGGCTXS	src/Terrain/jasper/jpc/jpc_t1cod.h	160;"	d
JPC_NUMCTXS	src/Terrain/jasper/jpc/jpc_t1cod.h	181;"	d
JPC_NUMMAGCTXS	src/Terrain/jasper/jpc/jpc_t1cod.h	164;"	d
JPC_NUMSCCTXS	src/Terrain/jasper/jpc/jpc_t1cod.h	166;"	d
JPC_NUMUCTXS	src/Terrain/jasper/jpc/jpc_t1cod.h	168;"	d
JPC_NUMZCCTXS	src/Terrain/jasper/jpc/jpc_t1cod.h	162;"	d
JPC_NWSIG	src/Terrain/jasper/jpc/jpc_t1cod.h	126;"	d
JPC_OTHSIGMSK	src/Terrain/jasper/jpc/jpc_t1cod.h	136;"	d
JPC_PASSTYPE	src/Terrain/jasper/jpc/jpc_t1cod.c	/^enum jpc_passtype JPC_PASSTYPE(unsigned passno)$/;"	f
JPC_PREC	src/Terrain/jasper/jpc/jpc_cod.h	76;"	d
JPC_PREC	src/Terrain/jasper/jpc/jpc_t1cod.h	106;"	d
JPC_PRIMSIGMSK	src/Terrain/jasper/jpc/jpc_t1cod.h	139;"	d
JPC_QCC	src/Terrain/jasper/jpc/jpc_dec.c	138;"	d	file:
JPC_QCX_EXPN	src/Terrain/jasper/jpc/jpc_cs.h	/^static inline uint_fast16_t JPC_QCX_EXPN(unsigned x)$/;"	f
JPC_QCX_GETEXPN	src/Terrain/jasper/jpc/jpc_cs.h	/^static inline unsigned JPC_QCX_GETEXPN(unsigned x)$/;"	f
JPC_QCX_GETMANT	src/Terrain/jasper/jpc/jpc_cs.h	/^static inline unsigned JPC_QCX_GETMANT(unsigned x)$/;"	f
JPC_QCX_MANT	src/Terrain/jasper/jpc/jpc_cs.h	/^static inline uint_fast16_t JPC_QCX_MANT(unsigned x)$/;"	f
JPC_QCX_NOQNT	src/Terrain/jasper/jpc/jpc_cs.h	392;"	d
JPC_QCX_SEQNT	src/Terrain/jasper/jpc/jpc_cs.h	394;"	d
JPC_QCX_SIQNT	src/Terrain/jasper/jpc/jpc_cs.h	393;"	d
JPC_QMFB1D_FT	src/Terrain/jasper/jpc/jpc_qmfb.h	84;"	d
JPC_QMFB1D_NS	src/Terrain/jasper/jpc/jpc_qmfb.h	85;"	d
JPC_QMFB_COLGRPSIZE	src/Terrain/jasper/jpc/jpc_qmfb.h	100;"	d
JPC_QMFB_H	src/Terrain/jasper/jpc/jpc_qmfb.h	71;"	d
JPC_QSET	src/Terrain/jasper/jpc/jpc_dec.c	134;"	d	file:
JPC_REFINE	src/Terrain/jasper/jpc/jpc_t1cod.h	155;"	d
JPC_REFPASS	src/Terrain/jasper/jpc/jpc_t1cod.h	/^	JPC_REFPASS, \/*< refinement *\/$/;"	e	enum:jpc_passtype
JPC_RGN_MAXSHIFT	src/Terrain/jasper/jpc/jpc_cs.h	369;"	d
JPC_RTC_H	src/Terrain/jasper/jpc_rtc.h	2;"	d
JPC_SCCTXNO	src/Terrain/jasper/jpc/jpc_t1cod.h	177;"	d
JPC_SEGPASSCNT	src/Terrain/jasper/jpc/jpc_t1cod.c	/^unsigned JPC_SEGPASSCNT(unsigned passno, unsigned firstpassno, unsigned numpasses, bool bypass, bool termall)$/;"	f
JPC_SEGTYPE	src/Terrain/jasper/jpc/jpc_t1cod.c	/^enum jpc_segtype JPC_SEGTYPE(unsigned passno, unsigned firstpassno, bool bypass)$/;"	f
JPC_SEG_INVALID	src/Terrain/jasper/jpc/jpc_t1cod.h	/^	JPC_SEG_INVALID,$/;"	e	enum:jpc_segtype
JPC_SEG_MQ	src/Terrain/jasper/jpc/jpc_t1cod.h	/^	JPC_SEG_MQ,$/;"	e	enum:jpc_segtype
JPC_SEG_RAW	src/Terrain/jasper/jpc/jpc_t1cod.h	/^	JPC_SEG_RAW,$/;"	e	enum:jpc_segtype
JPC_SESIG	src/Terrain/jasper/jpc/jpc_t1cod.h	122;"	d
JPC_SGNMSK	src/Terrain/jasper/jpc/jpc_t1cod.h	150;"	d
JPC_SIG	src/Terrain/jasper/jpc/jpc_t1cod.h	153;"	d
JPC_SIGPASS	src/Terrain/jasper/jpc/jpc_t1cod.h	/^	JPC_SIGPASS, \/*< significance *\/$/;"	e	enum:jpc_passtype
JPC_SSGN	src/Terrain/jasper/jpc/jpc_t1cod.h	146;"	d
JPC_SSIG	src/Terrain/jasper/jpc/jpc_t1cod.h	132;"	d
JPC_SWSIG	src/Terrain/jasper/jpc/jpc_t1cod.h	124;"	d
JPC_T1COD_H	src/Terrain/jasper/jpc/jpc_t1cod.h	69;"	d
JPC_T1DEC_H	src/Terrain/jasper/jpc/jpc_t1dec.h	71;"	d
JPC_T1D_GETBIT	src/Terrain/jasper/jpc/jpc_t1dec.c	/^static bool JPC_T1D_GETBIT(jpc_mqdec_t *mqdec, const char *passtypename, const char *symtypename)$/;"	f	file:
JPC_T1D_GETBITNOSKEW	src/Terrain/jasper/jpc/jpc_t1dec.c	/^static bool JPC_T1D_GETBITNOSKEW(jpc_mqdec_t *mqdec, const char *passtypename, const char *symtypename)$/;"	f	file:
JPC_T1D_RAWGETBIT	src/Terrain/jasper/jpc/jpc_t1dec.c	/^static int JPC_T1D_RAWGETBIT(jpc_bitstream_t *bitstream, const char *passtypename, const char *symtypename)$/;"	f	file:
JPC_T2COD_H	src/Terrain/jasper/jpc/jpc_t2cod.h	71;"	d
JPC_T2DEC_H	src/Terrain/jasper/jpc/jpc_t2dec.h	71;"	d
JPC_TAGTREE_H	src/Terrain/jasper/jpc/jpc_tagtree.h	71;"	d
JPC_TAGTREE_MAXDEPTH	src/Terrain/jasper/jpc/jpc_tagtree.h	86;"	d
JPC_TILE_ACTIVE	src/Terrain/jasper/jpc/jpc_dec.h	475;"	d
JPC_TILE_ACTIVELAST	src/Terrain/jasper/jpc/jpc_dec.h	476;"	d
JPC_TILE_DONE	src/Terrain/jasper/jpc/jpc_dec.h	477;"	d
JPC_TILE_INIT	src/Terrain/jasper/jpc/jpc_dec.h	474;"	d
JPC_TPH	src/Terrain/jasper/jpc/jpc_dec.c	108;"	d	file:
JPC_TPHSOT	src/Terrain/jasper/jpc/jpc_dec.c	106;"	d	file:
JPC_TSFB_H	src/Terrain/jasper/jpc/jpc_tsfb.h	71;"	d
JPC_TSFB_HH	src/Terrain/jasper/jpc/jpc_tsfb.h	/^	JPC_TSFB_HH = 3,$/;"	e	enum:jpc_tsfb_orient
JPC_TSFB_HL	src/Terrain/jasper/jpc/jpc_tsfb.h	/^	JPC_TSFB_HL = 2,$/;"	e	enum:jpc_tsfb_orient
JPC_TSFB_LH	src/Terrain/jasper/jpc/jpc_tsfb.h	/^	JPC_TSFB_LH = 1,$/;"	e	enum:jpc_tsfb_orient
JPC_TSFB_LL	src/Terrain/jasper/jpc/jpc_tsfb.h	/^	JPC_TSFB_LL = 0,$/;"	e	enum:jpc_tsfb_orient
JPC_TSFB_MAXBANDS	src/Terrain/jasper/jpc/jpc_tsfb.h	89;"	d
JPC_TSFB_MAXDEPTH	src/Terrain/jasper/jpc/jpc_tsfb.h	90;"	d
JPC_TSFB_RITIMODE	src/Terrain/jasper/jpc/jpc_tsfb.h	91;"	d
JPC_UCTXNO	src/Terrain/jasper/jpc/jpc_t1cod.h	179;"	d
JPC_UPDATEFLAGS4	src/Terrain/jasper/jpc/jpc_t1cod.h	/^static inline void JPC_UPDATEFLAGS4(jpc_fix_t *fp, unsigned rowstep, bool s, bool vcausalflag)$/;"	f
JPC_VISIT	src/Terrain/jasper/jpc/jpc_t1cod.h	157;"	d
JPC_WSGN	src/Terrain/jasper/jpc/jpc_t1cod.h	148;"	d
JPC_WSIG	src/Terrain/jasper/jpc/jpc_t1cod.h	134;"	d
JPC_ZCCTXNO	src/Terrain/jasper/jpc/jpc_t1cod.h	173;"	d
JSON	src/JSON/GeoWriter.hpp	/^namespace JSON {$/;"	n
JSON	src/JSON/Writer.hpp	/^namespace JSON {$/;"	n
Java	src/java/Class.hxx	/^namespace Java {$/;"	n
Java	src/java/Exception.hxx	/^namespace Java {$/;"	n
Java	src/java/File.hxx	/^namespace Java {$/;"	n
Java	src/java/Global.cxx	/^namespace Java {$/;"	n	file:
Java	src/java/Global.hxx	/^namespace Java {$/;"	n
Java	src/java/InputStream.hxx	/^namespace Java {$/;"	n
Java	src/java/Object.hxx	/^namespace Java {$/;"	n
Java	src/java/Path.cxx	/^namespace Java {$/;"	n	file:
Java	src/java/Path.hxx	/^namespace Java {$/;"	n
Java	src/java/Ref.hxx	/^namespace Java {$/;"	n
Java	src/java/String.hxx	/^namespace Java {$/;"	n
Java	src/java/URL.hxx	/^namespace Java {$/;"	n
Java_org_xcsoar_BatteryReceiver_setBatteryPercent	src/Android/Battery.cpp	/^Java_org_xcsoar_BatteryReceiver_setBatteryPercent(JNIEnv *env, jclass cls,$/;"	f
Java_org_xcsoar_DownloadUtil_onDownloadAdded	src/Android/DownloadManager.cpp	/^Java_org_xcsoar_DownloadUtil_onDownloadAdded(JNIEnv *env, jclass cls,$/;"	f
Java_org_xcsoar_DownloadUtil_onDownloadComplete	src/Android/DownloadManager.cpp	/^Java_org_xcsoar_DownloadUtil_onDownloadComplete(JNIEnv *env, jclass cls,$/;"	f
Java_org_xcsoar_EventBridge_onKeyDown	src/Android/EventBridge.cpp	/^Java_org_xcsoar_EventBridge_onKeyDown(JNIEnv *env, jclass cls, jint key_code)$/;"	f
Java_org_xcsoar_EventBridge_onKeyUp	src/Android/EventBridge.cpp	/^Java_org_xcsoar_EventBridge_onKeyUp(JNIEnv *env, jclass cls, jint key_code)$/;"	f
Java_org_xcsoar_EventBridge_onMouseDown	src/Android/EventBridge.cpp	/^Java_org_xcsoar_EventBridge_onMouseDown(JNIEnv *env, jclass cls,$/;"	f
Java_org_xcsoar_EventBridge_onMouseMove	src/Android/EventBridge.cpp	/^Java_org_xcsoar_EventBridge_onMouseMove(JNIEnv *env, jclass cls,$/;"	f
Java_org_xcsoar_EventBridge_onMouseUp	src/Android/EventBridge.cpp	/^Java_org_xcsoar_EventBridge_onMouseUp(JNIEnv *env, jclass cls,$/;"	f
Java_org_xcsoar_EventBridge_onPointerDown	src/Android/EventBridge.cpp	/^Java_org_xcsoar_EventBridge_onPointerDown(JNIEnv *env, jclass cls)$/;"	f
Java_org_xcsoar_EventBridge_onPointerUp	src/Android/EventBridge.cpp	/^Java_org_xcsoar_EventBridge_onPointerUp(JNIEnv *env, jclass cls)$/;"	f
Java_org_xcsoar_GliderLinkReceiver_setGliderLinkInfo	src/Android/GliderLink.cpp	/^Java_org_xcsoar_GliderLinkReceiver_setGliderLinkInfo($/;"	f
Java_org_xcsoar_InternalGPS_setConnected	src/Android/InternalSensors.cpp	/^Java_org_xcsoar_InternalGPS_setConnected(JNIEnv *env, jobject obj,$/;"	f
Java_org_xcsoar_InternalGPS_setLocation	src/Android/InternalSensors.cpp	/^Java_org_xcsoar_InternalGPS_setLocation(JNIEnv *env, jobject obj,$/;"	f
Java_org_xcsoar_NativeBMP085Listener_onBMP085Error	src/Android/NativeBMP085Listener.cpp	/^Java_org_xcsoar_NativeBMP085Listener_onBMP085Error(JNIEnv *env, jobject obj)$/;"	f
Java_org_xcsoar_NativeBMP085Listener_onBMP085Values	src/Android/NativeBMP085Listener.cpp	/^Java_org_xcsoar_NativeBMP085Listener_onBMP085Values(JNIEnv *env, jobject obj,$/;"	f
Java_org_xcsoar_NativeI2CbaroListener_onI2CbaroError	src/Android/NativeI2CbaroListener.cpp	/^Java_org_xcsoar_NativeI2CbaroListener_onI2CbaroError(JNIEnv *env, jobject obj)$/;"	f
Java_org_xcsoar_NativeI2CbaroListener_onI2CbaroValues	src/Android/NativeI2CbaroListener.cpp	/^Java_org_xcsoar_NativeI2CbaroListener_onI2CbaroValues(JNIEnv *env, jobject obj,$/;"	f
Java_org_xcsoar_NativeInputListener_dataReceived	src/Android/NativeInputListener.cpp	/^Java_org_xcsoar_NativeInputListener_dataReceived(JNIEnv *env, jobject obj,$/;"	f
Java_org_xcsoar_NativeLeScanCallback_onLeScan	src/Android/NativeLeScanCallback.cpp	/^Java_org_xcsoar_NativeLeScanCallback_onLeScan(JNIEnv *env, jobject obj,$/;"	f
Java_org_xcsoar_NativeNunchuckListener_onNunchuckError	src/Android/NativeNunchuckListener.cpp	/^Java_org_xcsoar_NativeNunchuckListener_onNunchuckError(JNIEnv *env, jobject obj)$/;"	f
Java_org_xcsoar_NativeNunchuckListener_onNunchuckValues	src/Android/NativeNunchuckListener.cpp	/^Java_org_xcsoar_NativeNunchuckListener_onNunchuckValues(JNIEnv *env, jobject obj,$/;"	f
Java_org_xcsoar_NativePortListener_portError	src/Android/NativePortListener.cpp	/^Java_org_xcsoar_NativePortListener_portError(JNIEnv *env, jobject obj,$/;"	f
Java_org_xcsoar_NativePortListener_portStateChanged	src/Android/NativePortListener.cpp	/^Java_org_xcsoar_NativePortListener_portStateChanged(JNIEnv *env, jobject obj)$/;"	f
Java_org_xcsoar_NativeView_deinitializeNative	src/Android/Main.cpp	/^Java_org_xcsoar_NativeView_deinitializeNative(JNIEnv *env, jobject obj)$/;"	f
Java_org_xcsoar_NativeView_initializeNative	src/Android/Main.cpp	/^Java_org_xcsoar_NativeView_initializeNative(JNIEnv *env, jobject obj,$/;"	f
Java_org_xcsoar_NativeView_pauseNative	src/Android/Main.cpp	/^Java_org_xcsoar_NativeView_pauseNative(JNIEnv *env, jobject obj)$/;"	f
Java_org_xcsoar_NativeView_resizedNative	src/Android/Main.cpp	/^Java_org_xcsoar_NativeView_resizedNative(JNIEnv *env, jobject obj,$/;"	f
Java_org_xcsoar_NativeView_resumeNative	src/Android/Main.cpp	/^Java_org_xcsoar_NativeView_resumeNative(JNIEnv *env, jobject obj)$/;"	f
Java_org_xcsoar_NativeView_runNative	src/Android/Main.cpp	/^Java_org_xcsoar_NativeView_runNative(JNIEnv *env, jobject obj)$/;"	f
Java_org_xcsoar_NativeView_setHapticFeedback	src/Android/Main.cpp	/^Java_org_xcsoar_NativeView_setHapticFeedback(JNIEnv *env, jobject obj,$/;"	f
Java_org_xcsoar_NativeVoltageListener_onVoltageError	src/Android/NativeVoltageListener.cpp	/^Java_org_xcsoar_NativeVoltageListener_onVoltageError(JNIEnv *env, jobject obj)$/;"	f
Java_org_xcsoar_NativeVoltageListener_onVoltageValues	src/Android/NativeVoltageListener.cpp	/^Java_org_xcsoar_NativeVoltageListener_onVoltageValues(JNIEnv *env, jobject obj,$/;"	f
Java_org_xcsoar_NonGPSSensors_setAcceleration	src/Android/InternalSensors.cpp	/^Java_org_xcsoar_NonGPSSensors_setAcceleration(JNIEnv *env, jobject obj,$/;"	f
Java_org_xcsoar_NonGPSSensors_setBarometricPressure	src/Android/InternalSensors.cpp	/^Java_org_xcsoar_NonGPSSensors_setBarometricPressure(JNIEnv *env, jobject obj,$/;"	f
Java_org_xcsoar_NonGPSSensors_setMagneticField	src/Android/InternalSensors.cpp	/^Java_org_xcsoar_NonGPSSensors_setMagneticField(JNIEnv *env, jobject obj,$/;"	f
Java_org_xcsoar_NonGPSSensors_setRotation	src/Android/InternalSensors.cpp	/^Java_org_xcsoar_NonGPSSensors_setRotation(JNIEnv *env, jobject obj,$/;"	f
Job	src/Job/Job.hpp	/^class Job {$/;"	c
JobDialog	src/Dialogs/JobDialog.cpp	/^JobDialog(SingleWindow &parent, const DialogLook &dialog_look,$/;"	f
JobRunner	src/Job/Runner.hpp	/^class JobRunner {$/;"	c
JobThread	src/Job/Thread.hpp	/^  JobThread(OperationEnvironment &_env, Job &_job)$/;"	f	class:JobThread
JobThread	src/Job/Thread.hpp	/^class JobThread : protected Thread, protected ThreadedOperationEnvironment {$/;"	c
Join	src/Job/Thread.cpp	/^JobThread::Join()$/;"	f	class:JobThread
JpegErrorExit	src/ui/canvas/custom/LibJPEG.cpp	/^JpegErrorExit(j_common_ptr cinfo)$/;"	f	file:
K6Bt	src/Dialogs/Device/DeviceEditWidget.cpp	/^  K6Bt,$/;"	e	enum:ControlIndex	file:
K6BtPort	src/Device/Port/K6BtPort.hpp	/^class K6BtPort : public Port {$/;"	c
KELVIN	src/Units/Unit.hpp	/^  KELVIN,$/;"	m	class:Unit
KEYCODE_0	src/Android/EventBridge.cpp	/^  KEYCODE_0 = 0x07,$/;"	e	enum:__anon8	file:
KEYCODE_9	src/Android/EventBridge.cpp	/^  KEYCODE_9 = 0x10,$/;"	e	enum:__anon8	file:
KEYCODE_A	src/Android/EventBridge.cpp	/^  KEYCODE_A = 0x1d,$/;"	e	enum:__anon8	file:
KEYCODE_BACK	src/Android/EventBridge.cpp	/^  KEYCODE_BACK = 0x04,$/;"	e	enum:__anon8	file:
KEYCODE_BUTTON_A	src/ui/event/android/KeyCode.hpp	/^  KEYCODE_BUTTON_A = 0x60,$/;"	e	enum:__anon175
KEYCODE_BUTTON_B	src/ui/event/android/KeyCode.hpp	/^  KEYCODE_BUTTON_B = 0x61,$/;"	e	enum:__anon175
KEYCODE_BUTTON_C	src/ui/event/android/KeyCode.hpp	/^  KEYCODE_BUTTON_C = 0x62,$/;"	e	enum:__anon175
KEYCODE_BUTTON_L1	src/ui/event/android/KeyCode.hpp	/^  KEYCODE_BUTTON_L1 = 0x66,$/;"	e	enum:__anon175
KEYCODE_BUTTON_L2	src/ui/event/android/KeyCode.hpp	/^  KEYCODE_BUTTON_L2 = 0x68,$/;"	e	enum:__anon175
KEYCODE_BUTTON_R1	src/ui/event/android/KeyCode.hpp	/^  KEYCODE_BUTTON_R1 = 0x67,$/;"	e	enum:__anon175
KEYCODE_BUTTON_R2	src/ui/event/android/KeyCode.hpp	/^  KEYCODE_BUTTON_R2 = 0x69,$/;"	e	enum:__anon175
KEYCODE_BUTTON_X	src/ui/event/android/KeyCode.hpp	/^  KEYCODE_BUTTON_X = 0x63,$/;"	e	enum:__anon175
KEYCODE_BUTTON_Y	src/ui/event/android/KeyCode.hpp	/^  KEYCODE_BUTTON_Y = 0x64,$/;"	e	enum:__anon175
KEYCODE_BUTTON_Z	src/ui/event/android/KeyCode.hpp	/^  KEYCODE_BUTTON_Z = 0x65,$/;"	e	enum:__anon175
KEYCODE_DPAD_DOWN	src/Android/EventBridge.cpp	/^static constexpr unsigned KEYCODE_DPAD_DOWN = 0x14;$/;"	v	file:
KEYCODE_DPAD_UP	src/Android/EventBridge.cpp	/^static constexpr unsigned KEYCODE_DPAD_UP = 0x13;$/;"	v	file:
KEYCODE_ESCAPE	src/Android/EventBridge.cpp	/^  KEYCODE_ESCAPE = 0x6f,$/;"	e	enum:__anon8	file:
KEYCODE_MEDIA_NEXT	src/ui/event/android/KeyCode.hpp	/^  KEYCODE_MEDIA_NEXT = 0x57,$/;"	e	enum:__anon175
KEYCODE_MEDIA_PLAY_PAUSE	src/ui/event/android/KeyCode.hpp	/^  KEYCODE_MEDIA_PLAY_PAUSE = 0x55,$/;"	e	enum:__anon175
KEYCODE_MEDIA_PREVIOUS	src/ui/event/android/KeyCode.hpp	/^  KEYCODE_MEDIA_PREVIOUS = 0x58,$/;"	e	enum:__anon175
KEYCODE_Z	src/Android/EventBridge.cpp	/^  KEYCODE_Z = 0x36,$/;"	e	enum:__anon8	file:
KEYHOLEZONE_HPP	src/Engine/Task/ObservationZones/KeyholeZone.hpp	25;"	d
KEYHOLE_SECTOR	src/Engine/Task/Factory/TaskPointFactoryType.hpp	/^  KEYHOLE_SECTOR,$/;"	m	class:TaskPointFactoryType
KEY_APP1	src/ui/event/android/KeyCode.hpp	/^  KEY_APP1,$/;"	e	enum:__anon175
KEY_APP1	src/ui/event/poll/X11KeyCode.hpp	/^  KEY_APP1,$/;"	e	enum:__anon176
KEY_APP1	src/ui/event/poll/linux/KeyCode.hpp	/^  KEY_APP1,$/;"	e	enum:__anon177
KEY_APP1	src/ui/event/sdl/KeyCode.hpp	/^  KEY_APP1,$/;"	e	enum:__anon180
KEY_APP1	src/ui/event/windows/KeyCode.hpp	/^  KEY_APP1 = '1',$/;"	e	enum:__anon179
KEY_APP2	src/ui/event/android/KeyCode.hpp	/^  KEY_APP2,$/;"	e	enum:__anon175
KEY_APP2	src/ui/event/poll/X11KeyCode.hpp	/^  KEY_APP2,$/;"	e	enum:__anon176
KEY_APP2	src/ui/event/poll/linux/KeyCode.hpp	/^  KEY_APP2,$/;"	e	enum:__anon177
KEY_APP2	src/ui/event/sdl/KeyCode.hpp	/^  KEY_APP2,$/;"	e	enum:__anon180
KEY_APP2	src/ui/event/windows/KeyCode.hpp	/^  KEY_APP2 = '2',$/;"	e	enum:__anon179
KEY_APP3	src/ui/event/android/KeyCode.hpp	/^  KEY_APP3,$/;"	e	enum:__anon175
KEY_APP3	src/ui/event/poll/X11KeyCode.hpp	/^  KEY_APP3,$/;"	e	enum:__anon176
KEY_APP3	src/ui/event/poll/linux/KeyCode.hpp	/^  KEY_APP3,$/;"	e	enum:__anon177
KEY_APP3	src/ui/event/sdl/KeyCode.hpp	/^  KEY_APP3,$/;"	e	enum:__anon180
KEY_APP3	src/ui/event/windows/KeyCode.hpp	/^  KEY_APP3 = '3',$/;"	e	enum:__anon179
KEY_APP4	src/ui/event/android/KeyCode.hpp	/^  KEY_APP4,$/;"	e	enum:__anon175
KEY_APP4	src/ui/event/poll/X11KeyCode.hpp	/^  KEY_APP4,$/;"	e	enum:__anon176
KEY_APP4	src/ui/event/poll/linux/KeyCode.hpp	/^  KEY_APP4,$/;"	e	enum:__anon177
KEY_APP4	src/ui/event/sdl/KeyCode.hpp	/^  KEY_APP4,$/;"	e	enum:__anon180
KEY_APP4	src/ui/event/windows/KeyCode.hpp	/^  KEY_APP4 = '4',$/;"	e	enum:__anon179
KEY_APP5	src/ui/event/android/KeyCode.hpp	/^  KEY_APP5,$/;"	e	enum:__anon175
KEY_APP5	src/ui/event/poll/X11KeyCode.hpp	/^  KEY_APP5,$/;"	e	enum:__anon176
KEY_APP5	src/ui/event/poll/linux/KeyCode.hpp	/^  KEY_APP5,$/;"	e	enum:__anon177
KEY_APP5	src/ui/event/sdl/KeyCode.hpp	/^  KEY_APP5,$/;"	e	enum:__anon180
KEY_APP5	src/ui/event/windows/KeyCode.hpp	/^  KEY_APP5 = '5',$/;"	e	enum:__anon179
KEY_APP6	src/ui/event/android/KeyCode.hpp	/^  KEY_APP6,$/;"	e	enum:__anon175
KEY_APP6	src/ui/event/poll/X11KeyCode.hpp	/^  KEY_APP6,$/;"	e	enum:__anon176
KEY_APP6	src/ui/event/poll/linux/KeyCode.hpp	/^  KEY_APP6,$/;"	e	enum:__anon177
KEY_APP6	src/ui/event/sdl/KeyCode.hpp	/^  KEY_APP6,$/;"	e	enum:__anon180
KEY_APP6	src/ui/event/windows/KeyCode.hpp	/^  KEY_APP6 = '6',$/;"	e	enum:__anon179
KEY_BACK	src/ui/event/android/KeyCode.hpp	/^  KEY_BACK,$/;"	e	enum:__anon175
KEY_BACK	src/ui/event/poll/X11KeyCode.hpp	/^  KEY_BACK = XK_BackSpace,$/;"	e	enum:__anon176
KEY_BACK	src/ui/event/poll/linux/KeyCode.hpp	/^  KEY_BACK = KEY_BACKSPACE,$/;"	e	enum:__anon177
KEY_BACK	src/ui/event/poll/linux/KeyCode.hpp	36;"	d
KEY_BACK	src/ui/event/sdl/KeyCode.hpp	/^  KEY_BACK = SDLK_BACKSPACE,$/;"	e	enum:__anon180
KEY_BACK	src/ui/event/windows/KeyCode.hpp	/^  KEY_BACK = VK_BACK,$/;"	e	enum:__anon179
KEY_DOWN	src/ui/event/android/KeyCode.hpp	/^  KEY_DOWN = 0x14,$/;"	e	enum:__anon175
KEY_DOWN	src/ui/event/poll/X11KeyCode.hpp	/^  KEY_DOWN = XK_Down,$/;"	e	enum:__anon176
KEY_DOWN	src/ui/event/poll/linux/KeyCode.hpp	/^  KEY_DOWN = 108,$/;"	e	enum:__anon177
KEY_DOWN	src/ui/event/poll/linux/KeyCode.hpp	32;"	d
KEY_DOWN	src/ui/event/poll/linux/Translate.hpp	100;"	d
KEY_DOWN	src/ui/event/sdl/KeyCode.hpp	/^  KEY_DOWN = SDLK_DOWN,$/;"	e	enum:__anon180
KEY_DOWN	src/ui/event/shared/Event.hpp	/^    KEY_DOWN,$/;"	e	enum:UI::Event::Type
KEY_DOWN	src/ui/event/windows/KeyCode.hpp	/^  KEY_DOWN = VK_DOWN,$/;"	e	enum:__anon179
KEY_DUMMY	src/ui/event/android/KeyCode.hpp	/^  KEY_DUMMY = 0x80,$/;"	e	enum:__anon175
KEY_END	src/ui/event/android/KeyCode.hpp	/^  KEY_END,$/;"	e	enum:__anon175
KEY_END	src/ui/event/poll/X11KeyCode.hpp	/^  KEY_END = XK_End,$/;"	e	enum:__anon176
KEY_END	src/ui/event/sdl/KeyCode.hpp	/^  KEY_END = SDLK_END,$/;"	e	enum:__anon180
KEY_END	src/ui/event/windows/KeyCode.hpp	/^  KEY_END = VK_END,$/;"	e	enum:__anon179
KEY_ESCAPE	src/ui/event/android/KeyCode.hpp	/^  KEY_ESCAPE = 0x6f,$/;"	e	enum:__anon175
KEY_ESCAPE	src/ui/event/poll/X11KeyCode.hpp	/^  KEY_ESCAPE = XK_Escape,$/;"	e	enum:__anon176
KEY_ESCAPE	src/ui/event/poll/linux/KeyCode.hpp	/^  KEY_ESCAPE = KEY_ESC,$/;"	e	enum:__anon177
KEY_ESCAPE	src/ui/event/sdl/KeyCode.hpp	/^  KEY_ESCAPE = SDLK_ESCAPE,$/;"	e	enum:__anon180
KEY_ESCAPE	src/ui/event/windows/KeyCode.hpp	/^  KEY_ESCAPE = VK_ESCAPE,$/;"	e	enum:__anon179
KEY_F1	src/ui/event/android/KeyCode.hpp	/^  KEY_F1 = 0x83,$/;"	e	enum:__anon175
KEY_F1	src/ui/event/poll/X11KeyCode.hpp	/^  KEY_F1 = XK_F1,$/;"	e	enum:__anon176
KEY_F1	src/ui/event/sdl/KeyCode.hpp	/^  KEY_F1 = SDLK_F1,$/;"	e	enum:__anon180
KEY_F1	src/ui/event/windows/KeyCode.hpp	/^  KEY_F1 = VK_F1,$/;"	e	enum:__anon179
KEY_F10	src/ui/event/android/KeyCode.hpp	/^  KEY_F10 = 0x8c,$/;"	e	enum:__anon175
KEY_F10	src/ui/event/poll/X11KeyCode.hpp	/^  KEY_F10 = XK_F10,$/;"	e	enum:__anon176
KEY_F10	src/ui/event/sdl/KeyCode.hpp	/^  KEY_F10 = SDLK_F10,$/;"	e	enum:__anon180
KEY_F10	src/ui/event/windows/KeyCode.hpp	/^  KEY_F10 = VK_F10,$/;"	e	enum:__anon179
KEY_F11	src/ui/event/android/KeyCode.hpp	/^  KEY_F11 = 0x8d,$/;"	e	enum:__anon175
KEY_F11	src/ui/event/poll/X11KeyCode.hpp	/^  KEY_F11 = XK_F11,$/;"	e	enum:__anon176
KEY_F11	src/ui/event/sdl/KeyCode.hpp	/^  KEY_F11 = SDLK_F11,$/;"	e	enum:__anon180
KEY_F11	src/ui/event/windows/KeyCode.hpp	/^  KEY_F11 = VK_F11,$/;"	e	enum:__anon179
KEY_F12	src/ui/event/android/KeyCode.hpp	/^  KEY_F12 = 0x8e,$/;"	e	enum:__anon175
KEY_F12	src/ui/event/poll/X11KeyCode.hpp	/^  KEY_F12 = XK_F12,$/;"	e	enum:__anon176
KEY_F12	src/ui/event/sdl/KeyCode.hpp	/^  KEY_F12 = SDLK_F12,$/;"	e	enum:__anon180
KEY_F12	src/ui/event/windows/KeyCode.hpp	/^  KEY_F12 = VK_F12,$/;"	e	enum:__anon179
KEY_F13	src/ui/event/windows/KeyCode.hpp	/^  KEY_F13 = VK_F13,$/;"	e	enum:__anon179
KEY_F14	src/ui/event/windows/KeyCode.hpp	/^  KEY_F14 = VK_F14,$/;"	e	enum:__anon179
KEY_F15	src/ui/event/windows/KeyCode.hpp	/^  KEY_F15 = VK_F15,$/;"	e	enum:__anon179
KEY_F16	src/ui/event/windows/KeyCode.hpp	/^  KEY_F16 = VK_F16,$/;"	e	enum:__anon179
KEY_F17	src/ui/event/windows/KeyCode.hpp	/^  KEY_F17 = VK_F17,$/;"	e	enum:__anon179
KEY_F18	src/ui/event/windows/KeyCode.hpp	/^  KEY_F18 = VK_F18,$/;"	e	enum:__anon179
KEY_F19	src/ui/event/windows/KeyCode.hpp	/^  KEY_F19 = VK_F19,$/;"	e	enum:__anon179
KEY_F2	src/ui/event/android/KeyCode.hpp	/^  KEY_F2 = 0x84,$/;"	e	enum:__anon175
KEY_F2	src/ui/event/poll/X11KeyCode.hpp	/^  KEY_F2 = XK_F2,$/;"	e	enum:__anon176
KEY_F2	src/ui/event/sdl/KeyCode.hpp	/^  KEY_F2 = SDLK_F2,$/;"	e	enum:__anon180
KEY_F2	src/ui/event/windows/KeyCode.hpp	/^  KEY_F2 = VK_F2,$/;"	e	enum:__anon179
KEY_F20	src/ui/event/windows/KeyCode.hpp	/^  KEY_F20 = VK_F20,$/;"	e	enum:__anon179
KEY_F3	src/ui/event/android/KeyCode.hpp	/^  KEY_F3 = 0x85,$/;"	e	enum:__anon175
KEY_F3	src/ui/event/poll/X11KeyCode.hpp	/^  KEY_F3 = XK_F3,$/;"	e	enum:__anon176
KEY_F3	src/ui/event/sdl/KeyCode.hpp	/^  KEY_F3 = SDLK_F3,$/;"	e	enum:__anon180
KEY_F3	src/ui/event/windows/KeyCode.hpp	/^  KEY_F3 = VK_F3,$/;"	e	enum:__anon179
KEY_F4	src/ui/event/android/KeyCode.hpp	/^  KEY_F4 = 0x86,$/;"	e	enum:__anon175
KEY_F4	src/ui/event/poll/X11KeyCode.hpp	/^  KEY_F4 = XK_F4,$/;"	e	enum:__anon176
KEY_F4	src/ui/event/sdl/KeyCode.hpp	/^  KEY_F4 = SDLK_F4,$/;"	e	enum:__anon180
KEY_F4	src/ui/event/windows/KeyCode.hpp	/^  KEY_F4 = VK_F4,$/;"	e	enum:__anon179
KEY_F5	src/ui/event/android/KeyCode.hpp	/^  KEY_F5 = 0x87,$/;"	e	enum:__anon175
KEY_F5	src/ui/event/poll/X11KeyCode.hpp	/^  KEY_F5 = XK_F5,$/;"	e	enum:__anon176
KEY_F5	src/ui/event/sdl/KeyCode.hpp	/^  KEY_F5 = SDLK_F5,$/;"	e	enum:__anon180
KEY_F5	src/ui/event/windows/KeyCode.hpp	/^  KEY_F5 = VK_F5,$/;"	e	enum:__anon179
KEY_F6	src/ui/event/android/KeyCode.hpp	/^  KEY_F6 = 0x88,$/;"	e	enum:__anon175
KEY_F6	src/ui/event/poll/X11KeyCode.hpp	/^  KEY_F6 = XK_F6,$/;"	e	enum:__anon176
KEY_F6	src/ui/event/sdl/KeyCode.hpp	/^  KEY_F6 = SDLK_F6,$/;"	e	enum:__anon180
KEY_F6	src/ui/event/windows/KeyCode.hpp	/^  KEY_F6 = VK_F6,$/;"	e	enum:__anon179
KEY_F7	src/ui/event/android/KeyCode.hpp	/^  KEY_F7 = 0x89,$/;"	e	enum:__anon175
KEY_F7	src/ui/event/poll/X11KeyCode.hpp	/^  KEY_F7 = XK_F7,$/;"	e	enum:__anon176
KEY_F7	src/ui/event/sdl/KeyCode.hpp	/^  KEY_F7 = SDLK_F7,$/;"	e	enum:__anon180
KEY_F7	src/ui/event/windows/KeyCode.hpp	/^  KEY_F7 = VK_F7,$/;"	e	enum:__anon179
KEY_F8	src/ui/event/android/KeyCode.hpp	/^  KEY_F8 = 0x8a,$/;"	e	enum:__anon175
KEY_F8	src/ui/event/poll/X11KeyCode.hpp	/^  KEY_F8 = XK_F8,$/;"	e	enum:__anon176
KEY_F8	src/ui/event/sdl/KeyCode.hpp	/^  KEY_F8 = SDLK_F8,$/;"	e	enum:__anon180
KEY_F8	src/ui/event/windows/KeyCode.hpp	/^  KEY_F8 = VK_F8,$/;"	e	enum:__anon179
KEY_F9	src/ui/event/android/KeyCode.hpp	/^  KEY_F9 = 0x8b,$/;"	e	enum:__anon175
KEY_F9	src/ui/event/poll/X11KeyCode.hpp	/^  KEY_F9 = XK_F9,$/;"	e	enum:__anon176
KEY_F9	src/ui/event/sdl/KeyCode.hpp	/^  KEY_F9 = SDLK_F9,$/;"	e	enum:__anon180
KEY_F9	src/ui/event/windows/KeyCode.hpp	/^  KEY_F9 = VK_F9,$/;"	e	enum:__anon179
KEY_HOME	src/ui/event/android/KeyCode.hpp	/^  KEY_HOME,$/;"	e	enum:__anon175
KEY_HOME	src/ui/event/poll/X11KeyCode.hpp	/^  KEY_HOME = XK_Home,$/;"	e	enum:__anon176
KEY_HOME	src/ui/event/sdl/KeyCode.hpp	/^  KEY_HOME = SDLK_HOME,$/;"	e	enum:__anon180
KEY_HOME	src/ui/event/windows/KeyCode.hpp	/^  KEY_HOME = VK_HOME,$/;"	e	enum:__anon179
KEY_LEFT	src/ui/event/android/KeyCode.hpp	/^  KEY_LEFT = 0x15,$/;"	e	enum:__anon175
KEY_LEFT	src/ui/event/poll/X11KeyCode.hpp	/^  KEY_LEFT = XK_Left,$/;"	e	enum:__anon176
KEY_LEFT	src/ui/event/sdl/KeyCode.hpp	/^  KEY_LEFT = SDLK_LEFT,$/;"	e	enum:__anon180
KEY_LEFT	src/ui/event/windows/KeyCode.hpp	/^  KEY_LEFT = VK_LEFT,$/;"	e	enum:__anon179
KEY_MENU	src/ui/event/android/KeyCode.hpp	/^  KEY_MENU = 0x52,$/;"	e	enum:__anon175
KEY_MENU	src/ui/event/poll/X11KeyCode.hpp	/^  KEY_MENU = XK_Menu,$/;"	e	enum:__anon176
KEY_MENU	src/ui/event/sdl/KeyCode.hpp	/^  KEY_MENU = SDLK_MENU,$/;"	e	enum:__anon180
KEY_MENU	src/ui/event/windows/KeyCode.hpp	/^  KEY_MENU = VK_MENU,$/;"	e	enum:__anon179
KEY_NEXT	src/ui/event/android/KeyCode.hpp	/^  KEY_NEXT,$/;"	e	enum:__anon175
KEY_NEXT	src/ui/event/poll/X11KeyCode.hpp	/^  KEY_NEXT = XK_Page_Down,$/;"	e	enum:__anon176
KEY_NEXT	src/ui/event/poll/linux/KeyCode.hpp	/^  KEY_NEXT = KEY_PAGEDOWN,$/;"	e	enum:__anon177
KEY_NEXT	src/ui/event/poll/linux/KeyCode.hpp	35;"	d
KEY_NEXT	src/ui/event/poll/linux/Translate.hpp	103;"	d
KEY_NEXT	src/ui/event/sdl/KeyCode.hpp	/^  KEY_NEXT = SDLK_PAGEDOWN,$/;"	e	enum:__anon180
KEY_NEXT	src/ui/event/windows/KeyCode.hpp	/^  KEY_NEXT = VK_NEXT,$/;"	e	enum:__anon179
KEY_PRIOR	src/ui/event/android/KeyCode.hpp	/^  KEY_PRIOR,$/;"	e	enum:__anon175
KEY_PRIOR	src/ui/event/poll/X11KeyCode.hpp	/^  KEY_PRIOR = XK_Page_Up,$/;"	e	enum:__anon176
KEY_PRIOR	src/ui/event/poll/linux/KeyCode.hpp	/^  KEY_PRIOR = KEY_PAGEUP,$/;"	e	enum:__anon177
KEY_PRIOR	src/ui/event/sdl/KeyCode.hpp	/^  KEY_PRIOR = SDLK_PAGEUP,$/;"	e	enum:__anon180
KEY_PRIOR	src/ui/event/windows/KeyCode.hpp	/^  KEY_PRIOR = VK_PRIOR,$/;"	e	enum:__anon179
KEY_RETURN	src/ui/event/android/KeyCode.hpp	/^  KEY_RETURN = 0x42,$/;"	e	enum:__anon175
KEY_RETURN	src/ui/event/poll/X11KeyCode.hpp	/^  KEY_RETURN = XK_Return,$/;"	e	enum:__anon176
KEY_RETURN	src/ui/event/poll/linux/KeyCode.hpp	/^  KEY_RETURN = KEY_ENTER,$/;"	e	enum:__anon177
KEY_RETURN	src/ui/event/sdl/KeyCode.hpp	/^  KEY_RETURN = SDLK_RETURN,$/;"	e	enum:__anon180
KEY_RETURN	src/ui/event/windows/KeyCode.hpp	/^  KEY_RETURN = VK_RETURN,$/;"	e	enum:__anon179
KEY_RIGHT	src/ui/event/android/KeyCode.hpp	/^  KEY_RIGHT = 0x16,$/;"	e	enum:__anon175
KEY_RIGHT	src/ui/event/poll/X11KeyCode.hpp	/^  KEY_RIGHT = XK_Right,$/;"	e	enum:__anon176
KEY_RIGHT	src/ui/event/sdl/KeyCode.hpp	/^  KEY_RIGHT = SDLK_RIGHT,$/;"	e	enum:__anon180
KEY_RIGHT	src/ui/event/windows/KeyCode.hpp	/^  KEY_RIGHT = VK_RIGHT,$/;"	e	enum:__anon179
KEY_SPACE	src/ui/event/android/KeyCode.hpp	/^  KEY_SPACE = 0x3e,$/;"	e	enum:__anon175
KEY_SPACE	src/ui/event/poll/X11KeyCode.hpp	/^  KEY_SPACE = XK_space,$/;"	e	enum:__anon176
KEY_SPACE	src/ui/event/sdl/KeyCode.hpp	/^  KEY_SPACE = SDLK_SPACE,$/;"	e	enum:__anon180
KEY_SPACE	src/ui/event/windows/KeyCode.hpp	/^  KEY_SPACE = VK_SPACE,$/;"	e	enum:__anon179
KEY_TAB	src/ui/event/android/KeyCode.hpp	/^  KEY_TAB = 0x3d,$/;"	e	enum:__anon175
KEY_TAB	src/ui/event/poll/X11KeyCode.hpp	/^  KEY_TAB = XK_Tab,$/;"	e	enum:__anon176
KEY_TAB	src/ui/event/sdl/KeyCode.hpp	/^  KEY_TAB = SDLK_TAB,$/;"	e	enum:__anon180
KEY_TAB	src/ui/event/windows/KeyCode.hpp	/^  KEY_TAB = VK_TAB,$/;"	e	enum:__anon179
KEY_UP	src/ui/event/android/KeyCode.hpp	/^  KEY_UP = 0x13,$/;"	e	enum:__anon175
KEY_UP	src/ui/event/poll/X11KeyCode.hpp	/^  KEY_UP = XK_Up,$/;"	e	enum:__anon176
KEY_UP	src/ui/event/poll/linux/KeyCode.hpp	/^  KEY_UP = 103,$/;"	e	enum:__anon177
KEY_UP	src/ui/event/poll/linux/KeyCode.hpp	31;"	d
KEY_UP	src/ui/event/poll/linux/Translate.hpp	99;"	d
KEY_UP	src/ui/event/sdl/KeyCode.hpp	/^  KEY_UP = SDLK_UP,$/;"	e	enum:__anon180
KEY_UP	src/ui/event/shared/Event.hpp	/^    KEY_UP,$/;"	e	enum:UI::Event::Type
KEY_UP	src/ui/event/windows/KeyCode.hpp	/^  KEY_UP = VK_UP,$/;"	e	enum:__anon179
KExt	src/Device/Driver/LX/LXN.hpp	/^  struct KExt {$/;"	s	namespace:LXN
KG	src/Units/Unit.hpp	/^  KG,$/;"	m	class:Unit
KG_PER_M2	src/Units/Unit.hpp	/^  KG_PER_M2,$/;"	m	class:Unit
KILOMETER	src/Units/Unit.hpp	/^  KILOMETER,$/;"	m	class:Unit
KILOMETER_PER_HOUR	src/Units/Unit.hpp	/^  KILOMETER_PER_HOUR,$/;"	m	class:Unit
KINETIC_MANAGER_HPP	src/UIUtil/KineticManager.hpp	31;"	d
KITESURF	src/Tracking/LiveTrack24.hpp	/^  KITESURF = 16501,$/;"	m	class:LiveTrack24::VehicleType
KM500	src/Engine/Task/Shapes/FAITriangleSettings.hpp	/^    KM500,$/;"	m	class:FAITriangleSettings::Threshold
KNOTS	src/Units/Unit.hpp	/^  KNOTS,$/;"	m	class:Unit
KOBO_USER_DATA	src/LocalPath.cpp	81;"	d	file:
KOORD	src/Device/Driver/Volkslogger/vlconv.cpp	/^  KOORD()$/;"	f	class:KOORD
KOORD	src/Device/Driver/Volkslogger/vlconv.cpp	/^class KOORD$/;"	c	file:
KRT2CreateOnPort	src/Device/Driver/KRT2.cpp	/^KRT2CreateOnPort(const DeviceConfig &config, Port &comPort)$/;"	f	file:
KRT2Device	src/Device/Driver/KRT2.cpp	/^KRT2Device::KRT2Device(Port &_port)$/;"	f	class:KRT2Device
K_EXT	src/Device/Driver/LX/LXN.hpp	/^    K_EXT = 0xfa,$/;"	e	enum:LXN::Command
K_EXT_CONFIG	src/Device/Driver/LX/LXN.hpp	/^    K_EXT_CONFIG = 0xfe, \/* 'J': extensions in the 'K' record *\/$/;"	e	enum:LXN::Command
KalmanFilter1d	src/Math/KalmanFilter1d.cpp	/^KalmanFilter1d::KalmanFilter1d()$/;"	f	class:KalmanFilter1d
KalmanFilter1d	src/Math/KalmanFilter1d.cpp	/^KalmanFilter1d::KalmanFilter1d(const double var_x_accel)$/;"	f	class:KalmanFilter1d
KalmanFilter1d	src/Math/KalmanFilter1d.hpp	/^class KalmanFilter1d {$/;"	c
KelvinToCelsius	src/Atmosphere/Temperature.hpp	/^KelvinToCelsius(double kelvin)$/;"	f
Key2Event	src/Input/InputConfig.hpp	/^  unsigned short Key2Event[MAX_MODE][MAX_KEY];		\/\/ Points to Events location$/;"	m	struct:InputConfig
Key2EventFF00	src/Input/InputConfig.hpp	/^  unsigned short Key2EventFF00[MAX_MODE][MAX_KEY];$/;"	m	struct:InputConfig
Key2EventNonChar	src/Input/InputConfig.hpp	/^  unsigned short Key2EventNonChar[MAX_MODE][MAX_KEY];$/;"	m	struct:InputConfig
KeyDownFunction	src/Form/Form.hpp	/^  typedef std::function<bool(unsigned)> KeyDownFunction;$/;"	t	class:WndForm
KeyEqual	src/Cloud/Client.hpp	/^  struct KeyEqual {$/;"	s	struct:CloudClient
KeyHash	src/Cloud/Client.hpp	/^  struct KeyHash {$/;"	s	struct:CloudClient
KeyMap	src/util/Cache.hxx	/^						boost::intrusive::constant_time_size<false>> KeyMap;$/;"	t	class:Cache
KeyPress	src/Form/ButtonPanel.cpp	/^ButtonPanel::KeyPress(unsigned key_code)$/;"	f	class:ButtonPanel
KeyPress	src/ui/canvas/custom/TopCanvas.hpp	63;"	d
KeyPress	src/ui/window/TopWindow.hpp	73;"	d
KeySet	src/Cloud/Client.hpp	/^                                          boost::intrusive::constant_time_size<false>> KeySet;$/;"	t	class:CloudClientContainer
KeyValueFileReader	src/io/KeyValueFileReader.hpp	/^  KeyValueFileReader(NLineReader &_reader):reader(_reader) {}$/;"	f	class:KeyValueFileReader
KeyValueFileReader	src/io/KeyValueFileReader.hpp	/^class KeyValueFileReader$/;"	c
KeyValueFileWriter	src/io/KeyValueFileWriter.hpp	/^  explicit KeyValueFileWriter(BufferedOutputStream &_os):os(_os) {}$/;"	f	class:KeyValueFileWriter
KeyValueFileWriter	src/io/KeyValueFileWriter.hpp	/^class KeyValueFileWriter {$/;"	c
KeyValuePair	src/io/KeyValueFileReader.hpp	/^struct KeyValuePair$/;"	s
KeyVisitorAdapter	src/util/RadixTree.hpp	/^    KeyVisitorAdapter(V &_visitor, const TCHAR *_key)$/;"	f	struct:RadixTree::KeyVisitorAdapter
KeyVisitorAdapter	src/util/RadixTree.hpp	/^  struct KeyVisitorAdapter {$/;"	s	class:RadixTree
Keyboard	src/Dialogs/DialogSettings.hpp	/^    Keyboard,$/;"	m	class:DialogSettings::TextInputStyle
KeyboardWidget	src/Widget/KeyboardWidget.hpp	/^  KeyboardWidget(const ButtonLook &_look,$/;"	f	class:KeyboardWidget
KeyboardWidget	src/Widget/KeyboardWidget.hpp	/^class KeyboardWidget : public NullWidget {$/;"	c
KeyholeZone	src/Engine/Task/ObservationZones/KeyholeZone.hpp	/^  KeyholeZone(Shape _shape, bool _can_start_through_top,$/;"	f	class:final
KeyholeZone	src/Engine/Task/ObservationZones/KeyholeZone.hpp	/^  KeyholeZone(const KeyholeZone &other, const GeoPoint &reference)$/;"	f	class:final
KeyholeZoneEditWidget	src/Dialogs/Task/Widgets/KeyholeZoneEditWidget.hpp	/^class KeyholeZoneEditWidget : public ObservationZoneEditWidget {$/;"	c
KillBottomWidget	src/MainWindow.cpp	/^MainWindow::KillBottomWidget()$/;"	f	class:MainWindow
KillWidget	src/MainWindow.cpp	/^MainWindow::KillWidget()$/;"	f	class:MainWindow
KineticManager	src/UIUtil/KineticManager.hpp	/^  KineticManager(int _stopping_time = 1000)$/;"	f	class:KineticManager
KineticManager	src/UIUtil/KineticManager.hpp	/^class KineticManager$/;"	c
KnobTextEntry	src/Dialogs/KnobTextEntry.cpp	/^KnobTextEntry(TCHAR *text, size_t width,$/;"	f
KnobTextEntryWindow	src/Dialogs/KnobTextEntry.cpp	/^  KnobTextEntryWindow(const TCHAR *text, size_t width)$/;"	f	class:final
KoboExecNickel	src/Kobo/System.cpp	/^KoboExecNickel()$/;"	f
KoboExportUSBStorage	src/Kobo/System.cpp	/^KoboExportUSBStorage()$/;"	f
KoboInstallKernel	src/Kobo/Kernel.cpp	/^KoboInstallKernel(const char *uimage_path)$/;"	f
KoboMenuWidget	src/Kobo/KoboMenu.cpp	/^  KoboMenuWidget(const DialogLook &_look,$/;"	f	class:final
KoboModel	src/Kobo/Model.hpp	/^enum class KoboModel {$/;"	c
KoboMountData	src/Kobo/System.cpp	/^KoboMountData()$/;"	f
KoboPowerOff	src/Kobo/System.cpp	/^KoboPowerOff()$/;"	f
KoboReboot	src/Kobo/System.cpp	/^KoboReboot()$/;"	f
KoboRunFtpd	src/Kobo/System.cpp	/^KoboRunFtpd()$/;"	f
KoboRunTelnetd	src/Kobo/System.cpp	/^KoboRunTelnetd()$/;"	f
KoboRunXCSoar	src/Kobo/System.cpp	/^KoboRunXCSoar(const char *mode)$/;"	f
KoboUmountData	src/Kobo/System.cpp	/^KoboUmountData()$/;"	f
KoboUnexportUSBStorage	src/Kobo/System.cpp	/^KoboUnexportUSBStorage()$/;"	f
KoboWifiOff	src/Kobo/System.cpp	/^KoboWifiOff()$/;"	f
KoboWifiOn	src/Kobo/System.cpp	/^KoboWifiOn()$/;"	f
L	src/lua/Assert.hxx	/^	lua_State *const L;$/;"	m	class:Lua::ScopeCheckStack
L	src/lua/InputEvent.cpp	/^  lua_State *const L;$/;"	m	class:final	file:
L	src/lua/Value.hxx	/^	lua_State *const L;$/;"	m	class:Lua::Value
LANDABLE	src/Waypoint/WaypointFilter.hpp	/^  LANDABLE,$/;"	m	class:TypeFilter
LANDING	src/NMEA/SwitchState.hpp	/^    LANDING,$/;"	m	class:SwitchState::FlapPosition
LANDSCAPE	src/Android/NativeView.hpp	/^    LANDSCAPE = 0,$/;"	m	class:NativeView::ScreenOrientation
LANDSCAPE	src/DisplayOrientation.hpp	/^  LANDSCAPE,$/;"	m	class:DisplayOrientation
LANG_BULGARIAN	src/Language/LanguageGlue.cpp	/^  LANG_BULGARIAN,$/;"	e	enum:__anon10	file:
LANG_CATALAN	src/Language/LanguageGlue.cpp	/^  LANG_CATALAN,$/;"	e	enum:__anon10	file:
LANG_CHINESE	src/Language/LanguageGlue.cpp	/^  LANG_CHINESE,$/;"	e	enum:__anon10	file:
LANG_CHINESE_TRADITIONAL	src/Language/LanguageGlue.cpp	/^  LANG_CHINESE_TRADITIONAL,$/;"	e	enum:__anon10	file:
LANG_CROATIAN	src/Language/LanguageGlue.cpp	/^  LANG_CROATIAN,$/;"	e	enum:__anon10	file:
LANG_CZECH	src/Language/LanguageGlue.cpp	/^  LANG_CZECH,$/;"	e	enum:__anon10	file:
LANG_DANISH	src/Language/LanguageGlue.cpp	/^  LANG_DANISH,$/;"	e	enum:__anon10	file:
LANG_DUTCH	src/Language/LanguageGlue.cpp	/^  LANG_DUTCH,$/;"	e	enum:__anon10	file:
LANG_ENGLISH	src/Units/UnitsGlue.cpp	/^  LANG_ENGLISH,$/;"	e	enum:__anon168	file:
LANG_FINNISH	src/Language/LanguageGlue.cpp	/^  LANG_FINNISH,$/;"	e	enum:__anon10	file:
LANG_FRENCH	src/Language/LanguageGlue.cpp	/^  LANG_FRENCH,$/;"	e	enum:__anon10	file:
LANG_GERMAN	src/Language/LanguageGlue.cpp	/^  LANG_GERMAN,$/;"	e	enum:__anon10	file:
LANG_GREEK	src/Language/LanguageGlue.cpp	/^  LANG_GREEK,$/;"	e	enum:__anon10	file:
LANG_HEBREW	src/Language/LanguageGlue.cpp	/^  LANG_HEBREW,$/;"	e	enum:__anon10	file:
LANG_HUNGARIAN	src/Language/LanguageGlue.cpp	/^  LANG_HUNGARIAN,$/;"	e	enum:__anon10	file:
LANG_ITALIAN	src/Language/LanguageGlue.cpp	/^  LANG_ITALIAN,$/;"	e	enum:__anon10	file:
LANG_JAPANESE	src/Language/LanguageGlue.cpp	/^  LANG_JAPANESE,$/;"	e	enum:__anon10	file:
LANG_KOREAN	src/Language/LanguageGlue.cpp	/^  LANG_KOREAN,$/;"	e	enum:__anon10	file:
LANG_LITHUANIAN	src/Language/LanguageGlue.cpp	/^  LANG_LITHUANIAN,$/;"	e	enum:__anon10	file:
LANG_NORWEGIAN	src/Language/LanguageGlue.cpp	/^  LANG_NORWEGIAN,$/;"	e	enum:__anon10	file:
LANG_NULL	src/Language/LanguageGlue.cpp	/^  LANG_NULL,$/;"	e	enum:__anon10	file:
LANG_POLISH	src/Language/LanguageGlue.cpp	/^  LANG_POLISH,$/;"	e	enum:__anon10	file:
LANG_PORTUGUESE	src/Language/LanguageGlue.cpp	/^  LANG_PORTUGUESE,$/;"	e	enum:__anon10	file:
LANG_ROMANIAN	src/Language/LanguageGlue.cpp	/^  LANG_ROMANIAN,$/;"	e	enum:__anon10	file:
LANG_RUSSIAN	src/Language/LanguageGlue.cpp	/^  LANG_RUSSIAN,$/;"	e	enum:__anon10	file:
LANG_SERBIAN	src/Language/LanguageGlue.cpp	/^  LANG_SERBIAN,$/;"	e	enum:__anon10	file:
LANG_SLOVAK	src/Language/LanguageGlue.cpp	/^  LANG_SLOVAK,$/;"	e	enum:__anon10	file:
LANG_SLOVENIAN	src/Language/LanguageGlue.cpp	/^  LANG_SLOVENIAN,$/;"	e	enum:__anon10	file:
LANG_SPANISH	src/Language/LanguageGlue.cpp	/^  LANG_SPANISH,$/;"	e	enum:__anon10	file:
LANG_SWEDISH	src/Language/LanguageGlue.cpp	/^  LANG_SWEDISH,$/;"	e	enum:__anon10	file:
LANG_TELUGU	src/Language/LanguageGlue.cpp	/^  LANG_TELUGU,$/;"	e	enum:__anon10	file:
LANG_TURKISH	src/Language/LanguageGlue.cpp	/^  LANG_TURKISH,$/;"	e	enum:__anon10	file:
LANG_UKRAINIAN	src/Language/LanguageGlue.cpp	/^  LANG_UKRAINIAN,$/;"	e	enum:__anon10	file:
LANG_VIETNAMESE	src/Language/LanguageGlue.cpp	/^  LANG_VIETNAMESE,$/;"	e	enum:__anon10	file:
LASTVERT	src/Topography/shapelib/mapsearch.c	41;"	d	file:
LAST_USED	src/Waypoint/WaypointFilter.hpp	/^  LAST_USED,$/;"	m	class:TypeFilter
LAUNCH_NICKEL	src/Kobo/KoboMenu.cpp	/^  LAUNCH_NICKEL = 100,$/;"	e	enum:Buttons	file:
LAYER_ACTIVE	src/Renderer/OZRenderer.hpp	/^    LAYER_ACTIVE,$/;"	e	enum:OZRenderer::Layer
LAYER_INACTIVE	src/Renderer/OZRenderer.hpp	/^    LAYER_INACTIVE,$/;"	e	enum:OZRenderer::Layer
LAYER_LEG	src/Renderer/TaskPointRenderer.hpp	/^    LAYER_LEG,$/;"	e	enum:TaskPointRenderer::Layer
LAYER_OZ_OUTLINE	src/Renderer/TaskPointRenderer.hpp	/^    LAYER_OZ_OUTLINE,$/;"	e	enum:TaskPointRenderer::Layer
LAYER_OZ_SHADE	src/Renderer/TaskPointRenderer.hpp	/^    LAYER_OZ_SHADE,$/;"	e	enum:TaskPointRenderer::Layer
LAYER_SHADE	src/Renderer/OZRenderer.hpp	/^    LAYER_SHADE,$/;"	e	enum:OZRenderer::Layer
LAYER_SYMBOLS	src/Renderer/TaskPointRenderer.hpp	/^    LAYER_SYMBOLS,$/;"	e	enum:TaskPointRenderer::Layer
LAYOUTCONFIGPANEL_HPP	src/Dialogs/Settings/Panels/LayoutConfigPanel.hpp	25;"	d
LB	src/Units/Unit.hpp	/^  LB,$/;"	m	class:Unit
LB_PER_FT2	src/Units/Unit.hpp	/^  LB_PER_FT2,$/;"	m	class:Unit
LDG	src/Device/Driver/Volkslogger/vlconv.cpp	/^  C2 LDG;$/;"	m	class:C_RECORD	file:
LEASTSQS_WEIGHT_STORE	src/Math/XYDataStore.hpp	34;"	d
LEFT	src/Dialogs/KnobTextEntry.cpp	/^  LEFT,$/;"	e	enum:Buttons	file:
LEFT	src/Form/GridView.hpp	/^    LEFT,$/;"	m	class:GridView::Direction
LEFT	src/Renderer/SymbolRenderer.hpp	/^    LEFT,$/;"	e	enum:SymbolRenderer::Direction
LEFT_12_RIGHT_3_VARIO	src/InfoBoxes/InfoBoxSettings.hpp	/^    LEFT_12_RIGHT_3_VARIO = 20,$/;"	m	class:InfoBoxSettings::Geometry
LEFT_6_RIGHT_3_VARIO	src/InfoBoxes/InfoBoxSettings.hpp	/^    LEFT_6_RIGHT_3_VARIO = 12,$/;"	m	class:InfoBoxSettings::Geometry
LENGTH	src/Dialogs/Task/Widgets/LineSectorZoneEditWidget.cpp	/^  LENGTH,$/;"	e	enum:Controls	file:
LGAIN	src/Terrain/jasper/jpc/jpc_qmfb.c	1328;"	d	file:
LIGHT_STRING_HXX	src/util/LightString.hxx	31;"	d
LIKELY	src/Topography/shapelib/mapserver.h	75;"	d
LIKELY	src/Topography/shapelib/mapserver.h	79;"	d
LIMBO	src/Device/Port/State.hpp	/^  LIMBO,$/;"	m	class:PortState
LINE	src/Device/Declaration.hpp	/^      LINE,$/;"	e	enum:Declaration::TurnPoint::Shape
LINE	src/Engine/Task/ObservationZones/ObservationZone.hpp	/^    LINE,$/;"	m	class:ObservationZone::Shape
LINESECTORZONE_HPP	src/Engine/Task/ObservationZones/LineSectorZone.hpp	25;"	d
LIVETRACK24_HPP	src/Tracking/LiveTrack24.hpp	25;"	d
LOCALTIME_H	src/time/LocalTime.hpp	24;"	d
LOCATION	src/Dialogs/Waypoint/dlgWaypointEdit.cpp	/^    LOCATION,$/;"	e	enum:final::Rows	file:
LOCATION	src/InfoBoxes/Panel/ATCReference.cpp	/^  LOCATION,$/;"	e	enum:Controls	file:
LOCATION	src/MapWindow/Items/MapItem.hpp	/^    LOCATION,$/;"	e	enum:TaskPointType::Type
LOCKED	src/NMEA/SwitchState.hpp	/^    LOCKED,$/;"	m	class:SwitchState::AirbrakeState
LOGGER	src/Device/Driver.hpp	/^    LOGGER = 0x4,$/;"	e	enum:DeviceRegister::__anon158
LOGGERCONFIGPANEL_HPP	src/Dialogs/Settings/Panels/LoggerConfigPanel.hpp	25;"	d
LOGGER_MINFREESTORAGE	src/Logger/IGCFileCleanup.cpp	37;"	d	file:
LONG	src/MapSettings.hpp	/^    LONG,$/;"	m	class:TrailSettings::Length
LOOKUP_ICON	src/Topography/TopographyStore.cpp	/^} LOOKUP_ICON;$/;"	t	typeref:struct:__anon83	file:
LOW	src/FLARM/Traffic.hpp	/^    LOW = 1,$/;"	m	class:FlarmTraffic::AlarmType
LOW	src/Hardware/Battery.hpp	/^      LOW,$/;"	e	enum:Power::Battery::batterystatus
LOW_PASS_FILTER_HPP	src/Math/LowPassFilter.hpp	25;"	d
LOW_PASS_FILTER_THERMAL_AVERAGE_ALPHA	src/Computer/GlideComputerAirData.cpp	/^static constexpr double LOW_PASS_FILTER_THERMAL_AVERAGE_ALPHA = 0.3;$/;"	v	file:
LOW_PASS_FILTER_VARIO_LD_ALPHA	src/Computer/GlideComputerAirData.cpp	/^static constexpr double LOW_PASS_FILTER_VARIO_LD_ALPHA = 0.3;$/;"	v	file:
LSB_order	src/Topography/shapelib/maptree.h	/^    char  LSB_order;$/;"	m	struct:__anon81
LT24_ENABLED	src/Dialogs/Settings/Panels/TrackingConfigPanel.cpp	/^  LT24_ENABLED,$/;"	e	enum:ControlIndex	file:
LT24_INVERVAL	src/Dialogs/Settings/Panels/TrackingConfigPanel.cpp	/^  LT24_INVERVAL,$/;"	e	enum:ControlIndex	file:
LT24_PASSWORD	src/Dialogs/Settings/Panels/TrackingConfigPanel.cpp	/^  LT24_PASSWORD$/;"	e	enum:ControlIndex	file:
LT24_SERVER	src/Dialogs/Settings/Panels/TrackingConfigPanel.cpp	/^  LT24_SERVER,$/;"	e	enum:ControlIndex	file:
LT24_USERNAME	src/Dialogs/Settings/Panels/TrackingConfigPanel.cpp	/^  LT24_USERNAME,$/;"	e	enum:ControlIndex	file:
LT24_VEHICLE_NAME	src/Dialogs/Settings/Panels/TrackingConfigPanel.cpp	/^  LT24_VEHICLE_NAME,$/;"	e	enum:ControlIndex	file:
LT24_VEHICLE_TYPE	src/Dialogs/Settings/Panels/TrackingConfigPanel.cpp	/^  LT24_VEHICLE_TYPE,$/;"	e	enum:ControlIndex	file:
LUA_ASSERT_HXX	src/lua/Assert.hxx	31;"	d
LUA_ERROR_HXX	src/lua/Error.hxx	31;"	d
LUA_OBJECT_HXX	src/lua/Class.hxx	31;"	d
LUA_RUN_FILE_HXX	src/lua/RunFile.hxx	31;"	d
LUA_UTIL_HXX	src/lua/Util.hxx	31;"	d
LUA_VALUE_HXX	src/lua/Value.hxx	31;"	d
LX	src/Device/Driver/LX/Convert.hpp	/^namespace LX {$/;"	n
LX	src/Device/Driver/LX/Protocol.hpp	/^namespace LX {$/;"	n
LX1600	src/Device/Driver/LX/LX1600.hpp	/^namespace LX1600 {$/;"	n
LXCreateOnPort	src/Device/Driver/LX/Register.cpp	/^LXCreateOnPort(const DeviceConfig &config, Port &com_port)$/;"	f	file:
LXDevice	src/Device/Driver/LX/Internal.hpp	/^  LXDevice(Port &_port, unsigned baud_rate, unsigned _bulk_baud_rate,$/;"	f	class:LXDevice
LXDevice	src/Device/Driver/LX/Internal.hpp	/^class LXDevice: public AbstractDevice$/;"	c
LXN	src/Device/Driver/LX/LXN.hpp	/^namespace LXN {$/;"	n
LXWP0	src/Device/Driver/LX/Parser.cpp	/^LXWP0(NMEAInputLine &line, NMEAInfo &info)$/;"	f	file:
LXWP0	src/Device/Driver/XCTracer/Parser.cpp	/^XCTracerDevice::LXWP0(NMEAInputLine &line, NMEAInfo &info)$/;"	f	class:XCTracerDevice
LXWP1	src/Device/Driver/LX/Parser.cpp	/^LXWP1(NMEAInputLine &line, DeviceInfo &device)$/;"	f	file:
LXWP2	src/Device/Driver/LX/Parser.cpp	/^LXWP2(NMEAInputLine &line, NMEAInfo &info)$/;"	f	file:
LXWP3	src/Device/Driver/LX/Parser.cpp	/^LXWP3(NMEAInputLine &line, NMEAInfo &info)$/;"	f	file:
Label	src/Renderer/AirspaceLabelList.hpp	/^  struct Label {$/;"	s	class:AirspaceLabelList
Label	src/Renderer/WaypointLabelList.hpp	/^  struct Label{$/;"	s	class:WaypointLabelList
LabelBlock	src/Renderer/LabelBlock.hpp	/^class LabelBlock {$/;"	c
LabelSelection	src/Renderer/AirspaceRendererSettings.hpp	/^  enum class LabelSelection : uint8_t {$/;"	c	struct:AirspaceRendererSettings
LabelSelection	src/Renderer/WaypointRendererSettings.hpp	/^  enum class LabelSelection : uint8_t {$/;"	c	struct:WaypointRendererSettings
LabelShape	src/Renderer/LabelShape.hpp	/^enum class LabelShape : uint8_t {$/;"	c
LabelValueDrawInfo	src/Gauge/GaugeVario.hpp	/^  struct LabelValueDrawInfo {$/;"	s	class:GaugeVario
LabelValueGeometry	src/Gauge/GaugeVario.hpp	/^  struct LabelValueGeometry {$/;"	s	class:GaugeVario
LacksAlphaASCII	src/Menu/ButtonLabel.cpp	/^LacksAlphaASCII(const TCHAR *s)$/;"	f	file:
Lambda	src/lua/Util.hxx	/^Lambda(T &&t)$/;"	f	struct:Lua::StackIndex::LightUserData
LambdaListItemRenderer	src/Form/List.hpp	/^  LambdaListItemRenderer(C &&c):C(std::move(c)) {}$/;"	f	class:LambdaListItemRenderer
LambdaListItemRenderer	src/Form/List.hpp	/^class LambdaListItemRenderer : public ListItemRenderer, private C {$/;"	c
LandableStyle	src/Renderer/WaypointRendererSettings.hpp	/^  enum class LandableStyle : uint8_t {$/;"	c	struct:WaypointRendererSettings
LandingTime	src/Dialogs/StatusPanels/TimesStatusPanel.cpp	/^  LandingTime,$/;"	e	enum:Controls	file:
LanguageChanged	src/UtilsSettings.cpp	/^bool LanguageChanged = false;$/;"	v
LanguageFile	src/Dialogs/Settings/Panels/InterfaceConfigPanel.cpp	/^  LanguageFile,$/;"	e	enum:ControlIndex	file:
LanguageFile	src/Profile/ProfileKeys.cpp	/^const char LanguageFile[] = "LanguageFile"; \/\/ pL$/;"	m	namespace:ProfileKeys	file:
LanguageFileVisitor	src/Dialogs/Settings/Panels/InterfaceConfigPanel.cpp	/^  LanguageFileVisitor(DataFieldEnum &_df): df(_df) {}$/;"	f	class:LanguageFileVisitor
LanguageFileVisitor	src/Dialogs/Settings/Panels/InterfaceConfigPanel.cpp	/^class LanguageFileVisitor: public File::Visitor$/;"	c	file:
LargeExtra	src/Widget/TabWidget.cpp	/^TabWidget::LargeExtra()$/;"	f	class:TabWidget
LargeTextWidget	src/Widget/LargeTextWidget.hpp	/^class LargeTextWidget : public WindowWidget {$/;"	c
LargeTextWindow	src/Screen/LargeTextWindow.hpp	/^class LargeTextWindow : public NativeWindow {$/;"	c
LargeTextWindowStyle	src/Screen/LargeTextWindow.hpp	/^  LargeTextWindowStyle() {$/;"	f	class:LargeTextWindowStyle
LargeTextWindowStyle	src/Screen/LargeTextWindow.hpp	/^  LargeTextWindowStyle(const WindowStyle other):WindowStyle(other) {$/;"	f	class:LargeTextWindowStyle
LargeTextWindowStyle	src/Screen/LargeTextWindow.hpp	/^class LargeTextWindowStyle : public WindowStyle {$/;"	c
LastSeparator	src/system/Path.cpp	/^LastSeparator(Path::const_pointer path)$/;"	f	file:
LastSeparator	src/system/PathName.cpp	/^LastSeparator(TCHAR *path)$/;"	f	file:
LastSeparator	src/system/PathName.cpp	/^LastSeparator(const TCHAR *path)$/;"	f	file:
LastThermalStats	src/Computer/GlideComputerAirData.cpp	/^GlideComputerAirData::LastThermalStats(const MoreData &basic,$/;"	f	class:GlideComputerAirData
LastTime_Check	src/Computer/ConditionMonitor/ConditionMonitor.hpp	/^  double LastTime_Check;$/;"	m	class:ConditionMonitor
LastTime_Notification	src/Computer/ConditionMonitor/ConditionMonitor.hpp	/^  double LastTime_Notification;$/;"	m	class:ConditionMonitor
LastTraffic	src/FLARM/List.hpp	/^  const FlarmTraffic *LastTraffic() const {$/;"	f	struct:TrafficList
LastUsedWaypoints	src/Waypoint/LastUsed.cpp	/^namespace LastUsedWaypoints$/;"	n	file:
LastUsedWaypoints	src/Waypoint/LastUsed.hpp	/^namespace LastUsedWaypoints$/;"	n
LatLonUnits	src/Profile/ProfileKeys.cpp	/^const char LatLonUnits[] = "LatLonUnits";$/;"	m	namespace:ProfileKeys	file:
LatinBufferSize	src/FLARM/FlarmNetRecord.hpp	/^LatinBufferSize(size_t size)$/;"	f
Latitudes	src/Device/Driver/LX/Protocol.hpp	/^    int32_t Latitudes[NUMTPS];$/;"	m	struct:LX::Declaration
Layer	src/Renderer/OZRenderer.hpp	/^  enum Layer {$/;"	g	class:OZRenderer
Layer	src/Renderer/TaskPointRenderer.hpp	/^  enum Layer {$/;"	g	class:TaskPointRenderer
LayerApplyFilterToLayer	src/Topography/shapelib/mapserver.h	/^    int (*LayerApplyFilterToLayer)(FilterEncodingNode *psNode, mapObj *map, int iLayerIndex);$/;"	m	struct:layerVTable
LayerClose	src/Topography/shapelib/mapserver.h	/^    int (*LayerClose)(layerObj *layer);$/;"	m	struct:layerVTable
LayerCloseConnection	src/Topography/shapelib/mapserver.h	/^    int (*LayerCloseConnection)(layerObj *layer);$/;"	m	struct:layerVTable
LayerCompositer	src/Topography/shapelib/mapserver.h	/^  } LayerCompositer;$/;"	t	typeref:struct:_LayerCompositer
LayerCreateItems	src/Topography/shapelib/mapserver.h	/^    int (*LayerCreateItems)(layerObj *layer, int nt);$/;"	m	struct:layerVTable
LayerEnablePaging	src/Topography/shapelib/mapserver.h	/^    void (*LayerEnablePaging)(layerObj *layer, int value);$/;"	m	struct:layerVTable
LayerEscapePropertyName	src/Topography/shapelib/mapserver.h	/^    char* (*LayerEscapePropertyName)(layerObj *layer, const char* pszString);$/;"	m	struct:layerVTable
LayerEscapeSQLParam	src/Topography/shapelib/mapserver.h	/^    char* (*LayerEscapeSQLParam)(layerObj *layer, const char* pszString);$/;"	m	struct:layerVTable
LayerFreeItemInfo	src/Topography/shapelib/mapserver.h	/^    void (*LayerFreeItemInfo)(layerObj *layer);$/;"	m	struct:layerVTable
LayerGetAutoProjection	src/Topography/shapelib/mapserver.h	/^    int (*LayerGetAutoProjection)(layerObj *layer, projectionObj *projection);$/;"	m	struct:layerVTable
LayerGetAutoStyle	src/Topography/shapelib/mapserver.h	/^    int (*LayerGetAutoStyle)(mapObj *map, layerObj *layer, classObj *c, shapeObj *shape);$/;"	m	struct:layerVTable
LayerGetExtent	src/Topography/shapelib/mapserver.h	/^    int (*LayerGetExtent)(layerObj *layer, rectObj *extent);$/;"	m	struct:layerVTable
LayerGetItems	src/Topography/shapelib/mapserver.h	/^    int (*LayerGetItems)(layerObj *layer);$/;"	m	struct:layerVTable
LayerGetNumFeatures	src/Topography/shapelib/mapserver.h	/^    int (*LayerGetNumFeatures)(layerObj *layer);$/;"	m	struct:layerVTable
LayerGetPaging	src/Topography/shapelib/mapserver.h	/^    int (*LayerGetPaging)(layerObj *layer);$/;"	m	struct:layerVTable
LayerGetShape	src/Topography/shapelib/mapserver.h	/^    int (*LayerGetShape)(layerObj *layer, shapeObj *shape, resultObj *record);$/;"	m	struct:layerVTable
LayerGetShapeCount	src/Topography/shapelib/mapserver.h	/^    int (*LayerGetShapeCount)(layerObj *layer, rectObj rect, projectionObj *rectProjection);$/;"	m	struct:layerVTable
LayerInitItemInfo	src/Topography/shapelib/mapserver.h	/^    int (*LayerInitItemInfo)(layerObj *layer);$/;"	m	struct:layerVTable
LayerIsOpen	src/Topography/shapelib/mapserver.h	/^    int (*LayerIsOpen)(layerObj *layer);$/;"	m	struct:layerVTable
LayerNextShape	src/Topography/shapelib/mapserver.h	/^    int (*LayerNextShape)(layerObj *layer, shapeObj *shape);$/;"	m	struct:layerVTable
LayerOpen	src/Topography/shapelib/mapserver.h	/^    int (*LayerOpen)(layerObj *layer);$/;"	m	struct:layerVTable
LayerSetTimeFilter	src/Topography/shapelib/mapserver.h	/^    int (*LayerSetTimeFilter)(layerObj *layer, const char *timestring, const char *timefield);$/;"	m	struct:layerVTable
LayerSupportsCommonFilters	src/Topography/shapelib/mapserver.h	/^    int (*LayerSupportsCommonFilters)(layerObj *layer);$/;"	m	struct:layerVTable
LayerTranslateFilter	src/Topography/shapelib/mapserver.h	/^    int (*LayerTranslateFilter)(layerObj *layer, expressionObj *filter, char *filteritem);$/;"	m	struct:layerVTable
LayerWhichShapes	src/Topography/shapelib/mapserver.h	/^    int (*LayerWhichShapes)(layerObj *layer, rectObj rect, int isQuery);$/;"	m	struct:layerVTable
Layout	src/Dialogs/Device/Vega/VegaConfigurationDialog.cpp	/^    Layout(const PixelRect &rc):demo(rc), save(rc) {$/;"	f	struct:final::Layout
Layout	src/Dialogs/Device/Vega/VegaConfigurationDialog.cpp	/^  struct Layout {$/;"	s	class:final	file:
Layout	src/Dialogs/Settings/dlgConfigInfoboxes.cpp	/^  struct Layout {$/;"	s	class:final	file:
Layout	src/Dialogs/Settings/dlgConfigInfoboxes.cpp	/^InfoBoxesConfigWidget::Layout::Layout(PixelRect rc,$/;"	f	class:InfoBoxesConfigWidget::Layout
Layout	src/Dialogs/Settings/dlgConfiguration.cpp	/^    Layout(const PixelRect &rc):expert(rc), button2(rc), button1(rc) {$/;"	f	struct:final::Layout
Layout	src/Dialogs/Settings/dlgConfiguration.cpp	/^  struct Layout {$/;"	s	class:final	file:
Layout	src/Dialogs/Task/Manager/TaskClosePanel.hpp	/^  struct Layout {$/;"	s	class:final
Layout	src/Dialogs/Task/TargetDialog.cpp	/^  struct Layout {$/;"	s	class:TargetWidget	file:
Layout	src/Dialogs/Task/TargetDialog.cpp	/^TargetWidget::Layout::Layout(PixelRect rc)$/;"	f	class:TargetWidget::Layout
Layout	src/Dialogs/Task/TaskPointDialog.cpp	/^  struct Layout {$/;"	s	class:final	file:
Layout	src/Dialogs/Task/TaskPointDialog.cpp	/^TaskPointWidget::Layout::Layout(PixelRect rc, const DialogLook &look)$/;"	f	class:TaskPointWidget::Layout
Layout	src/Dialogs/Waypoint/dlgWaypointDetails.cpp	/^  struct Layout {$/;"	s	class:final	file:
Layout	src/Dialogs/dlgAnalysis.cpp	/^  struct Layout {$/;"	s	class:final	file:
Layout	src/InfoBoxes/InfoBoxLayout.hpp	/^  struct Layout {$/;"	s	namespace:InfoBoxLayout
Layout	src/Screen/Layout.cpp	/^namespace Layout$/;"	n	file:
Layout	src/Screen/Layout.hpp	/^namespace Layout$/;"	n
Layout	src/Widget/ArrowPagerWidget.hpp	/^  struct Layout {$/;"	s	class:ArrowPagerWidget
Layout	src/Widget/TabWidget.cpp	/^TabWidget::Layout::Layout(Orientation orientation, PixelRect rc,$/;"	f	class:TabWidget::Layout
Layout	src/Widget/TabWidget.hpp	/^  struct Layout {$/;"	s	class:TabWidget
LayoutConfigPanel	src/Dialogs/Settings/Panels/LayoutConfigPanel.cpp	/^  LayoutConfigPanel()$/;"	f	class:final
LazyPaintWindow	src/ui/window/LazyPaintWindow.hpp	/^class LazyPaintWindow : public BufferWindow {$/;"	c
LazyPaintWindow	src/ui/window/LazyPaintWindow.hpp	/^class LazyPaintWindow : public FakeBufferWindow {$/;"	c
LeScanCallback	src/Android/LeScanCallback.hpp	/^class LeScanCallback {$/;"	c
Leaf	src/util/QuadTree.hxx	/^	struct Leaf {$/;"	s	class:QuadTree
Leaf	src/util/RadixTree.hpp	/^    Leaf(Leaf *_next, const T &_value)$/;"	f	struct:RadixTree::Leaf
Leaf	src/util/RadixTree.hpp	/^  struct Leaf {$/;"	s	class:RadixTree
LeafList	src/util/QuadTree.hxx	/^	struct LeafList {$/;"	s
LeafList	src/util/RadixTree.hpp	/^    LeafList():head(nullptr) {}$/;"	f	struct:RadixTree::LeafList
LeafList	src/util/RadixTree.hpp	/^  struct LeafList {$/;"	s	class:RadixTree
LeafVector	src/Engine/Route/FlatTriangleFanTree.hpp	/^                    GlobalSliceAllocator<FlatTriangleFanTree, 128u> > LeafVector;$/;"	t	class:FlatTriangleFanTree
Lease	src/thread/Guard.hpp	/^  class Lease {$/;"	c	class:Guard
LeastSquares	src/Math/LeastSquares.hpp	/^class LeastSquares: public XYDataStore$/;"	c
LeaveDrawThread	src/Components.cpp	/^LeaveDrawThread()$/;"	f
LeaveDrawThread	src/thread/Debug.hpp	/^LeaveDrawThread()$/;"	f
LeavePage	src/PageActions.cpp	/^PageActions::LeavePage()$/;"	f	class:PageActions
LeavePan	src/Pan.cpp	/^LeavePan()$/;"	f
LeftLayout	src/Form/ButtonPanel.cpp	/^ButtonPanel::LeftLayout()$/;"	f	class:ButtonPanel
LeftLayout	src/Form/ButtonPanel.cpp	/^ButtonPanel::LeftLayout(PixelRect rc)$/;"	f	class:ButtonPanel
LegActive	src/Renderer/TaskPointRenderer.hpp	/^  bool LegActive() const {$/;"	f	class:TaskPointRenderer
Length	src/Hardware/VideoPower.h	/^  ULONG Length;$/;"	m	struct:VIDEO_POWER_MANAGEMENT
Length	src/MapSettings.hpp	/^  enum class Length: uint8_t {$/;"	c	struct:TrailSettings
LeonardoCreateOnPort	src/Device/Driver/Leonardo.cpp	/^LeonardoCreateOnPort(const DeviceConfig &config, Port &com_port)$/;"	f	file:
LeonardoDevice	src/Device/Driver/Leonardo.cpp	/^class LeonardoDevice : public AbstractDevice {$/;"	c	file:
LeonardoParseC	src/Device/Driver/Leonardo.cpp	/^LeonardoParseC(NMEAInputLine &line, NMEAInfo &info)$/;"	f	file:
LeonardoParseD	src/Device/Driver/Leonardo.cpp	/^LeonardoParseD(NMEAInputLine &line, NMEAInfo &info)$/;"	f	file:
Level	src/Atmosphere/CuSonde.hpp	/^  struct Level {$/;"	s	class:CuSonde
LevilCreateOnPort	src/Device/Driver/LevilAHRS_G.cpp	/^LevilCreateOnPort(const DeviceConfig &config, Port &com_port)$/;"	f	file:
LevilDevice	src/Device/Driver/LevilAHRS_G.cpp	/^class LevilDevice : public AbstractDevice {$/;"	c	file:
LiftDatabase	src/NMEA/LiftDatabase.hpp	/^class LiftDatabase : public std::array<double, 36> {$/;"	c
LiftDatabaseComputer	src/Computer/LiftDatabaseComputer.hpp	/^class LiftDatabaseComputer {$/;"	c
LiftPoints	src/Gauge/ThermalAssistantRenderer.hpp	/^  class LiftPoints: public std::array<BulkPixelPoint,$/;"	c	class:ThermalAssistantRenderer
LiftUnitsValue	src/Profile/ProfileKeys.cpp	/^const char LiftUnitsValue[] = "LiftUnit";$/;"	m	namespace:ProfileKeys	file:
LightColor	src/ui/canvas/Color.hpp	/^LightColor(Color c)$/;"	f
LightColor	src/ui/canvas/Color.hpp	/^LightColor(uint8_t c)$/;"	f
LightString	src/util/LightString.hxx	/^class LightString : public StringPointer<T> {$/;"	c
LightUserData	src/lua/Util.hxx	/^struct LightUserData {$/;"	s	struct:Lua::StackIndex
Lighten	src/ui/canvas/PortableColor.hpp	/^  constexpr RGB8Color Lighten() const {$/;"	f	class:RGB8Color
LimitDelta	src/Computer/StateClock.hpp	/^  static double LimitDelta(double delta) {$/;"	f	class:StateClock
LimitGR	src/Computer/GlideRatioCalculator.cpp	/^LimitGR(double gr)$/;"	f	file:
Line2D	src/Math/Line2D.hpp	/^  constexpr Line2D(Point _a, Point _b):a(_a), b(_b) {}$/;"	f	struct:Line2D
Line2D	src/Math/Line2D.hpp	/^struct Line2D {$/;"	s
LineReader	src/io/LineReader.hpp	/^class LineReader {$/;"	c
LineSectorZone	src/Engine/Task/ObservationZones/LineSectorZone.hpp	/^  LineSectorZone(const GeoPoint loc, const double length = 1000.0)$/;"	f	class:LineSectorZone
LineSectorZone	src/Engine/Task/ObservationZones/LineSectorZone.hpp	/^  LineSectorZone(const LineSectorZone &other, const GeoPoint &reference)$/;"	f	class:LineSectorZone
LineSectorZone	src/Engine/Task/ObservationZones/LineSectorZone.hpp	/^class LineSectorZone: public SymmetricSectorZone$/;"	c
LineSectorZoneEditWidget	src/Dialogs/Task/Widgets/LineSectorZoneEditWidget.hpp	/^class LineSectorZoneEditWidget : public ObservationZoneEditWidget {$/;"	c
LinkCleared	src/Engine/Route/RoutePlanner.cpp	/^RoutePlanner::LinkCleared(const RouteLink &e)$/;"	f	class:RoutePlanner
LinkProgram	src/ui/canvas/opengl/Shaders.cpp	/^LinkProgram(GLProgram &program)$/;"	f	file:
LinkTimeout	src/Device/Driver.cpp	/^AbstractDevice::LinkTimeout()$/;"	f	class:AbstractDevice
LinkTimeout	src/Device/Driver/BlueFly/Misc.cpp	/^BlueFlyDevice::LinkTimeout()$/;"	f	class:BlueFlyDevice
LinkTimeout	src/Device/Driver/CAI302/Mode.cpp	/^CAI302Device::LinkTimeout()$/;"	f	class:CAI302Device
LinkTimeout	src/Device/Driver/EW.cpp	/^EWDevice::LinkTimeout()$/;"	f	class:EWDevice
LinkTimeout	src/Device/Driver/FLARM/Device.cpp	/^FlarmDevice::LinkTimeout()$/;"	f	class:FlarmDevice
LinkTimeout	src/Device/Driver/LX/Mode.cpp	/^LXDevice::LinkTimeout()$/;"	f	class:LXDevice
LinkTimeout	src/Device/Driver/Vega/Misc.cpp	/^VegaDevice::LinkTimeout()$/;"	f	class:VegaDevice
LinuxInputDevice	src/ui/event/poll/linux/Input.cpp	/^LinuxInputDevice::LinuxInputDevice(EventQueue &_queue, MergeMouse &_merge)$/;"	f	class:UI::LinuxInputDevice
List	src/Cloud/Client.hpp	/^                                 boost::intrusive::constant_time_size<false>> List;$/;"	t	class:CloudClientContainer
List	src/Cloud/Thermal.hpp	/^                                 boost::intrusive::constant_time_size<false>> List;$/;"	t	class:CloudThermalContainer
List	src/ui/window/custom/WList.hpp	/^                                 boost::intrusive::constant_time_size<false>> List;$/;"	t	class:WindowList
ListClicked	src/Dialogs/Plane/PlanePolarDialog.cpp	/^PlanePolarWidget::ListClicked()$/;"	f	class:PlanePolarWidget
ListControl	src/Form/List.cpp	/^  :ListControl(_look)$/;"	f
ListControl	src/Form/List.hpp	/^class ListControl : public PaintWindow {$/;"	c
ListCursorHandler	src/Form/List.hpp	/^class ListCursorHandler {$/;"	c
ListItem	src/Dialogs/Plane/PlaneListDialog.cpp	/^    ListItem(const TCHAR *_name, Path _path)$/;"	f	struct:final::ListItem
ListItem	src/Dialogs/Plane/PlaneListDialog.cpp	/^  struct ListItem {$/;"	s	class:final	file:
ListItem	src/Dialogs/ProfileListDialog.cpp	/^    ListItem(const TCHAR *_name, Path _path)$/;"	f	struct:final::ListItem
ListItem	src/Dialogs/ProfileListDialog.cpp	/^  struct ListItem {$/;"	s	class:final	file:
ListItem	src/Dialogs/Weather/NOAAList.cpp	/^  struct ListItem {$/;"	s	class:final	file:
ListItem	src/Kobo/ToolsDialog.cpp	/^  ListItem(const TCHAR *_name, Path _path)$/;"	f	struct:ListItem
ListItem	src/Kobo/ToolsDialog.cpp	/^struct ListItem$/;"	s	file:
ListItemRenderer	src/Form/List.hpp	/^class ListItemRenderer {$/;"	c
ListItemRendererFunction	src/Form/List.hpp	/^typedef void (*ListItemRendererFunction)(Canvas &canvas, const PixelRect rc,$/;"	t
ListNetworks	src/Kobo/WPASupplicant.cpp	/^WPASupplicant::ListNetworks(WifiConfiguredNetworkInfo *dest, unsigned max)$/;"	f	class:WPASupplicant
ListPicker	src/Dialogs/ListPicker.cpp	/^ListPicker(const TCHAR *caption,$/;"	f
ListPickerWidget	src/Dialogs/ListPicker.cpp	/^class ListPickerWidget : public ListWidget {$/;"	c	file:
ListWidget	src/Widget/ListWidget.hpp	/^class ListWidget$/;"	c
Listener	src/Dialogs/Device/DeviceEditWidget.hpp	/^  struct Listener {$/;"	s	class:DeviceEditWidget
Listener	src/Dialogs/Settings/Panels/PagesConfigPanel.cpp	/^  class Listener {$/;"	c	class:final	file:
Listener	src/Dialogs/Task/Widgets/ObservationZoneEditWidget.hpp	/^  struct Listener {$/;"	s	class:ObservationZoneEditWidget
LiveBlackboard	src/Blackboard/LiveBlackboard.hpp	/^  LiveBlackboard():calling_listeners(false) {}$/;"	f	class:LiveBlackboard
LiveBlackboard	src/Blackboard/LiveBlackboard.hpp	/^class LiveBlackboard : public FullBlackboard {$/;"	c
LiveTrack24	src/Tracking/LiveTrack24.cpp	/^namespace LiveTrack24 {$/;"	n	file:
LiveTrack24	src/Tracking/LiveTrack24.hpp	/^namespace LiveTrack24 {$/;"	n
LiveTrack24	src/Tracking/LiveTrack24/Settings.hpp	/^namespace LiveTrack24 {$/;"	n
LiveTrack24Enabled	src/Profile/ProfileKeys.cpp	/^const char LiveTrack24Enabled[] = "LiveTrack24Enabled";$/;"	m	namespace:ProfileKeys	file:
LiveTrack24Password	src/Profile/ProfileKeys.cpp	/^const char LiveTrack24Password[] = "LiveTrack24Password";$/;"	m	namespace:ProfileKeys	file:
LiveTrack24Server	src/Profile/ProfileKeys.cpp	/^const char LiveTrack24Server[] = "LiveTrack24Server";$/;"	m	namespace:ProfileKeys	file:
LiveTrack24State	src/Tracking/TrackingGlue.hpp	/^  struct LiveTrack24State$/;"	s	class:final
LiveTrack24TrackingInterval	src/Profile/ProfileKeys.cpp	/^const char LiveTrack24TrackingInterval[] = "TrackingInterval";$/;"	m	namespace:ProfileKeys	file:
LiveTrack24TrackingVehicleName	src/Profile/ProfileKeys.cpp	/^const char LiveTrack24TrackingVehicleName[] = "TrackingVehicleName";$/;"	m	namespace:ProfileKeys	file:
LiveTrack24TrackingVehicleType	src/Profile/ProfileKeys.cpp	/^const char LiveTrack24TrackingVehicleType[] = "TrackingVehicleType";$/;"	m	namespace:ProfileKeys	file:
LiveTrack24Username	src/Profile/ProfileKeys.cpp	/^const char LiveTrack24Username[] = "LiveTrack24Username";$/;"	m	namespace:ProfileKeys	file:
Load	src/Cloud/Client.cpp	/^CloudClient::Load(Deserialiser &s)$/;"	f	class:CloudClient
Load	src/Cloud/Client.cpp	/^CloudClientContainer::Load(Deserialiser &s)$/;"	f	class:CloudClientContainer
Load	src/Cloud/Data.cpp	/^CloudData::Load(Deserialiser &s)$/;"	f	class:CloudData
Load	src/Cloud/Main.cpp	/^CloudServer::Load()$/;"	f	class:CloudServer
Load	src/Cloud/Thermal.cpp	/^CloudThermal::Load(Deserialiser &s)$/;"	f	class:CloudThermal
Load	src/Cloud/Thermal.cpp	/^CloudThermalContainer::Load(Deserialiser &s)$/;"	f	class:CloudThermalContainer
Load	src/Dialogs/Plane/PlaneListDialog.cpp	/^PlaneListWidget::Load(unsigned i)$/;"	f	class:PlaneListWidget
Load	src/Dialogs/Traffic/TrafficList.cpp	/^    void Load() {$/;"	f	struct:TrafficListWidget::Item
Load	src/Form/TabMenuData.hpp	/^  std::unique_ptr<Widget> (*Load)();$/;"	m	class:TabMenuPage::std
Load	src/Look/GlobalFonts.cpp	/^Fonts::Load(const FontSettings &settings)$/;"	f	class:Fonts
Load	src/Profile/AirspaceConfig.cpp	/^Profile::Load(const ProfileMap &map, AirspaceComputerSettings &settings)$/;"	f	class:Profile
Load	src/Profile/AirspaceConfig.cpp	/^Profile::Load(const ProfileMap &map, AirspaceRendererSettings &settings)$/;"	f	class:Profile
Load	src/Profile/AirspaceConfig.cpp	/^Profile::Load(const ProfileMap &map,$/;"	f	class:Profile
Load	src/Profile/ComputerProfile.cpp	/^Profile::Load(const ProfileMap &map, CirclingSettings &settings)$/;"	f	class:Profile
Load	src/Profile/ComputerProfile.cpp	/^Profile::Load(const ProfileMap &map, ComputerSettings &settings)$/;"	f	class:Profile
Load	src/Profile/ComputerProfile.cpp	/^Profile::Load(const ProfileMap &map, FeaturesSettings &settings)$/;"	f	class:Profile
Load	src/Profile/ComputerProfile.cpp	/^Profile::Load(const ProfileMap &map, LoggerSettings &settings)$/;"	f	class:Profile
Load	src/Profile/ComputerProfile.cpp	/^Profile::Load(const ProfileMap &map, PlacesOfInterestSettings &settings)$/;"	f	class:Profile
Load	src/Profile/ComputerProfile.cpp	/^Profile::Load(const ProfileMap &map, PolarSettings &settings)$/;"	f	class:Profile
Load	src/Profile/ComputerProfile.cpp	/^Profile::Load(const ProfileMap &map, TeamCodeSettings &settings)$/;"	f	class:Profile
Load	src/Profile/ComputerProfile.cpp	/^Profile::Load(const ProfileMap &map, WaveSettings &settings)$/;"	f	class:Profile
Load	src/Profile/ComputerProfile.cpp	/^Profile::Load(const ProfileMap &map, WindSettings &settings)$/;"	f	class:Profile
Load	src/Profile/ContestProfile.cpp	/^Profile::Load(const ProfileMap &map, ContestSettings &settings)$/;"	f	class:Profile
Load	src/Profile/FlarmProfile.cpp	/^Profile::Load(const ProfileMap &map, FlarmColorDatabase &db)$/;"	f	class:Profile
Load	src/Profile/InfoBoxConfig.cpp	/^Profile::Load(const ProfileMap &map, InfoBoxSettings &settings)$/;"	f	class:Profile
Load	src/Profile/MapProfile.cpp	/^Load(const ProfileMap &map, FAITriangleSettings &settings)$/;"	f	file:
Load	src/Profile/MapProfile.cpp	/^Profile::Load(const ProfileMap &map, MapItemListSettings &settings)$/;"	f	class:Profile
Load	src/Profile/MapProfile.cpp	/^Profile::Load(const ProfileMap &map, MapSettings &settings)$/;"	f	class:Profile
Load	src/Profile/MapProfile.cpp	/^Profile::Load(const ProfileMap &map, TrailSettings &settings)$/;"	f	class:Profile
Load	src/Profile/PageProfile.cpp	/^Load(const ProfileMap &map, PageLayout &_pl, const unsigned page)$/;"	f	file:
Load	src/Profile/PageProfile.cpp	/^Profile::Load(const ProfileMap &map, PageSettings &settings)$/;"	f	class:Profile
Load	src/Profile/Profile.cpp	/^Profile::Load()$/;"	f	class:Profile
Load	src/Profile/RouteProfile.cpp	/^Profile::Load(const ProfileMap &map, RoutePlannerConfig &settings)$/;"	f	class:Profile
Load	src/Profile/SystemProfile.cpp	/^Profile::Load(const ProfileMap &map, SystemSettings &settings)$/;"	f	class:Profile
Load	src/Profile/TaskProfile.cpp	/^Profile::Load(const ProfileMap &map, FinishConstraints &constraints)$/;"	f	class:Profile
Load	src/Profile/TaskProfile.cpp	/^Profile::Load(const ProfileMap &map, GlideSettings &settings)$/;"	f	class:Profile
Load	src/Profile/TaskProfile.cpp	/^Profile::Load(const ProfileMap &map, OrderedTaskSettings &settings)$/;"	f	class:Profile
Load	src/Profile/TaskProfile.cpp	/^Profile::Load(const ProfileMap &map, SectorDefaults &settings)$/;"	f	class:Profile
Load	src/Profile/TaskProfile.cpp	/^Profile::Load(const ProfileMap &map, StartConstraints &constraints)$/;"	f	class:Profile
Load	src/Profile/TaskProfile.cpp	/^Profile::Load(const ProfileMap &map, TaskBehaviour &settings)$/;"	f	class:Profile
Load	src/Profile/TaskProfile.cpp	/^Profile::Load(const ProfileMap &map, TaskStartMargins &settings)$/;"	f	class:Profile
Load	src/Profile/TrackingProfile.cpp	/^Profile::Load(const ProfileMap &map, TrackingSettings &settings)$/;"	f	class:Profile
Load	src/Profile/TrackingProfile.cpp	/^static void Load(const ProfileMap &map,$/;"	f	namespace:Profile
Load	src/Profile/UIProfile.cpp	/^Profile::Load(const ProfileMap &map, DialogSettings &settings)$/;"	f	class:Profile
Load	src/Profile/UIProfile.cpp	/^Profile::Load(const ProfileMap &map, DisplaySettings &settings)$/;"	f	class:Profile
Load	src/Profile/UIProfile.cpp	/^Profile::Load(const ProfileMap &map, FormatSettings &settings)$/;"	f	class:Profile
Load	src/Profile/UIProfile.cpp	/^Profile::Load(const ProfileMap &map, SoundSettings &settings)$/;"	f	class:Profile
Load	src/Profile/UIProfile.cpp	/^Profile::Load(const ProfileMap &map, TrafficSettings &settings)$/;"	f	class:Profile
Load	src/Profile/UIProfile.cpp	/^Profile::Load(const ProfileMap &map, UISettings &settings)$/;"	f	class:Profile
Load	src/Profile/UIProfile.cpp	/^Profile::Load(const ProfileMap &map, VarioSettings &settings)$/;"	f	class:Profile
Load	src/Profile/UIProfile.cpp	/^Profile::Load(const ProfileMap &map, VarioSoundSettings &settings)$/;"	f	class:Profile
Load	src/Profile/WeatherProfile.cpp	/^  static void Load(const ProfileMap &map, PCMetSettings &settings) {$/;"	f	namespace:Profile
Load	src/Profile/WeatherProfile.cpp	/^Profile::Load(const ProfileMap &map, WeatherSettings &settings)$/;"	f	class:Profile
Load	src/ResourceLoader.cpp	/^ResourceLoader::Load(ResourceId id)$/;"	f	class:ResourceLoader
Load	src/ResourceLoader.cpp	/^ResourceLoader::Load(const TCHAR *name, const TCHAR *type)$/;"	f	class:ResourceLoader
Load	src/Terrain/RasterTerrain.cpp	/^RasterTerrain::Load(Path path, FileCache *cache,$/;"	f	class:RasterTerrain
Load	src/Topography/TopographyStore.cpp	/^TopographyStore::Load(OperationEnvironment &operation, NLineReader &reader,$/;"	f	class:TopographyStore
Load	src/io/FileCache.cpp	/^FileCache::Load(const TCHAR *name, Path original_path)$/;"	f	class:FileCache
Load	src/ui/canvas/android/Bitmap.cpp	/^Bitmap::Load(ResourceId id, Type _type)$/;"	f	class:Bitmap
Load	src/ui/canvas/android/Font.cpp	/^Font::Load(const FontDescription &d)$/;"	f	class:Font
Load	src/ui/canvas/apple/Font.cpp	/^Font::Load(const FontDescription &d)$/;"	f	class:Font
Load	src/ui/canvas/custom/Bitmap.cpp	/^Bitmap::Load(ConstBuffer<void> buffer, Type type)$/;"	f	class:Bitmap
Load	src/ui/canvas/custom/ResourceBitmap.cpp	/^Bitmap::Load(ResourceId id, Type type)$/;"	f	class:Bitmap
Load	src/ui/canvas/freetype/Font.cpp	/^Font::Load(const FontDescription &d)$/;"	f	class:Font
Load	src/ui/canvas/freetype/Init.cpp	/^FreeType::Load(const char *path)$/;"	f	class:FreeType
Load	src/ui/canvas/gdi/Font.cpp	/^Font::Load(const FontDescription &d)$/;"	f	class:Font
Load	src/ui/canvas/gdi/ResourceBitmap.cpp	/^Bitmap::Load(ResourceId id, Type type)$/;"	f	class:Bitmap
Load	src/ui/canvas/memory/Bitmap.cpp	/^Bitmap::Load(UncompressedImage &&uncompressed, gcc_unused Type type)$/;"	f	class:Bitmap
Load	src/ui/canvas/opengl/Bitmap.cpp	/^Bitmap::Load(UncompressedImage &&_uncompressed, Type _type)$/;"	f	class:Bitmap
LoadATCReferencePanel	src/InfoBoxes/Panel/ATCReference.cpp	/^LoadATCReferencePanel(unsigned id)$/;"	f
LoadActiveRadioFrequencyEditPanel	src/InfoBoxes/Panel/RadioEdit.cpp	/^LoadActiveRadioFrequencyEditPanel(unsigned id)$/;"	f
LoadAll	src/Topography/TopographyFile.cpp	/^TopographyFile::LoadAll()$/;"	f	class:TopographyFile
LoadAll	src/Topography/TopographyStore.cpp	/^TopographyStore::LoadAll()$/;"	f	class:TopographyStore
LoadAlternatesPanel	src/InfoBoxes/Content/Alternate.cpp	/^LoadAlternatesPanel(unsigned id)$/;"	f	file:
LoadAltitudeInfoPanel	src/InfoBoxes/Panel/AltitudeInfo.cpp	/^LoadAltitudeInfoPanel(unsigned id)$/;"	f
LoadAltitudeSetupPanel	src/InfoBoxes/Panel/AltitudeSetup.cpp	/^LoadAltitudeSetupPanel(unsigned id)$/;"	f
LoadAltitudeSimulatorPanel	src/InfoBoxes/Panel/AltitudeSimulator.cpp	/^LoadAltitudeSimulatorPanel(unsigned id)$/;"	f
LoadAnalysis8Panel	src/InfoBoxes/Content/Contest.cpp	/^LoadAnalysis8Panel(unsigned id)$/;"	f	file:
LoadAnalysisBarographPanel	src/InfoBoxes/Content/Trace.cpp	/^LoadAnalysisBarographPanel(unsigned id)$/;"	f	file:
LoadAudioModeScheme	src/Dialogs/Device/Vega/AudioModeParameters.hpp	/^LoadAudioModeScheme(VegaParametersWidget &widget, const VEGA_SCHEME &scheme)$/;"	f
LoadBitmap2	src/ResourceLoader.cpp	/^ResourceLoader::LoadBitmap2(ResourceId id)$/;"	f	class:ResourceLoader
LoadBottom	src/PageActions.cpp	/^LoadBottom(PageLayout::Bottom bottom)$/;"	f	file:
LoadCache	src/Terrain/RasterMap.cpp	/^RasterMap::LoadCache(FILE *file)$/;"	f	class:RasterMap
LoadCache	src/Terrain/RasterTerrain.cpp	/^RasterTerrain::LoadCache(FileCache &cache, Path path)$/;"	f	class:RasterTerrain
LoadCache	src/Terrain/RasterTerrain.hpp	/^  bool LoadCache(FileCache *cache, Path path) {$/;"	f	class:RasterTerrain
LoadCache	src/Terrain/RasterTile.cpp	/^RasterTile::LoadCache(FILE *file)$/;"	f	class:RasterTile
LoadCache	src/Terrain/RasterTileCache.cpp	/^RasterTileCache::LoadCache(FILE *file)$/;"	f	class:RasterTileCache
LoadChecklist	src/Dialogs/dlgChecklist.cpp	/^LoadChecklist()$/;"	f	file:
LoadClicked	src/Dialogs/Plane/PlaneListDialog.cpp	/^PlaneListWidget::LoadClicked()$/;"	f	class:PlaneListWidget
LoadColor	src/Profile/FlarmProfile.cpp	/^LoadColor(const ProfileMap &map,FlarmColorDatabase &db,$/;"	f	file:
LoadConfiguredTopography	src/Topography/TopographyGlue.cpp	/^LoadConfiguredTopography(TopographyStore &store,$/;"	f
LoadConfiguredTopographyZip	src/Topography/TopographyGlue.cpp	/^LoadConfiguredTopographyZip(TopographyStore &store,$/;"	f	file:
LoadContestClass	src/Device/Driver/LX/Declare.cpp	/^LoadContestClass(LX::ContestClass &lx_driver_ContestClass,$/;"	f	file:
LoadDefaults	src/Input/InputDefaults.cpp	/^InputEvents::LoadDefaults(InputConfig &input_config)$/;"	f	class:InputEvents
LoadFLARMnet	src/FLARM/Glue.cpp	/^LoadFLARMnet(FlarmNetDatabase &db)$/;"	f	file:
LoadFile	src/Dialogs/Plane/PlaneListDialog.cpp	/^LoadFile(Path path)$/;"	f	file:
LoadFile	src/FLARM/FlarmNetReader.cpp	/^FlarmNetReader::LoadFile(NLineReader &reader, FlarmNetDatabase &database)$/;"	f	class:FlarmNetReader
LoadFile	src/FLARM/FlarmNetReader.cpp	/^FlarmNetReader::LoadFile(Path path, FlarmNetDatabase &database)$/;"	f	class:FlarmNetReader
LoadFile	src/Profile/File.cpp	/^Profile::LoadFile(ProfileMap &map, Path path)$/;"	f	class:Profile
LoadFile	src/Profile/Profile.cpp	/^Profile::LoadFile(Path path)$/;"	f	class:Profile
LoadFile	src/ui/canvas/android/Bitmap.cpp	/^Bitmap::LoadFile(Path path)$/;"	f	class:Bitmap
LoadFile	src/ui/canvas/custom/Bitmap.cpp	/^Bitmap::LoadFile(Path path)$/;"	f	class:Bitmap
LoadFile	src/ui/canvas/freetype/Font.cpp	/^Font::LoadFile(const char *file, unsigned ptsize, bool bold, bool italic)$/;"	f	class:Font
LoadFile	src/ui/canvas/gdi/Bitmap.cpp	/^Bitmap::LoadFile(Path path)$/;"	f	class:Bitmap
LoadFileToBuffer	src/Logger/GRecord.cpp	/^GRecord::LoadFileToBuffer(Path path)$/;"	f	class:GRecord
LoadFlarmDatabases	src/FLARM/Glue.cpp	/^LoadFlarmDatabases()$/;"	f
LoadFlarmNameFile	src/FLARM/NameFile.cpp	/^LoadFlarmNameFile(TLineReader &reader, FlarmNameDatabase &db)$/;"	f
LoadFromFile	src/Polar/PolarFileGlue.cpp	/^PolarGlue::LoadFromFile(PolarInfo &polar, NLineReader &reader)$/;"	f	class:PolarGlue
LoadFromFile	src/Polar/PolarFileGlue.cpp	/^PolarGlue::LoadFromFile(PolarInfo &polar, Path path)$/;"	f	class:PolarGlue
LoadFromOSLanguage	src/Units/UnitsGlue.cpp	/^Units::LoadFromOSLanguage()$/;"	f	class:Units
LoadFromOldProfile	src/Polar/PolarGlue.cpp	/^PolarGlue::LoadFromOldProfile(PolarInfo &polar)$/;"	f	class:PolarGlue
LoadFromProfile	src/Polar/PolarGlue.cpp	/^PolarGlue::LoadFromProfile()$/;"	f	class:PolarGlue
LoadFromProfile	src/Polar/PolarGlue.cpp	/^PolarGlue::LoadFromProfile(PolarInfo &polar)$/;"	f	class:PolarGlue
LoadFromProfile	src/Renderer/WaypointRendererSettings.cpp	/^WaypointRendererSettings::LoadFromProfile()$/;"	f	class:WaypointRendererSettings
LoadFromProfile	src/Weather/NOAAGlue.cpp	/^NOAAStore::LoadFromProfile()$/;"	f	class:NOAAStore
LoadFromString	src/Weather/NOAAGlue.cpp	/^NOAAStore::LoadFromString(const char *string)$/;"	f	class:NOAAStore
LoadGeoFile	src/ui/canvas/custom/GeoBitmap.cpp	/^Bitmap::LoadGeoFile(Path path)$/;"	f	class:Bitmap
LoadGeoTiff	src/ui/canvas/custom/LibTiff.cpp	/^LoadGeoTiff(Path path)$/;"	f
LoadInfoBoxes	src/PageActions.cpp	/^LoadInfoBoxes(const PageLayout::InfoBoxConfig &config)$/;"	f	file:
LoadJPEGFile	src/ui/canvas/apple/ImageDecoder.cpp	/^LoadJPEGFile(Path path)$/;"	f
LoadJPEGFile	src/ui/canvas/custom/LibJPEG.cpp	/^LoadJPEGFile(Path path)$/;"	f
LoadJPG2000	src/Terrain/Loader.cpp	/^LoadJPG2000(jas_stream_t *in, void *loader)$/;"	f	file:
LoadJPG2000	src/Terrain/Loader.cpp	/^TerrainLoader::LoadJPG2000(struct zzip_dir *dir, const char *path)$/;"	f	class:TerrainLoader
LoadLanguageFile	src/Language/LanguageGlue.cpp	/^LoadLanguageFile(Path path)$/;"	f	file:
LoadLayout	src/PageActions.cpp	/^PageActions::LoadLayout(const PageLayout &layout)$/;"	f	class:PageActions
LoadMacCreadyEditPanel	src/InfoBoxes/Panel/MacCreadyEdit.cpp	/^LoadMacCreadyEditPanel(unsigned id)$/;"	f
LoadMacCreadySetupPanel	src/InfoBoxes/Panel/MacCreadySetup.cpp	/^LoadMacCreadySetupPanel(unsigned id)$/;"	f
LoadMain	src/PageActions.cpp	/^LoadMain(PageLayout::Main main)$/;"	f	file:
LoadNextWaypointDetailsPanel	src/InfoBoxes/Content/Task.cpp	/^LoadNextWaypointDetailsPanel(unsigned id)$/;"	f	file:
LoadOrientation	src/Hardware/DisplayGlue.cpp	/^Display::LoadOrientation(VerboseOperationEnvironment &env)$/;"	f	class:Display
LoadOverview	src/Terrain/Loader.cpp	/^TerrainLoader::LoadOverview(struct zzip_dir *dir,$/;"	f	class:TerrainLoader
LoadPNG	src/ui/canvas/apple/ImageDecoder.cpp	/^LoadPNG(Path path)$/;"	f
LoadPNG	src/ui/canvas/apple/ImageDecoder.cpp	/^LoadPNG(const void *data, size_t size)$/;"	f
LoadPNG	src/ui/canvas/custom/LibPNG.cpp	/^LoadPNG(Path path)$/;"	f
LoadPNG	src/ui/canvas/custom/LibPNG.cpp	/^LoadPNG(const void *data, size_t size)$/;"	f
LoadPNG	src/ui/canvas/custom/LibPNG.cpp	/^LoadPNG(png_structp png_ptr, png_infop info_ptr,$/;"	f	file:
LoadPath	src/Profile/DeviceConfig.cpp	/^LoadPath(const ProfileMap &map, DeviceConfig &config, unsigned n)$/;"	f	file:
LoadPilotInfo	src/Device/Driver/LX/Declare.cpp	/^LoadPilotInfo(LX::Pilot &lx_driver_Pilot, const Declaration &declaration)$/;"	f	file:
LoadPolarShape	src/Dialogs/Plane/PlanePolarDialog.cpp	/^  void LoadPolarShape(const PolarShape &shape) {$/;"	f	class:final	file:
LoadPortIndex	src/Profile/DeviceConfig.cpp	/^LoadPortIndex(const ProfileMap &map, DeviceConfig &config, unsigned n)$/;"	f	file:
LoadProfile	src/Startup.cpp	/^LoadProfile()$/;"	f	file:
LoadRadial	src/Dialogs/Task/TargetDialog.cpp	/^TargetWidget::LoadRadial()$/;"	f	class:TargetWidget
LoadRange	src/Dialogs/Task/TargetDialog.cpp	/^TargetWidget::LoadRange()$/;"	f	class:TargetWidget
LoadRangeAndRadial	src/Dialogs/Task/TargetDialog.cpp	/^  void LoadRangeAndRadial() {$/;"	f	class:TargetWidget
LoadRecord	src/FLARM/FlarmNetReader.cpp	/^LoadRecord(FlarmNetRecord &record, const char *line)$/;"	f	file:
LoadRepositoryFile	src/Dialogs/FileManager.cpp	/^ManagedFileListWidget::LoadRepositoryFile()$/;"	f	class:ManagedFileListWidget
LoadResource	src/ui/canvas/Icon.cpp	/^MaskedIcon::LoadResource(ResourceId id, ResourceId big_id, bool center)$/;"	f	class:MaskedIcon
LoadResourceBitmap	src/ui/canvas/android/Bitmap.cpp	/^LoadResourceBitmap(ResourceId id)$/;"	f	file:
LoadScheme	src/Dialogs/Device/Vega/AudioParameters.hpp	/^  void LoadScheme(const VEGA_SCHEME::Audio &scheme) {$/;"	f	class:VegaAudioParametersWidget
LoadSecondary	src/FLARM/Glue.cpp	/^LoadSecondary(FlarmNameDatabase &db)$/;"	f	file:
LoadShape	src/Topography/TopographyFile.cpp	/^LoadShape(shapefileObj *file, const GeoPoint &center, int i,$/;"	f	file:
LoadStandbyRadioFrequencyEditPanel	src/InfoBoxes/Panel/RadioEdit.cpp	/^LoadStandbyRadioFrequencyEditPanel(unsigned id)$/;"	f
LoadStretch	src/ui/canvas/custom/ResourceBitmap.cpp	/^Bitmap::LoadStretch(ResourceId id, unsigned zoom)$/;"	f	class:Bitmap
LoadStretch	src/ui/canvas/gdi/ResourceBitmap.cpp	/^Bitmap::LoadStretch(ResourceId id, unsigned zoom)$/;"	f	class:Bitmap
LoadString	src/FLARM/FlarmNetReader.cpp	/^LoadString(const char *bytes, size_t length, StaticString<size> &dest)$/;"	f	file:
LoadString	src/FLARM/FlarmNetReader.cpp	/^LoadString(const char *bytes, size_t length, TCHAR *res, size_t res_size)$/;"	f	file:
LoadTask	src/Device/Driver/LX/Declare.cpp	/^LoadTask(LX::Declaration &lx_driver_Declaration, const Declaration &declaration)$/;"	f	file:
LoadTask	src/Dialogs/Task/Manager/TaskListPanel.cpp	/^TaskListPanel::LoadTask()$/;"	f	class:TaskListPanel
LoadTask	src/Task/Deserialiser.cpp	/^LoadTask(OrderedTask &task, const ConstDataNode &node,$/;"	f
LoadTask	src/Task/LoadFile.cpp	/^LoadTask(Path path, const TaskBehaviour &task_behaviour,$/;"	f
LoadTeamCodeDialog	src/InfoBoxes/Content/Team.cpp	/^LoadTeamCodeDialog(unsigned id)$/;"	f	file:
LoadTerrainOverview	src/Terrain/Loader.cpp	/^LoadTerrainOverview(struct zzip_dir *dir,$/;"	f
LoadTerrainOverview	src/Terrain/Loader.hpp	/^LoadTerrainOverview(struct zzip_dir *dir,$/;"	f
LoadTerrainRendererSettings	src/Profile/TerrainConfig.cpp	/^Profile::LoadTerrainRendererSettings(const ProfileMap &map,$/;"	f	class:Profile
LoadTiff	src/ui/canvas/custom/LibTiff.cpp	/^LoadTiff(Path path)$/;"	f
LoadTiff	src/ui/canvas/custom/LibTiff.cpp	/^LoadTiff(TIFFRGBAImage &img)$/;"	f	file:
LoadTiff	src/ui/canvas/custom/LibTiff.cpp	/^LoadTiff(TiffLoader &tiff)$/;"	f	file:
LoadTrace	src/Renderer/TrailRenderer.cpp	/^TrailRenderer::LoadTrace(const TraceComputer &trace_computer)$/;"	f	class:TrailRenderer
LoadTrace	src/Renderer/TrailRenderer.cpp	/^TrailRenderer::LoadTrace(const TraceComputer &trace_computer,$/;"	f	class:TrailRenderer
LoadUTCOffset	src/Profile/ComputerProfile.cpp	/^LoadUTCOffset(const ProfileMap &map, RoughTimeDelta &value_r)$/;"	f	file:
LoadUnits	src/Profile/UnitsConfig.cpp	/^Profile::LoadUnits(const ProfileMap &map, UnitSetting &config)$/;"	f	class:Profile
LoadWaypointFile	src/Waypoint/WaypointGlue.cpp	/^LoadWaypointFile(Waypoints &waypoints, Path path,$/;"	f	file:
LoadWaypointFile	src/Waypoint/WaypointGlue.cpp	/^LoadWaypointFile(Waypoints &waypoints, struct zzip_dir *dir, const char *path,$/;"	f	file:
LoadWaypoints	src/Waypoint/WaypointGlue.cpp	/^WaypointGlue::LoadWaypoints(Waypoints &way_points,$/;"	f	class:WaypointGlue
LoadWindEditPanel	src/InfoBoxes/Panel/WindEdit.cpp	/^LoadWindEditPanel(unsigned id)$/;"	f
LoadWithDialog	src/Dialogs/Plane/PlaneListDialog.cpp	/^PlaneListWidget::LoadWithDialog(unsigned i)$/;"	f	class:PlaneListWidget
LoadWorldFile	src/Terrain/Loader.cpp	/^LoadWorldFile(RasterTileCache &tile_cache,$/;"	f	file:
LoadWorldFile	src/Terrain/WorldFile.cpp	/^LoadWorldFile(struct zzip_dir *dir, const char *path,$/;"	f
LocalObject	src/java/Object.hxx	/^typedef LocalRef<jobject> LocalObject;$/;"	t	namespace:Java
LocalPath	src/Dialogs/FileManager.cpp	/^LocalPath(const AvailableFile &file)$/;"	f	file:
LocalPath	src/LocalPath.cpp	/^LocalPath(Path file)$/;"	f
LocalPath	src/LocalPath.cpp	/^LocalPath(const TCHAR *file)$/;"	f
LocalRef	src/java/Class.hxx	/^		:LocalRef<jclass>(env, cls) {}$/;"	f	class:Java::Class
LocalRef	src/java/Class.hxx	/^		:LocalRef<jclass>(env, env->FindClass(name)) {}$/;"	f	class:Java::Class
LocalRef	src/java/Ref.hxx	/^class LocalRef {$/;"	c	namespace:Java
LocalRef	src/java/String.hxx	/^		:LocalRef<jstring>(_env, _env->NewStringUTF(_value)) {}$/;"	f	class:Java::String
LocalTime	src/Dialogs/Settings/Panels/TimeConfigPanel.cpp	/^  LocalTime,$/;"	e	enum:ControlIndex	file:
LocalTime	src/Dialogs/StatusPanels/TimesStatusPanel.cpp	/^  LocalTime,$/;"	e	enum:Controls	file:
LocalTime	src/time/Convert.cxx	/^LocalTime(std::chrono::system_clock::time_point tp)$/;"	f
LocatePoint	src/Math/Line2D.hpp	/^  constexpr product_type LocatePoint(Point p) const {$/;"	f	struct:Line2D
Location	src/Dialogs/StatusPanels/FlightStatusPanel.cpp	/^  Location,$/;"	e	enum:Controls	file:
LocationMapItem	src/MapWindow/Items/MapItem.hpp	/^  LocationMapItem(const GeoVector &_vector, double _elevation)$/;"	f	struct:LocationMapItem
LocationMapItem	src/MapWindow/Items/MapItem.hpp	/^struct LocationMapItem: public MapItem$/;"	s
Lock	src/ui/canvas/fb/TopCanvas.cpp	/^TopCanvas::Lock()$/;"	f	class:TopCanvas
Lock	src/ui/canvas/sdl/TopCanvas.cpp	/^TopCanvas::Lock()$/;"	f	class:TopCanvas
LockCPU	src/Hardware/CPU.cpp	/^LockCPU()$/;"	f
LockCalculatorUI	src/Dialogs/Task/TargetDialog.cpp	/^TargetWidget::LockCalculatorUI()$/;"	f	class:TargetWidget
LockStop	src/thread/StandbyThread.hpp	/^  void LockStop() {$/;"	f	class:StandbyThread
LockTarget	src/Engine/Task/Ordered/Points/AATPoint.hpp	/^  void LockTarget(bool do_lock) {$/;"	f	class:final
LockTrigger	src/thread/StandbyThread.hpp	/^  void LockTrigger() {$/;"	f	class:StandbyThread
LockWaitDone	src/thread/StandbyThread.hpp	/^  void LockWaitDone() {$/;"	f	class:StandbyThread
LockedCopyTo	src/Computer/TraceComputer.cpp	/^TraceComputer::LockedCopyTo(TracePointVector &v) const$/;"	f	class:TraceComputer
LockedCopyTo	src/Computer/TraceComputer.cpp	/^TraceComputer::LockedCopyTo(TracePointVector &v, unsigned min_time,$/;"	f	class:TraceComputer
LockedCopyTraceTo	src/Computer/TaskComputer.hpp	/^  void LockedCopyTraceTo(TracePointVector &v) const {$/;"	f	class:TaskComputer
LockedCopyTraceTo	src/Computer/TaskComputer.hpp	/^  void LockedCopyTraceTo(TracePointVector &v, unsigned min_time,$/;"	f	class:TaskComputer
Log	src/Logger/NMEALogger.cpp	/^NMEALogger::Log(const char *text)$/;"	f	class:NMEALogger
LogComputer	src/Computer/LogComputer.cpp	/^LogComputer::LogComputer()$/;"	f	class:LogComputer
LogComputer	src/Computer/LogComputer.hpp	/^class LogComputer {$/;"	c
LogDebug	src/LogFile.hpp	52;"	d
LogDebug	src/LogFile.hpp	58;"	d
LogEmptyFRecord	src/IGC/IGCWriter.cpp	/^IGCWriter::LogEmptyFRecord(const BrokenTime &time)$/;"	f	class:IGCWriter
LogEvent	src/IGC/IGCWriter.cpp	/^IGCWriter::LogEvent(const BrokenTime &time, const char *event)$/;"	f	class:IGCWriter
LogEvent	src/IGC/IGCWriter.cpp	/^IGCWriter::LogEvent(const IGCFix &fix, int epe, int satellites,$/;"	f	class:IGCWriter
LogEvent	src/IGC/IGCWriter.cpp	/^IGCWriter::LogEvent(const NMEAInfo &gps_info, const char *event)$/;"	f	class:IGCWriter
LogEvent	src/Logger/FlightLogger.cpp	/^FlightLogger::LogEvent(const BrokenDateTime &date_time, const char *type)$/;"	f	class:FlightLogger
LogEvent	src/Logger/Logger.cpp	/^Logger::LogEvent(const NMEAInfo &gps_info, const char* event)$/;"	f	class:Logger
LogEvent	src/Logger/LoggerImpl.cpp	/^LoggerImpl::LogEvent(const NMEAInfo &gps_info, const char *event)$/;"	f	class:LoggerImpl
LogFRecord	src/IGC/IGCWriter.cpp	/^IGCWriter::LogFRecord(const BrokenTime &time, const int *satellite_ids)$/;"	f	class:IGCWriter
LogFileDate	src/Logger/IGCFileCleanup.cpp	/^LogFileDate(unsigned current_year, const TCHAR *filename)$/;"	f	file:
LogFinishEvent	src/Logger/Logger.cpp	/^Logger::LogFinishEvent(const NMEAInfo &gps_info)$/;"	f	class:Logger
LogInt	src/Dialogs/Device/FLARM/ConfigWidget.hpp	/^    LogInt,$/;"	e	enum:final::Controls
LogMode	src/Device/Driver/CAI302/Protocol.cpp	/^CAI302::LogMode(Port &port, OperationEnvironment &env)$/;"	f	class:CAI302
LogModeQuick	src/Device/Driver/CAI302/Protocol.cpp	/^CAI302::LogModeQuick(Port &port, OperationEnvironment &env)$/;"	f	class:CAI302
LogPoint	src/IGC/IGCWriter.cpp	/^IGCWriter::LogPoint(const IGCFix &fix, int epe, int satellites)$/;"	f	class:IGCWriter
LogPoint	src/IGC/IGCWriter.cpp	/^IGCWriter::LogPoint(const NMEAInfo& gps_info)$/;"	f	class:IGCWriter
LogPoint	src/Logger/Logger.cpp	/^Logger::LogPoint(const NMEAInfo &gps_info)$/;"	f	class:Logger
LogPoint	src/Logger/LoggerImpl.cpp	/^LoggerImpl::LogPoint(const NMEAInfo &gps_info)$/;"	f	class:LoggerImpl
LogPointToBuffer	src/Logger/LoggerImpl.cpp	/^LoggerImpl::LogPointToBuffer(const NMEAInfo &gps_info)$/;"	f	class:LoggerImpl
LogStartEvent	src/Logger/Logger.cpp	/^Logger::LogStartEvent(const NMEAInfo &gps_info)$/;"	f	class:Logger
Logger	src/Dialogs/StatusPanels/SystemStatusPanel.cpp	/^  Logger,$/;"	e	enum:Controls	file:
Logger	src/Logger/Logger.hpp	/^class Logger {$/;"	c
LoggerClearFreeSpace	src/Logger/Logger.cpp	/^Logger::LoggerClearFreeSpace(unsigned current_year)$/;"	f	class:Logger
LoggerConfigPanel	src/Dialogs/Settings/Panels/LoggerConfigPanel.cpp	/^  LoggerConfigPanel()$/;"	f	class:final
LoggerFRecord	src/Logger/LoggerFRecord.hpp	/^class LoggerFRecord$/;"	c
LoggerID	src/Dialogs/Settings/Panels/LoggerConfigPanel.cpp	/^  LoggerID,$/;"	e	enum:ControlIndex	file:
LoggerID	src/Profile/ProfileKeys.cpp	/^const char LoggerID[] = "LoggerID";$/;"	m	namespace:ProfileKeys	file:
LoggerImpl	src/Logger/LoggerImpl.cpp	/^LoggerImpl::LoggerImpl()$/;"	f	class:LoggerImpl
LoggerImpl	src/Logger/LoggerImpl.hpp	/^class LoggerImpl$/;"	c
LoggerNote	src/IGC/IGCWriter.cpp	/^IGCWriter::LoggerNote(const TCHAR *text)$/;"	f	class:IGCWriter
LoggerNote	src/Logger/Logger.cpp	/^Logger::LoggerNote(const TCHAR *text)$/;"	f	class:Logger
LoggerNote	src/Logger/LoggerImpl.cpp	/^LoggerImpl::LoggerNote(const TCHAR *text)$/;"	f	class:LoggerImpl
LoggerSettings	src/Logger/Settings.hpp	/^struct LoggerSettings {$/;"	s
LoggerShort	src/Profile/ProfileKeys.cpp	/^const char LoggerShort[] = "LoggerShortName";$/;"	m	namespace:ProfileKeys	file:
LoggerTimeStepCircling	src/Dialogs/Settings/Panels/LoggerConfigPanel.cpp	/^  LoggerTimeStepCircling,$/;"	e	enum:ControlIndex	file:
LoggerTimeStepCircling	src/Profile/ProfileKeys.cpp	/^const char LoggerTimeStepCircling[] = "LoggerTimeStepCircling";$/;"	m	namespace:ProfileKeys	file:
LoggerTimeStepCruise	src/Dialogs/Settings/Panels/LoggerConfigPanel.cpp	/^  LoggerTimeStepCruise,$/;"	e	enum:ControlIndex	file:
LoggerTimeStepCruise	src/Profile/ProfileKeys.cpp	/^const char LoggerTimeStepCruise[] = "LoggerTimeStepCruise";$/;"	m	namespace:ProfileKeys	file:
LogoView	src/Gauge/LogoView.cpp	/^LogoView::LogoView()$/;"	f	class:LogoView
LogoView	src/Gauge/LogoView.hpp	/^class LogoView {$/;"	c
Longitudes	src/Device/Driver/LX/Protocol.hpp	/^    int32_t Longitudes[NUMTPS];$/;"	m	struct:LX::Declaration
Look	src/Look/Look.hpp	/^struct Look {$/;"	s
LookUp	src/Form/DataField/ComboList.cpp	/^ComboList::LookUp(int int_value)$/;"	f	class:ComboList
Lookup	src/Form/DataField/File.cpp	/^FileDataField::Lookup(Path text)$/;"	f	class:FileDataField
Lookup	src/system/DynamicLibrary.hpp	/^  FARPROC WINAPI Lookup(const TCHAR *name) const {$/;"	f	class:DynamicLibrary
LookupCallsign	src/FLARM/FlarmDetails.cpp	/^FlarmDetails::LookupCallsign(FlarmId id)$/;"	f	class:FlarmDetails
LookupId	src/Engine/Waypoint/Waypoints.cpp	/^Waypoints::LookupId(const unsigned id) const$/;"	f	class:Waypoints
LookupId	src/FLARM/FlarmDetails.cpp	/^FlarmDetails::LookupId(const TCHAR *cn)$/;"	f	class:FlarmDetails
LookupLocation	src/Engine/Waypoint/Waypoints.cpp	/^Waypoints::LookupLocation(const GeoPoint &loc, const double range) const$/;"	f	class:Waypoints
LookupMacro	src/Menu/ExpandMacros.cpp	/^LookupMacro(const TCHAR *name, bool &invalid)$/;"	f	file:
LookupName	src/Engine/Waypoint/Waypoints.cpp	/^Waypoints::LookupName(const TCHAR *name) const$/;"	f	class:Waypoints
LookupName	src/Engine/Waypoint/Waypoints.hpp	/^  WaypointPtr LookupName(const tstring &name) const {$/;"	f	class:Waypoints
LookupPointer	src/lua/Associate.cpp	/^Lua::LookupPointer(lua_State *L, const char *table, void *p)$/;"	f	class:Lua
LookupRecord	src/FLARM/FlarmDetails.cpp	/^FlarmDetails::LookupRecord(FlarmId id)$/;"	f	class:FlarmDetails
LookupSeparation	src/Geo/Geoid.cpp	/^EGM96::LookupSeparation(const GeoPoint &pt)$/;"	f	class:EGM96
LookupWeatherTerrainStyle	src/Weather/Rasp/RaspRenderer.cpp	/^LookupWeatherTerrainStyle(const TCHAR *name)$/;"	f	file:
LowerFloor	src/Engine/ThermalBand/ThermalEncounterCollection.cpp	/^ThermalEncounterCollection::LowerFloor(const double new_floor)$/;"	f	class:ThermalEncounterCollection
LowerVolume	src/Audio/AudioAlgorithms.hpp	/^inline void LowerVolume(int16_t *buffer, size_t num_frames,$/;"	f
Lua	src/lua/Airspace.hpp	/^namespace Lua {$/;"	n
Lua	src/lua/Assert.hxx	/^namespace Lua {$/;"	n
Lua	src/lua/Associate.hpp	/^namespace Lua {$/;"	n
Lua	src/lua/Background.cpp	/^namespace Lua {$/;"	n	file:
Lua	src/lua/Background.hpp	/^namespace Lua {$/;"	n
Lua	src/lua/Basic.hpp	/^namespace Lua {$/;"	n
Lua	src/lua/Blackboard.cpp	/^namespace Lua {$/;"	n	file:
Lua	src/lua/Blackboard.hpp	/^namespace Lua {$/;"	n
Lua	src/lua/Catch.hpp	/^namespace Lua {$/;"	n
Lua	src/lua/Class.hxx	/^namespace Lua {$/;"	n
Lua	src/lua/Dialogs.hpp	/^namespace Lua {$/;"	n
Lua	src/lua/Error.cxx	/^namespace Lua {$/;"	n	file:
Lua	src/lua/Error.hxx	/^namespace Lua {$/;"	n
Lua	src/lua/Full.hpp	/^namespace Lua {$/;"	n
Lua	src/lua/Geo.cpp	/^namespace Lua {$/;"	n	file:
Lua	src/lua/Geo.hpp	/^namespace Lua {$/;"	n
Lua	src/lua/InputEvent.hpp	/^namespace Lua {$/;"	n
Lua	src/lua/Legacy.hpp	/^namespace Lua {$/;"	n
Lua	src/lua/Log.hpp	/^namespace Lua {$/;"	n
Lua	src/lua/Logger.hpp	/^namespace Lua {$/;"	n
Lua	src/lua/Map.hpp	/^namespace Lua {$/;"	n
Lua	src/lua/Persistent.hpp	/^namespace Lua {$/;"	n
Lua	src/lua/Ptr.hpp	/^namespace Lua {$/;"	n
Lua	src/lua/Replay.hpp	/^namespace Lua {$/;"	n
Lua	src/lua/RunFile.hxx	/^namespace Lua {$/;"	n
Lua	src/lua/Settings.hpp	/^namespace Lua {$/;"	n
Lua	src/lua/StartFile.hpp	/^namespace Lua {$/;"	n
Lua	src/lua/Task.hpp	/^namespace Lua {$/;"	n
Lua	src/lua/Timer.hpp	/^namespace Lua {$/;"	n
Lua	src/lua/Tracking.hpp	/^namespace Lua {$/;"	n
Lua	src/lua/Util.hxx	/^namespace Lua {$/;"	n
Lua	src/lua/Value.hxx	/^namespace Lua {$/;"	n
Lua	src/lua/Wind.hpp	/^namespace Lua {$/;"	n
LuaEventRegistry	src/lua/InputEvent.cpp	/^class LuaEventRegistry {$/;"	c	file:
LuaInputEvent	src/lua/InputEvent.cpp	/^  explicit LuaInputEvent(lua_State *_l, int callback_idx):L(_l), callback(L, Lua::StackIndex(callback_idx)) {$/;"	f	class:final
LuaTimer	src/lua/Timer.cpp	/^  explicit LuaTimer(lua_State *L, int callback_idx)$/;"	f	class:final
Luminosity8	src/ui/canvas/PortableColor.hpp	/^  constexpr Luminosity8(uint8_t _value)$/;"	f	class:Luminosity8
Luminosity8	src/ui/canvas/PortableColor.hpp	/^  constexpr Luminosity8(uint8_t r, uint8_t g, uint8_t b)$/;"	f	class:Luminosity8
Luminosity8	src/ui/canvas/PortableColor.hpp	/^  explicit constexpr Luminosity8(RGB8Color color)$/;"	f	class:Luminosity8
Luminosity8	src/ui/canvas/PortableColor.hpp	/^class Luminosity8 {$/;"	c
MACCREADY	src/Dialogs/dlgAnalysis.hpp	/^  MACCREADY,$/;"	m	class:AnalysisPage
MACCREADY_HPP	src/Engine/GlideSolvers/MacCready.hpp	24;"	d
MACCREADY_INSUFFICIENT	src/Engine/GlideSolvers/GlideResult.hpp	/^    MACCREADY_INSUFFICIENT,$/;"	m	class:GlideResult::Validity
MACROS_HPP	src/util/Macros.hpp	31;"	d
MAGENTA	src/FLARM/Color.hpp	/^  MAGENTA,$/;"	m	class:FlarmColor
MAGIC	src/Tracking/SkyLines/Protocol.hpp	/^static const uint32_t MAGIC = 0x5df4b67b;$/;"	m	namespace:SkyLinesTracking
MAIN	src/Dialogs/Settings/Panels/PagesConfigPanel.cpp	/^    MAIN,$/;"	e	enum:final::Controls	file:
MAKELANGID	src/Units/UnitsGlue.cpp	64;"	d	file:
MAKE_RESOURCE	src/Resources.hpp	157;"	d
MAKE_RESOURCE	src/Resources.hpp	15;"	d
MAKE_RESOURCE	src/Resources.hpp	5;"	d
MANAGE	src/Device/Driver.hpp	/^    MANAGE = 0x10,$/;"	e	enum:DeviceRegister::__anon158
MANUAL	src/Engine/Task/Ordered/TaskAdvance.hpp	/^    MANUAL = 0,$/;"	e	enum:TaskAdvance::State
MANUAL	src/NMEA/Derived.hpp	/^    MANUAL,$/;"	m	class:DerivedInfo::WindSource
MANUAL_HXX	src/util/Manual.hxx	31;"	d
MANUAL_INPUT	src/NMEA/GPSState.hpp	/^  MANUAL_INPUT,$/;"	m	class:FixQuality
MAP	src/Dialogs/Traffic/TrafficList.cpp	/^  MAP,$/;"	e	enum:Buttons	file:
MAP	src/Engine/Waypoint/Origin.hpp	/^  MAP,$/;"	m	class:WaypointOrigin
MAP	src/PageSettings.hpp	/^    MAP,$/;"	m	class:PageLayout::Main
MAP	src/Repository/FileType.hpp	/^  MAP,$/;"	m	class:FileType
MAP	src/Waypoint/WaypointFilter.hpp	/^  MAP,$/;"	m	class:TypeFilter
MAPDISPLAYCONFIGPANEL_HPP	src/Dialogs/Settings/Panels/MapDisplayConfigPanel.hpp	25;"	d
MAPERROR_H	src/Topography/shapelib/maperror.h	31;"	d
MAPPRIMITIVE_H	src/Topography/shapelib/mapprimitive.h	31;"	d
MAPSCALE_RENDERER_HPP	src/Renderer/MapScaleRenderer.hpp	25;"	d
MAPSHAPE_H	src/Topography/shapelib/mapshape.h	31;"	d
MAPTASKMANAGER_H	src/Task/MapTaskManager.hpp	24;"	d
MAPTREE_H	src/Topography/shapelib/maptree.h	31;"	d
MAP_DRAW_HELPER_HPP	src/MapWindow/StencilMapCanvas.hpp	25;"	d
MAP_FAILED	src/zzip/__mmap.h	39;"	d
MAP_FAILED	src/zzip/__mmap.h	45;"	d
MAP_FAILED	src/zzip/__mmap.h	90;"	d
MAP_H	src/Topography/shapelib/mapserver.h	30;"	d
MAP_SETTINGS_BLACKBOARD_HPP	src/Blackboard/MapSettingsBlackboard.hpp	25;"	d
MAP_SHIFT_BIAS	src/Dialogs/Settings/Panels/MapDisplayConfigPanel.cpp	/^  MAP_SHIFT_BIAS,$/;"	e	enum:ControlIndex	file:
MAP_WINDOW_BLACKBOARD_H	src/MapWindow/MapWindowBlackboard.hpp	25;"	d
MARKER	src/Engine/Waypoint/Waypoint.hpp	/^    MARKER,$/;"	m	class:Waypoint::Type
MASS	src/Units/Group.hpp	/^  MASS,$/;"	m	class:UnitGroup
MAT	src/Engine/Task/Factory/TaskFactoryType.hpp	/^  MAT,$/;"	m	class:TaskFactoryType
MATCH	src/Dialogs/ProfilePasswordDialog.hpp	/^  MATCH,$/;"	m	class:ProfilePasswordResult
MATE_CODE	src/Dialogs/Traffic/TeamCodeDialog.cpp	/^    MATE_CODE,$/;"	e	enum:final::Controls	file:
MATZ	src/Engine/Airspace/AirspaceClass.hpp	/^  MATZ,$/;"	e	enum:uint8_t
MAT_CYLINDER	src/Engine/Task/Factory/TaskPointFactoryType.hpp	/^  MAT_CYLINDER,$/;"	m	class:TaskPointFactoryType
MAT_CYLINDER	src/Engine/Task/ObservationZones/ObservationZone.hpp	/^    MAT_CYLINDER,$/;"	m	class:ObservationZone::Shape
MAT_RADIUS	src/Engine/Task/ObservationZones/CylinderZone.hpp	/^  static constexpr double MAT_RADIUS = 1609.344;$/;"	m	class:CylinderZone
MAX	src/Form/DataField/Angle.hpp	/^  static constexpr unsigned MAX = 360u;$/;"	m	class:final
MAX	src/time/RoughTime.hpp	/^  static constexpr uint16_t MAX = 24 * 60;$/;"	m	class:RoughTime
MAX	src/ui/canvas/opengl/Color.hpp	/^  static constexpr Component MAX = 1u << 16u;$/;"	m	class:Color
MAXDETAILS	src/Dialogs/dlgChecklist.cpp	39;"	d	file:
MAXEFFICIENCYSHOW	src/Computer/GlideRatioCalculator.cpp	/^static constexpr double MAXEFFICIENCYSHOW = 200;$/;"	v	file:
MAXENTRYLETTERS	src/Dialogs/KnobTextEntry.cpp	/^static constexpr unsigned MAXENTRYLETTERS = ARRAY_SIZE(EntryLetters) - 1;$/;"	v	file:
MAXLISTS	src/Dialogs/dlgChecklist.cpp	41;"	d	file:
MAXMESSAGES	src/PopupMessage.hpp	/^  static constexpr unsigned MAXMESSAGES = 20;$/;"	m	class:PopupMessage
MAXSATELLITES	src/NMEA/GPSState.hpp	/^  static constexpr unsigned MAXSATELLITES = 12;$/;"	m	struct:GPSState
MAXTITLE	src/Dialogs/dlgChecklist.cpp	38;"	d	file:
MAXTOPOGRAPHY	src/Topography/TopographyStore.hpp	/^  static constexpr unsigned MAXTOPOGRAPHY = 30;$/;"	m	class:TopographyStore
MAX_ACTIVE_TILES	src/Terrain/RasterTileCache.hpp	/^  static constexpr unsigned MAX_ACTIVE_TILES = 128;$/;"	m	class:RasterTileCache
MAX_ACTIVE_TILES	src/Terrain/RasterTileCache.hpp	/^  static constexpr unsigned MAX_ACTIVE_TILES = 512;$/;"	m	class:RasterTileCache
MAX_ANGLE	src/ui/canvas/opengl/VertexArray.hpp	/^  static constexpr unsigned MAX_ANGLE = CIRCLE_SIZE * 2u;$/;"	m	struct:GLDonutVertices
MAX_BALLAST	src/Dialogs/Plane/PlaneDetailsDialog.cpp	/^    MAX_BALLAST,$/;"	e	enum:final::Controls	file:
MAX_BUTTONS	src/Menu/MenuBar.hpp	/^  static constexpr unsigned MAX_BUTTONS = 32;$/;"	m	class:MenuBar
MAX_BUTTONS	src/Widget/KeyboardWidget.hpp	/^  static constexpr unsigned MAX_BUTTONS = 40;$/;"	m	class:KeyboardWidget
MAX_CONTENTS	src/InfoBoxes/InfoBoxSettings.hpp	/^    static constexpr unsigned MAX_CONTENTS = 24;$/;"	m	struct:InfoBoxSettings::Panel
MAX_COUNT	src/FLARM/List.hpp	/^  static constexpr size_t MAX_COUNT = 25;$/;"	m	struct:TrafficList
MAX_COUNT	src/GliderLink/List.hpp	/^  static constexpr size_t MAX_COUNT = 25;$/;"	m	struct:GliderLinkTrafficList
MAX_DISTANCE_PX	src/ui/window/custom/DoubleClick.hpp	/^  static constexpr unsigned MAX_DISTANCE_PX = IsKobo()? 70 : 50;$/;"	m	class:DoubleClick
MAX_EVENTS	src/Input/InputConfig.hpp	/^  static constexpr unsigned MAX_EVENTS = 2048;$/;"	m	struct:InputConfig
MAX_FILES	src/Form/DataField/File.hpp	/^  static constexpr unsigned MAX_FILES = 512;$/;"	m	class:final
MAX_FREQUENCY	src/Dialogs/Settings/Panels/AudioVarioConfigPanel.cpp	/^  MAX_FREQUENCY,$/;"	e	enum:ControlIndex	file:
MAX_GCE_QUEUE	src/Input/InputQueue.cpp	36;"	d	file:
MAX_HISTORY	src/Computer/ClimbAverageCalculator.hpp	/^  static constexpr int MAX_HISTORY = 40;$/;"	m	class:ClimbAverageCalculator
MAX_IGC_BUFF	src/IGC/IGCWriter.hpp	/^    MAX_IGC_BUFF = 255,$/;"	e	enum:IGCWriter::__anon182
MAX_ITEMS	src/Form/GridView.hpp	/^  static constexpr unsigned MAX_ITEMS = 32;$/;"	m	class:GridView
MAX_ITEMS	src/Menu/MenuData.hpp	/^    MAX_ITEMS = 32,$/;"	e	enum:Menu::__anon9
MAX_KEY	src/Input/InputConfig.hpp	/^  static constexpr unsigned MAX_KEY = 0600;$/;"	m	struct:InputConfig
MAX_KEY	src/Input/InputConfig.hpp	/^  static constexpr unsigned MAX_KEY = 0x100;$/;"	m	struct:InputConfig
MAX_KEY	src/Input/InputConfig.hpp	/^  static constexpr unsigned MAX_KEY = 255;$/;"	m	struct:InputConfig
MAX_KEY	src/Input/InputConfig.hpp	/^  static constexpr unsigned MAX_KEY = 400;$/;"	m	struct:InputConfig
MAX_KHZ	src/RadioFrequency.hpp	/^  static constexpr unsigned MAX_KHZ = BASE_KHZ + 37000;$/;"	m	class:RadioFrequency
MAX_LENGTH	src/Form/DigitEntry.hpp	/^  static constexpr unsigned MAX_LENGTH = 16;$/;"	m	class:CoordinateFormat
MAX_LINES	src/Topography/XShape.hpp	/^  static constexpr unsigned MAX_LINES = 32;$/;"	m	class:XShape
MAX_MACCREADY	src/Renderer/MacCreadyRenderer.cpp	35;"	d	file:
MAX_MAIN_MENU_ITEMS	src/Form/TabMenuDisplay.hpp	/^  static constexpr unsigned MAX_MAIN_MENU_ITEMS = 7;$/;"	m	class:final
MAX_MIXER_SOURCES_COUNT	src/Audio/PCMMixerDataSource.hpp	/^  static constexpr unsigned MAX_MIXER_SOURCES_COUNT = 2;$/;"	m	class:PCMMixerDataSource
MAX_MODE	src/Input/InputConfig.hpp	/^  static constexpr unsigned MAX_MODE = 32;$/;"	m	struct:InputConfig
MAX_MODE_STRING	src/Input/InputConfig.hpp	/^  static constexpr unsigned MAX_MODE_STRING = 24;$/;"	m	struct:InputConfig
MAX_NAME_LENGTH	src/Device/Driver/KRT2.cpp	/^  static constexpr size_t MAX_NAME_LENGTH = 8; \/\/!< Max. radio station name length.$/;"	m	class:final	file:
MAX_NMEA_QUEUE	src/Input/InputQueue.cpp	38;"	d	file:
MAX_PAGES	src/PageSettings.hpp	/^  static constexpr unsigned MAX_PAGES = 8;$/;"	m	struct:PageSettings
MAX_PAGES	src/PageState.hpp	/^  static constexpr unsigned MAX_PAGES = PageSettings::MAX_PAGES;$/;"	m	struct:PagesState
MAX_PANELS	src/InfoBoxes/InfoBoxSettings.hpp	/^  static constexpr unsigned MAX_PANELS = 8;$/;"	m	struct:InfoBoxSettings
MAX_PATH	src/unix/windef.h	28;"	d
MAX_RTC_TILES	src/Terrain/RasterTileCache.hpp	/^  static constexpr unsigned MAX_RTC_TILES = 4096;$/;"	m	class:RasterTileCache
MAX_SCRIPTS	src/Kobo/ToolsDialog.cpp	/^  const unsigned MAX_SCRIPTS = 12;$/;"	m	class:final	file:
MAX_SIGNAL	src/event/SignalMonitor.cxx	/^static constexpr unsigned MAX_SIGNAL = 64;$/;"	v	file:
MAX_SIZE	src/Engine/Task/Solvers/TaskMacCready.hpp	/^  static constexpr unsigned MAX_SIZE = 32;$/;"	m	class:TaskMacCready
MAX_SIZE	src/Form/DataField/ComboList.hpp	/^  static constexpr unsigned MAX_SIZE = 512;$/;"	m	class:ComboList
MAX_SIZE	src/io/BufferedReader.hxx	/^	static constexpr size_t MAX_SIZE = 512 * 1024;$/;"	m	class:BufferedReader
MAX_SOURCES	src/NMEA/ThermalLocator.hpp	/^  static constexpr unsigned MAX_SOURCES = 20;$/;"	m	struct:ThermalLocatorInfo
MAX_SPEED	src/Dialogs/Plane/PlaneDetailsDialog.cpp	/^    MAX_SPEED,$/;"	e	enum:final::Controls	file:
MAX_STAGES	src/Engine/PathSolvers/NavDijkstra.hpp	/^  static constexpr unsigned MAX_STAGES = 32;$/;"	m	class:NavDijkstra
MAX_STR_LEN	src/Topography/shapelib/mapstring.c	59;"	d	file:
MAX_SUBNODES	src/Topography/shapelib/maptree.h	43;"	d
MAX_TEXTENTRY	src/Dialogs/KnobTextEntry.cpp	/^static constexpr size_t MAX_TEXTENTRY = 40;$/;"	v	file:
MAX_TEXTENTRY	src/Dialogs/TouchTextEntry.cpp	/^static constexpr size_t MAX_TEXTENTRY = 40;$/;"	v	file:
MAX_THERMAL	src/Cloud/Sender.hpp	/^  static constexpr size_t MAX_THERMAL =$/;"	m	class:ThermalResponseSender
MAX_THERMAL_AGE	src/Cloud/Main.cpp	/^static constexpr std::chrono::steady_clock::duration MAX_THERMAL_AGE = std::chrono::minutes(30);$/;"	v	file:
MAX_THERMAL_AGE	src/Cloud/ToKML.cpp	/^static constexpr std::chrono::steady_clock::duration MAX_THERMAL_AGE = std::chrono::hours(12);$/;"	v	file:
MAX_THERMAL_SIZE	src/Cloud/Sender.hpp	/^  static constexpr size_t MAX_THERMAL_SIZE = 1024;$/;"	m	class:ThermalResponseSender
MAX_TRAFFIC	src/Cloud/Sender.hpp	/^  static constexpr size_t MAX_TRAFFIC =$/;"	m	class:TrafficResponseSender
MAX_TRAFFIC_AGE	src/Cloud/Main.cpp	/^static constexpr std::chrono::steady_clock::duration MAX_TRAFFIC_AGE = std::chrono::minutes(15);$/;"	v	file:
MAX_TRAFFIC_AGE	src/Cloud/ToKML.cpp	/^static constexpr std::chrono::steady_clock::duration MAX_TRAFFIC_AGE = std::chrono::hours(12);$/;"	v	file:
MAX_TRAFFIC_SIZE	src/Cloud/Sender.hpp	/^  static constexpr size_t MAX_TRAFFIC_SIZE = 1024;$/;"	m	class:TrafficResponseSender
MAX_TYPE_VAL	src/InfoBoxes/Content/Type.hpp	/^  static constexpr Type MAX_TYPE_VAL = (Type)(e_NUM_TYPES - 1);$/;"	m	namespace:InfoBoxFactory
MAX_WEATHER_MAP	src/Weather/Rasp/RaspStore.hpp	/^  static constexpr unsigned MAX_WEATHER_MAP = 16; \/**< Max number of items stored *\/$/;"	m	class:RaspStore
MAX_WEATHER_TIMES	src/Weather/Rasp/RaspStore.hpp	/^  static constexpr unsigned MAX_WEATHER_TIMES = 48; \/**< Max time segments of each item *\/$/;"	m	class:RaspStore
MB_ABORTRETRYIGNORE	src/Dialogs/Message.hpp	/^  MB_ABORTRETRYIGNORE,$/;"	e	enum:__anon5
MB_ICONERROR	src/Dialogs/Message.hpp	/^  MB_ICONERROR = 0x100,$/;"	e	enum:__anon5
MB_ICONEXCLAMATION	src/Dialogs/Message.hpp	/^  MB_ICONEXCLAMATION = 0x40,$/;"	e	enum:__anon5
MB_ICONINFORMATION	src/Dialogs/Message.hpp	/^  MB_ICONINFORMATION = 0x10,$/;"	e	enum:__anon5
MB_ICONQUESTION	src/Dialogs/Message.hpp	/^  MB_ICONQUESTION = 0x80,$/;"	e	enum:__anon5
MB_ICONWARNING	src/Dialogs/Message.hpp	/^  MB_ICONWARNING = 0x20,$/;"	e	enum:__anon5
MB_OK	src/Dialogs/Message.hpp	/^  MB_OK,$/;"	e	enum:__anon5
MB_OKCANCEL	src/Dialogs/Message.hpp	/^  MB_OKCANCEL,$/;"	e	enum:__anon5
MB_RETRYCANCEL	src/Dialogs/Message.hpp	/^  MB_RETRYCANCEL,$/;"	e	enum:__anon5
MB_YESNO	src/Dialogs/Message.hpp	/^  MB_YESNO,$/;"	e	enum:__anon5
MB_YESNOCANCEL	src/Dialogs/Message.hpp	/^  MB_YESNOCANCEL,$/;"	e	enum:__anon5
MC	src/Dialogs/StatusPanels/TaskStatusPanel.cpp	/^  MC,$/;"	e	enum:Controls	file:
MC_CEILING_PENALTY_FACTOR	src/Engine/Route/RoutePolars.cpp	29;"	d	file:
MD5	src/util/MD5.hpp	/^class MD5$/;"	c
MD5_HPP	src/util/MD5.hpp	24;"	d
MESSAGELENGTH	src/Topography/shapelib/maperror.h	90;"	d
METAR	src/Weather/METAR.hpp	/^struct METAR$/;"	s
METARLine	src/Weather/METARParser.cpp	/^  METARLine(const TCHAR *line)$/;"	f	class:METARLine
METARLine	src/Weather/METARParser.cpp	/^class METARLine {$/;"	c	file:
METARParser	src/Weather/METARParser.cpp	/^namespace METARParser {$/;"	n	file:
METARParser	src/Weather/METARParser.hpp	/^namespace METARParser {$/;"	n
METAR_HPP	src/Weather/METAR.hpp	25;"	d
METAR_PARSER_HPP	src/Weather/METARParser.hpp	25;"	d
METER	src/Units/Unit.hpp	/^  METER,$/;"	m	class:Unit
METER_PER_SECOND	src/Units/Unit.hpp	/^  METER_PER_SECOND,$/;"	m	class:Unit
MFR_ID	src/Device/Driver/Volkslogger/vlconv.cpp	43;"	d	file:
MFR_ID2	src/Device/Driver/Volkslogger/vlconv.cpp	44;"	d	file:
MIDDLE	src/NMEA/SwitchState.hpp	/^    MIDDLE,$/;"	m	class:SwitchState::UserSwitch
MILLIBAR	src/Units/Unit.hpp	/^  MILLIBAR,$/;"	m	class:Unit
MINI	src/Kobo/Model.hpp	/^  MINI,$/;"	m	class:KoboModel
MINMAX_OFFSET	src/Engine/Route/AStar.hpp	/^  static constexpr unsigned MINMAX_OFFSET = 134217727;$/;"	m	struct:AStarPriorityValue
MIN_FLOOR_CLEARANCE	src/Engine/Route/ReachFan.cpp	/^static constexpr int MIN_FLOOR_CLEARANCE = 100;$/;"	v	file:
MIN_FREQUENCY	src/Dialogs/Settings/Panels/AudioVarioConfigPanel.cpp	/^  MIN_FREQUENCY,$/;"	e	enum:ControlIndex	file:
MIN_KHZ	src/RadioFrequency.hpp	/^  static constexpr unsigned MIN_KHZ = BASE_KHZ + 18000;$/;"	m	class:RadioFrequency
MIN_PERIOD_MS	src/Tracking/SkyLines/Queue.hpp	/^  static constexpr unsigned MIN_PERIOD_MS = 25000;$/;"	m	class:SkyLinesTracking::Queue
MIN_RATE	src/Renderer/TrackLineRenderer.cpp	/^static constexpr Angle MIN_RATE = Angle::Degrees(1.0); \/\/ degrees\/s$/;"	v	file:
MIN_TIME	src/Dialogs/Task/Manager/TaskPropertiesPanel.cpp	/^  MIN_TIME,$/;"	e	enum:Controls	file:
MIN_TURN_RATE	src/Computer/CirclingComputer.cpp	/^static constexpr Angle MIN_TURN_RATE = Angle::Degrees(4);$/;"	v	file:
MIN_TYPE_VAL	src/InfoBoxes/Content/Type.hpp	/^  static constexpr Type MIN_TYPE_VAL = (Type)0;$/;"	m	namespace:InfoBoxFactory
MIN_VALID_TIME	src/Engine/ThermalBand/ThermalBand.hpp	/^  static constexpr double MIN_VALID_TIME = 30.;$/;"	m	class:ThermalBand
MIN_WAIT_TIME	src/DrawThread.hpp	/^  static constexpr unsigned MIN_WAIT_TIME = 100;$/;"	m	class:final
MISMATCH	src/Dialogs/ProfilePasswordDialog.hpp	/^  MISMATCH,$/;"	m	class:ProfilePasswordResult
MIX	src/Terrain/RasterRenderer.cpp	/^MIX(unsigned x, unsigned y, unsigned i)$/;"	f	file:
MIXED	src/Engine/Task/Factory/TaskFactoryType.hpp	/^  MIXED,$/;"	m	class:TaskFactoryType
MIXED_TASK_FACTORY_HPP	src/Engine/Task/Factory/MixedTaskFactory.hpp	23;"	d
MMToDPI	src/Hardware/DisplayDPI.cpp	/^MMToDPI(unsigned pixels, unsigned mm)$/;"	f	file:
MMXAlphaPixelOperations	src/ui/canvas/memory/MMX.hpp	/^  constexpr MMXAlphaPixelOperations(uint8_t _alpha):alpha(_alpha) {}$/;"	f	class:MMXAlphaPixelOperations
MMXAlphaPixelOperations	src/ui/canvas/memory/MMX.hpp	/^class MMXAlphaPixelOperations {$/;"	c
MODE_DEFAULT	src/Input/InputEvents.hpp	/^    MODE_DEFAULT,$/;"	e	enum:InputEvents::Mode
MODE_INFOBOX	src/Input/InputEvents.hpp	/^    MODE_INFOBOX,$/;"	e	enum:InputEvents::Mode
MODE_MENU	src/Input/InputEvents.hpp	/^    MODE_MENU$/;"	e	enum:InputEvents::Mode
MODE_PAN	src/Input/InputEvents.hpp	/^    MODE_PAN,$/;"	e	enum:InputEvents::Mode
MOFile	src/Language/MOFile.cpp	/^MOFile::MOFile(const void *_data, size_t _size)$/;"	f	class:MOFile
MOFile	src/Language/MOFile.hpp	/^class MOFile {$/;"	c
MOLoader	src/Language/MOLoader.hpp	/^  MOLoader(const void *data, size_t size)$/;"	f	class:MOLoader
MOLoader	src/Language/MOLoader.hpp	/^  explicit MOLoader(Path path)$/;"	f	class:MOLoader
MOLoader	src/Language/MOLoader.hpp	/^class MOLoader {$/;"	c
MONO	src/ui/canvas/Bitmap.hpp	/^    MONO,$/;"	m	class:final::Type
MOTORCYCLE	src/Tracking/LiveTrack24.hpp	/^  MOTORCYCLE = 16403,$/;"	m	class:LiveTrack24::VehicleType
MOUNTAIN_BIKE	src/Tracking/LiveTrack24.hpp	/^  MOUNTAIN_BIKE = 16402,$/;"	m	class:LiveTrack24::VehicleType
MOUNTAIN_PASS	src/Engine/Waypoint/Waypoint.hpp	/^    MOUNTAIN_PASS,$/;"	m	class:Waypoint::Type
MOUNTAIN_TOP	src/Engine/Waypoint/Waypoint.hpp	/^    MOUNTAIN_TOP,$/;"	m	class:Waypoint::Type
MOUSE_DOWN	src/ui/event/shared/Event.hpp	/^    MOUSE_DOWN,$/;"	e	enum:UI::Event::Type
MOUSE_MOTION	src/ui/event/shared/Event.hpp	/^    MOUSE_MOTION,$/;"	e	enum:UI::Event::Type
MOUSE_UP	src/ui/event/shared/Event.hpp	/^    MOUSE_UP,$/;"	e	enum:UI::Event::Type
MOUSE_WHEEL	src/ui/event/shared/Event.hpp	/^    MOUSE_WHEEL,$/;"	e	enum:UI::Event::Type
MPD_DEFER_EVENT_HXX	src/event/DeferEvent.hxx	21;"	d
MPD_EVENT_CALL_HXX	src/event/Call.hxx	21;"	d
MPD_EVENT_CHRONO_HXX	src/event/Chrono.hxx	21;"	d
MPD_EVENT_PIPE_HXX	src/system/EventPipe.hxx	21;"	d
MPD_EVENT_POLLRESULT_GENERIC_HXX	src/event/PollResultGeneric.hxx	21;"	d
MPD_INJECT_EVENT_HXX	src/event/InjectEvent.hxx	21;"	d
MPD_SOCKET_EVENT_HXX	src/event/SocketEvent.hxx	21;"	d
MPD_SOCKET_IDLE_EVENT_HXX	src/event/IdleEvent.hxx	21;"	d
MPD_SOCKET_SIGNAL_MONITOR_HXX	src/event/SignalMonitor.hxx	21;"	d
MPD_WAKE_FD_HXX	src/event/WakeFD.hxx	21;"	d
MSG1	src/zzip/__debug.h	31;"	d
MSG2	src/zzip/__debug.h	32;"	d
MSG3	src/zzip/__debug.h	33;"	d
MSG4	src/zzip/__debug.h	34;"	d
MSG5	src/zzip/__debug.h	35;"	d
MSG6	src/zzip/__debug.h	36;"	d
MSG_ACK_FAILURE	src/Device/Driver/IMI/Protocol/Types.hpp	/^    MSG_ACK_FAILURE      = 0x01,$/;"	e	enum:IMI::TMsgType
MSG_ACK_INVSTATE	src/Device/Driver/IMI/Protocol/Types.hpp	/^    MSG_ACK_INVSTATE     = 0x04,$/;"	e	enum:IMI::TMsgType
MSG_ACK_LOGGING	src/Device/Driver/IMI/Protocol/Types.hpp	/^    MSG_ACK_LOGGING      = 0x02,$/;"	e	enum:IMI::TMsgType
MSG_ACK_NOTCONFIG	src/Device/Driver/IMI/Protocol/Types.hpp	/^    MSG_ACK_NOTCONFIG    = 0x03,$/;"	e	enum:IMI::TMsgType
MSG_ACK_SUCCESS	src/Device/Driver/IMI/Protocol/Types.hpp	/^    MSG_ACK_SUCCESS      = 0x00,$/;"	e	enum:IMI::TMsgType
MSG_CFG_BYE	src/Device/Driver/IMI/Protocol/Types.hpp	/^    MSG_CFG_BYE          = 0x11,$/;"	e	enum:IMI::TMsgType
MSG_CFG_CONFIG_ID	src/Device/Driver/IMI/Protocol/Types.hpp	/^    MSG_CFG_CONFIG_ID    = 0x16,$/;"	e	enum:IMI::TMsgType
MSG_CFG_DEFAULTOZ	src/Device/Driver/IMI/Protocol/Types.hpp	/^    MSG_CFG_DEFAULTOZ    = 0x17,$/;"	e	enum:IMI::TMsgType
MSG_CFG_DEVICEINFO	src/Device/Driver/IMI/Protocol/Types.hpp	/^    MSG_CFG_DEVICEINFO   = 0x14,$/;"	e	enum:IMI::TMsgType
MSG_CFG_FORCESTOP	src/Device/Driver/IMI/Protocol/Types.hpp	/^    MSG_CFG_FORCESTOP    = 0x12,$/;"	e	enum:IMI::TMsgType
MSG_CFG_HELLO	src/Device/Driver/IMI/Protocol/Types.hpp	/^    MSG_CFG_HELLO        = 0x10,$/;"	e	enum:IMI::TMsgType
MSG_CFG_KEEPCONFIG	src/Device/Driver/IMI/Protocol/Types.hpp	/^    MSG_CFG_KEEPCONFIG   = 0x15,$/;"	e	enum:IMI::TMsgType
MSG_CFG_STARTCONFIG	src/Device/Driver/IMI/Protocol/Types.hpp	/^    MSG_CFG_STARTCONFIG  = 0x13,$/;"	e	enum:IMI::TMsgType
MSG_DECLARATION	src/Device/Driver/IMI/Protocol/Types.hpp	/^    MSG_DECLARATION      = 0x20,$/;"	e	enum:IMI::TMsgType
MSG_FLASH	src/Device/Driver/IMI/Protocol/Types.hpp	/^    MSG_FLASH = 0x30,$/;"	e	enum:IMI::TMsgType
MSG_FLASH_BULK	src/Device/Driver/IMI/Protocol/Types.hpp	/^    MSG_FLASH_BULK = 0x31,$/;"	e	enum:IMI::TMsgType
MSG_FLIGHT_DELETEALL	src/Device/Driver/IMI/Protocol/Types.hpp	/^    MSG_FLIGHT_DELETEALL = 0x42$/;"	e	enum:IMI::TMsgType
MSG_FLIGHT_INFO	src/Device/Driver/IMI/Protocol/Types.hpp	/^    MSG_FLIGHT_INFO      = 0x40,$/;"	e	enum:IMI::TMsgType
MSG_UNKNOWN	src/PopupMessage.hpp	/^    MSG_UNKNOWN,$/;"	e	enum:PopupMessage::Type
MSG_USERINTERFACE	src/PopupMessage.hpp	/^    MSG_USERINTERFACE,$/;"	e	enum:PopupMessage::Type
MSL	src/Geo/AltitudeReference.hpp	/^  MSL = 1,$/;"	m	class:AltitudeReference
MSLIntercept	src/Engine/Route/RoutePolars.cpp	/^RoutePolars::MSLIntercept(const int index, const FlatGeoPoint &fp,$/;"	f	class:RoutePolars
MS_2PI	src/Topography/shapelib/mapserver.h	451;"	d
MS_3PI2	src/Topography/shapelib/mapserver.h	450;"	d
MS_ABS	src/Topography/shapelib/mapserver.h	330;"	d
MS_AGGERR	src/Topography/shapelib/maperror.h	83;"	d
MS_ALIGN_CENTER	src/Topography/shapelib/mapserver.h	/^  enum MS_ALIGN_VALUE {MS_ALIGN_DEFAULT, MS_ALIGN_LEFT, MS_ALIGN_CENTER, MS_ALIGN_RIGHT};$/;"	e	enum:MS_ALIGN_VALUE
MS_ALIGN_DEFAULT	src/Topography/shapelib/mapserver.h	/^  enum MS_ALIGN_VALUE {MS_ALIGN_DEFAULT, MS_ALIGN_LEFT, MS_ALIGN_CENTER, MS_ALIGN_RIGHT};$/;"	e	enum:MS_ALIGN_VALUE
MS_ALIGN_LEFT	src/Topography/shapelib/mapserver.h	/^  enum MS_ALIGN_VALUE {MS_ALIGN_DEFAULT, MS_ALIGN_LEFT, MS_ALIGN_CENTER, MS_ALIGN_RIGHT};$/;"	e	enum:MS_ALIGN_VALUE
MS_ALIGN_RIGHT	src/Topography/shapelib/mapserver.h	/^  enum MS_ALIGN_VALUE {MS_ALIGN_DEFAULT, MS_ALIGN_LEFT, MS_ALIGN_CENTER, MS_ALIGN_RIGHT};$/;"	e	enum:MS_ALIGN_VALUE
MS_ALIGN_VALUE	src/Topography/shapelib/mapserver.h	/^  enum MS_ALIGN_VALUE {MS_ALIGN_DEFAULT, MS_ALIGN_LEFT, MS_ALIGN_CENTER, MS_ALIGN_RIGHT};$/;"	g
MS_ALLOWEMPTYTOKENS	src/Topography/shapelib/mapserver.h	318;"	d
MS_ALL_MATCHING_CLASSES	src/Topography/shapelib/mapserver.h	/^  enum MS_RENDER_MODE {MS_FIRST_MATCHING_CLASS, MS_ALL_MATCHING_CLASSES};$/;"	e	enum:MS_RENDER_MODE
MS_ARRAY_BIT	src/Topography/shapelib/mapserver.h	2471;"	d
MS_AUTO	src/Topography/shapelib/mapserver.h	/^  enum MS_POSITIONS_ENUM {MS_UL=101, MS_LR, MS_UR, MS_LL, MS_CR, MS_CL, MS_UC, MS_LC, MS_CC, MS_AUTO, MS_XY, MS_NONE, MS_AUTO2,MS_FOLLOW};$/;"	e	enum:MS_POSITIONS_ENUM
MS_AUTO2	src/Topography/shapelib/mapserver.h	/^  enum MS_POSITIONS_ENUM {MS_UL=101, MS_LR, MS_UR, MS_LL, MS_CR, MS_CL, MS_UC, MS_LC, MS_CC, MS_AUTO, MS_XY, MS_NONE, MS_AUTO2,MS_FOLLOW};$/;"	e	enum:MS_POSITIONS_ENUM
MS_BINDING	src/Topography/shapelib/mapserver.h	313;"	d
MS_BITMAP	src/Topography/shapelib/mapserver.h	/^  enum MS_FONT_TYPE {MS_TRUETYPE, MS_BITMAP};$/;"	e	enum:MS_FONT_TYPE
MS_BLUE	src/Topography/shapelib/mapserver.h	266;"	d
MS_BUFFER_LENGTH	src/Topography/shapelib/mapserver.h	274;"	d
MS_CAPS_JOINS_AND_CORNERS	src/Topography/shapelib/mapserver.h	/^  enum MS_CAPS_JOINS_AND_CORNERS {MS_CJC_NONE, MS_CJC_BEVEL, MS_CJC_BUTT, MS_CJC_MITER, MS_CJC_ROUND, MS_CJC_SQUARE, MS_CJC_TRIANGLE};$/;"	g
MS_CC	src/Topography/shapelib/mapserver.h	/^  enum MS_POSITIONS_ENUM {MS_UL=101, MS_LR, MS_UR, MS_LL, MS_CR, MS_CL, MS_UC, MS_LC, MS_CC, MS_AUTO, MS_XY, MS_NONE, MS_AUTO2,MS_FOLLOW};$/;"	e	enum:MS_POSITIONS_ENUM
MS_CELLSIZE	src/Topography/shapelib/mapserver.h	428;"	d
MS_CGIERR	src/Topography/shapelib/maperror.h	57;"	d
MS_CHECK_ALLOC	src/Topography/shapelib/mapserver.h	201;"	d
MS_CHECK_ALLOC_NO_RET	src/Topography/shapelib/mapserver.h	208;"	d
MS_CHILDERR	src/Topography/shapelib/maperror.h	75;"	d
MS_CJC_BEVEL	src/Topography/shapelib/mapserver.h	/^  enum MS_CAPS_JOINS_AND_CORNERS {MS_CJC_NONE, MS_CJC_BEVEL, MS_CJC_BUTT, MS_CJC_MITER, MS_CJC_ROUND, MS_CJC_SQUARE, MS_CJC_TRIANGLE};$/;"	e	enum:MS_CAPS_JOINS_AND_CORNERS
MS_CJC_BUTT	src/Topography/shapelib/mapserver.h	/^  enum MS_CAPS_JOINS_AND_CORNERS {MS_CJC_NONE, MS_CJC_BEVEL, MS_CJC_BUTT, MS_CJC_MITER, MS_CJC_ROUND, MS_CJC_SQUARE, MS_CJC_TRIANGLE};$/;"	e	enum:MS_CAPS_JOINS_AND_CORNERS
MS_CJC_DEFAULT_CAPS	src/Topography/shapelib/mapserver.h	533;"	d
MS_CJC_DEFAULT_JOINS	src/Topography/shapelib/mapserver.h	534;"	d
MS_CJC_DEFAULT_JOIN_MAXSIZE	src/Topography/shapelib/mapserver.h	535;"	d
MS_CJC_MITER	src/Topography/shapelib/mapserver.h	/^  enum MS_CAPS_JOINS_AND_CORNERS {MS_CJC_NONE, MS_CJC_BEVEL, MS_CJC_BUTT, MS_CJC_MITER, MS_CJC_ROUND, MS_CJC_SQUARE, MS_CJC_TRIANGLE};$/;"	e	enum:MS_CAPS_JOINS_AND_CORNERS
MS_CJC_NONE	src/Topography/shapelib/mapserver.h	/^  enum MS_CAPS_JOINS_AND_CORNERS {MS_CJC_NONE, MS_CJC_BEVEL, MS_CJC_BUTT, MS_CJC_MITER, MS_CJC_ROUND, MS_CJC_SQUARE, MS_CJC_TRIANGLE};$/;"	e	enum:MS_CAPS_JOINS_AND_CORNERS
MS_CJC_ROUND	src/Topography/shapelib/mapserver.h	/^  enum MS_CAPS_JOINS_AND_CORNERS {MS_CJC_NONE, MS_CJC_BEVEL, MS_CJC_BUTT, MS_CJC_MITER, MS_CJC_ROUND, MS_CJC_SQUARE, MS_CJC_TRIANGLE};$/;"	e	enum:MS_CAPS_JOINS_AND_CORNERS
MS_CJC_SQUARE	src/Topography/shapelib/mapserver.h	/^  enum MS_CAPS_JOINS_AND_CORNERS {MS_CJC_NONE, MS_CJC_BEVEL, MS_CJC_BUTT, MS_CJC_MITER, MS_CJC_ROUND, MS_CJC_SQUARE, MS_CJC_TRIANGLE};$/;"	e	enum:MS_CAPS_JOINS_AND_CORNERS
MS_CJC_TRIANGLE	src/Topography/shapelib/mapserver.h	/^  enum MS_CAPS_JOINS_AND_CORNERS {MS_CJC_NONE, MS_CJC_BEVEL, MS_CJC_BUTT, MS_CJC_MITER, MS_CJC_ROUND, MS_CJC_SQUARE, MS_CJC_TRIANGLE};$/;"	e	enum:MS_CAPS_JOINS_AND_CORNERS
MS_CL	src/Topography/shapelib/mapserver.h	/^  enum MS_POSITIONS_ENUM {MS_UL=101, MS_LR, MS_UR, MS_LL, MS_CR, MS_CL, MS_UC, MS_LC, MS_CC, MS_AUTO, MS_XY, MS_NONE, MS_AUTO2,MS_FOLLOW};$/;"	e	enum:MS_POSITIONS_ENUM
MS_CLASS_ALLOCSIZE	src/Topography/shapelib/mapserver.h	233;"	d
MS_CLR_BIT	src/Topography/shapelib/mapserver.h	2475;"	d
MS_COLORSPACE_HSL	src/Topography/shapelib/mapserver.h	/^    MS_COLORSPACE_HSL$/;"	e	enum:__anon61
MS_COLORSPACE_RGB	src/Topography/shapelib/mapserver.h	/^    MS_COLORSPACE_RGB,$/;"	e	enum:__anon61
MS_COLOR_GETRGB	src/Topography/shapelib/mapserver.h	385;"	d
MS_COMMENT	src/Topography/shapelib/mapserver.h	310;"	d
MS_COMPARE_COLOR	src/Topography/shapelib/mapserver.h	382;"	d
MS_COMPARE_COLORS	src/Topography/shapelib/mapserver.h	384;"	d
MS_COMPOP_CLEAR	src/Topography/shapelib/mapserver.h	/^        MS_COMPOP_CLEAR,$/;"	e	enum:__anon20
MS_COMPOP_COLOR_BURN	src/Topography/shapelib/mapserver.h	/^        MS_COMPOP_COLOR_BURN,$/;"	e	enum:__anon20
MS_COMPOP_COLOR_DODGE	src/Topography/shapelib/mapserver.h	/^        MS_COMPOP_COLOR_DODGE,$/;"	e	enum:__anon20
MS_COMPOP_CONTRAST	src/Topography/shapelib/mapserver.h	/^        MS_COMPOP_CONTRAST,$/;"	e	enum:__anon20
MS_COMPOP_DARKEN	src/Topography/shapelib/mapserver.h	/^        MS_COMPOP_DARKEN,$/;"	e	enum:__anon20
MS_COMPOP_DIFFERENCE	src/Topography/shapelib/mapserver.h	/^        MS_COMPOP_DIFFERENCE,$/;"	e	enum:__anon20
MS_COMPOP_DST	src/Topography/shapelib/mapserver.h	/^        MS_COMPOP_DST,$/;"	e	enum:__anon20
MS_COMPOP_DST_ATOP	src/Topography/shapelib/mapserver.h	/^        MS_COMPOP_DST_ATOP,$/;"	e	enum:__anon20
MS_COMPOP_DST_IN	src/Topography/shapelib/mapserver.h	/^        MS_COMPOP_DST_IN,$/;"	e	enum:__anon20
MS_COMPOP_DST_OUT	src/Topography/shapelib/mapserver.h	/^        MS_COMPOP_DST_OUT,$/;"	e	enum:__anon20
MS_COMPOP_DST_OVER	src/Topography/shapelib/mapserver.h	/^        MS_COMPOP_DST_OVER,$/;"	e	enum:__anon20
MS_COMPOP_EXCLUSION	src/Topography/shapelib/mapserver.h	/^        MS_COMPOP_EXCLUSION,$/;"	e	enum:__anon20
MS_COMPOP_HARD_LIGHT	src/Topography/shapelib/mapserver.h	/^        MS_COMPOP_HARD_LIGHT,$/;"	e	enum:__anon20
MS_COMPOP_INVERT	src/Topography/shapelib/mapserver.h	/^        MS_COMPOP_INVERT,$/;"	e	enum:__anon20
MS_COMPOP_INVERT_RGB	src/Topography/shapelib/mapserver.h	/^        MS_COMPOP_INVERT_RGB$/;"	e	enum:__anon20
MS_COMPOP_LIGHTEN	src/Topography/shapelib/mapserver.h	/^        MS_COMPOP_LIGHTEN,$/;"	e	enum:__anon20
MS_COMPOP_MINUS	src/Topography/shapelib/mapserver.h	/^        MS_COMPOP_MINUS,$/;"	e	enum:__anon20
MS_COMPOP_MULTIPLY	src/Topography/shapelib/mapserver.h	/^        MS_COMPOP_MULTIPLY,$/;"	e	enum:__anon20
MS_COMPOP_OVERLAY	src/Topography/shapelib/mapserver.h	/^        MS_COMPOP_OVERLAY,$/;"	e	enum:__anon20
MS_COMPOP_PLUS	src/Topography/shapelib/mapserver.h	/^        MS_COMPOP_PLUS,$/;"	e	enum:__anon20
MS_COMPOP_SCREEN	src/Topography/shapelib/mapserver.h	/^        MS_COMPOP_SCREEN,$/;"	e	enum:__anon20
MS_COMPOP_SOFT_LIGHT	src/Topography/shapelib/mapserver.h	/^        MS_COMPOP_SOFT_LIGHT,$/;"	e	enum:__anon20
MS_COMPOP_SRC	src/Topography/shapelib/mapserver.h	/^        MS_COMPOP_SRC,$/;"	e	enum:__anon20
MS_COMPOP_SRC_ATOP	src/Topography/shapelib/mapserver.h	/^        MS_COMPOP_SRC_ATOP,$/;"	e	enum:__anon20
MS_COMPOP_SRC_IN	src/Topography/shapelib/mapserver.h	/^        MS_COMPOP_SRC_IN,$/;"	e	enum:__anon20
MS_COMPOP_SRC_OUT	src/Topography/shapelib/mapserver.h	/^        MS_COMPOP_SRC_OUT,$/;"	e	enum:__anon20
MS_COMPOP_SRC_OVER	src/Topography/shapelib/mapserver.h	/^        MS_COMPOP_SRC_OVER,$/;"	e	enum:__anon20
MS_COMPOP_XOR	src/Topography/shapelib/mapserver.h	/^        MS_COMPOP_XOR,$/;"	e	enum:__anon20
MS_CONNECTION_TYPE	src/Topography/shapelib/mapserver.h	/^  enum MS_CONNECTION_TYPE {MS_INLINE, MS_SHAPEFILE, MS_TILED_SHAPEFILE, MS_UNUSED_2, MS_OGR, MS_UNUSED_1, MS_POSTGIS, MS_WMS, MS_ORACLESPATIAL, MS_WFS, MS_GRATICULE, MS_MYSQL, MS_RASTER, MS_PLUGIN, MS_UNION, MS_UVRASTER, MS_CONTOUR, MS_KERNELDENSITY };$/;"	g
MS_CONTOUR	src/Topography/shapelib/mapserver.h	/^  enum MS_CONNECTION_TYPE {MS_INLINE, MS_SHAPEFILE, MS_TILED_SHAPEFILE, MS_UNUSED_2, MS_OGR, MS_UNUSED_1, MS_POSTGIS, MS_WMS, MS_ORACLESPATIAL, MS_WFS, MS_GRATICULE, MS_MYSQL, MS_RASTER, MS_PLUGIN, MS_UNION, MS_UVRASTER, MS_CONTOUR, MS_KERNELDENSITY };$/;"	e	enum:MS_CONNECTION_TYPE
MS_CONVERT_UNIT	src/Topography/shapelib/mapserver.h	496;"	d
MS_CR	src/Topography/shapelib/mapserver.h	/^  enum MS_POSITIONS_ENUM {MS_UL=101, MS_LR, MS_UR, MS_LL, MS_CR, MS_CL, MS_UC, MS_LC, MS_CC, MS_AUTO, MS_XY, MS_NONE, MS_AUTO2,MS_FOLLOW};$/;"	e	enum:MS_POSITIONS_ENUM
MS_DBFERR	src/Topography/shapelib/maperror.h	52;"	d
MS_DB_CSV	src/Topography/shapelib/mapserver.h	/^  enum MS_JOIN_CONNECTION_TYPE {MS_DB_XBASE, MS_DB_CSV, MS_DB_MYSQL, MS_DB_ORACLE, MS_DB_POSTGRES};$/;"	e	enum:MS_JOIN_CONNECTION_TYPE
MS_DB_MYSQL	src/Topography/shapelib/mapserver.h	/^  enum MS_JOIN_CONNECTION_TYPE {MS_DB_XBASE, MS_DB_CSV, MS_DB_MYSQL, MS_DB_ORACLE, MS_DB_POSTGRES};$/;"	e	enum:MS_JOIN_CONNECTION_TYPE
MS_DB_ORACLE	src/Topography/shapelib/mapserver.h	/^  enum MS_JOIN_CONNECTION_TYPE {MS_DB_XBASE, MS_DB_CSV, MS_DB_MYSQL, MS_DB_ORACLE, MS_DB_POSTGRES};$/;"	e	enum:MS_JOIN_CONNECTION_TYPE
MS_DB_POSTGRES	src/Topography/shapelib/mapserver.h	/^  enum MS_JOIN_CONNECTION_TYPE {MS_DB_XBASE, MS_DB_CSV, MS_DB_MYSQL, MS_DB_ORACLE, MS_DB_POSTGRES};$/;"	e	enum:MS_JOIN_CONNECTION_TYPE
MS_DB_XBASE	src/Topography/shapelib/mapserver.h	/^  enum MS_JOIN_CONNECTION_TYPE {MS_DB_XBASE, MS_DB_CSV, MS_DB_MYSQL, MS_DB_ORACLE, MS_DB_POSTGRES};$/;"	e	enum:MS_JOIN_CONNECTION_TYPE
MS_DD	src/Topography/shapelib/mapserver.h	/^  enum MS_UNITS {MS_INCHES, MS_FEET, MS_MILES, MS_METERS, MS_KILOMETERS, MS_DD, MS_PIXELS, MS_PERCENTAGES, MS_NAUTICALMILES};$/;"	e	enum:MS_UNITS
MS_DEBUG	src/Topography/shapelib/mapserver.h	544;"	d
MS_DEBUG	src/Topography/shapelib/mapserver.h	547;"	d
MS_DEBUG	src/Topography/shapelib/mapserver.h	549;"	d
MS_DEBUGLEVEL_DEBUG	src/Topography/shapelib/maperror.h	/^                 MS_DEBUGLEVEL_DEBUG      = 1,  \/* DEBUG ON *\/$/;"	e	enum:__anon66
MS_DEBUGLEVEL_DEVDEBUG	src/Topography/shapelib/maperror.h	/^                 MS_DEBUGLEVEL_DEVDEBUG   = 20, \/* Undocumented, will trigger debug messages only useful for developers *\/$/;"	e	enum:__anon66
MS_DEBUGLEVEL_ERRORSONLY	src/Topography/shapelib/maperror.h	/^  typedef enum { MS_DEBUGLEVEL_ERRORSONLY = 0,  \/* DEBUG OFF, log fatal errors *\/$/;"	e	enum:__anon66
MS_DEBUGLEVEL_TUNING	src/Topography/shapelib/maperror.h	/^                 MS_DEBUGLEVEL_TUNING     = 2,  \/* Reports timing info *\/$/;"	e	enum:__anon66
MS_DEBUGLEVEL_V	src/Topography/shapelib/maperror.h	/^                 MS_DEBUGLEVEL_V          = 3,  \/* Verbose *\/$/;"	e	enum:__anon66
MS_DEBUGLEVEL_VV	src/Topography/shapelib/maperror.h	/^                 MS_DEBUGLEVEL_VV         = 4,  \/* Very verbose *\/$/;"	e	enum:__anon66
MS_DEBUGLEVEL_VVV	src/Topography/shapelib/maperror.h	/^                 MS_DEBUGLEVEL_VVV        = 5,  \/* Very very verbose *\/$/;"	e	enum:__anon66
MS_DEBUGMODE_FILE	src/Topography/shapelib/maperror.h	/^                 MS_DEBUGMODE_FILE,$/;"	e	enum:__anon67
MS_DEBUGMODE_OFF	src/Topography/shapelib/maperror.h	/^  typedef enum { MS_DEBUGMODE_OFF,$/;"	e	enum:__anon67
MS_DEBUGMODE_STDERR	src/Topography/shapelib/maperror.h	/^                 MS_DEBUGMODE_STDERR,$/;"	e	enum:__anon67
MS_DEBUGMODE_STDOUT	src/Topography/shapelib/maperror.h	/^                 MS_DEBUGMODE_STDOUT,$/;"	e	enum:__anon67
MS_DEBUGMODE_WINDOWSDEBUG	src/Topography/shapelib/maperror.h	/^                 MS_DEBUGMODE_WINDOWSDEBUG$/;"	e	enum:__anon67
MS_DEFAULT	src/Topography/shapelib/mapserver.h	222;"	d
MS_DEFAULT_BUFFER_ALLOC	src/Topography/shapelib/mapserver.h	3148;"	d
MS_DEFAULT_LABEL_PRIORITY	src/Topography/shapelib/mapserver.h	239;"	d
MS_DEFAULT_MAPFILE_PATTERN	src/Topography/shapelib/mapserver.h	245;"	d
MS_DEFAULT_MAPFILE_PATTERN	src/Topography/shapelib/mapserver.h	248;"	d
MS_DEFAULT_RESOLUTION	src/Topography/shapelib/mapserver.h	262;"	d
MS_DEFAULT_XMLMAPFILE_PATTERN	src/Topography/shapelib/mapserver.h	246;"	d
MS_DEG_TO_RAD	src/Topography/shapelib/mapserver.h	259;"	d
MS_DELETE	src/Topography/shapelib/mapserver.h	224;"	d
MS_DLL_EXPORT	src/Topography/shapelib/maperror.h	96;"	d
MS_DLL_EXPORT	src/Topography/shapelib/maperror.h	98;"	d
MS_DLL_EXPORT	src/Topography/shapelib/mapserver.h	65;"	d
MS_DLL_EXPORT	src/Topography/shapelib/mapserver.h	68;"	d
MS_DONE	src/Topography/shapelib/mapserver.h	/^  enum MS_RETURN_VALUE {MS_SUCCESS, MS_FAILURE, MS_DONE};$/;"	e	enum:MS_RETURN_VALUE
MS_DRAWMODE_FEATURES	src/Topography/shapelib/mapserver.h	2601;"	d
MS_DRAWMODE_LABELS	src/Topography/shapelib/mapserver.h	2603;"	d
MS_DRAWMODE_QUERY	src/Topography/shapelib/mapserver.h	2607;"	d
MS_DRAWMODE_SINGLESTYLE	src/Topography/shapelib/mapserver.h	2605;"	d
MS_DRAWMODE_UNCLIPPEDLABELS	src/Topography/shapelib/mapserver.h	2609;"	d
MS_DRAWMODE_UNCLIPPEDLINES	src/Topography/shapelib/mapserver.h	2611;"	d
MS_DRAW_FEATURES	src/Topography/shapelib/mapserver.h	2602;"	d
MS_DRAW_LABELS	src/Topography/shapelib/mapserver.h	2604;"	d
MS_DRAW_QUERY	src/Topography/shapelib/mapserver.h	2608;"	d
MS_DRAW_SINGLESTYLE	src/Topography/shapelib/mapserver.h	2606;"	d
MS_DRAW_UNCLIPPED_LABELS	src/Topography/shapelib/mapserver.h	2610;"	d
MS_DRAW_UNCLIPPED_LINES	src/Topography/shapelib/mapserver.h	2612;"	d
MS_DRIVER_AGG	src/Topography/shapelib/mapserver.h	392;"	d
MS_DRIVER_CAIRO	src/Topography/shapelib/mapserver.h	394;"	d
MS_DRIVER_GDAL	src/Topography/shapelib/mapserver.h	390;"	d
MS_DRIVER_IMAGEMAP	src/Topography/shapelib/mapserver.h	391;"	d
MS_DRIVER_MVT	src/Topography/shapelib/mapserver.h	393;"	d
MS_DRIVER_OGL	src/Topography/shapelib/mapserver.h	395;"	d
MS_DRIVER_SWF	src/Topography/shapelib/mapserver.h	389;"	d
MS_DRIVER_TEMPLATE	src/Topography/shapelib/mapserver.h	396;"	d
MS_EMBED	src/Topography/shapelib/mapserver.h	223;"	d
MS_ENCRYPTION_KEY_SIZE	src/Topography/shapelib/mapserver.h	453;"	d
MS_EOFERR	src/Topography/shapelib/maperror.h	54;"	d
MS_ERROR_LANGUAGE	src/Topography/shapelib/maperror.h	93;"	d
MS_EXPRESSION	src/Topography/shapelib/mapserver.h	306;"	d
MS_EXP_INSENSITIVE	src/Topography/shapelib/mapserver.h	325;"	d
MS_FAILURE	src/Topography/shapelib/mapserver.h	/^  enum MS_RETURN_VALUE {MS_SUCCESS, MS_FAILURE, MS_DONE};$/;"	e	enum:MS_RETURN_VALUE
MS_FALSE	src/Topography/shapelib/mapserver.h	218;"	d
MS_FEATUREINCREMENT	src/Topography/shapelib/mapserver.h	304;"	d
MS_FEATUREINITSIZE	src/Topography/shapelib/mapserver.h	303;"	d
MS_FEET	src/Topography/shapelib/mapserver.h	/^  enum MS_UNITS {MS_INCHES, MS_FEET, MS_MILES, MS_METERS, MS_KILOMETERS, MS_DD, MS_PIXELS, MS_PERCENTAGES, MS_NAUTICALMILES};$/;"	e	enum:MS_UNITS
MS_FILE	src/Topography/shapelib/mapserver.h	292;"	d
MS_FILE_DEFAULT	src/Topography/shapelib/mapserver.h	541;"	d
MS_FILE_MAP	src/Topography/shapelib/mapserver.h	/^  enum MS_FILE_TYPE {MS_FILE_MAP, MS_FILE_SYMBOL};$/;"	e	enum:MS_FILE_TYPE
MS_FILE_SYMBOL	src/Topography/shapelib/mapserver.h	/^  enum MS_FILE_TYPE {MS_FILE_MAP, MS_FILE_SYMBOL};$/;"	e	enum:MS_FILE_TYPE
MS_FILE_TYPE	src/Topography/shapelib/mapserver.h	/^  enum MS_FILE_TYPE {MS_FILE_MAP, MS_FILE_SYMBOL};$/;"	g
MS_FIRST_MATCHING_CLASS	src/Topography/shapelib/mapserver.h	/^  enum MS_RENDER_MODE {MS_FIRST_MATCHING_CLASS, MS_ALL_MATCHING_CLASSES};$/;"	e	enum:MS_RENDER_MODE
MS_FOLLOW	src/Topography/shapelib/mapserver.h	/^  enum MS_POSITIONS_ENUM {MS_UL=101, MS_LR, MS_UR, MS_LL, MS_CR, MS_CL, MS_UC, MS_LC, MS_CC, MS_AUTO, MS_XY, MS_NONE, MS_AUTO2,MS_FOLLOW};$/;"	e	enum:MS_POSITIONS_ENUM
MS_FONT_TYPE	src/Topography/shapelib/mapserver.h	/^  enum MS_FONT_TYPE {MS_TRUETYPE, MS_BITMAP};$/;"	g
MS_GEOMTRANSFORM_BBOX	src/Topography/shapelib/mapserver.h	/^    MS_GEOMTRANSFORM_BBOX,$/;"	e	enum:MS_GEOMTRANSFORM_TYPE
MS_GEOMTRANSFORM_BUFFER	src/Topography/shapelib/mapserver.h	/^    MS_GEOMTRANSFORM_BUFFER,$/;"	e	enum:MS_GEOMTRANSFORM_TYPE
MS_GEOMTRANSFORM_CENTROID	src/Topography/shapelib/mapserver.h	/^    MS_GEOMTRANSFORM_CENTROID,$/;"	e	enum:MS_GEOMTRANSFORM_TYPE
MS_GEOMTRANSFORM_CONVEXHULL	src/Topography/shapelib/mapserver.h	/^    MS_GEOMTRANSFORM_CONVEXHULL,$/;"	e	enum:MS_GEOMTRANSFORM_TYPE
MS_GEOMTRANSFORM_END	src/Topography/shapelib/mapserver.h	/^    MS_GEOMTRANSFORM_END,$/;"	e	enum:MS_GEOMTRANSFORM_TYPE
MS_GEOMTRANSFORM_EXPRESSION	src/Topography/shapelib/mapserver.h	/^    MS_GEOMTRANSFORM_EXPRESSION,$/;"	e	enum:MS_GEOMTRANSFORM_TYPE
MS_GEOMTRANSFORM_LABELCENTER	src/Topography/shapelib/mapserver.h	/^    MS_GEOMTRANSFORM_LABELCENTER$/;"	e	enum:MS_GEOMTRANSFORM_TYPE
MS_GEOMTRANSFORM_LABELPOINT	src/Topography/shapelib/mapserver.h	/^    MS_GEOMTRANSFORM_LABELPOINT,$/;"	e	enum:MS_GEOMTRANSFORM_TYPE
MS_GEOMTRANSFORM_LABELPOLY	src/Topography/shapelib/mapserver.h	/^    MS_GEOMTRANSFORM_LABELPOLY,$/;"	e	enum:MS_GEOMTRANSFORM_TYPE
MS_GEOMTRANSFORM_NONE	src/Topography/shapelib/mapserver.h	/^    MS_GEOMTRANSFORM_NONE,$/;"	e	enum:MS_GEOMTRANSFORM_TYPE
MS_GEOMTRANSFORM_START	src/Topography/shapelib/mapserver.h	/^    MS_GEOMTRANSFORM_START,$/;"	e	enum:MS_GEOMTRANSFORM_TYPE
MS_GEOMTRANSFORM_TYPE	src/Topography/shapelib/mapserver.h	/^  enum MS_GEOMTRANSFORM_TYPE {$/;"	g
MS_GEOMTRANSFORM_VERTICES	src/Topography/shapelib/mapserver.h	/^    MS_GEOMTRANSFORM_VERTICES,$/;"	e	enum:MS_GEOMTRANSFORM_TYPE
MS_GEOSERR	src/Topography/shapelib/maperror.h	77;"	d
MS_GEOS_BEYOND	src/Topography/shapelib/mapserver.h	/^  enum MS_GEOS_OPERATOR {MS_GEOS_EQUALS, MS_GEOS_DISJOINT, MS_GEOS_TOUCHES, MS_GEOS_OVERLAPS, MS_GEOS_CROSSES, MS_GEOS_INTERSECTS, MS_GEOS_WITHIN, MS_GEOS_CONTAINS, MS_GEOS_BEYOND, MS_GEOS_DWITHIN};$/;"	e	enum:MS_GEOS_OPERATOR
MS_GEOS_CONTAINS	src/Topography/shapelib/mapserver.h	/^  enum MS_GEOS_OPERATOR {MS_GEOS_EQUALS, MS_GEOS_DISJOINT, MS_GEOS_TOUCHES, MS_GEOS_OVERLAPS, MS_GEOS_CROSSES, MS_GEOS_INTERSECTS, MS_GEOS_WITHIN, MS_GEOS_CONTAINS, MS_GEOS_BEYOND, MS_GEOS_DWITHIN};$/;"	e	enum:MS_GEOS_OPERATOR
MS_GEOS_CROSSES	src/Topography/shapelib/mapserver.h	/^  enum MS_GEOS_OPERATOR {MS_GEOS_EQUALS, MS_GEOS_DISJOINT, MS_GEOS_TOUCHES, MS_GEOS_OVERLAPS, MS_GEOS_CROSSES, MS_GEOS_INTERSECTS, MS_GEOS_WITHIN, MS_GEOS_CONTAINS, MS_GEOS_BEYOND, MS_GEOS_DWITHIN};$/;"	e	enum:MS_GEOS_OPERATOR
MS_GEOS_DISJOINT	src/Topography/shapelib/mapserver.h	/^  enum MS_GEOS_OPERATOR {MS_GEOS_EQUALS, MS_GEOS_DISJOINT, MS_GEOS_TOUCHES, MS_GEOS_OVERLAPS, MS_GEOS_CROSSES, MS_GEOS_INTERSECTS, MS_GEOS_WITHIN, MS_GEOS_CONTAINS, MS_GEOS_BEYOND, MS_GEOS_DWITHIN};$/;"	e	enum:MS_GEOS_OPERATOR
MS_GEOS_DWITHIN	src/Topography/shapelib/mapserver.h	/^  enum MS_GEOS_OPERATOR {MS_GEOS_EQUALS, MS_GEOS_DISJOINT, MS_GEOS_TOUCHES, MS_GEOS_OVERLAPS, MS_GEOS_CROSSES, MS_GEOS_INTERSECTS, MS_GEOS_WITHIN, MS_GEOS_CONTAINS, MS_GEOS_BEYOND, MS_GEOS_DWITHIN};$/;"	e	enum:MS_GEOS_OPERATOR
MS_GEOS_EQUALS	src/Topography/shapelib/mapserver.h	/^  enum MS_GEOS_OPERATOR {MS_GEOS_EQUALS, MS_GEOS_DISJOINT, MS_GEOS_TOUCHES, MS_GEOS_OVERLAPS, MS_GEOS_CROSSES, MS_GEOS_INTERSECTS, MS_GEOS_WITHIN, MS_GEOS_CONTAINS, MS_GEOS_BEYOND, MS_GEOS_DWITHIN};$/;"	e	enum:MS_GEOS_OPERATOR
MS_GEOS_INTERSECTS	src/Topography/shapelib/mapserver.h	/^  enum MS_GEOS_OPERATOR {MS_GEOS_EQUALS, MS_GEOS_DISJOINT, MS_GEOS_TOUCHES, MS_GEOS_OVERLAPS, MS_GEOS_CROSSES, MS_GEOS_INTERSECTS, MS_GEOS_WITHIN, MS_GEOS_CONTAINS, MS_GEOS_BEYOND, MS_GEOS_DWITHIN};$/;"	e	enum:MS_GEOS_OPERATOR
MS_GEOS_OPERATOR	src/Topography/shapelib/mapserver.h	/^  enum MS_GEOS_OPERATOR {MS_GEOS_EQUALS, MS_GEOS_DISJOINT, MS_GEOS_TOUCHES, MS_GEOS_OVERLAPS, MS_GEOS_CROSSES, MS_GEOS_INTERSECTS, MS_GEOS_WITHIN, MS_GEOS_CONTAINS, MS_GEOS_BEYOND, MS_GEOS_DWITHIN};$/;"	g
MS_GEOS_OVERLAPS	src/Topography/shapelib/mapserver.h	/^  enum MS_GEOS_OPERATOR {MS_GEOS_EQUALS, MS_GEOS_DISJOINT, MS_GEOS_TOUCHES, MS_GEOS_OVERLAPS, MS_GEOS_CROSSES, MS_GEOS_INTERSECTS, MS_GEOS_WITHIN, MS_GEOS_CONTAINS, MS_GEOS_BEYOND, MS_GEOS_DWITHIN};$/;"	e	enum:MS_GEOS_OPERATOR
MS_GEOS_TOUCHES	src/Topography/shapelib/mapserver.h	/^  enum MS_GEOS_OPERATOR {MS_GEOS_EQUALS, MS_GEOS_DISJOINT, MS_GEOS_TOUCHES, MS_GEOS_OVERLAPS, MS_GEOS_CROSSES, MS_GEOS_INTERSECTS, MS_GEOS_WITHIN, MS_GEOS_CONTAINS, MS_GEOS_BEYOND, MS_GEOS_DWITHIN};$/;"	e	enum:MS_GEOS_OPERATOR
MS_GEOS_WITHIN	src/Topography/shapelib/mapserver.h	/^  enum MS_GEOS_OPERATOR {MS_GEOS_EQUALS, MS_GEOS_DISJOINT, MS_GEOS_TOUCHES, MS_GEOS_OVERLAPS, MS_GEOS_CROSSES, MS_GEOS_INTERSECTS, MS_GEOS_WITHIN, MS_GEOS_CONTAINS, MS_GEOS_BEYOND, MS_GEOS_DWITHIN};$/;"	e	enum:MS_GEOS_OPERATOR
MS_GET_BIT	src/Topography/shapelib/mapserver.h	2473;"	d
MS_GIANT	src/Topography/shapelib/mapserver.h	516;"	d
MS_GMLERR	src/Topography/shapelib/maperror.h	80;"	d
MS_GRATICULE	src/Topography/shapelib/mapserver.h	/^  enum MS_CONNECTION_TYPE {MS_INLINE, MS_SHAPEFILE, MS_TILED_SHAPEFILE, MS_UNUSED_2, MS_OGR, MS_UNUSED_1, MS_POSTGIS, MS_WMS, MS_ORACLESPATIAL, MS_WFS, MS_GRATICULE, MS_MYSQL, MS_RASTER, MS_PLUGIN, MS_UNION, MS_UVRASTER, MS_CONTOUR, MS_KERNELDENSITY };$/;"	e	enum:MS_CONNECTION_TYPE
MS_GREEN	src/Topography/shapelib/mapserver.h	265;"	d
MS_HASHERR	src/Topography/shapelib/maperror.h	60;"	d
MS_HILITE	src/Topography/shapelib/mapserver.h	/^  enum MS_QUERYMAP_STYLES {MS_NORMAL, MS_HILITE, MS_SELECTED};$/;"	e	enum:MS_QUERYMAP_STYLES
MS_HONOURSTRINGS	src/Topography/shapelib/mapserver.h	317;"	d
MS_HTTPERR	src/Topography/shapelib/maperror.h	74;"	d
MS_IDENTERR	src/Topography/shapelib/maperror.h	53;"	d
MS_IMAGE2MAP_X	src/Topography/shapelib/mapserver.h	432;"	d
MS_IMAGE2MAP_Y	src/Topography/shapelib/mapserver.h	433;"	d
MS_IMAGEMODE	src/Topography/shapelib/mapserver.h	/^  enum MS_IMAGEMODE { MS_IMAGEMODE_PC256, MS_IMAGEMODE_RGB, MS_IMAGEMODE_RGBA, MS_IMAGEMODE_INT16, MS_IMAGEMODE_FLOAT32, MS_IMAGEMODE_BYTE, MS_IMAGEMODE_FEATURE, MS_IMAGEMODE_NULL };$/;"	g
MS_IMAGEMODE_BYTE	src/Topography/shapelib/mapserver.h	/^  enum MS_IMAGEMODE { MS_IMAGEMODE_PC256, MS_IMAGEMODE_RGB, MS_IMAGEMODE_RGBA, MS_IMAGEMODE_INT16, MS_IMAGEMODE_FLOAT32, MS_IMAGEMODE_BYTE, MS_IMAGEMODE_FEATURE, MS_IMAGEMODE_NULL };$/;"	e	enum:MS_IMAGEMODE
MS_IMAGEMODE_FEATURE	src/Topography/shapelib/mapserver.h	/^  enum MS_IMAGEMODE { MS_IMAGEMODE_PC256, MS_IMAGEMODE_RGB, MS_IMAGEMODE_RGBA, MS_IMAGEMODE_INT16, MS_IMAGEMODE_FLOAT32, MS_IMAGEMODE_BYTE, MS_IMAGEMODE_FEATURE, MS_IMAGEMODE_NULL };$/;"	e	enum:MS_IMAGEMODE
MS_IMAGEMODE_FLOAT32	src/Topography/shapelib/mapserver.h	/^  enum MS_IMAGEMODE { MS_IMAGEMODE_PC256, MS_IMAGEMODE_RGB, MS_IMAGEMODE_RGBA, MS_IMAGEMODE_INT16, MS_IMAGEMODE_FLOAT32, MS_IMAGEMODE_BYTE, MS_IMAGEMODE_FEATURE, MS_IMAGEMODE_NULL };$/;"	e	enum:MS_IMAGEMODE
MS_IMAGEMODE_INT16	src/Topography/shapelib/mapserver.h	/^  enum MS_IMAGEMODE { MS_IMAGEMODE_PC256, MS_IMAGEMODE_RGB, MS_IMAGEMODE_RGBA, MS_IMAGEMODE_INT16, MS_IMAGEMODE_FLOAT32, MS_IMAGEMODE_BYTE, MS_IMAGEMODE_FEATURE, MS_IMAGEMODE_NULL };$/;"	e	enum:MS_IMAGEMODE
MS_IMAGEMODE_NULL	src/Topography/shapelib/mapserver.h	/^  enum MS_IMAGEMODE { MS_IMAGEMODE_PC256, MS_IMAGEMODE_RGB, MS_IMAGEMODE_RGBA, MS_IMAGEMODE_INT16, MS_IMAGEMODE_FLOAT32, MS_IMAGEMODE_BYTE, MS_IMAGEMODE_FEATURE, MS_IMAGEMODE_NULL };$/;"	e	enum:MS_IMAGEMODE
MS_IMAGEMODE_PC256	src/Topography/shapelib/mapserver.h	/^  enum MS_IMAGEMODE { MS_IMAGEMODE_PC256, MS_IMAGEMODE_RGB, MS_IMAGEMODE_RGBA, MS_IMAGEMODE_INT16, MS_IMAGEMODE_FLOAT32, MS_IMAGEMODE_BYTE, MS_IMAGEMODE_FEATURE, MS_IMAGEMODE_NULL };$/;"	e	enum:MS_IMAGEMODE
MS_IMAGEMODE_RGB	src/Topography/shapelib/mapserver.h	/^  enum MS_IMAGEMODE { MS_IMAGEMODE_PC256, MS_IMAGEMODE_RGB, MS_IMAGEMODE_RGBA, MS_IMAGEMODE_INT16, MS_IMAGEMODE_FLOAT32, MS_IMAGEMODE_BYTE, MS_IMAGEMODE_FEATURE, MS_IMAGEMODE_NULL };$/;"	e	enum:MS_IMAGEMODE
MS_IMAGEMODE_RGBA	src/Topography/shapelib/mapserver.h	/^  enum MS_IMAGEMODE { MS_IMAGEMODE_PC256, MS_IMAGEMODE_RGB, MS_IMAGEMODE_RGBA, MS_IMAGEMODE_INT16, MS_IMAGEMODE_FLOAT32, MS_IMAGEMODE_BYTE, MS_IMAGEMODE_FEATURE, MS_IMAGEMODE_NULL };$/;"	e	enum:MS_IMAGEMODE
MS_IMAGE_EXTENSION	src/Topography/shapelib/mapserver.h	388;"	d
MS_IMAGE_MIME_TYPE	src/Topography/shapelib/mapserver.h	387;"	d
MS_IMAGE_RENDERER	src/Topography/shapelib/mapserver.h	3247;"	d
MS_IMAGE_RENDERER_CACHE	src/Topography/shapelib/mapserver.h	3249;"	d
MS_IMGERR	src/Topography/shapelib/maperror.h	59;"	d
MS_INCHES	src/Topography/shapelib/mapserver.h	/^  enum MS_UNITS {MS_INCHES, MS_FEET, MS_MILES, MS_METERS, MS_KILOMETERS, MS_DD, MS_PIXELS, MS_PERCENTAGES, MS_NAUTICALMILES};$/;"	e	enum:MS_UNITS
MS_INDEX_EXTENSION	src/Topography/shapelib/mapserver.h	253;"	d
MS_INIT_COLOR	src/Topography/shapelib/mapserver.h	380;"	d
MS_INIT_INVALID_RECT	src/Topography/shapelib/mapserver.h	498;"	d
MS_INLINE	src/Topography/shapelib/mapserver.h	/^  enum MS_CONNECTION_TYPE {MS_INLINE, MS_SHAPEFILE, MS_TILED_SHAPEFILE, MS_UNUSED_2, MS_OGR, MS_UNUSED_1, MS_POSTGIS, MS_WMS, MS_ORACLESPATIAL, MS_WFS, MS_GRATICULE, MS_MYSQL, MS_RASTER, MS_PLUGIN, MS_UNION, MS_UVRASTER, MS_CONTOUR, MS_KERNELDENSITY };$/;"	e	enum:MS_CONNECTION_TYPE
MS_IOERR	src/Topography/shapelib/maperror.h	46;"	d
MS_IREGEX	src/Topography/shapelib/mapserver.h	311;"	d
MS_ISTRING	src/Topography/shapelib/mapserver.h	312;"	d
MS_IS_VALID_ARRAY_INDEX	src/Topography/shapelib/mapserver.h	494;"	d
MS_ITEMNAMELEN	src/Topography/shapelib/mapserver.h	282;"	d
MS_JOINERR	src/Topography/shapelib/maperror.h	61;"	d
MS_JOIN_CONNECTION_TYPE	src/Topography/shapelib/mapserver.h	/^  enum MS_JOIN_CONNECTION_TYPE {MS_DB_XBASE, MS_DB_CSV, MS_DB_MYSQL, MS_DB_ORACLE, MS_DB_POSTGRES};$/;"	g
MS_JOIN_ONE_TO_MANY	src/Topography/shapelib/mapserver.h	/^  enum MS_JOIN_TYPE {MS_JOIN_ONE_TO_ONE, MS_JOIN_ONE_TO_MANY};$/;"	e	enum:MS_JOIN_TYPE
MS_JOIN_ONE_TO_ONE	src/Topography/shapelib/mapserver.h	/^  enum MS_JOIN_TYPE {MS_JOIN_ONE_TO_ONE, MS_JOIN_ONE_TO_MANY};$/;"	e	enum:MS_JOIN_TYPE
MS_JOIN_TYPE	src/Topography/shapelib/mapserver.h	/^  enum MS_JOIN_TYPE {MS_JOIN_ONE_TO_ONE, MS_JOIN_ONE_TO_MANY};$/;"	g
MS_KERNELDENSITY	src/Topography/shapelib/mapserver.h	/^  enum MS_CONNECTION_TYPE {MS_INLINE, MS_SHAPEFILE, MS_TILED_SHAPEFILE, MS_UNUSED_2, MS_OGR, MS_UNUSED_1, MS_POSTGIS, MS_WMS, MS_ORACLESPATIAL, MS_WFS, MS_GRATICULE, MS_MYSQL, MS_RASTER, MS_PLUGIN, MS_UNION, MS_UVRASTER, MS_CONTOUR, MS_KERNELDENSITY };$/;"	e	enum:MS_CONNECTION_TYPE
MS_KILOMETERS	src/Topography/shapelib/mapserver.h	/^  enum MS_UNITS {MS_INCHES, MS_FEET, MS_MILES, MS_METERS, MS_KILOMETERS, MS_DD, MS_PIXELS, MS_PERCENTAGES, MS_NAUTICALMILES};$/;"	e	enum:MS_UNITS
MS_LABELCACHEINCREMENT	src/Topography/shapelib/mapserver.h	298;"	d
MS_LABELCACHEINITSIZE	src/Topography/shapelib/mapserver.h	297;"	d
MS_LABEL_ALLOCSIZE	src/Topography/shapelib/mapserver.h	235;"	d
MS_LABEL_BINDING_ALIGN	src/Topography/shapelib/mapserver.h	/^  enum MS_LABEL_BINDING_ENUM { MS_LABEL_BINDING_SIZE, MS_LABEL_BINDING_ANGLE, MS_LABEL_BINDING_COLOR, MS_LABEL_BINDING_OUTLINECOLOR, MS_LABEL_BINDING_FONT, MS_LABEL_BINDING_PRIORITY, MS_LABEL_BINDING_POSITION, MS_LABEL_BINDING_SHADOWSIZEX, MS_LABEL_BINDING_SHADOWSIZEY, MS_LABEL_BINDING_OFFSET_X, MS_LABEL_BINDING_OFFSET_Y,MS_LABEL_BINDING_ALIGN };$/;"	e	enum:MS_LABEL_BINDING_ENUM
MS_LABEL_BINDING_ANGLE	src/Topography/shapelib/mapserver.h	/^  enum MS_LABEL_BINDING_ENUM { MS_LABEL_BINDING_SIZE, MS_LABEL_BINDING_ANGLE, MS_LABEL_BINDING_COLOR, MS_LABEL_BINDING_OUTLINECOLOR, MS_LABEL_BINDING_FONT, MS_LABEL_BINDING_PRIORITY, MS_LABEL_BINDING_POSITION, MS_LABEL_BINDING_SHADOWSIZEX, MS_LABEL_BINDING_SHADOWSIZEY, MS_LABEL_BINDING_OFFSET_X, MS_LABEL_BINDING_OFFSET_Y,MS_LABEL_BINDING_ALIGN };$/;"	e	enum:MS_LABEL_BINDING_ENUM
MS_LABEL_BINDING_COLOR	src/Topography/shapelib/mapserver.h	/^  enum MS_LABEL_BINDING_ENUM { MS_LABEL_BINDING_SIZE, MS_LABEL_BINDING_ANGLE, MS_LABEL_BINDING_COLOR, MS_LABEL_BINDING_OUTLINECOLOR, MS_LABEL_BINDING_FONT, MS_LABEL_BINDING_PRIORITY, MS_LABEL_BINDING_POSITION, MS_LABEL_BINDING_SHADOWSIZEX, MS_LABEL_BINDING_SHADOWSIZEY, MS_LABEL_BINDING_OFFSET_X, MS_LABEL_BINDING_OFFSET_Y,MS_LABEL_BINDING_ALIGN };$/;"	e	enum:MS_LABEL_BINDING_ENUM
MS_LABEL_BINDING_ENUM	src/Topography/shapelib/mapserver.h	/^  enum MS_LABEL_BINDING_ENUM { MS_LABEL_BINDING_SIZE, MS_LABEL_BINDING_ANGLE, MS_LABEL_BINDING_COLOR, MS_LABEL_BINDING_OUTLINECOLOR, MS_LABEL_BINDING_FONT, MS_LABEL_BINDING_PRIORITY, MS_LABEL_BINDING_POSITION, MS_LABEL_BINDING_SHADOWSIZEX, MS_LABEL_BINDING_SHADOWSIZEY, MS_LABEL_BINDING_OFFSET_X, MS_LABEL_BINDING_OFFSET_Y,MS_LABEL_BINDING_ALIGN };$/;"	g
MS_LABEL_BINDING_FONT	src/Topography/shapelib/mapserver.h	/^  enum MS_LABEL_BINDING_ENUM { MS_LABEL_BINDING_SIZE, MS_LABEL_BINDING_ANGLE, MS_LABEL_BINDING_COLOR, MS_LABEL_BINDING_OUTLINECOLOR, MS_LABEL_BINDING_FONT, MS_LABEL_BINDING_PRIORITY, MS_LABEL_BINDING_POSITION, MS_LABEL_BINDING_SHADOWSIZEX, MS_LABEL_BINDING_SHADOWSIZEY, MS_LABEL_BINDING_OFFSET_X, MS_LABEL_BINDING_OFFSET_Y,MS_LABEL_BINDING_ALIGN };$/;"	e	enum:MS_LABEL_BINDING_ENUM
MS_LABEL_BINDING_LENGTH	src/Topography/shapelib/mapserver.h	643;"	d
MS_LABEL_BINDING_OFFSET_X	src/Topography/shapelib/mapserver.h	/^  enum MS_LABEL_BINDING_ENUM { MS_LABEL_BINDING_SIZE, MS_LABEL_BINDING_ANGLE, MS_LABEL_BINDING_COLOR, MS_LABEL_BINDING_OUTLINECOLOR, MS_LABEL_BINDING_FONT, MS_LABEL_BINDING_PRIORITY, MS_LABEL_BINDING_POSITION, MS_LABEL_BINDING_SHADOWSIZEX, MS_LABEL_BINDING_SHADOWSIZEY, MS_LABEL_BINDING_OFFSET_X, MS_LABEL_BINDING_OFFSET_Y,MS_LABEL_BINDING_ALIGN };$/;"	e	enum:MS_LABEL_BINDING_ENUM
MS_LABEL_BINDING_OFFSET_Y	src/Topography/shapelib/mapserver.h	/^  enum MS_LABEL_BINDING_ENUM { MS_LABEL_BINDING_SIZE, MS_LABEL_BINDING_ANGLE, MS_LABEL_BINDING_COLOR, MS_LABEL_BINDING_OUTLINECOLOR, MS_LABEL_BINDING_FONT, MS_LABEL_BINDING_PRIORITY, MS_LABEL_BINDING_POSITION, MS_LABEL_BINDING_SHADOWSIZEX, MS_LABEL_BINDING_SHADOWSIZEY, MS_LABEL_BINDING_OFFSET_X, MS_LABEL_BINDING_OFFSET_Y,MS_LABEL_BINDING_ALIGN };$/;"	e	enum:MS_LABEL_BINDING_ENUM
MS_LABEL_BINDING_OUTLINECOLOR	src/Topography/shapelib/mapserver.h	/^  enum MS_LABEL_BINDING_ENUM { MS_LABEL_BINDING_SIZE, MS_LABEL_BINDING_ANGLE, MS_LABEL_BINDING_COLOR, MS_LABEL_BINDING_OUTLINECOLOR, MS_LABEL_BINDING_FONT, MS_LABEL_BINDING_PRIORITY, MS_LABEL_BINDING_POSITION, MS_LABEL_BINDING_SHADOWSIZEX, MS_LABEL_BINDING_SHADOWSIZEY, MS_LABEL_BINDING_OFFSET_X, MS_LABEL_BINDING_OFFSET_Y,MS_LABEL_BINDING_ALIGN };$/;"	e	enum:MS_LABEL_BINDING_ENUM
MS_LABEL_BINDING_POSITION	src/Topography/shapelib/mapserver.h	/^  enum MS_LABEL_BINDING_ENUM { MS_LABEL_BINDING_SIZE, MS_LABEL_BINDING_ANGLE, MS_LABEL_BINDING_COLOR, MS_LABEL_BINDING_OUTLINECOLOR, MS_LABEL_BINDING_FONT, MS_LABEL_BINDING_PRIORITY, MS_LABEL_BINDING_POSITION, MS_LABEL_BINDING_SHADOWSIZEX, MS_LABEL_BINDING_SHADOWSIZEY, MS_LABEL_BINDING_OFFSET_X, MS_LABEL_BINDING_OFFSET_Y,MS_LABEL_BINDING_ALIGN };$/;"	e	enum:MS_LABEL_BINDING_ENUM
MS_LABEL_BINDING_PRIORITY	src/Topography/shapelib/mapserver.h	/^  enum MS_LABEL_BINDING_ENUM { MS_LABEL_BINDING_SIZE, MS_LABEL_BINDING_ANGLE, MS_LABEL_BINDING_COLOR, MS_LABEL_BINDING_OUTLINECOLOR, MS_LABEL_BINDING_FONT, MS_LABEL_BINDING_PRIORITY, MS_LABEL_BINDING_POSITION, MS_LABEL_BINDING_SHADOWSIZEX, MS_LABEL_BINDING_SHADOWSIZEY, MS_LABEL_BINDING_OFFSET_X, MS_LABEL_BINDING_OFFSET_Y,MS_LABEL_BINDING_ALIGN };$/;"	e	enum:MS_LABEL_BINDING_ENUM
MS_LABEL_BINDING_SHADOWSIZEX	src/Topography/shapelib/mapserver.h	/^  enum MS_LABEL_BINDING_ENUM { MS_LABEL_BINDING_SIZE, MS_LABEL_BINDING_ANGLE, MS_LABEL_BINDING_COLOR, MS_LABEL_BINDING_OUTLINECOLOR, MS_LABEL_BINDING_FONT, MS_LABEL_BINDING_PRIORITY, MS_LABEL_BINDING_POSITION, MS_LABEL_BINDING_SHADOWSIZEX, MS_LABEL_BINDING_SHADOWSIZEY, MS_LABEL_BINDING_OFFSET_X, MS_LABEL_BINDING_OFFSET_Y,MS_LABEL_BINDING_ALIGN };$/;"	e	enum:MS_LABEL_BINDING_ENUM
MS_LABEL_BINDING_SHADOWSIZEY	src/Topography/shapelib/mapserver.h	/^  enum MS_LABEL_BINDING_ENUM { MS_LABEL_BINDING_SIZE, MS_LABEL_BINDING_ANGLE, MS_LABEL_BINDING_COLOR, MS_LABEL_BINDING_OUTLINECOLOR, MS_LABEL_BINDING_FONT, MS_LABEL_BINDING_PRIORITY, MS_LABEL_BINDING_POSITION, MS_LABEL_BINDING_SHADOWSIZEX, MS_LABEL_BINDING_SHADOWSIZEY, MS_LABEL_BINDING_OFFSET_X, MS_LABEL_BINDING_OFFSET_Y,MS_LABEL_BINDING_ALIGN };$/;"	e	enum:MS_LABEL_BINDING_ENUM
MS_LABEL_BINDING_SIZE	src/Topography/shapelib/mapserver.h	/^  enum MS_LABEL_BINDING_ENUM { MS_LABEL_BINDING_SIZE, MS_LABEL_BINDING_ANGLE, MS_LABEL_BINDING_COLOR, MS_LABEL_BINDING_OUTLINECOLOR, MS_LABEL_BINDING_FONT, MS_LABEL_BINDING_PRIORITY, MS_LABEL_BINDING_POSITION, MS_LABEL_BINDING_SHADOWSIZEX, MS_LABEL_BINDING_SHADOWSIZEY, MS_LABEL_BINDING_OFFSET_X, MS_LABEL_BINDING_OFFSET_Y,MS_LABEL_BINDING_ALIGN };$/;"	e	enum:MS_LABEL_BINDING_ENUM
MS_LABEL_FORCE_GROUP	src/Topography/shapelib/mapserver.h	240;"	d
MS_LABEL_PERPENDICULAR_OFFSET	src/Topography/shapelib/mapserver.h	1186;"	d
MS_LABEL_PERPENDICULAR_TOP_OFFSET	src/Topography/shapelib/mapserver.h	1187;"	d
MS_LARGE	src/Topography/shapelib/mapserver.h	515;"	d
MS_LAYER_ALLOCSIZE	src/Topography/shapelib/mapserver.h	232;"	d
MS_LAYER_ANNOTATION	src/Topography/shapelib/mapserver.h	/^  enum MS_LAYER_TYPE {MS_LAYER_POINT, MS_LAYER_LINE, MS_LAYER_POLYGON, MS_LAYER_RASTER, MS_LAYER_ANNOTATION \/* only used for parser backwards compatibility *\/, MS_LAYER_QUERY, MS_LAYER_CIRCLE, MS_LAYER_TILEINDEX, MS_LAYER_CHART};$/;"	e	enum:MS_LAYER_TYPE
MS_LAYER_CHART	src/Topography/shapelib/mapserver.h	/^  enum MS_LAYER_TYPE {MS_LAYER_POINT, MS_LAYER_LINE, MS_LAYER_POLYGON, MS_LAYER_RASTER, MS_LAYER_ANNOTATION \/* only used for parser backwards compatibility *\/, MS_LAYER_QUERY, MS_LAYER_CIRCLE, MS_LAYER_TILEINDEX, MS_LAYER_CHART};$/;"	e	enum:MS_LAYER_TYPE
MS_LAYER_CIRCLE	src/Topography/shapelib/mapserver.h	/^  enum MS_LAYER_TYPE {MS_LAYER_POINT, MS_LAYER_LINE, MS_LAYER_POLYGON, MS_LAYER_RASTER, MS_LAYER_ANNOTATION \/* only used for parser backwards compatibility *\/, MS_LAYER_QUERY, MS_LAYER_CIRCLE, MS_LAYER_TILEINDEX, MS_LAYER_CHART};$/;"	e	enum:MS_LAYER_TYPE
MS_LAYER_LINE	src/Topography/shapelib/mapserver.h	/^  enum MS_LAYER_TYPE {MS_LAYER_POINT, MS_LAYER_LINE, MS_LAYER_POLYGON, MS_LAYER_RASTER, MS_LAYER_ANNOTATION \/* only used for parser backwards compatibility *\/, MS_LAYER_QUERY, MS_LAYER_CIRCLE, MS_LAYER_TILEINDEX, MS_LAYER_CHART};$/;"	e	enum:MS_LAYER_TYPE
MS_LAYER_POINT	src/Topography/shapelib/mapserver.h	/^  enum MS_LAYER_TYPE {MS_LAYER_POINT, MS_LAYER_LINE, MS_LAYER_POLYGON, MS_LAYER_RASTER, MS_LAYER_ANNOTATION \/* only used for parser backwards compatibility *\/, MS_LAYER_QUERY, MS_LAYER_CIRCLE, MS_LAYER_TILEINDEX, MS_LAYER_CHART};$/;"	e	enum:MS_LAYER_TYPE
MS_LAYER_POLYGON	src/Topography/shapelib/mapserver.h	/^  enum MS_LAYER_TYPE {MS_LAYER_POINT, MS_LAYER_LINE, MS_LAYER_POLYGON, MS_LAYER_RASTER, MS_LAYER_ANNOTATION \/* only used for parser backwards compatibility *\/, MS_LAYER_QUERY, MS_LAYER_CIRCLE, MS_LAYER_TILEINDEX, MS_LAYER_CHART};$/;"	e	enum:MS_LAYER_TYPE
MS_LAYER_QUERY	src/Topography/shapelib/mapserver.h	/^  enum MS_LAYER_TYPE {MS_LAYER_POINT, MS_LAYER_LINE, MS_LAYER_POLYGON, MS_LAYER_RASTER, MS_LAYER_ANNOTATION \/* only used for parser backwards compatibility *\/, MS_LAYER_QUERY, MS_LAYER_CIRCLE, MS_LAYER_TILEINDEX, MS_LAYER_CHART};$/;"	e	enum:MS_LAYER_TYPE
MS_LAYER_RASTER	src/Topography/shapelib/mapserver.h	/^  enum MS_LAYER_TYPE {MS_LAYER_POINT, MS_LAYER_LINE, MS_LAYER_POLYGON, MS_LAYER_RASTER, MS_LAYER_ANNOTATION \/* only used for parser backwards compatibility *\/, MS_LAYER_QUERY, MS_LAYER_CIRCLE, MS_LAYER_TILEINDEX, MS_LAYER_CHART};$/;"	e	enum:MS_LAYER_TYPE
MS_LAYER_TILEINDEX	src/Topography/shapelib/mapserver.h	/^  enum MS_LAYER_TYPE {MS_LAYER_POINT, MS_LAYER_LINE, MS_LAYER_POLYGON, MS_LAYER_RASTER, MS_LAYER_ANNOTATION \/* only used for parser backwards compatibility *\/, MS_LAYER_QUERY, MS_LAYER_CIRCLE, MS_LAYER_TILEINDEX, MS_LAYER_CHART};$/;"	e	enum:MS_LAYER_TYPE
MS_LAYER_TYPE	src/Topography/shapelib/mapserver.h	/^  enum MS_LAYER_TYPE {MS_LAYER_POINT, MS_LAYER_LINE, MS_LAYER_POLYGON, MS_LAYER_RASTER, MS_LAYER_ANNOTATION \/* only used for parser backwards compatibility *\/, MS_LAYER_QUERY, MS_LAYER_CIRCLE, MS_LAYER_TILEINDEX, MS_LAYER_CHART};$/;"	g
MS_LC	src/Topography/shapelib/mapserver.h	/^  enum MS_POSITIONS_ENUM {MS_UL=101, MS_LR, MS_UR, MS_LL, MS_CR, MS_CL, MS_UC, MS_LC, MS_CC, MS_AUTO, MS_XY, MS_NONE, MS_AUTO2,MS_FOLLOW};$/;"	e	enum:MS_POSITIONS_ENUM
MS_LIST	src/Topography/shapelib/mapserver.h	314;"	d
MS_LL	src/Topography/shapelib/mapserver.h	/^  enum MS_POSITIONS_ENUM {MS_UL=101, MS_LR, MS_UR, MS_LL, MS_CR, MS_CL, MS_UC, MS_LC, MS_CC, MS_AUTO, MS_XY, MS_NONE, MS_AUTO2,MS_FOLLOW};$/;"	e	enum:MS_POSITIONS_ENUM
MS_LR	src/Topography/shapelib/mapserver.h	/^  enum MS_POSITIONS_ENUM {MS_UL=101, MS_LR, MS_UR, MS_LL, MS_CR, MS_CL, MS_UC, MS_LC, MS_CC, MS_AUTO, MS_XY, MS_NONE, MS_AUTO2,MS_FOLLOW};$/;"	e	enum:MS_POSITIONS_ENUM
MS_LSB_ORDER	src/Topography/shapelib/maptree.h	77;"	d
MS_MAP2IMAGE_X	src/Topography/shapelib/mapserver.h	430;"	d
MS_MAP2IMAGE_XCELL_IC	src/Topography/shapelib/mapserver.h	438;"	d
MS_MAP2IMAGE_X_IC	src/Topography/shapelib/mapserver.h	436;"	d
MS_MAP2IMAGE_X_IC_DBL	src/Topography/shapelib/mapserver.h	441;"	d
MS_MAP2IMAGE_X_IC_SNAP	src/Topography/shapelib/mapserver.h	444;"	d
MS_MAP2IMAGE_Y	src/Topography/shapelib/mapserver.h	431;"	d
MS_MAP2IMAGE_YCELL_IC	src/Topography/shapelib/mapserver.h	439;"	d
MS_MAP2IMAGE_Y_IC	src/Topography/shapelib/mapserver.h	437;"	d
MS_MAP2IMAGE_Y_IC_DBL	src/Topography/shapelib/mapserver.h	442;"	d
MS_MAP2IMAGE_Y_IC_SNAP	src/Topography/shapelib/mapserver.h	445;"	d
MS_MAPCONTEXTERR	src/Topography/shapelib/maperror.h	73;"	d
MS_MAP_RENDERER	src/Topography/shapelib/mapserver.h	3250;"	d
MS_MAX	src/Topography/shapelib/mapserver.h	329;"	d
MS_MAXCOLORS	src/Topography/shapelib/mapserver.h	268;"	d
MS_MAXFONTSIZE	src/Topography/shapelib/mapserver.h	295;"	d
MS_MAXIMAGESIZE_DEFAULT	src/Topography/shapelib/mapserver.h	278;"	d
MS_MAXJOINS	src/Topography/shapelib/mapserver.h	281;"	d
MS_MAXPATHLEN	src/Topography/shapelib/mapserver.h	276;"	d
MS_MAXPROJARGS	src/Topography/shapelib/mapserver.h	280;"	d
MS_MAXSYMBOLSIZE	src/Topography/shapelib/mapserver.h	286;"	d
MS_MAXSYMBOLWIDTH	src/Topography/shapelib/mapserver.h	289;"	d
MS_MAX_LABEL_FONTS	src/Topography/shapelib/mapserver.h	238;"	d
MS_MAX_LABEL_PRIORITY	src/Topography/shapelib/mapserver.h	237;"	d
MS_MEDIUM	src/Topography/shapelib/mapserver.h	514;"	d
MS_MEMERR	src/Topography/shapelib/maperror.h	47;"	d
MS_METERS	src/Topography/shapelib/mapserver.h	/^  enum MS_UNITS {MS_INCHES, MS_FEET, MS_MILES, MS_METERS, MS_KILOMETERS, MS_DD, MS_PIXELS, MS_PERCENTAGES, MS_NAUTICALMILES};$/;"	e	enum:MS_UNITS
MS_MILES	src/Topography/shapelib/mapserver.h	/^  enum MS_UNITS {MS_INCHES, MS_FEET, MS_MILES, MS_METERS, MS_KILOMETERS, MS_DD, MS_PIXELS, MS_PERCENTAGES, MS_NAUTICALMILES};$/;"	e	enum:MS_UNITS
MS_MIN	src/Topography/shapelib/mapserver.h	328;"	d
MS_MINFONTSIZE	src/Topography/shapelib/mapserver.h	294;"	d
MS_MINSYMBOLSIZE	src/Topography/shapelib/mapserver.h	285;"	d
MS_MINSYMBOLWIDTH	src/Topography/shapelib/mapserver.h	288;"	d
MS_MISCERR	src/Topography/shapelib/maperror.h	56;"	d
MS_MISSING_DATA_FAIL	src/Topography/shapelib/mapserver.h	271;"	d
MS_MISSING_DATA_IGNORE	src/Topography/shapelib/mapserver.h	270;"	d
MS_MISSING_DATA_LOG	src/Topography/shapelib/mapserver.h	272;"	d
MS_MSB_ORDER	src/Topography/shapelib/maptree.h	78;"	d
MS_MULTIPLE	src/Topography/shapelib/mapserver.h	524;"	d
MS_MYSQL	src/Topography/shapelib/mapserver.h	/^  enum MS_CONNECTION_TYPE {MS_INLINE, MS_SHAPEFILE, MS_TILED_SHAPEFILE, MS_UNUSED_2, MS_OGR, MS_UNUSED_1, MS_POSTGIS, MS_WMS, MS_ORACLESPATIAL, MS_WFS, MS_GRATICULE, MS_MYSQL, MS_RASTER, MS_PLUGIN, MS_UNION, MS_UVRASTER, MS_CONTOUR, MS_KERNELDENSITY };$/;"	e	enum:MS_CONNECTION_TYPE
MS_NAMELEN	src/Topography/shapelib/mapserver.h	283;"	d
MS_NATIVE_ORDER	src/Topography/shapelib/maptree.h	79;"	d
MS_NAUTICALMILES	src/Topography/shapelib/mapserver.h	/^  enum MS_UNITS {MS_INCHES, MS_FEET, MS_MILES, MS_METERS, MS_KILOMETERS, MS_DD, MS_PIXELS, MS_PERCENTAGES, MS_NAUTICALMILES};$/;"	e	enum:MS_UNITS
MS_NEW_LSB_ORDER	src/Topography/shapelib/maptree.h	80;"	d
MS_NEW_MSB_ORDER	src/Topography/shapelib/maptree.h	81;"	d
MS_NINT	src/Topography/shapelib/mapserver.h	/^  static __inline long int MS_NINT (double flt)$/;"	f
MS_NINT	src/Topography/shapelib/mapserver.h	/^  static __inline long int MS_NINT( double __x )$/;"	f
MS_NINT	src/Topography/shapelib/mapserver.h	348;"	d
MS_NINT	src/Topography/shapelib/mapserver.h	373;"	d
MS_NINT_GENERIC	src/Topography/shapelib/mapserver.h	335;"	d
MS_NO	src/Topography/shapelib/mapserver.h	226;"	d
MS_NOERR	src/Topography/shapelib/maperror.h	45;"	d
MS_NONE	src/Topography/shapelib/mapserver.h	/^  enum MS_POSITIONS_ENUM {MS_UL=101, MS_LR, MS_UR, MS_LL, MS_CR, MS_CL, MS_UC, MS_LC, MS_CC, MS_AUTO, MS_XY, MS_NONE, MS_AUTO2,MS_FOLLOW};$/;"	e	enum:MS_POSITIONS_ENUM
MS_NOOVERRIDE	src/Topography/shapelib/mapserver.h	872;"	d
MS_NORMAL	src/Topography/shapelib/mapserver.h	/^  enum MS_QUERYMAP_STYLES {MS_NORMAL, MS_HILITE, MS_SELECTED};$/;"	e	enum:MS_QUERYMAP_STYLES
MS_NOTFOUND	src/Topography/shapelib/maperror.h	62;"	d
MS_NULLPARENTERR	src/Topography/shapelib/maperror.h	82;"	d
MS_NUMBER	src/Topography/shapelib/mapserver.h	309;"	d
MS_NUMERRORCODES	src/Topography/shapelib/maperror.h	88;"	d
MS_OFF	src/Topography/shapelib/mapserver.h	221;"	d
MS_OGLERR	src/Topography/shapelib/maperror.h	85;"	d
MS_OGR	src/Topography/shapelib/mapserver.h	/^  enum MS_CONNECTION_TYPE {MS_INLINE, MS_SHAPEFILE, MS_TILED_SHAPEFILE, MS_UNUSED_2, MS_OGR, MS_UNUSED_1, MS_POSTGIS, MS_WMS, MS_ORACLESPATIAL, MS_WFS, MS_GRATICULE, MS_MYSQL, MS_RASTER, MS_PLUGIN, MS_UNION, MS_UVRASTER, MS_CONTOUR, MS_KERNELDENSITY };$/;"	e	enum:MS_CONNECTION_TYPE
MS_OGRERR	src/Topography/shapelib/maperror.h	66;"	d
MS_ON	src/Topography/shapelib/mapserver.h	220;"	d
MS_ORACLESPATIAL	src/Topography/shapelib/mapserver.h	/^  enum MS_CONNECTION_TYPE {MS_INLINE, MS_SHAPEFILE, MS_TILED_SHAPEFILE, MS_UNUSED_2, MS_OGR, MS_UNUSED_1, MS_POSTGIS, MS_WMS, MS_ORACLESPATIAL, MS_WFS, MS_GRATICULE, MS_MYSQL, MS_RASTER, MS_PLUGIN, MS_UNION, MS_UVRASTER, MS_CONTOUR, MS_KERNELDENSITY };$/;"	e	enum:MS_CONNECTION_TYPE
MS_ORACLESPATIALERR	src/Topography/shapelib/maperror.h	70;"	d
MS_OWSERR	src/Topography/shapelib/maperror.h	84;"	d
MS_OWS_CELLSIZE	src/Topography/shapelib/mapserver.h	429;"	d
MS_PARSEERR	src/Topography/shapelib/maperror.h	64;"	d
MS_PARSE_TYPE_BOOLEAN	src/Topography/shapelib/mapserver.h	/^  enum MS_PARSE_TYPE_ENUM { MS_PARSE_TYPE_BOOLEAN, MS_PARSE_TYPE_STRING, MS_PARSE_TYPE_SHAPE };$/;"	e	enum:MS_PARSE_TYPE_ENUM
MS_PARSE_TYPE_ENUM	src/Topography/shapelib/mapserver.h	/^  enum MS_PARSE_TYPE_ENUM { MS_PARSE_TYPE_BOOLEAN, MS_PARSE_TYPE_STRING, MS_PARSE_TYPE_SHAPE };$/;"	g
MS_PARSE_TYPE_SHAPE	src/Topography/shapelib/mapserver.h	/^  enum MS_PARSE_TYPE_ENUM { MS_PARSE_TYPE_BOOLEAN, MS_PARSE_TYPE_STRING, MS_PARSE_TYPE_SHAPE };$/;"	e	enum:MS_PARSE_TYPE_ENUM
MS_PARSE_TYPE_STRING	src/Topography/shapelib/mapserver.h	/^  enum MS_PARSE_TYPE_ENUM { MS_PARSE_TYPE_BOOLEAN, MS_PARSE_TYPE_STRING, MS_PARSE_TYPE_SHAPE };$/;"	e	enum:MS_PARSE_TYPE_ENUM
MS_PATH_LENGTH	src/Topography/shapelib/mapshape.h	55;"	d
MS_PERCENTAGES	src/Topography/shapelib/mapserver.h	/^  enum MS_UNITS {MS_INCHES, MS_FEET, MS_MILES, MS_METERS, MS_KILOMETERS, MS_DD, MS_PIXELS, MS_PERCENTAGES, MS_NAUTICALMILES};$/;"	e	enum:MS_UNITS
MS_PI	src/Topography/shapelib/mapserver.h	448;"	d
MS_PI2	src/Topography/shapelib/mapserver.h	449;"	d
MS_PIXELS	src/Topography/shapelib/mapserver.h	/^  enum MS_UNITS {MS_INCHES, MS_FEET, MS_MILES, MS_METERS, MS_KILOMETERS, MS_DD, MS_PIXELS, MS_PERCENTAGES, MS_NAUTICALMILES};$/;"	e	enum:MS_UNITS
MS_PLUGIN	src/Topography/shapelib/mapserver.h	/^  enum MS_CONNECTION_TYPE {MS_INLINE, MS_SHAPEFILE, MS_TILED_SHAPEFILE, MS_UNUSED_2, MS_OGR, MS_UNUSED_1, MS_POSTGIS, MS_WMS, MS_ORACLESPATIAL, MS_WFS, MS_GRATICULE, MS_MYSQL, MS_RASTER, MS_PLUGIN, MS_UNION, MS_UVRASTER, MS_CONTOUR, MS_KERNELDENSITY };$/;"	e	enum:MS_CONNECTION_TYPE
MS_POSITIONS_ENUM	src/Topography/shapelib/mapserver.h	/^  enum MS_POSITIONS_ENUM {MS_UL=101, MS_LR, MS_UR, MS_LL, MS_CR, MS_CL, MS_UC, MS_LC, MS_CC, MS_AUTO, MS_XY, MS_NONE, MS_AUTO2,MS_FOLLOW};$/;"	g
MS_POSITIONS_LENGTH	src/Topography/shapelib/mapserver.h	510;"	d
MS_POSTGIS	src/Topography/shapelib/mapserver.h	/^  enum MS_CONNECTION_TYPE {MS_INLINE, MS_SHAPEFILE, MS_TILED_SHAPEFILE, MS_UNUSED_2, MS_OGR, MS_UNUSED_1, MS_POSTGIS, MS_WMS, MS_ORACLESPATIAL, MS_WFS, MS_GRATICULE, MS_MYSQL, MS_RASTER, MS_PLUGIN, MS_UNION, MS_UVRASTER, MS_CONTOUR, MS_KERNELDENSITY };$/;"	e	enum:MS_CONNECTION_TYPE
MS_PRESERVEESCAPES	src/Topography/shapelib/mapserver.h	320;"	d
MS_PRESERVEQUOTES	src/Topography/shapelib/mapserver.h	319;"	d
MS_PRINT_FUNC_FORMAT	src/Topography/shapelib/maperror.h	105;"	d
MS_PRINT_FUNC_FORMAT	src/Topography/shapelib/maperror.h	107;"	d
MS_PROJERR	src/Topography/shapelib/maperror.h	55;"	d
MS_QUERYERR	src/Topography/shapelib/maperror.h	67;"	d
MS_QUERYMAP_STYLES	src/Topography/shapelib/mapserver.h	/^  enum MS_QUERYMAP_STYLES {MS_NORMAL, MS_HILITE, MS_SELECTED};$/;"	g
MS_QUERY_BY_ATTRIBUTE	src/Topography/shapelib/mapserver.h	/^  enum MS_QUERY_TYPE {MS_QUERY_IS_NULL, MS_QUERY_BY_POINT, MS_QUERY_BY_RECT, MS_QUERY_BY_SHAPE, MS_QUERY_BY_ATTRIBUTE, MS_QUERY_BY_INDEX, MS_QUERY_BY_FILTER};$/;"	e	enum:MS_QUERY_TYPE
MS_QUERY_BY_FILTER	src/Topography/shapelib/mapserver.h	/^  enum MS_QUERY_TYPE {MS_QUERY_IS_NULL, MS_QUERY_BY_POINT, MS_QUERY_BY_RECT, MS_QUERY_BY_SHAPE, MS_QUERY_BY_ATTRIBUTE, MS_QUERY_BY_INDEX, MS_QUERY_BY_FILTER};$/;"	e	enum:MS_QUERY_TYPE
MS_QUERY_BY_INDEX	src/Topography/shapelib/mapserver.h	/^  enum MS_QUERY_TYPE {MS_QUERY_IS_NULL, MS_QUERY_BY_POINT, MS_QUERY_BY_RECT, MS_QUERY_BY_SHAPE, MS_QUERY_BY_ATTRIBUTE, MS_QUERY_BY_INDEX, MS_QUERY_BY_FILTER};$/;"	e	enum:MS_QUERY_TYPE
MS_QUERY_BY_POINT	src/Topography/shapelib/mapserver.h	/^  enum MS_QUERY_TYPE {MS_QUERY_IS_NULL, MS_QUERY_BY_POINT, MS_QUERY_BY_RECT, MS_QUERY_BY_SHAPE, MS_QUERY_BY_ATTRIBUTE, MS_QUERY_BY_INDEX, MS_QUERY_BY_FILTER};$/;"	e	enum:MS_QUERY_TYPE
MS_QUERY_BY_RECT	src/Topography/shapelib/mapserver.h	/^  enum MS_QUERY_TYPE {MS_QUERY_IS_NULL, MS_QUERY_BY_POINT, MS_QUERY_BY_RECT, MS_QUERY_BY_SHAPE, MS_QUERY_BY_ATTRIBUTE, MS_QUERY_BY_INDEX, MS_QUERY_BY_FILTER};$/;"	e	enum:MS_QUERY_TYPE
MS_QUERY_BY_SHAPE	src/Topography/shapelib/mapserver.h	/^  enum MS_QUERY_TYPE {MS_QUERY_IS_NULL, MS_QUERY_BY_POINT, MS_QUERY_BY_RECT, MS_QUERY_BY_SHAPE, MS_QUERY_BY_ATTRIBUTE, MS_QUERY_BY_INDEX, MS_QUERY_BY_FILTER};$/;"	e	enum:MS_QUERY_TYPE
MS_QUERY_EXTENSION	src/Topography/shapelib/mapserver.h	257;"	d
MS_QUERY_IS_NULL	src/Topography/shapelib/mapserver.h	/^  enum MS_QUERY_TYPE {MS_QUERY_IS_NULL, MS_QUERY_BY_POINT, MS_QUERY_BY_RECT, MS_QUERY_BY_SHAPE, MS_QUERY_BY_ATTRIBUTE, MS_QUERY_BY_INDEX, MS_QUERY_BY_FILTER};$/;"	e	enum:MS_QUERY_TYPE
MS_QUERY_MODE	src/Topography/shapelib/mapserver.h	/^  enum MS_QUERY_MODE {MS_QUERY_SINGLE, MS_QUERY_MULTIPLE};$/;"	g
MS_QUERY_MULTIPLE	src/Topography/shapelib/mapserver.h	/^  enum MS_QUERY_MODE {MS_QUERY_SINGLE, MS_QUERY_MULTIPLE};$/;"	e	enum:MS_QUERY_MODE
MS_QUERY_PARAMS_MAGIC_STRING	src/Topography/shapelib/mapserver.h	256;"	d
MS_QUERY_RESULTS_MAGIC_STRING	src/Topography/shapelib/mapserver.h	255;"	d
MS_QUERY_SINGLE	src/Topography/shapelib/mapserver.h	/^  enum MS_QUERY_MODE {MS_QUERY_SINGLE, MS_QUERY_MULTIPLE};$/;"	e	enum:MS_QUERY_MODE
MS_QUERY_TYPE	src/Topography/shapelib/mapserver.h	/^  enum MS_QUERY_TYPE {MS_QUERY_IS_NULL, MS_QUERY_BY_POINT, MS_QUERY_BY_RECT, MS_QUERY_BY_SHAPE, MS_QUERY_BY_ATTRIBUTE, MS_QUERY_BY_INDEX, MS_QUERY_BY_FILTER};$/;"	g
MS_RAD_TO_DEG	src/Topography/shapelib/mapserver.h	260;"	d
MS_RASTER	src/Topography/shapelib/mapserver.h	/^  enum MS_CONNECTION_TYPE {MS_INLINE, MS_SHAPEFILE, MS_TILED_SHAPEFILE, MS_UNUSED_2, MS_OGR, MS_UNUSED_1, MS_POSTGIS, MS_WMS, MS_ORACLESPATIAL, MS_WFS, MS_GRATICULE, MS_MYSQL, MS_RASTER, MS_PLUGIN, MS_UNION, MS_UVRASTER, MS_CONTOUR, MS_KERNELDENSITY };$/;"	e	enum:MS_CONNECTION_TYPE
MS_RECTERR	src/Topography/shapelib/maperror.h	78;"	d
MS_RED	src/Topography/shapelib/mapserver.h	264;"	d
MS_REFCNT_DECR	src/Topography/shapelib/mapserver.h	461;"	d
MS_REFCNT_DECR	src/Topography/shapelib/mapserver.h	468;"	d
MS_REFCNT_DECR	src/Topography/shapelib/mapserver.h	472;"	d
MS_REFCNT_DECR	src/Topography/shapelib/mapserver.h	477;"	d
MS_REFCNT_DECR	src/Topography/shapelib/mapserver.h	482;"	d
MS_REFCNT_DECR	src/Topography/shapelib/mapserver.h	487;"	d
MS_REFCNT_DECR_IS_NOT_ZERO	src/Topography/shapelib/mapserver.h	491;"	d
MS_REFCNT_DECR_IS_ZERO	src/Topography/shapelib/mapserver.h	492;"	d
MS_REFCNT_INCR	src/Topography/shapelib/mapserver.h	460;"	d
MS_REFCNT_INCR	src/Topography/shapelib/mapserver.h	467;"	d
MS_REFCNT_INCR	src/Topography/shapelib/mapserver.h	471;"	d
MS_REFCNT_INCR	src/Topography/shapelib/mapserver.h	476;"	d
MS_REFCNT_INCR	src/Topography/shapelib/mapserver.h	481;"	d
MS_REFCNT_INCR	src/Topography/shapelib/mapserver.h	486;"	d
MS_REFCNT_INIT	src/Topography/shapelib/mapserver.h	462;"	d
MS_REFCNT_INIT	src/Topography/shapelib/mapserver.h	469;"	d
MS_REFCNT_INIT	src/Topography/shapelib/mapserver.h	473;"	d
MS_REFCNT_INIT	src/Topography/shapelib/mapserver.h	478;"	d
MS_REFCNT_INIT	src/Topography/shapelib/mapserver.h	483;"	d
MS_REFCNT_INIT	src/Topography/shapelib/mapserver.h	488;"	d
MS_REGEX	src/Topography/shapelib/mapserver.h	307;"	d
MS_REGEXERR	src/Topography/shapelib/maperror.h	50;"	d
MS_RENDERERERR	src/Topography/shapelib/maperror.h	86;"	d
MS_RENDERER_CACHE	src/Topography/shapelib/mapserver.h	3248;"	d
MS_RENDERER_IMAGEMAP	src/Topography/shapelib/mapserver.h	420;"	d
MS_RENDERER_KML	src/Topography/shapelib/mapserver.h	422;"	d
MS_RENDERER_MVT	src/Topography/shapelib/mapserver.h	424;"	d
MS_RENDERER_OGR	src/Topography/shapelib/mapserver.h	423;"	d
MS_RENDERER_PLUGIN	src/Topography/shapelib/mapserver.h	426;"	d
MS_RENDERER_RAWDATA	src/Topography/shapelib/mapserver.h	419;"	d
MS_RENDERER_SWF	src/Topography/shapelib/mapserver.h	418;"	d
MS_RENDERER_TEMPLATE	src/Topography/shapelib/mapserver.h	421;"	d
MS_RENDER_MODE	src/Topography/shapelib/mapserver.h	/^  enum MS_RENDER_MODE {MS_FIRST_MATCHING_CLASS, MS_ALL_MATCHING_CLASSES};$/;"	g
MS_RENDER_WITH_AGG	src/Topography/shapelib/mapserver.h	411;"	d
MS_RENDER_WITH_CAIRO_PDF	src/Topography/shapelib/mapserver.h	408;"	d
MS_RENDER_WITH_CAIRO_RASTER	src/Topography/shapelib/mapserver.h	407;"	d
MS_RENDER_WITH_CAIRO_SVG	src/Topography/shapelib/mapserver.h	409;"	d
MS_RENDER_WITH_IMAGEMAP	src/Topography/shapelib/mapserver.h	402;"	d
MS_RENDER_WITH_KML	src/Topography/shapelib/mapserver.h	412;"	d
MS_RENDER_WITH_MVT	src/Topography/shapelib/mapserver.h	414;"	d
MS_RENDER_WITH_OGL	src/Topography/shapelib/mapserver.h	410;"	d
MS_RENDER_WITH_OGR	src/Topography/shapelib/mapserver.h	404;"	d
MS_RENDER_WITH_PLUGIN	src/Topography/shapelib/mapserver.h	406;"	d
MS_RENDER_WITH_RAWDATA	src/Topography/shapelib/mapserver.h	401;"	d
MS_RENDER_WITH_SWF	src/Topography/shapelib/mapserver.h	400;"	d
MS_RENDER_WITH_TEMPLATE	src/Topography/shapelib/mapserver.h	403;"	d
MS_RENDER_WITH_UTFGRID	src/Topography/shapelib/mapserver.h	413;"	d
MS_RESULTCACHEINCREMENT	src/Topography/shapelib/mapserver.h	301;"	d
MS_RESULTCACHEINITSIZE	src/Topography/shapelib/mapserver.h	300;"	d
MS_RETURN_VALUE	src/Topography/shapelib/mapserver.h	/^  enum MS_RETURN_VALUE {MS_SUCCESS, MS_FAILURE, MS_DONE};$/;"	g
MS_SELECTED	src/Topography/shapelib/mapserver.h	/^  enum MS_QUERYMAP_STYLES {MS_NORMAL, MS_HILITE, MS_SELECTED};$/;"	e	enum:MS_QUERYMAP_STYLES
MS_SET_BIT	src/Topography/shapelib/mapserver.h	2474;"	d
MS_SGN	src/Topography/shapelib/mapserver.h	331;"	d
MS_SHAPEFILE	src/Topography/shapelib/mapserver.h	/^  enum MS_CONNECTION_TYPE {MS_INLINE, MS_SHAPEFILE, MS_TILED_SHAPEFILE, MS_UNUSED_2, MS_OGR, MS_UNUSED_1, MS_POSTGIS, MS_WMS, MS_ORACLESPATIAL, MS_WFS, MS_GRATICULE, MS_MYSQL, MS_RASTER, MS_PLUGIN, MS_UNION, MS_UVRASTER, MS_CONTOUR, MS_KERNELDENSITY };$/;"	e	enum:MS_CONNECTION_TYPE
MS_SHAPEFILE_ARC	src/Topography/shapelib/mapshape.h	75;"	d
MS_SHAPEFILE_MULTIPOINT	src/Topography/shapelib/mapshape.h	77;"	d
MS_SHAPEFILE_POINT	src/Topography/shapelib/mapshape.h	74;"	d
MS_SHAPEFILE_POLYGON	src/Topography/shapelib/mapshape.h	76;"	d
MS_SHAPE_LINE	src/Topography/shapelib/mapserver.h	/^  enum MS_SHAPE_TYPE {MS_SHAPE_POINT, MS_SHAPE_LINE, MS_SHAPE_POLYGON, MS_SHAPE_NULL};$/;"	e	enum:MS_SHAPE_TYPE
MS_SHAPE_NULL	src/Topography/shapelib/mapserver.h	/^  enum MS_SHAPE_TYPE {MS_SHAPE_POINT, MS_SHAPE_LINE, MS_SHAPE_POLYGON, MS_SHAPE_NULL};$/;"	e	enum:MS_SHAPE_TYPE
MS_SHAPE_POINT	src/Topography/shapelib/mapserver.h	/^  enum MS_SHAPE_TYPE {MS_SHAPE_POINT, MS_SHAPE_LINE, MS_SHAPE_POLYGON, MS_SHAPE_NULL};$/;"	e	enum:MS_SHAPE_TYPE
MS_SHAPE_POLYGON	src/Topography/shapelib/mapserver.h	/^  enum MS_SHAPE_TYPE {MS_SHAPE_POINT, MS_SHAPE_LINE, MS_SHAPE_POLYGON, MS_SHAPE_NULL};$/;"	e	enum:MS_SHAPE_TYPE
MS_SHAPE_TYPE	src/Topography/shapelib/mapserver.h	/^  enum MS_SHAPE_TYPE {MS_SHAPE_POINT, MS_SHAPE_LINE, MS_SHAPE_POLYGON, MS_SHAPE_NULL};$/;"	g
MS_SHPERR	src/Topography/shapelib/maperror.h	63;"	d
MS_SHP_ARCM	src/Topography/shapelib/mapshape.h	85;"	d
MS_SHP_ARCZ	src/Topography/shapelib/mapshape.h	80;"	d
MS_SHP_MULTIPOINTM	src/Topography/shapelib/mapshape.h	87;"	d
MS_SHP_MULTIPOINTZ	src/Topography/shapelib/mapshape.h	82;"	d
MS_SHP_POINTM	src/Topography/shapelib/mapshape.h	84;"	d
MS_SHP_POINTZ	src/Topography/shapelib/mapshape.h	79;"	d
MS_SHP_POLYGONM	src/Topography/shapelib/mapshape.h	86;"	d
MS_SHP_POLYGONZ	src/Topography/shapelib/mapshape.h	81;"	d
MS_SINGLE	src/Topography/shapelib/mapserver.h	523;"	d
MS_SMALL	src/Topography/shapelib/mapserver.h	513;"	d
MS_SOSERR	src/Topography/shapelib/maperror.h	81;"	d
MS_STRING	src/Topography/shapelib/mapserver.h	308;"	d
MS_STRING_IS_NULL_OR_EMPTY	src/Topography/shapelib/mapserver.h	333;"	d
MS_STRIPENDSPACES	src/Topography/shapelib/mapserver.h	322;"	d
MS_STRIPLEADSPACES	src/Topography/shapelib/mapserver.h	321;"	d
MS_STYLE_ALLOCSIZE	src/Topography/shapelib/mapserver.h	234;"	d
MS_STYLE_BINDING_ANGLE	src/Topography/shapelib/mapserver.h	/^  enum MS_STYLE_BINDING_ENUM { MS_STYLE_BINDING_SIZE, MS_STYLE_BINDING_WIDTH, MS_STYLE_BINDING_ANGLE, MS_STYLE_BINDING_COLOR, MS_STYLE_BINDING_OUTLINECOLOR, MS_STYLE_BINDING_SYMBOL, MS_STYLE_BINDING_OUTLINEWIDTH, MS_STYLE_BINDING_OPACITY, MS_STYLE_BINDING_OFFSET_X, MS_STYLE_BINDING_OFFSET_Y, MS_STYLE_BINDING_POLAROFFSET_PIXEL, MS_STYLE_BINDING_POLAROFFSET_ANGLE };$/;"	e	enum:MS_STYLE_BINDING_ENUM
MS_STYLE_BINDING_COLOR	src/Topography/shapelib/mapserver.h	/^  enum MS_STYLE_BINDING_ENUM { MS_STYLE_BINDING_SIZE, MS_STYLE_BINDING_WIDTH, MS_STYLE_BINDING_ANGLE, MS_STYLE_BINDING_COLOR, MS_STYLE_BINDING_OUTLINECOLOR, MS_STYLE_BINDING_SYMBOL, MS_STYLE_BINDING_OUTLINEWIDTH, MS_STYLE_BINDING_OPACITY, MS_STYLE_BINDING_OFFSET_X, MS_STYLE_BINDING_OFFSET_Y, MS_STYLE_BINDING_POLAROFFSET_PIXEL, MS_STYLE_BINDING_POLAROFFSET_ANGLE };$/;"	e	enum:MS_STYLE_BINDING_ENUM
MS_STYLE_BINDING_ENUM	src/Topography/shapelib/mapserver.h	/^  enum MS_STYLE_BINDING_ENUM { MS_STYLE_BINDING_SIZE, MS_STYLE_BINDING_WIDTH, MS_STYLE_BINDING_ANGLE, MS_STYLE_BINDING_COLOR, MS_STYLE_BINDING_OUTLINECOLOR, MS_STYLE_BINDING_SYMBOL, MS_STYLE_BINDING_OUTLINEWIDTH, MS_STYLE_BINDING_OPACITY, MS_STYLE_BINDING_OFFSET_X, MS_STYLE_BINDING_OFFSET_Y, MS_STYLE_BINDING_POLAROFFSET_PIXEL, MS_STYLE_BINDING_POLAROFFSET_ANGLE };$/;"	g
MS_STYLE_BINDING_LENGTH	src/Topography/shapelib/mapserver.h	641;"	d
MS_STYLE_BINDING_OFFSET_X	src/Topography/shapelib/mapserver.h	/^  enum MS_STYLE_BINDING_ENUM { MS_STYLE_BINDING_SIZE, MS_STYLE_BINDING_WIDTH, MS_STYLE_BINDING_ANGLE, MS_STYLE_BINDING_COLOR, MS_STYLE_BINDING_OUTLINECOLOR, MS_STYLE_BINDING_SYMBOL, MS_STYLE_BINDING_OUTLINEWIDTH, MS_STYLE_BINDING_OPACITY, MS_STYLE_BINDING_OFFSET_X, MS_STYLE_BINDING_OFFSET_Y, MS_STYLE_BINDING_POLAROFFSET_PIXEL, MS_STYLE_BINDING_POLAROFFSET_ANGLE };$/;"	e	enum:MS_STYLE_BINDING_ENUM
MS_STYLE_BINDING_OFFSET_Y	src/Topography/shapelib/mapserver.h	/^  enum MS_STYLE_BINDING_ENUM { MS_STYLE_BINDING_SIZE, MS_STYLE_BINDING_WIDTH, MS_STYLE_BINDING_ANGLE, MS_STYLE_BINDING_COLOR, MS_STYLE_BINDING_OUTLINECOLOR, MS_STYLE_BINDING_SYMBOL, MS_STYLE_BINDING_OUTLINEWIDTH, MS_STYLE_BINDING_OPACITY, MS_STYLE_BINDING_OFFSET_X, MS_STYLE_BINDING_OFFSET_Y, MS_STYLE_BINDING_POLAROFFSET_PIXEL, MS_STYLE_BINDING_POLAROFFSET_ANGLE };$/;"	e	enum:MS_STYLE_BINDING_ENUM
MS_STYLE_BINDING_OPACITY	src/Topography/shapelib/mapserver.h	/^  enum MS_STYLE_BINDING_ENUM { MS_STYLE_BINDING_SIZE, MS_STYLE_BINDING_WIDTH, MS_STYLE_BINDING_ANGLE, MS_STYLE_BINDING_COLOR, MS_STYLE_BINDING_OUTLINECOLOR, MS_STYLE_BINDING_SYMBOL, MS_STYLE_BINDING_OUTLINEWIDTH, MS_STYLE_BINDING_OPACITY, MS_STYLE_BINDING_OFFSET_X, MS_STYLE_BINDING_OFFSET_Y, MS_STYLE_BINDING_POLAROFFSET_PIXEL, MS_STYLE_BINDING_POLAROFFSET_ANGLE };$/;"	e	enum:MS_STYLE_BINDING_ENUM
MS_STYLE_BINDING_OUTLINECOLOR	src/Topography/shapelib/mapserver.h	/^  enum MS_STYLE_BINDING_ENUM { MS_STYLE_BINDING_SIZE, MS_STYLE_BINDING_WIDTH, MS_STYLE_BINDING_ANGLE, MS_STYLE_BINDING_COLOR, MS_STYLE_BINDING_OUTLINECOLOR, MS_STYLE_BINDING_SYMBOL, MS_STYLE_BINDING_OUTLINEWIDTH, MS_STYLE_BINDING_OPACITY, MS_STYLE_BINDING_OFFSET_X, MS_STYLE_BINDING_OFFSET_Y, MS_STYLE_BINDING_POLAROFFSET_PIXEL, MS_STYLE_BINDING_POLAROFFSET_ANGLE };$/;"	e	enum:MS_STYLE_BINDING_ENUM
MS_STYLE_BINDING_OUTLINEWIDTH	src/Topography/shapelib/mapserver.h	/^  enum MS_STYLE_BINDING_ENUM { MS_STYLE_BINDING_SIZE, MS_STYLE_BINDING_WIDTH, MS_STYLE_BINDING_ANGLE, MS_STYLE_BINDING_COLOR, MS_STYLE_BINDING_OUTLINECOLOR, MS_STYLE_BINDING_SYMBOL, MS_STYLE_BINDING_OUTLINEWIDTH, MS_STYLE_BINDING_OPACITY, MS_STYLE_BINDING_OFFSET_X, MS_STYLE_BINDING_OFFSET_Y, MS_STYLE_BINDING_POLAROFFSET_PIXEL, MS_STYLE_BINDING_POLAROFFSET_ANGLE };$/;"	e	enum:MS_STYLE_BINDING_ENUM
MS_STYLE_BINDING_POLAROFFSET_ANGLE	src/Topography/shapelib/mapserver.h	/^  enum MS_STYLE_BINDING_ENUM { MS_STYLE_BINDING_SIZE, MS_STYLE_BINDING_WIDTH, MS_STYLE_BINDING_ANGLE, MS_STYLE_BINDING_COLOR, MS_STYLE_BINDING_OUTLINECOLOR, MS_STYLE_BINDING_SYMBOL, MS_STYLE_BINDING_OUTLINEWIDTH, MS_STYLE_BINDING_OPACITY, MS_STYLE_BINDING_OFFSET_X, MS_STYLE_BINDING_OFFSET_Y, MS_STYLE_BINDING_POLAROFFSET_PIXEL, MS_STYLE_BINDING_POLAROFFSET_ANGLE };$/;"	e	enum:MS_STYLE_BINDING_ENUM
MS_STYLE_BINDING_POLAROFFSET_PIXEL	src/Topography/shapelib/mapserver.h	/^  enum MS_STYLE_BINDING_ENUM { MS_STYLE_BINDING_SIZE, MS_STYLE_BINDING_WIDTH, MS_STYLE_BINDING_ANGLE, MS_STYLE_BINDING_COLOR, MS_STYLE_BINDING_OUTLINECOLOR, MS_STYLE_BINDING_SYMBOL, MS_STYLE_BINDING_OUTLINEWIDTH, MS_STYLE_BINDING_OPACITY, MS_STYLE_BINDING_OFFSET_X, MS_STYLE_BINDING_OFFSET_Y, MS_STYLE_BINDING_POLAROFFSET_PIXEL, MS_STYLE_BINDING_POLAROFFSET_ANGLE };$/;"	e	enum:MS_STYLE_BINDING_ENUM
MS_STYLE_BINDING_SIZE	src/Topography/shapelib/mapserver.h	/^  enum MS_STYLE_BINDING_ENUM { MS_STYLE_BINDING_SIZE, MS_STYLE_BINDING_WIDTH, MS_STYLE_BINDING_ANGLE, MS_STYLE_BINDING_COLOR, MS_STYLE_BINDING_OUTLINECOLOR, MS_STYLE_BINDING_SYMBOL, MS_STYLE_BINDING_OUTLINEWIDTH, MS_STYLE_BINDING_OPACITY, MS_STYLE_BINDING_OFFSET_X, MS_STYLE_BINDING_OFFSET_Y, MS_STYLE_BINDING_POLAROFFSET_PIXEL, MS_STYLE_BINDING_POLAROFFSET_ANGLE };$/;"	e	enum:MS_STYLE_BINDING_ENUM
MS_STYLE_BINDING_SYMBOL	src/Topography/shapelib/mapserver.h	/^  enum MS_STYLE_BINDING_ENUM { MS_STYLE_BINDING_SIZE, MS_STYLE_BINDING_WIDTH, MS_STYLE_BINDING_ANGLE, MS_STYLE_BINDING_COLOR, MS_STYLE_BINDING_OUTLINECOLOR, MS_STYLE_BINDING_SYMBOL, MS_STYLE_BINDING_OUTLINEWIDTH, MS_STYLE_BINDING_OPACITY, MS_STYLE_BINDING_OFFSET_X, MS_STYLE_BINDING_OFFSET_Y, MS_STYLE_BINDING_POLAROFFSET_PIXEL, MS_STYLE_BINDING_POLAROFFSET_ANGLE };$/;"	e	enum:MS_STYLE_BINDING_ENUM
MS_STYLE_BINDING_WIDTH	src/Topography/shapelib/mapserver.h	/^  enum MS_STYLE_BINDING_ENUM { MS_STYLE_BINDING_SIZE, MS_STYLE_BINDING_WIDTH, MS_STYLE_BINDING_ANGLE, MS_STYLE_BINDING_COLOR, MS_STYLE_BINDING_OUTLINECOLOR, MS_STYLE_BINDING_SYMBOL, MS_STYLE_BINDING_OUTLINEWIDTH, MS_STYLE_BINDING_OPACITY, MS_STYLE_BINDING_OFFSET_X, MS_STYLE_BINDING_OFFSET_Y, MS_STYLE_BINDING_POLAROFFSET_PIXEL, MS_STYLE_BINDING_POLAROFFSET_ANGLE };$/;"	e	enum:MS_STYLE_BINDING_ENUM
MS_STYLE_DOUBLE_SIDED_OFFSET	src/Topography/shapelib/mapserver.h	1050;"	d
MS_STYLE_SINGLE_SIDED_OFFSET	src/Topography/shapelib/mapserver.h	1049;"	d
MS_SUCCESS	src/Topography/shapelib/mapserver.h	/^  enum MS_RETURN_VALUE {MS_SUCCESS, MS_FAILURE, MS_DONE};$/;"	e	enum:MS_RETURN_VALUE
MS_SYMERR	src/Topography/shapelib/maperror.h	49;"	d
MS_TEMPLATE_EXPR	src/Topography/shapelib/mapserver.h	251;"	d
MS_TEMPLATE_MAGIC_STRING	src/Topography/shapelib/mapserver.h	250;"	d
MS_TILED_SHAPEFILE	src/Topography/shapelib/mapserver.h	/^  enum MS_CONNECTION_TYPE {MS_INLINE, MS_SHAPEFILE, MS_TILED_SHAPEFILE, MS_UNUSED_2, MS_OGR, MS_UNUSED_1, MS_POSTGIS, MS_WMS, MS_ORACLESPATIAL, MS_WFS, MS_GRATICULE, MS_MYSQL, MS_RASTER, MS_PLUGIN, MS_UNION, MS_UVRASTER, MS_CONTOUR, MS_KERNELDENSITY };$/;"	e	enum:MS_CONNECTION_TYPE
MS_TIMEERR	src/Topography/shapelib/maperror.h	79;"	d
MS_TINY	src/Topography/shapelib/mapserver.h	512;"	d
MS_TOKEN_BINDING_DATA_CELLSIZE	src/Topography/shapelib/mapserver.h	/^  enum MS_TOKEN_BINDING_ENUM { MS_TOKEN_BINDING_DOUBLE=370, MS_TOKEN_BINDING_INTEGER, MS_TOKEN_BINDING_STRING, MS_TOKEN_BINDING_TIME, MS_TOKEN_BINDING_SHAPE, MS_TOKEN_BINDING_MAP_CELLSIZE, MS_TOKEN_BINDING_DATA_CELLSIZE };$/;"	e	enum:MS_TOKEN_BINDING_ENUM
MS_TOKEN_BINDING_DOUBLE	src/Topography/shapelib/mapserver.h	/^  enum MS_TOKEN_BINDING_ENUM { MS_TOKEN_BINDING_DOUBLE=370, MS_TOKEN_BINDING_INTEGER, MS_TOKEN_BINDING_STRING, MS_TOKEN_BINDING_TIME, MS_TOKEN_BINDING_SHAPE, MS_TOKEN_BINDING_MAP_CELLSIZE, MS_TOKEN_BINDING_DATA_CELLSIZE };$/;"	e	enum:MS_TOKEN_BINDING_ENUM
MS_TOKEN_BINDING_ENUM	src/Topography/shapelib/mapserver.h	/^  enum MS_TOKEN_BINDING_ENUM { MS_TOKEN_BINDING_DOUBLE=370, MS_TOKEN_BINDING_INTEGER, MS_TOKEN_BINDING_STRING, MS_TOKEN_BINDING_TIME, MS_TOKEN_BINDING_SHAPE, MS_TOKEN_BINDING_MAP_CELLSIZE, MS_TOKEN_BINDING_DATA_CELLSIZE };$/;"	g
MS_TOKEN_BINDING_INTEGER	src/Topography/shapelib/mapserver.h	/^  enum MS_TOKEN_BINDING_ENUM { MS_TOKEN_BINDING_DOUBLE=370, MS_TOKEN_BINDING_INTEGER, MS_TOKEN_BINDING_STRING, MS_TOKEN_BINDING_TIME, MS_TOKEN_BINDING_SHAPE, MS_TOKEN_BINDING_MAP_CELLSIZE, MS_TOKEN_BINDING_DATA_CELLSIZE };$/;"	e	enum:MS_TOKEN_BINDING_ENUM
MS_TOKEN_BINDING_MAP_CELLSIZE	src/Topography/shapelib/mapserver.h	/^  enum MS_TOKEN_BINDING_ENUM { MS_TOKEN_BINDING_DOUBLE=370, MS_TOKEN_BINDING_INTEGER, MS_TOKEN_BINDING_STRING, MS_TOKEN_BINDING_TIME, MS_TOKEN_BINDING_SHAPE, MS_TOKEN_BINDING_MAP_CELLSIZE, MS_TOKEN_BINDING_DATA_CELLSIZE };$/;"	e	enum:MS_TOKEN_BINDING_ENUM
MS_TOKEN_BINDING_SHAPE	src/Topography/shapelib/mapserver.h	/^  enum MS_TOKEN_BINDING_ENUM { MS_TOKEN_BINDING_DOUBLE=370, MS_TOKEN_BINDING_INTEGER, MS_TOKEN_BINDING_STRING, MS_TOKEN_BINDING_TIME, MS_TOKEN_BINDING_SHAPE, MS_TOKEN_BINDING_MAP_CELLSIZE, MS_TOKEN_BINDING_DATA_CELLSIZE };$/;"	e	enum:MS_TOKEN_BINDING_ENUM
MS_TOKEN_BINDING_STRING	src/Topography/shapelib/mapserver.h	/^  enum MS_TOKEN_BINDING_ENUM { MS_TOKEN_BINDING_DOUBLE=370, MS_TOKEN_BINDING_INTEGER, MS_TOKEN_BINDING_STRING, MS_TOKEN_BINDING_TIME, MS_TOKEN_BINDING_SHAPE, MS_TOKEN_BINDING_MAP_CELLSIZE, MS_TOKEN_BINDING_DATA_CELLSIZE };$/;"	e	enum:MS_TOKEN_BINDING_ENUM
MS_TOKEN_BINDING_TIME	src/Topography/shapelib/mapserver.h	/^  enum MS_TOKEN_BINDING_ENUM { MS_TOKEN_BINDING_DOUBLE=370, MS_TOKEN_BINDING_INTEGER, MS_TOKEN_BINDING_STRING, MS_TOKEN_BINDING_TIME, MS_TOKEN_BINDING_SHAPE, MS_TOKEN_BINDING_MAP_CELLSIZE, MS_TOKEN_BINDING_DATA_CELLSIZE };$/;"	e	enum:MS_TOKEN_BINDING_ENUM
MS_TOKEN_COMPARISON_BEYOND	src/Topography/shapelib/mapserver.h	/^    MS_TOKEN_COMPARISON_INTERSECTS, MS_TOKEN_COMPARISON_DISJOINT, MS_TOKEN_COMPARISON_TOUCHES, MS_TOKEN_COMPARISON_OVERLAPS, MS_TOKEN_COMPARISON_CROSSES, MS_TOKEN_COMPARISON_WITHIN, MS_TOKEN_COMPARISON_CONTAINS, MS_TOKEN_COMPARISON_EQUALS, MS_TOKEN_COMPARISON_BEYOND, MS_TOKEN_COMPARISON_DWITHIN$/;"	e	enum:MS_TOKEN_COMPARISON_ENUM
MS_TOKEN_COMPARISON_CONTAINS	src/Topography/shapelib/mapserver.h	/^    MS_TOKEN_COMPARISON_INTERSECTS, MS_TOKEN_COMPARISON_DISJOINT, MS_TOKEN_COMPARISON_TOUCHES, MS_TOKEN_COMPARISON_OVERLAPS, MS_TOKEN_COMPARISON_CROSSES, MS_TOKEN_COMPARISON_WITHIN, MS_TOKEN_COMPARISON_CONTAINS, MS_TOKEN_COMPARISON_EQUALS, MS_TOKEN_COMPARISON_BEYOND, MS_TOKEN_COMPARISON_DWITHIN$/;"	e	enum:MS_TOKEN_COMPARISON_ENUM
MS_TOKEN_COMPARISON_CROSSES	src/Topography/shapelib/mapserver.h	/^    MS_TOKEN_COMPARISON_INTERSECTS, MS_TOKEN_COMPARISON_DISJOINT, MS_TOKEN_COMPARISON_TOUCHES, MS_TOKEN_COMPARISON_OVERLAPS, MS_TOKEN_COMPARISON_CROSSES, MS_TOKEN_COMPARISON_WITHIN, MS_TOKEN_COMPARISON_CONTAINS, MS_TOKEN_COMPARISON_EQUALS, MS_TOKEN_COMPARISON_BEYOND, MS_TOKEN_COMPARISON_DWITHIN$/;"	e	enum:MS_TOKEN_COMPARISON_ENUM
MS_TOKEN_COMPARISON_DISJOINT	src/Topography/shapelib/mapserver.h	/^    MS_TOKEN_COMPARISON_INTERSECTS, MS_TOKEN_COMPARISON_DISJOINT, MS_TOKEN_COMPARISON_TOUCHES, MS_TOKEN_COMPARISON_OVERLAPS, MS_TOKEN_COMPARISON_CROSSES, MS_TOKEN_COMPARISON_WITHIN, MS_TOKEN_COMPARISON_CONTAINS, MS_TOKEN_COMPARISON_EQUALS, MS_TOKEN_COMPARISON_BEYOND, MS_TOKEN_COMPARISON_DWITHIN$/;"	e	enum:MS_TOKEN_COMPARISON_ENUM
MS_TOKEN_COMPARISON_DWITHIN	src/Topography/shapelib/mapserver.h	/^    MS_TOKEN_COMPARISON_INTERSECTS, MS_TOKEN_COMPARISON_DISJOINT, MS_TOKEN_COMPARISON_TOUCHES, MS_TOKEN_COMPARISON_OVERLAPS, MS_TOKEN_COMPARISON_CROSSES, MS_TOKEN_COMPARISON_WITHIN, MS_TOKEN_COMPARISON_CONTAINS, MS_TOKEN_COMPARISON_EQUALS, MS_TOKEN_COMPARISON_BEYOND, MS_TOKEN_COMPARISON_DWITHIN$/;"	e	enum:MS_TOKEN_COMPARISON_ENUM
MS_TOKEN_COMPARISON_ENUM	src/Topography/shapelib/mapserver.h	/^  enum MS_TOKEN_COMPARISON_ENUM {$/;"	g
MS_TOKEN_COMPARISON_EQ	src/Topography/shapelib/mapserver.h	/^    MS_TOKEN_COMPARISON_EQ=320, MS_TOKEN_COMPARISON_NE, MS_TOKEN_COMPARISON_GT, MS_TOKEN_COMPARISON_LT, MS_TOKEN_COMPARISON_LE, MS_TOKEN_COMPARISON_GE, MS_TOKEN_COMPARISON_IEQ,$/;"	e	enum:MS_TOKEN_COMPARISON_ENUM
MS_TOKEN_COMPARISON_EQUALS	src/Topography/shapelib/mapserver.h	/^    MS_TOKEN_COMPARISON_INTERSECTS, MS_TOKEN_COMPARISON_DISJOINT, MS_TOKEN_COMPARISON_TOUCHES, MS_TOKEN_COMPARISON_OVERLAPS, MS_TOKEN_COMPARISON_CROSSES, MS_TOKEN_COMPARISON_WITHIN, MS_TOKEN_COMPARISON_CONTAINS, MS_TOKEN_COMPARISON_EQUALS, MS_TOKEN_COMPARISON_BEYOND, MS_TOKEN_COMPARISON_DWITHIN$/;"	e	enum:MS_TOKEN_COMPARISON_ENUM
MS_TOKEN_COMPARISON_GE	src/Topography/shapelib/mapserver.h	/^    MS_TOKEN_COMPARISON_EQ=320, MS_TOKEN_COMPARISON_NE, MS_TOKEN_COMPARISON_GT, MS_TOKEN_COMPARISON_LT, MS_TOKEN_COMPARISON_LE, MS_TOKEN_COMPARISON_GE, MS_TOKEN_COMPARISON_IEQ,$/;"	e	enum:MS_TOKEN_COMPARISON_ENUM
MS_TOKEN_COMPARISON_GT	src/Topography/shapelib/mapserver.h	/^    MS_TOKEN_COMPARISON_EQ=320, MS_TOKEN_COMPARISON_NE, MS_TOKEN_COMPARISON_GT, MS_TOKEN_COMPARISON_LT, MS_TOKEN_COMPARISON_LE, MS_TOKEN_COMPARISON_GE, MS_TOKEN_COMPARISON_IEQ,$/;"	e	enum:MS_TOKEN_COMPARISON_ENUM
MS_TOKEN_COMPARISON_IEQ	src/Topography/shapelib/mapserver.h	/^    MS_TOKEN_COMPARISON_EQ=320, MS_TOKEN_COMPARISON_NE, MS_TOKEN_COMPARISON_GT, MS_TOKEN_COMPARISON_LT, MS_TOKEN_COMPARISON_LE, MS_TOKEN_COMPARISON_GE, MS_TOKEN_COMPARISON_IEQ,$/;"	e	enum:MS_TOKEN_COMPARISON_ENUM
MS_TOKEN_COMPARISON_IN	src/Topography/shapelib/mapserver.h	/^    MS_TOKEN_COMPARISON_IN, MS_TOKEN_COMPARISON_LIKE,$/;"	e	enum:MS_TOKEN_COMPARISON_ENUM
MS_TOKEN_COMPARISON_INTERSECTS	src/Topography/shapelib/mapserver.h	/^    MS_TOKEN_COMPARISON_INTERSECTS, MS_TOKEN_COMPARISON_DISJOINT, MS_TOKEN_COMPARISON_TOUCHES, MS_TOKEN_COMPARISON_OVERLAPS, MS_TOKEN_COMPARISON_CROSSES, MS_TOKEN_COMPARISON_WITHIN, MS_TOKEN_COMPARISON_CONTAINS, MS_TOKEN_COMPARISON_EQUALS, MS_TOKEN_COMPARISON_BEYOND, MS_TOKEN_COMPARISON_DWITHIN$/;"	e	enum:MS_TOKEN_COMPARISON_ENUM
MS_TOKEN_COMPARISON_IRE	src/Topography/shapelib/mapserver.h	/^    MS_TOKEN_COMPARISON_RE, MS_TOKEN_COMPARISON_IRE,$/;"	e	enum:MS_TOKEN_COMPARISON_ENUM
MS_TOKEN_COMPARISON_LE	src/Topography/shapelib/mapserver.h	/^    MS_TOKEN_COMPARISON_EQ=320, MS_TOKEN_COMPARISON_NE, MS_TOKEN_COMPARISON_GT, MS_TOKEN_COMPARISON_LT, MS_TOKEN_COMPARISON_LE, MS_TOKEN_COMPARISON_GE, MS_TOKEN_COMPARISON_IEQ,$/;"	e	enum:MS_TOKEN_COMPARISON_ENUM
MS_TOKEN_COMPARISON_LIKE	src/Topography/shapelib/mapserver.h	/^    MS_TOKEN_COMPARISON_IN, MS_TOKEN_COMPARISON_LIKE,$/;"	e	enum:MS_TOKEN_COMPARISON_ENUM
MS_TOKEN_COMPARISON_LT	src/Topography/shapelib/mapserver.h	/^    MS_TOKEN_COMPARISON_EQ=320, MS_TOKEN_COMPARISON_NE, MS_TOKEN_COMPARISON_GT, MS_TOKEN_COMPARISON_LT, MS_TOKEN_COMPARISON_LE, MS_TOKEN_COMPARISON_GE, MS_TOKEN_COMPARISON_IEQ,$/;"	e	enum:MS_TOKEN_COMPARISON_ENUM
MS_TOKEN_COMPARISON_NE	src/Topography/shapelib/mapserver.h	/^    MS_TOKEN_COMPARISON_EQ=320, MS_TOKEN_COMPARISON_NE, MS_TOKEN_COMPARISON_GT, MS_TOKEN_COMPARISON_LT, MS_TOKEN_COMPARISON_LE, MS_TOKEN_COMPARISON_GE, MS_TOKEN_COMPARISON_IEQ,$/;"	e	enum:MS_TOKEN_COMPARISON_ENUM
MS_TOKEN_COMPARISON_OVERLAPS	src/Topography/shapelib/mapserver.h	/^    MS_TOKEN_COMPARISON_INTERSECTS, MS_TOKEN_COMPARISON_DISJOINT, MS_TOKEN_COMPARISON_TOUCHES, MS_TOKEN_COMPARISON_OVERLAPS, MS_TOKEN_COMPARISON_CROSSES, MS_TOKEN_COMPARISON_WITHIN, MS_TOKEN_COMPARISON_CONTAINS, MS_TOKEN_COMPARISON_EQUALS, MS_TOKEN_COMPARISON_BEYOND, MS_TOKEN_COMPARISON_DWITHIN$/;"	e	enum:MS_TOKEN_COMPARISON_ENUM
MS_TOKEN_COMPARISON_RE	src/Topography/shapelib/mapserver.h	/^    MS_TOKEN_COMPARISON_RE, MS_TOKEN_COMPARISON_IRE,$/;"	e	enum:MS_TOKEN_COMPARISON_ENUM
MS_TOKEN_COMPARISON_TOUCHES	src/Topography/shapelib/mapserver.h	/^    MS_TOKEN_COMPARISON_INTERSECTS, MS_TOKEN_COMPARISON_DISJOINT, MS_TOKEN_COMPARISON_TOUCHES, MS_TOKEN_COMPARISON_OVERLAPS, MS_TOKEN_COMPARISON_CROSSES, MS_TOKEN_COMPARISON_WITHIN, MS_TOKEN_COMPARISON_CONTAINS, MS_TOKEN_COMPARISON_EQUALS, MS_TOKEN_COMPARISON_BEYOND, MS_TOKEN_COMPARISON_DWITHIN$/;"	e	enum:MS_TOKEN_COMPARISON_ENUM
MS_TOKEN_COMPARISON_WITHIN	src/Topography/shapelib/mapserver.h	/^    MS_TOKEN_COMPARISON_INTERSECTS, MS_TOKEN_COMPARISON_DISJOINT, MS_TOKEN_COMPARISON_TOUCHES, MS_TOKEN_COMPARISON_OVERLAPS, MS_TOKEN_COMPARISON_CROSSES, MS_TOKEN_COMPARISON_WITHIN, MS_TOKEN_COMPARISON_CONTAINS, MS_TOKEN_COMPARISON_EQUALS, MS_TOKEN_COMPARISON_BEYOND, MS_TOKEN_COMPARISON_DWITHIN$/;"	e	enum:MS_TOKEN_COMPARISON_ENUM
MS_TOKEN_FUNCTION_AREA	src/Topography/shapelib/mapserver.h	/^    MS_TOKEN_FUNCTION_LENGTH=350, MS_TOKEN_FUNCTION_TOSTRING, MS_TOKEN_FUNCTION_COMMIFY, MS_TOKEN_FUNCTION_AREA, MS_TOKEN_FUNCTION_ROUND, MS_TOKEN_FUNCTION_FROMTEXT,$/;"	e	enum:MS_TOKEN_FUNCTION_ENUM
MS_TOKEN_FUNCTION_BUFFER	src/Topography/shapelib/mapserver.h	/^    MS_TOKEN_FUNCTION_BUFFER, MS_TOKEN_FUNCTION_DIFFERENCE, MS_TOKEN_FUNCTION_SIMPLIFY, MS_TOKEN_FUNCTION_SIMPLIFYPT, MS_TOKEN_FUNCTION_GENERALIZE, MS_TOKEN_FUNCTION_SMOOTHSIA, MS_TOKEN_FUNCTION_JAVASCRIPT,$/;"	e	enum:MS_TOKEN_FUNCTION_ENUM
MS_TOKEN_FUNCTION_COMMIFY	src/Topography/shapelib/mapserver.h	/^    MS_TOKEN_FUNCTION_LENGTH=350, MS_TOKEN_FUNCTION_TOSTRING, MS_TOKEN_FUNCTION_COMMIFY, MS_TOKEN_FUNCTION_AREA, MS_TOKEN_FUNCTION_ROUND, MS_TOKEN_FUNCTION_FROMTEXT,$/;"	e	enum:MS_TOKEN_FUNCTION_ENUM
MS_TOKEN_FUNCTION_DIFFERENCE	src/Topography/shapelib/mapserver.h	/^    MS_TOKEN_FUNCTION_BUFFER, MS_TOKEN_FUNCTION_DIFFERENCE, MS_TOKEN_FUNCTION_SIMPLIFY, MS_TOKEN_FUNCTION_SIMPLIFYPT, MS_TOKEN_FUNCTION_GENERALIZE, MS_TOKEN_FUNCTION_SMOOTHSIA, MS_TOKEN_FUNCTION_JAVASCRIPT,$/;"	e	enum:MS_TOKEN_FUNCTION_ENUM
MS_TOKEN_FUNCTION_ENUM	src/Topography/shapelib/mapserver.h	/^  enum MS_TOKEN_FUNCTION_ENUM {$/;"	g
MS_TOKEN_FUNCTION_FIRSTCAP	src/Topography/shapelib/mapserver.h	/^    MS_TOKEN_FUNCTION_UPPER, MS_TOKEN_FUNCTION_LOWER, MS_TOKEN_FUNCTION_INITCAP, MS_TOKEN_FUNCTION_FIRSTCAP$/;"	e	enum:MS_TOKEN_FUNCTION_ENUM
MS_TOKEN_FUNCTION_FROMTEXT	src/Topography/shapelib/mapserver.h	/^    MS_TOKEN_FUNCTION_LENGTH=350, MS_TOKEN_FUNCTION_TOSTRING, MS_TOKEN_FUNCTION_COMMIFY, MS_TOKEN_FUNCTION_AREA, MS_TOKEN_FUNCTION_ROUND, MS_TOKEN_FUNCTION_FROMTEXT,$/;"	e	enum:MS_TOKEN_FUNCTION_ENUM
MS_TOKEN_FUNCTION_GENERALIZE	src/Topography/shapelib/mapserver.h	/^    MS_TOKEN_FUNCTION_BUFFER, MS_TOKEN_FUNCTION_DIFFERENCE, MS_TOKEN_FUNCTION_SIMPLIFY, MS_TOKEN_FUNCTION_SIMPLIFYPT, MS_TOKEN_FUNCTION_GENERALIZE, MS_TOKEN_FUNCTION_SMOOTHSIA, MS_TOKEN_FUNCTION_JAVASCRIPT,$/;"	e	enum:MS_TOKEN_FUNCTION_ENUM
MS_TOKEN_FUNCTION_INITCAP	src/Topography/shapelib/mapserver.h	/^    MS_TOKEN_FUNCTION_UPPER, MS_TOKEN_FUNCTION_LOWER, MS_TOKEN_FUNCTION_INITCAP, MS_TOKEN_FUNCTION_FIRSTCAP$/;"	e	enum:MS_TOKEN_FUNCTION_ENUM
MS_TOKEN_FUNCTION_JAVASCRIPT	src/Topography/shapelib/mapserver.h	/^    MS_TOKEN_FUNCTION_BUFFER, MS_TOKEN_FUNCTION_DIFFERENCE, MS_TOKEN_FUNCTION_SIMPLIFY, MS_TOKEN_FUNCTION_SIMPLIFYPT, MS_TOKEN_FUNCTION_GENERALIZE, MS_TOKEN_FUNCTION_SMOOTHSIA, MS_TOKEN_FUNCTION_JAVASCRIPT,$/;"	e	enum:MS_TOKEN_FUNCTION_ENUM
MS_TOKEN_FUNCTION_LENGTH	src/Topography/shapelib/mapserver.h	/^    MS_TOKEN_FUNCTION_LENGTH=350, MS_TOKEN_FUNCTION_TOSTRING, MS_TOKEN_FUNCTION_COMMIFY, MS_TOKEN_FUNCTION_AREA, MS_TOKEN_FUNCTION_ROUND, MS_TOKEN_FUNCTION_FROMTEXT,$/;"	e	enum:MS_TOKEN_FUNCTION_ENUM
MS_TOKEN_FUNCTION_LOWER	src/Topography/shapelib/mapserver.h	/^    MS_TOKEN_FUNCTION_UPPER, MS_TOKEN_FUNCTION_LOWER, MS_TOKEN_FUNCTION_INITCAP, MS_TOKEN_FUNCTION_FIRSTCAP$/;"	e	enum:MS_TOKEN_FUNCTION_ENUM
MS_TOKEN_FUNCTION_ROUND	src/Topography/shapelib/mapserver.h	/^    MS_TOKEN_FUNCTION_LENGTH=350, MS_TOKEN_FUNCTION_TOSTRING, MS_TOKEN_FUNCTION_COMMIFY, MS_TOKEN_FUNCTION_AREA, MS_TOKEN_FUNCTION_ROUND, MS_TOKEN_FUNCTION_FROMTEXT,$/;"	e	enum:MS_TOKEN_FUNCTION_ENUM
MS_TOKEN_FUNCTION_SIMPLIFY	src/Topography/shapelib/mapserver.h	/^    MS_TOKEN_FUNCTION_BUFFER, MS_TOKEN_FUNCTION_DIFFERENCE, MS_TOKEN_FUNCTION_SIMPLIFY, MS_TOKEN_FUNCTION_SIMPLIFYPT, MS_TOKEN_FUNCTION_GENERALIZE, MS_TOKEN_FUNCTION_SMOOTHSIA, MS_TOKEN_FUNCTION_JAVASCRIPT,$/;"	e	enum:MS_TOKEN_FUNCTION_ENUM
MS_TOKEN_FUNCTION_SIMPLIFYPT	src/Topography/shapelib/mapserver.h	/^    MS_TOKEN_FUNCTION_BUFFER, MS_TOKEN_FUNCTION_DIFFERENCE, MS_TOKEN_FUNCTION_SIMPLIFY, MS_TOKEN_FUNCTION_SIMPLIFYPT, MS_TOKEN_FUNCTION_GENERALIZE, MS_TOKEN_FUNCTION_SMOOTHSIA, MS_TOKEN_FUNCTION_JAVASCRIPT,$/;"	e	enum:MS_TOKEN_FUNCTION_ENUM
MS_TOKEN_FUNCTION_SMOOTHSIA	src/Topography/shapelib/mapserver.h	/^    MS_TOKEN_FUNCTION_BUFFER, MS_TOKEN_FUNCTION_DIFFERENCE, MS_TOKEN_FUNCTION_SIMPLIFY, MS_TOKEN_FUNCTION_SIMPLIFYPT, MS_TOKEN_FUNCTION_GENERALIZE, MS_TOKEN_FUNCTION_SMOOTHSIA, MS_TOKEN_FUNCTION_JAVASCRIPT,$/;"	e	enum:MS_TOKEN_FUNCTION_ENUM
MS_TOKEN_FUNCTION_TOSTRING	src/Topography/shapelib/mapserver.h	/^    MS_TOKEN_FUNCTION_LENGTH=350, MS_TOKEN_FUNCTION_TOSTRING, MS_TOKEN_FUNCTION_COMMIFY, MS_TOKEN_FUNCTION_AREA, MS_TOKEN_FUNCTION_ROUND, MS_TOKEN_FUNCTION_FROMTEXT,$/;"	e	enum:MS_TOKEN_FUNCTION_ENUM
MS_TOKEN_FUNCTION_UPPER	src/Topography/shapelib/mapserver.h	/^    MS_TOKEN_FUNCTION_UPPER, MS_TOKEN_FUNCTION_LOWER, MS_TOKEN_FUNCTION_INITCAP, MS_TOKEN_FUNCTION_FIRSTCAP$/;"	e	enum:MS_TOKEN_FUNCTION_ENUM
MS_TOKEN_LITERAL_BOOLEAN	src/Topography/shapelib/mapserver.h	/^  enum MS_TOKEN_LITERAL_ENUM { MS_TOKEN_LITERAL_NUMBER=310, MS_TOKEN_LITERAL_STRING, MS_TOKEN_LITERAL_TIME, MS_TOKEN_LITERAL_SHAPE, MS_TOKEN_LITERAL_BOOLEAN };$/;"	e	enum:MS_TOKEN_LITERAL_ENUM
MS_TOKEN_LITERAL_ENUM	src/Topography/shapelib/mapserver.h	/^  enum MS_TOKEN_LITERAL_ENUM { MS_TOKEN_LITERAL_NUMBER=310, MS_TOKEN_LITERAL_STRING, MS_TOKEN_LITERAL_TIME, MS_TOKEN_LITERAL_SHAPE, MS_TOKEN_LITERAL_BOOLEAN };$/;"	g
MS_TOKEN_LITERAL_NUMBER	src/Topography/shapelib/mapserver.h	/^  enum MS_TOKEN_LITERAL_ENUM { MS_TOKEN_LITERAL_NUMBER=310, MS_TOKEN_LITERAL_STRING, MS_TOKEN_LITERAL_TIME, MS_TOKEN_LITERAL_SHAPE, MS_TOKEN_LITERAL_BOOLEAN };$/;"	e	enum:MS_TOKEN_LITERAL_ENUM
MS_TOKEN_LITERAL_SHAPE	src/Topography/shapelib/mapserver.h	/^  enum MS_TOKEN_LITERAL_ENUM { MS_TOKEN_LITERAL_NUMBER=310, MS_TOKEN_LITERAL_STRING, MS_TOKEN_LITERAL_TIME, MS_TOKEN_LITERAL_SHAPE, MS_TOKEN_LITERAL_BOOLEAN };$/;"	e	enum:MS_TOKEN_LITERAL_ENUM
MS_TOKEN_LITERAL_STRING	src/Topography/shapelib/mapserver.h	/^  enum MS_TOKEN_LITERAL_ENUM { MS_TOKEN_LITERAL_NUMBER=310, MS_TOKEN_LITERAL_STRING, MS_TOKEN_LITERAL_TIME, MS_TOKEN_LITERAL_SHAPE, MS_TOKEN_LITERAL_BOOLEAN };$/;"	e	enum:MS_TOKEN_LITERAL_ENUM
MS_TOKEN_LITERAL_TIME	src/Topography/shapelib/mapserver.h	/^  enum MS_TOKEN_LITERAL_ENUM { MS_TOKEN_LITERAL_NUMBER=310, MS_TOKEN_LITERAL_STRING, MS_TOKEN_LITERAL_TIME, MS_TOKEN_LITERAL_SHAPE, MS_TOKEN_LITERAL_BOOLEAN };$/;"	e	enum:MS_TOKEN_LITERAL_ENUM
MS_TOKEN_LOGICAL_AND	src/Topography/shapelib/mapserver.h	/^  enum MS_TOKEN_LOGICAL_ENUM { MS_TOKEN_LOGICAL_AND=300, MS_TOKEN_LOGICAL_OR, MS_TOKEN_LOGICAL_NOT };$/;"	e	enum:MS_TOKEN_LOGICAL_ENUM
MS_TOKEN_LOGICAL_ENUM	src/Topography/shapelib/mapserver.h	/^  enum MS_TOKEN_LOGICAL_ENUM { MS_TOKEN_LOGICAL_AND=300, MS_TOKEN_LOGICAL_OR, MS_TOKEN_LOGICAL_NOT };$/;"	g
MS_TOKEN_LOGICAL_NOT	src/Topography/shapelib/mapserver.h	/^  enum MS_TOKEN_LOGICAL_ENUM { MS_TOKEN_LOGICAL_AND=300, MS_TOKEN_LOGICAL_OR, MS_TOKEN_LOGICAL_NOT };$/;"	e	enum:MS_TOKEN_LOGICAL_ENUM
MS_TOKEN_LOGICAL_OR	src/Topography/shapelib/mapserver.h	/^  enum MS_TOKEN_LOGICAL_ENUM { MS_TOKEN_LOGICAL_AND=300, MS_TOKEN_LOGICAL_OR, MS_TOKEN_LOGICAL_NOT };$/;"	e	enum:MS_TOKEN_LOGICAL_ENUM
MS_TRANSFORM_FULLRESOLUTION	src/Topography/shapelib/mapserver.h	/^    MS_TRANSFORM_FULLRESOLUTION, \/* keep full resolution *\/$/;"	e	enum:MS_TRANSFORM_MODE
MS_TRANSFORM_MODE	src/Topography/shapelib/mapserver.h	/^  enum MS_TRANSFORM_MODE {$/;"	g
MS_TRANSFORM_NONE	src/Topography/shapelib/mapserver.h	/^    MS_TRANSFORM_NONE, \/* no geographic to pixel transformation *\/$/;"	e	enum:MS_TRANSFORM_MODE
MS_TRANSFORM_ROUND	src/Topography/shapelib/mapserver.h	/^    MS_TRANSFORM_ROUND, \/* round to integer, might create degenerate geometries (used for GD)*\/$/;"	e	enum:MS_TRANSFORM_MODE
MS_TRANSFORM_SIMPLIFY	src/Topography/shapelib/mapserver.h	/^    MS_TRANSFORM_SIMPLIFY \/* keep full resolution *\/$/;"	e	enum:MS_TRANSFORM_MODE
MS_TRANSFORM_SNAPTOGRID	src/Topography/shapelib/mapserver.h	/^    MS_TRANSFORM_SNAPTOGRID, \/* snap to a grid, should be user configurable in the future*\/$/;"	e	enum:MS_TRANSFORM_MODE
MS_TRANSPARENT_COLOR	src/Topography/shapelib/mapserver.h	383;"	d
MS_TRUE	src/Topography/shapelib/mapserver.h	217;"	d
MS_TRUETYPE	src/Topography/shapelib/mapserver.h	/^  enum MS_FONT_TYPE {MS_TRUETYPE, MS_BITMAP};$/;"	e	enum:MS_FONT_TYPE
MS_TTFERR	src/Topography/shapelib/maperror.h	51;"	d
MS_TYPEERR	src/Topography/shapelib/maperror.h	48;"	d
MS_UC	src/Topography/shapelib/mapserver.h	/^  enum MS_POSITIONS_ENUM {MS_UL=101, MS_LR, MS_UR, MS_LL, MS_CR, MS_CL, MS_UC, MS_LC, MS_CC, MS_AUTO, MS_XY, MS_NONE, MS_AUTO2,MS_FOLLOW};$/;"	e	enum:MS_POSITIONS_ENUM
MS_UL	src/Topography/shapelib/mapserver.h	/^  enum MS_POSITIONS_ENUM {MS_UL=101, MS_LR, MS_UR, MS_LL, MS_CR, MS_CL, MS_UC, MS_LC, MS_CC, MS_AUTO, MS_XY, MS_NONE, MS_AUTO2,MS_FOLLOW};$/;"	e	enum:MS_POSITIONS_ENUM
MS_UNION	src/Topography/shapelib/mapserver.h	/^  enum MS_CONNECTION_TYPE {MS_INLINE, MS_SHAPEFILE, MS_TILED_SHAPEFILE, MS_UNUSED_2, MS_OGR, MS_UNUSED_1, MS_POSTGIS, MS_WMS, MS_ORACLESPATIAL, MS_WFS, MS_GRATICULE, MS_MYSQL, MS_RASTER, MS_PLUGIN, MS_UNION, MS_UVRASTER, MS_CONTOUR, MS_KERNELDENSITY };$/;"	e	enum:MS_CONNECTION_TYPE
MS_UNITS	src/Topography/shapelib/mapserver.h	/^  enum MS_UNITS {MS_INCHES, MS_FEET, MS_MILES, MS_METERS, MS_KILOMETERS, MS_DD, MS_PIXELS, MS_PERCENTAGES, MS_NAUTICALMILES};$/;"	g
MS_UNKNOWN	src/Topography/shapelib/mapserver.h	219;"	d
MS_UNUSEDERR	src/Topography/shapelib/maperror.h	65;"	d
MS_UNUSED_1	src/Topography/shapelib/mapserver.h	/^  enum MS_CONNECTION_TYPE {MS_INLINE, MS_SHAPEFILE, MS_TILED_SHAPEFILE, MS_UNUSED_2, MS_OGR, MS_UNUSED_1, MS_POSTGIS, MS_WMS, MS_ORACLESPATIAL, MS_WFS, MS_GRATICULE, MS_MYSQL, MS_RASTER, MS_PLUGIN, MS_UNION, MS_UVRASTER, MS_CONTOUR, MS_KERNELDENSITY };$/;"	e	enum:MS_CONNECTION_TYPE
MS_UNUSED_2	src/Topography/shapelib/mapserver.h	/^  enum MS_CONNECTION_TYPE {MS_INLINE, MS_SHAPEFILE, MS_TILED_SHAPEFILE, MS_UNUSED_2, MS_OGR, MS_UNUSED_1, MS_POSTGIS, MS_WMS, MS_ORACLESPATIAL, MS_WFS, MS_GRATICULE, MS_MYSQL, MS_RASTER, MS_PLUGIN, MS_UNION, MS_UVRASTER, MS_CONTOUR, MS_KERNELDENSITY };$/;"	e	enum:MS_CONNECTION_TYPE
MS_UR	src/Topography/shapelib/mapserver.h	/^  enum MS_POSITIONS_ENUM {MS_UL=101, MS_LR, MS_UR, MS_LL, MS_CR, MS_CL, MS_UC, MS_LC, MS_CC, MS_AUTO, MS_XY, MS_NONE, MS_AUTO2,MS_FOLLOW};$/;"	e	enum:MS_POSITIONS_ENUM
MS_URL	src/Topography/shapelib/mapserver.h	291;"	d
MS_URL_LENGTH	src/Topography/shapelib/mapserver.h	275;"	d
MS_UVRASTER	src/Topography/shapelib/mapserver.h	/^  enum MS_CONNECTION_TYPE {MS_INLINE, MS_SHAPEFILE, MS_TILED_SHAPEFILE, MS_UNUSED_2, MS_OGR, MS_UNUSED_1, MS_POSTGIS, MS_WMS, MS_ORACLESPATIAL, MS_WFS, MS_GRATICULE, MS_MYSQL, MS_RASTER, MS_PLUGIN, MS_UNION, MS_UVRASTER, MS_CONTOUR, MS_KERNELDENSITY };$/;"	e	enum:MS_CONNECTION_TYPE
MS_V8ERR	src/Topography/shapelib/maperror.h	87;"	d
MS_VALID_COLOR	src/Topography/shapelib/mapserver.h	381;"	d
MS_VALID_EXTENT	src/Topography/shapelib/mapserver.h	378;"	d
MS_WCSERR	src/Topography/shapelib/maperror.h	76;"	d
MS_WEBERR	src/Topography/shapelib/maperror.h	58;"	d
MS_WFS	src/Topography/shapelib/mapserver.h	/^  enum MS_CONNECTION_TYPE {MS_INLINE, MS_SHAPEFILE, MS_TILED_SHAPEFILE, MS_UNUSED_2, MS_OGR, MS_UNUSED_1, MS_POSTGIS, MS_WMS, MS_ORACLESPATIAL, MS_WFS, MS_GRATICULE, MS_MYSQL, MS_RASTER, MS_PLUGIN, MS_UNION, MS_UVRASTER, MS_CONTOUR, MS_KERNELDENSITY };$/;"	e	enum:MS_CONNECTION_TYPE
MS_WFSCONNERR	src/Topography/shapelib/maperror.h	72;"	d
MS_WFSERR	src/Topography/shapelib/maperror.h	71;"	d
MS_WMS	src/Topography/shapelib/mapserver.h	/^  enum MS_CONNECTION_TYPE {MS_INLINE, MS_SHAPEFILE, MS_TILED_SHAPEFILE, MS_UNUSED_2, MS_OGR, MS_UNUSED_1, MS_POSTGIS, MS_WMS, MS_ORACLESPATIAL, MS_WFS, MS_GRATICULE, MS_MYSQL, MS_RASTER, MS_PLUGIN, MS_UNION, MS_UVRASTER, MS_CONTOUR, MS_KERNELDENSITY };$/;"	e	enum:MS_CONNECTION_TYPE
MS_WMSCONNERR	src/Topography/shapelib/maperror.h	69;"	d
MS_WMSERR	src/Topography/shapelib/maperror.h	68;"	d
MS_XY	src/Topography/shapelib/mapserver.h	/^  enum MS_POSITIONS_ENUM {MS_UL=101, MS_LR, MS_UR, MS_LL, MS_CR, MS_CL, MS_UC, MS_LC, MS_CC, MS_AUTO, MS_XY, MS_NONE, MS_AUTO2,MS_FOLLOW};$/;"	e	enum:MS_POSITIONS_ENUM
MS_YES	src/Topography/shapelib/mapserver.h	225;"	d
MSinkRate	src/Engine/GlideSolvers/GlidePolar.cpp	/^GlidePolar::MSinkRate(const double V) const$/;"	f	class:GlidePolar
MT_ACK	src/Device/Driver/FLARM/BinaryProtocol.hpp	/^    MT_ACK = 0xA0,$/;"	e	enum:FLARM::MessageType
MT_ERROR	src/Device/Driver/FLARM/BinaryProtocol.hpp	/^    MT_ERROR = 0x00,$/;"	e	enum:FLARM::MessageType
MT_EXIT	src/Device/Driver/FLARM/BinaryProtocol.hpp	/^    MT_EXIT = 0x12,$/;"	e	enum:FLARM::MessageType
MT_FLASHUPLOAD	src/Device/Driver/FLARM/BinaryProtocol.hpp	/^    MT_FLASHUPLOAD = 0x10,$/;"	e	enum:FLARM::MessageType
MT_GETIGCDATA	src/Device/Driver/FLARM/BinaryProtocol.hpp	/^    MT_GETIGCDATA = 0x22,$/;"	e	enum:FLARM::MessageType
MT_GETRECORDINFO	src/Device/Driver/FLARM/BinaryProtocol.hpp	/^    MT_GETRECORDINFO = 0x21,$/;"	e	enum:FLARM::MessageType
MT_NACK	src/Device/Driver/FLARM/BinaryProtocol.hpp	/^    MT_NACK = 0xB7,$/;"	e	enum:FLARM::MessageType
MT_PING	src/Device/Driver/FLARM/BinaryProtocol.hpp	/^    MT_PING = 0x01,$/;"	e	enum:FLARM::MessageType
MT_SELECTRECORD	src/Device/Driver/FLARM/BinaryProtocol.hpp	/^    MT_SELECTRECORD = 0x20,$/;"	e	enum:FLARM::MessageType
MT_SETBAUDRATE	src/Device/Driver/FLARM/BinaryProtocol.hpp	/^    MT_SETBAUDRATE = 0x02,$/;"	e	enum:FLARM::MessageType
MULTI_LINE	src/Widget/RowFormWidget.hpp	/^      MULTI_LINE,$/;"	m	class:RowFormWidget::Row::Type
MUTATED_FROM_GOTO	src/Task/MapTaskManager.hpp	/^    MUTATED_FROM_GOTO,$/;"	e	enum:MapTaskManager::TaskEditResult
MUTATED_TO_GOTO	src/Task/MapTaskManager.hpp	/^    MUTATED_TO_GOTO,$/;"	e	enum:MapTaskManager::TaskEditResult
MWV	src/Device/Parser.cpp	/^NMEAParser::MWV(NMEAInputLine &line, NMEAInfo &info)$/;"	f	class:NMEAParser
MXCFB_GET_DIFMT	src/ui/canvas/fb/mxcfb.h	157;"	d
MXCFB_GET_FB_BLANK	src/ui/canvas/fb/mxcfb.h	158;"	d
MXCFB_GET_FB_IPU_CHAN	src/ui/canvas/fb/mxcfb.h	152;"	d
MXCFB_GET_FB_IPU_DI	src/ui/canvas/fb/mxcfb.h	156;"	d
MXCFB_GET_PMIC_TEMPERATURE	src/ui/canvas/fb/mxcfb.h	170;"	d
MXCFB_GET_PWRDOWN_DELAY	src/ui/canvas/fb/mxcfb.h	168;"	d
MXCFB_REFRESH_AUTO	src/ui/canvas/fb/mxcfb.h	/^	MXCFB_REFRESH_AUTO,$/;"	e	enum:__anon173
MXCFB_REFRESH_OFF	src/ui/canvas/fb/mxcfb.h	/^	MXCFB_REFRESH_OFF,$/;"	e	enum:__anon173
MXCFB_REFRESH_PARTIAL	src/ui/canvas/fb/mxcfb.h	/^	MXCFB_REFRESH_PARTIAL,$/;"	e	enum:__anon173
MXCFB_SEND_UPDATE	src/ui/canvas/fb/mxcfb.h	165;"	d
MXCFB_SET_AUTO_UPDATE_MODE	src/ui/canvas/fb/mxcfb.h	164;"	d
MXCFB_SET_BORDER_MODE	src/ui/canvas/fb/mxcfb.h	171;"	d
MXCFB_SET_CLR_KEY	src/ui/canvas/fb/mxcfb.h	150;"	d
MXCFB_SET_DIFMT	src/ui/canvas/fb/mxcfb.h	159;"	d
MXCFB_SET_EPD_PWR0_CTRL	src/ui/canvas/fb/mxcfb.h	172;"	d
MXCFB_SET_EPD_PWR2_CTRL	src/ui/canvas/fb/mxcfb.h	173;"	d
MXCFB_SET_GAMMA	src/ui/canvas/fb/mxcfb.h	155;"	d
MXCFB_SET_GBL_ALPHA	src/ui/canvas/fb/mxcfb.h	149;"	d
MXCFB_SET_LOC_ALPHA	src/ui/canvas/fb/mxcfb.h	153;"	d
MXCFB_SET_LOC_ALP_BUF	src/ui/canvas/fb/mxcfb.h	154;"	d
MXCFB_SET_MERGE_ON_WAVEFORM_MISMATCH	src/ui/canvas/fb/mxcfb.h	175;"	d
MXCFB_SET_OVERLAY_POS	src/ui/canvas/fb/mxcfb.h	151;"	d
MXCFB_SET_PWRDOWN_DELAY	src/ui/canvas/fb/mxcfb.h	167;"	d
MXCFB_SET_TEMPERATURE	src/ui/canvas/fb/mxcfb.h	163;"	d
MXCFB_SET_TEMP_AUTO_UPDATE_PERIOD	src/ui/canvas/fb/mxcfb.h	174;"	d
MXCFB_SET_UPDATE_SCHEME	src/ui/canvas/fb/mxcfb.h	169;"	d
MXCFB_SET_WAVEFORM_MODES	src/ui/canvas/fb/mxcfb.h	162;"	d
MXCFB_WAIT_FOR_UPDATE_COMPLETE	src/ui/canvas/fb/mxcfb.h	166;"	d
MXCFB_WAIT_FOR_VSYNC	src/ui/canvas/fb/mxcfb.h	148;"	d
M_2PI	src/Math/Constants.hpp	33;"	d
M_PI	src/Math/Constants.hpp	30;"	d
M_PI_2	src/Math/Constants.hpp	36;"	d
MacAddress	src/Tracking/SkyLines/Key.cpp	/^struct MacAddress {$/;"	s	file:
MacCready	src/Engine/GlideSolvers/MacCready.cpp	/^MacCready::MacCready(const GlideSettings &_settings,$/;"	f	class:MacCready
MacCready	src/Engine/GlideSolvers/MacCready.hpp	/^class MacCready $/;"	c
MacCreadyCaption	src/Renderer/MacCreadyRenderer.cpp	/^MacCreadyCaption(TCHAR *sTmp, const GlidePolar &glide_polar)$/;"	f
MacCreadyProcessTimer	src/ApplyExternalSettings.cpp	/^MacCreadyProcessTimer()$/;"	f	file:
MacCreadySetupPanel	src/InfoBoxes/Panel/MacCreadySetup.cpp	/^class MacCreadySetupPanel : public WindowWidget {$/;"	c	file:
MacCreadyVopt	src/Engine/GlideSolvers/MacCready.cpp	/^  MacCreadyVopt(const GlideState &_task, const MacCready &_mac,$/;"	f	class:MacCreadyVopt
MacCreadyVopt	src/Engine/GlideSolvers/MacCready.cpp	/^class MacCreadyVopt: public ZeroFinder$/;"	c	file:
Magnitude	src/Geo/Flat/FlatPoint.hpp	/^  double Magnitude() const {$/;"	f	struct:FlatPoint
Magnitude	src/Geo/Flat/FlatRay.cpp	/^FlatRay::Magnitude() const$/;"	f	class:FlatRay
Main	src/Kobo/KoboMenu.cpp	/^Main()$/;"	f	file:
Main	src/Kobo/KoboMenu.cpp	/^Main(UI::SingleWindow &main_window, const DialogLook &dialog_look)$/;"	f	file:
Main	src/PageSettings.hpp	/^  enum class Main : uint8_t {$/;"	c	struct:PageLayout
Main	src/XCSoar.cpp	/^Main()$/;"	f	file:
MainMenuButton	src/Form/TabMenuDisplay.hpp	/^  struct MainMenuButton {$/;"	s	class:final
MainWindow	src/MainWindow.hpp	/^class MainWindow : public UI::SingleWindow {$/;"	c
Make	src/Cloud/Client.cpp	/^CloudClientContainer::Make(SocketAddress address,$/;"	f	class:CloudClientContainer
Make	src/Cloud/Thermal.cpp	/^CloudThermalContainer::Make(uint64_t client_key,$/;"	f	class:CloudThermalContainer
Make	src/util/Cache.hxx	/^	Item &Make(K &&key, U &&data) {$/;"	f	class:Cache
MakeAck	src/Tracking/SkyLines/Assemble.cpp	/^SkyLinesTracking::MakeAck(uint64_t key, uint16_t id, uint32_t flags)$/;"	f	class:SkyLinesTracking
MakeAirspaceSettingName	src/Profile/AirspaceConfig.cpp	/^MakeAirspaceSettingName(char *buffer, const char *prefix, unsigned n)$/;"	f	file:
MakeAlsaHandleUniquePtr	src/Audio/ALSAPCMPlayer.hpp	/^  static inline AlsaHandleUniquePtr MakeAlsaHandleUniquePtr($/;"	f	class:ALSAPCMPlayer
MakeAndPredicate	src/Engine/Airspace/Predicate/AirspacePredicate.hpp	/^MakeAndPredicate(const A &a, const B &b)$/;"	f
MakeBottomRow	src/InfoBoxes/InfoBoxLayout.cpp	/^MakeBottomRow(const InfoBoxLayout::Layout &layout,$/;"	f	file:
MakeCClosure	src/lua/Util.hxx	/^MakeCClosure(lua_CFunction fn, T&&... values)$/;"	f	struct:Lua::StackIndex::LightUserData
MakeCachePath	src/io/FileCache.hpp	/^  AllocatedPath MakeCachePath(const TCHAR *name) const {$/;"	f	class:FileCache
MakeDeviceSettingName	src/Profile/DeviceConfig.cpp	/^MakeDeviceSettingName(char *buffer, const char *prefix, unsigned n,$/;"	f	file:
MakeDisposer	src/Engine/Trace/Trace.hpp	/^  Disposer<decltype(allocator)> MakeDisposer() {$/;"	f	class:Trace
MakeDisposer	src/Engine/Trace/Trace.hpp	/^  static Disposer<Alloc> MakeDisposer(Alloc &alloc) {$/;"	f	class:Trace
MakeFix	src/Tracking/SkyLines/Assemble.cpp	/^SkyLinesTracking::MakeFix(uint64_t key, uint32_t flags, uint32_t time,$/;"	f	class:SkyLinesTracking
MakeLeftColumn	src/InfoBoxes/InfoBoxLayout.cpp	/^MakeLeftColumn(const InfoBoxLayout::Layout &layout,$/;"	f	file:
MakeListItemRenderer	src/Form/List.hpp	/^MakeListItemRenderer(C &&c)$/;"	f
MakeLocalPath	src/LocalPath.cpp	/^MakeLocalPath(const TCHAR *name)$/;"	f
MakeMessage	src/Monitor/AirspaceWarningMonitor.cpp	/^  const TCHAR *MakeMessage(const AbstractAirspace &airspace,$/;"	f	class:final	file:
MakeMessage	src/Monitor/MatTaskMonitor.cpp	/^  const TCHAR *MakeMessage(const Waypoint &wp) {$/;"	f	class:final	file:
MakeMode	src/Input/InputConfig.hpp	/^  int MakeMode(TStringView name) {$/;"	f	struct:InputConfig
MakeOverlayLabel	src/Weather/PCMet/Overlays.cpp	/^MakeOverlayLabel(PCMet::OverlayInfo &info)$/;"	f	file:
MakePing	src/Tracking/SkyLines/Assemble.cpp	/^SkyLinesTracking::MakePing(uint64_t key, uint16_t id)$/;"	f	class:SkyLinesTracking
MakeRightColumn	src/InfoBoxes/InfoBoxLayout.cpp	/^MakeRightColumn(const InfoBoxLayout::Layout &layout,$/;"	f	file:
MakeTemporaryPath	src/io/FileTransaction.cpp	/^MakeTemporaryPath(Path path)$/;"	f	file:
MakeTexture	src/ui/canvas/android/Bitmap.cpp	/^Bitmap::MakeTexture(jobject _bmp, Type _type, bool flipped)$/;"	f	class:Bitmap
MakeTexture	src/ui/canvas/opengl/Bitmap.cpp	/^Bitmap::MakeTexture(const UncompressedImage &uncompressed, Type type)$/;"	f	class:Bitmap
MakeThermal	src/Tracking/SkyLines/Assemble.cpp	/^SkyLinesTracking::MakeThermal(uint32_t time,$/;"	f	class:SkyLinesTracking
MakeThermalRequest	src/Tracking/SkyLines/Assemble.cpp	/^SkyLinesTracking::MakeThermalRequest(uint64_t key)$/;"	f	class:SkyLinesTracking
MakeThermalSubmit	src/Tracking/SkyLines/Assemble.cpp	/^SkyLinesTracking::MakeThermalSubmit(uint64_t key, uint32_t time,$/;"	f	class:SkyLinesTracking
MakeTitle	src/PageSettings.cpp	/^PageLayout::MakeTitle(const InfoBoxSettings &info_box_settings,$/;"	f	class:PageLayout
MakeTopRow	src/InfoBoxes/InfoBoxLayout.cpp	/^MakeTopRow(const InfoBoxLayout::Layout &layout,$/;"	f	file:
MakeTrafficRequest	src/Tracking/SkyLines/Assemble.cpp	/^SkyLinesTracking::MakeTrafficRequest(uint64_t key, bool followees, bool club,$/;"	f	class:SkyLinesTracking
MakeUint64	src/Tracking/SkyLines/Key.cpp	/^MakeUint64(uint8_t a, uint8_t b, uint8_t c, uint8_t d,$/;"	f	file:
MakeUint64_64	src/Tracking/SkyLines/Key.cpp	/^MakeUint64_64(uint64_t a, uint64_t b, uint64_t c, uint64_t d,$/;"	f	file:
MakeUserNameRequest	src/Tracking/SkyLines/Assemble.cpp	/^SkyLinesTracking::MakeUserNameRequest(uint64_t key, uint32_t user_id)$/;"	f	class:SkyLinesTracking
MakeWaypoint	src/Task/TaskFileIGC.cpp	/^MakeWaypoint(GeoPoint location, const TCHAR *name)$/;"	f	file:
ManageCAI302Dialog	src/Dialogs/Device/ManageCAI302Dialog.cpp	/^ManageCAI302Dialog(SingleWindow &parent, const DialogLook &look,$/;"	f
ManageCAI302Widget	src/Dialogs/Device/ManageCAI302Dialog.cpp	/^  ManageCAI302Widget(const DialogLook &look, CAI302Device &_device)$/;"	f	class:final
ManageCurrent	src/Dialogs/Device/DeviceListDialog.cpp	/^DeviceListWidget::ManageCurrent()$/;"	f	class:DeviceListWidget
ManageFLARMWidget	src/Dialogs/Device/ManageFlarmDialog.cpp	/^  ManageFLARMWidget(const DialogLook &look, FlarmDevice &_device,$/;"	f	class:final
ManageFlarmDialog	src/Dialogs/Device/ManageFlarmDialog.cpp	/^ManageFlarmDialog(Device &device, const FlarmVersion &version)$/;"	f
ManageLX16xxDialog	src/Dialogs/Device/LX/ManageLX16xxDialog.cpp	/^ManageLX16xxDialog(Device &device, const DeviceInfo &info)$/;"	f
ManageLX16xxWidget	src/Dialogs/Device/LX/ManageLX16xxDialog.cpp	/^  ManageLX16xxWidget(const DialogLook &look, LXDevice &_device,$/;"	f	class:ManageLX16xxWidget
ManageLX16xxWidget	src/Dialogs/Device/LX/ManageLX16xxDialog.cpp	/^class ManageLX16xxWidget : public RowFormWidget {$/;"	c	file:
ManageNanoDialog	src/Dialogs/Device/LX/ManageNanoDialog.cpp	/^ManageNanoDialog(Device &device, const DeviceInfo &info)$/;"	f
ManageNanoWidget	src/Dialogs/Device/LX/ManageNanoDialog.cpp	/^  ManageNanoWidget(const DialogLook &look, LXDevice &_device,$/;"	f	class:final
ManageV7Dialog	src/Dialogs/Device/LX/ManageV7Dialog.cpp	/^ManageV7Dialog(Device &device, const DeviceInfo &info,$/;"	f
ManageV7Widget	src/Dialogs/Device/LX/ManageV7Dialog.cpp	/^  ManageV7Widget(const DialogLook &look, LXDevice &_device,$/;"	f	class:final
ManagedFileListWidget	src/Dialogs/FileManager.cpp	/^class ManagedFileListWidget$/;"	c	file:
ManagedWidget	src/Widget/ManagedWidget.hpp	/^class ManagedWidget {$/;"	c
Manual	src/util/Manual.hxx	/^class Manual {$/;"	c
Map	src/Device/SettingsMap.hpp	/^  typedef std::map<std::string, Item> Map;$/;"	t	class:DeviceSettingsMap
Map	src/FLARM/ColorDatabase.hpp	/^  typedef std::map<FlarmId, FlarmColor> Map;$/;"	t	class:FlarmColorDatabase
MapCanvas	src/MapWindow/MapCanvas.hpp	/^class MapCanvas {$/;"	c
MapDisplayConfigPanel	src/Dialogs/Settings/Panels/MapDisplayConfigPanel.cpp	/^  MapDisplayConfigPanel()$/;"	f	class:final
MapFile	src/Dialogs/Settings/Panels/SiteConfigPanel.cpp	/^  MapFile,$/;"	e	enum:ControlIndex	file:
MapFile	src/Profile/ProfileKeys.cpp	/^const char MapFile[] = "MapFile"; \/\/ pL$/;"	m	namespace:ProfileKeys	file:
MapFileChanged	src/UtilsSettings.cpp	/^bool MapFileChanged = false;$/;"	v
MapInQuadrilateral	src/MapWindow/OverlayBitmap.cpp	/^MapInQuadrilateral(const GeoQuadrilateral &q, const GeoPoint p)$/;"	f	file:
MapInfo	src/Weather/Rasp/RaspStore.hpp	/^  struct MapInfo {$/;"	s	class:RaspStore
MapItem	src/MapWindow/Items/MapItem.hpp	/^  MapItem(Type _type):type(_type) {}$/;"	f	class:TaskPointType
MapItem	src/Weather/Rasp/RaspStore.cpp	/^RaspStore::MapItem::MapItem(const TCHAR *_name)$/;"	f	class:RaspStore::MapItem
MapItem	src/Weather/Rasp/RaspStore.hpp	/^  struct MapItem {$/;"	s	class:RaspStore
MapItemList	src/MapWindow/Items/List.hpp	/^class MapItemList: public StaticArray<MapItem *, 32>$/;"	c
MapItemListBuilder	src/MapWindow/Items/Builder.hpp	/^  MapItemListBuilder(MapItemList &_list, GeoPoint _location, double _range)$/;"	f	class:MapItemListBuilder
MapItemListBuilder	src/MapWindow/Items/Builder.hpp	/^class MapItemListBuilder$/;"	c
MapItemListRenderer	src/Renderer/MapItemListRenderer.hpp	/^  MapItemListRenderer(const MapLook &_look,$/;"	f	class:MapItemListRenderer
MapItemListRenderer	src/Renderer/MapItemListRenderer.hpp	/^class MapItemListRenderer {$/;"	c
MapItemListSettings	src/MapSettings.hpp	/^struct MapItemListSettings {$/;"	s
MapItemListWidget	src/Dialogs/MapItemListDialog.cpp	/^  MapItemListWidget(const MapItemList &_list,$/;"	f	class:final
MapList	src/Weather/Rasp/RaspStore.hpp	/^  typedef StaticArray<MapItem, MAX_WEATHER_MAP> MapList;$/;"	t	class:RaspStore
MapLook	src/Look/MapLook.hpp	/^struct MapLook {$/;"	s
MapOrientation	src/Dialogs/Settings/Panels/LayoutConfigPanel.cpp	/^  MapOrientation,$/;"	e	enum:ControlIndex	file:
MapOrientation	src/MapSettings.hpp	/^enum class MapOrientation : uint8_t {$/;"	c
MapOrientation	src/Profile/ProfileKeys.cpp	/^const char MapOrientation[] = "DisplayOrientation";$/;"	m	namespace:ProfileKeys	file:
MapOverlay	src/MapWindow/Overlay.hpp	/^class MapOverlay {$/;"	c
MapOverlayBitmap	src/MapWindow/OverlayBitmap.cpp	/^MapOverlayBitmap::MapOverlayBitmap(Path path)$/;"	f	class:MapOverlayBitmap
MapSettings	src/MapSettings.hpp	/^struct MapSettings {$/;"	s
MapSettingsBlackboard	src/Blackboard/MapSettingsBlackboard.hpp	/^class MapSettingsBlackboard$/;"	c
MapShiftBias	src/MapSettings.hpp	/^enum class MapShiftBias : uint8_t {$/;"	c
MapShiftBias	src/Profile/ProfileKeys.cpp	/^const char MapShiftBias[] = "MapShiftBias";$/;"	m	namespace:ProfileKeys	file:
MapTaskManager	src/Task/MapTaskManager.hpp	/^namespace MapTaskManager$/;"	n
MapVehicleTypeToLivetrack24	src/Tracking/TrackingGlue.cpp	/^MapVehicleTypeToLivetrack24(LiveTrack24::Settings::VehicleType vt)$/;"	f	file:
MapWaypointLabelListCompare	src/Renderer/WaypointLabelList.cpp	/^MapWaypointLabelListCompare(const WaypointLabelList::Label &e1,$/;"	f	file:
MapWaypointLabelRender	src/Renderer/WaypointRenderer.cpp	/^MapWaypointLabelRender(Canvas &canvas, PixelSize clip_size,$/;"	f	file:
MapWindow	src/MapWindow/MapWindow.cpp	/^MapWindow::MapWindow(const MapLook &_look,$/;"	f	class:MapWindow
MapWindow	src/MapWindow/MapWindow.hpp	/^class MapWindow :$/;"	c
MapWindowBlackboard	src/MapWindow/MapWindowBlackboard.hpp	/^class MapWindowBlackboard:$/;"	c
MapWindowProjection	src/Projection/MapWindowProjection.hpp	/^class MapWindowProjection:$/;"	c
Mark	src/Screen/StopWatch.hpp	/^  void Mark(const char *text) {$/;"	f	class:ScreenStopWatch
MarkLocation	src/Markers/Markers.cpp	/^MarkLocation(const GeoPoint &loc, const BrokenDateTime &time)$/;"	f
MarkOld	src/Device/SettingsMap.hpp	/^  void MarkOld(const K &key) {$/;"	f	class:DeviceSettingsMap
Marker	src/Screen/StopWatch.hpp	/^  struct Marker {$/;"	s	class:ScreenStopWatch
MarkerList	src/Screen/StopWatch.hpp	/^  typedef StaticArray<Marker, 256u> MarkerList;$/;"	t	class:ScreenStopWatch
MarkerSegment	src/Terrain/Loader.cpp	/^TerrainLoader::MarkerSegment(long file_offset, unsigned id)$/;"	f	class:TerrainLoader
MarkerSegmentInfo	src/Terrain/RasterTileCache.hpp	/^    MarkerSegmentInfo() {}$/;"	f	struct:RasterTileCache::MarkerSegmentInfo
MarkerSegmentInfo	src/Terrain/RasterTileCache.hpp	/^    MarkerSegmentInfo(uint32_t _file_offset, int _tile=NO_TILE)$/;"	f	struct:RasterTileCache::MarkerSegmentInfo
MarkerSegmentInfo	src/Terrain/RasterTileCache.hpp	/^  struct MarkerSegmentInfo {$/;"	s	class:RasterTileCache
MaskedIcon	src/ui/canvas/Icon.hpp	/^class MaskedIcon {$/;"	c
MassUnitValue	src/Profile/ProfileKeys.cpp	/^const char MassUnitValue[] = "MassUnit";$/;"	m	namespace:ProfileKeys	file:
MasterAudioVolume	src/Profile/ProfileKeys.cpp	/^const char MasterAudioVolume[] = "MasterAudioVolume";$/;"	m	namespace:ProfileKeys	file:
MasterVolume	src/Dialogs/Settings/Panels/AudioConfigPanel.cpp	/^  MasterVolume,$/;"	e	enum:ControlIndex	file:
MatTaskAddWidget	src/Monitor/MatTaskMonitor.cpp	/^  MatTaskAddWidget(MatTaskMonitor &_monitor, WaypointPtr &&_waypoint)$/;"	f	class:final
MatTaskFactory	src/Engine/Task/Factory/MatTaskFactory.cpp	/^MatTaskFactory::MatTaskFactory(OrderedTask& _task, const TaskBehaviour &tb)$/;"	f	class:MatTaskFactory
MatTaskMonitor	src/Monitor/MatTaskMonitor.hpp	/^  MatTaskMonitor():widget(nullptr), last_id(-1) {}$/;"	f	class:MatTaskMonitor
MatTaskMonitor	src/Monitor/MatTaskMonitor.hpp	/^class MatTaskMonitor {$/;"	c
Match	src/Engine/Airspace/AirspaceSorter.cpp	/^AirspaceFilterData::Match(const GeoPoint &location,$/;"	f	class:AirspaceFilterData
Match	src/util/RadixTree.hpp	/^      Match(Node *_node, const TCHAR *_key)$/;"	f	struct:RadixTree::Node::Match
Match	src/util/RadixTree.hpp	/^    struct Match {$/;"	s	struct:RadixTree::Node
Match	src/util/StringParser.hxx	/^	bool Match(const_pointer value, size_t size) {$/;"	f	class:StringParser
Match	src/util/StringParser.hxx	/^	bool Match(value_type value) {$/;"	f	class:StringParser
MatchAll	src/util/StringParser.hxx	/^	bool MatchAll(const_pointer value) {$/;"	f	class:StringParser
MatchAllIgnoreCase	src/util/StringParser.hxx	/^	bool MatchAllIgnoreCase(const_pointer value) {$/;"	f	class:StringParser
MatchCallback	src/ui/event/android/Queue.cpp	/^MatchCallback(const Event &event, void *ctx)$/;"	f	namespace:UI
MatchCallback	src/ui/event/poll/Queue.cpp	/^MatchCallback(const Event &event, void *ctx)$/;"	f	namespace:UI
MatchCallback	src/ui/event/sdl/Queue.cpp	/^MatchCallback(const SDL_Event &event, void *ctx)$/;"	f	namespace:UI
MatchCallbackData	src/ui/event/sdl/Queue.cpp	/^struct MatchCallbackData {$/;"	s	namespace:UI	file:
MatchIgnoreCase	src/util/StringParser.hxx	/^	bool MatchIgnoreCase(const_pointer value, size_t size) {$/;"	f	class:StringParser
MatchKey	src/util/RadixTree.hpp	/^    const TCHAR *MatchKey(const TCHAR *key) const {$/;"	f	struct:RadixTree::Node
MatchNamePrefix	src/Engine/Airspace/AbstractAirspace.cpp	/^AbstractAirspace::MatchNamePrefix(const TCHAR *prefix) const$/;"	f	class:AbstractAirspace
MatchPrefix	src/util/RadixTree.hpp	/^    const TCHAR *MatchPrefix(const TCHAR *prefix) const {$/;"	f	struct:RadixTree::Node
Matches	src/Engine/Airspace/AirspaceActivity.hpp	/^  bool Matches(AirspaceActivity _mask) const {$/;"	f	class:AirspaceActivity
Matches	src/Waypoint/WaypointFilter.cpp	/^WaypointFilter::Matches(const Waypoint &waypoint, GeoPoint location,$/;"	f	class:WaypointFilter
MatchesExtension	src/system/Path.cpp	/^Path::MatchesExtension(const_pointer extension) const$/;"	f	class:Path
MatchesExtension	src/system/Path.hpp	/^  bool MatchesExtension(const_pointer extension) const {$/;"	f	class:AllocatedPath
MatchesExtension	src/system/PathName.cpp	/^MatchesExtension(const TCHAR *filename, const TCHAR *extension)$/;"	f
MatchesExtension	src/system/PathName.cpp	/^MatchesExtension(const char *filename, const char *extension)$/;"	f
Max	src/Rough/RoughAltitude.hpp	/^  static RoughAltitude Max() {$/;"	f	class:RoughAltitude
MaxAutoZoomDistance	src/Dialogs/Settings/Panels/MapDisplayConfigPanel.cpp	/^  MaxAutoZoomDistance,$/;"	e	enum:ControlIndex	file:
MaxAutoZoomDistance	src/Profile/ProfileKeys.cpp	/^const char MaxAutoZoomDistance[] = "MaxAutoZoomDistance";$/;"	m	namespace:ProfileKeys	file:
MaxHeightGain	src/Computer/CirclingComputer.cpp	/^CirclingComputer::MaxHeightGain(const MoreData &basic,$/;"	f	class:CirclingComputer
MaxHeightGain	src/Dialogs/StatusPanels/FlightStatusPanel.cpp	/^  MaxHeightGain,$/;"	e	enum:Controls	file:
MaybeBluetooth	src/Device/Config.cpp	/^DeviceConfig::MaybeBluetooth() const$/;"	f	class:DeviceConfig
MaybeBluetooth	src/Device/Config.cpp	/^DeviceConfig::MaybeBluetooth(PortType port_type, const TCHAR *path)$/;"	f	class:DeviceConfig
MemoryAddress24	src/Device/Driver/LX/Protocol.hpp	/^  struct MemoryAddress24 {$/;"	s	namespace:LX
MemoryAddress32	src/Device/Driver/LX/Protocol.hpp	/^  struct MemoryAddress32 {$/;"	s	namespace:LX
MemorySection	src/Device/Driver/LX/Protocol.hpp	/^  struct MemorySection {$/;"	s	namespace:LX
Menu	src/Menu/MenuData.hpp	/^class Menu {$/;"	c
MenuBar	src/Menu/MenuBar.cpp	/^MenuBar::MenuBar(ContainerWindow &parent, const ButtonLook &look)$/;"	f	class:MenuBar
MenuBar	src/Menu/MenuBar.hpp	/^class MenuBar {$/;"	c
MenuItem	src/Menu/MenuData.hpp	/^class MenuItem {$/;"	c
MenuTabIndex	src/Form/TabMenuDisplay.hpp	/^    explicit MenuTabIndex(unsigned mainNum, unsigned subNum=NO_SUB_MENU)$/;"	f	struct:final::MenuTabIndex
MenuTabIndex	src/Form/TabMenuDisplay.hpp	/^  struct MenuTabIndex {$/;"	s	class:final
MenuTimeOut	src/Input/InputEvents.cpp	/^  static unsigned MenuTimeOut = 0;$/;"	m	namespace:InputEvents	file:
MenuTimeout	src/Dialogs/Settings/Panels/InterfaceConfigPanel.cpp	/^  MenuTimeout,$/;"	e	enum:ControlIndex	file:
MenuTimeout	src/Profile/ProfileKeys.cpp	/^const char MenuTimeout[] = "MenuTimeout";$/;"	m	namespace:ProfileKeys	file:
Merge	src/Blackboard/DeviceBlackboard.cpp	/^DeviceBlackboard::Merge()$/;"	f	class:DeviceBlackboard
Merge	src/Engine/ThermalBand/ThermalEncounterCollection.cpp	/^ThermalEncounterCollection::Merge(const ThermalBand& tb)$/;"	f	class:ThermalEncounterCollection
Merge	src/Engine/ThermalBand/ThermalSlice.cpp	/^ThermalSlice::Merge(const ThermalSlice& o)$/;"	f	class:ThermalSlice
Merge	src/Geo/Flat/FlatBoundingBox.hpp	/^  void Merge(const FlatBoundingBox& p) {$/;"	f	struct:FlatBoundingBox
Merge	src/Kobo/WifiDialog.cpp	/^WifiListWidget::Merge(const WifiConfiguredNetworkInfo &c)$/;"	f	class:WifiListWidget
MergeList	src/Kobo/WifiDialog.cpp	/^WifiListWidget::MergeList(const WifiConfiguredNetworkInfo *p, unsigned n)$/;"	f	class:WifiListWidget
MergeList	src/Kobo/WifiDialog.cpp	/^WifiListWidget::MergeList(const WifiVisibleNetwork *p, unsigned n)$/;"	f	class:WifiListWidget
MergeThread	src/MergeThread.cpp	/^MergeThread::MergeThread(DeviceBlackboard &_device_blackboard)$/;"	f	class:MergeThread
MergeUnsafe	src/Engine/ThermalBand/ThermalEncounterCollection.cpp	/^ThermalEncounterCollection::MergeUnsafe(const ThermalBand& o)$/;"	f	class:ThermalEncounterCollection
Message	src/Message.hpp	/^namespace Message {$/;"	n
Message	src/PopupMessage.hpp	/^    Message()$/;"	f	struct:PopupMessage::Message
Message	src/PopupMessage.hpp	/^  struct Message {$/;"	s	class:PopupMessage
MessageOperationEnvironment	src/Operation/MessageOperationEnvironment.hpp	/^class MessageOperationEnvironment : public QuietOperationEnvironment {$/;"	c
MessageParser	src/Device/Driver/IMI/Protocol/MessageParser.cpp	/^namespace MessageParser {$/;"	n	namespace:IMI	file:
MessageParser	src/Device/Driver/IMI/Protocol/MessageParser.hpp	/^  namespace MessageParser {$/;"	n	namespace:IMI
MessageProcessTimer	src/ProcessTimer.cpp	/^MessageProcessTimer()$/;"	f	file:
MessageType	src/Device/Driver/FLARM/BinaryProtocol.hpp	/^  enum MessageType {$/;"	g	namespace:FLARM
MetaData	src/InfoBoxes/Content/Factory.cpp	/^  constexpr MetaData(const TCHAR *_name,$/;"	f	struct:MetaData
MetaData	src/InfoBoxes/Content/Factory.cpp	/^struct MetaData {$/;"	s	file:
MetaData	src/Terrain/RasterTile.hpp	/^  struct MetaData {$/;"	s	class:RasterTile
MethodSignatureHelper	src/util/BindMethod.hxx	/^struct MethodSignatureHelper<R (T::*)(Args...) noexcept(NoExcept)> {$/;"	s	namespace:BindMethodDetail
MethodWithSignature	src/util/BindMethod.hxx	/^struct MethodWithSignature<T, R(Args...)$/;"	s	namespace:BindMethodDetail
MethodWrapperWithSignature	src/util/BindMethod.hxx	/^struct MethodWrapperWithSignature<R(Args...) noexcept(NoExcept)> {$/;"	s	namespace:BindMethodDetail
MidPoint	src/Geo/GeoVector.cpp	/^GeoVector::MidPoint(const GeoPoint &source) const$/;"	f	class:GeoVector
Middle	src/Geo/GeoPoint.cpp	/^GeoPoint::Middle(const GeoPoint &other) const$/;"	f	class:GeoPoint
Midnight	src/time/BrokenTime.hpp	/^  static BrokenTime Midnight() {$/;"	f	struct:BrokenTime
MixPCM	src/Audio/AudioAlgorithms.hpp	/^inline void MixPCM(int16_t *dest, const int16_t *src, size_t num_frames,$/;"	f
MixPCM	src/Audio/AudioAlgorithms.hpp	/^inline void MixPCM(int16_t *dest, size_t num_frames,$/;"	f
Mixed	src/ui/canvas/memory/PixelTraits.hpp	/^  struct Mixed {$/;"	s	struct:GreyscalePixelTraits
MixedTaskFactory	src/Engine/Task/Factory/MixedTaskFactory.cpp	/^MixedTaskFactory::MixedTaskFactory(OrderedTask& _task,$/;"	f	class:MixedTaskFactory
MixedTaskFactory	src/Engine/Task/Factory/MixedTaskFactory.hpp	/^class MixedTaskFactory: public AbstractTaskFactory $/;"	c
MixerPCMPlayer	src/Audio/MixerPCMPlayer.hpp	/^class MixerPCMPlayer : public PCMPlayer {$/;"	c
ModalResult	src/Form/Form.hpp	/^enum ModalResult {$/;"	g
Mode	src/Device/Driver/CAI302/Internal.hpp	/^  enum class Mode : uint8_t {$/;"	c	class:CAI302Device
Mode	src/Device/Driver/FLARM/Device.hpp	/^  enum class Mode : uint8_t {$/;"	c	class:FlarmDevice
Mode	src/Device/Driver/LX/Internal.hpp	/^  enum class Mode : uint8_t {$/;"	c	class:LXDevice
Mode	src/Engine/Route/Config.hpp	/^  enum class Mode {$/;"	c	struct:RoutePlannerConfig
Mode	src/Input/InputEvents.hpp	/^  enum Mode {$/;"	g	namespace:InputEvents
Mode	src/Renderer/WaypointLabelList.hpp	/^    TextInBoxMode Mode;$/;"	m	struct:WaypointLabelList::Label
Mode	src/io/FileOutputStream.hxx	/^	enum class Mode : uint8_t {$/;"	c	class:final
ModeDirect	src/Device/Driver/LX/V7.hpp	/^  ModeDirect(Port &port, OperationEnvironment &env)$/;"	f	namespace:V7
ModeVSeven	src/Device/Driver/LX/V7.hpp	/^  ModeVSeven(Port &port, OperationEnvironment &env)$/;"	f	namespace:V7
Modified	src/Form/DataField/Base.cpp	/^DataField::Modified()$/;"	f	class:DataField
Modified	src/NMEA/Validity.hpp	/^  constexpr bool Modified(const Validity &other) const {$/;"	f	class:Validity
ModifyValue	src/Form/DataField/Angle.cpp	/^AngleDataField::ModifyValue(Angle _value)$/;"	f	class:AngleDataField
ModifyValue	src/Form/DataField/Angle.cpp	/^AngleDataField::ModifyValue(int _value)$/;"	f	class:AngleDataField
ModifyValue	src/Form/DataField/Angle.cpp	/^AngleDataField::ModifyValue(unsigned _value)$/;"	f	class:AngleDataField
ModifyValue	src/Form/DataField/GeoPoint.cpp	/^GeoPointDataField::ModifyValue(GeoPoint _value)$/;"	f	class:GeoPointDataField
ModifyValue	src/Form/DataField/RoughTime.cpp	/^RoughTimeDataField::ModifyValue(RoughTime _value)$/;"	f	class:RoughTimeDataField
ModuleInFlash	src/LocalPath.cpp	/^ModuleInFlash(HMODULE module, TCHAR *buffer)$/;"	f	file:
MonitorCurrent	src/Dialogs/Device/DeviceListDialog.cpp	/^DeviceListWidget::MonitorCurrent()$/;"	f	class:DeviceListWidget
MonotonicClockFloat	src/system/Clock.cpp	/^MonotonicClockFloat()$/;"	f
MonotonicClockMS	src/system/Clock.cpp	/^MonotonicClockMS()$/;"	f
MonotonicClockUS	src/system/Clock.cpp	/^MonotonicClockUS()$/;"	f
MoreData	src/NMEA/MoreData.hpp	/^struct MoreData : public NMEAInfo {$/;"	s
MouseDown	src/UIUtil/KineticManager.cpp	/^KineticManager::MouseDown(int x)$/;"	f	class:KineticManager
MouseMove	src/UIUtil/KineticManager.cpp	/^KineticManager::MouseMove(int x)$/;"	f	class:KineticManager
MouseUp	src/UIUtil/KineticManager.cpp	/^KineticManager::MouseUp(int x)$/;"	f	class:KineticManager
Move	src/ProgressGlue.cpp	/^ProgressGlue::Move(const PixelRect &rc)$/;"	f	class:ProgressGlue
MoveAbsolute	src/ui/event/poll/linux/MergeMouse.cpp	/^MergeMouse::MoveAbsolute(PixelPoint p)$/;"	f	class:UI::MergeMouse
MoveAbsolute	src/ui/event/poll/linux/MergeMouse.cpp	/^MergeMouse::MoveAbsolute(int new_x, int new_y,$/;"	f	class:UI::MergeMouse
MoveButton	src/Widget/KeyboardWidget.cpp	/^KeyboardWidget::MoveButton(unsigned ch, int left, int top)$/;"	f	class:KeyboardWidget
MoveButtons	src/Widget/KeyboardWidget.cpp	/^KeyboardWidget::MoveButtons(const PixelRect &rc)$/;"	f	class:KeyboardWidget
MoveButtonsToRow	src/Widget/KeyboardWidget.cpp	/^KeyboardWidget::MoveButtonsToRow(const PixelRect &rc,$/;"	f	class:KeyboardWidget
MoveChildren	src/Dialogs/Task/TaskPointDialog.cpp	/^  void MoveChildren(const Layout &layout) {$/;"	f	class:final	file:
MoveCursor	src/Dialogs/KnobTextEntry.cpp	/^  void MoveCursor() {$/;"	f	class:final	file:
MoveCursorLeft	src/Dialogs/KnobTextEntry.cpp	/^  bool MoveCursorLeft() {$/;"	f	class:final
MoveCursorRight	src/Dialogs/KnobTextEntry.cpp	/^  bool MoveCursorRight() {$/;"	f	class:final
MoveDown	src/Dialogs/Task/Manager/TaskEditPanel.cpp	/^TaskEditPanel::MoveDown()$/;"	f	class:TaskEditPanel
MoveFocus	src/Form/GridView.cpp	/^GridView::MoveFocus(Direction direction)$/;"	f	class:GridView
MoveRelative	src/ui/event/poll/linux/MergeMouse.cpp	/^MergeMouse::MoveRelative(PixelPoint d)$/;"	f	class:UI::MergeMouse
MoveUp	src/Dialogs/Task/Manager/TaskEditPanel.cpp	/^TaskEditPanel::MoveUp()$/;"	f	class:TaskEditPanel
MoveWheel	src/ui/event/poll/linux/MergeMouse.hpp	/^  void MoveWheel(int d) {$/;"	f	class:UI::final
Moved	src/ui/window/custom/DoubleClick.hpp	/^  void Moved(PixelPoint _location) {$/;"	f	class:DoubleClick
MovementDetected	src/Interface.hpp	/^  static inline bool MovementDetected() {$/;"	f	namespace:CommonInterface
MovementDetected	src/NMEA/Info.hpp	/^  bool MovementDetected() const {$/;"	f	struct:NMEAInfo
Moving	src/Computer/FlyingComputer.cpp	/^FlyingComputer::Moving(FlyingState &state, double time, double dt,$/;"	f	class:FlyingComputer
MultiPartFormData	src/net/http/FormData.hpp	/^  MultiPartFormData(MultiPartFormData &&src)$/;"	f	class:Net::MultiPartFormData
MultiPartFormData	src/net/http/FormData.hpp	/^class MultiPartFormData {$/;"	c	namespace:Net
MultipleDevices	src/Device/MultipleDevices.cpp	/^MultipleDevices::MultipleDevices(EventLoop &event_loop, Cares::Channel &cares)$/;"	f	class:MultipleDevices
MultiplyY	src/Geo/Flat/FlatLine.hpp	/^  void MultiplyY(const double factor) {$/;"	f	class:FlatLine
MultiplyY	src/Geo/Flat/FlatPoint.hpp	/^  void MultiplyY(const double a) {$/;"	f	struct:FlatPoint
MurphyIterator	src/ui/canvas/memory/Murphy.hpp	/^  MurphyIterator(Canvas &_canvas, typename Canvas::color_type _color,$/;"	f	struct:MurphyIterator
MurphyIterator	src/ui/canvas/memory/Murphy.hpp	/^struct MurphyIterator {$/;"	s
MutateClosedFinishPerTaskType	src/Engine/Task/Factory/AbstractTaskFactory.cpp	/^AbstractTaskFactory::MutateClosedFinishPerTaskType()$/;"	f	class:AbstractTaskFactory
MutateTPsToTaskType	src/Engine/Task/Factory/AbstractTaskFactory.cpp	/^AbstractTaskFactory::MutateTPsToTaskType()$/;"	f	class:AbstractTaskFactory
MutateTaskPointRenderer	src/Dialogs/Task/MutateTaskPointDialog.cpp	/^  explicit MutateTaskPointRenderer(TaskPointFactoryType _current_type)$/;"	f	class:final
N	src/Device/Driver/LX/Protocol.hpp	/^    static constexpr unsigned N = 0x10;$/;"	m	struct:LX::MemorySection
N	src/util/EnumBitSet.hxx	/^	static constexpr unsigned N = unsigned(E::COUNT);$/;"	m	class:EnumBitSet
N	src/util/QuadTree.hxx	/^		static constexpr unsigned N = 4;$/;"	m	struct:QuadBucket
N2Event	src/Input/InputConfig.hpp	/^  unsigned short N2Event[NE_COUNT];$/;"	m	struct:InputConfig
NAK	src/Device/Driver/KRT2.cpp	/^  static constexpr char NAK = 0x15; \/\/!< Command not acknowledged character.$/;"	m	class:final	file:
NAK	src/Device/Driver/Volkslogger/Protocol.hpp	/^    NAK = 0x15,$/;"	e	enum:Volkslogger::__anon164
NAME	src/Dialogs/Airspace/AirspaceList.cpp	/^  NAME,$/;"	e	enum:Controls	file:
NAME	src/Dialogs/Plane/PlanePolarDialog.cpp	/^    NAME,$/;"	e	enum:final::Controls	file:
NAME	src/Dialogs/Settings/dlgConfigInfoboxes.cpp	/^    NAME, INFOBOX, CONTENT, DESCRIPTION$/;"	e	enum:final::Controls	file:
NAME	src/Dialogs/Task/TargetDialog.cpp	/^    NAME,$/;"	e	enum:TargetWidget::Buttons	file:
NAME	src/Dialogs/Waypoint/WaypointList.cpp	/^  NAME,$/;"	e	enum:Controls	file:
NAME	src/Dialogs/Waypoint/dlgWaypointEdit.cpp	/^    NAME,$/;"	e	enum:final::Rows	file:
NAME	src/Renderer/WaypointRendererSettings.hpp	/^    NAME = 0,$/;"	m	class:WaypointRendererSettings::DisplayTextType
NAME_LENGTH	src/Waypoint/WaypointFilter.hpp	/^  static constexpr size_t NAME_LENGTH = 10;$/;"	m	struct:WaypointFilter
NAME_SIZE	src/Sizes.h	5;"	d
NARROWS	src/Gauge/GaugeVario.hpp	/^  static constexpr unsigned NARROWS = 3;$/;"	m	class:GaugeVario
NAUTICAL_MILES	src/Units/Unit.hpp	/^  NAUTICAL_MILES,$/;"	m	class:Unit
NAVWarn	src/Device/Parser.cpp	/^NAVWarn(char c)$/;"	f	file:
NAV_DIJKSTRA_HPP	src/Engine/PathSolvers/NavDijkstra.hpp	25;"	d
NEAREST_AIRSPACE_HPP	src/Airspace/NearestAirspace.hpp	25;"	d
NEARZERO	src/Topography/shapelib/mapprimitive.c	50;"	d	file:
NEGATIVE	src/NMEA/SwitchState.hpp	/^    NEGATIVE,$/;"	m	class:SwitchState::FlapPosition
NEONAlphaPixelOperations	src/ui/canvas/memory/NEON.hpp	/^  constexpr NEONAlphaPixelOperations(uint8_t _alpha):alpha(_alpha) {}$/;"	f	class:NEONAlphaPixelOperations
NEONAlphaPixelOperations	src/ui/canvas/memory/NEON.hpp	/^class NEONAlphaPixelOperations {$/;"	c
NEONBitOrPixelOperations	src/ui/canvas/memory/NEON.hpp	/^class NEONBitOrPixelOperations {$/;"	c
NEONBytesTwice	src/ui/canvas/memory/NEON.hpp	/^struct NEONBytesTwice {$/;"	s
NEONTransparentPixelOperations	src/ui/canvas/memory/NEON.hpp	/^  constexpr NEONTransparentPixelOperations(Luminosity8 _key)$/;"	f	class:NEONTransparentPixelOperations
NEONTransparentPixelOperations	src/ui/canvas/memory/NEON.hpp	/^class NEONTransparentPixelOperations {$/;"	c
NETCOUPE_HPP	src/Engine/Contest/Solvers/NetCoupe.hpp	24;"	d
NETWORK	src/Kobo/KoboMenu.cpp	/^  NETWORK,$/;"	e	enum:Buttons	file:
NET_ADDRESS_INFO_HXX	src/net/AddressInfo.hxx	31;"	d
NET_COUPE	src/Engine/Contest/Settings.hpp	/^  NET_COUPE,$/;"	m	class:Contest
NET_HOST_PARSER_HXX	src/net/HostParser.hxx	34;"	d
NET_HTTP_FORMDATA_HPP	src/net/http/FormData.hpp	25;"	d
NET_HTTP_RESPONSE_HANDLER_HPP	src/net/http/Handler.hpp	25;"	d
NET_RESOLVER_HXX	src/net/Resolver.hxx	34;"	d
NET_TO_BUFFER_HPP	src/net/http/ToBuffer.hpp	25;"	d
NET_TO_FILE_HPP	src/net/http/ToFile.hpp	25;"	d
NET_TO_STRING_HXX	src/net/ToString.hxx	31;"	d
NEUTRAL	src/NMEA/SwitchState.hpp	/^    NEUTRAL,$/;"	m	class:SwitchState::FlapPosition
NEW_TASK	src/Dialogs/Task/Manager/TaskActionsPanel.hpp	/^    NEW_TASK,$/;"	e	enum:TaskActionsPanel::Controls
NEXT	src/Dialogs/Task/TargetDialog.cpp	/^    NEXT,$/;"	e	enum:TargetWidget::Buttons	file:
NEXT	src/Widget/ArrowPagerWidget.hpp	/^    NEXT,$/;"	e	enum:ArrowPagerWidget::Buttons
NEXTVERT	src/Topography/shapelib/mapsearch.c	42;"	d	file:
NEXT_ARROW	src/InfoBoxes/Content/Type.hpp	/^    NEXT_ARROW,$/;"	e	enum:InfoBoxFactory::Type
NEXT_PAGE	src/Form/DataField/ComboList.hpp	/^    static constexpr int NEXT_PAGE = -800001;$/;"	m	struct:ComboList::Item
NEXT_RADIAL	src/InfoBoxes/Content/Type.hpp	/^    NEXT_RADIAL,$/;"	e	enum:InfoBoxFactory::Type
NE_COUNT	src/Input/InputQueue.hpp	/^  NE_COUNT = 132, \/\/ How many we have for arrays etc \/\/ XXX Increased arbitrarily for duplicates above$/;"	e	enum:__anon171
NE_DOWN_IN_ACK	src/Input/InputQueue.hpp	/^  NE_DOWN_IN_ACK=                       8,$/;"	e	enum:__anon171
NE_DOWN_IN_AIRBRAKELOCKED	src/Input/InputQueue.hpp	/^  NE_DOWN_IN_AIRBRAKELOCKED=            21,$/;"	e	enum:__anon171
NE_DOWN_IN_AIRBRAKENOTLOCKED	src/Input/InputQueue.hpp	/^  NE_DOWN_IN_AIRBRAKENOTLOCKED=         6,$/;"	e	enum:__anon171
NE_DOWN_IN_AUX	src/Input/InputQueue.hpp	/^  NE_DOWN_IN_AUX=                       7,$/;"	e	enum:__anon171
NE_DOWN_IN_CIRCLING_FLARM	src/Input/InputQueue.hpp	/^  NE_DOWN_IN_CIRCLING_FLARM=            11,$/;"	e	enum:__anon171
NE_DOWN_IN_CIRCLING_PDA	src/Input/InputQueue.hpp	/^  NE_DOWN_IN_CIRCLING_PDA=              10,$/;"	e	enum:__anon171
NE_DOWN_IN_FLAP_NEG	src/Input/InputQueue.hpp	/^  NE_DOWN_IN_FLAP_NEG=                  2,$/;"	e	enum:__anon171
NE_DOWN_IN_FLAP_POS	src/Input/InputQueue.hpp	/^  NE_DOWN_IN_FLAP_POS=                  0,$/;"	e	enum:__anon171
NE_DOWN_IN_FLAP_ZERO	src/Input/InputQueue.hpp	/^  NE_DOWN_IN_FLAP_ZERO=                 1,$/;"	e	enum:__anon171
NE_DOWN_IN_FLYING	src/Input/InputQueue.hpp	/^  NE_DOWN_IN_FLYING=                    12,$/;"	e	enum:__anon171
NE_DOWN_IN_GEAR_EXTENDED	src/Input/InputQueue.hpp	/^  NE_DOWN_IN_GEAR_EXTENDED=             5,$/;"	e	enum:__anon171
NE_DOWN_IN_GEAR_RETRACTED	src/Input/InputQueue.hpp	/^  NE_DOWN_IN_GEAR_RETRACTED=            4,$/;"	e	enum:__anon171
NE_DOWN_IN_NOTFLYING	src/Input/InputQueue.hpp	/^  NE_DOWN_IN_NOTFLYING=                 13,$/;"	e	enum:__anon171
NE_DOWN_IN_PDA_CONNECTED	src/Input/InputQueue.hpp	/^  NE_DOWN_IN_PDA_CONNECTED=             14,$/;"	e	enum:__anon171
NE_DOWN_IN_REP	src/Input/InputQueue.hpp	/^  NE_DOWN_IN_REP=                       9,$/;"	e	enum:__anon171
NE_DOWN_IN_SC	src/Input/InputQueue.hpp	/^  NE_DOWN_IN_SC=                        3,$/;"	e	enum:__anon171
NE_DOWN_IN_STALL	src/Input/InputQueue.hpp	/^  NE_DOWN_IN_STALL=                     20,$/;"	e	enum:__anon171
NE_DOWN_IN_TAKINGOFF	src/Input/InputQueue.hpp	/^  NE_DOWN_IN_TAKINGOFF=                 22,$/;"	e	enum:__anon171
NE_DOWN_IN_USERSWDOWN	src/Input/InputQueue.hpp	/^  NE_DOWN_IN_USERSWDOWN=                25,$/;"	e	enum:__anon171
NE_DOWN_IN_USERSWMIDDLE	src/Input/InputQueue.hpp	/^  NE_DOWN_IN_USERSWMIDDLE=              24,$/;"	e	enum:__anon171
NE_DOWN_IN_USERSWUP	src/Input/InputQueue.hpp	/^  NE_DOWN_IN_USERSWUP=                  23,$/;"	e	enum:__anon171
NE_DOWN_IN_VELOCITY_AIRBRAKE	src/Input/InputQueue.hpp	/^  NE_DOWN_IN_VELOCITY_AIRBRAKE=         17,$/;"	e	enum:__anon171
NE_DOWN_IN_VELOCITY_FLAP	src/Input/InputQueue.hpp	/^  NE_DOWN_IN_VELOCITY_FLAP=             16,$/;"	e	enum:__anon171
NE_DOWN_IN_VELOCITY_MANOEUVERING	src/Input/InputQueue.hpp	/^  NE_DOWN_IN_VELOCITY_MANOEUVERING=     15,$/;"	e	enum:__anon171
NE_DOWN_IN_VELOCITY_NEVEREXCEED	src/Input/InputQueue.hpp	/^  NE_DOWN_IN_VELOCITY_NEVEREXCEED=      19,$/;"	e	enum:__anon171
NE_DOWN_IN_VELOCITY_TERRAIN	src/Input/InputQueue.hpp	/^  NE_DOWN_IN_VELOCITY_TERRAIN=          18,$/;"	e	enum:__anon171
NE_DOWN_OUT_AIRBRAKE_TAKEOFF	src/Input/InputQueue.hpp	/^  NE_DOWN_OUT_AIRBRAKE_TAKEOFF=         40,$/;"	e	enum:__anon171
NE_DOWN_OUT_CIRCLING	src/Input/InputQueue.hpp	/^  NE_DOWN_OUT_CIRCLING=                 32,$/;"	e	enum:__anon171
NE_DOWN_OUT_FLAP_LANDING	src/Input/InputQueue.hpp	/^  NE_DOWN_OUT_FLAP_LANDING=             39,$/;"	e	enum:__anon171
NE_DOWN_OUT_GEAR_LANDING	src/Input/InputQueue.hpp	/^  NE_DOWN_OUT_GEAR_LANDING=             38,$/;"	e	enum:__anon171
NE_DOWN_OUT_STALL	src/Input/InputQueue.hpp	/^  NE_DOWN_OUT_STALL=                    41,$/;"	e	enum:__anon171
NE_DOWN_OUT_VELOCITY_AIRBRAKE	src/Input/InputQueue.hpp	/^  NE_DOWN_OUT_VELOCITY_AIRBRAKE=        35,$/;"	e	enum:__anon171
NE_DOWN_OUT_VELOCITY_FLAP	src/Input/InputQueue.hpp	/^  NE_DOWN_OUT_VELOCITY_FLAP=            34,$/;"	e	enum:__anon171
NE_DOWN_OUT_VELOCITY_MANOEUVERING	src/Input/InputQueue.hpp	/^  NE_DOWN_OUT_VELOCITY_MANOEUVERING=    33,$/;"	e	enum:__anon171
NE_DOWN_OUT_VELOCITY_NEVEREXCEED	src/Input/InputQueue.hpp	/^  NE_DOWN_OUT_VELOCITY_NEVEREXCEED=     37,$/;"	e	enum:__anon171
NE_DOWN_OUT_VELOCITY_TERRAIN	src/Input/InputQueue.hpp	/^  NE_DOWN_OUT_VELOCITY_TERRAIN=         36,$/;"	e	enum:__anon171
NE_UNUSED_0	src/Input/InputQueue.hpp	/^  NE_UNUSED_0 =                      26,$/;"	e	enum:__anon171
NE_UNUSED_1	src/Input/InputQueue.hpp	/^  NE_UNUSED_1 =                      27,$/;"	e	enum:__anon171
NE_UNUSED_10	src/Input/InputQueue.hpp	/^  NE_UNUSED_10 =                      46,$/;"	e	enum:__anon171
NE_UNUSED_11	src/Input/InputQueue.hpp	/^  NE_UNUSED_11 =                      47,$/;"	e	enum:__anon171
NE_UNUSED_12	src/Input/InputQueue.hpp	/^  NE_UNUSED_12 =                      48,$/;"	e	enum:__anon171
NE_UNUSED_13	src/Input/InputQueue.hpp	/^  NE_UNUSED_13 =                      49,$/;"	e	enum:__anon171
NE_UNUSED_14	src/Input/InputQueue.hpp	/^  NE_UNUSED_14 =                      50,$/;"	e	enum:__anon171
NE_UNUSED_15	src/Input/InputQueue.hpp	/^  NE_UNUSED_15 =                      51,$/;"	e	enum:__anon171
NE_UNUSED_16	src/Input/InputQueue.hpp	/^  NE_UNUSED_16 =                      52,$/;"	e	enum:__anon171
NE_UNUSED_17	src/Input/InputQueue.hpp	/^  NE_UNUSED_17 =                      53,$/;"	e	enum:__anon171
NE_UNUSED_18	src/Input/InputQueue.hpp	/^  NE_UNUSED_18 =                      54,$/;"	e	enum:__anon171
NE_UNUSED_19	src/Input/InputQueue.hpp	/^  NE_UNUSED_19 =                      55,$/;"	e	enum:__anon171
NE_UNUSED_2	src/Input/InputQueue.hpp	/^  NE_UNUSED_2 =                      28,$/;"	e	enum:__anon171
NE_UNUSED_20	src/Input/InputQueue.hpp	/^  NE_UNUSED_20 =                      56,$/;"	e	enum:__anon171
NE_UNUSED_21	src/Input/InputQueue.hpp	/^  NE_UNUSED_21 =                      57,$/;"	e	enum:__anon171
NE_UNUSED_22	src/Input/InputQueue.hpp	/^  NE_UNUSED_22 =                      58,$/;"	e	enum:__anon171
NE_UNUSED_23	src/Input/InputQueue.hpp	/^  NE_UNUSED_23 =                      59,$/;"	e	enum:__anon171
NE_UNUSED_24	src/Input/InputQueue.hpp	/^  NE_UNUSED_24 =                      60,$/;"	e	enum:__anon171
NE_UNUSED_25	src/Input/InputQueue.hpp	/^  NE_UNUSED_25 =                      61,$/;"	e	enum:__anon171
NE_UNUSED_26	src/Input/InputQueue.hpp	/^  NE_UNUSED_26 =                      62,$/;"	e	enum:__anon171
NE_UNUSED_27	src/Input/InputQueue.hpp	/^  NE_UNUSED_27 =                      63,$/;"	e	enum:__anon171
NE_UNUSED_28	src/Input/InputQueue.hpp	/^  NE_UNUSED_28 =                      90,$/;"	e	enum:__anon171
NE_UNUSED_29	src/Input/InputQueue.hpp	/^  NE_UNUSED_29 =                      91,$/;"	e	enum:__anon171
NE_UNUSED_3	src/Input/InputQueue.hpp	/^  NE_UNUSED_3 =                      29,$/;"	e	enum:__anon171
NE_UNUSED_30	src/Input/InputQueue.hpp	/^  NE_UNUSED_30 =                      92,$/;"	e	enum:__anon171
NE_UNUSED_31	src/Input/InputQueue.hpp	/^  NE_UNUSED_31 =                      93,$/;"	e	enum:__anon171
NE_UNUSED_32	src/Input/InputQueue.hpp	/^  NE_UNUSED_32 =                      94,$/;"	e	enum:__anon171
NE_UNUSED_33	src/Input/InputQueue.hpp	/^  NE_UNUSED_33 =                      95,$/;"	e	enum:__anon171
NE_UNUSED_34	src/Input/InputQueue.hpp	/^  NE_UNUSED_34 =                      106,$/;"	e	enum:__anon171
NE_UNUSED_35	src/Input/InputQueue.hpp	/^  NE_UNUSED_35 =                      107,$/;"	e	enum:__anon171
NE_UNUSED_36	src/Input/InputQueue.hpp	/^  NE_UNUSED_36 =                      108,$/;"	e	enum:__anon171
NE_UNUSED_37	src/Input/InputQueue.hpp	/^  NE_UNUSED_37 =                      108,	\/\/ XXX Duplicate of above$/;"	e	enum:__anon171
NE_UNUSED_38	src/Input/InputQueue.hpp	/^  NE_UNUSED_38 =                      109,$/;"	e	enum:__anon171
NE_UNUSED_39	src/Input/InputQueue.hpp	/^  NE_UNUSED_39 =                      110,$/;"	e	enum:__anon171
NE_UNUSED_4	src/Input/InputQueue.hpp	/^  NE_UNUSED_4 =                      30,$/;"	e	enum:__anon171
NE_UNUSED_40	src/Input/InputQueue.hpp	/^  NE_UNUSED_40 =                      111,$/;"	e	enum:__anon171
NE_UNUSED_41	src/Input/InputQueue.hpp	/^  NE_UNUSED_41 =                      112,$/;"	e	enum:__anon171
NE_UNUSED_42	src/Input/InputQueue.hpp	/^  NE_UNUSED_42 =                      113,$/;"	e	enum:__anon171
NE_UNUSED_43	src/Input/InputQueue.hpp	/^  NE_UNUSED_43 =                      114,$/;"	e	enum:__anon171
NE_UNUSED_44	src/Input/InputQueue.hpp	/^  NE_UNUSED_44 =                      115,$/;"	e	enum:__anon171
NE_UNUSED_45	src/Input/InputQueue.hpp	/^  NE_UNUSED_45 =                      116,$/;"	e	enum:__anon171
NE_UNUSED_46	src/Input/InputQueue.hpp	/^  NE_UNUSED_46 =                      117,$/;"	e	enum:__anon171
NE_UNUSED_47	src/Input/InputQueue.hpp	/^  NE_UNUSED_47 =                      118,$/;"	e	enum:__anon171
NE_UNUSED_48	src/Input/InputQueue.hpp	/^  NE_UNUSED_48 =                      119,$/;"	e	enum:__anon171
NE_UNUSED_49	src/Input/InputQueue.hpp	/^  NE_UNUSED_49 =                      120,$/;"	e	enum:__anon171
NE_UNUSED_5	src/Input/InputQueue.hpp	/^  NE_UNUSED_5 =                      31,$/;"	e	enum:__anon171
NE_UNUSED_50	src/Input/InputQueue.hpp	/^  NE_UNUSED_50 =                      121,$/;"	e	enum:__anon171
NE_UNUSED_51	src/Input/InputQueue.hpp	/^  NE_UNUSED_51 =                      122,$/;"	e	enum:__anon171
NE_UNUSED_52	src/Input/InputQueue.hpp	/^  NE_UNUSED_52 =                      122,	\/\/ XXX Duplicate of above$/;"	e	enum:__anon171
NE_UNUSED_53	src/Input/InputQueue.hpp	/^  NE_UNUSED_53 =                      123,$/;"	e	enum:__anon171
NE_UNUSED_54	src/Input/InputQueue.hpp	/^  NE_UNUSED_54 =                      124,$/;"	e	enum:__anon171
NE_UNUSED_55	src/Input/InputQueue.hpp	/^  NE_UNUSED_55 =                      125,$/;"	e	enum:__anon171
NE_UNUSED_56	src/Input/InputQueue.hpp	/^  NE_UNUSED_56 =                      126,$/;"	e	enum:__anon171
NE_UNUSED_57	src/Input/InputQueue.hpp	/^  NE_UNUSED_57 =                      127,$/;"	e	enum:__anon171
NE_UNUSED_6	src/Input/InputQueue.hpp	/^  NE_UNUSED_6 =                      42,$/;"	e	enum:__anon171
NE_UNUSED_7	src/Input/InputQueue.hpp	/^  NE_UNUSED_7 =                      43,$/;"	e	enum:__anon171
NE_UNUSED_8	src/Input/InputQueue.hpp	/^  NE_UNUSED_8 =                      44,$/;"	e	enum:__anon171
NE_UNUSED_9	src/Input/InputQueue.hpp	/^  NE_UNUSED_9 =                      45,$/;"	e	enum:__anon171
NE_UP_IN_ACK	src/Input/InputQueue.hpp	/^  NE_UP_IN_ACK=                       72,$/;"	e	enum:__anon171
NE_UP_IN_AIRBRAKELOCKED	src/Input/InputQueue.hpp	/^  NE_UP_IN_AIRBRAKELOCKED=            85,$/;"	e	enum:__anon171
NE_UP_IN_AIRBRAKENOTLOCKED	src/Input/InputQueue.hpp	/^  NE_UP_IN_AIRBRAKENOTLOCKED=         70,$/;"	e	enum:__anon171
NE_UP_IN_AUX	src/Input/InputQueue.hpp	/^  NE_UP_IN_AUX=                       71,$/;"	e	enum:__anon171
NE_UP_IN_CIRCLING_FLARM	src/Input/InputQueue.hpp	/^  NE_UP_IN_CIRCLING_FLARM=            75,$/;"	e	enum:__anon171
NE_UP_IN_CIRCLING_PDA	src/Input/InputQueue.hpp	/^  NE_UP_IN_CIRCLING_PDA=              74,$/;"	e	enum:__anon171
NE_UP_IN_FLAP_NEG	src/Input/InputQueue.hpp	/^  NE_UP_IN_FLAP_NEG=                  66,$/;"	e	enum:__anon171
NE_UP_IN_FLAP_POS	src/Input/InputQueue.hpp	/^  NE_UP_IN_FLAP_POS=                  64,$/;"	e	enum:__anon171
NE_UP_IN_FLAP_ZERO	src/Input/InputQueue.hpp	/^  NE_UP_IN_FLAP_ZERO=                 65,$/;"	e	enum:__anon171
NE_UP_IN_FLYING	src/Input/InputQueue.hpp	/^  NE_UP_IN_FLYING=                    76,$/;"	e	enum:__anon171
NE_UP_IN_GEAR_EXTENDED	src/Input/InputQueue.hpp	/^  NE_UP_IN_GEAR_EXTENDED=             69,$/;"	e	enum:__anon171
NE_UP_IN_GEAR_RETRACTED	src/Input/InputQueue.hpp	/^  NE_UP_IN_GEAR_RETRACTED=            68,$/;"	e	enum:__anon171
NE_UP_IN_NOTFLYING	src/Input/InputQueue.hpp	/^  NE_UP_IN_NOTFLYING=                 77,$/;"	e	enum:__anon171
NE_UP_IN_PDA_CONNECTED	src/Input/InputQueue.hpp	/^  NE_UP_IN_PDA_CONNECTED=             78,$/;"	e	enum:__anon171
NE_UP_IN_REP	src/Input/InputQueue.hpp	/^  NE_UP_IN_REP=                       73,$/;"	e	enum:__anon171
NE_UP_IN_SC	src/Input/InputQueue.hpp	/^  NE_UP_IN_SC=                        67,$/;"	e	enum:__anon171
NE_UP_IN_STALL	src/Input/InputQueue.hpp	/^  NE_UP_IN_STALL=                     84,$/;"	e	enum:__anon171
NE_UP_IN_TAKINGOFF	src/Input/InputQueue.hpp	/^  NE_UP_IN_TAKINGOFF=                 86,$/;"	e	enum:__anon171
NE_UP_IN_USERSWDOWN	src/Input/InputQueue.hpp	/^  NE_UP_IN_USERSWDOWN=                89,$/;"	e	enum:__anon171
NE_UP_IN_USERSWMIDDLE	src/Input/InputQueue.hpp	/^  NE_UP_IN_USERSWMIDDLE=              88,$/;"	e	enum:__anon171
NE_UP_IN_USERSWUP	src/Input/InputQueue.hpp	/^  NE_UP_IN_USERSWUP=                  87,$/;"	e	enum:__anon171
NE_UP_IN_VELOCITY_AIRBRAKE	src/Input/InputQueue.hpp	/^  NE_UP_IN_VELOCITY_AIRBRAKE=         81,$/;"	e	enum:__anon171
NE_UP_IN_VELOCITY_FLAP	src/Input/InputQueue.hpp	/^  NE_UP_IN_VELOCITY_FLAP=             80,$/;"	e	enum:__anon171
NE_UP_IN_VELOCITY_MANOEUVERING	src/Input/InputQueue.hpp	/^  NE_UP_IN_VELOCITY_MANOEUVERING=     79,$/;"	e	enum:__anon171
NE_UP_IN_VELOCITY_NEVEREXCEED	src/Input/InputQueue.hpp	/^  NE_UP_IN_VELOCITY_NEVEREXCEED=      83,$/;"	e	enum:__anon171
NE_UP_IN_VELOCITY_TERRAIN	src/Input/InputQueue.hpp	/^  NE_UP_IN_VELOCITY_TERRAIN=          82,$/;"	e	enum:__anon171
NE_UP_OUT_AIRBRAKE_TAKEOFF	src/Input/InputQueue.hpp	/^  NE_UP_OUT_AIRBRAKE_TAKEOFF=         104,$/;"	e	enum:__anon171
NE_UP_OUT_CIRCLING	src/Input/InputQueue.hpp	/^  NE_UP_OUT_CIRCLING=                 96,$/;"	e	enum:__anon171
NE_UP_OUT_FLAP_LANDING	src/Input/InputQueue.hpp	/^  NE_UP_OUT_FLAP_LANDING=             103,$/;"	e	enum:__anon171
NE_UP_OUT_GEAR_LANDING	src/Input/InputQueue.hpp	/^  NE_UP_OUT_GEAR_LANDING=             102,$/;"	e	enum:__anon171
NE_UP_OUT_STALL	src/Input/InputQueue.hpp	/^  NE_UP_OUT_STALL=                    105,$/;"	e	enum:__anon171
NE_UP_OUT_VELOCITY_AIRBRAKE	src/Input/InputQueue.hpp	/^  NE_UP_OUT_VELOCITY_AIRBRAKE=        99,$/;"	e	enum:__anon171
NE_UP_OUT_VELOCITY_FLAP	src/Input/InputQueue.hpp	/^  NE_UP_OUT_VELOCITY_FLAP=            98,$/;"	e	enum:__anon171
NE_UP_OUT_VELOCITY_MANOEUVERING	src/Input/InputQueue.hpp	/^  NE_UP_OUT_VELOCITY_MANOEUVERING=    97,$/;"	e	enum:__anon171
NE_UP_OUT_VELOCITY_NEVEREXCEED	src/Input/InputQueue.hpp	/^  NE_UP_OUT_VELOCITY_NEVEREXCEED=     101,$/;"	e	enum:__anon171
NE_UP_OUT_VELOCITY_TERRAIN	src/Input/InputQueue.hpp	/^  NE_UP_OUT_VELOCITY_TERRAIN=         100,$/;"	e	enum:__anon171
NLineReader	src/io/LineReader.hpp	/^class NLineReader : public LineReader<char> {};$/;"	c
NLineReader	src/io/LineReader.hpp	/^class NLineReader : public TLineReader {};$/;"	c
NMEA	src/Device/Driver/CAI302/Internal.hpp	/^    NMEA,$/;"	m	class:CAI302Device::Mode
NMEA	src/Device/Driver/FLARM/Device.hpp	/^    NMEA,$/;"	m	class:FlarmDevice::Mode
NMEA	src/Device/Driver/LX/Internal.hpp	/^    NMEA,$/;"	m	class:LXDevice::Mode
NMEA	src/Dialogs/Device/LX/NanoConfigWidget.hpp	/^    NMEA,$/;"	e	enum:final::Controls
NMEAChecksum	src/Device/Parser.cpp	/^NMEAParser::NMEAChecksum(const char *string)$/;"	f	class:NMEAParser
NMEAChecksum	src/NMEA/Checksum.hpp	/^NMEAChecksum(const char *p)$/;"	f
NMEAChecksum	src/NMEA/Checksum.hpp	/^NMEAChecksum(const char *p, unsigned length)$/;"	f
NMEAInfo	src/NMEA/Info.hpp	/^struct NMEAInfo {$/;"	s
NMEAInputLine	src/NMEA/InputLine.cpp	/^NMEAInputLine::NMEAInputLine(const char* line):$/;"	f	class:NMEAInputLine
NMEAInputLine	src/NMEA/InputLine.hpp	/^class NMEAInputLine: public CSVLine {$/;"	c
NMEALogger	src/Logger/NMEALogger.cpp	/^namespace NMEALogger$/;"	n	file:
NMEALogger	src/Logger/NMEALogger.hpp	/^namespace NMEALogger$/;"	n
NMEAParser	src/Device/Parser.cpp	/^NMEAParser::NMEAParser()$/;"	f	class:NMEAParser
NMEAParser	src/Device/Parser.hpp	/^class NMEAParser$/;"	c
NMEA_OUT	src/Device/Driver.hpp	/^    NMEA_OUT = 0x1,$/;"	e	enum:DeviceRegister::__anon158
NMEA_Queue	src/Input/InputQueue.cpp	/^static int NMEA_Queue[MAX_NMEA_QUEUE];$/;"	v	file:
NMEA_REPLAY_HPP	src/Replay/NmeaReplay.hpp	25;"	d
NOAADetailsWidget	src/Dialogs/Weather/NOAADetails.cpp	/^  NOAADetailsWidget(WndForm &_dialog, NOAAStore::iterator _station)$/;"	f	class:final
NOAADownloader	src/Weather/NOAADownloader.cpp	/^namespace NOAADownloader {$/;"	n	file:
NOAADownloader	src/Weather/NOAADownloader.hpp	/^namespace NOAADownloader {$/;"	n
NOAAFormatter	src/Weather/NOAAFormatter.hpp	/^namespace NOAAFormatter {$/;"	n
NOAALineSplitter	src/Weather/NOAAFormatter.cpp	/^  NOAALineSplitter(const TCHAR *_start):start(_start) {}$/;"	f	class:NOAALineSplitter
NOAALineSplitter	src/Weather/NOAAFormatter.cpp	/^class NOAALineSplitter$/;"	c	file:
NOAAListRenderer	src/Renderer/NOAAListRenderer.hpp	/^namespace NOAAListRenderer$/;"	n
NOAALook	src/Look/NOAALook.hpp	/^struct NOAALook {$/;"	s
NOAAStore	src/Weather/NOAAStore.hpp	/^class NOAAStore$/;"	c
NOAAUpdater	src/Weather/NOAAUpdater.hpp	/^namespace NOAAUpdater {$/;"	n
NOAA_DOWNLOADER_HPP	src/Weather/NOAADownloader.hpp	25;"	d
NOAA_FORMATTER_HPP	src/Weather/NOAAFormatter.hpp	25;"	d
NOAA_GLUE_HPP	src/Weather/NOAAGlue.hpp	25;"	d
NOAA_STORE_HPP	src/Weather/NOAAStore.hpp	25;"	d
NOAA_UPDATER_HPP	src/Weather/NOAAUpdater.hpp	25;"	d
NOBATTERY	src/Hardware/Battery.hpp	/^      NOBATTERY,$/;"	e	enum:Power::Battery::batterystatus
NOGLIDER	src/Engine/Airspace/AirspaceClass.hpp	/^  NOGLIDER,$/;"	e	enum:uint8_t
NONCOPYABLE_HPP	src/util/NonCopyable.hpp	23;"	d
NONE	src/Device/Config.hpp	/^    NONE = 0,$/;"	m	class:DeviceConfig::PressureUse
NONE	src/DisplayMode.hpp	/^  NONE,$/;"	m	class:DisplayMode
NONE	src/Engine/Contest/Settings.hpp	/^  NONE,$/;"	m	class:Contest
NONE	src/Engine/Route/Config.hpp	/^    NONE,$/;"	m	class:RoutePlannerConfig::Mode
NONE	src/Engine/Task/TaskType.hpp	/^  NONE,$/;"	m	class:TaskType
NONE	src/Engine/Waypoint/Origin.hpp	/^  NONE,$/;"	m	class:WaypointOrigin
NONE	src/FLARM/Color.hpp	/^  NONE,$/;"	m	class:FlarmColor
NONE	src/FLARM/Status.hpp	/^    NONE = 0,$/;"	m	class:FlarmStatus::GPSStatus
NONE	src/FLARM/Traffic.hpp	/^    NONE = 0,$/;"	m	class:FlarmTraffic::AlarmType
NONE	src/Form/List.hpp	/^    NONE,$/;"	m	class:ListControl::DragMode
NONE	src/Geo/AltitudeReference.hpp	/^  NONE = -1,$/;"	m	class:AltitudeReference
NONE	src/MapSettings.hpp	/^  NONE,$/;"	m	class:MapShiftBias
NONE	src/NMEA/Derived.hpp	/^    NONE,$/;"	m	class:DerivedInfo::WindSource
NONE	src/Renderer/AirspaceRendererSettings.hpp	/^    NONE,$/;"	m	class:AirspaceClassRendererSettings::FillMode
NONE	src/Renderer/AirspaceRendererSettings.hpp	/^    NONE,$/;"	m	class:AirspaceRendererSettings::FillMode
NONE	src/Renderer/AirspaceRendererSettings.hpp	/^    NONE,$/;"	m	class:AirspaceRendererSettings::LabelSelection
NONE	src/Renderer/ChartRenderer.hpp	/^    NONE,$/;"	e	enum:ChartRenderer::UnitFormat
NONE	src/Renderer/TaskPointRenderer.hpp	/^    NONE,$/;"	e	enum:TaskPointRenderer::TargetVisibility
NONE	src/Renderer/WaypointRendererSettings.hpp	/^    NONE = 0,$/;"	m	class:WaypointRendererSettings::ArrivalHeightDisplay
NONE	src/Renderer/WaypointRendererSettings.hpp	/^    NONE,$/;"	m	class:WaypointRendererSettings::DisplayTextType
NONE	src/Renderer/WaypointRendererSettings.hpp	/^    NONE,$/;"	m	class:WaypointRendererSettings::LabelSelection
NONE	src/Topography/ShapeRenderer.hpp	/^  enum { NONE, OUTLINE, SOLID } mode;$/;"	e	enum:ShapeRenderer::__anon82
NONE	src/Units/Group.hpp	/^  NONE,$/;"	m	class:UnitGroup
NONE	src/Widget/ManagedWidget.hpp	/^    NONE,$/;"	m	class:ManagedWidget::State
NON_FAI_OZS	src/Engine/Task/Factory/ValidationError.hpp	/^  NON_FAI_OZS,$/;"	m	class:TaskValidationErrorType
NON_MAT_OZS	src/Engine/Task/Factory/ValidationError.hpp	/^  NON_MAT_OZS,$/;"	m	class:TaskValidationErrorType
NOP	src/Device/Port/K6BtPort.hpp	/^  static constexpr uint8_t NOP = 0x00;$/;"	m	class:K6BtPort
NOP	src/ui/event/shared/Event.hpp	/^    NOP,$/;"	e	enum:UI::Event::Type
NORMAL	src/Device/Driver/LX/LX1600.hpp	/^    NORMAL = 0,$/;"	m	class:LX1600::SCControlMode
NORMAL	src/Engine/Waypoint/Waypoint.hpp	/^    NORMAL,$/;"	m	class:Waypoint::Type
NORMALIZE_BUFFER_SIZE	src/Engine/Waypoint/Waypoints.cpp	/^static constexpr std::size_t NORMALIZE_BUFFER_SIZE = 4096;$/;"	v	file:
NORTH_SOUTH	src/Form/DigitEntry.hpp	/^      NORTH_SOUTH,$/;"	m	class:CoordinateFormat::Column::Type
NORTH_UP	src/MapSettings.hpp	/^  NORTH_UP,$/;"	m	class:MapOrientation
NOSENSOR	src/Android/NativeView.hpp	/^    NOSENSOR = 5,$/;"	m	class:NativeView::ScreenOrientation
NOTASK	src/Task/MapTaskManager.hpp	/^    NOTASK,$/;"	e	enum:MapTaskManager::TaskEditResult
NOTE1	src/zzip/__debug.h	53;"	d
NOTE2	src/zzip/__debug.h	54;"	d
NOTE3	src/zzip/__debug.h	55;"	d
NOTE4	src/zzip/__debug.h	56;"	d
NOTE5	src/zzip/__debug.h	57;"	d
NOTE6	src/zzip/__debug.h	58;"	d
NOTHING	src/PageSettings.hpp	/^    NOTHING,$/;"	m	class:PageLayout::Bottom
NOT_LOCKED	src/NMEA/SwitchState.hpp	/^    NOT_LOCKED,$/;"	m	class:SwitchState::AirbrakeState
NO_ARROW	src/MapSettings.hpp	/^  NO_ARROW,$/;"	m	class:WindArrowStyle
NO_ERROR	src/FLARM/Error.hpp	36;"	d
NO_FIX	src/NMEA/GPSState.hpp	/^  NO_FIX,$/;"	m	class:FixQuality
NO_MAIN_MENU	src/Form/TabMenuDisplay.hpp	/^    static constexpr unsigned NO_MAIN_MENU = 997;$/;"	m	struct:final::MenuTabIndex
NO_RSP	src/Device/Driver/KRT2.cpp	/^  static constexpr char NO_RSP = 0; \/\/!< No response received yet.$/;"	m	class:final	file:
NO_SCREEN	src/net/State.cpp	27;"	d	file:
NO_SCREEN	src/system/RunFile.cpp	28;"	d	file:
NO_SUB_MENU	src/Form/TabMenuDisplay.hpp	/^    static constexpr unsigned NO_SUB_MENU = 998;$/;"	m	struct:final::MenuTabIndex
NO_TILE	src/Terrain/RasterTileCache.hpp	/^    static constexpr uint16_t NO_TILE = (uint16_t)-1;$/;"	m	struct:RasterTileCache::MarkerSegmentInfo
NO_TIMEOUT	src/Device/Driver.hpp	/^    NO_TIMEOUT = 0x20,$/;"	e	enum:DeviceRegister::__anon158
NO_VALID_FINISH	src/Engine/Task/Factory/ValidationError.hpp	/^  NO_VALID_FINISH,$/;"	m	class:TaskValidationErrorType
NO_VALID_START	src/Engine/Task/Factory/ValidationError.hpp	/^  NO_VALID_START,$/;"	m	class:TaskValidationErrorType
NR_RETRIES	src/Device/Driver/KRT2.cpp	/^  static constexpr unsigned NR_RETRIES = 3; \/\/!< Number of tries to send a command.$/;"	m	class:final	file:
NTP	src/Device/Driver/Volkslogger/vlconv.cpp	/^  unsigned NTP;$/;"	m	class:C_RECORD	file:
NUMAIRSPACEBRUSHES	src/Look/AirspaceLook.hpp	34;"	d
NUMAIRSPACECOLORS	src/Look/AirspaceLook.hpp	33;"	d
NUMBER_OF_VOLTAGES	src/Android/VoltageDevice.hpp	34;"	d
NUMDEV	src/Device/Features.hpp	/^static constexpr unsigned NUMDEV = 4;$/;"	v
NUMDEV	src/Device/Features.hpp	/^static constexpr unsigned NUMDEV = 6;$/;"	v
NUMERIC	src/Renderer/ChartRenderer.hpp	/^    NUMERIC,$/;"	e	enum:ChartRenderer::UnitFormat
NUMSNAILCOLORS	src/Look/TrailLook.hpp	/^  static constexpr unsigned NUMSNAILCOLORS = 15;$/;"	m	struct:TrailLook
NUMTPS	src/Device/Driver/LX/Protocol.hpp	/^  static constexpr unsigned NUMTPS = 12;$/;"	m	namespace:LX
NUM_COLOR_RAMP_LEVELS	src/Terrain/RasterRenderer.hpp	33;"	d
NUM_LEVELS	src/Atmosphere/CuSonde.hpp	/^  static constexpr unsigned NUM_LEVELS = 100;$/;"	m	class:CuSonde
NUM_RAMPS	src/Terrain/TerrainRenderer.cpp	/^static_assert(ARRAY_SIZE(terrain_colors) == TerrainRendererSettings::NUM_RAMPS,$/;"	m	class:TerrainRendererSettings	file:
NUM_RAMPS	src/Terrain/TerrainSettings.hpp	/^  static constexpr unsigned NUM_RAMPS = 15;$/;"	m	struct:TerrainRendererSettings
NUM_SLICES	src/CrossSection/CrossSectionRenderer.hpp	/^  static constexpr unsigned NUM_SLICES = 64;$/;"	m	class:CrossSectionRenderer
NUM_SLICES	src/Engine/ThermalBand/ThermalBand.hpp	/^  static constexpr unsigned NUM_SLICES = 64;$/;"	m	class:ThermalBand
NUM_SLOTS	src/Math/Histogram.hpp	/^  static constexpr std::size_t NUM_SLOTS = 61;$/;"	m	class:Histogram
NUM_TYPES	src/InfoBoxes/Content/Factory.cpp	/^static_assert(ARRAY_SIZE(meta_data) == NUM_TYPES,$/;"	v
NUM_TYPES	src/InfoBoxes/Content/Type.hpp	/^  static constexpr Type NUM_TYPES = e_NUM_TYPES;$/;"	m	namespace:InfoBoxFactory
NUNCHUCK	src/Device/Config.hpp	/^    NUNCHUCK,$/;"	m	class:DeviceConfig::PortType
N_	src/Language/Language.hpp	35;"	d
N_	src/Language/Language.hpp	37;"	d
N_	src/Language/Language.hpp	67;"	d
N_AV	src/Engine/Task/Computer/IncrementalSpeedComputer.hpp	/^  static constexpr unsigned N_AV = 3;$/;"	m	class:IncrementalSpeedComputer
N_BUCKETS	src/event/TimerWheel.hxx	/^	static constexpr std::size_t N_BUCKETS = SPAN \/ RESOLUTION;$/;"	m	class:final
N_KEY_BUCKETS	src/Cloud/Client.hpp	/^  static constexpr size_t N_KEY_BUCKETS = 65521;$/;"	m	class:CloudClientContainer
N_MD5	src/Logger/GRecord.hpp	/^  static constexpr unsigned N_MD5 = 4;$/;"	m	class:GRecord
Name	src/Renderer/WaypointLabelList.hpp	/^    TCHAR Name[NAME_SIZE+1];$/;"	m	struct:WaypointLabelList::Label
Name	src/Units/UnitsStore.cpp	/^  const TCHAR* Name;$/;"	m	struct:UnitStoreItem	file:
Nano	src/Device/Driver/LX/NanoDeclare.hpp	/^namespace Nano {$/;"	n
Nano	src/Device/Driver/LX/NanoLogger.hpp	/^namespace Nano {$/;"	n
Nano	src/Device/Driver/LX/NanoProtocol.hpp	/^namespace Nano {$/;"	n
NanoBeginDeclaration	src/Device/Driver/LX/NanoDeclare.cpp	/^NanoBeginDeclaration(Port &port, OperationEnvironment &env,$/;"	f	file:
NanoConfigWidget	src/Dialogs/Device/LX/NanoConfigWidget.hpp	/^  NanoConfigWidget(const DialogLook &look, LXDevice &_device)$/;"	f	class:final
NanoWriteDecl	src/Device/Driver/LX/NanoDeclare.cpp	/^NanoWriteDecl(Port &port, OperationEnvironment &env, PortNMEAReader &reader,$/;"	f	file:
NanoWriteDeclFormat	src/Device/Driver/LX/NanoDeclare.cpp	/^NanoWriteDeclFormat(Port &port, OperationEnvironment &env,$/;"	f	file:
NanoWriteDeclMeta	src/Device/Driver/LX/NanoDeclare.cpp	/^NanoWriteDeclMeta(Port &port, OperationEnvironment &env,$/;"	f	file:
NanoWriteDeclString	src/Device/Driver/LX/NanoDeclare.cpp	/^NanoWriteDeclString(Port &port, OperationEnvironment &env,$/;"	f	file:
NanoWriteLanding	src/Device/Driver/LX/NanoDeclare.cpp	/^NanoWriteLanding(Port &port, OperationEnvironment &env,$/;"	f	file:
NanoWriteStartDeclaration	src/Device/Driver/LX/NanoDeclare.cpp	/^NanoWriteStartDeclaration(Port &port, OperationEnvironment &env,$/;"	f	file:
NanoWriteTakeoff	src/Device/Driver/LX/NanoDeclare.cpp	/^NanoWriteTakeoff(Port &port, OperationEnvironment &env,$/;"	f	file:
NarrowPathName	src/system/ConvertPathName.hpp	/^  explicit NarrowPathName(Path _value)$/;"	f	class:NarrowPathName
NarrowPathName	src/system/ConvertPathName.hpp	/^class NarrowPathName {$/;"	c
NarrowString	src/util/StaticString.hxx	/^	explicit NarrowString(const_pointer value):Base(value) {}$/;"	f	class:NarrowString
NarrowString	src/util/StaticString.hxx	/^class NarrowString: public StaticStringBase<char, max>$/;"	c
NarrowWeatherFilename	src/Weather/Rasp/RaspStore.cpp	/^RaspStore::NarrowWeatherFilename(char *filename, Path name,$/;"	f	class:RaspStore
Native	src/Math/Angle.hpp	/^  constexpr double Native() const {$/;"	f	class:Angle
Native	src/Math/Angle.hpp	/^  static Angle Native(const double _value) {$/;"	f	class:Angle
Native	src/ui/canvas/Brush.hpp	/^  HBRUSH Native() const {$/;"	f	class:Brush
Native	src/ui/canvas/Pen.hpp	/^  HPEN Native() const { return pen; }$/;"	f	class:Pen
NativeBMP085Listener	src/Android/NativeBMP085Listener.cpp	/^namespace NativeBMP085Listener {$/;"	n	file:
NativeBMP085Listener	src/Android/NativeBMP085Listener.hpp	/^namespace NativeBMP085Listener {$/;"	n
NativeI2CbaroListener	src/Android/NativeI2CbaroListener.cpp	/^namespace NativeI2CbaroListener {$/;"	n	file:
NativeI2CbaroListener	src/Android/NativeI2CbaroListener.hpp	/^namespace NativeI2CbaroListener {$/;"	n
NativeInputListener	src/Android/NativeInputListener.cpp	/^namespace NativeInputListener {$/;"	n	file:
NativeInputListener	src/Android/NativeInputListener.hpp	/^namespace NativeInputListener {$/;"	n
NativeLeScanCallback	src/Android/NativeLeScanCallback.cpp	/^namespace NativeLeScanCallback {$/;"	n	file:
NativeLeScanCallback	src/Android/NativeLeScanCallback.hpp	/^namespace NativeLeScanCallback {$/;"	n
NativeNunchuckListener	src/Android/NativeNunchuckListener.cpp	/^namespace NativeNunchuckListener {$/;"	n	file:
NativeNunchuckListener	src/Android/NativeNunchuckListener.hpp	/^namespace NativeNunchuckListener {$/;"	n
NativePortListener	src/Android/NativePortListener.cpp	/^namespace NativePortListener {$/;"	n	file:
NativePortListener	src/Android/NativePortListener.hpp	/^namespace NativePortListener {$/;"	n
NativeView	src/Android/NativeView.hpp	/^class NativeView {$/;"	c
NativeVoltageListener	src/Android/NativeVoltageListener.cpp	/^namespace NativeVoltageListener {$/;"	n	file:
NativeVoltageListener	src/Android/NativeVoltageListener.hpp	/^namespace NativeVoltageListener {$/;"	n
NavAltitude	src/InfoBoxes/Content/Type.hpp	/^    NavAltitude,$/;"	e	enum:InfoBoxFactory::Type
NavAltitudeAvailable	src/NMEA/MoreData.hpp	/^  bool NavAltitudeAvailable() const {$/;"	f	struct:MoreData
NavDijkstra	src/Engine/PathSolvers/NavDijkstra.hpp	/^class NavDijkstra {$/;"	c
Navpoint	src/Device/Driver/CAI302/Protocol.hpp	/^  struct Navpoint {$/;"	s	namespace:CAI302
NavpointMeta	src/Device/Driver/CAI302/Protocol.hpp	/^  struct NavpointMeta {$/;"	s	namespace:CAI302
Near	src/Dialogs/StatusPanels/FlightStatusPanel.cpp	/^  Near,$/;"	e	enum:Controls	file:
NearWaypoint	src/Engine/Contest/Solvers/Retrospective.hpp	/^  struct NearWaypoint {$/;"	s	class:Retrospective
NearWaypointList	src/Engine/Contest/Solvers/Retrospective.hpp	/^  typedef std::list<NearWaypoint> NearWaypointList;$/;"	t	class:Retrospective
NearestAirspace	src/Airspace/NearestAirspace.hpp	/^  NearestAirspace():airspace(nullptr) {}$/;"	f	class:NearestAirspace
NearestAirspace	src/Airspace/NearestAirspace.hpp	/^  NearestAirspace(const AbstractAirspace &_airspace, double _distance)$/;"	f	class:NearestAirspace
NearestAirspace	src/Airspace/NearestAirspace.hpp	/^class NearestAirspace {$/;"	c
NearestIndexConvex	src/Geo/SearchPointVector.cpp	/^SearchPointVector::NearestIndexConvex(const FlatGeoPoint &p3) const$/;"	f	class:SearchPointVector
NearestPoint	src/Geo/SearchPointVector.cpp	/^NearestPoint(const FlatGeoPoint &p1, const FlatGeoPoint &p2,$/;"	f	file:
NearestPoint	src/Geo/SearchPointVector.cpp	/^SearchPointVector::NearestPoint(const FlatGeoPoint &p3) const$/;"	f	class:SearchPointVector
NearestPointNonConvex	src/Geo/SearchPointVector.cpp	/^NearestPointNonConvex(const SearchPointVector& spv, const FlatGeoPoint &p3)$/;"	f	file:
NeedData	src/Replay/CatmullRomInterpolator.hpp	/^  NeedData(double t_simulation) const$/;"	f	class:CatmullRomInterpolator
NeedGroundLevel	src/Engine/Airspace/AbstractAirspace.hpp	/^  bool NeedGroundLevel() const {$/;"	f	class:AbstractAirspace
NeedGroundLevel	src/Engine/Airspace/Airspace.cpp	/^Airspace::NeedGroundLevel() const$/;"	f	class:Airspace
NeedGroundLevel	src/Engine/Airspace/AirspaceAltitude.hpp	/^  bool NeedGroundLevel() const {$/;"	f	struct:AirspaceAltitude
NeedToArm	src/Engine/Task/Ordered/TaskAdvance.hpp	/^  bool NeedToArm() const  {$/;"	f	class:TaskAdvance
NeighbourLink	src/Engine/Route/RoutePolars.cpp	/^RoutePolars::NeighbourLink(const RoutePoint &start, const RoutePoint &end,$/;"	f	class:RoutePolars
Net	src/Android/DownloadManager.hpp	/^namespace Net { class DownloadListener; }$/;"	n
Net	src/net/http/DownloadManager.hpp	/^namespace Net {$/;"	n
Net	src/net/http/FormData.hpp	/^namespace Net {$/;"	n
Net	src/net/http/Handler.hpp	/^namespace Net {$/;"	n
Net	src/net/http/Init.hpp	/^namespace Net {$/;"	n
Net	src/net/http/ToBuffer.hpp	/^namespace Net {$/;"	n
Net	src/net/http/ToFile.hpp	/^namespace Net {$/;"	n
NetCoupe	src/Engine/Contest/Solvers/NetCoupe.hpp	/^class NetCoupe : public ContestDijkstra {$/;"	c
NetState	src/net/State.hpp	/^enum class NetState {$/;"	c
NettoSpeed	src/Profile/ProfileKeys.cpp	/^const char NettoSpeed[] = "NettoSpeed";$/;"	m	namespace:ProfileKeys	file:
NettoVario	src/Computer/GlideComputerAirData.cpp	/^GlideComputerAirData::NettoVario(const NMEAInfo &basic,$/;"	f	class:GlideComputerAirData
NettoVario	src/Engine/Navigation/TraceHistory.hpp	/^  TraceVariableHistory NettoVario;$/;"	m	class:TraceHistory
Network	src/Dialogs/StatusPanels/SystemStatusPanel.cpp	/^  Network,$/;"	e	enum:Controls	file:
NetworkInfo	src/Kobo/WifiDialog.cpp	/^  struct NetworkInfo {$/;"	s	class:final	file:
NetworkWidget	src/Kobo/NetworkDialog.cpp	/^  NetworkWidget(const DialogLook &look):RowFormWidget(look) {}$/;"	f	class:final
New	src/lua/Class.hxx	/^	static pointer New(lua_State *L, Args&&... args) {$/;"	f	struct:Lua::Class
NewBasicState	src/lua/Basic.cpp	/^Lua::NewBasicState()$/;"	f	class:Lua
NewClicked	src/Dialogs/Plane/PlaneListDialog.cpp	/^PlaneListWidget::NewClicked()$/;"	f	class:PlaneListWidget
NewClicked	src/Dialogs/ProfileListDialog.cpp	/^ProfileListWidget::NewClicked()$/;"	f	class:ProfileListWidget
NewFullState	src/lua/Full.cpp	/^Lua::NewFullState()$/;"	f	class:Lua
NewLine	src/Screen/TerminalWindow.cpp	/^TerminalWindow::NewLine()$/;"	f	class:TerminalWindow
NewLine	src/io/TextWriter.hpp	/^  bool NewLine() {$/;"	f	class:TextWriter
NewRef	src/ui/event/poll/libinput/UdevContext.cpp	/^UdevContext::NewRef()$/;"	f	class:UdevContext
NewSample	src/Computer/Wind/CirclingWind.cpp	/^CirclingWind::NewSample(const MoreData &info, const CirclingInfo &circling)$/;"	f	class:CirclingWind
NewWind	src/Computer/Wind/Store.cpp	/^WindStore::NewWind(const NMEAInfo &info, DerivedInfo &derived,$/;"	f	class:WindStore
Next	src/Device/Port/TTYEnumerator.cpp	/^TTYEnumerator::Next()$/;"	f	class:TTYEnumerator
Next	src/PageActions.cpp	/^PageActions::Next()$/;"	f	class:PageActions
Next	src/Terrain/RasterBuffer.cpp	/^  unsigned Next() {$/;"	f	class:PixelIterator
Next	src/Weather/METARParser.cpp	/^  const TCHAR *Next() {$/;"	f	class:METARLine
Next	src/Weather/NOAAFormatter.cpp	/^  Range Next() {$/;"	f	class:NOAALineSplitter
Next	src/ui/canvas/memory/Bresenham.hpp	/^  bool Next() {$/;"	f	class:BresenhamIterator
Next	src/ui/canvas/memory/PixelTraits.hpp	/^  static constexpr const_pointer Next(const_pointer p, int delta) {$/;"	f	struct:BGRAPixelTraits
Next	src/ui/canvas/memory/PixelTraits.hpp	/^  static constexpr const_pointer Next(const_pointer p, int delta) {$/;"	f	struct:GreyscalePixelTraits
Next	src/ui/canvas/memory/PixelTraits.hpp	/^  static constexpr pointer Next(pointer p, int delta) {$/;"	f	struct:BGRAPixelTraits
Next	src/ui/canvas/memory/PixelTraits.hpp	/^  static constexpr pointer Next(pointer p, int delta) {$/;"	f	struct:GreyscalePixelTraits
Next	src/util/IterableSplitString.hxx	/^		void Next() {$/;"	f	class:BasicIterableSplitString::final
NextArrowRenderer	src/Renderer/NextArrowRenderer.hpp	/^  NextArrowRenderer(const WindArrowLook &_look):look(_look) {}$/;"	f	class:NextArrowRenderer
NextArrowRenderer	src/Renderer/NextArrowRenderer.hpp	/^class NextArrowRenderer {$/;"	c
NextBottomGridIntersection	src/Terrain/ScanLine.cpp	/^NextBottomGridIntersection(const GridRay &ray,$/;"	f	file:
NextByte	src/ui/canvas/memory/PixelTraits.hpp	/^  static constexpr const_pointer NextByte(const_pointer p,$/;"	f	struct:BGRAPixelTraits
NextByte	src/ui/canvas/memory/PixelTraits.hpp	/^  static constexpr const_pointer NextByte(const_pointer p,$/;"	f	struct:GreyscalePixelTraits
NextByte	src/ui/canvas/memory/PixelTraits.hpp	/^  static constexpr pointer NextByte(pointer p, int delta) {$/;"	f	struct:BGRAPixelTraits
NextByte	src/ui/canvas/memory/PixelTraits.hpp	/^  static constexpr pointer NextByte(pointer p, int delta) {$/;"	f	struct:GreyscalePixelTraits
NextCircular	src/Geo/SearchPointVector.cpp	/^SearchPointVector::NextCircular(const_iterator i) const$/;"	f	class:SearchPointVector
NextClock	src/time/ReplayClock.hpp	/^  double NextClock(double time) {$/;"	f	class:ReplayClock
NextColumn	src/Renderer/TextRowRenderer.cpp	/^TextRowRenderer::NextColumn(Canvas &canvas, const PixelRect &rc,$/;"	f	class:TextRowRenderer
NextGridIntersection	src/Terrain/ScanLine.cpp	/^NextGridIntersection(const GridRay &ray,$/;"	f	file:
NextHorizontalGridIntersection	src/Terrain/ScanLine.cpp	/^NextHorizontalGridIntersection(const GridRay &ray,$/;"	f	file:
NextIndex	src/PageActions.cpp	/^PageActions::NextIndex()$/;"	f	class:PageActions
NextLeftGridIntersection	src/Terrain/ScanLine.cpp	/^NextLeftGridIntersection(const GridRay &ray, GridLocation current)$/;"	f	file:
NextLegEqThermal	src/Computer/GlideComputerAirData.cpp	/^GlideComputerAirData::NextLegEqThermal(const NMEAInfo &basic,$/;"	f	class:GlideComputerAirData
NextLegEqThermal	src/InfoBoxes/Content/Type.hpp	/^    NextLegEqThermal,$/;"	e	enum:InfoBoxFactory::Type
NextName	src/io/ZipArchive.cpp	/^ZipArchive::NextName()$/;"	f	class:ZipArchive
NextPage	src/Dialogs/Waypoint/dlgWaypointDetails.cpp	/^WaypointDetailsWidget::NextPage(int step)$/;"	f	class:WaypointDetailsWidget
NextPage	src/Dialogs/dlgAnalysis.cpp	/^AnalysisWidget::NextPage(int Step)$/;"	f	class:AnalysisWidget
NextPage	src/Widget/TabWidget.cpp	/^TabWidget::NextPage()$/;"	f	class:TabWidget
NextRightGridIntersection	src/Terrain/ScanLine.cpp	/^NextRightGridIntersection(const GridRay &ray,$/;"	f	file:
NextRow	src/Dialogs/Task/TargetDialog.cpp	/^  PixelRect NextRow(unsigned height) {$/;"	f	class:RowLayout
NextRow	src/ui/canvas/memory/PixelTraits.hpp	/^  static constexpr const_pointer NextRow(const_pointer p,$/;"	f	struct:BGRAPixelTraits
NextRow	src/ui/canvas/memory/PixelTraits.hpp	/^  static constexpr const_pointer NextRow(const_pointer p,$/;"	f	struct:GreyscalePixelTraits
NextRow	src/ui/canvas/memory/PixelTraits.hpp	/^  static constexpr pointer NextRow(pointer p,$/;"	f	struct:BGRAPixelTraits
NextRow	src/ui/canvas/memory/PixelTraits.hpp	/^  static constexpr pointer NextRow(pointer p,$/;"	f	struct:GreyscalePixelTraits
NextSquareRange	src/Engine/Trace/Trace.hpp	/^    const_iterator &NextSquareRange(unsigned sq_resolution,$/;"	f	class:Trace::const_iterator
NextTarget	src/Gauge/FlarmTrafficWindow.cpp	/^FlarmTrafficWindow::NextTarget()$/;"	f	class:FlarmTrafficWindow
NextToken	src/XML/Parser.cpp	/^  struct NextToken {$/;"	s	namespace:XML	file:
NextTopGridIntersection	src/Terrain/ScanLine.cpp	/^NextTopGridIntersection(const GridRay &ray, GridLocation current)$/;"	f	file:
NextTraffic	src/FLARM/List.hpp	/^  const FlarmTraffic *NextTraffic(const FlarmTraffic *t) const {$/;"	f	struct:TrafficList
NextVerticalGridIntersection	src/Terrain/ScanLine.cpp	/^NextVerticalGridIntersection(const GridRay &ray,$/;"	f	file:
NmeaReplay	src/Replay/NmeaReplay.cpp	/^NmeaReplay::NmeaReplay(std::unique_ptr<NLineReader> &&_reader,$/;"	f	class:NmeaReplay
NmeaReplay	src/Replay/NmeaReplay.hpp	/^class NmeaReplay: public AbstractReplay$/;"	c
NoCancelOperationEnvironment	src/Operation/NoCancelOperationEnvironment.hpp	/^class NoCancelOperationEnvironment : public ProxyOperationEnvironment {$/;"	c
NoExcept	src/util/BindMethod.hxx	/^static constexpr bool NoExcept = false;$/;"	v
NoFontsAvailable	src/MainWindow.cpp	/^NoFontsAvailable()$/;"	f	file:
NoTrack	src/Dialogs/Device/FLARM/ConfigWidget.hpp	/^    NoTrack,$/;"	e	enum:final::Controls
NoValue	src/Audio/VarioGlue.cpp	/^AudioVarioGlue::NoValue()$/;"	f	class:AudioVarioGlue
NoValue	src/ui/egl/System.hpp	54;"	d
NoValue	src/ui/glx/System.hpp	43;"	d
NoValue	src/ui/window/TopWindow.hpp	67;"	d
Node	src/util/RadixTree.hpp	/^    Node(const TCHAR *_label)$/;"	f	struct:RadixTree::Node
Node	src/util/RadixTree.hpp	/^  struct Node {$/;"	s	class:RadixTree
NodeValue	src/Engine/Route/AStar.hpp	/^  struct NodeValue {$/;"	s	class:AStar
NonCopyable	src/util/NonCopyable.hpp	/^  constexpr NonCopyable () {}$/;"	f	class:NonCopyable
NonCopyable	src/util/NonCopyable.hpp	/^class NonCopyable$/;"	c
None	src/Form/TabMenuDisplay.hpp	/^    static MenuTabIndex None() {$/;"	f	struct:final::MenuTabIndex
None	src/ui/egl/System.hpp	58;"	d
None	src/ui/glx/System.hpp	47;"	d
Nook	src/Android/Nook.hpp	/^namespace Nook {$/;"	n
Normal	src/Math/Line2D.hpp	/^  constexpr Point Normal() const {$/;"	f	struct:Line2D
Normalise	src/time/WrapClock.cpp	/^WrapClock::Normalise(NMEAInfo &basic)$/;"	f	class:WrapClock
Normalise	src/time/WrapClock.cpp	/^WrapClock::Normalise(double stamp, BrokenDate &date, const BrokenTime &time)$/;"	f	class:WrapClock
Normalize	src/Geo/GeoPoint.hpp	/^  GeoPoint &Normalize() {$/;"	f	struct:GeoPoint
NormalizeIGCAltitude	src/IGC/IGCWriter.cpp	/^NormalizeIGCAltitude(int value)$/;"	f	file:
NormalizeLift	src/Gauge/ThermalAssistantRenderer.cpp	/^ThermalAssistantRenderer::NormalizeLift(double lift, double max_lift)$/;"	f	class:ThermalAssistantRenderer
NormalizeSearchString	src/util/StringUtil.cpp	/^NormalizeSearchString(char *gcc_restrict dest,$/;"	f
NormalizeSearchString	src/util/WStringUtil.cpp	/^NormalizeSearchString(wchar_t *gcc_restrict dest,$/;"	f
NotWhiteCondition	src/ui/canvas/memory/PixelOperations.hpp	/^struct NotWhiteCondition {$/;"	s
Notify	src/Computer/ConditionMonitor/ConditionMonitorAATTime.cpp	/^ConditionMonitorAATTime::Notify()$/;"	f	class:ConditionMonitorAATTime
Notify	src/Computer/ConditionMonitor/ConditionMonitorFinalGlide.cpp	/^ConditionMonitorFinalGlide::Notify()$/;"	f	class:ConditionMonitorFinalGlide
Notify	src/Computer/ConditionMonitor/ConditionMonitorGlideTerrain.cpp	/^ConditionMonitorGlideTerrain::Notify()$/;"	f	class:ConditionMonitorGlideTerrain
Notify	src/Computer/ConditionMonitor/ConditionMonitorLandableReachable.cpp	/^ConditionMonitorLandableReachable::Notify()$/;"	f	class:ConditionMonitorLandableReachable
Notify	src/Computer/ConditionMonitor/ConditionMonitorSunset.cpp	/^ConditionMonitorSunset::Notify()$/;"	f	class:ConditionMonitorSunset
Notify	src/Computer/ConditionMonitor/ConditionMonitorWind.cpp	/^ConditionMonitorWind::Notify()$/;"	f	class:ConditionMonitorWind
NotifyCalculatedUpdate	src/Device/MultipleDevices.cpp	/^MultipleDevices::NotifyCalculatedUpdate(const MoreData &basic,$/;"	f	class:MultipleDevices
NotifySensorUpdate	src/Device/MultipleDevices.cpp	/^MultipleDevices::NotifySensorUpdate(const MoreData &basic)$/;"	f	class:MultipleDevices
Now	src/system/FileUtil.cpp	/^File::Now()$/;"	f	class:File
NowLocal	src/time/BrokenDateTime.cpp	/^BrokenDateTime::NowLocal()$/;"	f	class:BrokenDateTime
NowUTC	src/time/BrokenDateTime.cpp	/^BrokenDateTime::NowUTC()$/;"	f	class:BrokenDateTime
Null	src/Engine/Waypoint/Runway.hpp	/^  static constexpr Runway Null() {$/;"	f	class:Runway
Null	src/RadioFrequency.hpp	/^  static constexpr RadioFrequency Null() {$/;"	f	class:RadioFrequency
Null	src/ResourceId.hpp	/^  static constexpr ResourceId Null() {$/;"	f	class:ResourceId
Null	src/XML/Node.hpp	/^  static inline XMLNode Null() {$/;"	f	class:XMLNode
NullBlackboardListener	src/Blackboard/BlackboardListener.hpp	/^class NullBlackboardListener : public BlackboardListener {$/;"	c
NullDataHandler	src/io/NullDataHandler.hpp	/^class NullDataHandler : public DataHandler {$/;"	c
NullOperationEnvironment	src/Operation/Operation.hpp	/^class NullOperationEnvironment : public OperationEnvironment {$/;"	c
NullPort	src/Device/Port/NullPort.cpp	/^NullPort::NullPort()$/;"	f	class:NullPort
NullPort	src/Device/Port/NullPort.cpp	/^NullPort::NullPort(DataHandler &_handler)$/;"	f	class:NullPort
NullPort	src/Device/Port/NullPort.hpp	/^class NullPort : public Port, private DataHandler  {$/;"	c
NullWidget	src/Widget/Widget.hpp	/^class NullWidget : public Widget {$/;"	c
NumSat	src/Dialogs/StatusPanels/SystemStatusPanel.cpp	/^  NumSat,$/;"	e	enum:Controls	file:
NumSubMenus	src/Form/TabMenuDisplay.hpp	/^    unsigned NumSubMenus() const {$/;"	f	struct:final::MainMenuButton
NumToIGCChar	src/Formatter/IGCFilenameFormatter.cpp	/^NumToIGCChar(unsigned num)$/;"	f	file:
NumberDataField	src/Form/DataField/Number.cpp	/^NumberDataField::NumberDataField(Type type, bool support_combo,$/;"	f	class:NumberDataField
NumberDataField	src/Form/DataField/Number.hpp	/^class NumberDataField : public DataField {$/;"	c
NumberEntryDialog	src/Dialogs/NumberEntry.cpp	/^NumberEntryDialog(const TCHAR *caption,$/;"	f
NumberToTeamCode	src/TeamCode/TeamCode.cpp	/^NumberToTeamCode(unsigned value, TCHAR *code, unsigned n_digits)$/;"	f	file:
NunchuckDevice	src/Android/NunchuckDevice.cpp	/^NunchuckDevice::NunchuckDevice(unsigned _index,$/;"	f	class:NunchuckDevice
NunchuckListener	src/Android/NunchuckListener.hpp	/^class NunchuckListener {$/;"	c
OBSERVATIONZONECLIENT_HPP	src/Engine/Task/ObservationZones/ObservationZoneClient.hpp	24;"	d
OBSERVATIONZONEPOINT_HPP	src/Engine/Task/ObservationZones/ObservationZonePoint.hpp	25;"	d
OBSERVATIONZONE_HPP	src/Engine/Task/ObservationZones/ObservationZone.hpp	25;"	d
OBSOLETE_BOTTOM_RIGHT_12	src/InfoBoxes/InfoBoxSettings.hpp	/^    OBSOLETE_BOTTOM_RIGHT_12 = 10,$/;"	m	class:InfoBoxSettings::Geometry
OBSOLETE_BOTTOM_RIGHT_4	src/InfoBoxes/InfoBoxSettings.hpp	/^    OBSOLETE_BOTTOM_RIGHT_4 = 16,$/;"	m	class:InfoBoxSettings::Geometry
OBSOLETE_BOTTOM_RIGHT_8	src/InfoBoxes/InfoBoxSettings.hpp	/^    OBSOLETE_BOTTOM_RIGHT_8 = 5,$/;"	m	class:InfoBoxSettings::Geometry
OBSOLETE_DONT_USE_NAMEIFINTASK	src/Renderer/WaypointRendererSettings.hpp	/^    OBSOLETE_DONT_USE_NAMEIFINTASK,$/;"	m	class:WaypointRendererSettings::DisplayTextType
OBSOLETE_DONT_USE_NUMBER	src/Renderer/WaypointRendererSettings.hpp	/^    OBSOLETE_DONT_USE_NUMBER,$/;"	m	class:WaypointRendererSettings::DisplayTextType
OBSOLETE_SPLIT_8	src/InfoBoxes/InfoBoxSettings.hpp	/^    OBSOLETE_SPLIT_8 = 3,$/;"	m	class:InfoBoxSettings::Geometry
OBSOLETE_TOP_LEFT_4	src/InfoBoxes/InfoBoxSettings.hpp	/^    OBSOLETE_TOP_LEFT_4 = 17,$/;"	m	class:InfoBoxSettings::Geometry
OBSOLETE_TOP_LEFT_8	src/InfoBoxes/InfoBoxSettings.hpp	/^    OBSOLETE_TOP_LEFT_8 = 4,$/;"	m	class:InfoBoxSettings::Geometry
OBSTACLE	src/Engine/Waypoint/Waypoint.hpp	/^    OBSTACLE,$/;"	m	class:Waypoint::Type
OBSTACLE_DATABASE	src/FLARM/Error.hpp	/^    OBSTACLE_DATABASE = 0x81,$/;"	e	enum:uint8_t
OFF	src/Computer/Settings.hpp	/^    OFF,$/;"	m	class:FeaturesSettings::FinalGlideTerrain
OFF	src/Engine/Route/Config.hpp	/^    OFF,$/;"	m	class:RoutePlannerConfig::ReachMode
OFF	src/Hardware/Battery.hpp	/^      OFF,$/;"	e	enum:Power::External::externalstatus
OFF	src/Logger/Settings.hpp	/^    OFF,$/;"	m	class:LoggerSettings::AutoLogger
OFF	src/MapSettings.hpp	/^    OFF,$/;"	m	class:TrailSettings::Length
OFF	src/MapSettings.hpp	/^  OFF,$/;"	m	class:DisplayGroundTrack
OFF	src/MapSettings.hpp	/^  OFF,$/;"	m	class:DisplaySkyLinesTrafficMapMode
OFF	src/MapSettings.hpp	/^  OFF,$/;"	m	class:FinalGlideBarDisplayMode
OFF	src/Terrain/TerrainSettings.hpp	/^  OFF,$/;"	m	class:Contours
OFF	src/Terrain/TerrainSettings.hpp	/^  OFF,$/;"	m	class:SlopeShading
OFF	src/UISettings.hpp	/^    OFF,$/;"	m	class:UISettings::HapticFeedback
OFF	src/UISettings.hpp	/^    OFF,$/;"	m	class:UISettings::ThermalAssistantPosition
OFFFIN	src/Dialogs/Device/LX/NanoConfigWidget.hpp	/^    OFFFIN,$/;"	e	enum:final::Controls
OK	src/Engine/GlideSolvers/GlideResult.hpp	/^    OK = 0,$/;"	m	class:GlideResult::Validity
OLC	src/Dialogs/dlgAnalysis.hpp	/^  OLC,$/;"	m	class:AnalysisPage
OLCClassic	src/Engine/Contest/Solvers/OLCClassic.hpp	/^class OLCClassic : public ContestDijkstra {$/;"	c
OLCFAI	src/Engine/Contest/Solvers/OLCFAI.hpp	/^class OLCFAI : public TriangleContest {$/;"	c
OLCLeague	src/Engine/Contest/Solvers/OLCLeague.hpp	/^class OLCLeague : public AbstractContest$/;"	c
OLCPlus	src/Engine/Contest/Solvers/OLCPlus.hpp	/^class OLCPlus : public AbstractContest {$/;"	c
OLCRules	src/Profile/ProfileKeys.cpp	/^const char OLCRules[] = "OLCRules";$/;"	m	namespace:ProfileKeys	file:
OLCSISAT	src/Engine/Contest/Solvers/OLCSISAT.hpp	/^class OLCSISAT : public ContestDijkstra {$/;"	c
OLCSprint	src/Engine/Contest/Solvers/OLCSprint.hpp	/^class OLCSprint : public ContestDijkstra {$/;"	c
OLCTriangleConstants	src/Engine/Contest/Solvers/OLCTriangleRules.hpp	/^struct OLCTriangleConstants {$/;"	s
OLCTriangleRules	src/Engine/Contest/Solvers/OLCTriangleRules.hpp	/^struct OLCTriangleRules : private OLCTriangleConstants {$/;"	s
OLCTriangleValidator	src/Engine/Contest/Solvers/OLCTriangleRules.hpp	/^class OLCTriangleValidator : OLCTriangleConstants {$/;"	c
OLC_CLASSIC	src/Engine/Contest/Settings.hpp	/^  OLC_CLASSIC,$/;"	m	class:Contest
OLC_CLASSIC_HPP	src/Engine/Contest/Solvers/OLCClassic.hpp	24;"	d
OLC_DIJKSTRA_HPP	src/Engine/Contest/Solvers/ContestDijkstra.hpp	25;"	d
OLC_FAI	src/Engine/Contest/Settings.hpp	/^  OLC_FAI,$/;"	m	class:Contest
OLC_FAI_HPP	src/Engine/Contest/Solvers/OLCFAI.hpp	24;"	d
OLC_LEAGUE	src/Engine/Contest/Settings.hpp	/^  OLC_LEAGUE,$/;"	m	class:Contest
OLC_LEAGUE_HPP	src/Engine/Contest/Solvers/OLCLeague.hpp	24;"	d
OLC_PLUS	src/Engine/Contest/Settings.hpp	/^  OLC_PLUS,$/;"	m	class:Contest
OLC_PLUS_HPP	src/Engine/Contest/Solvers/OLCPlus.hpp	24;"	d
OLC_RULES_HPP	src/Engine/Contest/Solvers/Contests.hpp	25;"	d
OLC_SISAT_HPP	src/Engine/Contest/Solvers/OLCSISAT.hpp	24;"	d
OLC_SPEED	src/InfoBoxes/Content/Type.hpp	/^    OLC_SPEED,$/;"	e	enum:InfoBoxFactory::Type
OLC_SPRINT	src/Engine/Contest/Settings.hpp	/^  OLC_SPRINT = 0,$/;"	m	class:Contest
OLC_SPRINT_HPP	src/Engine/Contest/Solvers/OLCSprint.hpp	24;"	d
OLC_TRIANGLE_RULES_HPP	src/Engine/Contest/Solvers/OLCTriangleRules.hpp	24;"	d
OLDXCSPROFILE	src/Profile/Profile.cpp	42;"	d	file:
ON	src/Hardware/Battery.hpp	/^      ON,$/;"	e	enum:Power::External::externalstatus
ON	src/Logger/Settings.hpp	/^    ON,$/;"	m	class:LoggerSettings::AutoLogger
ON	src/MapSettings.hpp	/^  ON,$/;"	m	class:DisplayGroundTrack
ON	src/MapSettings.hpp	/^  ON,$/;"	m	class:FinalGlideBarDisplayMode
ON	src/UISettings.hpp	/^    ON,$/;"	m	class:UISettings::HapticFeedback
ONE	src/Math/FastRotation.hpp	/^  static constexpr int ONE = 1 << SHIFT;$/;"	m	class:FastIntegerRotation
ONLINE_CONTEST_HPP	src/Engine/Contest/ContestManager.hpp	24;"	d
ON_CIRCLING	src/Device/Driver/LX/LX1600.hpp	/^    ON_CIRCLING = 1,$/;"	m	class:LX1600::SCMode
OPAQUE	src/ui/canvas/memory/Canvas.hpp	/^    OPAQUE, TRANSPARENT$/;"	e	enum:Canvas::__anon172
OPAQUE	src/ui/canvas/memory/Canvas.hpp	44;"	d
OPAQUE	src/ui/canvas/memory/Color.hpp	/^  static constexpr uint8_t OPAQUE = 0xff;$/;"	m	class:Color
OPAQUE	src/ui/canvas/memory/Color.hpp	36;"	d
OPAQUE	src/ui/canvas/opengl/Canvas.hpp	/^    OPAQUE, TRANSPARENT$/;"	e	enum:Canvas::__anon174
OPAQUE	src/ui/canvas/opengl/Canvas.hpp	44;"	d
OPENAIR	src/Airspace/AirspaceParser.cpp	/^  OPENAIR,$/;"	m	class:AirspaceFileType	file:
OPEN_HXX	src/io/Open.hxx	31;"	d
OPEN_SECURITY	src/Kobo/WPASupplicant.hpp	/^  OPEN_SECURITY,$/;"	e	enum:WifiSecurity
OPTIMISED_MASK	src/ui/canvas/memory/Optimised.hpp	/^  static constexpr unsigned OPTIMISED_MASK = ~PORTABLE_MASK;$/;"	m	class:SelectOptimisedPixelOperations
OPTIMIZED	src/Dialogs/Task/TargetDialog.cpp	/^    OPTIMIZED,$/;"	e	enum:TargetWidget::Buttons	file:
OPT_DEBUG	src/Terrain/jasper/jpc/jpc_dec.c	/^	OPT_DEBUG$/;"	e	enum:__anon132	file:
OPT_MAXLYRS	src/Terrain/jasper/jpc/jpc_dec.c	/^	OPT_MAXLYRS,$/;"	e	enum:__anon132	file:
OPT_MAXPKTS	src/Terrain/jasper/jpc/jpc_dec.c	/^	OPT_MAXPKTS,$/;"	e	enum:__anon132	file:
OPT_MAXSAMPLES	src/Terrain/jasper/jpc/jpc_dec.c	/^	OPT_MAXSAMPLES,$/;"	e	enum:__anon132	file:
ORDERED	src/Engine/Task/TaskType.hpp	/^  ORDERED,$/;"	m	class:TaskType
ORDEREDTASKPOINT_HPP	src/Engine/Task/Ordered/Points/OrderedTaskPoint.hpp	25;"	d
ORDEREDTASK_H	src/Engine/Task/Ordered/OrderedTask.hpp	24;"	d
ORIGIN	src/Device/Driver/LX/LXN.hpp	/^    ORIGIN = 0xa0,$/;"	e	enum:LXN::Command
OS_ALLOCATED_PATH_HPP	src/system/Path.hpp	25;"	d
OS_CONVERT_PATH_NAME_HPP	src/system/ConvertPathName.hpp	25;"	d
OS_PATH_HPP	src/system/PathName.hpp	25;"	d
OTHER	src/Engine/Airspace/AirspaceClass.hpp	/^  OTHER = 0,$/;"	e	enum:uint8_t
OTHER	src/FLARM/Error.hpp	/^    OTHER = 0xf1,$/;"	e	enum:uint8_t
OUTBUFFERSIZE	src/Form/DataField/Base.hpp	33;"	d
OUTLANDING	src/Engine/Waypoint/Waypoint.hpp	/^    OUTLANDING,$/;"	m	class:Waypoint::Type
OUTLINE	src/Topography/ShapeRenderer.hpp	/^  enum { NONE, OUTLINE, SOLID } mode;$/;"	e	enum:ShapeRenderer::__anon82
OUTLINED	src/Renderer/LabelShape.hpp	/^  OUTLINED,$/;"	m	class:LabelShape
OUTLINED_INVERTED	src/Renderer/LabelShape.hpp	/^  OUTLINED_INVERTED,$/;"	m	class:LabelShape
OUTPUT_CIRCLING	src/NMEA/VegaSwitchState.hpp	/^    OUTPUT_CIRCLING = 0,$/;"	e	enum:VegaSwitchState::OutputBits
OUTPUT_FLAP_LANDING	src/NMEA/VegaSwitchState.hpp	/^    OUTPUT_FLAP_LANDING = 7,$/;"	e	enum:VegaSwitchState::OutputBits
OUTPUT_MASK_CIRCLING	src/NMEA/VegaSwitchState.hpp	/^  static constexpr unsigned OUTPUT_MASK_CIRCLING = 1 << OUTPUT_CIRCLING;$/;"	m	struct:VegaSwitchState
OUTPUT_MASK_FLAP_LANDING	src/NMEA/VegaSwitchState.hpp	/^  static constexpr unsigned OUTPUT_MASK_FLAP_LANDING = 1 << OUTPUT_FLAP_LANDING;$/;"	m	struct:VegaSwitchState
OUTPUT_MODE	src/Dialogs/Device/BlueFly/BlueFlyConfigurationDialog.cpp	/^    OUTPUT_MODE,$/;"	e	enum:final::BlueFlyWidgets	file:
OUTPUT_MODE_MAX	src/Device/Driver/BlueFly/Internal.hpp	/^    static constexpr unsigned OUTPUT_MODE_MAX = 3;$/;"	m	struct:BlueFlyDevice::BlueFlySettings
OUTPUT_MODE_NAME	src/Device/Driver/BlueFly/Internal.hpp	/^    static const char OUTPUT_MODE_NAME[];$/;"	m	struct:BlueFlyDevice::BlueFlySettings
OUTPUT_MODE_NAME	src/Device/Driver/BlueFly/Settings.cpp	/^const char BlueFlyDevice::BlueFlySettings::OUTPUT_MODE_NAME[] = "BOM";$/;"	m	class:BlueFlyDevice::BlueFlySettings	file:
OUTPUT_STREAM_HXX	src/io/OutputStream.hxx	31;"	d
OVERLAY	src/MapWindow/Items/MapItem.hpp	/^    OVERLAY,$/;"	e	enum:TaskPointType::Type
OVERVIEW_BITS	src/Terrain/RasterTileCache.hpp	/^  static constexpr unsigned OVERVIEW_BITS = 4;$/;"	m	class:RasterTileCache
OVERVIEW_BITS	src/Terrain/RasterTraits.hpp	/^  constexpr unsigned OVERVIEW_BITS = 4;$/;"	m	namespace:RasterTraits
OVERVIEW_MASK	src/Terrain/RasterTileCache.hpp	/^  static constexpr unsigned OVERVIEW_MASK = (~0u) << OVERVIEW_BITS;$/;"	m	class:RasterTileCache
OVERVIEW_MASK	src/Terrain/RasterTraits.hpp	/^  constexpr unsigned OVERVIEW_MASK = (~0u) << OVERVIEW_BITS;$/;"	m	namespace:RasterTraits
OVERWRITING_RING_BUFFER_HPP	src/util/OverwritingRingBuffer.hpp	31;"	d
OWN_CODE	src/Dialogs/Traffic/TeamCodeDialog.cpp	/^    OWN_CODE,$/;"	e	enum:final::Controls	file:
OZBoundary	src/Engine/Task/ObservationZones/Boundary.hpp	/^class OZBoundary : public std::forward_list<GeoPoint> {$/;"	c
OZI_EXPLORER	src/Waypoint/WaypointFileType.hpp	/^  OZI_EXPLORER,$/;"	m	class:WaypointFileType
OZPreviewRenderer	src/Renderer/OZPreviewRenderer.hpp	/^namespace OZPreviewRenderer$/;"	n
OZRenderer	src/Renderer/OZRenderer.cpp	/^OZRenderer::OZRenderer(const TaskLook &_task_look,$/;"	f	class:OZRenderer
OZRenderer	src/Renderer/OZRenderer.hpp	/^class OZRenderer {$/;"	c
OZTYP	src/Device/Driver/Volkslogger/vlapi2.h	/^    enum OZTYP {$/;"	g	struct:VLAPI_DATA::DCLWPT
OZTYP_CYLSKT	src/Device/Driver/Volkslogger/vlapi2.h	/^      OZTYP_CYLSKT = 0,$/;"	e	enum:VLAPI_DATA::DCLWPT::OZTYP
OZTYP_LINE	src/Device/Driver/Volkslogger/vlapi2.h	/^      OZTYP_LINE = 1$/;"	e	enum:VLAPI_DATA::DCLWPT::OZTYP
O_BINARY	src/Terrain/jasper/jas_stream.h	102;"	d
O_BINARY	src/zzip/file.c	653;"	d	file:
O_BINARY	src/zzip/zip.c	611;"	d	file:
O_CLOEXEC	src/Terrain/jasper/base/jas_stream.c	104;"	d	file:
O_CLOEXEC	src/io/FileDescriptor.cxx	54;"	d	file:
O_NOCTTY	src/io/FileDescriptor.cxx	50;"	d	file:
O_NOCTTY	src/zzip/file.c	656;"	d	file:
O_NONBLOCK	src/zzip/file.c	662;"	d	file:
O_SYNC	src/zzip/file.c	659;"	d	file:
O_TMPFILE	src/io/FileOutputStream.cxx	169;"	d	file:
Object	src/Audio/SLES/Object.hpp	/^    explicit Object(SLObjectItf _object):object(_object) {}$/;"	f	class:SLES::Object
Object	src/Audio/SLES/Object.hpp	/^  class Object {$/;"	c	namespace:SLES
Object	src/java/Object.hxx	/^class Object {$/;"	c	namespace:Java
ObjectWriter	src/JSON/Writer.hpp	/^    ObjectWriter(BufferedOutputStream &_writer):writer(_writer), first(true) {$/;"	f	class:JSON::ObjectWriter
ObjectWriter	src/JSON/Writer.hpp	/^  class ObjectWriter {$/;"	c	namespace:JSON
ObservationZone	src/Engine/Task/ObservationZones/ObservationZone.hpp	/^  ObservationZone(Shape _shape, bool _can_start_through_top)$/;"	f	class:ObservationZone
ObservationZone	src/Engine/Task/ObservationZones/ObservationZone.hpp	/^class ObservationZone$/;"	c
ObservationZoneClient	src/Engine/Task/ObservationZones/ObservationZoneClient.hpp	/^class ObservationZoneClient {$/;"	c
ObservationZoneEditWidget	src/Dialogs/Task/Widgets/KeyholeZoneEditWidget.cpp	/^  :ObservationZoneEditWidget(_oz) {}$/;"	f
ObservationZoneEditWidget	src/Dialogs/Task/Widgets/ObservationZoneEditWidget.cpp	/^ObservationZoneEditWidget::ObservationZoneEditWidget(ObservationZone &_oz)$/;"	f	class:ObservationZoneEditWidget
ObservationZoneEditWidget	src/Dialogs/Task/Widgets/ObservationZoneEditWidget.hpp	/^class ObservationZoneEditWidget$/;"	c
ObservationZoneEditWidget	src/Dialogs/Task/Widgets/SectorZoneEditWidget.cpp	/^  :ObservationZoneEditWidget(_oz) {}$/;"	f
ObservationZonePoint	src/Engine/Task/ObservationZones/ObservationZonePoint.hpp	/^  ObservationZonePoint(Shape _shape, bool _can_start_through_top,$/;"	f	class:ObservationZonePoint
ObservationZonePoint	src/Engine/Task/ObservationZones/ObservationZonePoint.hpp	/^  ObservationZonePoint(const ObservationZonePoint &other,$/;"	f	class:ObservationZonePoint
ObservationZonePoint	src/Engine/Task/ObservationZones/ObservationZonePoint.hpp	/^class ObservationZonePoint : public ObservationZone {$/;"	c
OffsetActiveFrequency	src/ActionInterface.cpp	/^void ActionInterface::OffsetActiveFrequency(double offset_khz, bool to_devices)$/;"	f	class:ActionInterface
OffsetButtonsWidget	src/Widget/OffsetButtonsWidget.hpp	/^class OffsetButtonsWidget : public NullWidget {$/;"	c
OffsetCast	src/util/Cast.hxx	/^OffsetCast(U *p, std::ptrdiff_t offset)$/;"	f
OffsetCast	src/util/Cast.hxx	/^OffsetCast(const U *p, std::ptrdiff_t offset)$/;"	f
OffsetCast	src/util/ContainerCast.hxx	/^OffsetCast(U *p, ptrdiff_t offset)$/;"	f
OffsetCast	src/util/ContainerCast.hxx	/^OffsetCast(const U *p, ptrdiff_t offset)$/;"	f
OffsetHistory	src/MapWindow/GlueMapWindow.hpp	/^  OffsetHistory():pos(0) {$/;"	f	class:OffsetHistory
OffsetHistory	src/MapWindow/GlueMapWindow.hpp	/^class OffsetHistory$/;"	c
OffsetKiloHertz	src/RadioFrequency.hpp	/^  void OffsetKiloHertz(int khz_offset) {$/;"	f	class:RadioFrequency
OffsetManualMacCready	src/ActionInterface.cpp	/^ActionInterface::OffsetManualMacCready(double offset, bool to_devices)$/;"	f	class:ActionInterface
OffsetPointer	src/util/ContainerCast.hxx	/^OffsetPointer(const void *p, ptrdiff_t offset)$/;"	f
OffsetPointer	src/util/ContainerCast.hxx	/^OffsetPointer(void *p, ptrdiff_t offset)$/;"	f
OffsetStandbyFrequency	src/ActionInterface.cpp	/^void ActionInterface::OffsetStandbyFrequency(double offset_khz, bool to_devices)$/;"	f	class:ActionInterface
OldIGCFileFinder	src/Logger/IGCFileCleanup.cpp	/^  OldIGCFileFinder(unsigned _current_year):current_year(_current_year) {$/;"	f	class:OldIGCFileFinder
OldIGCFileFinder	src/Logger/IGCFileCleanup.cpp	/^class OldIGCFileFinder: public File::Visitor$/;"	c	file:
OnAck	src/Tracking/SkyLines/Handler.hpp	/^  virtual void OnAck(unsigned id) {}$/;"	f	class:SkyLinesTracking::Handler
OnAckClicked	src/Dialogs/MapItemListDialog.cpp	/^MapItemListWidget::OnAckClicked()$/;"	f	class:MapItemListWidget
OnAdd	src/Monitor/MatTaskMonitor.cpp	/^MatTaskAddWidget::OnAdd()$/;"	f	class:MatTaskAddWidget
OnAirspaceListEnter	src/Dialogs/Airspace/AirspaceList.cpp	/^AirspaceListWidget::OnAirspaceListEnter(unsigned i)$/;"	f	class:AirspaceListWidget
OnAnyKeyDown	src/Dialogs/WidgetDialog.cpp	/^WidgetDialog::OnAnyKeyDown(unsigned key_code)$/;"	f	class:WidgetDialog
OnAnyKeyDown	src/Form/Form.cpp	/^WndForm::OnAnyKeyDown(unsigned key_code)$/;"	f	class:WndForm
OnBackspace	src/Dialogs/TouchTextEntry.cpp	/^OnBackspace()$/;"	f	file:
OnBrowseClicked	src/Dialogs/Task/Manager/TaskActionsPanel.cpp	/^TaskActionsPanel::OnBrowseClicked()$/;"	f	class:TaskActionsPanel
OnCalcClicked	src/Dialogs/dlgAnalysis.cpp	/^AnalysisWidget::OnCalcClicked()$/;"	f	class:AnalysisWidget
OnCalculatedUpdate	src/Blackboard/BlackboardListener.cpp	/^NullBlackboardListener::OnCalculatedUpdate(gcc_unused const MoreData &basic,$/;"	f	class:NullBlackboardListener
OnCalculatedUpdate	src/Blackboard/ProxyBlackboardListener.cpp	/^ProxyBlackboardListener::OnCalculatedUpdate(const MoreData &basic,$/;"	f	class:ProxyBlackboardListener
OnCalculatedUpdate	src/Blackboard/RateLimitedBlackboardListener.cpp	/^RateLimitedBlackboardListener::OnCalculatedUpdate(const MoreData &_basic,$/;"	f	class:RateLimitedBlackboardListener
OnCalculatedUpdate	src/Blackboard/ScopeCalculatedListener.cpp	/^ScopeCalculatedListener::OnCalculatedUpdate(const MoreData &basic,$/;"	f	class:ScopeCalculatedListener
OnCalculatedUpdate	src/Computer/Events.cpp	/^GlideComputerEvents::OnCalculatedUpdate(const MoreData &basic,$/;"	f	class:GlideComputerEvents
OnCalculatedUpdate	src/CrossSection/CrossSectionWidget.cpp	/^CrossSectionWidget::OnCalculatedUpdate(const MoreData &basic,$/;"	f	class:CrossSectionWidget
OnCalculatedUpdate	src/Device/Descriptor.cpp	/^DeviceDescriptor::OnCalculatedUpdate(const MoreData &basic,$/;"	f	class:DeviceDescriptor
OnCalculatedUpdate	src/Device/Driver/CaiLNav.cpp	/^CaiLNavDevice::OnCalculatedUpdate(const MoreData &basic,$/;"	f	class:CaiLNavDevice
OnCalculatedUpdate	src/Device/Driver/OpenVario.cpp	/^OpenVarioDevice::OnCalculatedUpdate(const MoreData &basic, $/;"	f	class:OpenVarioDevice
OnCalculatedUpdate	src/Device/Driver/Vega/Misc.cpp	/^VegaDevice::OnCalculatedUpdate(const MoreData &basic,$/;"	f	class:VegaDevice
OnCalculatedUpdate	src/Dialogs/Settings/WindSettingsPanel.cpp	/^WindSettingsPanel::OnCalculatedUpdate(const MoreData &basic,$/;"	f	class:WindSettingsPanel
OnCalculatedUpdate	src/Dialogs/Traffic/TeamCodeDialog.cpp	/^TeamCodeWidget::OnCalculatedUpdate(const MoreData &basic,$/;"	f	class:TeamCodeWidget
OnCalculatedUpdate	src/Gauge/BigThermalAssistantWidget.cpp	/^BigThermalAssistantWidget::OnCalculatedUpdate(const MoreData &basic,$/;"	f	class:BigThermalAssistantWidget
OnCalculatedUpdate	src/Gauge/GaugeThermalAssistant.cpp	/^GaugeThermalAssistant::OnCalculatedUpdate(const MoreData &basic,$/;"	f	class:GaugeThermalAssistant
OnCalculatedUpdate	src/Logger/GlueFlightLogger.cpp	/^GlueFlightLogger::OnCalculatedUpdate(const MoreData &basic,$/;"	f	class:GlueFlightLogger
OnCallsignClicked	src/Dialogs/Traffic/FlarmTrafficDetails.cpp	/^FlarmTrafficDetailsWidget::OnCallsignClicked()$/;"	f	class:FlarmTrafficDetailsWidget
OnCancelMode	src/Form/Button.cpp	/^Button::OnCancelMode()$/;"	f	class:Button
OnCancelMode	src/Form/CheckBox.cpp	/^CheckBoxControl::OnCancelMode()$/;"	f	class:CheckBoxControl
OnCancelMode	src/Form/Edit.cpp	/^WndProperty::OnCancelMode()$/;"	f	class:WndProperty
OnCancelMode	src/Form/Form.cpp	/^WndForm::OnCancelMode()$/;"	f	class:WndForm
OnCancelMode	src/Form/List.cpp	/^ListControl::OnCancelMode()$/;"	f	class:ListControl
OnCancelMode	src/Form/TabDisplay.cpp	/^TabDisplay::OnCancelMode()$/;"	f	class:TabDisplay
OnCancelMode	src/Gauge/BigThermalAssistantWindow.cpp	/^BigThermalAssistantWindow::OnCancelMode()$/;"	f	class:BigThermalAssistantWindow
OnCancelMode	src/Gauge/BigTrafficWidget.cpp	/^FlarmTrafficControl::OnCancelMode()$/;"	f	class:FlarmTrafficControl
OnCancelMode	src/Gauge/GaugeFLARM.cpp	/^SmallTrafficWindow::OnCancelMode()$/;"	f	class:SmallTrafficWindow
OnCancelMode	src/Gauge/GaugeThermalAssistant.cpp	/^GaugeThermalAssistantWindow::OnCancelMode()$/;"	f	class:GaugeThermalAssistantWindow
OnCancelMode	src/InfoBoxes/InfoBoxWindow.cpp	/^InfoBoxWindow::OnCancelMode()$/;"	f	class:InfoBoxWindow
OnCancelMode	src/MainWindow.cpp	/^MainWindow::OnCancelMode()$/;"	f	class:MainWindow
OnCancelMode	src/MapWindow/GlueMapWindowEvents.cpp	/^GlueMapWindow::OnCancelMode()$/;"	f	class:GlueMapWindow
OnCancelMode	src/MapWindow/TargetMapWindowEvents.cpp	/^TargetMapWindow::OnCancelMode()$/;"	f	class:TargetMapWindow
OnCancelMode	src/ui/window/Window.cpp	/^Window::OnCancelMode()$/;"	f	class:Window
OnCancelMode	src/ui/window/custom/ContainerWindow.cpp	/^ContainerWindow::OnCancelMode()$/;"	f	class:ContainerWindow
OnCharacter	src/ui/window/Window.cpp	/^Window::OnCharacter(unsigned ch)$/;"	f	class:Window
OnCharacterCallback	src/Form/CharacterButton.hpp	/^  typedef bool (*OnCharacterCallback)(unsigned key);$/;"	t	class:CharacterButton
OnCharacterCallback_t	src/Widget/KeyboardWidget.hpp	/^  typedef bool (*OnCharacterCallback_t)(unsigned ch);$/;"	t	class:KeyboardWidget
OnClearAllClicked	src/Dialogs/Task/Manager/TaskEditPanel.cpp	/^TaskEditPanel::OnClearAllClicked()$/;"	f	class:TaskEditPanel
OnClicked	src/Form/Button.cpp	/^Button::OnClicked()$/;"	f	class:Button
OnClicked	src/Form/CharacterButton.cpp	/^CharacterButton::OnClicked()$/;"	f	class:CharacterButton
OnClicked	src/Form/CheckBox.cpp	/^CheckBoxControl::OnClicked()$/;"	f	class:CheckBoxControl
OnClicked	src/Menu/MenuBar.cpp	/^MenuBar::Button::OnClicked()$/;"	f	class:MenuBar::Button
OnClicked	src/Menu/ShowMenuButton.cpp	/^ShowMenuButton::OnClicked()$/;"	f	class:ShowMenuButton
OnClimbBase	src/Computer/StatsComputer.cpp	/^StatsComputer::OnClimbBase(const DerivedInfo &calculated)$/;"	f	class:StatsComputer
OnClimbCeiling	src/Computer/StatsComputer.cpp	/^StatsComputer::OnClimbCeiling(const DerivedInfo &calculated)$/;"	f	class:StatsComputer
OnClose	src/Replay/TaskAutoPilot.hpp	/^  virtual void OnClose() {};$/;"	f	class:AbstractAutoPilot
OnCloseClicked	src/Dialogs/Settings/dlgConfiguration.cpp	/^OnCloseClicked(WidgetDialog &dialog)$/;"	f	file:
OnCodeClicked	src/Dialogs/Traffic/TeamCodeDialog.cpp	/^TeamCodeWidget::OnCodeClicked()$/;"	f	class:TeamCodeWidget
OnCommand	src/Form/Form.cpp	/^WndForm::OnCommand(unsigned id, unsigned code)$/;"	f	class:WndForm
OnCommand	src/ui/window/gdi/Window.cpp	/^Window::OnCommand(unsigned id, unsigned code)$/;"	f	class:Window
OnComplete	src/Dialogs/JobDialog.cpp	/^  virtual void OnComplete() {$/;"	f	class:DialogJobThread
OnComputerSettingsUpdate	src/Blackboard/BlackboardListener.cpp	/^NullBlackboardListener::OnComputerSettingsUpdate(gcc_unused const ComputerSettings &settings)$/;"	f	class:NullBlackboardListener
OnComputerSettingsUpdate	src/Blackboard/ProxyBlackboardListener.cpp	/^ProxyBlackboardListener::OnComputerSettingsUpdate(const ComputerSettings &settings)$/;"	f	class:ProxyBlackboardListener
OnComputerSettingsUpdate	src/Computer/Events.cpp	/^GlideComputerEvents::OnComputerSettingsUpdate(const ComputerSettings &settings)$/;"	f	class:GlideComputerEvents
OnCopy	src/Dialogs/Settings/dlgConfigInfoboxes.cpp	/^InfoBoxesConfigWidget::OnCopy()$/;"	f	class:InfoBoxesConfigWidget
OnCreate	src/Dialogs/SimulatorPromptWindow.cpp	/^SimulatorPromptWindow::OnCreate()$/;"	f	class:SimulatorPromptWindow
OnCreate	src/Form/Form.cpp	/^WndForm::OnCreate()$/;"	f	class:WndForm
OnCreate	src/Gauge/BigTrafficWidget.cpp	/^FlarmTrafficControl::OnCreate()$/;"	f	class:FlarmTrafficControl
OnCreate	src/MapWindow/GlueMapWindowEvents.cpp	/^GlueMapWindow::OnCreate()$/;"	f	class:GlueMapWindow
OnCreate	src/MapWindow/MapWindowEvents.cpp	/^MapWindow::OnCreate()$/;"	f	class:MapWindow
OnCreate	src/MapWindow/TargetMapWindow.cpp	/^TargetMapWindow::OnCreate()$/;"	f	class:TargetMapWindow
OnCreate	src/Screen/TerminalWindow.cpp	/^TerminalWindow::OnCreate()$/;"	f	class:TerminalWindow
OnCreate	src/ui/window/DoubleBufferWindow.cpp	/^DoubleBufferWindow::OnCreate()$/;"	f	class:DoubleBufferWindow
OnCreate	src/ui/window/Window.cpp	/^Window::OnCreate()$/;"	f	class:Window
OnCustomPaint	src/InfoBoxes/Content/Base.cpp	/^InfoBoxContent::OnCustomPaint(Canvas &canvas, const PixelRect &rc)$/;"	f	class:InfoBoxContent
OnCustomPaint	src/InfoBoxes/Content/Other.cpp	/^InfoBoxContentHorizon::OnCustomPaint(Canvas &canvas, const PixelRect &rc)$/;"	f	class:InfoBoxContentHorizon
OnCustomPaint	src/InfoBoxes/Content/Task.cpp	/^InfoBoxContentNextArrow::OnCustomPaint(Canvas &canvas, const PixelRect &rc)$/;"	f	class:InfoBoxContentNextArrow
OnCustomPaint	src/InfoBoxes/Content/Thermal.cpp	/^InfoBoxContentClimbPercent::OnCustomPaint(Canvas &canvas, const PixelRect &rc)$/;"	f	class:InfoBoxContentClimbPercent
OnCustomPaint	src/InfoBoxes/Content/Thermal.cpp	/^InfoBoxContentThermalAssistant::OnCustomPaint(Canvas &canvas,$/;"	f	class:InfoBoxContentThermalAssistant
OnCustomPaint	src/InfoBoxes/Content/Trace.cpp	/^InfoBoxContentBarogram::OnCustomPaint(Canvas &canvas, const PixelRect &rc)$/;"	f	class:InfoBoxContentBarogram
OnCustomPaint	src/InfoBoxes/Content/Trace.cpp	/^InfoBoxContentCirclingAverageSpark::OnCustomPaint(Canvas &canvas,$/;"	f	class:InfoBoxContentCirclingAverageSpark
OnCustomPaint	src/InfoBoxes/Content/Trace.cpp	/^InfoBoxContentNettoVarioSpark::OnCustomPaint(Canvas &canvas,$/;"	f	class:InfoBoxContentNettoVarioSpark
OnCustomPaint	src/InfoBoxes/Content/Trace.cpp	/^InfoBoxContentTaskProgress::OnCustomPaint(Canvas &canvas, const PixelRect &rc)$/;"	f	class:InfoBoxContentTaskProgress
OnCustomPaint	src/InfoBoxes/Content/Trace.cpp	/^InfoBoxContentThermalBand::OnCustomPaint(Canvas &canvas, const PixelRect &rc)$/;"	f	class:InfoBoxContentThermalBand
OnCustomPaint	src/InfoBoxes/Content/Trace.cpp	/^InfoBoxContentVarioSpark::OnCustomPaint(Canvas &canvas, const PixelRect &rc)$/;"	f	class:InfoBoxContentVarioSpark
OnCustomPaint	src/InfoBoxes/Content/Weather.cpp	/^InfoBoxContentWindArrow::OnCustomPaint(Canvas &canvas, const PixelRect &rc)$/;"	f	class:InfoBoxContentWindArrow
OnDatagramReceived	src/Tracking/SkyLines/Client.cpp	/^SkyLinesTracking::Client::OnDatagramReceived(void *data, size_t length)$/;"	f	class:SkyLinesTracking::Client
OnDatagramReceived	src/Tracking/SkyLines/Server.cpp	/^Server::OnDatagramReceived(Client &&client,$/;"	f	class:SkyLinesTracking::Server
OnDeclareClicked	src/Dialogs/Task/Manager/TaskActionsPanel.cpp	/^TaskActionsPanel::OnDeclareClicked()$/;"	f	class:TaskActionsPanel
OnDemo	src/Dialogs/Device/Vega/VegaConfigurationDialog.cpp	/^VegaConfigurationExtraButtons::OnDemo()$/;"	f	class:VegaConfigurationExtraButtons
OnDepartedThermal	src/Computer/StatsComputer.cpp	/^StatsComputer::OnDepartedThermal(const DerivedInfo &calculated)$/;"	f	class:StatsComputer
OnDestroy	src/Dialogs/WidgetDialog.cpp	/^WidgetDialog::OnDestroy()$/;"	f	class:WidgetDialog
OnDestroy	src/Form/Form.cpp	/^WndForm::OnDestroy()$/;"	f	class:WndForm
OnDestroy	src/Form/List.cpp	/^ListControl::OnDestroy()$/;"	f	class:ListControl
OnDestroy	src/InfoBoxes/InfoBoxWindow.cpp	/^InfoBoxWindow::OnDestroy()$/;"	f	class:InfoBoxWindow
OnDestroy	src/MainWindow.cpp	/^MainWindow::OnDestroy()$/;"	f	class:MainWindow
OnDestroy	src/MapWindow/GlueMapWindowEvents.cpp	/^GlueMapWindow::OnDestroy()$/;"	f	class:GlueMapWindow
OnDestroy	src/MapWindow/MapWindowEvents.cpp	/^MapWindow::OnDestroy()$/;"	f	class:MapWindow
OnDestroy	src/MapWindow/TargetMapWindow.cpp	/^TargetMapWindow::OnDestroy()$/;"	f	class:TargetMapWindow
OnDestroy	src/ui/window/DoubleBufferWindow.cpp	/^DoubleBufferWindow::OnDestroy()$/;"	f	class:DoubleBufferWindow
OnDestroy	src/ui/window/SingleWindow.cpp	/^SingleWindow::OnDestroy()$/;"	f	class:UI::SingleWindow
OnDestroy	src/ui/window/Window.cpp	/^Window::OnDestroy()$/;"	f	class:Window
OnDestroy	src/ui/window/custom/ContainerWindow.cpp	/^ContainerWindow::OnDestroy()$/;"	f	class:ContainerWindow
OnDestroy	src/ui/window/fb/TopWindow.cpp	/^TopWindow::OnDestroy()$/;"	f	class:UI::TopWindow
OnDetailsClicked	src/Dialogs/Task/TaskPointDialog.cpp	/^TaskPointWidget::OnDetailsClicked()$/;"	f	class:TaskPointWidget
OnEditTurnpointClicked	src/Dialogs/Task/Manager/TaskEditPanel.cpp	/^TaskEditPanel::OnEditTurnpointClicked()$/;"	f	class:TaskEditPanel
OnEvent	src/Audio/ALSAPCMPlayer.cpp	/^ALSAPCMPlayer::OnEvent()$/;"	f	class:ALSAPCMPlayer
OnEvent	src/lua/InputEvent.cpp	/^  void OnEvent() {$/;"	f	class:final
OnEvent	src/ui/window/android/TopWindow.cpp	/^TopWindow::OnEvent(const Event &event)$/;"	f	class:UI::TopWindow
OnEvent	src/ui/window/fb/TopWindow.cpp	/^TopWindow::OnEvent(const Event &event)$/;"	f	class:UI::TopWindow
OnEvent	src/ui/window/sdl/TopWindow.cpp	/^TopWindow::OnEvent(const SDL_Event &event)$/;"	f	class:UI::TopWindow
OnFAIFinishHeightChange	src/Dialogs/Task/Manager/TaskPropertiesPanel.cpp	/^TaskPropertiesPanel::OnFAIFinishHeightChange(DataFieldBoolean &df)$/;"	f	class:TaskPropertiesPanel
OnFastForwardClicked	src/Dialogs/ReplayDialog.cpp	/^ReplayControlWidget::OnFastForwardClicked()$/;"	f	class:ReplayControlWidget
OnFinishTask	src/Computer/GlideComputer.cpp	/^GlideComputer::OnFinishTask()$/;"	f	class:GlideComputer
OnFix	src/Cloud/Main.cpp	/^CloudServer::OnFix(const Client &c,$/;"	f	class:CloudServer
OnFix	src/Tracking/SkyLines/Server.hpp	/^  virtual void OnFix(const Client &client,$/;"	f	class:SkyLinesTracking::Server
OnFlarmLockClicked	src/Dialogs/Traffic/TeamCodeDialog.cpp	/^TeamCodeWidget::OnFlarmLockClicked()$/;"	f	class:TeamCodeWidget
OnFriendColorClicked	src/Dialogs/Traffic/FlarmTrafficDetails.cpp	/^FlarmTrafficDetailsWidget::OnFriendColorClicked(FlarmColor color)$/;"	f	class:FlarmTrafficDetailsWidget
OnGPSUpdate	src/Blackboard/BlackboardListener.cpp	/^NullBlackboardListener::OnGPSUpdate(gcc_unused const MoreData &basic)$/;"	f	class:NullBlackboardListener
OnGPSUpdate	src/Blackboard/ProxyBlackboardListener.cpp	/^ProxyBlackboardListener::OnGPSUpdate(const MoreData &basic)$/;"	f	class:ProxyBlackboardListener
OnGPSUpdate	src/Blackboard/RateLimitedBlackboardListener.cpp	/^RateLimitedBlackboardListener::OnGPSUpdate(const MoreData &_basic)$/;"	f	class:RateLimitedBlackboardListener
OnGPSUpdate	src/Blackboard/ScopeGPSListener.cpp	/^ScopeGPSListener::OnGPSUpdate(const MoreData &basic)$/;"	f	class:ScopeGPSListener
OnGPSUpdate	src/Dialogs/Airspace/AirspaceList.cpp	/^AirspaceListWidget::OnGPSUpdate(const MoreData &basic)$/;"	f	class:AirspaceListWidget
OnGPSUpdate	src/Dialogs/Device/DeviceListDialog.cpp	/^DeviceListWidget::OnGPSUpdate(const MoreData &basic)$/;"	f	class:DeviceListWidget
OnGPSUpdate	src/Dialogs/StatusPanels/SystemStatusPanel.cpp	/^SystemStatusPanel::OnGPSUpdate(const MoreData &basic)$/;"	f	class:SystemStatusPanel
OnGPSUpdate	src/Dialogs/Waypoint/WaypointList.cpp	/^WaypointListWidget::OnGPSUpdate(const MoreData &basic)$/;"	f	class:WaypointListWidget
OnGPSUpdate	src/Gauge/BigTrafficWidget.cpp	/^TrafficWidget::OnGPSUpdate(const MoreData &basic)$/;"	f	class:TrafficWidget
OnGPSUpdate	src/Gauge/GaugeFLARM.cpp	/^GaugeFLARM::OnGPSUpdate(const MoreData &basic)$/;"	f	class:GaugeFLARM
OnGPSUpdate	src/Gauge/GlueGaugeVario.cpp	/^GlueGaugeVario::OnGPSUpdate(const MoreData &basic)$/;"	f	class:GlueGaugeVario
OnGPSUpdate	src/InfoBoxes/Panel/AltitudeInfo.cpp	/^AltitudeInfoPanel::OnGPSUpdate(const MoreData &basic)$/;"	f	class:AltitudeInfoPanel
OnGesture	src/Dialogs/dlgAnalysis.cpp	/^AnalysisWidget::OnGesture(const TCHAR *gesture)$/;"	f	class:AnalysisWidget
OnGotoClicked	src/Dialogs/MapItemListDialog.cpp	/^MapItemListWidget::OnGotoClicked()$/;"	f	class:MapItemListWidget
OnGotoClicked	src/Dialogs/Waypoint/dlgWaypointDetails.cpp	/^WaypointDetailsWidget::OnGotoClicked()$/;"	f	class:WaypointDetailsWidget
OnImagePaint	src/Dialogs/Waypoint/dlgWaypointDetails.cpp	/^WaypointDetailsWidget::OnImagePaint(gcc_unused Canvas &canvas,$/;"	f	class:WaypointDetailsWidget
OnItemHelp	src/Dialogs/ComboPicker.cpp	/^OnItemHelp(unsigned i)$/;"	f	file:
OnKeyCheck	src/Form/Button.cpp	/^Button::OnKeyCheck(unsigned key_code) const$/;"	f	class:Button
OnKeyCheck	src/Form/CheckBox.cpp	/^CheckBoxControl::OnKeyCheck(unsigned key_code) const$/;"	f	class:CheckBoxControl
OnKeyCheck	src/Form/DigitEntry.cpp	/^DigitEntry::OnKeyCheck(unsigned key_code) const$/;"	f	class:DigitEntry
OnKeyCheck	src/Form/Edit.cpp	/^WndProperty::OnKeyCheck(unsigned key_code) const$/;"	f	class:WndProperty
OnKeyCheck	src/Form/List.cpp	/^ListControl::OnKeyCheck(unsigned key_code) const$/;"	f	class:ListControl
OnKeyCheck	src/Form/TabDisplay.cpp	/^TabDisplay::OnKeyCheck(unsigned key_code) const$/;"	f	class:TabDisplay
OnKeyCheck	src/Form/TabMenuDisplay.cpp	/^TabMenuDisplay::OnKeyCheck(unsigned key_code) const$/;"	f	class:TabMenuDisplay
OnKeyCheck	src/Screen/Custom/LargeTextWindow.cpp	/^LargeTextWindow::OnKeyCheck(unsigned key_code) const$/;"	f	class:LargeTextWindow
OnKeyCheck	src/ui/window/Window.cpp	/^Window::OnKeyCheck(unsigned key_code) const$/;"	f	class:Window
OnKeyDown	src/Form/Button.cpp	/^Button::OnKeyDown(unsigned key_code)$/;"	f	class:Button
OnKeyDown	src/Form/CheckBox.cpp	/^CheckBoxControl::OnKeyDown(unsigned key_code)$/;"	f	class:CheckBoxControl
OnKeyDown	src/Form/DigitEntry.cpp	/^DigitEntry::OnKeyDown(unsigned key_code)$/;"	f	class:DigitEntry
OnKeyDown	src/Form/Edit.cpp	/^WndProperty::OnKeyDown(unsigned key_code)$/;"	f	class:WndProperty
OnKeyDown	src/Form/List.cpp	/^ListControl::OnKeyDown(unsigned key_code)$/;"	f	class:ListControl
OnKeyDown	src/Form/TabDisplay.cpp	/^TabDisplay::OnKeyDown(unsigned key_code)$/;"	f	class:TabDisplay
OnKeyDown	src/Form/TabMenuDisplay.cpp	/^TabMenuDisplay::OnKeyDown(unsigned key_code)$/;"	f	class:TabMenuDisplay
OnKeyDown	src/Gauge/BigThermalAssistantWindow.cpp	/^BigThermalAssistantWindow::OnKeyDown(unsigned key_code)$/;"	f	class:BigThermalAssistantWindow
OnKeyDown	src/Gauge/BigTrafficWidget.cpp	/^FlarmTrafficControl::OnKeyDown(unsigned key_code)$/;"	f	class:FlarmTrafficControl
OnKeyDown	src/InfoBoxes/InfoBoxWindow.cpp	/^InfoBoxWindow::OnKeyDown(unsigned key_code)$/;"	f	class:InfoBoxWindow
OnKeyDown	src/MainWindow.cpp	/^MainWindow::OnKeyDown(unsigned key_code)$/;"	f	class:MainWindow
OnKeyDown	src/MapWindow/GlueMapWindowEvents.cpp	/^GlueMapWindow::OnKeyDown(unsigned key_code)$/;"	f	class:GlueMapWindow
OnKeyDown	src/Screen/Custom/LargeTextWindow.cpp	/^LargeTextWindow::OnKeyDown(unsigned key_code)$/;"	f	class:LargeTextWindow
OnKeyDown	src/ui/window/Window.cpp	/^Window::OnKeyDown(unsigned key_code)$/;"	f	class:Window
OnKeyUp	src/ui/window/Window.cpp	/^Window::OnKeyUp(unsigned key_code)$/;"	f	class:Window
OnKillFocus	src/Form/Button.cpp	/^Button::OnKillFocus()$/;"	f	class:Button
OnKillFocus	src/Form/CheckBox.cpp	/^CheckBoxControl::OnKillFocus()$/;"	f	class:CheckBoxControl
OnKillFocus	src/Form/DigitEntry.cpp	/^DigitEntry::OnKillFocus()$/;"	f	class:DigitEntry
OnKillFocus	src/Form/Edit.cpp	/^WndProperty::OnKillFocus()$/;"	f	class:WndProperty
OnKillFocus	src/Form/List.cpp	/^ListControl::OnKillFocus()$/;"	f	class:ListControl
OnKillFocus	src/Form/TabDisplay.cpp	/^TabDisplay::OnKillFocus()$/;"	f	class:TabDisplay
OnKillFocus	src/Form/TabMenuDisplay.cpp	/^TabMenuDisplay::OnKillFocus()$/;"	f	class:TabMenuDisplay
OnKillFocus	src/InfoBoxes/InfoBoxWindow.cpp	/^InfoBoxWindow::OnKillFocus()$/;"	f	class:InfoBoxWindow
OnKillFocus	src/ui/window/Window.cpp	/^Window::OnKillFocus()$/;"	f	class:Window
OnLanding	src/Computer/GlideComputer.cpp	/^GlideComputer::OnLanding()$/;"	f	class:GlideComputer
OnMagnifyClicked	src/Dialogs/Waypoint/dlgWaypointDetails.cpp	/^WaypointDetailsWidget::OnMagnifyClicked()$/;"	f	class:WaypointDetailsWidget
OnMakeFinish	src/Dialogs/Task/Manager/TaskEditPanel.cpp	/^TaskEditPanel::OnMakeFinish()$/;"	f	class:TaskEditPanel
OnManualAdvance	src/Replay/TaskAutoPilot.hpp	/^  virtual void OnManualAdvance() {};$/;"	f	class:AbstractAutoPilot
OnModeChange	src/Replay/TaskAutoPilot.hpp	/^  virtual void OnModeChange() {};$/;"	f	class:AbstractAutoPilot
OnModified	src/Dialogs/Airspace/AirspaceList.cpp	/^AirspaceListWidget::OnModified(DataField &df)$/;"	f	class:AirspaceListWidget
OnModified	src/Dialogs/Device/DeviceEditWidget.cpp	/^DeviceEditWidget::OnModified(DataField &df)$/;"	f	class:DeviceEditWidget
OnModified	src/Dialogs/Device/Vega/VegaDemoDialog.cpp	/^VegaDemoWidget::OnModified(DataField &df)$/;"	f	class:VegaDemoWidget
OnModified	src/Dialogs/Plane/PlaneDetailsDialog.cpp	/^PlaneEditWidget::OnModified(DataField &df)$/;"	f	class:PlaneEditWidget
OnModified	src/Dialogs/Plane/PlanePolarDialog.cpp	/^PlanePolarWidget::OnModified(DataField &df)$/;"	f	class:PlanePolarWidget
OnModified	src/Dialogs/ReplayDialog.cpp	/^ReplayControlWidget::OnModified(DataField &_df)$/;"	f	class:ReplayControlWidget
OnModified	src/Dialogs/Settings/Panels/AirspaceConfigPanel.cpp	/^AirspaceConfigPanel::OnModified(DataField &df)$/;"	f	class:AirspaceConfigPanel
OnModified	src/Dialogs/Settings/Panels/CloudConfigPanel.cpp	/^CloudConfigPanel::OnModified(DataField &df)$/;"	f	class:CloudConfigPanel
OnModified	src/Dialogs/Settings/Panels/GaugesConfigPanel.cpp	/^GaugesConfigPanel::OnModified(DataField &df)$/;"	f	class:GaugesConfigPanel
OnModified	src/Dialogs/Settings/Panels/MapDisplayConfigPanel.cpp	/^MapDisplayConfigPanel::OnModified(DataField &df)$/;"	f	class:MapDisplayConfigPanel
OnModified	src/Dialogs/Settings/Panels/PagesConfigPanel.cpp	/^PageLayoutEditWidget::OnModified(DataField &df)$/;"	f	class:PageLayoutEditWidget
OnModified	src/Dialogs/Settings/Panels/PagesConfigPanel.cpp	/^PageListWidget::OnModified(const PageLayout &new_value)$/;"	f	class:PageListWidget
OnModified	src/Dialogs/Settings/Panels/RouteConfigPanel.cpp	/^RouteConfigPanel::OnModified(DataField &df)$/;"	f	class:RouteConfigPanel
OnModified	src/Dialogs/Settings/Panels/ScoringConfigPanel.cpp	/^ScoringConfigPanel::OnModified(DataField &df)$/;"	f	class:ScoringConfigPanel
OnModified	src/Dialogs/Settings/Panels/SymbolsConfigPanel.cpp	/^SymbolsConfigPanel::OnModified(DataField &df)$/;"	f	class:SymbolsConfigPanel
OnModified	src/Dialogs/Settings/Panels/TaskDefaultsConfigPanel.cpp	/^TaskDefaultsConfigPanel::OnModified(DataField &df)$/;"	f	class:TaskDefaultsConfigPanel
OnModified	src/Dialogs/Settings/Panels/TerrainDisplayConfigPanel.cpp	/^TerrainDisplayConfigPanel::OnModified(DataField &df)$/;"	f	class:TerrainDisplayConfigPanel
OnModified	src/Dialogs/Settings/Panels/TimeConfigPanel.cpp	/^TimeConfigPanel::OnModified(DataField &df)$/;"	f	class:TimeConfigPanel
OnModified	src/Dialogs/Settings/Panels/TrackingConfigPanel.cpp	/^TrackingConfigPanel::OnModified(DataField &df)$/;"	f	class:TrackingConfigPanel
OnModified	src/Dialogs/Settings/Panels/UnitsConfigPanel.cpp	/^UnitsConfigPanel::OnModified(DataField &df)$/;"	f	class:UnitsConfigPanel
OnModified	src/Dialogs/Settings/Panels/WaypointDisplayConfigPanel.cpp	/^WaypointDisplayConfigPanel::OnModified(DataField &df)$/;"	f	class:WaypointDisplayConfigPanel
OnModified	src/Dialogs/Settings/WindSettingsPanel.cpp	/^WindSettingsPanel::OnModified(DataField &df)$/;"	f	class:WindSettingsPanel
OnModified	src/Dialogs/Settings/dlgBasicSettings.cpp	/^FlightSetupPanel::OnModified(DataField &df)$/;"	f	class:FlightSetupPanel
OnModified	src/Dialogs/StatusPanels/TaskStatusPanel.cpp	/^TaskStatusPanel::OnModified(DataField &df)$/;"	f	class:TaskStatusPanel
OnModified	src/Dialogs/Task/Manager/TaskPropertiesPanel.cpp	/^TaskPropertiesPanel::OnModified(DataField &df)$/;"	f	class:TaskPropertiesPanel
OnModified	src/Dialogs/Task/TaskPointDialog.cpp	/^TaskPointWidget::OnModified(ObservationZoneEditWidget &widget)$/;"	f	class:TaskPointWidget
OnModified	src/Dialogs/Task/Widgets/ObservationZoneEditWidget.cpp	/^ObservationZoneEditWidget::OnModified(DataField &df)$/;"	f	class:ObservationZoneEditWidget
OnModified	src/Dialogs/Waypoint/WaypointList.cpp	/^WaypointListWidget::OnModified(DataField &df)$/;"	f	class:WaypointListWidget
OnModified	src/InfoBoxes/Panel/AltitudeSetup.cpp	/^AltitudeSetupPanel::OnModified(DataField &_df)$/;"	f	class:AltitudeSetupPanel
OnMoreClicked	src/Dialogs/Task/Manager/TaskListPanel.cpp	/^TaskListPanel::OnMoreClicked()$/;"	f	class:TaskListPanel
OnMouseDouble	src/Dialogs/Settings/dlgConfigInfoboxes.cpp	/^InfoBoxPreview::OnMouseDouble(PixelPoint p)$/;"	f	class:InfoBoxPreview
OnMouseDouble	src/Gauge/BigThermalAssistantWindow.cpp	/^BigThermalAssistantWindow::OnMouseDouble(PixelPoint p)$/;"	f	class:BigThermalAssistantWindow
OnMouseDouble	src/Gauge/BigTrafficWidget.cpp	/^FlarmTrafficControl::OnMouseDouble(PixelPoint p)$/;"	f	class:FlarmTrafficControl
OnMouseDouble	src/InfoBoxes/InfoBoxWindow.cpp	/^InfoBoxWindow::OnMouseDouble(PixelPoint p)$/;"	f	class:InfoBoxWindow
OnMouseDouble	src/MainWindow.cpp	/^MainWindow::OnMouseDouble(PixelPoint p)$/;"	f	class:MainWindow
OnMouseDouble	src/MapWindow/GlueMapWindowEvents.cpp	/^GlueMapWindow::OnMouseDouble(PixelPoint p)$/;"	f	class:GlueMapWindow
OnMouseDouble	src/ui/window/Window.cpp	/^Window::OnMouseDouble(PixelPoint p)$/;"	f	class:Window
OnMouseDouble	src/ui/window/custom/ContainerWindow.cpp	/^ContainerWindow::OnMouseDouble(PixelPoint p)$/;"	f	class:ContainerWindow
OnMouseDown	src/Dialogs/Settings/dlgConfigInfoboxes.cpp	/^InfoBoxPreview::OnMouseDown(PixelPoint p)$/;"	f	class:InfoBoxPreview
OnMouseDown	src/Dialogs/dlgAnalysis.cpp	/^ChartControl::OnMouseDown(PixelPoint p)$/;"	f	class:ChartControl
OnMouseDown	src/Form/Button.cpp	/^Button::OnMouseDown(PixelPoint p)$/;"	f	class:Button
OnMouseDown	src/Form/CheckBox.cpp	/^CheckBoxControl::OnMouseDown(PixelPoint p)$/;"	f	class:CheckBoxControl
OnMouseDown	src/Form/DigitEntry.cpp	/^DigitEntry::OnMouseDown(PixelPoint p)$/;"	f	class:DigitEntry
OnMouseDown	src/Form/Edit.cpp	/^WndProperty::OnMouseDown(PixelPoint p)$/;"	f	class:WndProperty
OnMouseDown	src/Form/Form.cpp	/^WndForm::OnMouseDown(PixelPoint p)$/;"	f	class:WndForm
OnMouseDown	src/Form/List.cpp	/^ListControl::OnMouseDown(PixelPoint Pos)$/;"	f	class:ListControl
OnMouseDown	src/Form/TabDisplay.cpp	/^TabDisplay::OnMouseDown(PixelPoint p)$/;"	f	class:TabDisplay
OnMouseDown	src/Form/TabMenuDisplay.cpp	/^TabMenuDisplay::OnMouseDown(PixelPoint Pos)$/;"	f	class:TabMenuDisplay
OnMouseDown	src/Gauge/BigThermalAssistantWindow.cpp	/^BigThermalAssistantWindow::OnMouseDown(PixelPoint p)$/;"	f	class:BigThermalAssistantWindow
OnMouseDown	src/Gauge/BigTrafficWidget.cpp	/^FlarmTrafficControl::OnMouseDown(PixelPoint p)$/;"	f	class:FlarmTrafficControl
OnMouseDown	src/Gauge/GaugeFLARM.cpp	/^SmallTrafficWindow::OnMouseDown(PixelPoint p)$/;"	f	class:SmallTrafficWindow
OnMouseDown	src/Gauge/GaugeThermalAssistant.cpp	/^GaugeThermalAssistantWindow::OnMouseDown(PixelPoint p)$/;"	f	class:GaugeThermalAssistantWindow
OnMouseDown	src/InfoBoxes/InfoBoxWindow.cpp	/^InfoBoxWindow::OnMouseDown(PixelPoint p)$/;"	f	class:InfoBoxWindow
OnMouseDown	src/MainWindow.cpp	/^MainWindow::OnMouseDown(PixelPoint p)$/;"	f	class:MainWindow
OnMouseDown	src/MapWindow/GlueMapWindowEvents.cpp	/^GlueMapWindow::OnMouseDown(PixelPoint p)$/;"	f	class:GlueMapWindow
OnMouseDown	src/MapWindow/TargetMapWindowEvents.cpp	/^TargetMapWindow::OnMouseDown(PixelPoint p)$/;"	f	class:TargetMapWindow
OnMouseDown	src/PopupMessage.cpp	/^PopupMessage::OnMouseDown(PixelPoint p)$/;"	f	class:PopupMessage
OnMouseDown	src/ui/window/Window.cpp	/^Window::OnMouseDown(PixelPoint p)$/;"	f	class:Window
OnMouseDown	src/ui/window/custom/ContainerWindow.cpp	/^ContainerWindow::OnMouseDown(PixelPoint p)$/;"	f	class:ContainerWindow
OnMouseGesture	src/Gauge/BigTrafficWidget.cpp	/^FlarmTrafficControl::OnMouseGesture(const TCHAR* gesture)$/;"	f	class:FlarmTrafficControl
OnMouseGesture	src/MapWindow/GlueMapWindowEvents.cpp	/^GlueMapWindow::OnMouseGesture(const TCHAR* gesture)$/;"	f	class:GlueMapWindow
OnMouseMove	src/Dialogs/dlgAnalysis.cpp	/^ChartControl::OnMouseMove(PixelPoint p, unsigned keys)$/;"	f	class:ChartControl
OnMouseMove	src/Form/Button.cpp	/^Button::OnMouseMove(PixelPoint p, unsigned keys)$/;"	f	class:Button
OnMouseMove	src/Form/CheckBox.cpp	/^CheckBoxControl::OnMouseMove(PixelPoint p, unsigned keys)$/;"	f	class:CheckBoxControl
OnMouseMove	src/Form/Edit.cpp	/^WndProperty::OnMouseMove(PixelPoint p, unsigned keys)$/;"	f	class:WndProperty
OnMouseMove	src/Form/Form.cpp	/^WndForm::OnMouseMove(PixelPoint p, unsigned keys)$/;"	f	class:WndForm
OnMouseMove	src/Form/List.cpp	/^ListControl::OnMouseMove(PixelPoint p, unsigned keys)$/;"	f	class:ListControl
OnMouseMove	src/Form/TabDisplay.cpp	/^TabDisplay::OnMouseMove(PixelPoint p, unsigned keys)$/;"	f	class:TabDisplay
OnMouseMove	src/Form/TabMenuDisplay.cpp	/^TabMenuDisplay::OnMouseMove(PixelPoint p, unsigned keys)$/;"	f	class:TabMenuDisplay
OnMouseMove	src/Gauge/BigThermalAssistantWindow.cpp	/^BigThermalAssistantWindow::OnMouseMove(PixelPoint p, gcc_unused unsigned keys)$/;"	f	class:BigThermalAssistantWindow
OnMouseMove	src/Gauge/BigTrafficWidget.cpp	/^FlarmTrafficControl::OnMouseMove(PixelPoint p, gcc_unused unsigned keys)$/;"	f	class:FlarmTrafficControl
OnMouseMove	src/Gauge/GaugeFLARM.cpp	/^SmallTrafficWindow::OnMouseMove(PixelPoint p, unsigned keys)$/;"	f	class:SmallTrafficWindow
OnMouseMove	src/Gauge/GaugeThermalAssistant.cpp	/^GaugeThermalAssistantWindow::OnMouseMove(PixelPoint p, unsigned keys)$/;"	f	class:GaugeThermalAssistantWindow
OnMouseMove	src/InfoBoxes/InfoBoxWindow.cpp	/^InfoBoxWindow::OnMouseMove(PixelPoint p, unsigned keys)$/;"	f	class:InfoBoxWindow
OnMouseMove	src/MainWindow.cpp	/^MainWindow::OnMouseMove(PixelPoint p, unsigned keys)$/;"	f	class:MainWindow
OnMouseMove	src/MapWindow/GlueMapWindowEvents.cpp	/^GlueMapWindow::OnMouseMove(PixelPoint p, unsigned keys)$/;"	f	class:GlueMapWindow
OnMouseMove	src/MapWindow/TargetMapWindowEvents.cpp	/^TargetMapWindow::OnMouseMove(PixelPoint p, unsigned keys)$/;"	f	class:TargetMapWindow
OnMouseMove	src/ui/window/Window.cpp	/^Window::OnMouseMove(PixelPoint p, unsigned keys)$/;"	f	class:Window
OnMouseMove	src/ui/window/custom/ContainerWindow.cpp	/^ContainerWindow::OnMouseMove(PixelPoint p, unsigned keys)$/;"	f	class:ContainerWindow
OnMouseUp	src/Dialogs/dlgAnalysis.cpp	/^ChartControl::OnMouseUp(PixelPoint p)$/;"	f	class:ChartControl
OnMouseUp	src/Form/Button.cpp	/^Button::OnMouseUp(PixelPoint p)$/;"	f	class:Button
OnMouseUp	src/Form/CheckBox.cpp	/^CheckBoxControl::OnMouseUp(PixelPoint p)$/;"	f	class:CheckBoxControl
OnMouseUp	src/Form/Edit.cpp	/^WndProperty::OnMouseUp(PixelPoint p)$/;"	f	class:WndProperty
OnMouseUp	src/Form/Form.cpp	/^WndForm::OnMouseUp(PixelPoint p)$/;"	f	class:WndForm
OnMouseUp	src/Form/List.cpp	/^ListControl::OnMouseUp(PixelPoint p)$/;"	f	class:ListControl
OnMouseUp	src/Form/TabDisplay.cpp	/^TabDisplay::OnMouseUp(PixelPoint p)$/;"	f	class:TabDisplay
OnMouseUp	src/Form/TabMenuDisplay.cpp	/^TabMenuDisplay::OnMouseUp(PixelPoint Pos)$/;"	f	class:TabMenuDisplay
OnMouseUp	src/Gauge/BigThermalAssistantWindow.cpp	/^BigThermalAssistantWindow::OnMouseUp(PixelPoint p)$/;"	f	class:BigThermalAssistantWindow
OnMouseUp	src/Gauge/BigTrafficWidget.cpp	/^FlarmTrafficControl::OnMouseUp(PixelPoint p)$/;"	f	class:FlarmTrafficControl
OnMouseUp	src/Gauge/GaugeFLARM.cpp	/^SmallTrafficWindow::OnMouseUp(PixelPoint p)$/;"	f	class:SmallTrafficWindow
OnMouseUp	src/Gauge/GaugeThermalAssistant.cpp	/^GaugeThermalAssistantWindow::OnMouseUp(PixelPoint p)$/;"	f	class:GaugeThermalAssistantWindow
OnMouseUp	src/InfoBoxes/InfoBoxWindow.cpp	/^InfoBoxWindow::OnMouseUp(PixelPoint p)$/;"	f	class:InfoBoxWindow
OnMouseUp	src/MainWindow.cpp	/^MainWindow::OnMouseUp(PixelPoint p)$/;"	f	class:MainWindow
OnMouseUp	src/MapWindow/GlueMapWindowEvents.cpp	/^GlueMapWindow::OnMouseUp(PixelPoint p)$/;"	f	class:GlueMapWindow
OnMouseUp	src/MapWindow/TargetMapWindowEvents.cpp	/^TargetMapWindow::OnMouseUp(PixelPoint p)$/;"	f	class:TargetMapWindow
OnMouseUp	src/ui/window/Window.cpp	/^Window::OnMouseUp(PixelPoint p)$/;"	f	class:Window
OnMouseUp	src/ui/window/custom/ContainerWindow.cpp	/^ContainerWindow::OnMouseUp(PixelPoint p)$/;"	f	class:ContainerWindow
OnMouseWheel	src/Form/List.cpp	/^ListControl::OnMouseWheel(PixelPoint p, int delta)$/;"	f	class:ListControl
OnMouseWheel	src/MapWindow/GlueMapWindowEvents.cpp	/^GlueMapWindow::OnMouseWheel(PixelPoint p, int delta)$/;"	f	class:GlueMapWindow
OnMouseWheel	src/ui/window/Window.cpp	/^Window::OnMouseWheel(PixelPoint p, int delta)$/;"	f	class:Window
OnMouseWheel	src/ui/window/custom/ContainerWindow.cpp	/^ContainerWindow::OnMouseWheel(PixelPoint p, int delta)$/;"	f	class:ContainerWindow
OnMultiTouchDown	src/MapWindow/GlueMapWindowEvents.cpp	/^GlueMapWindow::OnMultiTouchDown()$/;"	f	class:GlueMapWindow
OnMultiTouchDown	src/ui/window/Window.cpp	/^Window::OnMultiTouchDown()$/;"	f	class:Window
OnMultiTouchDown	src/ui/window/custom/ContainerWindow.cpp	/^ContainerWindow::OnMultiTouchDown()$/;"	f	class:ContainerWindow
OnMultiTouchUp	src/ui/window/Window.cpp	/^Window::OnMultiTouchUp()$/;"	f	class:Window
OnMultiTouchUp	src/ui/window/custom/ContainerWindow.cpp	/^ContainerWindow::OnMultiTouchUp()$/;"	f	class:ContainerWindow
OnNameClicked	src/Dialogs/Task/TargetDialog.cpp	/^TargetWidget::OnNameClicked()$/;"	f	class:TargetWidget
OnNewTaskClicked	src/Dialogs/Task/Manager/TaskActionsPanel.cpp	/^TaskActionsPanel::OnNewTaskClicked()$/;"	f	class:TaskActionsPanel
OnNextClicked	src/Dialogs/Task/TargetDialog.cpp	/^TargetWidget::OnNextClicked()$/;"	f	class:TargetWidget
OnNextClicked	src/Dialogs/Task/TaskPointDialog.cpp	/^TaskPointWidget::OnNextClicked()$/;"	f	class:TaskPointWidget
OnNextClicked	src/Dialogs/Waypoint/dlgWaypointDetails.cpp	/^  void OnNextClicked() {$/;"	f	class:final
OnNotification	src/Job/Thread.cpp	/^JobThread::OnNotification()$/;"	f	class:JobThread
OnNotification	src/Operation/ThreadedOperationEnvironment.cpp	/^ThreadedOperationEnvironment::OnNotification()$/;"	f	class:ThreadedOperationEnvironment
OnOptionalStartsClicked	src/Dialogs/Task/TaskPointDialog.cpp	/^TaskPointWidget::OnOptionalStartsClicked()$/;"	f	class:TaskPointWidget
OnPageFlipped	src/Dialogs/Settings/dlgConfiguration.cpp	/^OnPageFlipped(WidgetDialog &dialog, TabMenuDisplay &menu)$/;"	f	file:
OnPageFlipped	src/Form/TabMenuDisplay.cpp	/^TabMenuDisplay::OnPageFlipped()$/;"	f	class:TabMenuDisplay
OnPaint	src/Dialogs/KnobTextEntry.cpp	/^KnobTextEntryWindow::OnPaint(Canvas &canvas)$/;"	f	class:KnobTextEntryWindow
OnPaint	src/Dialogs/Settings/Panels/TerrainDisplayConfigPanel.cpp	/^TerrainPreviewWindow::OnPaint(Canvas &canvas)$/;"	f	class:TerrainPreviewWindow
OnPaint	src/Dialogs/Settings/dlgConfigInfoboxes.cpp	/^InfoBoxPreview::OnPaint(Canvas &canvas)$/;"	f	class:InfoBoxPreview
OnPaint	src/Dialogs/SimulatorPromptWindow.cpp	/^SimulatorPromptWindow::OnPaint(Canvas &canvas)$/;"	f	class:SimulatorPromptWindow
OnPaint	src/Dialogs/dlgAnalysis.cpp	/^ChartControl::OnPaint(Canvas &canvas)$/;"	f	class:ChartControl
OnPaint	src/Dialogs/dlgCredits.cpp	/^LogoPageWindow::OnPaint(Canvas &canvas)$/;"	f	class:LogoPageWindow
OnPaint	src/Form/Button.cpp	/^Button::OnPaint(Canvas &canvas)$/;"	f	class:Button
OnPaint	src/Form/CheckBox.cpp	/^CheckBoxControl::OnPaint(Canvas &canvas)$/;"	f	class:CheckBoxControl
OnPaint	src/Form/DigitEntry.cpp	/^DigitEntry::OnPaint(Canvas &canvas)$/;"	f	class:DigitEntry
OnPaint	src/Form/Draw.cpp	/^WndOwnerDrawFrame::OnPaint(Canvas &canvas)$/;"	f	class:WndOwnerDrawFrame
OnPaint	src/Form/Edit.cpp	/^WndProperty::OnPaint(Canvas &canvas)$/;"	f	class:WndProperty
OnPaint	src/Form/Form.cpp	/^WndForm::OnPaint(Canvas &canvas)$/;"	f	class:WndForm
OnPaint	src/Form/Frame.cpp	/^WndFrame::OnPaint(Canvas &canvas)$/;"	f	class:WndFrame
OnPaint	src/Form/HLine.cpp	/^HLine::OnPaint(Canvas &canvas)$/;"	f	class:HLine
OnPaint	src/Form/List.cpp	/^ListControl::OnPaint(Canvas &canvas)$/;"	f	class:ListControl
OnPaint	src/Form/List.cpp	/^ListControl::OnPaint(Canvas &canvas, const PixelRect &dirty)$/;"	f	class:ListControl
OnPaint	src/Form/TabDisplay.cpp	/^TabDisplay::OnPaint(Canvas &canvas)$/;"	f	class:TabDisplay
OnPaint	src/Form/TabMenuDisplay.cpp	/^TabMenuDisplay::OnPaint(Canvas &canvas)$/;"	f	class:TabMenuDisplay
OnPaint	src/Gauge/BigTrafficWidget.cpp	/^FlarmTrafficControl::OnPaint(Canvas &canvas)$/;"	f	class:FlarmTrafficControl
OnPaint	src/Gauge/FlarmTrafficWindow.cpp	/^FlarmTrafficWindow::OnPaint(Canvas &canvas)$/;"	f	class:FlarmTrafficWindow
OnPaint	src/Gauge/GaugeFLARM.cpp	/^SmallTrafficWindow::OnPaint(Canvas &canvas)$/;"	f	class:SmallTrafficWindow
OnPaint	src/Gauge/GaugeThermalAssistant.cpp	/^GaugeThermalAssistantWindow::OnPaint(Canvas &canvas)$/;"	f	class:GaugeThermalAssistantWindow
OnPaint	src/MainWindow.cpp	/^MainWindow::OnPaint(Canvas &canvas)$/;"	f	class:MainWindow
OnPaint	src/MapWindow/GlueMapWindowEvents.cpp	/^GlueMapWindow::OnPaint(Canvas &canvas)$/;"	f	class:GlueMapWindow
OnPaint	src/MapWindow/MapWindowEvents.cpp	/^MapWindow::OnPaint(Canvas &canvas)$/;"	f	class:MapWindow
OnPaint	src/MapWindow/TargetMapWindow.cpp	/^TargetMapWindow::OnPaint(Canvas &canvas)$/;"	f	class:TargetMapWindow
OnPaint	src/PopupMessage.cpp	/^PopupMessage::OnPaint(Canvas &canvas)$/;"	f	class:PopupMessage
OnPaint	src/ProgressWindow.cpp	/^ProgressWindow::OnPaint(Canvas &canvas)$/;"	f	class:ProgressWindow
OnPaint	src/Screen/Custom/LargeTextWindow.cpp	/^LargeTextWindow::OnPaint(Canvas &canvas)$/;"	f	class:LargeTextWindow
OnPaint	src/Screen/ProgressBar.cpp	/^ProgressBar::OnPaint(Canvas &canvas)$/;"	f	class:ProgressBar
OnPaint	src/Screen/TerminalWindow.cpp	/^TerminalWindow::OnPaint(Canvas &canvas)$/;"	f	class:TerminalWindow
OnPaint	src/Screen/TerminalWindow.cpp	/^TerminalWindow::OnPaint(Canvas &canvas, const PixelRect &p_dirty)$/;"	f	class:TerminalWindow
OnPaint	src/Widget/ViewImageWidget.cpp	/^ViewImageWindow::OnPaint(Canvas &canvas)$/;"	f	class:ViewImageWindow
OnPaint	src/ui/window/BufferWindow.cpp	/^BufferWindow::OnPaint(Canvas &canvas)$/;"	f	class:BufferWindow
OnPaint	src/ui/window/ContainerWindow.hpp	/^  virtual void OnPaint(gcc_unused Canvas &canvas) {}$/;"	f	class:ContainerWindow
OnPaint	src/ui/window/DoubleBufferWindow.cpp	/^DoubleBufferWindow::OnPaint(Canvas &canvas)$/;"	f	class:DoubleBufferWindow
OnPaint	src/ui/window/PaintWindow.hpp	/^  virtual void OnPaint(Canvas &canvas, gcc_unused const PixelRect &dirty) {$/;"	f	class:PaintWindow
OnPaint	src/ui/window/SolidContainerWindow.cpp	/^SolidContainerWindow::OnPaint(Canvas &canvas)$/;"	f	class:SolidContainerWindow
OnPaint	src/ui/window/custom/ContainerWindow.cpp	/^ContainerWindow::OnPaint(Canvas &canvas)$/;"	f	class:ContainerWindow
OnPaint	src/ui/window/fb/TopWindow.cpp	/^TopWindow::OnPaint(Canvas &canvas)$/;"	f	class:UI::TopWindow
OnPaintBuffer	src/CrossSection/CrossSectionWindow.cpp	/^CrossSectionWindow::OnPaintBuffer(Canvas &canvas)$/;"	f	class:CrossSectionWindow
OnPaintBuffer	src/Gauge/GaugeVario.cpp	/^GaugeVario::OnPaintBuffer(Canvas &canvas)$/;"	f	class:GaugeVario
OnPaintBuffer	src/Gauge/ThermalAssistantWindow.cpp	/^ThermalAssistantWindow::OnPaintBuffer(Canvas &canvas)$/;"	f	class:ThermalAssistantWindow
OnPaintBuffer	src/InfoBoxes/InfoBoxWindow.cpp	/^InfoBoxWindow::OnPaintBuffer(Canvas &canvas)$/;"	f	class:InfoBoxWindow
OnPaintBuffer	src/MapWindow/GlueMapWindowEvents.cpp	/^GlueMapWindow::OnPaintBuffer(Canvas &canvas)$/;"	f	class:GlueMapWindow
OnPaintBuffer	src/MapWindow/MapWindow.cpp	/^MapWindow::OnPaintBuffer(Canvas &canvas)$/;"	f	class:MapWindow
OnPaintBuffer	src/MapWindow/TargetMapWindow.cpp	/^TargetMapWindow::OnPaintBuffer(Canvas &canvas)$/;"	f	class:TargetMapWindow
OnPaste	src/Dialogs/Settings/dlgConfigInfoboxes.cpp	/^InfoBoxesConfigWidget::OnPaste()$/;"	f	class:InfoBoxesConfigWidget
OnPing	src/Tracking/SkyLines/Server.cpp	/^Server::OnPing(const Client &client, unsigned id)$/;"	f	class:SkyLinesTracking::Server
OnPrevClicked	src/Dialogs/Task/TargetDialog.cpp	/^TargetWidget::OnPrevClicked()$/;"	f	class:TargetWidget
OnPrevClicked	src/Dialogs/Waypoint/dlgWaypointDetails.cpp	/^  void OnPrevClicked() {$/;"	f	class:final
OnPreviousClicked	src/Dialogs/Task/TaskPointDialog.cpp	/^TaskPointWidget::OnPreviousClicked()$/;"	f	class:TaskPointWidget
OnProjectionModified	src/MapWindow/GlueMapWindow.hpp	/^  void OnProjectionModified() {}$/;"	f	class:GlueMapWindow
OnRadialModified	src/Dialogs/Task/TargetDialog.cpp	/^TargetWidget::OnRadialModified(double new_value)$/;"	f	class:TargetWidget
OnRangeModified	src/Dialogs/Task/TargetDialog.cpp	/^TargetWidget::OnRangeModified(double new_value)$/;"	f	class:TargetWidget
OnRelocateClicked	src/Dialogs/Task/TaskPointDialog.cpp	/^TaskPointWidget::OnRelocateClicked()$/;"	f	class:TaskPointWidget
OnRemoveClicked	src/Dialogs/Task/TaskPointDialog.cpp	/^TaskPointWidget::OnRemoveClicked()$/;"	f	class:TaskPointWidget
OnResize	src/Dialogs/SimulatorPromptWindow.cpp	/^SimulatorPromptWindow::OnResize(PixelSize new_size)$/;"	f	class:SimulatorPromptWindow
OnResize	src/Dialogs/WidgetDialog.cpp	/^WidgetDialog::OnResize(PixelSize new_size)$/;"	f	class:WidgetDialog
OnResize	src/Form/Edit.cpp	/^WndProperty::OnResize(PixelSize new_size)$/;"	f	class:WndProperty
OnResize	src/Form/Form.cpp	/^WndForm::OnResize(PixelSize new_size)$/;"	f	class:WndForm
OnResize	src/Form/GridView.cpp	/^GridView::OnResize(PixelSize new_size)$/;"	f	class:GridView
OnResize	src/Form/List.cpp	/^ListControl::OnResize(PixelSize new_size)$/;"	f	class:ListControl
OnResize	src/Form/TabDisplay.cpp	/^TabDisplay::OnResize(PixelSize new_size)$/;"	f	class:TabDisplay
OnResize	src/Form/TabMenuDisplay.cpp	/^TabMenuDisplay::OnResize(PixelSize new_size)$/;"	f	class:TabMenuDisplay
OnResize	src/Gauge/FlarmTrafficWindow.cpp	/^FlarmTrafficWindow::OnResize(PixelSize new_size)$/;"	f	class:FlarmTrafficWindow
OnResize	src/Gauge/GaugeVario.cpp	/^GaugeVario::OnResize(PixelSize new_size)$/;"	f	class:GaugeVario
OnResize	src/Gauge/ThermalAssistantWindow.cpp	/^ThermalAssistantWindow::OnResize(PixelSize new_size)$/;"	f	class:ThermalAssistantWindow
OnResize	src/InfoBoxes/InfoBoxWindow.cpp	/^InfoBoxWindow::OnResize(PixelSize new_size)$/;"	f	class:InfoBoxWindow
OnResize	src/MainWindow.cpp	/^MainWindow::OnResize(PixelSize new_size)$/;"	f	class:MainWindow
OnResize	src/MapWindow/MapWindowEvents.cpp	/^MapWindow::OnResize(PixelSize new_size)$/;"	f	class:MapWindow
OnResize	src/MapWindow/TargetMapWindow.cpp	/^TargetMapWindow::OnResize(PixelSize new_size)$/;"	f	class:TargetMapWindow
OnResize	src/Menu/ButtonLabel.cpp	/^ButtonLabel::OnResize(const PixelRect &rc)$/;"	f	class:ButtonLabel
OnResize	src/Menu/MenuBar.cpp	/^MenuBar::OnResize(const PixelRect &rc)$/;"	f	class:MenuBar
OnResize	src/ProgressWindow.cpp	/^ProgressWindow::OnResize(PixelSize new_size)$/;"	f	class:ProgressWindow
OnResize	src/Screen/Custom/LargeTextWindow.cpp	/^LargeTextWindow::OnResize(PixelSize new_size)$/;"	f	class:LargeTextWindow
OnResize	src/Screen/TerminalWindow.cpp	/^TerminalWindow::OnResize(PixelSize new_size)$/;"	f	class:TerminalWindow
OnResize	src/Widget/KeyboardWidget.cpp	/^KeyboardWidget::OnResize(const PixelRect &rc)$/;"	f	class:KeyboardWidget
OnResize	src/ui/canvas/sdl/TopCanvas.cpp	/^TopCanvas::OnResize(PixelSize new_size)$/;"	f	class:TopCanvas
OnResize	src/ui/window/BufferWindow.cpp	/^BufferWindow::OnResize(PixelSize new_size)$/;"	f	class:BufferWindow
OnResize	src/ui/window/SingleWindow.cpp	/^SingleWindow::OnResize(PixelSize new_size)$/;"	f	class:UI::SingleWindow
OnResize	src/ui/window/Window.cpp	/^Window::OnResize(PixelSize new_size)$/;"	f	class:Window
OnResize	src/ui/window/android/TopWindow.cpp	/^TopWindow::OnResize(PixelSize new_size)$/;"	f	class:UI::TopWindow
OnResize	src/ui/window/fb/TopWindow.cpp	/^TopWindow::OnResize(PixelSize new_size)$/;"	f	class:UI::TopWindow
OnResize	src/ui/window/sdl/TopWindow.cpp	/^TopWindow::OnResize(PixelSize new_size)$/;"	f	class:UI::TopWindow
OnSave	src/Dialogs/Device/Vega/VegaConfigurationDialog.cpp	/^VegaConfigurationExtraButtons::OnSave()$/;"	f	class:VegaConfigurationExtraButtons
OnSensorUpdate	src/Device/Descriptor.cpp	/^DeviceDescriptor::OnSensorUpdate(const MoreData &basic)$/;"	f	class:DeviceDescriptor
OnSetFocus	src/Form/Button.cpp	/^Button::OnSetFocus()$/;"	f	class:Button
OnSetFocus	src/Form/CheckBox.cpp	/^CheckBoxControl::OnSetFocus()$/;"	f	class:CheckBoxControl
OnSetFocus	src/Form/DigitEntry.cpp	/^DigitEntry::OnSetFocus()$/;"	f	class:DigitEntry
OnSetFocus	src/Form/Edit.cpp	/^WndProperty::OnSetFocus()$/;"	f	class:WndProperty
OnSetFocus	src/Form/List.cpp	/^ListControl::OnSetFocus()$/;"	f	class:ListControl
OnSetFocus	src/Form/TabDisplay.cpp	/^TabDisplay::OnSetFocus()$/;"	f	class:TabDisplay
OnSetFocus	src/Form/TabMenuDisplay.cpp	/^TabMenuDisplay::OnSetFocus()$/;"	f	class:TabMenuDisplay
OnSetFocus	src/InfoBoxes/InfoBoxWindow.cpp	/^InfoBoxWindow::OnSetFocus()$/;"	f	class:InfoBoxWindow
OnSetFocus	src/MainWindow.cpp	/^MainWindow::OnSetFocus()$/;"	f	class:MainWindow
OnSetFocus	src/ui/window/Window.cpp	/^Window::OnSetFocus()$/;"	f	class:Window
OnSetWaypointClicked	src/Dialogs/Traffic/TeamCodeDialog.cpp	/^TeamCodeWidget::OnSetWaypointClicked()$/;"	f	class:TeamCodeWidget
OnShiftClicked	src/Widget/KeyboardWidget.cpp	/^KeyboardWidget::OnShiftClicked()$/;"	f	class:KeyboardWidget
OnShrinkClicked	src/Dialogs/Waypoint/dlgWaypointDetails.cpp	/^WaypointDetailsWidget::OnShrinkClicked()$/;"	f	class:WaypointDetailsWidget
OnSkyLinesError	src/Tracking/TrackingGlue.cpp	/^TrackingGlue::OnSkyLinesError(std::exception_ptr e)$/;"	f	class:TrackingGlue
OnSkyLinesReady	src/Tracking/SkyLines/Handler.hpp	/^  virtual void OnSkyLinesReady() {}$/;"	f	class:SkyLinesTracking::Handler
OnSolve	src/Engine/Route/AirspaceRoute.cpp	/^AirspaceRoute::OnSolve(const AGeoPoint &origin, const AGeoPoint &destination)$/;"	f	class:AirspaceRoute
OnSolve	src/Engine/Route/RoutePlanner.cpp	/^RoutePlanner::OnSolve(const AGeoPoint &origin, const AGeoPoint &destination)$/;"	f	class:RoutePlanner
OnStartClicked	src/Dialogs/ReplayDialog.cpp	/^ReplayControlWidget::OnStartClicked()$/;"	f	class:ReplayControlWidget
OnStartTask	src/Computer/GlideComputer.cpp	/^GlideComputer::OnStartTask()$/;"	f	class:GlideComputer
OnStopClicked	src/Dialogs/ReplayDialog.cpp	/^ReplayControlWidget::OnStopClicked()$/;"	f	class:ReplayControlWidget
OnSysTicker	src/Device/Descriptor.cpp	/^DeviceDescriptor::OnSysTicker()$/;"	f	class:DeviceDescriptor
OnSysTicker	src/Device/Driver.cpp	/^AbstractDevice::OnSysTicker()$/;"	f	class:AbstractDevice
OnSysTicker	src/Device/Driver/LX/Mode.cpp	/^LXDevice::OnSysTicker()$/;"	f	class:LXDevice
OnTakeoff	src/Computer/GlideComputer.cpp	/^GlideComputer::OnTakeoff()$/;"	f	class:GlideComputer
OnTaskModified	src/Dialogs/Task/TargetDialog.cpp	/^TargetDialogMapWindow::OnTaskModified()$/;"	f	class:TargetDialogMapWindow
OnTaskModified	src/MapWindow/TargetMapWindowDrag.cpp	/^TargetMapWindow::OnTaskModified()$/;"	f	class:TargetMapWindow
OnTaskTypeChange	src/Dialogs/Task/Manager/TaskPropertiesPanel.cpp	/^TaskPropertiesPanel::OnTaskTypeChange(DataFieldEnum &df)$/;"	f	class:TaskPropertiesPanel
OnTeamClicked	src/Dialogs/Traffic/FlarmTrafficDetails.cpp	/^FlarmTrafficDetailsWidget::OnTeamClicked()$/;"	f	class:FlarmTrafficDetailsWidget
OnThermal	src/Tracking/SkyLines/Handler.hpp	/^  virtual void OnThermal(unsigned time_of_day_ms,$/;"	f	class:SkyLinesTracking::Handler
OnThermal	src/Tracking/TrackingGlue.cpp	/^TrackingGlue::OnThermal(unsigned time_of_day_ms,$/;"	f	class:TrackingGlue
OnThermalReceived	src/Tracking/SkyLines/Client.cpp	/^SkyLinesTracking::Client::OnThermalReceived(const ThermalResponsePacket &packet,$/;"	f	class:SkyLinesTracking::Client
OnThermalRequest	src/Cloud/Main.cpp	/^CloudServer::OnThermalRequest(const Client &c)$/;"	f	class:CloudServer
OnThermalRequest	src/Tracking/SkyLines/Server.hpp	/^  virtual void OnThermalRequest(const Client &client) {}$/;"	f	class:SkyLinesTracking::Server
OnThermalSubmit	src/Cloud/Main.cpp	/^CloudServer::OnThermalSubmit(const Client &c,$/;"	f	class:CloudServer
OnThermalSubmit	src/Tracking/SkyLines/Server.hpp	/^  virtual void OnThermalSubmit(const Client &client,$/;"	f	class:SkyLinesTracking::Server
OnTimer	src/Dialogs/FileManager.cpp	/^ManagedFileListWidget::OnTimer()$/;"	f	class:ManagedFileListWidget
OnTimer	src/Dialogs/Settings/dlgBasicSettings.cpp	/^FlightSetupPanel::OnTimer()$/;"	f	class:FlightSetupPanel
OnTimer	src/RateLimiter.cpp	/^RateLimiter::OnTimer()$/;"	f	class:RateLimiter
OnTimer	src/Replay/Replay.cpp	/^Replay::OnTimer()$/;"	f	class:Replay
OnTimer	src/Tracking/TrackingGlue.cpp	/^TrackingGlue::OnTimer(const MoreData &basic, const DerivedInfo &calculated)$/;"	f	class:TrackingGlue
OnTraffic	src/Tracking/SkyLines/Handler.hpp	/^  virtual void OnTraffic(uint32_t pilot_id, unsigned time_of_day_ms,$/;"	f	class:SkyLinesTracking::Handler
OnTraffic	src/Tracking/TrackingGlue.cpp	/^TrackingGlue::OnTraffic(uint32_t pilot_id, unsigned time_of_day_ms,$/;"	f	class:TrackingGlue
OnTrafficReceived	src/Tracking/SkyLines/Client.cpp	/^SkyLinesTracking::Client::OnTrafficReceived(const TrafficResponsePacket &packet,$/;"	f	class:SkyLinesTracking::Client
OnTrafficRequest	src/Cloud/Main.cpp	/^CloudServer::OnTrafficRequest(const Client &c, bool near)$/;"	f	class:CloudServer
OnTrafficRequest	src/Tracking/SkyLines/Server.hpp	/^  virtual void OnTrafficRequest(const Client &client, bool near) {}$/;"	f	class:SkyLinesTracking::Server
OnTransitionEnter	src/Computer/GlideComputer.cpp	/^GlideComputer::OnTransitionEnter()$/;"	f	class:GlideComputer
OnTypeClicked	src/Dialogs/Task/TaskPointDialog.cpp	/^TaskPointWidget::OnTypeClicked()$/;"	f	class:TaskPointWidget
OnUISettingsUpdate	src/Blackboard/BlackboardListener.cpp	/^NullBlackboardListener::OnUISettingsUpdate(gcc_unused const UISettings &settings)$/;"	f	class:NullBlackboardListener
OnUISettingsUpdate	src/Blackboard/ProxyBlackboardListener.cpp	/^ProxyBlackboardListener::OnUISettingsUpdate(const UISettings &settings)$/;"	f	class:ProxyBlackboardListener
OnUser	src/ui/event/Notify.cpp	/^Notify::OnUser(unsigned id)$/;"	f	class:UI::Notify
OnUser	src/ui/window/gdi/Window.cpp	/^Window::OnUser(unsigned id)$/;"	f	class:Window
OnUserName	src/Tracking/SkyLines/Handler.hpp	/^  virtual void OnUserName(uint32_t user_id, const TCHAR *name) {}$/;"	f	class:SkyLinesTracking::Handler
OnUserName	src/Tracking/TrackingGlue.cpp	/^TrackingGlue::OnUserName(uint32_t user_id, const TCHAR *name)$/;"	f	class:TrackingGlue
OnUserNameReceived	src/Tracking/SkyLines/Client.cpp	/^SkyLinesTracking::Client::OnUserNameReceived(const UserNameResponsePacket &packet,$/;"	f	class:SkyLinesTracking::Client
OnUserNameRequest	src/Tracking/SkyLines/Server.hpp	/^  virtual void OnUserNameRequest(const Client &client, uint32_t user_id) {}$/;"	f	class:SkyLinesTracking::Server
OnWave	src/Tracking/SkyLines/Handler.hpp	/^  virtual void OnWave(unsigned time_of_day_ms,$/;"	f	class:SkyLinesTracking::Handler
OnWave	src/Tracking/TrackingGlue.cpp	/^TrackingGlue::OnWave(unsigned time_of_day_ms,$/;"	f	class:TrackingGlue
OnWaveReceived	src/Tracking/SkyLines/Client.cpp	/^SkyLinesTracking::Client::OnWaveReceived(const WaveResponsePacket &packet,$/;"	f	class:SkyLinesTracking::Client
OnWaveRequest	src/Tracking/SkyLines/Server.hpp	/^  virtual void OnWaveRequest(const Client &client) {}$/;"	f	class:SkyLinesTracking::Server
OnWaveSubmit	src/Cloud/Main.cpp	/^CloudServer::OnWaveSubmit(const Client &c,$/;"	f	class:CloudServer
OnWaveSubmit	src/Tracking/SkyLines/Server.hpp	/^  virtual void OnWaveSubmit(const Client &client,$/;"	f	class:SkyLinesTracking::Server
OnWaypointDeleteClicked	src/Dialogs/Waypoint/Manager.cpp	/^WaypointManagerWidget::OnWaypointDeleteClicked(unsigned i)$/;"	f	class:WaypointManagerWidget
OnWaypointEditClicked	src/Dialogs/Waypoint/Manager.cpp	/^WaypointManagerWidget::OnWaypointEditClicked(unsigned i)$/;"	f	class:WaypointManagerWidget
OnWaypointImportClicked	src/Dialogs/Waypoint/Manager.cpp	/^WaypointManagerWidget::OnWaypointImportClicked()$/;"	f	class:WaypointManagerWidget
OnWaypointListEnter	src/Dialogs/Waypoint/WaypointList.cpp	/^WaypointListWidget::OnWaypointListEnter()$/;"	f	class:WaypointListWidget
OnWaypointNewClicked	src/Dialogs/Waypoint/Manager.cpp	/^WaypointManagerWidget::OnWaypointNewClicked()$/;"	f	class:WaypointManagerWidget
OnWaypointSaveClicked	src/Dialogs/Waypoint/Manager.cpp	/^WaypointManagerWidget::OnWaypointSaveClicked()$/;"	f	class:WaypointManagerWidget
OneClimbInfo	src/NMEA/ClimbInfo.hpp	/^struct OneClimbInfo$/;"	s
Open	src/Device/Descriptor.cpp	/^DeviceDescriptor::Open(OperationEnvironment &env)$/;"	f	class:DeviceDescriptor
Open	src/Device/Port/SerialPort.cpp	/^SerialPort::Open(const TCHAR *path, unsigned _baud_rate)$/;"	f	class:SerialPort
Open	src/Device/Port/TTYPort.cpp	/^TTYPort::Open(const TCHAR *path, unsigned baud_rate)$/;"	f	class:TTYPort
Open	src/Tracking/SkyLines/Client.cpp	/^SkyLinesTracking::Client::Open(Cares::Channel &cares, const char *server)$/;"	f	class:SkyLinesTracking::Client
Open	src/Tracking/SkyLines/Client.cpp	/^SkyLinesTracking::Client::Open(SocketAddress _address)$/;"	f	class:SkyLinesTracking::Client
Open	src/io/FileOutputStream.cxx	/^FileOutputStream::Open()$/;"	f	class:FileOutputStream
Open	src/ui/event/poll/libinput/LibInputHandler.cpp	/^LibInputHandler::Open()$/;"	f	class:UI::LibInputHandler
Open	src/ui/event/poll/linux/Input.cpp	/^LinuxInputDevice::Open(const char *path)$/;"	f	class:UI::LinuxInputDevice
OpenAndroidBluetoothPort	src/Device/Port/AndroidBluetoothPort.cpp	/^OpenAndroidBluetoothPort(const TCHAR *address, PortListener *listener,$/;"	f
OpenAndroidBluetoothServerPort	src/Device/Port/AndroidBluetoothPort.cpp	/^OpenAndroidBluetoothServerPort(PortListener *listener, DataHandler &handler)$/;"	f
OpenAndroidIOIOUartPort	src/Device/Port/AndroidIOIOUartPort.cpp	/^OpenAndroidIOIOUartPort(unsigned uart_id, unsigned baud_rate,$/;"	f
OpenAppend	src/io/FileOutputStream.cxx	/^FileOutputStream::OpenAppend(bool create)$/;"	f	class:FileOutputStream
OpenArchive	src/Weather/Rasp/RaspStore.cpp	/^RaspStore::OpenArchive() const$/;"	f	class:RaspStore
OpenConfiguredTextFile	src/io/ConfiguredFile.cpp	/^OpenConfiguredTextFile(const char *profile_key, Charset cs)$/;"	f
OpenConfiguredTextFile	src/io/ConfiguredFile.cpp	/^OpenConfiguredTextFile(const char *profile_key, const char *in_map_file,$/;"	f
OpenConfiguredTextFileA	src/io/ConfiguredFile.cpp	/^OpenConfiguredTextFileA(const char *profile_key)$/;"	f
OpenCreate	src/io/FileOutputStream.cxx	/^FileOutputStream::OpenCreate([[maybe_unused]] bool visible)$/;"	f	class:FileOutputStream
OpenCreate	src/io/FileOutputStream.cxx	/^FileOutputStream::OpenCreate(bool visible)$/;"	f	class:FileOutputStream
OpenDataFile	src/io/DataFile.cpp	/^OpenDataFile(const TCHAR *name)$/;"	f
OpenDataTextFile	src/io/DataFile.cpp	/^OpenDataTextFile(const TCHAR *name, Charset cs)$/;"	f
OpenDataTextFileA	src/io/DataFile.cpp	/^OpenDataTextFileA(const TCHAR *name)$/;"	f
OpenDetails	src/Dialogs/Traffic/TrafficList.cpp	/^TrafficListWidget::OpenDetails(unsigned index)$/;"	f	class:TrafficListWidget
OpenDetails	src/Dialogs/Weather/NOAAList.cpp	/^NOAAListWidget::OpenDetails(unsigned index)$/;"	f	class:NOAAListWidget
OpenDetails	src/Gauge/BigTrafficWidget.cpp	/^FlarmTrafficControl::OpenDetails()$/;"	f	class:FlarmTrafficControl
OpenDevice	src/ui/event/poll/libinput/LibInputHandler.cpp	/^LibInputHandler::OpenDevice(const char *path, int flags)$/;"	f	class:UI::LibInputHandler
OpenDeviceJob	src/Device/Descriptor.cpp	/^  OpenDeviceJob(DeviceDescriptor &_device):device(_device) {}$/;"	f	class:final
OpenDirectory	src/io/Open.cxx	/^OpenDirectory(FileDescriptor directory, const char *name, int flags)$/;"	f
OpenDirectory	src/io/Open.cxx	/^OpenDirectory(const char *path, int flags)$/;"	f
OpenDroidSoarV2	src/Device/Descriptor.cpp	/^DeviceDescriptor::OpenDroidSoarV2()$/;"	f	class:DeviceDescriptor
OpenGL	src/ui/canvas/opengl/Debug.hpp	/^namespace OpenGL {$/;"	n
OpenGL	src/ui/canvas/opengl/Extension.hpp	/^namespace OpenGL {$/;"	n
OpenGL	src/ui/canvas/opengl/Function.hpp	/^namespace OpenGL {$/;"	n
OpenGL	src/ui/canvas/opengl/Globals.cpp	/^namespace OpenGL {$/;"	n	file:
OpenGL	src/ui/canvas/opengl/Rotate.hpp	/^namespace OpenGL {$/;"	n
OpenGL	src/ui/canvas/opengl/Shaders.cpp	/^namespace OpenGL {$/;"	n	file:
OpenGL	src/ui/canvas/opengl/Shaders.hpp	/^namespace OpenGL {$/;"	n
OpenGL	src/ui/canvas/opengl/Shapes.cpp	/^namespace OpenGL {$/;"	n	file:
OpenGL	src/ui/canvas/opengl/Shapes.hpp	/^namespace OpenGL {$/;"	n
OpenGliderLink	src/Device/Descriptor.cpp	/^DeviceDescriptor::OpenGliderLink()$/;"	f	class:DeviceDescriptor
OpenI2Cbaro	src/Device/Descriptor.cpp	/^DeviceDescriptor::OpenI2Cbaro()$/;"	f	class:DeviceDescriptor
OpenInternalSensors	src/Device/Descriptor.cpp	/^DeviceDescriptor::OpenInternalSensors()$/;"	f	class:DeviceDescriptor
OpenJasperZzipStream	src/Terrain/ZzipStream.cpp	/^OpenJasperZzipStream(struct zzip_dir *dir, const char *path)$/;"	f
OpenLayout	src/PageActions.cpp	/^PageActions::OpenLayout(const PageLayout &layout)$/;"	f	class:PageActions
OpenMap	src/Dialogs/Traffic/TrafficList.cpp	/^TrafficListWidget::OpenMap(unsigned index)$/;"	f	class:TrafficListWidget
OpenMapFile	src/io/MapFile.cpp	/^OpenMapFile()$/;"	f
OpenMapTextFile	src/io/ConfiguredFile.cpp	/^OpenMapTextFile(const char *in_map_file, Charset cs)$/;"	f	file:
OpenMapTextFileA	src/io/ConfiguredFile.cpp	/^OpenMapTextFileA(const char *in_map_file)$/;"	f	file:
OpenNunchuck	src/Device/Descriptor.cpp	/^DeviceDescriptor::OpenNunchuck()$/;"	f	class:DeviceDescriptor
OpenOnPort	src/Device/Descriptor.cpp	/^DeviceDescriptor::OpenOnPort(std::unique_ptr<DumpPort> &&_port, OperationEnvironment &env)$/;"	f	class:DeviceDescriptor
OpenPath	src/io/Open.cxx	/^OpenPath(FileDescriptor directory, const char *name, int flags)$/;"	f
OpenPath	src/io/Open.cxx	/^OpenPath(const char *path, int flags)$/;"	f
OpenPort	src/Device/Port/ConfiguredPort.cpp	/^OpenPort(EventLoop &event_loop, Cares::Channel &cares,$/;"	f
OpenPortInternal	src/Device/Port/ConfiguredPort.cpp	/^OpenPortInternal(EventLoop &event_loop, Cares::Channel &cares,$/;"	f	file:
OpenPseudo	src/Device/Port/TTYPort.cpp	/^TTYPort::OpenPseudo()$/;"	f	class:TTYPort
OpenReadOnly	src/io/Open.cxx	/^OpenReadOnly(FileDescriptor directory, const char *name, int flags)$/;"	f
OpenReadOnly	src/io/Open.cxx	/^OpenReadOnly(const char *path, int flags)$/;"	f
OpenTTY	src/Device/Port/TTYPort.cpp	/^OpenTTY(const char *path, unsigned baud_rate)$/;"	f	file:
OpenTerrain	src/Terrain/RasterTerrain.cpp	/^RasterTerrain::OpenTerrain(FileCache *cache, OperationEnvironment &operation)$/;"	f	class:RasterTerrain
OpenVarioCreateOnPort	src/Device/Driver/OpenVario.cpp	/^OpenVarioCreateOnPort(const DeviceConfig &config, Port &com_port)$/;"	f	file:
OpenVarioDevice	src/Device/Driver/OpenVario.cpp	/^  OpenVarioDevice(Port &_port):port(_port) {}$/;"	f	class:OpenVarioDevice
OpenVarioDevice	src/Device/Driver/OpenVario.cpp	/^class OpenVarioDevice : public AbstractDevice {$/;"	c	file:
OpenVoltage	src/Device/Descriptor.cpp	/^DeviceDescriptor::OpenVoltage()$/;"	f	class:DeviceDescriptor
OpenWriteOnly	src/io/Open.cxx	/^OpenWriteOnly(FileDescriptor directory, const char *name, int flags)$/;"	f
OpenWriteOnly	src/io/Open.cxx	/^OpenWriteOnly(const char *path, int flags)$/;"	f
OperationEnvironment	src/Operation/Operation.hpp	/^class OperationEnvironment : private NonCopyable {$/;"	c
Optimise	src/Engine/Airspace/Airspaces.cpp	/^Airspaces::Optimise()$/;"	f	class:Airspaces
Optimise	src/Engine/Waypoint/Waypoints.cpp	/^Waypoints::Optimise()$/;"	f	class:Waypoints
OptimiseGlide	src/Engine/GlideSolvers/MacCready.cpp	/^MacCready::OptimiseGlide(const GlideState &task, const bool allow_partial) const$/;"	f	class:MacCready
OptionStartsWidget	src/Dialogs/Task/OptionalStartsDialog.cpp	/^  explicit OptionStartsWidget(OrderedTask &_task)$/;"	f	class:OptionStartsWidget
OptionStartsWidget	src/Dialogs/Task/OptionalStartsDialog.cpp	/^class OptionStartsWidget : public ListWidget {$/;"	c	file:
OrderedTaskFactoryDescription	src/Task/TypeStrings.cpp	/^OrderedTaskFactoryDescription(TaskFactoryType type)$/;"	f
OrderedTaskFactoryName	src/Task/TypeStrings.cpp	/^OrderedTaskFactoryName(TaskFactoryType type)$/;"	f
OrderedTaskPoint	src/Engine/Task/Ordered/Points/OrderedTaskPoint.cpp	/^OrderedTaskPoint::OrderedTaskPoint(TaskPointType _type,$/;"	f	class:OrderedTaskPoint
OrderedTaskPoint	src/Engine/Task/Ordered/Points/OrderedTaskPoint.hpp	/^class OrderedTaskPoint$/;"	c
OrderedTaskPointDescription	src/Task/TypeStrings.cpp	/^OrderedTaskPointDescription(TaskPointFactoryType type)$/;"	f
OrderedTaskPointLabel	src/Dialogs/Task/dlgTaskHelpers.cpp	/^OrderedTaskPointLabel(TaskPointType type, const TCHAR *name,$/;"	f
OrderedTaskPointName	src/Task/TypeStrings.cpp	/^OrderedTaskPointName(TaskPointFactoryType type)$/;"	f
OrderedTaskPointRadiusLabel	src/Dialogs/Task/dlgTaskHelpers.cpp	/^OrderedTaskPointRadiusLabel(const ObservationZonePoint &ozp, TCHAR* buffer)$/;"	f
OrderedTaskSave	src/Dialogs/Task/dlgTaskHelpers.cpp	/^OrderedTaskSave(OrderedTask &task)$/;"	f
OrderedTaskSettings	src/Engine/Task/Ordered/Settings.hpp	/^struct OrderedTaskSettings {$/;"	s
OrderedTaskSummary	src/Dialogs/Task/dlgTaskHelpers.cpp	/^OrderedTaskSummary(const OrderedTask *task, TCHAR *text, bool linebreaks)$/;"	f
Orientation	src/Widget/TabWidget.hpp	/^  enum class Orientation {$/;"	c	class:TabWidget
OrientationCircling	src/Dialogs/Settings/Panels/MapDisplayConfigPanel.cpp	/^  OrientationCircling,$/;"	e	enum:ControlIndex	file:
OrientationCircling	src/Profile/ProfileKeys.cpp	/^const char OrientationCircling[] = "OrientationCircling";$/;"	m	namespace:ProfileKeys	file:
OrientationCruise	src/Dialogs/Settings/Panels/MapDisplayConfigPanel.cpp	/^  OrientationCruise,$/;"	e	enum:ControlIndex	file:
OrientationCruise	src/Profile/ProfileKeys.cpp	/^const char OrientationCruise[] = "OrientationCruise";$/;"	m	namespace:ProfileKeys	file:
Origin	src/Device/Driver/LX/LXN.hpp	/^  struct Origin {$/;"	s	namespace:LXN
OutputBits	src/NMEA/VegaSwitchState.hpp	/^  enum OutputBits {$/;"	g	struct:VegaSwitchState
OutputStream	src/io/OutputStream.hxx	/^class OutputStream {$/;"	c
OutsideAirspacePredicate	src/Engine/Airspace/Predicate/OutsideAirspacePredicate.hpp	/^  constexpr OutsideAirspacePredicate(const AGeoPoint &_location)$/;"	f	class:OutsideAirspacePredicate
OutsideAirspacePredicate	src/Engine/Airspace/Predicate/OutsideAirspacePredicate.hpp	/^class OutsideAirspacePredicate {$/;"	c
OverlappedEvent	src/system/OverlappedEvent.hpp	/^  OverlappedEvent()$/;"	f	class:OverlappedEvent
OverlappedEvent	src/system/OverlappedEvent.hpp	/^class OverlappedEvent {$/;"	c
OverlappedWidget	src/Widget/OverlappedWidget.hpp	/^class OverlappedWidget : public WindowWidget {$/;"	c
Overlaps	src/Geo/Flat/FlatBoundingBox.cpp	/^FlatBoundingBox::Overlaps(const FlatBoundingBox& other) const$/;"	f	class:FlatBoundingBox
Overlaps	src/Geo/GeoBounds.hpp	/^  bool Overlaps(const GeoBounds &other) const {$/;"	f	class:GeoBounds
Overlay	src/Weather/PCMet/Overlays.hpp	/^  Overlay(BrokenDateTime _run_time, BrokenDateTime _valid_time, Path _path)$/;"	f	struct:PCMet::Overlay
Overlay	src/Weather/PCMet/Overlays.hpp	/^  Overlay(BrokenDateTime _run_time, BrokenDateTime _valid_time,$/;"	f	struct:PCMet::Overlay
Overlay	src/Weather/PCMet/Overlays.hpp	/^struct Overlay {$/;"	s	namespace:PCMet
OverlayInfo	src/Weather/PCMet/Overlays.hpp	/^  OverlayInfo()$/;"	f	struct:PCMet::OverlayInfo
OverlayInfo	src/Weather/PCMet/Overlays.hpp	/^struct OverlayInfo {$/;"	s	namespace:PCMet
OverlayLook	src/Look/OverlayLook.hpp	/^struct OverlayLook {$/;"	s
OverlayMapItem	src/MapWindow/Items/OverlayMapItem.cpp	/^OverlayMapItem::OverlayMapItem(const MapOverlay &_overlay)$/;"	f	class:OverlayMapItem
OverlayMapItem	src/MapWindow/Items/OverlayMapItem.hpp	/^struct OverlayMapItem : public MapItem$/;"	s
OverwritingRingBuffer	src/util/OverwritingRingBuffer.hpp	/^  OverwritingRingBuffer():TrivialOverwritingRingBuffer<T, size>(0, 0) {}$/;"	f	class:OverwritingRingBuffer
OverwritingRingBuffer	src/util/OverwritingRingBuffer.hpp	/^class OverwritingRingBuffer: public TrivialOverwritingRingBuffer<T, size>$/;"	c
PADDING	src/Renderer/AirspaceRendererSettings.hpp	/^    PADDING,$/;"	m	class:AirspaceClassRendererSettings::FillMode
PADDING	src/Renderer/AirspaceRendererSettings.hpp	/^    PADDING,$/;"	m	class:AirspaceRendererSettings::FillMode
PAGESCONFIGPANEL_HPP	src/Dialogs/Settings/Panels/PagesConfigPanel.hpp	25;"	d
PAGES_DISTINCT_ZOOM	src/Dialogs/Settings/Panels/MapDisplayConfigPanel.cpp	/^  PAGES_DISTINCT_ZOOM,$/;"	e	enum:ControlIndex	file:
PAGE_OFFSET	src/Form/TabMenuDisplay.hpp	/^  static constexpr unsigned PAGE_OFFSET = 1;$/;"	m	class:final
PANEL_AUXILIARY	src/InfoBoxes/InfoBoxSettings.hpp	/^    PANEL_AUXILIARY,$/;"	e	enum:InfoBoxSettings::PanelIndex
PANEL_CIRCLING	src/InfoBoxes/InfoBoxSettings.hpp	/^    PANEL_CIRCLING,$/;"	e	enum:InfoBoxSettings::PanelIndex
PANEL_CRUISE	src/InfoBoxes/InfoBoxSettings.hpp	/^    PANEL_CRUISE,$/;"	e	enum:InfoBoxSettings::PanelIndex
PANEL_FINAL_GLIDE	src/InfoBoxes/InfoBoxSettings.hpp	/^    PANEL_FINAL_GLIDE,$/;"	e	enum:InfoBoxSettings::PanelIndex
PARACHUTE	src/FLARM/Traffic.hpp	/^    PARACHUTE = 4,        \/\/!< parachute$/;"	m	class:FlarmTraffic::AircraftType
PARAGLIDER	src/MapSettings.hpp	/^  PARAGLIDER,$/;"	m	class:AircraftSymbol
PARAGLIDER	src/Tracking/LiveTrack24.hpp	/^  PARAGLIDER = 1,$/;"	m	class:LiveTrack24::VehicleType
PARAGLIDER	src/Tracking/LiveTrack24/Settings.hpp	/^    PARAGLIDER = 1,$/;"	m	class:LiveTrack24::Settings::VehicleType
PARAMOTOR	src/Tracking/LiveTrack24.hpp	/^  PARAMOTOR = 16,$/;"	m	class:LiveTrack24::VehicleType
PARA_GLIDER	src/FLARM/Traffic.hpp	/^    PARA_GLIDER = 7,      \/\/!< para-glider (soft)$/;"	m	class:FlarmTraffic::AircraftType
PARSED_METAR_HPP	src/Weather/ParsedMETAR.hpp	25;"	d
PASS_THROUGH	src/Device/Driver.hpp	/^    PASS_THROUGH = 0x200,$/;"	e	enum:DeviceRegister::__anon158
PASS_THROUGH	src/Device/Driver/LX/Internal.hpp	/^    PASS_THROUGH,$/;"	m	class:LXDevice::Mode
PATH_MAX	src/zzip/file.h	46;"	d
PATH_MAX	src/zzip/file.h	48;"	d
PAUSE	src/ui/event/shared/Event.hpp	/^    PAUSE,$/;"	e	enum:UI::Event::Type
PBB50	src/Device/Driver/BorgeltB50.cpp	/^PBB50(NMEAInputLine &line, NMEAInfo &info)$/;"	f	file:
PCMBufferDataSource	src/Audio/PCMBufferDataSource.hpp	/^class PCMBufferDataSource : public PCMDataSource {$/;"	c
PCMData	src/Audio/PCMBufferDataSource.hpp	/^  typedef ConstBuffer<int16_t> PCMData;$/;"	t	class:PCMBufferDataSource
PCMDataSource	src/Audio/PCMDataSource.hpp	/^class PCMDataSource {$/;"	c
PCMET_FTP	src/Weather/PCMet/Overlays.cpp	42;"	d	file:
PCMET_FTP_PASSWORD	src/Dialogs/Settings/Panels/WeatherConfigPanel.cpp	/^  PCMET_FTP_PASSWORD,$/;"	e	enum:ControlIndex	file:
PCMET_FTP_USER	src/Dialogs/Settings/Panels/WeatherConfigPanel.cpp	/^  PCMET_FTP_USER,$/;"	e	enum:ControlIndex	file:
PCMET_PASSWORD	src/Dialogs/Settings/Panels/WeatherConfigPanel.cpp	/^  PCMET_PASSWORD,$/;"	e	enum:ControlIndex	file:
PCMET_URI	src/Weather/PCMet/Images.cpp	39;"	d	file:
PCMET_USER	src/Dialogs/Settings/Panels/WeatherConfigPanel.cpp	/^  PCMET_USER,$/;"	e	enum:ControlIndex	file:
PCMMixer	src/Audio/PCMMixer.cpp	/^PCMMixer::PCMMixer(unsigned _sample_rate,$/;"	f	class:PCMMixer
PCMMixerDataSource	src/Audio/PCMMixerDataSource.hpp	/^  explicit PCMMixerDataSource(unsigned _sample_rate) :$/;"	f	class:PCMMixerDataSource
PCMMixerDataSource	src/Audio/PCMMixerDataSource.hpp	/^class PCMMixerDataSource : public PCMDataSource {$/;"	c
PCMPLAYER_SYNTHESISER_ONLY	src/Audio/PCMPlayer.hpp	28;"	d
PCMPlayer	src/Audio/PCMPlayer.hpp	/^class PCMPlayer {$/;"	c
PCMPlayerFactory	src/Audio/PCMPlayerFactory.hpp	/^namespace PCMPlayerFactory$/;"	n
PCMResourcePlayer	src/Audio/PCMResourcePlayer.cpp	/^PCMResourcePlayer::PCMResourcePlayer() :$/;"	f	class:PCMResourcePlayer
PCMResourcePlayer	src/Audio/PCMResourcePlayer.hpp	/^class PCMResourcePlayer {$/;"	c
PCMSynthesiser	src/Audio/PCMSynthesiser.hpp	/^class PCMSynthesiser : public PCMDataSource {$/;"	c
PCM_CONTROL_NAME	src/Audio/VolumeController.cpp	/^static constexpr char PCM_CONTROL_NAME[] = "pcm";$/;"	v	file:
PCMet	src/Weather/PCMet/Images.hpp	/^namespace PCMet {$/;"	n
PCMet	src/Weather/PCMet/Overlays.hpp	/^namespace PCMet {$/;"	n
PCMetFtpPassword	src/Profile/ProfileKeys.cpp	/^const char PCMetFtpPassword[] = "PCMetFtpPassword";$/;"	m	namespace:ProfileKeys	file:
PCMetFtpUsername	src/Profile/ProfileKeys.cpp	/^const char PCMetFtpUsername[] = "PCMetFtpUsername";$/;"	m	namespace:ProfileKeys	file:
PCMetPassword	src/Profile/ProfileKeys.cpp	/^const char PCMetPassword[] = "PCMetPassword";$/;"	m	namespace:ProfileKeys	file:
PCMetSettings	src/Weather/PCMet/Settings.hpp	/^struct PCMetSettings {$/;"	s
PCMetUsername	src/Profile/ProfileKeys.cpp	/^const char PCMetUsername[] = "PCMetUsername";$/;"	m	namespace:ProfileKeys	file:
PDAAV	src/Device/Driver/Vega/Parser.cpp	/^PDAAV(NMEAInputLine &line, gcc_unused NMEAInfo &info)$/;"	f	file:
PDGFTL1	src/Device/Driver/Leonardo.cpp	/^PDGFTL1(NMEAInputLine &line, NMEAInfo &info)$/;"	f	file:
PDSWC	src/Device/Driver/Vega/Parser.cpp	/^PDSWC(NMEAInputLine &line, NMEAInfo &info, Vega::VolatileData &volatile_data)$/;"	f	file:
PDTSM	src/Device/Driver/Vega/Parser.cpp	/^PDTSM(NMEAInputLine &line, gcc_unused NMEAInfo &info)$/;"	f	file:
PDVDS	src/Device/Driver/Vega/Parser.cpp	/^PDVDS(NMEAInputLine &line, NMEAInfo &info)$/;"	f	file:
PDVDV	src/Device/Driver/Vega/Parser.cpp	/^PDVDV(NMEAInputLine &line, NMEAInfo &info)$/;"	f	file:
PDVSC	src/Device/Driver/Vega/Parser.cpp	/^VegaDevice::PDVSC(NMEAInputLine &line, gcc_unused NMEAInfo &info)$/;"	f	class:VegaDevice
PDVVT	src/Device/Driver/Vega/Parser.cpp	/^PDVVT(NMEAInputLine &line, NMEAInfo &info)$/;"	f	file:
PERCENT	src/Units/Unit.hpp	/^  PERCENT,$/;"	m	class:Unit
PERCENTILE_VARIO	src/FlightStatistics.cpp	/^static constexpr double PERCENTILE_VARIO = 0.1;$/;"	v	file:
PERIOD	src/Computer/RouteComputer.cpp	/^constexpr std::chrono::steady_clock::duration RouteComputer::PERIOD;$/;"	m	class:RouteComputer	file:
PERIOD	src/Computer/RouteComputer.hpp	/^  static constexpr std::chrono::steady_clock::duration PERIOD = std::chrono::seconds(5);$/;"	m	class:RouteComputer
PERIOD	src/Computer/StatsComputer.cpp	/^constexpr std::chrono::steady_clock::duration StatsComputer::PERIOD;$/;"	m	class:StatsComputer	file:
PERIOD	src/Computer/StatsComputer.hpp	/^  static constexpr std::chrono::steady_clock::duration PERIOD = std::chrono::minutes(1);$/;"	m	class:StatsComputer
PERIOD_CONST_HI	src/Dialogs/Device/Vega/Types.hpp	61;"	d
PERIOD_CONST_INTERMITTENT	src/Dialogs/Device/Vega/Types.hpp	70;"	d
PERIOD_CONST_LO	src/Dialogs/Device/Vega/Types.hpp	63;"	d
PERIOD_CONST_MEDIUM	src/Dialogs/Device/Vega/Types.hpp	62;"	d
PERIOD_SPEED_ERROR	src/Dialogs/Device/Vega/Types.hpp	65;"	d
PERIOD_SPEED_PERCENT	src/Dialogs/Device/Vega/Types.hpp	64;"	d
PERIOD_VARIO_GROSS	src/Dialogs/Device/Vega/Types.hpp	66;"	d
PERIOD_VARIO_GROSSRELATIVE	src/Dialogs/Device/Vega/Types.hpp	69;"	d
PERIOD_VARIO_NET	src/Dialogs/Device/Vega/Types.hpp	67;"	d
PERIOD_VARIO_RELATIVE	src/Dialogs/Device/Vega/Types.hpp	68;"	d
PEYA	src/Device/Driver/Eye.cpp	/^EyeDevice::PEYA(NMEAInputLine &line, NMEAInfo &info)$/;"	f	class:EyeDevice
PEYI	src/Device/Driver/Eye.cpp	/^EyeDevice::PEYI(NMEAInputLine &line, NMEAInfo &info)$/;"	f	class:EyeDevice
PGCreateOnPort	src/Device/Driver/PosiGraph.cpp	/^PGCreateOnPort(const DeviceConfig &config, Port &com_port)$/;"	f	file:
PGDevice	src/Device/Driver/PosiGraph.cpp	/^  PGDevice(Port &_port, unsigned baud_rate, unsigned bulk_baud_rate)$/;"	f	class:PGDevice
PGDevice	src/Device/Driver/PosiGraph.cpp	/^class PGDevice : public LXDevice {$/;"	c	file:
PILOT	src/Device/Driver/Volkslogger/vlapi2.h	/^  struct PILOT {$/;"	s	class:VLAPI_DATA
PILOT	src/Dialogs/Traffic/FlarmTrafficDetails.cpp	/^    PILOT,$/;"	e	enum:final::Controls	file:
PING	src/Tracking/SkyLines/Protocol.hpp	/^  PING = 1,$/;"	e	enum:SkyLinesTracking::Type
PITCH_CONST_HI	src/Dialogs/Device/Vega/Types.hpp	50;"	d
PITCH_CONST_LO	src/Dialogs/Device/Vega/Types.hpp	52;"	d
PITCH_CONST_MEDIUM	src/Dialogs/Device/Vega/Types.hpp	51;"	d
PITCH_SPEED_ERROR	src/Dialogs/Device/Vega/Types.hpp	54;"	d
PITCH_SPEED_PERCENT	src/Dialogs/Device/Vega/Types.hpp	53;"	d
PITCH_VARIO_GROSS	src/Dialogs/Device/Vega/Types.hpp	55;"	d
PITCH_VARIO_GROSSRELATIVE	src/Dialogs/Device/Vega/Types.hpp	58;"	d
PITCH_VARIO_NET	src/Dialogs/Device/Vega/Types.hpp	56;"	d
PITCH_VARIO_RELATIVE	src/Dialogs/Device/Vega/Types.hpp	57;"	d
PITOT	src/Device/Config.hpp	/^    PITOT,$/;"	m	class:DeviceConfig::PressureUse
PITOT_ZERO	src/Device/Config.hpp	/^    PITOT_ZERO,$/;"	m	class:DeviceConfig::PressureUse
PLANE	src/Dialogs/Traffic/FlarmTrafficDetails.cpp	/^    PLANE,$/;"	e	enum:final::Controls	file:
PLANE_FILE_GLUE_HPP	src/Plane/PlaneFileGlue.hpp	25;"	d
PLANE_GLUE_HPP	src/Plane/PlaneGlue.hpp	25;"	d
PLANE_HPP	src/Plane/Plane.hpp	25;"	d
PLT	src/Device/Driver/Volkslogger/vlconv.cpp	/^  char A[10], DTE[10], FXA[10], PLT[80], GTY[50], GID[50], RFW[10], RHW[10],$/;"	m	struct:IGCHEADER	file:
PLXV0	src/Device/Driver/LX/Parser.cpp	/^PLXV0(NMEAInputLine &line, DeviceSettingsMap<std::string> &settings)$/;"	f	file:
PLXVC	src/Device/Driver/LX/Parser.cpp	/^PLXVC(NMEAInputLine &line, DeviceInfo &device,$/;"	f	file:
PLXVF	src/Device/Driver/LX/Parser.cpp	/^PLXVF(NMEAInputLine &line, NMEAInfo &info)$/;"	f	file:
PLXVS	src/Device/Driver/LX/Parser.cpp	/^PLXVS(NMEAInputLine &line, NMEAInfo &info)$/;"	f	file:
PNGCallbackContext	src/ui/canvas/custom/LibPNG.cpp	/^struct PNGCallbackContext {$/;"	s	file:
PNGReadCallback	src/ui/canvas/custom/LibPNG.cpp	/^PNGReadCallback(png_structp _ctx, png_bytep area, png_size_t size)$/;"	f	file:
POINTER_DOWN	src/ui/event/shared/Event.hpp	/^    POINTER_DOWN,$/;"	e	enum:UI::Event::Type
POINTER_UP	src/ui/event/shared/Event.hpp	/^    POINTER_UP,$/;"	e	enum:UI::Event::Type
POLAR	src/Dialogs/Plane/PlaneDetailsDialog.cpp	/^    POLAR,$/;"	e	enum:final::Controls	file:
POLAR	src/Dialogs/dlgAnalysis.hpp	/^  POLAR,$/;"	m	class:AnalysisPage
POLE_RADIUS	src/Geo/WGS84.hpp	/^  static constexpr double POLE_RADIUS = EQUATOR_RADIUS * (1 - FLATTENING);$/;"	m	namespace:WGS84
POLYGON	src/Engine/Airspace/AbstractAirspace.hpp	/^    POLYGON,$/;"	m	class:AbstractAirspace::Shape
POLYGON_INTERIOR_HPP	src/Geo/ConvexHull/PolygonInterior.hpp	23;"	d
PORTABLE_MASK	src/ui/canvas/memory/Optimised.hpp	/^  static constexpr unsigned PORTABLE_MASK = N - 1;$/;"	m	class:SelectOptimisedPixelOperations
PORTRAIT	src/Android/NativeView.hpp	/^    PORTRAIT = 1,$/;"	m	class:NativeView::ScreenOrientation
PORTRAIT	src/DisplayOrientation.hpp	/^  PORTRAIT,$/;"	m	class:DisplayOrientation
POSITION	src/ui/canvas/opengl/Attribute.hpp	/^static constexpr GLuint POSITION = 1;$/;"	m	namespace:OpenGL::Attribute
POSITION_BAD	src/Device/Driver/LX/LXN.hpp	/^    POSITION_BAD = 0xc3,$/;"	e	enum:LXN::Command
POSITION_OK	src/Device/Driver/LX/LXN.hpp	/^    POSITION_OK = 0xbf,$/;"	e	enum:LXN::Command
POSITIVE	src/NMEA/SwitchState.hpp	/^    POSITIVE,$/;"	m	class:SwitchState::FlapPosition
POSSIBLE_CLIMB	src/NMEA/CirclingInfo.hpp	/^  POSSIBLE_CLIMB,$/;"	m	class:CirclingMode
POSSIBLE_CRUISE	src/NMEA/CirclingInfo.hpp	/^  POSSIBLE_CRUISE,$/;"	m	class:CirclingMode
POV	src/Device/Driver/OpenVario.cpp	/^OpenVarioDevice::POV(NMEAInputLine &line, NMEAInfo &info)$/;"	f	class:OpenVarioDevice
POWER	src/FLARM/Error.hpp	/^    POWER = 0x21,$/;"	e	enum:uint8_t
POWERED_AIRCRAFT	src/FLARM/Traffic.hpp	/^    POWERED_AIRCRAFT = 8, \/\/!< powered aircraft$/;"	m	class:FlarmTraffic::AircraftType
POWERED_AIRCRAFT	src/Tracking/LiveTrack24.hpp	/^  POWERED_AIRCRAFT = 64,$/;"	m	class:LiveTrack24::VehicleType
POWERED_AIRCRAFT	src/Tracking/LiveTrack24/Settings.hpp	/^    POWERED_AIRCRAFT = 2,$/;"	m	class:LiveTrack24::Settings::VehicleType
POWEROFF	src/Kobo/KoboMenu.cpp	/^  POWEROFF$/;"	e	enum:Buttons	file:
POWERPLANT	src/Engine/Waypoint/Waypoint.hpp	/^    POWERPLANT,$/;"	m	class:Waypoint::Type
PPS	src/NMEA/GPSState.hpp	/^  PPS,$/;"	m	class:FixQuality
PREASSIGNED_PANELS	src/InfoBoxes/InfoBoxSettings.hpp	/^  static constexpr unsigned PREASSIGNED_PANELS = 3;$/;"	m	struct:InfoBoxSettings
PREDICT_CONTEST	src/Dialogs/Settings/Panels/ScoringConfigPanel.cpp	/^  PREDICT_CONTEST,$/;"	e	enum:ControlIndex	file:
PREFIX	src/Device/Driver/LX/Protocol.hpp	/^    PREFIX = 0x02,$/;"	e	enum:LX::Command
PREFIX	src/Form/DataField/Base.hpp	/^    PREFIX,$/;"	m	class:DataField::Type
PREPARED	src/Widget/ManagedWidget.hpp	/^    PREPARED,$/;"	m	class:ManagedWidget::State
PRESSURE	src/Units/Group.hpp	/^  PRESSURE,$/;"	m	class:UnitGroup
PRESSURE_SENSOR	src/FLARM/Error.hpp	/^    PRESSURE_SENSOR = 0x71,$/;"	e	enum:uint8_t
PRETAKEOFF_BUFFER_MAX	src/Logger/LoggerImpl.hpp	/^    PRETAKEOFF_BUFFER_MAX = 60,$/;"	e	enum:LoggerImpl::__anon7
PREVIOUS	src/Dialogs/Task/TargetDialog.cpp	/^    PREVIOUS,$/;"	e	enum:TargetWidget::Buttons	file:
PREVIOUS	src/Widget/ArrowPagerWidget.hpp	/^    PREVIOUS,$/;"	e	enum:ArrowPagerWidget::Buttons
PREVIOUS_PAGE	src/Form/DataField/ComboList.hpp	/^    static constexpr int PREVIOUS_PAGE = -800002;$/;"	m	struct:ComboList::Item
PRIMARY	src/Engine/Waypoint/Origin.hpp	/^  PRIMARY,$/;"	m	class:WaypointOrigin
PRINT_EXCEPTION_HXX	src/util/PrintException.hxx	34;"	d
PRIdPTR	src/Terrain/jasper/jas_types.h	100;"	d
PRIdPTR	src/Terrain/jasper/jas_types.h	102;"	d
PRIiFAST32	src/Terrain/jasper/jas_types.h	98;"	d
PRIjas_seqent	src/Terrain/jasper/jas_seq.h	106;"	d
PRIjas_seqent	src/Terrain/jasper/jas_seq.h	109;"	d
PRIuFAST16	src/Terrain/jasper/jas_types.h	97;"	d
PRIuFAST32	src/Terrain/jasper/jas_types.h	96;"	d
PRIxFAST16	src/Terrain/jasper/jas_types.h	95;"	d
PRIxFAST32	src/Terrain/jasper/jas_types.h	94;"	d
PROFILE	src/Dialogs/StartupDialog.cpp	/^    PROFILE,$/;"	e	enum:final::Controls	file:
PROHIBITED	src/Engine/Airspace/AirspaceClass.hpp	/^  PROHIBITED,$/;"	e	enum:uint8_t
PTAS1	src/Device/Parser.cpp	/^NMEAParser::PTAS1(NMEAInputLine &line, NMEAInfo &info)$/;"	f	class:NMEAParser
PTFRS	src/Device/Driver/AltairPro.cpp	/^PTFRS(NMEAInputLine &line, NMEAInfo &info)$/;"	f	file:
PTY	src/Device/Config.hpp	/^    PTY,$/;"	m	class:DeviceConfig::PortType
PURPLE_CIRCLE	src/Renderer/WaypointRendererSettings.hpp	/^    PURPLE_CIRCLE,$/;"	m	class:WaypointRendererSettings::LandableStyle
PWES0	src/Device/Driver/Westerboer.cpp	/^PWES0(NMEAInputLine &line, NMEAInfo &info)$/;"	f	file:
PWES1	src/Device/Driver/Westerboer.cpp	/^PWES1(NMEAInputLine &line, NMEAInfo &info)$/;"	f	file:
PXCV	src/Device/Driver/XCVario.cpp	/^PXCV(NMEAInputLine &line, NMEAInfo &info)$/;"	f	file:
PZAN1	src/Device/Driver/Zander.cpp	/^PZAN1(NMEAInputLine &line, NMEAInfo &info)$/;"	f	file:
PZAN2	src/Device/Driver/Zander.cpp	/^PZAN2(NMEAInputLine &line, NMEAInfo &info)$/;"	f	file:
PZAN3	src/Device/Driver/Zander.cpp	/^PZAN3(NMEAInputLine &line, NMEAInfo &info)$/;"	f	file:
PZAN4	src/Device/Driver/Zander.cpp	/^PZAN4(NMEAInputLine &line, NMEAInfo &info)$/;"	f	file:
PZAN5	src/Device/Driver/Zander.cpp	/^PZAN5(NMEAInputLine &line, NMEAInfo &info)$/;"	f	file:
Pack	src/Cloud/Thermal.cpp	/^CloudThermal::Pack() const$/;"	f	class:CloudThermal
PackedBE16	src/util/ByteOrder.hxx	/^class PackedBE16 {$/;"	c
PackedLE16	src/util/ByteOrder.hxx	/^class PackedLE16 {$/;"	c
PackedLE32	src/util/ByteOrder.hxx	/^class PackedLE32 {$/;"	c
Packet	src/Cloud/Sender.hpp	/^  struct Packet {$/;"	s	class:ThermalResponseSender
Packet	src/Cloud/Sender.hpp	/^  struct Packet {$/;"	s	class:TrafficResponseSender
Packet	src/Device/Driver/LX/LXN.hpp	/^  union Packet {$/;"	u	namespace:LXN
PageActions	src/PageActions.cpp	/^namespace PageActions {$/;"	n	file:
PageActions	src/PageActions.hpp	/^namespace PageActions$/;"	n
PageFlippedCallback	src/Widget/PagerWidget.hpp	/^  typedef std::function<void()> PageFlippedCallback;$/;"	t	class:PagerWidget
PageLayout	src/PageSettings.hpp	/^  constexpr PageLayout(InfoBoxConfig _infobox_config)$/;"	f	struct:PageLayout
PageLayout	src/PageSettings.hpp	/^  constexpr PageLayout(bool _valid, InfoBoxConfig _infobox_config)$/;"	f	struct:PageLayout
PageLayout	src/PageSettings.hpp	/^struct PageLayout$/;"	s
PageLayoutEditWidget	src/Dialogs/Settings/Panels/PagesConfigPanel.cpp	/^  PageLayoutEditWidget(const DialogLook &_look, Listener &_listener)$/;"	f	class:final
PageListWidget	src/Dialogs/Settings/Panels/PagesConfigPanel.cpp	/^class PageListWidget$/;"	c	file:
PageSettings	src/PageSettings.hpp	/^struct PageSettings {$/;"	s
PageState	src/PageState.hpp	/^struct PageState {$/;"	s
PagerWidget	src/Widget/PagerWidget.hpp	/^class PagerWidget : public Widget {$/;"	c
PagesDistinctZoom	src/Profile/ProfileKeys.cpp	/^const char PagesDistinctZoom[] = "PagesDistinctZoom";$/;"	m	namespace:ProfileKeys	file:
PagesState	src/PageState.hpp	/^struct PagesState {$/;"	s
Paint	src/CrossSection/CrossSectionRenderer.cpp	/^CrossSectionRenderer::Paint(Canvas &canvas, const PixelRect rc) const$/;"	f	class:CrossSectionRenderer
Paint	src/Form/ScrollBar.cpp	/^ScrollBar::Paint(Canvas &canvas) const$/;"	f	class:ScrollBar
Paint	src/Gauge/FlarmTrafficWindow.cpp	/^FlarmTrafficWindow::Paint(Canvas &canvas)$/;"	f	class:FlarmTrafficWindow
Paint	src/Gauge/ThermalAssistantRenderer.cpp	/^ThermalAssistantRenderer::Paint(Canvas &canvas)$/;"	f	class:ThermalAssistantRenderer
Paint	src/InfoBoxes/Content/Trace.cpp	/^InfoBoxContentSpark::Paint(Canvas &canvas, const PixelRect &rc,$/;"	f	class:InfoBoxContentSpark
Paint	src/InfoBoxes/InfoBoxWindow.cpp	/^InfoBoxWindow::Paint(Canvas &canvas)$/;"	f	class:InfoBoxWindow
Paint	src/Topography/TopographyFileRenderer.cpp	/^TopographyFileRenderer::Paint(Canvas &canvas,$/;"	f	class:TopographyFileRenderer
Paint	src/ui/window/custom/WList.cpp	/^WindowList::Paint(Canvas &canvas)$/;"	f	class:WindowList
PaintAdvisor	src/Gauge/ThermalAssistantRenderer.cpp	/^ThermalAssistantRenderer::PaintAdvisor(Canvas &canvas,$/;"	f	class:ThermalAssistantRenderer
PaintAircraft	src/CrossSection/CrossSectionRenderer.cpp	/^CrossSectionRenderer::PaintAircraft(Canvas &canvas, const ChartRenderer &chart,$/;"	f	class:CrossSectionRenderer
PaintCanvas	src/ui/canvas/gdi/PaintCanvas.cpp	/^PaintCanvas::PaintCanvas(Window &_window)$/;"	f	class:PaintCanvas
PaintCanvas	src/ui/canvas/gdi/PaintCanvas.hpp	/^class PaintCanvas : public Canvas {$/;"	c
PaintClimbRate	src/Gauge/BigTrafficWidget.cpp	/^FlarmTrafficControl::PaintClimbRate(Canvas &canvas, PixelRect rc,$/;"	f	class:FlarmTrafficControl
PaintComment	src/InfoBoxes/InfoBoxWindow.cpp	/^InfoBoxWindow::PaintComment(Canvas &canvas)$/;"	f	class:InfoBoxWindow
PaintDistance	src/Gauge/BigTrafficWidget.cpp	/^FlarmTrafficControl::PaintDistance(Canvas &canvas, PixelRect rc,$/;"	f	class:FlarmTrafficControl
PaintGlide	src/CrossSection/CrossSectionRenderer.cpp	/^CrossSectionRenderer::PaintGlide(ChartRenderer &chart) const$/;"	f	class:CrossSectionRenderer
PaintGrid	src/CrossSection/CrossSectionRenderer.cpp	/^CrossSectionRenderer::PaintGrid(Canvas &canvas, ChartRenderer &chart) const$/;"	f	class:CrossSectionRenderer
PaintID	src/Gauge/BigTrafficWidget.cpp	/^FlarmTrafficControl::PaintID(Canvas &canvas, PixelRect rc,$/;"	f	class:FlarmTrafficControl
PaintLabels	src/Topography/TopographyFileRenderer.cpp	/^TopographyFileRenderer::PaintLabels(Canvas &canvas,$/;"	f	class:TopographyFileRenderer
PaintMainMenuBorder	src/Form/TabMenuDisplay.cpp	/^TabMenuDisplay::PaintMainMenuBorder(Canvas &canvas) const$/;"	f	class:TabMenuDisplay
PaintMainMenuItems	src/Form/TabMenuDisplay.cpp	/^TabMenuDisplay::PaintMainMenuItems(Canvas &canvas) const$/;"	f	class:TabMenuDisplay
PaintMap	src/Dialogs/Task/TaskPointDialog.cpp	/^TaskPointWidget::PaintMap(Canvas &canvas, const PixelRect &rc)$/;"	f	class:TaskPointWidget
PaintNorth	src/Gauge/FlarmTrafficWindow.cpp	/^FlarmTrafficWindow::PaintNorth(Canvas &canvas) const$/;"	f	class:FlarmTrafficWindow
PaintNotCircling	src/Gauge/ThermalAssistantRenderer.cpp	/^ThermalAssistantRenderer::PaintNotCircling(Canvas &canvas) const$/;"	f	class:ThermalAssistantRenderer
PaintPoint	src/Topography/TopographyFileRenderer.cpp	/^TopographyFileRenderer::PaintPoint(Canvas &canvas,$/;"	f	class:TopographyFileRenderer
PaintPoints	src/Gauge/ThermalAssistantRenderer.cpp	/^ThermalAssistantRenderer::PaintPoints(Canvas &canvas,$/;"	f	class:ThermalAssistantRenderer
PaintRadarBackground	src/Gauge/FlarmTrafficWindow.cpp	/^FlarmTrafficWindow::PaintRadarBackground(Canvas &canvas) const$/;"	f	class:FlarmTrafficWindow
PaintRadarBackground	src/Gauge/ThermalAssistantRenderer.cpp	/^ThermalAssistantRenderer::PaintRadarBackground(Canvas &canvas, double max_lift) const$/;"	f	class:ThermalAssistantRenderer
PaintRadarNoTraffic	src/Gauge/FlarmTrafficWindow.cpp	/^FlarmTrafficWindow::PaintRadarNoTraffic(Canvas &canvas) const$/;"	f	class:FlarmTrafficWindow
PaintRadarPlane	src/Gauge/FlarmTrafficWindow.cpp	/^FlarmTrafficWindow::PaintRadarPlane(Canvas &canvas) const$/;"	f	class:FlarmTrafficWindow
PaintRadarPlane	src/Gauge/ThermalAssistantRenderer.cpp	/^ThermalAssistantRenderer::PaintRadarPlane(Canvas &canvas) const$/;"	f	class:ThermalAssistantRenderer
PaintRadarTarget	src/Gauge/FlarmTrafficWindow.cpp	/^FlarmTrafficWindow::PaintRadarTarget(Canvas &canvas,$/;"	f	class:FlarmTrafficWindow
PaintRadarTraffic	src/Gauge/FlarmTrafficWindow.cpp	/^FlarmTrafficWindow::PaintRadarTraffic(Canvas &canvas)$/;"	f	class:FlarmTrafficWindow
PaintRelativeAltitude	src/Gauge/BigTrafficWidget.cpp	/^FlarmTrafficControl::PaintRelativeAltitude(Canvas &canvas, PixelRect rc,$/;"	f	class:FlarmTrafficControl
PaintSubMenuBorder	src/Form/TabMenuDisplay.cpp	/^TabMenuDisplay::PaintSubMenuBorder(Canvas &canvas,$/;"	f	class:TabMenuDisplay
PaintSubMenuItems	src/Form/TabMenuDisplay.cpp	/^TabMenuDisplay::PaintSubMenuItems(Canvas &canvas) const$/;"	f	class:TabMenuDisplay
PaintTargetInfoSmall	src/Gauge/FlarmTrafficWindow.cpp	/^FlarmTrafficWindow::PaintTargetInfoSmall($/;"	f	class:FlarmTrafficWindow
PaintTask	src/Gauge/TaskView.cpp	/^PaintTask(Canvas &canvas, const PixelRect &rc, const OrderedTask &task,$/;"	f
PaintTask	src/Gauge/TaskView.cpp	/^PaintTask(Canvas &canvas, const WindowProjection &projection,$/;"	f
PaintTaskDirection	src/Gauge/BigTrafficWidget.cpp	/^FlarmTrafficControl::PaintTaskDirection(Canvas &canvas) const$/;"	f	class:FlarmTrafficControl
PaintTaskPoint	src/Gauge/TaskView.cpp	/^PaintTaskPoint(Canvas &canvas, const PixelRect &rc,$/;"	f
PaintTitle	src/InfoBoxes/InfoBoxWindow.cpp	/^InfoBoxWindow::PaintTitle(Canvas &canvas)$/;"	f	class:InfoBoxWindow
PaintTrafficInfo	src/Gauge/BigTrafficWidget.cpp	/^FlarmTrafficControl::PaintTrafficInfo(Canvas &canvas) const$/;"	f	class:FlarmTrafficControl
PaintValue	src/InfoBoxes/InfoBoxWindow.cpp	/^InfoBoxWindow::PaintValue(Canvas &canvas, Color background_color)$/;"	f	class:InfoBoxWindow
PaintWindow	src/ui/window/PaintWindow.hpp	/^class PaintWindow : public Window {$/;"	c
PaintWorking	src/CrossSection/CrossSectionRenderer.cpp	/^CrossSectionRenderer::PaintWorking(ChartRenderer &chart) const$/;"	f	class:CrossSectionRenderer
Pair	src/util/Cache.hxx	/^		Pair(K &&_key, U &&_data)$/;"	f	struct:Cache::Pair
Pair	src/util/Cache.hxx	/^	struct Pair {$/;"	s	class:Cache
PanTo	src/MapWindow/GlueMapWindowDisplayMode.cpp	/^GlueMapWindow::PanTo(const GeoPoint &location)$/;"	f	class:GlueMapWindow
PanTo	src/Pan.cpp	/^PanTo(const GeoPoint &location)$/;"	f
Panel	src/InfoBoxes/InfoBoxSettings.hpp	/^  struct Panel {$/;"	s	struct:InfoBoxSettings
PanelControl	src/Form/Panel.hpp	/^  PanelControl(ContainerWindow &parent, const DialogLook &look,$/;"	f	class:PanelControl
PanelControl	src/Form/Panel.hpp	/^class PanelControl :$/;"	c
PanelIndex	src/InfoBoxes/InfoBoxSettings.hpp	/^  enum PanelIndex {$/;"	g	struct:InfoBoxSettings
PanelWidget	src/Widget/PanelWidget.hpp	/^class PanelWidget : public WindowWidget {$/;"	c
Paraline	src/ui/canvas/memory/Murphy.hpp	/^  void Paraline(int x, int y, int d1) {$/;"	f	struct:MurphyIterator
Parameter	src/Dialogs/Device/Vega/VegaParametersWidget.hpp	/^    Parameter(const char *_name):name(_name), value(0) {}$/;"	f	struct:VegaParametersWidget::Parameter
Parameter	src/Dialogs/Device/Vega/VegaParametersWidget.hpp	/^  struct Parameter {$/;"	s	class:VegaParametersWidget
Parametric	src/Geo/Flat/FlatEllipse.cpp	/^FlatEllipse::Parametric(const double t) const$/;"	f	class:FlatEllipse
Parametric	src/Geo/Flat/FlatRay.cpp	/^FlatRay::Parametric(const double t) const$/;"	f	class:FlatRay
Parametric	src/Geo/GeoEllipse.cpp	/^GeoEllipse::Parametric(const double t) const$/;"	f	class:GeoEllipse
Parametric	src/Geo/GeoPoint.cpp	/^GeoPoint::Parametric(const GeoPoint &delta, const double t) const$/;"	f	class:GeoPoint
Parse	src/CommandLine.cpp	/^CommandLine::Parse(Args &args)$/;"	f	class:CommandLine
Parse	src/Device/Driver/BlueFly/Settings.cpp	/^BlueFlyDevice::BlueFlySettings::Parse(StringView name, unsigned long value)$/;"	f	class:BlueFlyDevice::BlueFlySettings
Parse	src/Device/Driver/IMI/Protocol/MessageParser.cpp	/^IMI::MessageParser::Parse(const IMIBYTE _buffer[], int size)$/;"	f	class:IMI::MessageParser
Parse	src/FLARM/FlarmId.cpp	/^FlarmId::Parse(const TCHAR *input, TCHAR **endptr_r)$/;"	f	class:FlarmId
Parse	src/FLARM/FlarmId.cpp	/^FlarmId::Parse(const char *input, char **endptr_r)$/;"	f	class:FlarmId
Parse	src/RadioFrequency.cpp	/^RadioFrequency::Parse(const TCHAR *p)$/;"	f	class:RadioFrequency
Parse	src/Waypoint/WaypointReaderBase.cpp	/^WaypointReaderBase::Parse(Waypoints &way_points, TLineReader &reader,$/;"	f	class:WaypointReaderBase
Parse	src/Weather/METARParser.cpp	/^METARParser::Parse(const METAR &metar, ParsedMETAR &parsed)$/;"	f	class:METARParser
ParseAPENV1	src/Device/Driver/LevilAHRS_G.cpp	/^ParseAPENV1(NMEAInputLine &line, NMEAInfo &info)$/;"	f	file:
ParseAdditionalTemperatures	src/Weather/METARParser.cpp	/^ParseAdditionalTemperatures(const TCHAR *token, ParsedMETAR &parsed)$/;"	f	file:
ParseAirfieldDetails	src/Waypoint/WaypointDetailsReader.cpp	/^ParseAirfieldDetails(Waypoints &way_points, TLineReader &reader,$/;"	f	file:
ParseAirspaceFile	src/Airspace/AirspaceGlue.cpp	/^ParseAirspaceFile(Airspaces &airspaces, Path path,$/;"	f	file:
ParseAirspaceFile	src/Airspace/AirspaceGlue.cpp	/^ParseAirspaceFile(Airspaces &airspaces,$/;"	f	file:
ParseAirspaceFile	src/Airspace/AirspaceParser.cpp	/^ParseAirspaceFile(Airspaces &airspaces,$/;"	f
ParseAltitude	src/Waypoint/WaypointReaderCompeGPS.cpp	/^ParseAltitude(const TCHAR *&src, double &dest)$/;"	f	file:
ParseAltitude	src/Waypoint/WaypointReaderFS.cpp	/^ParseAltitude(const TCHAR *src, double &dest)$/;"	f	file:
ParseAltitude	src/Waypoint/WaypointReaderSeeYou.cpp	/^ParseAltitude(const TCHAR *src, double &dest)$/;"	f	file:
ParseAltitude	src/Waypoint/WaypointReaderWinPilot.cpp	/^ParseAltitude(const TCHAR *src, double &dest)$/;"	f	file:
ParseAltitude	src/Waypoint/WaypointReaderZander.cpp	/^ParseAltitude(const TCHAR *src, double &dest)$/;"	f	file:
ParseAngle	src/Task/TaskFileSeeYou.cpp	/^ParseAngle(const TCHAR* str)$/;"	f	file:
ParseAngle	src/Waypoint/WaypointReaderCompeGPS.cpp	/^ParseAngle(const TCHAR *&src, Angle &angle)$/;"	f	file:
ParseAngle	src/Waypoint/WaypointReaderFS.cpp	/^ParseAngle(const TCHAR *src, Angle &angle)$/;"	f	file:
ParseAngle	src/Waypoint/WaypointReaderOzi.cpp	/^ParseAngle(const TCHAR *src, Angle &angle)$/;"	f	file:
ParseAngle	src/Waypoint/WaypointReaderSeeYou.cpp	/^ParseAngle(const TCHAR* src, Angle& dest, const bool lat)$/;"	f	file:
ParseAngle	src/Waypoint/WaypointReaderWinPilot.cpp	/^ParseAngle(const TCHAR* src, Angle& dest, const bool lat)$/;"	f	file:
ParseAngle	src/Waypoint/WaypointReaderZander.cpp	/^ParseAngle(const TCHAR* src, Angle& dest, const bool lat)$/;"	f	file:
ParseArcBearings	src/Airspace/AirspaceParser.cpp	/^ParseArcBearings(StringParser<TCHAR> &input, TempAirspaceType &temp_area)$/;"	f	file:
ParseArcPoints	src/Airspace/AirspaceParser.cpp	/^ParseArcPoints(StringParser<TCHAR> &input, TempAirspaceType &temp_area)$/;"	f	file:
ParseArcTNP	src/Airspace/AirspaceParser.cpp	/^ParseArcTNP(StringParser<TCHAR> &input, TempAirspaceType &temp_area)$/;"	f	file:
ParseBAT	src/Device/Driver/BlueFly/Parser.cpp	/^BlueFlyDevice::ParseBAT(const char *content, NMEAInfo &info)$/;"	f	class:BlueFlyDevice
ParseBAT	src/Device/Driver/FlyNet.cpp	/^FlyNetDevice::ParseBAT(const char *content, NMEAInfo &info)$/;"	f	class:FlyNetDevice
ParseBFV	src/Device/Driver/BlueFly/Parser.cpp	/^BlueFlyDevice::ParseBFV(const char *content, NMEAInfo &info)$/;"	f	class:BlueFlyDevice
ParseBST	src/Device/Driver/BlueFly/Parser.cpp	/^BlueFlyDevice::ParseBST(const char *content, NMEAInfo &info)$/;"	f	class:BlueFlyDevice
ParseBearingDegrees	src/Airspace/AirspaceParser.cpp	/^ParseBearingDegrees(StringParser<TCHAR> &input, Angle &value_r)$/;"	f	file:
ParseBounds	src/Terrain/Loader.cpp	/^TerrainLoader::ParseBounds(const char *data)$/;"	f	class:TerrainLoader
ParseCUTaskDetails	src/Task/TaskFileSeeYou.cpp	/^ParseCUTaskDetails(TLineReader &reader, SeeYouTaskInformation *task_info,$/;"	f	file:
ParseCircleTNP	src/Airspace/AirspaceParser.cpp	/^ParseCircleTNP(StringParser<TCHAR> &input, TempAirspaceType &temp_area)$/;"	f	file:
ParseClassTNP	src/Airspace/AirspaceParser.cpp	/^ParseClassTNP(const TCHAR *buffer)$/;"	f	file:
ParseCommandLine	src/system/Args.hpp	/^  void ParseCommandLine(const TCHAR *_cmdline) {$/;"	f	class:Args
ParseCommandLine	src/system/Args.hpp	/^  void ParseCommandLine(const char *_cmdline) {$/;"	f	class:Args
ParseCoordsTNP	src/Airspace/AirspaceParser.cpp	/^ParseCoordsTNP(StringParser<TCHAR> &input, GeoPoint &point)$/;"	f	file:
ParseData	src/Device/Driver/CProbe.cpp	/^ParseData(NMEAInputLine &line, NMEAInfo &info)$/;"	f	file:
ParseDate	src/Device/Driver/FLARM/Logger.cpp	/^ParseDate(const char *str, BrokenDate &date)$/;"	f	file:
ParseDate	src/Device/Driver/Flytec/Logger.cpp	/^ParseDate(const char *str, BrokenDate &date)$/;"	f	file:
ParseDate	src/Device/Driver/LX/Logger.cpp	/^ParseDate(BrokenDate &date, const char *p)$/;"	f	file:
ParseDateTime	src/Weather/NOAADownloader.cpp	/^NOAADownloader::ParseDateTime(const char *buffer, BrokenDateTime &dest)$/;"	f	class:NOAADownloader
ParseDecoded	src/Weather/METARParser.cpp	/^METARParser::ParseDecoded(const METAR::ContentString &decoded,$/;"	f	class:METARParser
ParseDecodedDateTime	src/Weather/NOAADownloader.cpp	/^NOAADownloader::ParseDecodedDateTime(const char *buffer, BrokenDateTime &dest)$/;"	f	class:NOAADownloader
ParseDistance	src/Waypoint/WaypointReaderSeeYou.cpp	/^ParseDistance(const TCHAR *src, double &dest)$/;"	f	file:
ParseDouble	src/util/NumberParser.hpp	/^ParseDouble(const char *p, char **endptr=nullptr)$/;"	f
ParseDouble	src/util/NumberParser.hpp	/^ParseDouble(const wchar_t *p)$/;"	f
ParseDouble	src/util/NumberParser.hpp	/^ParseDouble(const wchar_t *p, wchar_t **endptr)$/;"	f
ParseExtensionValue	src/IGC/IGCParser.cpp	/^ParseExtensionValue(const char *p, const char *end, int16_t &value_r)$/;"	f	file:
ParseExtensionValueN	src/IGC/IGCParser.cpp	/^ParseExtensionValueN(const char *p, const char *end, size_t n,$/;"	f	file:
ParseFLYSEN	src/Device/Driver/Flytec/Parser.cpp	/^FlytecDevice::ParseFLYSEN(NMEAInputLine &line, NMEAInfo &info)$/;"	f	class:FlytecDevice
ParseFile	src/XML/Parser.cpp	/^XML::ParseFile(Path filename)$/;"	f	class:XML
ParseFileRepository	src/Repository/Parser.cpp	/^ParseFileRepository(FileRepository &repository, NLineReader &reader)$/;"	f
ParseFlags	src/Waypoint/WaypointReaderWinPilot.cpp	/^ParseFlags(const TCHAR* src, Waypoint &dest)$/;"	f	file:
ParseFlags	src/Waypoint/WaypointReaderZander.cpp	/^ParseFlags(const TCHAR* src, Waypoint &dest)$/;"	f	file:
ParseFlagsFromDescription	src/Waypoint/WaypointReaderZander.cpp	/^ParseFlagsFromDescription(const TCHAR* src, Waypoint &dest)$/;"	f	file:
ParseHexColor	src/Formatter/HexColor.cpp	/^ParseHexColor(const TCHAR *buffer, RGB8Color &color)$/;"	f
ParseHexColor	src/Formatter/HexColor.cpp	/^ParseHexColor(const char *buffer, RGB8Color &color)$/;"	f
ParseHexDigit	src/util/HexString.hpp	/^ParseHexDigit(const unsigned char c) {$/;"	f
ParseHexString	src/util/HexString.hpp	/^ParseHexString(const std::string_view hex_str)$/;"	f
ParseInputFile	src/Input/InputParser.cpp	/^ParseInputFile(InputConfig &config, TLineReader &reader)$/;"	f
ParseInt	src/util/NumberParser.hpp	/^ParseInt(const char *p, char **endptr=nullptr, int base=10)$/;"	f
ParseInt	src/util/NumberParser.hpp	/^ParseInt(const wchar_t *p, wchar_t **endptr=nullptr, int base=10)$/;"	f
ParseInt64	src/util/NumberParser.hpp	/^ParseInt64(const char *p, char **endptr=nullptr, int base=10)$/;"	f
ParseInt64	src/util/NumberParser.hpp	/^ParseInt64(const wchar_t *p, wchar_t **endptr=nullptr, int base=10)$/;"	f
ParseKeyCode	src/Input/InputKeys.cpp	/^ParseKeyCode(const TCHAR *data)$/;"	f
ParseLine	src/Airspace/AirspaceParser.cpp	/^ParseLine(Airspaces &airspace_database, StringParser<TCHAR> &&input,$/;"	f	file:
ParseLine	src/Airspace/AirspaceParser.cpp	/^ParseLine(Airspaces &airspace_database, TCHAR *line,$/;"	f	file:
ParseLine	src/Device/Descriptor.cpp	/^DeviceDescriptor::ParseLine(const char *line)$/;"	f	class:DeviceDescriptor
ParseLine	src/Device/Parser.cpp	/^NMEAParser::ParseLine(const char *string, NMEAInfo &info)$/;"	f	class:NMEAParser
ParseLine	src/Replay/NmeaReplay.cpp	/^NmeaReplay::ParseLine(const char *line, NMEAInfo &data)$/;"	f	class:NmeaReplay
ParseLine	src/Repository/Parser.cpp	/^ParseLine(char *line)$/;"	f	file:
ParseLine	src/Waypoint/WaypointReaderCompeGPS.cpp	/^WaypointReaderCompeGPS::ParseLine(const TCHAR *line, Waypoints &waypoints)$/;"	f	class:WaypointReaderCompeGPS
ParseLine	src/Waypoint/WaypointReaderFS.cpp	/^WaypointReaderFS::ParseLine(const TCHAR *line, Waypoints &way_points)$/;"	f	class:WaypointReaderFS
ParseLine	src/Waypoint/WaypointReaderOzi.cpp	/^WaypointReaderOzi::ParseLine(const TCHAR *line, Waypoints &way_points)$/;"	f	class:WaypointReaderOzi
ParseLine	src/Waypoint/WaypointReaderSeeYou.cpp	/^WaypointReaderSeeYou::ParseLine(const TCHAR* line, Waypoints &waypoints)$/;"	f	class:WaypointReaderSeeYou
ParseLine	src/Waypoint/WaypointReaderWinPilot.cpp	/^WaypointReaderWinPilot::ParseLine(const TCHAR *line, Waypoints &waypoints)$/;"	f	class:WaypointReaderWinPilot
ParseLine	src/Waypoint/WaypointReaderZander.cpp	/^WaypointReaderZander::ParseLine(const TCHAR* line, Waypoints &way_points)$/;"	f	class:WaypointReaderZander
ParseLine	src/Weather/METARParser.cpp	/^METARParser::ParseLine(const METAR::ContentString &content, ParsedMETAR &parsed)$/;"	f	class:METARParser
ParseLineTNP	src/Airspace/AirspaceParser.cpp	/^ParseLineTNP(Airspaces &airspace_database, StringParser<TCHAR> &input,$/;"	f	file:
ParseListResults	src/Kobo/WPASupplicant.cpp	/^ParseListResults(WifiConfiguredNetworkInfo *dest, unsigned max, char *src)$/;"	f	file:
ParseListResultsLine	src/Kobo/WPASupplicant.cpp	/^ParseListResultsLine(WifiConfiguredNetworkInfo &dest, char *src)$/;"	f	file:
ParseLocation	src/Waypoint/WaypointReaderCompeGPS.cpp	/^ParseLocation(const TCHAR *&src, GeoPoint &p)$/;"	f	file:
ParseLocation	src/Waypoint/WaypointReaderFS.cpp	/^ParseLocation(const TCHAR *src, GeoPoint &p)$/;"	f	file:
ParseLocation	src/Weather/METARParser.cpp	/^ParseLocation(const TCHAR *buffer, ParsedMETAR &parsed)$/;"	f	file:
ParseLocationUTM	src/Waypoint/WaypointReaderCompeGPS.cpp	/^ParseLocationUTM(const TCHAR *&src, GeoPoint &p)$/;"	f	file:
ParseLocationUTM	src/Waypoint/WaypointReaderFS.cpp	/^ParseLocationUTM(const TCHAR *src, GeoPoint &p)$/;"	f	file:
ParseLogbookContent	src/Device/Driver/LX/NanoLogger.cpp	/^ParseLogbookContent(const char *_line, RecordedFlightInfo &info)$/;"	f	file:
ParseMaxAlt	src/Task/TaskFileSeeYou.cpp	/^ParseMaxAlt(const TCHAR* str)$/;"	f	file:
ParseNMEA	src/Device/Descriptor.cpp	/^DeviceDescriptor::ParseNMEA(const char *line, NMEAInfo &info)$/;"	f	class:DeviceDescriptor
ParseNMEA	src/Device/Driver.cpp	/^AbstractDevice::ParseNMEA(const char *line, struct NMEAInfo &info)$/;"	f	class:AbstractDevice
ParseNMEA	src/Device/Driver/AirControlDisplay.cpp	/^ACDDevice::ParseNMEA(const char *_line, NMEAInfo &info)$/;"	f	class:ACDDevice
ParseNMEA	src/Device/Driver/AltairPro.cpp	/^AltairProDevice::ParseNMEA(const char *String, NMEAInfo &info)$/;"	f	class:AltairProDevice
ParseNMEA	src/Device/Driver/BlueFly/Parser.cpp	/^BlueFlyDevice::ParseNMEA(const char *line, NMEAInfo &info)$/;"	f	class:BlueFlyDevice
ParseNMEA	src/Device/Driver/BorgeltB50.cpp	/^B50Device::ParseNMEA(const char *String, NMEAInfo &info)$/;"	f	class:B50Device
ParseNMEA	src/Device/Driver/CAI302/Parser.cpp	/^CAI302Device::ParseNMEA(const char *String, NMEAInfo &info)$/;"	f	class:CAI302Device
ParseNMEA	src/Device/Driver/CProbe.cpp	/^CProbeDevice::ParseNMEA(const char *_line, NMEAInfo &info)$/;"	f	class:CProbeDevice
ParseNMEA	src/Device/Driver/Condor.cpp	/^CondorDevice::ParseNMEA(const char *String, NMEAInfo &info)$/;"	f	class:CondorDevice
ParseNMEA	src/Device/Driver/EWMicroRecorder.cpp	/^EWMicroRecorderDevice::ParseNMEA(const char *String, NMEAInfo &info)$/;"	f	class:EWMicroRecorderDevice
ParseNMEA	src/Device/Driver/Eye.cpp	/^EyeDevice::ParseNMEA(const char *_line, NMEAInfo &info)$/;"	f	class:EyeDevice
ParseNMEA	src/Device/Driver/FLARM/Parser.cpp	/^FlarmDevice::ParseNMEA(const char *_line, NMEAInfo &info)$/;"	f	class:FlarmDevice
ParseNMEA	src/Device/Driver/FlyNet.cpp	/^FlyNetDevice::ParseNMEA(const char *line, NMEAInfo &info)$/;"	f	class:FlyNetDevice
ParseNMEA	src/Device/Driver/FlymasterF1.cpp	/^FlymasterF1Device::ParseNMEA(const char *String, NMEAInfo &info)$/;"	f	class:FlymasterF1Device
ParseNMEA	src/Device/Driver/Flytec/Parser.cpp	/^FlytecDevice::ParseNMEA(const char *_line, NMEAInfo &info)$/;"	f	class:FlytecDevice
ParseNMEA	src/Device/Driver/ILEC.cpp	/^ILECDevice::ParseNMEA(const char *_line, NMEAInfo &info)$/;"	f	class:ILECDevice
ParseNMEA	src/Device/Driver/IMI/Internal.cpp	/^IMIDevice::ParseNMEA(const char *String, NMEAInfo &info)$/;"	f	class:IMIDevice
ParseNMEA	src/Device/Driver/LX/Parser.cpp	/^LXDevice::ParseNMEA(const char *String, NMEAInfo &info)$/;"	f	class:LXDevice
ParseNMEA	src/Device/Driver/Leonardo.cpp	/^LeonardoDevice::ParseNMEA(const char *_line, NMEAInfo &info)$/;"	f	class:LeonardoDevice
ParseNMEA	src/Device/Driver/LevilAHRS_G.cpp	/^LevilDevice::ParseNMEA(const char *_line, NMEAInfo &info)$/;"	f	class:LevilDevice
ParseNMEA	src/Device/Driver/OpenVario.cpp	/^OpenVarioDevice::ParseNMEA(const char *_line, NMEAInfo &info)$/;"	f	class:OpenVarioDevice
ParseNMEA	src/Device/Driver/PosiGraph.cpp	/^PGDevice::ParseNMEA(const char *String, NMEAInfo &info)$/;"	f	class:PGDevice
ParseNMEA	src/Device/Driver/ThermalExpress/Driver.cpp	/^ThermalExpressDevice::ParseNMEA(const char *line, NMEAInfo &info)$/;"	f	class:ThermalExpressDevice
ParseNMEA	src/Device/Driver/Vaulter.cpp	/^VaulterDevice::ParseNMEA(const char *_line, NMEAInfo &info)$/;"	f	class:VaulterDevice
ParseNMEA	src/Device/Driver/Vega/Parser.cpp	/^VegaDevice::ParseNMEA(const char *String, NMEAInfo &info)$/;"	f	class:VegaDevice
ParseNMEA	src/Device/Driver/Volkslogger/Parser.cpp	/^VolksloggerDevice::ParseNMEA(const char *String, NMEAInfo &info)$/;"	f	class:VolksloggerDevice
ParseNMEA	src/Device/Driver/Westerboer.cpp	/^WesterboerDevice::ParseNMEA(const char *String, NMEAInfo &info)$/;"	f	class:WesterboerDevice
ParseNMEA	src/Device/Driver/XCTracer/Parser.cpp	/^XCTracerDevice::ParseNMEA(const char *string, NMEAInfo &info)$/;"	f	class:XCTracerDevice
ParseNMEA	src/Device/Driver/XCVario.cpp	/^XVCDevice::ParseNMEA(const char *String, NMEAInfo &info)$/;"	f	class:XVCDevice
ParseNMEA	src/Device/Driver/Zander.cpp	/^ZanderDevice::ParseNMEA(const char *String, NMEAInfo &info)$/;"	f	class:ZanderDevice
ParseNanoInfo	src/Device/Driver/LX/Parser.cpp	/^ParseNanoInfo(NMEAInputLine &line, DeviceInfo &device)$/;"	f	file:
ParseNumber	src/Waypoint/WaypointReaderOzi.cpp	/^ParseNumber(const TCHAR *src, long &dest)$/;"	f	file:
ParseOZs	src/Task/TaskFileSeeYou.cpp	/^ParseOZs(SeeYouTurnpointInformation turnpoint_infos[], const TCHAR *params[],$/;"	f	file:
ParseOptions	src/Task/TaskFileSeeYou.cpp	/^ParseOptions(SeeYouTaskInformation *task_info, const TCHAR *params[],$/;"	f	file:
ParsePAAVS	src/Device/Driver/AirControlDisplay.cpp	/^ParsePAAVS(NMEAInputLine &line, NMEAInfo &info)$/;"	f	file:
ParsePDA1	src/Device/Driver/ILEC.cpp	/^ParsePDA1(NMEAInputLine &line, NMEAInfo &info)$/;"	f	file:
ParsePFLAA	src/Device/Driver/FLARM/StaticParser.cpp	/^ParsePFLAA(NMEAInputLine &line, TrafficList &flarm, double clock)$/;"	f
ParsePFLAC	src/Device/Driver/FLARM/Parser.cpp	/^FlarmDevice::ParsePFLAC(NMEAInputLine &line)$/;"	f	class:FlarmDevice
ParsePFLAE	src/Device/Driver/FLARM/StaticParser.cpp	/^ParsePFLAE(NMEAInputLine &line, FlarmError &error, double clock)$/;"	f
ParsePFLAU	src/Device/Driver/FLARM/StaticParser.cpp	/^ParsePFLAU(NMEAInputLine &line, FlarmStatus &flarm, double clock)$/;"	f
ParsePFLAV	src/Device/Driver/FLARM/StaticParser.cpp	/^ParsePFLAV(NMEAInputLine &line, FlarmVersion &version, double clock)$/;"	f
ParsePITV3	src/Device/Driver/Vaulter.cpp	/^ParsePITV3(NMEAInputLine &line, NMEAInfo &info)$/;"	f	file:
ParsePITV4	src/Device/Driver/Vaulter.cpp	/^ParsePITV4(NMEAInputLine &line, NMEAInfo &info)$/;"	f	file:
ParsePITV5	src/Device/Driver/Vaulter.cpp	/^ParsePITV5(NMEAInputLine &line, NMEAInfo &info)$/;"	f	file:
ParsePRS	src/Device/Driver/BlueFly/Parser.cpp	/^BlueFlyDevice::ParsePRS(const char *content, NMEAInfo &info)$/;"	f	class:BlueFlyDevice
ParsePRS	src/Device/Driver/FlyNet.cpp	/^FlyNetDevice::ParsePRS(const char *content, NMEAInfo &info)$/;"	f	class:FlyNetDevice
ParsePolar	src/Polar/Parser.cpp	/^ParsePolar(PolarInfo &polar_r, const char *s)$/;"	f
ParsePolarShape	src/Polar/Parser.cpp	/^ParsePolarShape(PolarShape &shape, const char *s)$/;"	f
ParseQNH	src/Weather/METARParser.cpp	/^ParseQNH(const TCHAR *token, ParsedMETAR &parsed)$/;"	f	file:
ParseRPYL	src/Device/Driver/LevilAHRS_G.cpp	/^ParseRPYL(NMEAInputLine &line, NMEAInfo &info)$/;"	f	file:
ParseRadius	src/Task/TaskFileSeeYou.cpp	/^ParseRadius(const TCHAR* str)$/;"	f	file:
ParseRecordInfo	src/Device/Driver/FLARM/Logger.cpp	/^ParseRecordInfo(char *record_info, RecordedFlightInfo &flight)$/;"	f	file:
ParseRunwayDirection	src/Waypoint/WaypointReaderWinPilot.cpp	/^ParseRunwayDirection(const TCHAR* src, Runway &dest)$/;"	f	file:
ParseSET	src/Device/Driver/BlueFly/Parser.cpp	/^BlueFlyDevice::ParseSET(const char *content, NMEAInfo &info)$/;"	f	class:BlueFlyDevice
ParseScanResults	src/Kobo/WPASupplicant.cpp	/^ParseScanResults(WifiVisibleNetwork *dest, unsigned max, char *src)$/;"	f	file:
ParseScanResultsLine	src/Kobo/WPASupplicant.cpp	/^ParseScanResultsLine(WifiVisibleNetwork &dest, char *src)$/;"	f	file:
ParseStatus	src/Kobo/WPASupplicant.cpp	/^ParseStatus(WifiStatus &status, char *src)$/;"	f	file:
ParseStatusLine	src/Kobo/WPASupplicant.cpp	/^ParseStatusLine(WifiStatus &status, char *src)$/;"	f	file:
ParseString	src/Form/DataField/Boolean.cpp	/^DataFieldBoolean::ParseString(const TCHAR *s) const$/;"	f	class:DataFieldBoolean
ParseString	src/Form/DataField/Integer.cpp	/^ParseString(const TCHAR *s)$/;"	f	file:
ParseString	src/Waypoint/WaypointReaderFS.cpp	/^ParseString(const TCHAR *src, tstring &dest, unsigned len = 0)$/;"	f	file:
ParseString	src/Waypoint/WaypointReaderOzi.cpp	/^ParseString(const TCHAR *src, tstring &dest)$/;"	f	file:
ParseString	src/Waypoint/WaypointReaderZander.cpp	/^ParseString(const TCHAR* src, tstring& dest, unsigned len)$/;"	f	file:
ParseString	src/XML/Parser.cpp	/^XML::ParseString(const TCHAR *xml_string)$/;"	f	class:XML
ParseStyle	src/Task/TaskFileSeeYou.cpp	/^ParseStyle(const TCHAR* str)$/;"	f	file:
ParseStyle	src/Waypoint/WaypointReaderSeeYou.cpp	/^ParseStyle(const TCHAR* src, Waypoint::Type &type)$/;"	f	file:
ParseTXP	src/Device/Driver/ThermalExpress/Driver.cpp	/^ThermalExpressDevice::ParseTXP(NMEAInputLine &line, NMEAInfo &info)$/;"	f	class:ThermalExpressDevice
ParseTaskTime	src/Task/TaskFileSeeYou.cpp	/^ParseTaskTime(const TCHAR* str)$/;"	f	file:
ParseTemperature	src/Weather/METARParser.cpp	/^ParseTemperature(const TCHAR *token, double &temperature)$/;"	f	file:
ParseTemperatures	src/Weather/METARParser.cpp	/^ParseTemperatures(const TCHAR *token, ParsedMETAR &parsed)$/;"	f	file:
ParseTime	src/Device/Driver/FLARM/Logger.cpp	/^ParseTime(const char *str, BrokenTime &time)$/;"	f	file:
ParseTime	src/Device/Driver/Flytec/Logger.cpp	/^ParseTime(const char *str, BrokenTime &time)$/;"	f	file:
ParseTime	src/Device/Driver/LX/Logger.cpp	/^ParseTime(BrokenTime &time, const char *p)$/;"	f	file:
ParseTimeCode	src/Weather/METARParser.cpp	/^ParseTimeCode(const TCHAR *token, ParsedMETAR &parsed)$/;"	f	file:
ParseTwoDigits	src/IGC/IGCParser.cpp	/^ParseTwoDigits(const char *p)$/;"	f	file:
ParseType	src/Airspace/AirspaceParser.cpp	/^ParseType(const TCHAR *buffer)$/;"	f	file:
ParseTypeTNP	src/Airspace/AirspaceParser.cpp	/^ParseTypeTNP(const TCHAR *buffer)$/;"	f	file:
ParseUint64	src/util/NumberParser.hpp	/^ParseUint64(const char *p, char **endptr=nullptr, int base=10)$/;"	f
ParseUint64	src/util/NumberParser.hpp	/^ParseUint64(const wchar_t *p, wchar_t **endptr=nullptr, int base=10)$/;"	f
ParseUlong	src/Device/Driver/BlueFly/Parser.cpp	/^ParseUlong(const char **line, unsigned long &value)$/;"	f	file:
ParseUnsigned	src/IGC/IGCParser.cpp	/^ParseUnsigned(const char *p, const char *end)$/;"	f	file:
ParseUnsigned	src/util/NumberParser.hpp	/^ParseUnsigned(const char *p, char **endptr=nullptr, int base=10)$/;"	f
ParseUnsigned	src/util/NumberParser.hpp	/^ParseUnsigned(const wchar_t *p, wchar_t **endptr=nullptr, int base=10)$/;"	f
ParseVisibility	src/Weather/METARParser.cpp	/^ParseVisibility(const TCHAR *token, ParsedMETAR &parsed)$/;"	f	file:
ParseWind	src/Weather/METARParser.cpp	/^ParseWind(const TCHAR *token, ParsedMETAR &parsed)$/;"	f	file:
ParseXMLElement	src/XML/Parser.cpp	/^XML::ParseXMLElement(XMLNode &node, Parser *pXML)$/;"	f	class:XML
ParsedMETAR	src/Weather/ParsedMETAR.hpp	/^struct ParsedMETAR$/;"	s
Parser	src/XML/Parser.cpp	/^  struct Parser {$/;"	s	namespace:XML	file:
PartitionPoints	src/Geo/ConvexHull/GrahamScan.cpp	/^GrahamScan::PartitionPoints()$/;"	f	class:GrahamScan
Pascal	src/Atmosphere/Pressure.hpp	/^  AtmosphericPressure Pascal(double value) {$/;"	f	class:AtmosphericPressure
Password	src/Profile/ProfileKeys.cpp	/^const char Password[] = "Password";$/;"	m	namespace:ProfileKeys	file:
PasswordClicked	src/Dialogs/ProfileListDialog.cpp	/^ProfileListWidget::PasswordClicked()$/;"	f	class:ProfileListWidget
PasswordDataField	src/Form/DataField/Password.hpp	/^  PasswordDataField(const TCHAR *initial_value,$/;"	f	class:final
Path	src/system/Path.hpp	/^  Path(std::nullptr_t n):value(n) {}$/;"	f	class:Path
Path	src/system/Path.hpp	/^  explicit constexpr Path(const_pointer _value):value(_value) {}$/;"	f	class:Path
Path	src/system/Path.hpp	/^class Path {$/;"	c
PathName	src/system/ConvertPathName.hpp	/^  explicit PathName(Value::const_pointer _value)$/;"	f	class:PathName
PathName	src/system/ConvertPathName.hpp	/^  explicit PathName(const char *_value)$/;"	f	class:PathName
PathName	src/system/ConvertPathName.hpp	/^class PathName {$/;"	c
PatternList	src/Form/DataField/File.hpp	/^  typedef StaticArray<StaticString<32>, 8> PatternList;$/;"	t	class:final
Pause	src/net/http/Handler.hxx	/^	struct Pause {};$/;"	s	class:CurlResponseHandler
Peek	src/Tracking/SkyLines/Queue.hpp	/^  const FixPacket &Peek() {$/;"	f	class:SkyLinesTracking::Queue
PeekNext	src/system/Args.hpp	/^  const char *PeekNext() const {$/;"	f	class:Args
Pen	src/ui/canvas/Pen.hpp	/^  Pen(Style Style, unsigned width, const Color c) {$/;"	f	class:Pen
Pen	src/ui/canvas/Pen.hpp	/^  Pen(Style _style, unsigned _width, const Color _color)$/;"	f	class:Pen
Pen	src/ui/canvas/Pen.hpp	/^  Pen(unsigned _width, const Color _color)$/;"	f	class:Pen
Pen	src/ui/canvas/Pen.hpp	/^  Pen(unsigned width, Color c) {$/;"	f	class:Pen
Pen	src/ui/canvas/Pen.hpp	/^class Pen$/;"	c
PerPixelOperations	src/ui/canvas/memory/PixelOperations.hpp	/^  explicit constexpr PerPixelOperations(Args&&... args)$/;"	f	struct:PerPixelOperations
PerPixelOperations	src/ui/canvas/memory/PixelOperations.hpp	/^struct PerPixelOperations : private WritePixelOperation {$/;"	s
PercentCircling	src/Computer/CirclingComputer.cpp	/^CirclingComputer::PercentCircling(const MoreData &basic,$/;"	f	class:CirclingComputer
PercentToByte	src/Dialogs/Settings/Panels/TerrainDisplayConfigPanel.cpp	/^PercentToByte(short percent)$/;"	f	file:
Perform	src/net/http/Easy.hxx	/^	void Perform() {$/;"	f	class:CurlEasy
Perform	src/net/http/Multi.hxx	/^	unsigned Perform() {$/;"	f	class:CurlMulti
PeriodClock	src/time/PeriodClock.hpp	/^class PeriodClock {$/;"	c
PersistentCallback	src/lua/Background.cpp	/^  static void PersistentCallback(lua_State *L) {$/;"	f	class:final	file:
PersistentCallback	src/lua/Background.cpp	/^BackgroundLua::PersistentCallback()$/;"	f	class:BackgroundLua
PersistentCallback	src/lua/Persistent.hpp	/^typedef void (*PersistentCallback)(lua_State *L);$/;"	t	namespace:Lua
PickFlarmTraffic	src/Dialogs/Traffic/TrafficList.cpp	/^PickFlarmTraffic(const TCHAR *title, FlarmId array[], unsigned count)$/;"	f
Pilot	src/Device/Driver/CAI302/Protocol.hpp	/^  struct Pilot {$/;"	s	namespace:CAI302
Pilot	src/Device/Driver/LX/Protocol.hpp	/^  struct Pilot {$/;"	s	namespace:LX
Pilot	src/Device/Driver/Volkslogger/Database.hpp	/^  struct Pilot {$/;"	s	namespace:Volkslogger
PilotMeta	src/Device/Driver/CAI302/Protocol.hpp	/^  struct PilotMeta {$/;"	s	namespace:CAI302
PilotMetaActive	src/Device/Driver/CAI302/Protocol.hpp	/^  struct PilotMetaActive {$/;"	s	namespace:CAI302
PilotName	src/Device/Driver/LX/Protocol.hpp	/^    char PilotName[19];$/;"	m	struct:LX::Pilot
PilotName	src/Dialogs/Settings/Panels/LoggerConfigPanel.cpp	/^  PilotName,$/;"	e	enum:ControlIndex	file:
PilotName	src/Profile/ProfileKeys.cpp	/^const char PilotName[] = "PilotName";$/;"	m	namespace:ProfileKeys	file:
PingPacket	src/Tracking/SkyLines/Protocol.hpp	/^struct PingPacket {$/;"	s	namespace:SkyLinesTracking
PixelAlphaOperation	src/ui/canvas/memory/PixelOperations.hpp	/^  constexpr explicit PixelAlphaOperation(uint8_t _alpha):alpha(_alpha) {}$/;"	f	class:PixelAlphaOperation
PixelAlphaOperation	src/ui/canvas/memory/PixelOperations.hpp	/^class PixelAlphaOperation {$/;"	c
PixelBitNot	src/ui/canvas/memory/PixelOperations.hpp	/^struct PixelBitNot {$/;"	s
PixelBitNotOr	src/ui/canvas/memory/PixelOperations.hpp	/^struct PixelBitNotOr {$/;"	s
PixelColoredAlpha	src/ui/canvas/memory/PixelOperations.hpp	/^  constexpr explicit PixelColoredAlpha(color_type _color):color(_color) {}$/;"	f	struct:PixelColoredAlpha
PixelColoredAlpha	src/ui/canvas/memory/PixelOperations.hpp	/^struct PixelColoredAlpha {$/;"	s
PixelDistance	src/Terrain/RasterMap.hpp	/^  PixelDistance(const GeoPoint &location, unsigned pixels) const {$/;"	f	class:RasterMap
PixelIntegerAdapter	src/ui/canvas/memory/PixelOperations.hpp	/^  explicit constexpr PixelIntegerAdapter(Args&&... args)$/;"	f	struct:PixelIntegerAdapter
PixelIntegerAdapter	src/ui/canvas/memory/PixelOperations.hpp	/^struct PixelIntegerAdapter : private Operation {$/;"	s
PixelIterator	src/Terrain/RasterBuffer.cpp	/^  PixelIterator(unsigned src_size, unsigned dest_size)$/;"	f	class:PixelIterator
PixelIterator	src/Terrain/RasterBuffer.cpp	/^class PixelIterator$/;"	c	file:
PixelOpaqueAlpha	src/ui/canvas/memory/PixelOperations.hpp	/^  constexpr PixelOpaqueAlpha(color_type _a, color_type _b):a(_a), b(_b) {}$/;"	f	struct:PixelOpaqueAlpha
PixelOpaqueAlpha	src/ui/canvas/memory/PixelOperations.hpp	/^struct PixelOpaqueAlpha {$/;"	s
PixelOpaqueText	src/ui/canvas/memory/PixelOperations.hpp	/^  constexpr PixelOpaqueText(color_type _b, color_type _t)$/;"	f	struct:PixelOpaqueText
PixelOpaqueText	src/ui/canvas/memory/PixelOperations.hpp	/^struct PixelOpaqueText {$/;"	s
PixelPerChannelAdapter	src/ui/canvas/memory/PixelOperations.hpp	/^  explicit constexpr PixelPerChannelAdapter(Args&&... args)$/;"	f	struct:PixelPerChannelAdapter
PixelPerChannelAdapter	src/ui/canvas/memory/PixelOperations.hpp	/^struct PixelPerChannelAdapter : private Operation {$/;"	s
PixelPoint	src/ui/dim/Point.hpp	/^struct PixelPoint : IntPoint2D {$/;"	s
PixelRect	src/ui/dim/Rect.hpp	/^struct PixelRect {$/;"	s
PixelSize	src/ui/dim/Size.hpp	/^struct PixelSize {$/;"	s
PixelTraits	src/ui/canvas/memory/Optimised.hpp	/^  typedef typename Portable::PixelTraits PixelTraits;$/;"	t	class:SelectOptimisedPixelOperations
PixelTraits	src/ui/canvas/memory/PixelOperations.hpp	/^  typedef PT PixelTraits;$/;"	t	struct:ColorKey
PixelTraits	src/ui/canvas/memory/PixelOperations.hpp	/^  typedef PT PixelTraits;$/;"	t	struct:NotWhiteCondition
PixelTraits	src/ui/canvas/memory/PixelOperations.hpp	/^  typedef PT PixelTraits;$/;"	t	struct:PixelColoredAlpha
PixelTraits	src/ui/canvas/memory/PixelOperations.hpp	/^  typedef PT PixelTraits;$/;"	t	struct:PixelIntegerAdapter
PixelTraits	src/ui/canvas/memory/PixelOperations.hpp	/^  typedef PT PixelTraits;$/;"	t	struct:PixelOpaqueAlpha
PixelTraits	src/ui/canvas/memory/PixelOperations.hpp	/^  typedef PT PixelTraits;$/;"	t	struct:PixelOpaqueText
PixelTraits	src/ui/canvas/memory/PixelOperations.hpp	/^  typedef PT PixelTraits;$/;"	t	struct:PixelPerChannelAdapter
PixelTraits	src/ui/canvas/memory/PixelOperations.hpp	/^  typedef typename Check::PixelTraits PixelTraits;$/;"	t	struct:ConditionalWritePixel
PixelTraits	src/ui/canvas/memory/PixelOperations.hpp	/^  typedef typename Operation::PixelTraits PixelTraits;$/;"	t	struct:BinaryWritePixel
PixelTraits	src/ui/canvas/memory/PixelOperations.hpp	/^  typedef typename Operation::PixelTraits PixelTraits;$/;"	t	struct:UnaryWritePixel
PixelTraits	src/ui/canvas/memory/PixelOperations.hpp	/^  typedef typename WritePixelOperation::PixelTraits PixelTraits;$/;"	t	struct:PerPixelOperations
PlacesOfInterestSettings	src/Computer/Settings.hpp	/^struct PlacesOfInterestSettings {$/;"	s
Plane	src/Plane/Plane.hpp	/^struct Plane$/;"	s
PlaneEditWidget	src/Dialogs/Plane/PlaneDetailsDialog.cpp	/^  PlaneEditWidget(const Plane &_plane, const DialogLook &_look,$/;"	f	class:final
PlaneFileVisitor	src/Dialogs/Plane/PlaneListDialog.cpp	/^    PlaneFileVisitor(std::vector<ListItem> &_list):list(_list) {}$/;"	f	class:final::PlaneFileVisitor
PlaneFileVisitor	src/Dialogs/Plane/PlaneListDialog.cpp	/^  class PlaneFileVisitor: public File::Visitor$/;"	c	class:final	file:
PlaneGlue	src/Plane/PlaneFileGlue.hpp	/^namespace PlaneGlue$/;"	n
PlaneGlue	src/Plane/PlaneGlue.hpp	/^namespace PlaneGlue$/;"	n
PlanePolarWidget	src/Dialogs/Plane/PlanePolarDialog.cpp	/^  PlanePolarWidget(const Plane &_plane, const DialogLook &_look)$/;"	f	class:final
Play	src/Android/SoundUtil.cpp	/^SoundUtil::Play(JNIEnv *env, jobject context, const char *name)$/;"	f	class:SoundUtil
Play	src/Audio/SLES/Play.hpp	/^    explicit Play(SLPlayItf _play):play(_play) {}$/;"	f	class:SLES::Play
Play	src/Audio/SLES/Play.hpp	/^  class Play {$/;"	c	namespace:SLES
PlayExternal	src/Android/SoundUtil.cpp	/^SoundUtil::PlayExternal(JNIEnv *env, jobject context, const char *path)$/;"	f	class:SoundUtil
PlayResource	src/Audio/PCMResourcePlayer.cpp	/^PCMResourcePlayer::PlayResource(const TCHAR *resource_name)$/;"	f	class:PCMResourcePlayer
PlayResource	src/Audio/Sound.cpp	/^PlayResource(const TCHAR *resource_name)$/;"	f
Point	src/Computer/ThermalLocator.hpp	/^  struct Point $/;"	s	class:ThermalLocator
Point	src/Math/Line2D.hpp	/^  typedef P Point;$/;"	t	struct:Line2D
Point	src/util/QuadTree.hxx	/^	struct Point {$/;"	s	class:QuadTree
Point2D	src/Math/Point2D.hpp	/^struct Point2D {$/;"	s
PointCurrent	src/Renderer/TaskPointRenderer.hpp	/^  bool PointCurrent() const {$/;"	f	class:TaskPointRenderer
PointEditor	src/Dialogs/Plane/PolarShapeEditWidget.hpp	/^  struct PointEditor {$/;"	s	class:PolarShapeEditWidget
PointPast	src/Renderer/TaskPointRenderer.hpp	/^  bool PointPast() const {$/;"	f	class:TaskPointRenderer
PointVector	src/UIUtil/TrackingGestureManager.hpp	/^  typedef std::vector<PixelPoint> PointVector;$/;"	t	class:TrackingGestureManager
PointerButton	src/ui/event/poll/WaylandQueue.cpp	/^WaylandEventQueue::PointerButton(bool pressed)$/;"	f	class:UI::WaylandEventQueue
PointerIterator	src/Engine/Trace/Trace.cpp	/^  explicit PointerIterator(I _i):i(_i) {}$/;"	f	class:PointerIterator
PointerIterator	src/Engine/Trace/Trace.cpp	/^class PointerIterator {$/;"	c	file:
PointerMotion	src/ui/event/poll/WaylandQueue.cpp	/^WaylandEventQueue::PointerMotion(IntPoint2D new_pointer_position)$/;"	f	class:UI::WaylandEventQueue
Polar	src/Device/Driver/CAI302/Protocol.hpp	/^  struct Polar {$/;"	s	namespace:CAI302
Polar	src/Engine/Route/Config.hpp	/^  enum class Polar {$/;"	c	struct:RoutePlannerConfig
Polar	src/Profile/ProfileKeys.cpp	/^const char Polar[] = "PolarInformation";$/;"	m	namespace:ProfileKeys	file:
PolarButtonClicked	src/Dialogs/Plane/PlaneDetailsDialog.cpp	/^PlaneEditWidget::PolarButtonClicked()$/;"	f	class:PlaneEditWidget
PolarCoefficients	src/Engine/GlideSolvers/PolarCoefficients.hpp	/^struct PolarCoefficients$/;"	s
PolarDegradation	src/Dialogs/Settings/Panels/SafetyFactorsConfigPanel.cpp	/^  PolarDegradation,$/;"	e	enum:ControlIndex	file:
PolarDegradation	src/Profile/ProfileKeys.cpp	/^const char PolarDegradation[] = "PolarDegradation";$/;"	m	namespace:ProfileKeys	file:
PolarFile	src/Profile/ProfileKeys.cpp	/^const char PolarFile[] = "PolarFile"; \/\/ pL$/;"	m	namespace:ProfileKeys	file:
PolarGlue	src/Polar/PolarFileGlue.hpp	/^namespace PolarGlue$/;"	n
PolarGlue	src/Polar/PolarGlue.cpp	/^namespace PolarGlue$/;"	n	file:
PolarGlue	src/Polar/PolarGlue.hpp	/^namespace PolarGlue$/;"	n
PolarID	src/Profile/ProfileKeys.cpp	/^const char PolarID[] = "Polar";$/;"	m	namespace:ProfileKeys	file:
PolarInfo	src/Polar/Polar.hpp	/^struct PolarInfo$/;"	s
PolarMeta	src/Device/Driver/CAI302/Protocol.hpp	/^  struct PolarMeta {$/;"	s	namespace:CAI302
PolarName	src/Profile/ProfileKeys.cpp	/^const char PolarName[] = "PolarName";$/;"	m	namespace:ProfileKeys	file:
PolarPoint	src/Polar/Shape.hpp	/^struct PolarPoint {$/;"	s
PolarSettings	src/Computer/Settings.hpp	/^struct PolarSettings {$/;"	s
PolarShape	src/Polar/Shape.hpp	/^struct PolarShape {$/;"	s
PolarShapeEditWidget	src/Dialogs/Plane/PolarShapeEditWidget.hpp	/^class PolarShapeEditWidget : public PanelWidget {$/;"	c
PolarStore	src/Polar/PolarStore.hpp	/^namespace PolarStore$/;"	n
Poll	src/ui/event/poll/Queue.cpp	/^EventQueue::Poll()$/;"	f	class:UI::EventQueue
PollBackend	src/event/PollBackend.hxx	/^class PollBackend$/;"	c
PollEvents	src/event/PollEvents.hxx	/^struct PollEvents {$/;"	s
PollResultGeneric	src/event/PollResultGeneric.hxx	/^class PollResultGeneric$/;"	c
PollTiles	src/Terrain/RasterTileCache.cpp	/^RasterTileCache::PollTiles(int x, int y, unsigned radius)$/;"	f	class:RasterTileCache
PolygonInterior	src/Geo/ConvexHull/PolygonInterior.cpp	/^PolygonInterior(const FlatGeoPoint &P,$/;"	f
PolygonInterior	src/Geo/ConvexHull/PolygonInterior.cpp	/^PolygonInterior(const GeoPoint &P,$/;"	f
PoorSocketPair	src/system/EventPipe.cxx	/^PoorSocketPair(UniqueSocketDescriptor &socket0, UniqueSocketDescriptor &socket1)$/;"	f	file:
Pop	src/Tracking/SkyLines/Queue.hpp	/^  const FixPacket &Pop() {$/;"	f	class:SkyLinesTracking::Queue
Pop	src/ui/event/android/Queue.cpp	/^EventQueue::Pop(Event &event)$/;"	f	class:UI::EventQueue
Pop	src/ui/event/poll/Queue.cpp	/^EventQueue::Pop(Event &event)$/;"	f	class:UI::EventQueue
Pop	src/ui/event/sdl/Queue.cpp	/^EventQueue::Pop(Event &event)$/;"	f	class:UI::EventQueue
PopError	src/lua/Error.cxx	/^PopError(lua_State *L)$/;"	f	namespace:Lua
Popup	src/ui/window/Window.hpp	/^  void Popup() {$/;"	f	class:WindowStyle
PopupMessage	src/PopupMessage.cpp	/^PopupMessage::PopupMessage(UI::SingleWindow &_parent, const DialogLook &_look,$/;"	f	class:PopupMessage
PopupMessage	src/PopupMessage.hpp	/^class PopupMessage : public PaintWindow$/;"	c
PopupMessagePosition	src/UISettings.hpp	/^  enum class PopupMessagePosition : uint8_t {$/;"	c	struct:UISettings
PopupNearestWaypointDetails	src/Dialogs/Waypoint/NearestWaypoint.cpp	/^PopupNearestWaypointDetails(const Waypoints &way_points,$/;"	f
PopupOperationEnvironment	src/Operation/PopupOperationEnvironment.hpp	/^class PopupOperationEnvironment : public QuietOperationEnvironment {$/;"	c
Port	src/Device/Port/Port.cpp	/^Port::Port(PortListener *_listener, DataHandler &_handler)$/;"	f	class:Port
Port	src/Device/Port/Port.hpp	/^class Port {$/;"	c
Port	src/Dialogs/Device/DeviceEditWidget.cpp	/^  Port, BaudRate, BulkBaudRate,$/;"	e	enum:ControlIndex	file:
PortBridge	src/Android/PortBridge.cpp	/^PortBridge::PortBridge(JNIEnv *env, jobject obj)$/;"	f	class:PortBridge
PortBridge	src/Android/PortBridge.hpp	/^class PortBridge : protected Java::GlobalObject {$/;"	c
PortLineHandler	src/Device/Util/LineHandler.hpp	/^class PortLineHandler {$/;"	c
PortLineSplitter	src/Device/Util/LineSplitter.hpp	/^class PortLineSplitter : public DataHandler, protected PortLineHandler {$/;"	c
PortListener	src/Device/Port/Listener.hpp	/^class PortListener {$/;"	c
PortNMEAReader	src/Device/Util/NMEAReader.hpp	/^  PortNMEAReader(Port &_port, OperationEnvironment &_env)$/;"	f	class:PortNMEAReader
PortNMEAReader	src/Device/Util/NMEAReader.hpp	/^class PortNMEAReader {$/;"	c
PortState	src/Device/Port/State.hpp	/^enum class PortState {$/;"	c
PortTerminalBridge	src/Dialogs/Device/PortMonitor.cpp	/^  PortTerminalBridge(TerminalWindow &_terminal)$/;"	f	class:final
PortType	src/Device/Config.hpp	/^  enum class PortType : uint8_t {$/;"	c	struct:DeviceConfig
PortTypeToString	src/Profile/DeviceConfig.cpp	/^PortTypeToString(DeviceConfig::PortType type)$/;"	f	file:
PortWriteNMEA	src/Device/Util/NMEAWriter.cpp	/^PortWriteNMEA(Port &port, const char *line, OperationEnvironment &env)$/;"	f
PortWriteNMEANoChecksum	src/Device/Driver/CaiLNav.cpp	/^PortWriteNMEANoChecksum(Port &port, const char *line,$/;"	f	file:
Pos	src/Renderer/WaypointLabelList.hpp	/^    PixelPoint Pos;$/;"	m	struct:WaypointLabelList::Label
Position	src/Device/Driver/LX/LXN.hpp	/^  struct Position {$/;"	s	namespace:LXN
Position	src/ui/event/poll/linux/Input.hpp	/^  typedef IntPoint2D Position;$/;"	t	class:UI::final
Power	src/Hardware/Battery.cpp	/^namespace Power$/;"	n	file:
Power	src/Hardware/Battery.hpp	/^namespace Power$/;"	n
PowerOff	src/Device/Driver/CAI302/Manage.cpp	/^CAI302Device::PowerOff(OperationEnvironment &env)$/;"	f	class:CAI302Device
PowerOff	src/Device/Driver/CAI302/Protocol.cpp	/^CAI302::PowerOff(Port &port, OperationEnvironment &env)$/;"	f	class:CAI302
PowerState	src/Hardware/VideoPower.h	/^  ULONG PowerState;$/;"	m	struct:VIDEO_POWER_MANAGEMENT
PreTakeoffBuffer	src/Logger/LoggerImpl.hpp	/^  struct PreTakeoffBuffer$/;"	s	class:LoggerImpl
PredictContest	src/Profile/ProfileKeys.cpp	/^const char PredictContest[] = "PredictContest";$/;"	m	namespace:ProfileKeys	file:
PredictWindDrift	src/Dialogs/Settings/Panels/GlideComputerConfigPanel.cpp	/^  PredictWindDrift,$/;"	e	enum:ControlIndex	file:
PredictWindDrift	src/Profile/ProfileKeys.cpp	/^const char PredictWindDrift[] = "PredictWindDrift";$/;"	m	namespace:ProfileKeys	file:
Predicted	src/Computer/TaskComputer.cpp	/^Predicted(const ContestSettings &settings,$/;"	f	file:
PrefixDataField	src/Form/DataField/Prefix.hpp	/^  PrefixDataField(const TCHAR *value,$/;"	f	class:final
PrefixDataField	src/Form/DataField/Prefix.hpp	/^  PrefixDataField(const TCHAR *value=_T(""),$/;"	f	class:final
Prepare	src/Renderer/OZRenderer.cpp	/^OZRenderer::Prepare(Canvas &canvas, Layer layer, int offset) const$/;"	f	class:OZRenderer
Prepare	src/Renderer/TrailRenderer.cpp	/^TrailRenderer::Prepare(unsigned n)$/;"	f	class:TrailRenderer
Prepare	src/Widget/ManagedWidget.cpp	/^ManagedWidget::Prepare()$/;"	f	class:ManagedWidget
PrepareColorTable	src/Terrain/RasterRenderer.cpp	/^RasterRenderer::PrepareColorTable(const ColorRamp *color_ramp, bool do_water,$/;"	f	class:RasterRenderer
PrepareColoredAlphaTexture	src/ui/canvas/opengl/Canvas.cpp	/^PrepareColoredAlphaTexture(Color color)$/;"	f	file:
PrepareFill	src/Renderer/AirspacePreviewRenderer.cpp	/^AirspacePreviewRenderer::PrepareFill($/;"	f	class:AirspacePreviewRenderer
PrepareFrameHeader	src/Device/Driver/FLARM/BinaryProtocol.cpp	/^FLARM::PrepareFrameHeader(unsigned sequence_number, MessageType message_type,$/;"	f	class:FLARM
PrepareFrameHeader	src/Device/Driver/FLARM/BinaryProtocol.cpp	/^FlarmDevice::PrepareFrameHeader(FLARM::MessageType message_type,$/;"	f	class:FlarmDevice
PrepareOutline	src/Renderer/AirspacePreviewRenderer.cpp	/^AirspacePreviewRenderer::PrepareOutline($/;"	f	class:AirspacePreviewRenderer
PrepareSize	src/Widget/KeyboardWidget.cpp	/^KeyboardWidget::PrepareSize(const PixelRect &rc)$/;"	f	class:KeyboardWidget
PrepareWidget	src/Dialogs/WidgetDialog.hpp	/^  void PrepareWidget() {$/;"	f	class:WidgetDialog
PresetCheck	src/Dialogs/Settings/Panels/UnitsConfigPanel.cpp	/^UnitsConfigPanel::PresetCheck()$/;"	f	class:UnitsConfigPanel
Presets	src/Units/UnitsStore.cpp	/^static constexpr UnitStoreItem Presets[] =$/;"	v	file:
PressureAltitudeToQNHAltitude	src/Atmosphere/Pressure.cpp	/^AtmosphericPressure::PressureAltitudeToQNHAltitude(const double alt) const$/;"	f	class:AtmosphericPressure
PressureAltitudeToStaticPressure	src/Atmosphere/Pressure.cpp	/^AtmosphericPressure::PressureAltitudeToStaticPressure(const double alt)$/;"	f	class:AtmosphericPressure
PressureUnit	src/Dialogs/Device/CAI302/UnitsEditor.hpp	/^    PressureUnit,$/;"	e	enum:final::Controls
PressureUnitsValue	src/Profile/ProfileKeys.cpp	/^const char PressureUnitsValue[] = "Pressure";$/;"	m	namespace:ProfileKeys	file:
PressureUsage	src/Dialogs/Device/DeviceEditWidget.cpp	/^  I2CBus, I2CAddr, PressureUsage, Driver, UseSecondDriver, SecondDriver,$/;"	e	enum:ControlIndex	file:
PressureUse	src/Device/Config.hpp	/^  enum class PressureUse : unsigned {$/;"	c	struct:DeviceConfig
Prev	src/PageActions.cpp	/^PageActions::Prev()$/;"	f	class:PageActions
PrevIndex	src/PageActions.cpp	/^PageActions::PrevIndex()$/;"	f	class:PageActions
PrevTarget	src/Gauge/FlarmTrafficWindow.cpp	/^FlarmTrafficWindow::PrevTarget()$/;"	f	class:FlarmTrafficWindow
PreviousCircular	src/Geo/SearchPointVector.cpp	/^SearchPointVector::PreviousCircular(const_iterator i) const$/;"	f	class:SearchPointVector
PreviousPage	src/Widget/TabWidget.cpp	/^TabWidget::PreviousPage()$/;"	f	class:TabWidget
PreviousRightColumn	src/Renderer/TextRowRenderer.cpp	/^TextRowRenderer::PreviousRightColumn(Canvas &canvas, const PixelRect &rc,$/;"	f	class:TextRowRenderer
PreviousTraffic	src/FLARM/List.hpp	/^  const FlarmTraffic *PreviousTraffic(const FlarmTraffic *t) const {$/;"	f	struct:TrafficList
Priv	src/Dialogs/Device/FLARM/ConfigWidget.hpp	/^    Priv,$/;"	e	enum:final::Controls
Private	src/Interface.hpp	/^  namespace Private {$/;"	n	namespace:CommonInterface
Process	src/BatteryTimer.cpp	/^BatteryTimer::Process()$/;"	f	class:BatteryTimer
Process	src/Computer/AutoQNH.cpp	/^AutoQNH::Process(const NMEAInfo &basic, DerivedInfo &calculated,$/;"	f	class:AutoQNH
Process	src/Computer/ThermalLocator.cpp	/^ThermalLocator::Process(const bool circling, const double time,$/;"	f	class:ThermalLocator
Process	src/Device/Simulator.cpp	/^Simulator::Process(NMEAInfo &basic)$/;"	f	class:Simulator
Process	src/FLARM/FlarmComputer.cpp	/^FlarmComputer::Process(FlarmData &flarm, const FlarmData &last_flarm,$/;"	f	class:FlarmComputer
Process	src/MergeThread.cpp	/^MergeThread::Process()$/;"	f	class:MergeThread
Process512	src/util/MD5.cpp	/^MD5::Process512(const uint8_t *s512in)$/;"	f	class:MD5
ProcessAutoBugs	src/ProcessTimer.cpp	/^ProcessAutoBugs()$/;"	f	file:
ProcessAutoTask	src/Computer/TaskComputer.cpp	/^TaskComputer::ProcessAutoTask(const NMEAInfo &basic,$/;"	f	class:TaskComputer
ProcessBasic	src/Computer/GlideComputerAirData.cpp	/^GlideComputerAirData::ProcessBasic(const MoreData &basic,$/;"	f	class:GlideComputerAirData
ProcessBasicTask	src/Computer/TaskComputer.cpp	/^TaskComputer::ProcessBasicTask(const MoreData &basic,$/;"	f	class:TaskComputer
ProcessClimbEvents	src/Computer/StatsComputer.cpp	/^StatsComputer::ProcessClimbEvents(const DerivedInfo &calculated)$/;"	f	class:StatsComputer
ProcessComment	src/Terrain/Loader.cpp	/^TerrainLoader::ProcessComment(const char *data, unsigned size)$/;"	f	class:TerrainLoader
ProcessEvent	src/Input/InputEvents.cpp	/^InputEvents::ProcessEvent(unsigned event_id)$/;"	f	class:InputEvents
ProcessExhaustive	src/Computer/GlideComputer.hpp	/^  void ProcessExhaustive() {$/;"	f	class:GlideComputer
ProcessGPS	src/Computer/GlideComputer.cpp	/^GlideComputer::ProcessGPS(bool force)$/;"	f	class:GlideComputer
ProcessIdle	src/Computer/GlideComputer.cpp	/^GlideComputer::ProcessIdle(bool exhaustive)$/;"	f	class:GlideComputer
ProcessIdle	src/Computer/TaskComputer.cpp	/^TaskComputer::ProcessIdle(const MoreData &basic, DerivedInfo &calculated,$/;"	f	class:TaskComputer
ProcessKey	src/Input/InputEvents.cpp	/^InputEvents::ProcessKey(Mode mode, unsigned key_code)$/;"	f	class:InputEvents
ProcessMenuTimer	src/Input/InputEvents.cpp	/^InputEvents::ProcessMenuTimer()$/;"	f	class:InputEvents
ProcessMoreTask	src/Computer/TaskComputer.cpp	/^TaskComputer::ProcessMoreTask(const MoreData &basic,$/;"	f	class:TaskComputer
ProcessRoute	src/Computer/RouteComputer.cpp	/^RouteComputer::ProcessRoute(const MoreData &basic, DerivedInfo &calculated,$/;"	f	class:RouteComputer
ProcessSimulation	src/Blackboard/DeviceBlackboard.cpp	/^DeviceBlackboard::ProcessSimulation()$/;"	f	class:DeviceBlackboard
ProcessSun	src/Computer/GlideComputerAirData.cpp	/^GlideComputerAirData::ProcessSun(const NMEAInfo &basic,$/;"	f	class:GlideComputerAirData
ProcessTimer	src/InfoBoxes/InfoBoxManager.cpp	/^InfoBoxManager::ProcessTimer()$/;"	f	class:InfoBoxManager
ProcessTimer	src/Input/InputEvents.cpp	/^InputEvents::ProcessTimer()$/;"	f	class:InputEvents
ProcessTimer	src/ProcessTimer.cpp	/^ProcessTimer()$/;"	f
ProcessVertical	src/Computer/GlideComputerAirData.cpp	/^GlideComputerAirData::ProcessVertical(const MoreData &basic,$/;"	f	class:GlideComputerAirData
Profile	src/Profile/AirspaceConfig.hpp	/^namespace Profile$/;"	n
Profile	src/Profile/ComputerProfile.cpp	/^namespace Profile {$/;"	n	file:
Profile	src/Profile/ComputerProfile.hpp	/^namespace Profile {$/;"	n
Profile	src/Profile/ContestProfile.hpp	/^namespace Profile {$/;"	n
Profile	src/Profile/Current.cpp	/^namespace Profile {$/;"	n	file:
Profile	src/Profile/Current.hpp	/^namespace Profile {$/;"	n
Profile	src/Profile/DeviceConfig.hpp	/^namespace Profile$/;"	n
Profile	src/Profile/File.hpp	/^namespace Profile {$/;"	n
Profile	src/Profile/FlarmProfile.hpp	/^namespace Profile$/;"	n
Profile	src/Profile/InfoBoxConfig.hpp	/^namespace Profile$/;"	n
Profile	src/Profile/MapProfile.hpp	/^namespace Profile {$/;"	n
Profile	src/Profile/PageProfile.hpp	/^namespace Profile {$/;"	n
Profile	src/Profile/Profile.hpp	/^namespace Profile$/;"	n
Profile	src/Profile/ProfileMap.hpp	/^namespace Profile {$/;"	n
Profile	src/Profile/RouteProfile.hpp	/^namespace Profile {$/;"	n
Profile	src/Profile/Settings.hpp	/^namespace Profile$/;"	n
Profile	src/Profile/SystemProfile.hpp	/^namespace Profile {$/;"	n
Profile	src/Profile/TaskProfile.cpp	/^namespace Profile {$/;"	n	file:
Profile	src/Profile/TaskProfile.hpp	/^namespace Profile {$/;"	n
Profile	src/Profile/TerrainConfig.hpp	/^namespace Profile$/;"	n
Profile	src/Profile/TrackingProfile.cpp	/^namespace Profile {$/;"	n	file:
Profile	src/Profile/TrackingProfile.hpp	/^namespace Profile {$/;"	n
Profile	src/Profile/UIProfile.cpp	/^namespace Profile {$/;"	n	file:
Profile	src/Profile/UIProfile.hpp	/^namespace Profile {$/;"	n
Profile	src/Profile/UnitsConfig.hpp	/^namespace Profile$/;"	n
Profile	src/Profile/WeatherProfile.cpp	/^namespace Profile {$/;"	n	file:
Profile	src/Profile/WeatherProfile.hpp	/^namespace Profile {$/;"	n
ProfileFileHasPassword	src/Dialogs/ProfilePasswordDialog.cpp	/^ProfileFileHasPassword(Path path)$/;"	f
ProfileFileVisitor	src/Dialogs/ProfileListDialog.cpp	/^    ProfileFileVisitor(std::vector<ListItem> &_list):list(_list) {}$/;"	f	class:final::ProfileFileVisitor
ProfileFileVisitor	src/Dialogs/ProfileListDialog.cpp	/^  class ProfileFileVisitor: public File::Visitor$/;"	c	class:final	file:
ProfileKeys	src/Profile/ProfileKeys.cpp	/^namespace ProfileKeys {$/;"	n	file:
ProfileKeys	src/Profile/ProfileKeys.hpp	/^namespace ProfileKeys {$/;"	n
ProfileListDialog	src/Dialogs/ProfileListDialog.cpp	/^ProfileListDialog()$/;"	f
ProfileListWidget	src/Dialogs/ProfileListDialog.cpp	/^  ProfileListWidget(bool _select):select(_select) {}$/;"	f	class:final
ProfileMap	src/Profile/Map.hpp	/^  ProfileMap():modified(false) {}$/;"	f	class:ProfileMap
ProfileMap	src/Profile/Map.hpp	/^class ProfileMap : public std::map<std::string, std::string> {$/;"	c
ProfilePasswordResult	src/Dialogs/ProfilePasswordDialog.hpp	/^enum class ProfilePasswordResult {$/;"	c
ProgressBar	src/Screen/ProgressBar.hpp	/^class ProgressBar : public PaintWindow {$/;"	c
ProgressDialog	src/Dialogs/ProgressDialog.cpp	/^ProgressDialog::ProgressDialog(SingleWindow &parent,$/;"	f	class:ProgressDialog
ProgressDialog	src/Dialogs/ProgressDialog.hpp	/^class ProgressDialog$/;"	c
ProgressGlue	src/ProgressGlue.hpp	/^namespace ProgressGlue {$/;"	n
ProgressWindow	src/ProgressWindow.cpp	/^ProgressWindow::ProgressWindow(ContainerWindow &parent)$/;"	f	class:ProgressWindow
ProgressWindow	src/ProgressWindow.hpp	/^class ProgressWindow : public ContainerWindow {$/;"	c
Project	src/Engine/Airspace/AbstractAirspace.cpp	/^AbstractAirspace::Project(const FlatProjection &projection)$/;"	f	class:AbstractAirspace
Project	src/Engine/Waypoint/Waypoint.cpp	/^Waypoint::Project(const FlatProjection &projection)$/;"	f	class:Waypoint
Project	src/Geo/Flat/FlatProjection.cpp	/^FlatProjection::Project(const GeoBounds &bb) const$/;"	f	class:FlatProjection
Project	src/Geo/SearchPoint.cpp	/^SearchPoint::Project(const FlatProjection &tp)$/;"	f	class:SearchPoint
Project	src/Geo/SearchPointVector.cpp	/^SearchPointVector::Project(const FlatProjection &tp)$/;"	f	class:SearchPointVector
Project	src/Math/Line2D.hpp	/^  constexpr Point Project(Point p) const {$/;"	f	struct:Line2D
ProjectCoarse	src/Terrain/RasterProjection.hpp	/^  constexpr SignedRasterLocation ProjectCoarse(GeoPoint location) const {$/;"	f	class:RasterProjection
ProjectCoarseRound	src/Terrain/RasterProjection.hpp	/^  constexpr SignedRasterLocation ProjectCoarseRound(GeoPoint location) const {$/;"	f	class:RasterProjection
ProjectFine	src/Terrain/RasterProjection.hpp	/^  constexpr SignedRasterLocation ProjectFine(GeoPoint location) const {$/;"	f	class:RasterProjection
ProjectFloat	src/Geo/Flat/FlatProjection.cpp	/^FlatProjection::ProjectFloat(const GeoPoint &tp) const$/;"	f	class:FlatProjection
ProjectInteger	src/Geo/Flat/FlatProjection.cpp	/^FlatProjection::ProjectInteger(const GeoPoint &tp) const$/;"	f	class:FlatProjection
ProjectRange	src/Engine/Trace/Trace.hpp	/^  unsigned ProjectRange(const GeoPoint &location, double distance) const {$/;"	f	class:Trace
ProjectRangeFloat	src/Geo/Flat/FlatProjection.cpp	/^FlatProjection::ProjectRangeFloat(const GeoPoint &tp,$/;"	f	class:FlatProjection
ProjectRangeInteger	src/Geo/Flat/FlatProjection.cpp	/^FlatProjection::ProjectRangeInteger(const GeoPoint &tp,$/;"	f	class:FlatProjection
ProjectSquare	src/Geo/Flat/FlatProjection.cpp	/^FlatProjection::ProjectSquare(const GeoPoint center, double radius) const$/;"	f	class:FlatProjection
ProjectedDistance	src/Geo/GeoPoint.cpp	/^GeoPoint::ProjectedDistance(const GeoPoint &from,$/;"	f	class:GeoPoint
ProjectedFan	src/MapWindow/MapWindowGlideRange.cpp	/^  ProjectedFan(unsigned n):size(n) {$/;"	f	struct:ProjectedFan
ProjectedFan	src/MapWindow/MapWindowGlideRange.cpp	/^struct ProjectedFan {$/;"	s	file:
ProjectedFanVector	src/MapWindow/MapWindowGlideRange.cpp	/^  typedef StaticArray<ProjectedFan, FlatTriangleFanTree::REACH_MAX_FANS> ProjectedFanVector;$/;"	t	struct:ProjectedFans	file:
ProjectedFanVector	src/MapWindow/MapWindowGlideRange.cpp	/^typedef StaticArray<ProjectedFan, FlatTriangleFanTree::REACH_MAX_FANS> ProjectedFanVector;$/;"	t	file:
ProjectedFans	src/MapWindow/MapWindowGlideRange.cpp	/^  ProjectedFans()$/;"	f	struct:ProjectedFans
ProjectedFans	src/MapWindow/MapWindowGlideRange.cpp	/^struct ProjectedFans {$/;"	s	file:
ProjectedRatio	src/Math/Line2D.hpp	/^  constexpr double ProjectedRatio(Point p) const {$/;"	f	struct:Line2D
Projection	src/Projection/Projection.hpp	/^class Projection$/;"	c
PropagateOrderedTaskSettings	src/Engine/Task/Ordered/OrderedTask.cpp	/^OrderedTask::PropagateOrderedTaskSettings()$/;"	f	class:OrderedTask
PropertiesTab	src/Dialogs/Task/Manager/Internal.hpp	/^    PropertiesTab,$/;"	e	enum:final::Tabs
PropertySetGet	src/Device/Driver/AltairPro.cpp	/^AltairProDevice::PropertySetGet(TCHAR *s, size_t size,$/;"	f	class:AltairProDevice
PropertySetGet	src/Device/Driver/AltairPro.cpp	/^AltairProDevice::PropertySetGet(char *Buffer, size_t size,$/;"	f	class:AltairProDevice
ProtectedAirspaceWarningManager	src/Airspace/ProtectedAirspaceWarningManager.hpp	/^  ProtectedAirspaceWarningManager(AirspaceWarningManager &awm):$/;"	f	class:ProtectedAirspaceWarningManager
ProtectedAirspaceWarningManager	src/Airspace/ProtectedAirspaceWarningManager.hpp	/^class ProtectedAirspaceWarningManager : public Guard<AirspaceWarningManager> {$/;"	c
ProtectedRoutePlanner	src/Task/ProtectedRoutePlanner.hpp	/^  ProtectedRoutePlanner(RoutePlannerGlue &route, const Airspaces &_airspaces,$/;"	f	class:ProtectedRoutePlanner
ProtectedRoutePlanner	src/Task/ProtectedRoutePlanner.hpp	/^class ProtectedRoutePlanner: public Guard<RoutePlannerGlue>$/;"	c
ProtectedTaskManager	src/Task/ProtectedTaskManager.cpp	/^ProtectedTaskManager::ProtectedTaskManager(TaskManager &_task_manager,$/;"	f	class:ProtectedTaskManager
ProtectedTaskManager	src/Task/ProtectedTaskManager.hpp	/^class ProtectedTaskManager: public Guard<TaskManager>$/;"	c
ProvideAutoMacCready	src/NMEA/Derived.hpp	/^  void ProvideAutoMacCready(double clock, double mc) {$/;"	f	struct:DerivedInfo
ProvideBallastFraction	src/NMEA/ExternalSettings.cpp	/^ExternalSettings::ProvideBallastFraction(double value, double time)$/;"	f	class:ExternalSettings
ProvideBallastOverload	src/NMEA/ExternalSettings.cpp	/^ExternalSettings::ProvideBallastOverload(double value, double time)$/;"	f	class:ExternalSettings
ProvideBaroAltitudeTrue	src/NMEA/Info.hpp	/^  void ProvideBaroAltitudeTrue(double value) {$/;"	f	struct:NMEAInfo
ProvideBothAirspeeds	src/NMEA/Info.hpp	/^  void ProvideBothAirspeeds(double as) {$/;"	f	struct:NMEAInfo
ProvideBothAirspeeds	src/NMEA/Info.hpp	/^  void ProvideBothAirspeeds(double ias, double tas) {$/;"	f	struct:NMEAInfo
ProvideBugs	src/NMEA/ExternalSettings.cpp	/^ExternalSettings::ProvideBugs(double value, double time)$/;"	f	class:ExternalSettings
ProvideDate	src/NMEA/Info.cpp	/^NMEAInfo::ProvideDate(const BrokenDate &date)$/;"	f	class:NMEAInfo
ProvideDynamicPressure	src/NMEA/Info.hpp	/^  void ProvideDynamicPressure(AtmosphericPressure value) {$/;"	f	struct:NMEAInfo
ProvideExternalWind	src/NMEA/Info.hpp	/^  void ProvideExternalWind(const SpeedVector &value) {$/;"	f	struct:NMEAInfo
ProvideGLoad	src/NMEA/Acceleration.hpp	/^  void ProvideGLoad(double _g_load, bool _real) {$/;"	f	struct:AccelerationState
ProvideIndicatedAirspeed	src/NMEA/Info.cpp	/^NMEAInfo::ProvideIndicatedAirspeed(double ias)$/;"	f	class:NMEAInfo
ProvideIndicatedAirspeedWithAltitude	src/NMEA/Info.cpp	/^NMEAInfo::ProvideIndicatedAirspeedWithAltitude(double ias, double altitude)$/;"	f	class:NMEAInfo
ProvideMacCready	src/NMEA/ExternalSettings.cpp	/^ExternalSettings::ProvideMacCready(double value, double time)$/;"	f	class:ExternalSettings
ProvideNettoVario	src/NMEA/Info.hpp	/^  void ProvideNettoVario(double value) {$/;"	f	struct:NMEAInfo
ProvideNoncompVario	src/NMEA/Info.hpp	/^  void ProvideNoncompVario(double value) {$/;"	f	struct:NMEAInfo
ProvidePitotPressure	src/NMEA/Info.hpp	/^  void ProvidePitotPressure(AtmosphericPressure value) {$/;"	f	struct:NMEAInfo
ProvidePressureAltitude	src/NMEA/Info.hpp	/^  void ProvidePressureAltitude(double value) {$/;"	f	struct:NMEAInfo
ProvideQNH	src/NMEA/ExternalSettings.cpp	/^ExternalSettings::ProvideQNH(AtmosphericPressure value, double time)$/;"	f	class:ExternalSettings
ProvideSensorCalibration	src/NMEA/Info.hpp	/^  void ProvideSensorCalibration(double value, double offset) {$/;"	f	struct:NMEAInfo
ProvideStaticPressure	src/NMEA/Info.hpp	/^  void ProvideStaticPressure(AtmosphericPressure value) {$/;"	f	struct:NMEAInfo
ProvideTime	src/NMEA/Info.cpp	/^NMEAInfo::ProvideTime(double _time)$/;"	f	class:NMEAInfo
ProvideTotalEnergyVario	src/NMEA/Info.hpp	/^  void ProvideTotalEnergyVario(double value) {$/;"	f	struct:NMEAInfo
ProvideTrueAirspeed	src/NMEA/Info.cpp	/^NMEAInfo::ProvideTrueAirspeed(double tas)$/;"	f	class:NMEAInfo
ProvideTrueAirspeedWithAltitude	src/NMEA/Info.cpp	/^NMEAInfo::ProvideTrueAirspeedWithAltitude(double tas, double altitude)$/;"	f	class:NMEAInfo
ProvideVolume	src/NMEA/ExternalSettings.cpp	/^ExternalSettings::ProvideVolume(unsigned value, double time)$/;"	f	class:ExternalSettings
ProvideWeakBaroAltitude	src/NMEA/Info.hpp	/^  void ProvideWeakBaroAltitude(double value) {$/;"	f	struct:NMEAInfo
ProvideWeakPressureAltitude	src/NMEA/Info.hpp	/^  void ProvideWeakPressureAltitude(double value) {$/;"	f	struct:NMEAInfo
ProvideWingLoading	src/NMEA/ExternalSettings.cpp	/^ExternalSettings::ProvideWingLoading(double value, double time)$/;"	f	class:ExternalSettings
ProxyBlackboardListener	src/Blackboard/ProxyBlackboardListener.hpp	/^  ProxyBlackboardListener(BlackboardListener &_next):next(_next) {}$/;"	f	class:ProxyBlackboardListener
ProxyBlackboardListener	src/Blackboard/ProxyBlackboardListener.hpp	/^class ProxyBlackboardListener : public BlackboardListener {$/;"	c
ProxyOperationEnvironment	src/Operation/NoCancelOperationEnvironment.hpp	/^    :ProxyOperationEnvironment(_other) {}$/;"	f	class:NoCancelOperationEnvironment
ProxyOperationEnvironment	src/Operation/ProxyOperationEnvironment.hpp	/^class ProxyOperationEnvironment : public OperationEnvironment {$/;"	c
PruneInterior	src/Geo/ConvexHull/GrahamScan.cpp	/^GrahamScan::PruneInterior()$/;"	f	class:GrahamScan
PruneInterior	src/Geo/SearchPointVector.cpp	/^SearchPointVector::PruneInterior()$/;"	f	class:SearchPointVector
PublishPolarSettings	src/Dialogs/Settings/dlgBasicSettings.cpp	/^  void PublishPolarSettings() {$/;"	f	class:final
Purge	src/ui/event/android/Queue.cpp	/^EventQueue::Purge(Event::Callback callback, void *ctx)$/;"	f	class:UI::EventQueue
Purge	src/ui/event/android/Queue.cpp	/^EventQueue::Purge(Event::Type type)$/;"	f	class:UI::EventQueue
Purge	src/ui/event/android/Queue.cpp	/^EventQueue::Purge(bool (*match)(const Event &event, void *ctx), void *ctx)$/;"	f	class:UI::EventQueue
Purge	src/ui/event/poll/Queue.cpp	/^EventQueue::Purge(Event::Callback callback, void *ctx)$/;"	f	class:UI::EventQueue
Purge	src/ui/event/poll/Queue.cpp	/^EventQueue::Purge(Event::Type type)$/;"	f	class:UI::EventQueue
Purge	src/ui/event/poll/Queue.cpp	/^EventQueue::Purge(bool (*match)(const Event &event, void *ctx), void *ctx)$/;"	f	class:UI::EventQueue
Purge	src/ui/event/sdl/Queue.cpp	/^EventQueue::Purge(EventLoop::Callback callback, void *ctx)$/;"	f	class:UI::EventQueue
Purge	src/ui/event/sdl/Queue.cpp	/^EventQueue::Purge(Uint32 event,$/;"	f	class:UI::EventQueue
Push	src/Tracking/SkyLines/Queue.hpp	/^  void Push(const FixPacket &packet) {$/;"	f	class:SkyLinesTracking::Queue
Push	src/lua/Geo.cpp	/^void Push(lua_State *L, Angle value) {$/;"	f	namespace:Lua
Push	src/lua/Geo.cpp	/^void Push(lua_State *L, GeoPoint value) {$/;"	f	namespace:Lua
Push	src/lua/Util.hxx	/^Push(lua_State *L, _Lambda<T> l)$/;"	f	struct:Lua::StackIndex::LightUserData
Push	src/lua/Util.hxx	/^Push(lua_State *L, const std::tuple<T...> &t)$/;"	f	struct:Lua::StackIndex::LightUserData
Push	src/lua/Value.hxx	/^	void Push() const {$/;"	f	class:Lua::Value
Push	src/lua/Value.hxx	/^Push(lua_State *, const Value &value)$/;"	f	namespace:Lua
Push	src/ui/event/android/Queue.cpp	/^EventQueue::Push(const Event &event)$/;"	f	class:UI::EventQueue
Push	src/ui/event/android/Queue.hpp	/^  void Push(Event::Callback callback, void *ctx) {$/;"	f	class:UI::EventQueue
Push	src/ui/event/poll/Queue.cpp	/^EventQueue::Push(const Event &event)$/;"	f	class:UI::EventQueue
Push	src/ui/event/poll/Queue.hpp	/^  void Push(Event::Callback callback, void *ctx) {$/;"	f	class:DisplayOrientation::final
Push	src/ui/event/poll/WaylandQueue.cpp	/^WaylandEventQueue::Push(const Event &event)$/;"	f	class:UI::WaylandEventQueue
Push	src/ui/event/sdl/Queue.cpp	/^EventQueue::Push(EventLoop::Callback callback, void *ctx)$/;"	f	class:UI::EventQueue
PushKeyPress	src/ui/event/poll/Queue.cpp	/^EventQueue::PushKeyPress(unsigned key_code)$/;"	f	class:UI::EventQueue
PushOptional	src/lua/Blackboard.cpp	/^static void PushOptional(lua_State *L, bool available, V &&value) {$/;"	f	namespace:Lua
PushTable	src/lua/InputEvent.cpp	/^  bool PushTable() {$/;"	f	class:final	file:
PushTuple	src/lua/Util.hxx	/^	static void PushTuple(lua_State *, const T &) {$/;"	f	struct:Lua::StackIndex::LightUserData::_PushTuple
PushTuple	src/lua/Util.hxx	/^	static void PushTuple(lua_State *L, const T &t) {$/;"	f	struct:Lua::StackIndex::LightUserData::_PushTuple
Put	src/Device/Driver/ATR833.cpp	/^  void Put(uint8_t byte) {$/;"	f	class:ATRBuffer
Put	src/util/Cache.hxx	/^	void Put(K &&key, U &&data) {$/;"	f	class:Cache
PutActiveFrequency	src/Device/Descriptor.cpp	/^DeviceDescriptor::PutActiveFrequency(RadioFrequency frequency,$/;"	f	class:DeviceDescriptor
PutActiveFrequency	src/Device/Driver.cpp	/^AbstractDevice::PutActiveFrequency(RadioFrequency frequency,$/;"	f	class:AbstractDevice
PutActiveFrequency	src/Device/Driver/ATR833.cpp	/^ATR833Device::PutActiveFrequency(RadioFrequency frequency,$/;"	f	class:ATR833Device
PutActiveFrequency	src/Device/Driver/KRT2.cpp	/^KRT2Device::PutActiveFrequency(RadioFrequency frequency,$/;"	f	class:KRT2Device
PutActiveFrequency	src/Device/Driver/XCOM760.cpp	/^XCOM760Device::PutActiveFrequency(RadioFrequency frequency,$/;"	f	class:XCOM760Device
PutActiveFrequency	src/Device/MultipleDevices.cpp	/^MultipleDevices::PutActiveFrequency(RadioFrequency frequency,$/;"	f	class:MultipleDevices
PutBallast	src/Device/Descriptor.cpp	/^DeviceDescriptor::PutBallast(double fraction, double overload,$/;"	f	class:DeviceDescriptor
PutBallast	src/Device/Driver.cpp	/^AbstractDevice::PutBallast(double fraction, double overload,$/;"	f	class:AbstractDevice
PutBallast	src/Device/Driver/BorgeltB50.cpp	/^B50Device::PutBallast(double fraction, gcc_unused double overload,$/;"	f	class:B50Device
PutBallast	src/Device/Driver/CAI302/PocketNav.cpp	/^CAI302::PutBallast(Port &port, double fraction, OperationEnvironment &env)$/;"	f	class:CAI302
PutBallast	src/Device/Driver/CAI302/Settings.cpp	/^CAI302Device::PutBallast(double fraction, gcc_unused double overload,$/;"	f	class:CAI302Device
PutBallast	src/Device/Driver/LX/Settings.cpp	/^LXDevice::PutBallast(gcc_unused double fraction, double overload,$/;"	f	class:LXDevice
PutBallast	src/Device/Driver/OpenVario.cpp	/^OpenVarioDevice::PutBallast(double fraction, double overload, OperationEnvironment &env)$/;"	f	class:OpenVarioDevice
PutBallast	src/Device/Driver/Vaulter.cpp	/^VaulterDevice::PutBallast(double fraction, double overload, OperationEnvironment &env)$/;"	f	class:VaulterDevice
PutBallast	src/Device/Driver/XCVario.cpp	/^XVCDevice::PutBallast(double fraction, gcc_unused double overload,$/;"	f	class:XVCDevice
PutBallast	src/Device/MultipleDevices.cpp	/^MultipleDevices::PutBallast(double fraction, double overload,$/;"	f	class:MultipleDevices
PutBugs	src/Device/Descriptor.cpp	/^DeviceDescriptor::PutBugs(double value, OperationEnvironment &env)$/;"	f	class:DeviceDescriptor
PutBugs	src/Device/Driver.cpp	/^AbstractDevice::PutBugs(double bugs, OperationEnvironment &env)$/;"	f	class:AbstractDevice
PutBugs	src/Device/Driver/BorgeltB50.cpp	/^B50Device::PutBugs(double bugs, OperationEnvironment &env)$/;"	f	class:B50Device
PutBugs	src/Device/Driver/CAI302/PocketNav.cpp	/^CAI302::PutBugs(Port &port, double bugs, OperationEnvironment &env)$/;"	f	class:CAI302
PutBugs	src/Device/Driver/CAI302/Settings.cpp	/^CAI302Device::PutBugs(double Bugs, OperationEnvironment &env)$/;"	f	class:CAI302Device
PutBugs	src/Device/Driver/LX/Settings.cpp	/^LXDevice::PutBugs(double bugs, OperationEnvironment &env)$/;"	f	class:LXDevice
PutBugs	src/Device/Driver/OpenVario.cpp	/^OpenVarioDevice::PutBugs(double bugs, OperationEnvironment &env)$/;"	f	class:OpenVarioDevice
PutBugs	src/Device/Driver/Westerboer.cpp	/^WesterboerDevice::PutBugs(double _bugs, OperationEnvironment &env)$/;"	f	class:WesterboerDevice
PutBugs	src/Device/Driver/XCVario.cpp	/^XVCDevice::PutBugs(double bugs, OperationEnvironment &env)$/;"	f	class:XVCDevice
PutBugs	src/Device/MultipleDevices.cpp	/^MultipleDevices::PutBugs(double bugs, OperationEnvironment &env)$/;"	f	class:MultipleDevices
PutFrequency	src/Device/Driver/KRT2.cpp	/^KRT2Device::PutFrequency(char cmd,$/;"	f	class:KRT2Device
PutIdealPolar	src/Device/Driver/OpenVario.cpp	/^OpenVarioDevice::PutIdealPolar(const DerivedInfo &calculated,$/;"	f	class:OpenVarioDevice
PutMacCready	src/Device/Descriptor.cpp	/^DeviceDescriptor::PutMacCready(double value, OperationEnvironment &env)$/;"	f	class:DeviceDescriptor
PutMacCready	src/Device/Driver.cpp	/^AbstractDevice::PutMacCready(double MacCready, OperationEnvironment &env)$/;"	f	class:AbstractDevice
PutMacCready	src/Device/Driver/BorgeltB50.cpp	/^B50Device::PutMacCready(double mac_cready, OperationEnvironment &env)$/;"	f	class:B50Device
PutMacCready	src/Device/Driver/CAI302/PocketNav.cpp	/^CAI302::PutMacCready(Port &port, double mc, OperationEnvironment &env)$/;"	f	class:CAI302
PutMacCready	src/Device/Driver/CAI302/Settings.cpp	/^CAI302Device::PutMacCready(double MacCready, OperationEnvironment &env)$/;"	f	class:CAI302Device
PutMacCready	src/Device/Driver/LX/Settings.cpp	/^LXDevice::PutMacCready(double mac_cready, OperationEnvironment &env)$/;"	f	class:LXDevice
PutMacCready	src/Device/Driver/OpenVario.cpp	/^OpenVarioDevice::PutMacCready(double mc, OperationEnvironment &env)$/;"	f	class:OpenVarioDevice
PutMacCready	src/Device/Driver/Vaulter.cpp	/^VaulterDevice::PutMacCready(double mc, OperationEnvironment &env)$/;"	f	class:VaulterDevice
PutMacCready	src/Device/Driver/Vega/Settings.cpp	/^VegaDevice::PutMacCready(double _mc, OperationEnvironment &env)$/;"	f	class:VegaDevice
PutMacCready	src/Device/Driver/Westerboer.cpp	/^WesterboerDevice::PutMacCready(double _mac_cready, OperationEnvironment &env)$/;"	f	class:WesterboerDevice
PutMacCready	src/Device/Driver/XCVario.cpp	/^XVCDevice::PutMacCready(double mac_cready, OperationEnvironment &env)$/;"	f	class:XVCDevice
PutMacCready	src/Device/MultipleDevices.cpp	/^MultipleDevices::PutMacCready(double mac_cready, OperationEnvironment &env)$/;"	f	class:MultipleDevices
PutOrReplace	src/util/Cache.hxx	/^	void PutOrReplace(K &&key, U &&data) {$/;"	f	class:Cache
PutOverviewTile	src/Terrain/RasterTileCache.cpp	/^RasterTileCache::PutOverviewTile(unsigned index,$/;"	f	class:RasterTileCache
PutQNH	src/Device/Descriptor.cpp	/^DeviceDescriptor::PutQNH(const AtmosphericPressure &value,$/;"	f	class:DeviceDescriptor
PutQNH	src/Device/Driver.cpp	/^AbstractDevice::PutQNH(const AtmosphericPressure &pres,$/;"	f	class:AbstractDevice
PutQNH	src/Device/Driver/AirControlDisplay.cpp	/^ACDDevice::PutQNH(const AtmosphericPressure &pres, OperationEnvironment &env)$/;"	f	class:ACDDevice
PutQNH	src/Device/Driver/LX/Settings.cpp	/^LXDevice::PutQNH(const AtmosphericPressure &pres, OperationEnvironment &env)$/;"	f	class:LXDevice
PutQNH	src/Device/Driver/Vega/Settings.cpp	/^VegaDevice::PutQNH(const AtmosphericPressure& pres, OperationEnvironment &env)$/;"	f	class:VegaDevice
PutQNH	src/Device/MultipleDevices.cpp	/^MultipleDevices::PutQNH(const AtmosphericPressure &pres,$/;"	f	class:MultipleDevices
PutRealPolar	src/Device/Driver/OpenVario.cpp	/^OpenVarioDevice::PutRealPolar(const DerivedInfo &calculated,$/;"	f	class:OpenVarioDevice
PutStandbyFrequency	src/Device/Descriptor.cpp	/^DeviceDescriptor::PutStandbyFrequency(RadioFrequency frequency,$/;"	f	class:DeviceDescriptor
PutStandbyFrequency	src/Device/Driver.cpp	/^AbstractDevice::PutStandbyFrequency(RadioFrequency frequency,$/;"	f	class:AbstractDevice
PutStandbyFrequency	src/Device/Driver/ATR833.cpp	/^ATR833Device::PutStandbyFrequency(RadioFrequency frequency,$/;"	f	class:ATR833Device
PutStandbyFrequency	src/Device/Driver/AirControlDisplay.cpp	/^ACDDevice::PutStandbyFrequency(RadioFrequency frequency,$/;"	f	class:ACDDevice
PutStandbyFrequency	src/Device/Driver/KRT2.cpp	/^KRT2Device::PutStandbyFrequency(RadioFrequency frequency,$/;"	f	class:KRT2Device
PutStandbyFrequency	src/Device/Driver/XCOM760.cpp	/^XCOM760Device::PutStandbyFrequency(RadioFrequency frequency,$/;"	f	class:XCOM760Device
PutStandbyFrequency	src/Device/MultipleDevices.cpp	/^MultipleDevices::PutStandbyFrequency(RadioFrequency frequency,$/;"	f	class:MultipleDevices
PutTileData	src/Terrain/Loader.cpp	/^TerrainLoader::PutTileData(unsigned index,$/;"	f	class:TerrainLoader
PutTileData	src/Terrain/RasterTileCache.cpp	/^RasterTileCache::PutTileData(unsigned index,$/;"	f	class:RasterTileCache
PutTurnPoint	src/Device/Driver/AltairPro.cpp	/^AltairProDevice::PutTurnPoint(const TCHAR *propertyName,$/;"	f	class:AltairProDevice
PutVolume	src/Device/Descriptor.cpp	/^DeviceDescriptor::PutVolume(unsigned volume, OperationEnvironment &env)$/;"	f	class:DeviceDescriptor
PutVolume	src/Device/Driver.cpp	/^AbstractDevice::PutVolume(unsigned volume, OperationEnvironment &env)$/;"	f	class:AbstractDevice
PutVolume	src/Device/Driver/AirControlDisplay.cpp	/^ACDDevice::PutVolume(unsigned volume, OperationEnvironment &env)$/;"	f	class:ACDDevice
PutVolume	src/Device/Driver/LX/Settings.cpp	/^LXDevice::PutVolume(unsigned volume, OperationEnvironment &env)$/;"	f	class:LXDevice
PutVolume	src/Device/Driver/XCOM760.cpp	/^XCOM760Device::PutVolume(unsigned volume, OperationEnvironment &env)$/;"	f	class:XCOM760Device
PutVolume	src/Device/MultipleDevices.cpp	/^MultipleDevices::PutVolume(unsigned volume, OperationEnvironment &env)$/;"	f	class:MultipleDevices
QMFB_JOINBUFSIZE	src/Terrain/jasper/jpc/jpc_qmfb.c	94;"	d	file:
QMFB_SPLITBUFSIZE	src/Terrain/jasper/jpc/jpc_qmfb.c	93;"	d	file:
QNH	src/Dialogs/Settings/dlgBasicSettings.cpp	/^  QNH,$/;"	e	enum:ControlIndex	file:
QNHAltitudeToPressureAltitude	src/Atmosphere/Pressure.cpp	/^AtmosphericPressure::QNHAltitudeToPressureAltitude(const double alt) const$/;"	f	class:AtmosphericPressure
QNHAltitudeToStaticPressure	src/Atmosphere/Pressure.cpp	/^AtmosphericPressure::QNHAltitudeToStaticPressure(const double alt) const$/;"	f	class:AtmosphericPressure
QNHProcessTimer	src/ApplyExternalSettings.cpp	/^QNHProcessTimer()$/;"	f	file:
QNH_TIME	src/Computer/AutoQNH.hpp	/^  const unsigned QNH_TIME;$/;"	m	class:AutoQNH
QUADRATIC_HPP	src/Math/Quadratic.hpp	24;"	d
QUADRILATERAL_HPP	src/Math/Quadrilateral.hpp	24;"	d
QUAD_TREE_HXX	src/util/QuadTree.hxx	32;"	d
QUIT	src/Dialogs/SimulatorPromptWindow.hpp	/^    QUIT,$/;"	m	class:final::Result
QUOTE	src/Form/DigitEntry.hpp	/^      QUOTE,$/;"	m	class:CoordinateFormat::Column::Type
QuadBucket	src/util/QuadTree.hxx	/^	struct QuadBucket {$/;"	s
QuadTree	src/util/QuadTree.hxx	/^class QuadTree {$/;"	c
Quadratic	src/Math/Quadratic.hpp	/^class Quadratic {$/;"	c
QuarterCircle	src/Math/Angle.hpp	/^  static Angle QuarterCircle() {$/;"	f	class:Angle
QueryAll	src/Engine/Airspace/Airspaces.hpp	/^  const_iterator_range QueryAll() const {$/;"	f	class:Airspaces
QueryInside	src/Engine/Airspace/Airspaces.cpp	/^Airspaces::QueryInside(const AircraftState &aircraft) const$/;"	f	class:Airspaces
QueryInside	src/Engine/Airspace/Airspaces.cpp	/^Airspaces::QueryInside(const GeoPoint &loc) const$/;"	f	class:Airspaces
QueryIntersecting	src/Engine/Airspace/Airspaces.cpp	/^Airspaces::QueryIntersecting(const GeoPoint &a, const GeoPoint &b) const$/;"	f	class:Airspaces
QueryWithinRange	src/Cloud/Client.cpp	/^CloudClientContainer::QueryWithinRange(GeoPoint location, double range) const$/;"	f	class:CloudClientContainer
QueryWithinRange	src/Cloud/Thermal.cpp	/^CloudThermalContainer::QueryWithinRange(GeoPoint location, double range) const$/;"	f	class:CloudThermalContainer
QueryWithinRange	src/Engine/Airspace/Airspaces.cpp	/^Airspaces::QueryWithinRange(const GeoPoint &location, double range) const$/;"	f	class:Airspaces
QuestionWidget	src/Widget/QuestionWidget.hpp	/^class QuestionWidget : public SolidWidget {$/;"	c
Queue	src/Tracking/SkyLines/Queue.hpp	/^class Queue {$/;"	c	namespace:SkyLinesTracking
QuickMenu	src/Dialogs/dlgQuickMenu.cpp	/^  QuickMenu(WndForm &_dialog, const Menu &_menu)$/;"	f	class:final
QuickMenuButtonRenderer	src/Dialogs/dlgQuickMenu.cpp	/^  explicit QuickMenuButtonRenderer(const DialogLook &_look,$/;"	f	class:final
QuickRedraw	src/MapWindow/GlueMapWindow.cpp	/^GlueMapWindow::QuickRedraw()$/;"	f	class:GlueMapWindow
QuietOperationEnvironment	src/Operation/Operation.hpp	/^class QuietOperationEnvironment : public NullOperationEnvironment {$/;"	c
Quit	src/ui/event/android/Queue.hpp	/^  void Quit() {$/;"	f	class:UI::EventQueue
Quit	src/ui/event/sdl/Queue.hpp	/^  void Quit() {$/;"	f	class:UI::EventQueue
R1	src/Device/Driver/IMI/Protocol/Types.hpp	/^    IMIDWORD R1:18;$/;"	m	struct:IMI::TObservationZone
R2	src/Device/Driver/IMI/Protocol/Types.hpp	/^    IMIDWORD R2:18;$/;"	m	struct:IMI::TObservationZone
RACING	src/Engine/Task/Factory/TaskFactoryType.hpp	/^  RACING,$/;"	m	class:TaskFactoryType
RADIO	src/Dialogs/Traffic/FlarmTrafficDetails.cpp	/^    RADIO,$/;"	e	enum:final::Controls	file:
RADIUS	src/Dialogs/Task/Widgets/CylinderZoneEditWidget.cpp	/^  RADIUS,$/;"	e	enum:Controls	file:
RADIUS	src/Dialogs/Task/Widgets/KeyholeZoneEditWidget.cpp	/^  RADIUS,$/;"	e	enum:Controls	file:
RADIUS	src/Dialogs/Task/Widgets/SectorZoneEditWidget.cpp	/^  RADIUS,$/;"	e	enum:Controls	file:
RADIUS	src/Engine/Airspace/AbstractAirspace.cpp	219;"	d	file:
RADIX_TREE_HPP	src/util/RadixTree.hpp	31;"	d
RAD_TO_DEG	src/Math/Constants.hpp	/^static constexpr double RAD_TO_DEG = 57.2957795131;$/;"	v
RANGE	src/Dialogs/StatusPanels/TaskStatusPanel.cpp	/^  RANGE,$/;"	e	enum:Controls	file:
RANGE	src/Dialogs/Traffic/TeamCodeDialog.cpp	/^    RANGE,$/;"	e	enum:final::Controls	file:
RANGE_HPP	src/util/Range.hpp	31;"	d
RASP	src/MapWindow/Items/MapItem.hpp	/^    RASP,$/;"	e	enum:TaskPointType::Type
RASP_FILENAME	src/Weather/Rasp/RaspStore.hpp	38;"	d
RASP_FORMAT	src/Weather/Rasp/RaspStore.cpp	43;"	d	file:
RASTER_SLOPE_FACT	src/Terrain/RasterTileCache.hpp	38;"	d
RATE	src/Dialogs/ReplayDialog.cpp	/^    RATE,$/;"	e	enum:final::Controls	file:
RAW_GPS_DATA	src/Device/Driver.hpp	/^    RAW_GPS_DATA = 0x40,$/;"	e	enum:DeviceRegister::__anon158
REACHFAN_HPP	src/Engine/Route/ReachFan.hpp	24;"	d
REACHFAN_PARMS_HPP	src/Engine/Route/ReachFanParms.hpp	24;"	d
REACH_BUFFER	src/Engine/Route/FlatTriangleFanTree.cpp	30;"	d	file:
REACH_MAX_DEPTH	src/Engine/Route/FlatTriangleFanTree.cpp	33;"	d	file:
REACH_MAX_FANS	src/Engine/Route/FlatTriangleFanTree.hpp	/^  static constexpr unsigned REACH_MAX_FANS = 300;$/;"	m	class:FlatTriangleFanTree
REACH_MAX_VERTICES	src/Engine/Route/FlatTriangleFanTree.cpp	35;"	d	file:
REACH_MIN_STEP	src/Engine/Route/FlatTriangleFanTree.cpp	34;"	d	file:
REACH_SWEEP	src/Engine/Route/FlatTriangleFanTree.cpp	31;"	d	file:
READ	src/event/EpollEvents.hxx	/^	static constexpr unsigned READ = EPOLLIN;$/;"	m	struct:EpollEvents
READ	src/event/PollEvents.hxx	/^	static constexpr unsigned READ = POLLIN;$/;"	m	struct:PollEvents
READ	src/event/WinSelectEvents.hxx	/^	static constexpr unsigned READ = 1;$/;"	m	struct:WinSelectEvents
READER_HXX	src/io/Reader.hxx	31;"	d
READY	src/Device/Port/Port.hpp	/^    READY,$/;"	m	class:Port::WaitResult
READY	src/Device/Port/State.hpp	/^  READY,$/;"	m	class:PortState
READ_FLIGHT_LIST	src/Device/Driver/LX/Protocol.hpp	/^    READ_FLIGHT_LIST = 0xcd,$/;"	e	enum:LX::Command
READ_LOGGER_DATA	src/Device/Driver/LX/Protocol.hpp	/^    READ_LOGGER_DATA = 0xe6,$/;"	e	enum:LX::Command
READ_MEMORY_SECTION	src/Device/Driver/LX/Protocol.hpp	/^    READ_MEMORY_SECTION = 0xcc,$/;"	e	enum:LX::Command
REAL	src/Form/DataField/Base.hpp	/^    REAL,$/;"	m	class:DataField::Type
REAL_TIME_KINEMATIC	src/NMEA/GPSState.hpp	/^  REAL_TIME_KINEMATIC,$/;"	m	class:FixQuality
REARTH	src/Geo/FAISphere.hpp	/^  static constexpr unsigned REARTH = 6371000;$/;"	m	namespace:FAISphere
REBOOT	src/Kobo/SystemDialog.cpp	/^    REBOOT,$/;"	e	enum:final::Buttons	file:
RECEIVE_SETTINGS	src/Device/Driver.hpp	/^    RECEIVE_SETTINGS = 0x80,$/;"	e	enum:DeviceRegister::__anon158
RECINT	src/Dialogs/Device/LX/NanoConfigWidget.hpp	/^    RECINT,$/;"	e	enum:final::Controls
REDUCED_FUNCTIONALITY	src/FLARM/Error.hpp	/^    REDUCED_FUNCTIONALITY = 0x02,$/;"	m	struct:FlarmError	typeref:enum:FlarmError::
REFERENCE_MASS	src/Dialogs/Plane/PlanePolarDialog.cpp	/^    REFERENCE_MASS,$/;"	e	enum:final::Controls	file:
REGISTRATION	src/Dialogs/Plane/PlaneDetailsDialog.cpp	/^    REGISTRATION,$/;"	e	enum:final::Controls	file:
RELATIVE_BEARING	src/Dialogs/Traffic/TeamCodeDialog.cpp	/^    RELATIVE_BEARING,$/;"	e	enum:final::Controls	file:
RELOCATE	src/InfoBoxes/Panel/ATCReference.cpp	/^  RELOCATE,$/;"	e	enum:Controls	file:
REMAINING	src/Widget/RowFormWidget.hpp	/^      REMAINING,$/;"	m	class:RowFormWidget::Row::Type
REMOVE	src/Dialogs/Weather/NOAAList.cpp	/^    REMOVE,$/;"	e	enum:final::Buttons	file:
RENDERBUFFER	src/ui/canvas/opengl/FBO.hpp	/^static constexpr GLenum RENDERBUFFER = GL_RENDERBUFFER;$/;"	m	namespace:FBO
REPEAT	src/Dialogs/Device/Vega/SwitchesDialog.cpp	/^    REPEAT,$/;"	e	enum:SwitchesLeft::Controls	file:
REPLAY_HPP	src/Replay/Replay.hpp	25;"	d
REPOSITORY_URI	src/Repository/Glue.cpp	30;"	d	file:
REQUEST_EXPIRY	src/Cloud/Main.cpp	/^static constexpr std::chrono::steady_clock::duration REQUEST_EXPIRY = std::chrono::minutes(5);$/;"	v	file:
REQUIRED_GR	src/Renderer/WaypointRendererSettings.hpp	/^    REQUIRED_GR,$/;"	m	class:WaypointRendererSettings::ArrivalHeightDisplay
REQUIRED_GR_AND_TERRAIN	src/Renderer/WaypointRendererSettings.hpp	/^    REQUIRED_GR_AND_TERRAIN,$/;"	m	class:WaypointRendererSettings::ArrivalHeightDisplay
RESERVABLE_PRIORITY_QUEUE_HPP	src/util/ReservablePriorityQueue.hpp	29;"	d
RESET_VALUE	src/time/GPSClock.hpp	/^  static constexpr int RESET_VALUE = -99999;$/;"	m	class:GPSClock
RESIZE	src/ui/event/shared/Event.hpp	/^    RESIZE,$/;"	e	enum:UI::Event::Type
RESOLUTION	src/event/TimerWheel.hxx	/^	static constexpr Event::Duration RESOLUTION = std::chrono::seconds(1);$/;"	m	class:final
RESTRICT	src/Engine/Airspace/AirspaceClass.hpp	/^  RESTRICT,$/;"	e	enum:uint8_t
RESUME	src/ui/event/shared/Event.hpp	/^    RESUME,$/;"	e	enum:UI::Event::Type
RETROSPECTIVE_HPP	src/Engine/Contest/Solvers/Retrospective.hpp	24;"	d
REUSABLE_ARRAY_HPP	src/util/ReusableArray.hpp	31;"	d
REVERSE_LANDSCAPE	src/Android/NativeView.hpp	/^    REVERSE_LANDSCAPE = 8,$/;"	m	class:NativeView::ScreenOrientation
REVERSE_LANDSCAPE	src/DisplayOrientation.hpp	/^  REVERSE_LANDSCAPE,$/;"	m	class:DisplayOrientation
REVERSE_PORTRAIT	src/Android/NativeView.hpp	/^    REVERSE_PORTRAIT = 9,$/;"	m	class:NativeView::ScreenOrientation
REVERSE_PORTRAIT	src/DisplayOrientation.hpp	/^  REVERSE_PORTRAIT,$/;"	m	class:DisplayOrientation
REVERT	src/Dialogs/Task/Manager/TaskClosePanel.hpp	/^    REVERT,$/;"	e	enum:final::Buttons
RFCOMM	src/Device/Config.hpp	/^    RFCOMM,$/;"	m	class:DeviceConfig::PortType
RFCOMM_SERVER	src/Device/Config.hpp	/^    RFCOMM_SERVER,$/;"	m	class:DeviceConfig::PortType
RFW	src/Device/Driver/Volkslogger/vlconv.cpp	/^  char A[10], DTE[10], FXA[10], PLT[80], GTY[50], GID[50], RFW[10], RHW[10],$/;"	m	struct:IGCHEADER	file:
RF_COMMUNICATION	src/FLARM/Error.hpp	/^    RF_COMMUNICATION = 0x41,$/;"	e	enum:uint8_t
RGB	src/ui/canvas/custom/UncompressedImage.hpp	/^    RGB,$/;"	m	class:UncompressedImage::Format
RGB555Color	src/ui/canvas/PortableColor.hpp	/^  constexpr RGB555Color(uint8_t _r, uint8_t _g, uint8_t _b)$/;"	f	class:RGB555Color
RGB555Color	src/ui/canvas/PortableColor.hpp	/^class RGB555Color {$/;"	c
RGB565Color	src/ui/canvas/PortableColor.hpp	/^  constexpr RGB565Color(uint8_t _r, uint8_t _g, uint8_t _b)$/;"	f	class:RGB565Color
RGB565Color	src/ui/canvas/PortableColor.hpp	/^class RGB565Color {$/;"	c
RGB8Color	src/ui/canvas/PortableColor.hpp	/^  constexpr RGB8Color(uint8_t _r, uint8_t _g, uint8_t _b)$/;"	f	class:RGB8Color
RGB8Color	src/ui/canvas/PortableColor.hpp	/^class RGB8Color {$/;"	c
RGB8_BLACK	src/ui/canvas/PortableColor.hpp	/^static constexpr RGB8Color RGB8_BLACK = RGB8Color(0x00, 0x00, 0x00);$/;"	v
RGB8_BLUE	src/ui/canvas/PortableColor.hpp	/^static constexpr RGB8Color RGB8_BLUE = RGB8Color(0x00, 0x00, 0xff);$/;"	v
RGB8_BROWN	src/ui/canvas/PortableColor.hpp	/^static constexpr RGB8Color RGB8_BROWN = RGB8Color(0xb7, 0x64, 0x1e);$/;"	v
RGB8_CYAN	src/ui/canvas/PortableColor.hpp	/^static constexpr RGB8Color RGB8_CYAN = RGB8Color(0x00, 0xff, 0xff);$/;"	v
RGB8_DARK_GRAY	src/ui/canvas/PortableColor.hpp	/^static constexpr RGB8Color RGB8_DARK_GRAY = RGB8Color(0x40, 0x40, 0x40);$/;"	v
RGB8_GRAY	src/ui/canvas/PortableColor.hpp	/^static constexpr RGB8Color RGB8_GRAY = RGB8Color(0x80, 0x80, 0x80);$/;"	v
RGB8_GREEN	src/ui/canvas/PortableColor.hpp	/^static constexpr RGB8Color RGB8_GREEN = RGB8Color(0x00, 0xff, 0x00);$/;"	v
RGB8_LIGHT_GRAY	src/ui/canvas/PortableColor.hpp	/^static constexpr RGB8Color RGB8_LIGHT_GRAY = RGB8Color(0xc0, 0xc0, 0xc0);$/;"	v
RGB8_MAGENTA	src/ui/canvas/PortableColor.hpp	/^static constexpr RGB8Color RGB8_MAGENTA = RGB8Color(0xff, 0x00, 0xff);$/;"	v
RGB8_ORANGE	src/ui/canvas/PortableColor.hpp	/^static constexpr RGB8Color RGB8_ORANGE = RGB8Color(0xff, 0xa2, 0x00);$/;"	v
RGB8_RED	src/ui/canvas/PortableColor.hpp	/^static constexpr RGB8Color RGB8_RED = RGB8Color(0xff, 0x00, 0x00);$/;"	v
RGB8_VERY_LIGHT_GRAY	src/ui/canvas/PortableColor.hpp	/^static constexpr RGB8Color RGB8_VERY_LIGHT_GRAY = RGB8Color(0xd8, 0xd8, 0xd8);$/;"	v
RGB8_WHITE	src/ui/canvas/PortableColor.hpp	/^static constexpr RGB8Color RGB8_WHITE = RGB8Color(0xff, 0xff, 0xff);$/;"	v
RGB8_YELLOW	src/ui/canvas/PortableColor.hpp	/^static constexpr RGB8Color RGB8_YELLOW = RGB8Color(0xff, 0xff, 0x00);$/;"	v
RGBA	src/ui/canvas/custom/UncompressedImage.hpp	/^    RGBA,$/;"	m	class:UncompressedImage::Format
RGBAImageBegin	src/ui/canvas/custom/LibTiff.cpp	/^  void RGBAImageBegin(TIFFRGBAImage &img) {$/;"	f	class:TiffLoader
RGBPixelReader	src/ui/canvas/memory/UncompressedImage.hpp	/^struct RGBPixelReader {$/;"	s
RHW	src/Device/Driver/Volkslogger/vlconv.cpp	/^  char A[10], DTE[10], FXA[10], PLT[80], GTY[50], GID[50], RFW[10], RHW[10],$/;"	m	struct:IGCHEADER	file:
RIGHT	src/Dialogs/KnobTextEntry.cpp	/^  RIGHT,$/;"	e	enum:Buttons	file:
RIGHT	src/Form/GridView.hpp	/^    RIGHT,$/;"	m	class:GridView::Direction
RIGHT	src/Renderer/SymbolRenderer.hpp	/^    RIGHT,$/;"	e	enum:SymbolRenderer::Direction
RIGHT	src/Renderer/TextInBox.hpp	/^    RIGHT,$/;"	m	struct:TextInBoxMode	typeref:enum:TextInBoxMode::
RIGHT_16	src/InfoBoxes/InfoBoxSettings.hpp	/^    RIGHT_16 = 19,$/;"	m	class:InfoBoxSettings::Geometry
RIGHT_24	src/InfoBoxes/InfoBoxSettings.hpp	/^    RIGHT_24 = 9,$/;"	m	class:InfoBoxSettings::Geometry
RIGHT_5	src/InfoBoxes/InfoBoxSettings.hpp	/^    RIGHT_5 = 7,$/;"	m	class:InfoBoxSettings::Geometry
RIGHT_9_VARIO	src/InfoBoxes/InfoBoxSettings.hpp	/^    RIGHT_9_VARIO = 6,$/;"	m	class:InfoBoxSettings::Geometry
RIGID_WING_FAI5	src/Tracking/LiveTrack24.hpp	/^  RIGID_WING_FAI5 = 4,$/;"	m	class:LiveTrack24::VehicleType
RLEDecompress	src/Device/Driver/IMI/Protocol/Communication.cpp	/^RLEDecompress(IMI::IMIBYTE* dest, const IMI::IMIBYTE *src, unsigned size,$/;"	f	file:
RMC	src/Device/Parser.cpp	/^NMEAParser::RMC(NMEAInputLine &line, NMEAInfo &info)$/;"	f	class:NMEAParser
RMZ	src/Device/Parser.cpp	/^NMEAParser::RMZ(NMEAInputLine &line, NMEAInfo &info)$/;"	f	class:NMEAParser
RMZ	src/Engine/Airspace/AirspaceClass.hpp	/^  RMZ,$/;"	e	enum:uint8_t
ROAMING	src/net/State.hpp	/^  ROAMING,$/;"	m	class:NetState
ROUGH_TIME	src/Form/DataField/Base.hpp	/^    ROUGH_TIME,$/;"	m	class:DataField::Type
ROUND	src/Topography/shapelib/mapprimitive.c	43;"	d	file:
ROUNDED_BLACK	src/Renderer/LabelShape.hpp	/^  ROUNDED_BLACK,$/;"	m	class:LabelShape
ROUNDED_WHITE	src/Renderer/LabelShape.hpp	/^  ROUNDED_WHITE,$/;"	m	class:LabelShape
ROUND_PROGRESS_BAR	src/Screen/ProgressBar.cpp	76;"	d	file:
ROUTE	src/Device/Driver/Volkslogger/vlapi2.h	/^  struct ROUTE {$/;"	s	class:VLAPI_DATA
ROUTECONFIGPANEL_HPP	src/Dialogs/Settings/Panels/RouteConfigPanel.hpp	25;"	d
ROUTELINK_HPP	src/Engine/Route/RouteLink.hpp	24;"	d
ROUTEPOLARS_HPP	src/Engine/Route/RoutePolars.hpp	24;"	d
ROUTEPOLAR_HPP	src/Engine/Route/RoutePolar.hpp	24;"	d
ROUTEPOLAR_POINTS	src/Engine/Route/RoutePolar.hpp	37;"	d
ROUTEPOLAR_Q0	src/Engine/Route/RoutePolar.hpp	33;"	d
ROUTEPOLAR_Q1	src/Engine/Route/RoutePolar.hpp	34;"	d
ROUTEPOLAR_Q2	src/Engine/Route/RoutePolar.hpp	35;"	d
ROUTEPOLAR_Q3	src/Engine/Route/RoutePolar.hpp	36;"	d
ROUTE_MIN_STEP	src/Engine/Route/RouteLink.cpp	87;"	d	file:
ROUTE_PLANNER_GLUE_HPP	src/Task/RoutePlannerGlue.hpp	24;"	d
ROUTE_PLANNER_HPP	src/Engine/Route/RoutePlanner.hpp	24;"	d
ROUTINELENGTH	src/Topography/shapelib/maperror.h	91;"	d
RTDistanceSort	src/Terrain/RasterTileCache.cpp	/^  RTDistanceSort(RasterTileCache &_rtc):rtc(_rtc) {}$/;"	f	struct:RTDistanceSort
RTDistanceSort	src/Terrain/RasterTileCache.cpp	/^struct RTDistanceSort {$/;"	s	file:
RTTaskFactory	src/Engine/Task/Factory/RTTaskFactory.cpp	/^RTTaskFactory::RTTaskFactory(OrderedTask& _task,$/;"	f	class:RTTaskFactory
RTTaskFactory	src/Engine/Task/Factory/RTTaskFactory.hpp	/^class RTTaskFactory: $/;"	c
RT_TASK_FACTORY_HPP	src/Engine/Task/Factory/RTTaskFactory.hpp	23;"	d
RUN	src/Tracking/LiveTrack24.hpp	/^  RUN = 16386,$/;"	m	class:LiveTrack24::VehicleType
RUNTIME_ERROR_HXX	src/util/RuntimeError.hxx	31;"	d
Radians	src/Math/Angle.hpp	/^  constexpr double Radians() const {$/;"	f	class:Angle
Radians	src/Math/Angle.hpp	/^  static constexpr Angle Radians(const double _value) {$/;"	f	class:Angle
RadioFrequency	src/RadioFrequency.hpp	/^  constexpr RadioFrequency(unsigned _value):value(_value) {}$/;"	f	class:RadioFrequency
RadioFrequency	src/RadioFrequency.hpp	/^class RadioFrequency {$/;"	c
RadioProcess	src/ApplyExternalSettings.cpp	/^RadioProcess()$/;"	f	file:
RadioSettings	src/Computer/Settings.hpp	/^struct RadioSettings {$/;"	s
RadixTree	src/util/RadixTree.hpp	/^  RadixTree():root(_T("")) {}$/;"	f	class:RadixTree
RadixTree	src/util/RadixTree.hpp	/^class RadixTree {$/;"	c
Raise	src/lua/Error.cxx	/^Raise(lua_State *L, std::exception_ptr e)$/;"	f	namespace:Lua
RaiseCurrent	src/lua/Error.cxx	/^RaiseCurrent(lua_State *L)$/;"	f	namespace:Lua
RandomPointInTask	src/Engine/Task/TaskManager.cpp	/^TaskManager::RandomPointInTask(const unsigned index, const double mag) const$/;"	f	class:TaskManager
Range	src/Dialogs/Device/FLARM/ConfigWidget.hpp	/^    Range,$/;"	e	enum:final::Controls
Range	src/Weather/NOAAFormatter.cpp	/^  typedef std::pair<const TCHAR *, unsigned> Range;$/;"	t	class:NOAALineSplitter	file:
Range	src/util/Range.hpp	/^  Range(I _begin, I _end)$/;"	f	class:Range
Range	src/util/Range.hpp	/^class Range {$/;"	c
RangeAndRadial	src/Engine/Task/Ordered/Points/AATPoint.hpp	/^struct RangeAndRadial {$/;"	s
RangeMaxWidth	src/Form/ButtonPanel.cpp	/^ButtonPanel::RangeMaxWidth(unsigned start, unsigned end) const$/;"	f	class:ButtonPanel
RangeScale	src/Gauge/FlarmTrafficWindow.cpp	/^FlarmTrafficWindow::RangeScale(double d) const$/;"	f	class:FlarmTrafficWindow
Rank	src/Engine/Airspace/AirspaceIntersectSort.hpp	/^  struct Rank : public std::binary_function<Intersection, Intersection, bool> {$/;"	s	class:AirspaceIntersectSort
Rank	src/Engine/PathSolvers/Dijkstra.hpp	/^  struct Rank : public std::binary_function<Value, Value, bool> {$/;"	s	class:Dijkstra
Rank	src/Engine/Route/AStar.hpp	/^  struct Rank: public std::binary_function<NodeValue, NodeValue, bool>$/;"	s	class:AStar
RaspCache	src/Weather/Rasp/RaspCache.hpp	/^  RaspCache(const RaspStore &_store, unsigned _parameter)$/;"	f	class:RaspCache
RaspCache	src/Weather/Rasp/RaspCache.hpp	/^class RaspCache {$/;"	c
RaspMapItem	src/MapWindow/Items/RaspMapItem.hpp	/^  explicit RaspMapItem(const TCHAR *_label)$/;"	f	struct:RaspMapItem
RaspMapItem	src/MapWindow/Items/RaspMapItem.hpp	/^struct RaspMapItem : public MapItem$/;"	s
RaspProvider	src/Weather/Rasp/Providers.hpp	/^struct RaspProvider {$/;"	s
RaspProviderRenderer	src/Dialogs/Weather/RASPDialog.cpp	/^class RaspProviderRenderer : public ListItemRenderer {$/;"	c	file:
RaspRenderer	src/Weather/Rasp/RaspRenderer.hpp	/^  RaspRenderer(const RaspStore &_store, unsigned parameter)$/;"	f	class:RaspRenderer
RaspRenderer	src/Weather/Rasp/RaspRenderer.hpp	/^class RaspRenderer {$/;"	c
RaspStore	src/Weather/Rasp/RaspStore.hpp	/^  explicit RaspStore(AllocatedPath &&_path)$/;"	f	class:RaspStore
RaspStore	src/Weather/Rasp/RaspStore.hpp	/^class RaspStore {$/;"	c
RaspStyle	src/Weather/Rasp/RaspStyle.hpp	/^struct RaspStyle {$/;"	s
RasterBuffer	src/Terrain/RasterBuffer.hpp	/^  RasterBuffer(unsigned _width, unsigned _height)$/;"	f	class:RasterBuffer
RasterBuffer	src/Terrain/RasterBuffer.hpp	/^class RasterBuffer {$/;"	c
RasterCanvas	src/ui/canvas/memory/RasterCanvas.hpp	/^  RasterCanvas(WritableImageBuffer<PixelTraits> _buffer,$/;"	f	class:RasterCanvas
RasterCanvas	src/ui/canvas/memory/RasterCanvas.hpp	/^class RasterCanvas : private PixelTraits {$/;"	c
RasterLocation	src/Terrain/RasterLocation.hpp	/^struct RasterLocation : Point2D<unsigned> {$/;"	s
RasterMap	src/Terrain/RasterMap.hpp	/^class RasterMap {$/;"	c
RasterProjection	src/Terrain/RasterProjection.hpp	/^class RasterProjection {$/;"	c
RasterRenderer	src/Terrain/RasterRenderer.cpp	/^RasterRenderer::RasterRenderer()$/;"	f	class:RasterRenderer
RasterRenderer	src/Terrain/RasterRenderer.hpp	/^class RasterRenderer {$/;"	c
RasterTerrain	src/Terrain/RasterTerrain.hpp	/^  explicit RasterTerrain(ZipArchive &&_archive)$/;"	f	class:RasterTerrain
RasterTerrain	src/Terrain/RasterTerrain.hpp	/^class RasterTerrain : public Guard<RasterMap> {$/;"	c
RasterTile	src/Terrain/RasterTile.hpp	/^class RasterTile {$/;"	c
RasterTileCache	src/Terrain/RasterTileCache.hpp	/^  RasterTileCache() {$/;"	f	class:RasterTileCache
RasterTileCache	src/Terrain/RasterTileCache.hpp	/^class RasterTileCache {$/;"	c
RasterTraits	src/Terrain/RasterTraits.hpp	/^namespace RasterTraits {$/;"	n
RateLimitedBlackboardListener	src/Blackboard/RateLimitedBlackboardListener.hpp	/^class RateLimitedBlackboardListener$/;"	c
RateLimiter	src/RateLimiter.hpp	/^class RateLimiter {$/;"	c
RatioAndDistance	src/Computer/WaveComputer.cpp	/^struct RatioAndDistance {$/;"	s	file:
RawBitmap	src/ui/canvas/gdi/RawBitmap.cpp	/^RawBitmap::RawBitmap(unsigned nWidth, unsigned nHeight)$/;"	f	class:RawBitmap
RawBitmap	src/ui/canvas/memory/RawBitmap.cpp	/^RawBitmap::RawBitmap(unsigned nWidth, unsigned nHeight)$/;"	f	class:RawBitmap
RawBitmap	src/ui/canvas/opengl/RawBitmap.cpp	/^RawBitmap::RawBitmap(unsigned nWidth, unsigned nHeight)$/;"	f	class:RawBitmap
RawColor	src/ui/canvas/RawBitmap.hpp	/^  constexpr RawColor(uint8_t R, uint8_t G, uint8_t B)$/;"	f	struct:RawColor
RawColor	src/ui/canvas/RawBitmap.hpp	/^struct RawColor$/;"	s
Reach	src/Computer/RouteComputer.cpp	/^RouteComputer::Reach(const MoreData &basic, DerivedInfo &calculated,$/;"	f	class:RouteComputer
ReachFan	src/Engine/Route/ReachFan.hpp	/^  ReachFan():terrain_base(0) {}$/;"	f	class:ReachFan
ReachFan	src/Engine/Route/ReachFan.hpp	/^class ReachFan$/;"	c
ReachFanParms	src/Engine/Route/ReachFanParms.hpp	/^  ReachFanParms(const RoutePolars& _rpolars,$/;"	f	struct:ReachFanParms
ReachFanParms	src/Engine/Route/ReachFanParms.hpp	/^struct ReachFanParms {$/;"	s
ReachIntercept	src/Engine/Route/ReachFanParms.hpp	/^  FlatGeoPoint ReachIntercept(int index, const AFlatGeoPoint &flat_origin,$/;"	f	struct:ReachFanParms
ReachIntercept	src/Engine/Route/RoutePolars.cpp	/^RoutePolars::ReachIntercept(const int index, const AFlatGeoPoint &flat_origin,$/;"	f	class:RoutePolars
ReachIntersectionTest	src/Task/ProtectedTaskManager.hpp	/^  ReachIntersectionTest():route(nullptr) {};$/;"	f	class:ReachIntersectionTest
ReachIntersectionTest	src/Task/ProtectedTaskManager.hpp	/^class ReachIntersectionTest: public AbortIntersectionTest {$/;"	c
ReachMode	src/Engine/Route/Config.hpp	/^  enum class ReachMode {$/;"	c	struct:RoutePlannerConfig
ReachPolarMode	src/Dialogs/Settings/Panels/RouteConfigPanel.cpp	/^  ReachPolarMode,$/;"	e	enum:ControlIndex	file:
ReachPolarMode	src/Profile/ProfileKeys.cpp	/^const char ReachPolarMode[] = "ReachPolarMode";$/;"	m	namespace:ProfileKeys	file:
ReachResult	src/Engine/Route/ReachResult.hpp	/^struct ReachResult {$/;"	s
Reachability	src/Renderer/WaypointIconRenderer.hpp	/^  enum Reachability$/;"	g	class:WaypointIconRenderer
Reachability	src/Renderer/WaypointRenderer.hpp	/^  enum Reachability$/;"	g	class:WaypointRenderer
ReachableStraight	src/Renderer/WaypointIconRenderer.hpp	/^    ReachableStraight,$/;"	e	enum:WaypointIconRenderer::Reachability
ReachableStraight	src/Renderer/WaypointRenderer.hpp	/^    ReachableStraight,$/;"	e	enum:WaypointRenderer::Reachability
ReachableTerrain	src/Renderer/WaypointIconRenderer.hpp	/^    ReachableTerrain,$/;"	e	enum:WaypointIconRenderer::Reachability
ReachableTerrain	src/Renderer/WaypointRenderer.hpp	/^    ReachableTerrain,$/;"	e	enum:WaypointRenderer::Reachability
Read	src/Device/Port/BufferedPort.cpp	/^BufferedPort::Read(void *dest, size_t length)$/;"	f	class:BufferedPort
Read	src/Device/Port/DumpPort.cpp	/^DumpPort::Read(void *buffer, size_t size)$/;"	f	class:DumpPort
Read	src/Device/Port/K6BtPort.cpp	/^K6BtPort::Read(void *Buffer, size_t Size)$/;"	f	class:K6BtPort
Read	src/Device/Port/NullPort.cpp	/^NullPort::Read(void *Buffer, size_t Size)$/;"	f	class:NullPort
Read	src/Logger/FlightParser.cpp	/^FlightParser::Read(FlightInfo &flight)$/;"	f	class:FlightParser
Read	src/Plane/PlaneFileGlue.cpp	/^PlaneGlue::Read(Plane &plane, KeyValueFileReader &reader)$/;"	f	class:PlaneGlue
Read	src/Units/UnitsStore.cpp	/^Units::Store::Read(unsigned i)$/;"	f	class:Units::Store
Read	src/io/CSVLine.cpp	/^CSVLine::Read(char *dest, size_t size)$/;"	f	class:CSVLine
Read	src/io/CSVLine.cpp	/^CSVLine::Read(double default_value)$/;"	f	class:CSVLine
Read	src/io/CSVLine.cpp	/^CSVLine::Read(long default_value)$/;"	f	class:CSVLine
Read	src/io/CSVLine.hpp	/^  int Read(bool default_value) {$/;"	f	class:CSVLine
Read	src/io/CSVLine.hpp	/^  int Read(int default_value) {$/;"	f	class:CSVLine
Read	src/io/FileHandle.hpp	/^  size_t Read(void *ptr, size_t size, size_t nmemb) {$/;"	f	class:FileHandle
Read	src/io/FileReader.cxx	/^FileReader::Read(void *data, size_t size)$/;"	f	class:FileReader
Read	src/io/GunzipReader.cxx	/^GunzipReader::Read(void *data, size_t size)$/;"	f	class:GunzipReader
Read	src/io/KeyValueFileReader.cpp	/^KeyValueFileReader::Read(KeyValuePair &pair)$/;"	f	class:KeyValueFileReader
Read	src/io/ZipReader.cpp	/^ZipReader::Read(void *data, size_t size)$/;"	f	class:ZipReader
Read	src/ui/canvas/memory/UncompressedImage.hpp	/^  typename PixelTraits::color_type Read(PixelTraits) {$/;"	f	struct:GrayPixelReader
Read	src/ui/canvas/memory/UncompressedImage.hpp	/^  typename PixelTraits::color_type Read(PixelTraits) {$/;"	f	struct:RGBPixelReader
Read	src/ui/event/poll/linux/Input.cpp	/^LinuxInputDevice::Read()$/;"	f	class:UI::LinuxInputDevice
Read16	src/Cloud/Serialiser.hpp	/^  uint16_t Read16() {$/;"	f	class:Deserialiser
Read32	src/Cloud/Serialiser.hpp	/^  uint32_t Read32() {$/;"	f	class:Deserialiser
Read64	src/Cloud/Serialiser.hpp	/^  uint64_t Read64() {$/;"	f	class:Deserialiser
Read8	src/Cloud/Serialiser.hpp	/^  uint8_t Read8() {$/;"	f	class:Deserialiser
ReadAcceleration	src/Device/Driver/Eye.cpp	/^EyeDevice::ReadAcceleration(NMEAInputLine &line, AccelerationState &value_r)$/;"	f	class:EyeDevice
ReadActivePilot	src/Device/Driver/CAI302/Manage.cpp	/^CAI302Device::ReadActivePilot(CAI302::Pilot &pilot, OperationEnvironment &env)$/;"	f	class:CAI302Device
ReadAirspace	src/Airspace/AirspaceGlue.cpp	/^ReadAirspace(Airspaces &airspaces,$/;"	f
ReadAllFlights	src/Device/Driver/Volkslogger/Protocol.hpp	/^  ReadAllFlights(Port &port, unsigned baud_rate, OperationEnvironment &env,$/;"	f	namespace:Volkslogger
ReadAltitude	src/Airspace/AirspaceParser.cpp	/^ReadAltitude(StringParser<TCHAR> &input, AirspaceAltitude &altitude)$/;"	f	file:
ReadAltitude	src/Device/Driver/AltairPro.cpp	/^ReadAltitude(NMEAInputLine &line, double &value_r)$/;"	f	file:
ReadAltitude	src/Device/Driver/EWMicroRecorder.cpp	/^ReadAltitude(NMEAInputLine &line, double &value_r)$/;"	f	file:
ReadAltitude	src/Device/Driver/IMI/Internal.cpp	/^ReadAltitude(NMEAInputLine &line, double &value_r)$/;"	f	file:
ReadAltitude	src/Device/Parser.cpp	/^ReadAltitude(NMEAInputLine &line, double &value_r)$/;"	f	file:
ReadAssetNumber	src/Asset.cpp	/^ReadAssetNumber()$/;"	f
ReadBearing	src/Device/Driver/FLARM/StaticParser.cpp	/^ReadBearing(NMEAInputLine &line, Angle &value_r)$/;"	f	file:
ReadBearing	src/Device/Parser.cpp	/^ReadBearing(NMEAInputLine &line, Angle &value_r)$/;"	f	file:
ReadBlackboard	src/Blackboard/DeviceBlackboard.cpp	/^DeviceBlackboard::ReadBlackboard(const DerivedInfo &derived_info)$/;"	f	class:DeviceBlackboard
ReadBlackboard	src/Computer/GlideComputerBlackboard.cpp	/^GlideComputerBlackboard::ReadBlackboard(const MoreData &nmea_info)$/;"	f	class:GlideComputerBlackboard
ReadBlackboard	src/CrossSection/CrossSectionRenderer.cpp	/^CrossSectionRenderer::ReadBlackboard(const MoreData &_gps_info,$/;"	f	class:CrossSectionRenderer
ReadBlackboard	src/CrossSection/CrossSectionWindow.hpp	/^  void ReadBlackboard(const MoreData &basic,$/;"	f	class:CrossSectionWindow
ReadBlackboard	src/MapWindow/MapWindow.cpp	/^MapWindow::ReadBlackboard(const MoreData &nmea_info,$/;"	f	class:MapWindow
ReadBlackboard	src/MapWindow/MapWindowBlackboard.cpp	/^MapWindowBlackboard::ReadBlackboard(const MoreData &nmea_info,$/;"	f	class:MapWindowBlackboard
ReadBlackboardBasic	src/Blackboard/InterfaceBlackboard.cpp	/^InterfaceBlackboard::ReadBlackboardBasic(const MoreData &nmea_info)$/;"	f	class:InterfaceBlackboard
ReadBlackboardBasic	src/Interface.hpp	/^  static inline void ReadBlackboardBasic(const MoreData &nmea_info) {$/;"	f	namespace:CommonInterface
ReadBlackboardCalculated	src/Blackboard/InterfaceBlackboard.cpp	/^InterfaceBlackboard::ReadBlackboardCalculated(const DerivedInfo &derived_info)$/;"	f	class:InterfaceBlackboard
ReadBlackboardCalculated	src/Interface.hpp	/^  static inline void ReadBlackboardCalculated(const DerivedInfo &derived_info) {$/;"	f	namespace:CommonInterface
ReadBufferedLine	src/util/TextFile.hxx	/^ReadBufferedLine(B &buffer)$/;"	f
ReadBuiltinLanguage	src/Language/LanguageGlue.cpp	/^ReadBuiltinLanguage(char dummy)$/;"	f	file:
ReadBuiltinLanguage	src/Language/LanguageGlue.cpp	/^ReadBuiltinLanguage(const BuiltinLanguage &language)$/;"	f	file:
ReadBulk	src/Device/Driver/Volkslogger/Protocol.cpp	/^Volkslogger::ReadBulk(Port &port, OperationEnvironment &env,$/;"	f	class:Volkslogger
ReadCRC	src/Device/Driver/LX/Protocol.cpp	/^LX::ReadCRC(Port &port, void *buffer, size_t length, OperationEnvironment &env,$/;"	f	class:LX
ReadChecked	src/io/CSVLine.cpp	/^CSVLine::ReadChecked(double &value_r)$/;"	f	class:CSVLine
ReadChecked	src/io/CSVLine.cpp	/^CSVLine::ReadChecked(int &value_r)$/;"	f	class:CSVLine
ReadChecked	src/io/CSVLine.cpp	/^CSVLine::ReadChecked(long &value_r)$/;"	f	class:CSVLine
ReadChecked	src/io/CSVLine.cpp	/^CSVLine::ReadChecked(unsigned &value_r)$/;"	f	class:CSVLine
ReadChecked	src/io/CSVLine.cpp	/^CSVLine::ReadChecked(unsigned long &value_r)$/;"	f	class:CSVLine
ReadCheckedCompare	src/io/CSVLine.cpp	/^CSVLine::ReadCheckedCompare(double &value_r, const char *string)$/;"	f	class:CSVLine
ReadCheckedRange	src/Device/Driver/XCTracer/Parser.cpp	/^ReadCheckedRange(NMEAInputLine &line, unsigned &value_r, unsigned min, unsigned max)$/;"	f	file:
ReadCheckedRange	src/Device/Driver/XCTracer/Parser.cpp	/^ReadCheckedRange(NMEAInputLine &line,double &value_r, double min, double max)$/;"	f	file:
ReadCommonStats	src/Blackboard/InterfaceBlackboard.hpp	/^  inline void ReadCommonStats(const CommonStats &common_stats) {$/;"	f	class:InterfaceBlackboard
ReadCommonStats	src/Interface.hpp	/^  static inline void ReadCommonStats(const CommonStats &common_stats) {$/;"	f	namespace:CommonInterface
ReadCompare	src/io/CSVLine.cpp	/^CSVLine::ReadCompare(const char *value)$/;"	f	class:CSVLine
ReadComputerSettings	src/Blackboard/DeviceBlackboard.cpp	/^DeviceBlackboard::ReadComputerSettings(const ComputerSettings &settings)$/;"	f	class:DeviceBlackboard
ReadComputerSettings	src/Blackboard/InterfaceBlackboard.cpp	/^InterfaceBlackboard::ReadComputerSettings(const ComputerSettings$/;"	f	class:InterfaceBlackboard
ReadComputerSettings	src/Computer/GlideComputerBlackboard.cpp	/^GlideComputerBlackboard::ReadComputerSettings(const ComputerSettings &settings)$/;"	f	class:GlideComputerBlackboard
ReadComputerSettings	src/MapWindow/MapWindowBlackboard.cpp	/^MapWindowBlackboard::ReadComputerSettings(const ComputerSettings$/;"	f	class:MapWindowBlackboard
ReadCoords	src/Airspace/AirspaceParser.cpp	/^ReadCoords(StringParser<TCHAR> &input, GeoPoint &point)$/;"	f	file:
ReadDatabase	src/Device/Driver/Volkslogger/Protocol.hpp	/^  ReadDatabase(Port &port, unsigned baud_rate, OperationEnvironment &env,$/;"	f	namespace:Volkslogger
ReadDate	src/Device/Driver/LX/NanoLogger.cpp	/^ReadDate(NMEAInputLine &line, BrokenDate &date)$/;"	f	file:
ReadDate	src/Device/Parser.cpp	/^NMEAParser::ReadDate(NMEAInputLine &line, BrokenDate &date)$/;"	f	class:NMEAParser
ReadDouble	src/Cloud/Serialiser.hpp	/^  double ReadDouble() {$/;"	f	class:Deserialiser
ReadDouble	src/Plane/PlaneFileGlue.cpp	/^ReadDouble(const char *string, double &out)$/;"	f	file:
ReadDouble	src/util/StringParser.hxx	/^	bool ReadDouble(double &value_r) {$/;"	f	class:StringParser
ReadDoubleAndChar	src/Device/Parser.cpp	/^ReadDoubleAndChar(NMEAInputLine &line, double &d, char &ch)$/;"	f	file:
ReadFile	src/Plane/PlaneFileGlue.cpp	/^PlaneGlue::ReadFile(Plane &plane, Path path)$/;"	f	class:PlaneGlue
ReadFile	src/Waypoint/WaypointDetailsReader.cpp	/^WaypointDetails::ReadFile(TLineReader &reader, Waypoints &way_points,$/;"	f	class:WaypointDetails
ReadFileFromProfile	src/Waypoint/WaypointDetailsReader.cpp	/^WaypointDetails::ReadFileFromProfile(Waypoints &way_points,$/;"	f	class:WaypointDetails
ReadFilename	src/Device/Driver/LX/NanoLogger.cpp	/^ReadFilename(NMEAInputLine &line, RecordedFlightInfo &info)$/;"	f	file:
ReadFirstChar	src/io/CSVLine.cpp	/^CSVLine::ReadFirstChar()$/;"	f	class:CSVLine
ReadFlight	src/Device/Driver/Volkslogger/Protocol.cpp	/^Volkslogger::ReadFlight(Port &port, unsigned databaud,$/;"	f	class:Volkslogger
ReadFlightInfo	src/Device/Driver/FLARM/Logger.cpp	/^FlarmDevice::ReadFlightInfo(RecordedFlightInfo &flight,$/;"	f	class:FlarmDevice
ReadFlightList	src/Device/Descriptor.cpp	/^DeviceDescriptor::ReadFlightList(RecordedFlightList &flight_list,$/;"	f	class:DeviceDescriptor
ReadFlightList	src/Device/Driver.cpp	/^AbstractDevice::ReadFlightList(RecordedFlightList &flight_list,$/;"	f	class:AbstractDevice
ReadFlightList	src/Device/Driver/CAI302/Logger.cpp	/^CAI302Device::ReadFlightList(RecordedFlightList &flight_list,$/;"	f	class:CAI302Device
ReadFlightList	src/Device/Driver/FLARM/Logger.cpp	/^FlarmDevice::ReadFlightList(RecordedFlightList &flight_list,$/;"	f	class:FlarmDevice
ReadFlightList	src/Device/Driver/Flytec/Logger.cpp	/^FlytecDevice::ReadFlightList(RecordedFlightList &flight_list,$/;"	f	class:FlytecDevice
ReadFlightList	src/Device/Driver/IMI/Logger.cpp	/^IMIDevice::ReadFlightList(RecordedFlightList &flight_list,$/;"	f	class:IMIDevice
ReadFlightList	src/Device/Driver/IMI/Protocol/Protocol.cpp	/^IMI::ReadFlightList(Port &port, RecordedFlightList &flight_list,$/;"	f	class:IMI
ReadFlightList	src/Device/Driver/LX/Logger.cpp	/^LXDevice::ReadFlightList(RecordedFlightList &flight_list,$/;"	f	class:LXDevice
ReadFlightList	src/Device/Driver/LX/NanoLogger.cpp	/^Nano::ReadFlightList(Port &port, RecordedFlightList &flight_list,$/;"	f	class:Nano
ReadFlightList	src/Device/Driver/Volkslogger/Logger.cpp	/^VolksloggerDevice::ReadFlightList(RecordedFlightList &flight_list,$/;"	f	class:VolksloggerDevice
ReadFlightList	src/Device/Driver/Volkslogger/Protocol.hpp	/^  ReadFlightList(Port &port, OperationEnvironment &env,$/;"	f	namespace:Volkslogger
ReadFlightListInner	src/Device/Driver/CAI302/Logger.cpp	/^ReadFlightListInner(Port &port, RecordedFlightList &flight_list,$/;"	f	file:
ReadFlightListInner	src/Device/Driver/LX/Logger.cpp	/^ReadFlightListInner(Port &port, RecordedFlightList &flight_list,$/;"	f	file:
ReadFlightListInner	src/Device/Driver/Volkslogger/Logger.cpp	/^ReadFlightListInner(Port &port,$/;"	f	file:
ReadFlightListJob	src/Logger/ExternalLogger.cpp	/^  ReadFlightListJob(DeviceDescriptor &_device,$/;"	f	class:ReadFlightListJob
ReadFlightListJob	src/Logger/ExternalLogger.cpp	/^class ReadFlightListJob {$/;"	c	file:
ReadFloat	src/Cloud/Serialiser.hpp	/^  float ReadFloat() {$/;"	f	class:Deserialiser
ReadFromFile	src/Kobo/Model.cpp	/^ReadFromFile(const char *path, off_t offset, void *buffer, size_t size)$/;"	f	file:
ReadFull	src/io/BufferedReader.cxx	/^BufferedReader::ReadFull(WritableBuffer<void> _dest)$/;"	f	class:BufferedReader
ReadFull	src/io/BufferedReader.cxx	/^BufferedReader::ReadFull(size_t size)$/;"	f	class:BufferedReader
ReadGRecordFromFile	src/Logger/GRecord.cpp	/^GRecord::ReadGRecordFromFile(Path path,$/;"	f	class:GRecord
ReadGeneralInfo	src/Device/Driver/CAI302/Manage.cpp	/^CAI302Device::ReadGeneralInfo(CAI302::GeneralInfo &data,$/;"	f	class:CAI302Device
ReadGeoAngle	src/Device/Parser.cpp	/^ReadGeoAngle(NMEAInputLine &line, Angle &a)$/;"	f	file:
ReadGeoPoint	src/Device/Parser.cpp	/^NMEAParser::ReadGeoPoint(NMEAInputLine &line, GeoPoint &value_r)$/;"	f	class:NMEAParser
ReadHex	src/io/CSVLine.cpp	/^CSVLine::ReadHex(unsigned default_value)$/;"	f	class:CSVLine
ReadHexChecked	src/io/CSVLine.cpp	/^CSVLine::ReadHexChecked(unsigned &value_r)$/;"	f	class:CSVLine
ReadIGCDeclaration	src/Task/TaskFileIGC.cpp	/^ReadIGCDeclaration(Path path, IGCDeclarationHeader &header,$/;"	f	file:
ReadIGCMetaData	src/Logger/ExternalLogger.cpp	/^ReadIGCMetaData(Path path, IGCHeader &header, BrokenDate &date)$/;"	f	file:
ReadInfo	src/Device/Driver/Volkslogger/Protocol.hpp	/^  ReadInfo(Port &port, OperationEnvironment &env,$/;"	f	namespace:Volkslogger
ReadLanguageFile	src/Language/LanguageGlue.cpp	/^ReadLanguageFile()$/;"	f
ReadLargeReply	src/Device/Driver/CAI302/Protocol.cpp	/^CAI302::ReadLargeReply(Port &port, void *buffer, unsigned max_size,$/;"	f	class:CAI302
ReadLatitude	src/Device/Parser.cpp	/^ReadLatitude(NMEAInputLine &line, Angle &value_r)$/;"	f	file:
ReadLine	src/Device/Util/NMEAReader.cpp	/^PortNMEAReader::ReadLine(TimeoutClock timeout)$/;"	f	class:PortNMEAReader
ReadLine	src/Logger/FlightParser.cpp	/^FlightParser::ReadLine()$/;"	f	class:FlightParser
ReadLine	src/Logger/FlightParser.cpp	/^FlightParser::ReadLine(BrokenDateTime &dt)$/;"	f	class:FlightParser
ReadLine	src/Terrain/WorldFile.cpp	/^ReadLine(NLineReader &reader, double &value_r)$/;"	f	file:
ReadLine	src/io/BufferedReader.cxx	/^BufferedReader::ReadLine()$/;"	f	class:BufferedReader
ReadLine	src/io/ConvertLineReader.cpp	/^ConvertLineReader::ReadLine()$/;"	f	class:ConvertLineReader
ReadLine	src/io/FileLineReader.cpp	/^FileLineReaderA::ReadLine()$/;"	f	class:FileLineReaderA
ReadLine	src/io/ZipLineReader.cpp	/^ZipLineReaderA::ReadLine()$/;"	f	class:ZipLineReaderA
ReadLogbookContent	src/Device/Driver/LX/NanoLogger.cpp	/^ReadLogbookContent(PortNMEAReader &reader, RecordedFlightInfo &info,$/;"	f	file:
ReadLogbookContents	src/Device/Driver/LX/NanoLogger.cpp	/^ReadLogbookContents(PortNMEAReader &reader, RecordedFlightList &flight_list,$/;"	f	file:
ReadLogbookLine	src/Device/Driver/LX/NanoLogger.cpp	/^ReadLogbookLine(PortNMEAReader &reader, TimeoutClock timeout)$/;"	f	file:
ReadLongitude	src/Device/Parser.cpp	/^ReadLongitude(NMEAInputLine &line, Angle &value_r)$/;"	f	file:
ReadMapSettings	src/MapWindow/MapWindowBlackboard.cpp	/^MapWindowBlackboard::ReadMapSettings(const MapSettings$/;"	f	class:MapWindowBlackboard
ReadNavpoint	src/Device/Driver/CAI302/Manage.cpp	/^CAI302Device::ReadNavpoint(unsigned index, CAI302::Navpoint &navpoint,$/;"	f	class:CAI302Device
ReadNavpointCount	src/Device/Driver/CAI302/Manage.cpp	/^CAI302Device::ReadNavpointCount(OperationEnvironment &env)$/;"	f	class:CAI302Device
ReadNonNegativeAngle	src/Airspace/AirspaceParser.cpp	/^ReadNonNegativeAngle(StringParser<TCHAR> &input, double max_degrees)$/;"	f	file:
ReadNonNegativeAngleTNP	src/Airspace/AirspaceParser.cpp	/^ReadNonNegativeAngleTNP(StringParser<TCHAR> &input, Angle &value_r,$/;"	f	file:
ReadOneChar	src/io/CSVLine.cpp	/^CSVLine::ReadOneChar()$/;"	f	class:CSVLine
ReadPilotList	src/Device/Driver/CAI302/Manage.cpp	/^CAI302Device::ReadPilotList(std::vector<CAI302::Pilot> &list,$/;"	f	class:CAI302Device
ReadPixel	src/ui/canvas/memory/PixelTraits.hpp	/^  static color_type ReadPixel(const_pointer p) {$/;"	f	struct:BGRAPixelTraits
ReadPixel	src/ui/canvas/memory/PixelTraits.hpp	/^  static color_type ReadPixel(const_pointer p) {$/;"	f	struct:GreyscalePixelTraits
ReadPoint	src/Replay/IgcReplay.cpp	/^IgcReplay::ReadPoint(IGCFix &fix, NMEAInfo &basic)$/;"	f	class:IgcReplay
ReadPolar	src/Plane/PlaneFileGlue.cpp	/^ReadPolar(const char *string, Plane &plane)$/;"	f	file:
ReadPolarFileFromProfile	src/Polar/PolarGlue.cpp	/^ReadPolarFileFromProfile(PolarInfo &polar)$/;"	f	file:
ReadPortType	src/Profile/DeviceConfig.cpp	/^ReadPortType(const ProfileMap &map, unsigned n, DeviceConfig::PortType &type)$/;"	f	file:
ReadResourceLanguageFile	src/Language/LanguageGlue.cpp	/^ReadResourceLanguageFile(const TCHAR *resource)$/;"	f	file:
ReadShortReply	src/Device/Driver/CAI302/Protocol.cpp	/^CAI302::ReadShortReply(Port &port, void *buffer, unsigned max_size,$/;"	f	class:CAI302
ReadSpeedVector	src/Device/Driver/CAI302/Parser.cpp	/^ReadSpeedVector(NMEAInputLine &line, SpeedVector &value_r)$/;"	f	file:
ReadSpeedVector	src/Device/Driver/Condor.cpp	/^ReadSpeedVector(NMEAInputLine &line, SpeedVector &value_r)$/;"	f	file:
ReadSpeedVector	src/Device/Driver/Eye.cpp	/^EyeDevice::ReadSpeedVector(NMEAInputLine &line, SpeedVector &value_r)$/;"	f	class:EyeDevice
ReadSpeedVector	src/Device/Driver/ILEC.cpp	/^ReadSpeedVector(NMEAInputLine &line, SpeedVector &value_r)$/;"	f	file:
ReadSpeedVector	src/Device/Driver/LX/Parser.cpp	/^ReadSpeedVector(NMEAInputLine &line, SpeedVector &value_r)$/;"	f	file:
ReadSpeedVector	src/Device/Driver/Leonardo.cpp	/^ReadSpeedVector(NMEAInputLine &line, SpeedVector &value_r)$/;"	f	file:
ReadString	src/Cloud/Serialiser.cpp	/^Deserialiser::ReadString()$/;"	f	class:Deserialiser
ReadString	src/Device/Driver/LX/Parser.cpp	/^ReadString(NMEAInputLine &line, NarrowString<N> &value)$/;"	f	file:
ReadString	src/system/FileUtil.cpp	/^File::ReadString(Path path, char *buffer, size_t size)$/;"	f	class:File
ReadT	src/Cloud/Serialiser.hpp	/^  void ReadT(T &value) {$/;"	f	class:Deserialiser
ReadTextFile	src/XML/Parser.cpp	/^ReadTextFile(Path path)$/;"	f	file:
ReadTime	src/Device/Driver/LX/NanoLogger.cpp	/^ReadTime(NMEAInputLine &line, BrokenTime &time)$/;"	f	file:
ReadTime	src/Device/Parser.cpp	/^NMEAParser::ReadTime(NMEAInputLine &line, BrokenTime &broken_time,$/;"	f	class:NMEAParser
ReadTimeout	src/Kobo/WPASupplicant.cpp	/^WPASupplicant::ReadTimeout(void *buffer, size_t length, int timeout_ms)$/;"	f	class:WPASupplicant
ReadUIState	src/MapWindow/MapWindowBlackboard.hpp	/^  void ReadUIState(const UIState &new_value) {$/;"	f	class:MapWindowBlackboard
ReadUnsigned	src/Plane/PlaneFileGlue.cpp	/^ReadUnsigned(const char *string, unsigned &out)$/;"	f	file:
ReadUnsigned	src/util/StringParser.hxx	/^	bool ReadUnsigned(unsigned &value_r, int base=10) {$/;"	f	class:StringParser
ReadUntilRMC	src/Replay/NmeaReplay.cpp	/^NmeaReplay::ReadUntilRMC(NMEAInfo &data)$/;"	f	class:NmeaReplay
ReadValues	src/Dialogs/Task/Manager/TaskPropertiesPanel.cpp	/^TaskPropertiesPanel::ReadValues()$/;"	f	class:TaskPropertiesPanel
ReadValues	src/Dialogs/Task/TaskPointDialog.cpp	/^TaskPointWidget::ReadValues()$/;"	f	class:TaskPointWidget
ReadVariation	src/Device/Parser.cpp	/^ReadVariation(NMEAInputLine &line, Angle &value_r)$/;"	f	file:
ReadWaypointFile	src/Waypoint/WaypointReader.cpp	/^ReadWaypointFile(Path path, WaypointFileType file_type,$/;"	f
ReadWaypointFile	src/Waypoint/WaypointReader.cpp	/^ReadWaypointFile(Path path, Waypoints &way_points,$/;"	f
ReadWaypointFile	src/Waypoint/WaypointReader.cpp	/^ReadWaypointFile(struct zzip_dir *dir, const char *path,$/;"	f
ReadWorldFile	src/Terrain/WorldFile.cpp	/^ReadWorldFile(NLineReader &reader, WorldFileData &data)$/;"	f	file:
ReadWorldFile	src/Terrain/WorldFile.cpp	/^ReadWorldFile(struct zzip_dir *dir, const char *path, WorldFileData &data)$/;"	f	file:
Reader	src/io/Reader.hxx	/^class Reader {$/;"	c
Ready	src/Replay/CatmullRomInterpolator.hpp	/^  Ready() const$/;"	f	class:CatmullRomInterpolator
Ready_Time_Check	src/Computer/ConditionMonitor/ConditionMonitor.cpp	/^ConditionMonitor::Ready_Time_Check(double T, bool *restart)$/;"	f	class:ConditionMonitor
Ready_Time_Notification	src/Computer/ConditionMonitor/ConditionMonitor.cpp	/^ConditionMonitor::Ready_Time_Notification(double T)$/;"	f	class:ConditionMonitor
RealPath	src/LocalPath.cpp	/^RealPath(Path path)$/;"	f	file:
RealState	src/Blackboard/DeviceBlackboard.hpp	/^  const NMEAInfo &RealState() const { return real_data; }$/;"	f	class:DeviceBlackboard
RealState	src/Blackboard/DeviceBlackboard.hpp	/^  const NMEAInfo &RealState(unsigned i) const {$/;"	f	class:DeviceBlackboard
Realize	src/Audio/SLES/Object.hpp	/^    SLresult Realize(bool async) {$/;"	f	class:SLES::Object
Reboot	src/Device/Driver/CAI302/Manage.cpp	/^CAI302Device::Reboot(OperationEnvironment &env)$/;"	f	class:CAI302Device
Reboot	src/Device/Driver/CAI302/Protocol.cpp	/^CAI302::Reboot(Port &port, OperationEnvironment &env)$/;"	f	class:CAI302
Reboot	src/Dialogs/Device/ManageFlarmDialog.cpp	/^    Reboot,$/;"	e	enum:final::Controls	file:
Receive	src/Device/Driver/FLARM/TextProtocol.cpp	/^FlarmDevice::Receive(const char *prefix, char *buffer, size_t length,$/;"	f	class:FlarmDevice
Receive	src/Device/Driver/IMI/Protocol/Communication.cpp	/^IMI::Receive(Port &port, OperationEnvironment &env,$/;"	f	class:IMI
ReceiveCalculated	src/ActionInterface.cpp	/^XCSoarInterface::ReceiveCalculated()$/;"	f	class:XCSoarInterface
ReceiveEscaped	src/Device/Driver/FLARM/BinaryProtocol.cpp	/^FLARM::ReceiveEscaped(Port &port, void *buffer, size_t length,$/;"	f	class:FLARM
ReceiveEscaped	src/Device/Driver/FLARM/Device.hpp	/^  bool ReceiveEscaped(void *data, size_t length,$/;"	f	class:FlarmDevice
ReceiveFrameHeader	src/Device/Driver/FLARM/BinaryProtocol.cpp	/^FlarmDevice::ReceiveFrameHeader(FLARM::FrameHeader &header,$/;"	f	class:FlarmDevice
ReceiveGPS	src/ActionInterface.cpp	/^XCSoarInterface::ReceiveGPS()$/;"	f	class:XCSoarInterface
ReceiveLine	src/Device/Driver/Flytec/Logger.cpp	/^ReceiveLine(Port &port, char *buffer, size_t length,$/;"	f	file:
ReceivePacket	src/Device/Driver/LX/Protocol.cpp	/^LX::ReceivePacket(Port &port, Command command,$/;"	f	class:LX
ReceivePacketRetry	src/Device/Driver/LX/Protocol.cpp	/^LX::ReceivePacketRetry(Port &port, Command command,$/;"	f	class:LX
ReceiveSomeUnescape	src/Device/Driver/FLARM/BinaryProtocol.cpp	/^ReceiveSomeUnescape(Port &port, uint8_t *buffer, size_t length,$/;"	f	file:
Reciprocal	src/Geo/SpeedVector.hpp	/^  SpeedVector Reciprocal() const {$/;"	f	struct:SpeedVector
Reciprocal	src/Math/Angle.cpp	/^Angle::Reciprocal() const$/;"	f	class:Angle
Reconnect	src/Dialogs/Device/PortMonitor.cpp	/^PortMonitorWidget::Reconnect()$/;"	f	class:PortMonitorWidget
ReconnectCurrent	src/Dialogs/Device/DeviceListDialog.cpp	/^DeviceListWidget::ReconnectCurrent()$/;"	f	class:DeviceListWidget
Record	src/Computer/GlideRatioCalculator.hpp	/^  struct Record {$/;"	s	class:GlideRatioCalculator
Record	src/FLARM/NameDatabase.hpp	/^    Record(FlarmId _id, const TCHAR *_name)$/;"	f	struct:FlarmNameDatabase::Record
Record	src/FLARM/NameDatabase.hpp	/^  struct Record {$/;"	s	class:FlarmNameDatabase
Record	src/Replay/CatmullRomInterpolator.hpp	/^  struct Record {$/;"	s	class:CatmullRomInterpolator
RecordMap	src/FLARM/FlarmNetDatabase.hpp	/^  typedef std::map<FlarmId, FlarmNetRecord> RecordMap;$/;"	t	class:FlarmNetDatabase
RecordedFlightInfo	src/Device/RecordedFlight.hpp	/^struct RecordedFlightInfo : FlightInfo {$/;"	s
RecordedFlightList	src/Device/RecordedFlight.hpp	/^class RecordedFlightList : public StaticArray<RecordedFlightInfo, 128u> {$/;"	c
Rectangle	src/util/QuadTree.hxx	/^	struct Rectangle {$/;"	s	class:QuadTree
RecursivelySuspensibleThread	src/thread/RecursivelySuspensibleThread.hpp	/^  RecursivelySuspensibleThread(const char *_name)$/;"	f	class:RecursivelySuspensibleThread
RecursivelySuspensibleThread	src/thread/RecursivelySuspensibleThread.hpp	/^class RecursivelySuspensibleThread : public SuspensibleThread {$/;"	c
Recycle	src/Android/Bitmap.hpp	/^  static void Recycle(JNIEnv *env, jobject bitmap) {$/;"	f	class:AndroidBitmap
Red	src/ui/canvas/PortableColor.hpp	/^  constexpr uint8_t Red() const {$/;"	f	class:BGR8Color
Red	src/ui/canvas/PortableColor.hpp	/^  constexpr uint8_t Red() const {$/;"	f	class:BGRA8Color
Red	src/ui/canvas/PortableColor.hpp	/^  constexpr uint8_t Red() const {$/;"	f	class:RGB8Color
Red	src/ui/canvas/gdi/Color.hpp	/^  uint8_t Red() const$/;"	f	class:Color
Red	src/ui/canvas/memory/Color.hpp	/^  uint8_t Red() const$/;"	f	class:Color
Red	src/ui/canvas/opengl/Color.hpp	/^  Red() const$/;"	f	class:Color
Refresh	src/Cloud/Client.cpp	/^CloudClientContainer::Refresh(CloudClient &client,$/;"	f	class:CloudClientContainer
Refresh	src/FLARM/Traffic.hpp	/^  bool Refresh(double Time) {$/;"	f	class:FlarmTraffic::AircraftType
Refresh	src/GliderLink/Traffic.hpp	/^  bool Refresh(double Time) {$/;"	f	struct:GliderLinkTraffic
RefreshAltitudeControl	src/Dialogs/Settings/dlgBasicSettings.cpp	/^FlightSetupPanel::RefreshAltitudeControl()$/;"	f	class:FlightSetupPanel
RefreshCalculator	src/Dialogs/Task/TargetDialog.cpp	/^TargetWidget::RefreshCalculator()$/;"	f	class:TargetWidget
RefreshEditContent	src/Dialogs/Settings/dlgConfigInfoboxes.cpp	/^InfoBoxesConfigWidget::RefreshEditContent()$/;"	f	class:InfoBoxesConfigWidget
RefreshEditContentDescription	src/Dialogs/Settings/dlgConfigInfoboxes.cpp	/^InfoBoxesConfigWidget::RefreshEditContentDescription()$/;"	f	class:InfoBoxesConfigWidget
RefreshLayout	src/Form/GridView.cpp	/^GridView::RefreshLayout()$/;"	f	class:GridView
RefreshList	src/Dialogs/Device/DeviceListDialog.cpp	/^DeviceListWidget::RefreshList()$/;"	f	class:DeviceListWidget
RefreshList	src/Dialogs/DownloadFilePicker.cpp	/^DownloadFilePickerWidget::RefreshList()$/;"	f	class:DownloadFilePickerWidget
RefreshList	src/Dialogs/FileManager.cpp	/^ManagedFileListWidget::RefreshList()$/;"	f	class:ManagedFileListWidget
RefreshPasteButton	src/Dialogs/Settings/dlgConfigInfoboxes.cpp	/^  void RefreshPasteButton() {$/;"	f	class:final
RefreshTargetPoint	src/Dialogs/Task/TargetDialog.cpp	/^TargetWidget::RefreshTargetPoint()$/;"	f	class:TargetWidget
RefreshView	src/Dialogs/Task/Manager/TaskEditPanel.cpp	/^TaskEditPanel::RefreshView()$/;"	f	class:TaskEditPanel
RefreshView	src/Dialogs/Task/Manager/TaskListPanel.cpp	/^TaskListPanel::RefreshView()$/;"	f	class:TaskListPanel
RefreshView	src/Dialogs/Task/Manager/TaskPropertiesPanel.cpp	/^TaskPropertiesPanel::RefreshView()$/;"	f	class:TaskPropertiesPanel
RefreshView	src/Dialogs/Task/OptionalStartsDialog.cpp	/^  void RefreshView() {$/;"	f	class:OptionStartsWidget
RefreshView	src/Dialogs/Task/TaskPointDialog.cpp	/^TaskPointWidget::RefreshView()$/;"	f	class:TaskPointWidget
Register	src/lua/Class.hxx	/^	static void Register(lua_State *L) {$/;"	f	struct:Lua::Class
Register	src/lua/InputEvent.cpp	/^  void Register(int this_idx) {$/;"	f	class:final	file:
RegisterCallback	src/Audio/SLES/AndroidSimpleBufferQueue.hpp	/^    SLresult RegisterCallback(slAndroidSimpleBufferQueueCallback callback,$/;"	f	class:SLES::AndroidSimpleBufferQueue
RegistryHandler	src/ui/event/poll/WaylandQueue.cpp	/^WaylandEventQueue::RegistryHandler(struct wl_registry *registry, uint32_t id,$/;"	f	class:UI::WaylandEventQueue
RegistryKey	src/Config/Registry.hpp	/^  RegistryKey(HKEY hParent, const TCHAR *key, bool read_only) {$/;"	f	class:RegistryKey
RegistryKey	src/Config/Registry.hpp	/^  RegistryKey(RegistryKey &&other):hKey(other.hKey) {$/;"	f	class:RegistryKey
RegistryKey	src/Config/Registry.hpp	/^class RegistryKey {$/;"	c
Reinitialise	src/Look/AirspaceLook.cpp	/^AirspaceLook::Reinitialise(const AirspaceRendererSettings &settings)$/;"	f	class:AirspaceLook
Reinitialise	src/Look/WaypointLook.cpp	/^WaypointLook::Reinitialise(const WaypointRendererSettings &settings)$/;"	f	class:WaypointLook
ReinitialiseLayout	src/Dialogs/WidgetDialog.cpp	/^WidgetDialog::ReinitialiseLayout(const PixelRect &parent_rc)$/;"	f	class:WidgetDialog
ReinitialiseLayout	src/Form/Form.cpp	/^WndForm::ReinitialiseLayout(const PixelRect &parent_rc)$/;"	f	class:WndForm
ReinitialiseLayout	src/Look/InfoBoxLook.cpp	/^InfoBoxLook::ReinitialiseLayout(unsigned width)$/;"	f	class:InfoBoxLook
ReinitialiseLayout	src/Look/Look.cpp	/^Look::ReinitialiseLayout(unsigned infobox_width)$/;"	f	class:Look
ReinitialiseLayout	src/MainWindow.cpp	/^MainWindow::ReinitialiseLayout()$/;"	f	class:MainWindow
ReinitialiseLayoutTA	src/MainWindow.cpp	/^MainWindow::ReinitialiseLayoutTA(PixelRect rc,$/;"	f	class:MainWindow
ReinitialiseLayout_flarm	src/MainWindow.cpp	/^MainWindow::ReinitialiseLayout_flarm(PixelRect rc,$/;"	f	class:MainWindow
ReinitialiseLayout_vario	src/MainWindow.cpp	/^MainWindow::ReinitialiseLayout_vario(const InfoBoxLayout::Layout &layout)$/;"	f	class:MainWindow
RelativePath	src/LocalPath.cpp	/^RelativePath(Path path)$/;"	f
RelativeTo	src/system/Path.cpp	/^Path::RelativeTo(Path parent) const$/;"	f	class:Path
RelativeTo	src/system/Path.hpp	/^  Path RelativeTo(Path parent) const {$/;"	f	class:AllocatedPath
Reload	src/Weather/Rasp/RaspCache.cpp	/^RaspCache::Reload(BrokenTime time_local, OperationEnvironment &operation)$/;"	f	class:RaspCache
ReloadFlarmDatabases	src/FLARM/Glue.cpp	/^ReloadFlarmDatabases()$/;"	f
Relocate	src/Dialogs/Task/OptionalStartsDialog.cpp	/^OptionStartsWidget::Relocate(unsigned ItemIndex)$/;"	f	class:OptionStartsWidget
Relocate	src/Engine/Task/Factory/AbstractTaskFactory.cpp	/^AbstractTaskFactory::Relocate(const unsigned position, $/;"	f	class:AbstractTaskFactory
Relocate	src/Engine/Task/Ordered/OrderedTask.cpp	/^OrderedTask::Relocate(const unsigned position, WaypointPtr &&waypoint)$/;"	f	class:OrderedTask
RelocateOptionalStart	src/Engine/Task/Ordered/OrderedTask.cpp	/^OrderedTask::RelocateOptionalStart(const unsigned position,$/;"	f	class:OrderedTask
Remaining	src/Engine/GlideSolvers/GlueGlideState.cpp	/^GlideState::Remaining(const TaskPoint &tp,$/;"	f	class:GlideState
RemainingDistance	src/Dialogs/StatusPanels/TaskStatusPanel.cpp	/^  RemainingDistance,$/;"	e	enum:Controls	file:
RemainingPercent	src/Android/Battery.cpp	/^unsigned RemainingPercent = 0;$/;"	m	namespace:Power::Battery	file:
RemainingPercent	src/Hardware/Battery.cpp	/^    unsigned RemainingPercent = 0;$/;"	m	namespace:Power::Battery	file:
RemainingPercentValid	src/Android/Battery.cpp	/^bool RemainingPercentValid = false;$/;"	m	namespace:Power::Battery	file:
RemainingPercentValid	src/Hardware/Battery.cpp	/^    bool RemainingPercentValid = false;$/;"	m	namespace:Power::Battery	file:
RemainingTime	src/Dialogs/StatusPanels/TaskStatusPanel.cpp	/^  RemainingTime,$/;"	e	enum:Controls	file:
Remove	src/Cloud/Client.cpp	/^CloudClientContainer::Remove(CloudClient &client)$/;"	f	class:CloudClientContainer
Remove	src/Cloud/Thermal.cpp	/^CloudThermalContainer::Remove(CloudThermal &thermal)$/;"	f	class:CloudThermalContainer
Remove	src/Dialogs/Task/OptionalStartsDialog.cpp	/^OptionStartsWidget::Remove(unsigned i)$/;"	f	class:OptionStartsWidget
Remove	src/Engine/Task/Factory/AbstractTaskFactory.cpp	/^AbstractTaskFactory::Remove(const unsigned position, $/;"	f	class:AbstractTaskFactory
Remove	src/Engine/Task/Ordered/OrderedTask.cpp	/^OrderedTask::Remove(const unsigned position)$/;"	f	class:OrderedTask
Remove	src/Engine/Waypoint/Waypoints.cpp	/^Waypoints::WaypointNameTree::Remove(const WaypointPtr &wp)$/;"	f	class:Waypoints::WaypointNameTree
Remove	src/FLARM/ColorDatabase.hpp	/^  void Remove(FlarmId id) {$/;"	f	class:FlarmColorDatabase
Remove	src/lua/InputEvent.cpp	/^  bool Remove(const LuaInputEvent* code) {$/;"	f	class:LuaEventRegistry
Remove	src/net/http/Multi.cxx	/^CurlMulti::Remove(CURL *easy)$/;"	f	class:CurlMulti
Remove	src/ui/window/custom/WList.hpp	/^  void Remove(Window &w) {$/;"	f	class:WindowList
Remove	src/util/Cache.hxx	/^	void Remove(K &&key) {$/;"	f	class:Cache
Remove	src/util/RadixTree.hpp	/^    bool Remove(const T &value) {$/;"	f	struct:RadixTree::LeafList
Remove	src/util/RadixTree.hpp	/^  bool Remove(const TCHAR *key, const T &value) {$/;"	f	class:RadixTree
Remove	src/util/RadixTree.hpp	/^  void Remove(const TCHAR *key) {$/;"	f	class:RadixTree
RemoveAllPoints	src/Engine/Task/Ordered/OrderedTask.cpp	/^OrderedTask::RemoveAllPoints()$/;"	f	class:OrderedTask
RemoveClicked	src/Dialogs/Weather/NOAADetails.cpp	/^NOAADetailsWidget::RemoveClicked()$/;"	f	class:NOAADetailsWidget
RemoveClicked	src/Dialogs/Weather/NOAAList.cpp	/^NOAAListWidget::RemoveClicked()$/;"	f	class:NOAAListWidget
RemoveExcessTPsPerTaskType	src/Engine/Task/Factory/AbstractTaskFactory.cpp	/^AbstractTaskFactory::RemoveExcessTPsPerTaskType()$/;"	f	class:AbstractTaskFactory
RemoveFromTask	src/Dialogs/Waypoint/WaypointCommandsWidget.cpp	/^RemoveFromTask(ProtectedTaskManager &task_manager,$/;"	f	file:
RemoveFromTask	src/Task/MapTaskManager.cpp	/^MapTaskManager::RemoveFromTask(const Waypoint &wp)$/;"	f	class:MapTaskManager
RemoveFromTask	src/Task/MapTaskManager.cpp	/^RemoveFromTask(OrderedTask &task, const Waypoint &waypoint)$/;"	f	file:
RemoveIf	src/util/Cache.hxx	/^	void RemoveIf(P &&p) {$/;"	f	class:Cache
RemoveListener	src/Blackboard/LiveBlackboard.cpp	/^LiveBlackboard::RemoveListener(BlackboardListener &listener)$/;"	f	class:LiveBlackboard
RemoveListener	src/Interface.hpp	/^  static inline void RemoveListener(BlackboardListener &listener) {$/;"	f	namespace:CommonInterface
RemoveNetwork	src/Kobo/WPASupplicant.cpp	/^WPASupplicant::RemoveNetwork(unsigned id)$/;"	f	class:WPASupplicant
RemoveOldest	src/util/Cache.hxx	/^	Item &RemoveOldest() {$/;"	f	class:Cache
RemoveOptionalStart	src/Engine/Task/Ordered/OrderedTask.cpp	/^OrderedTask::RemoveOptionalStart(const unsigned position)$/;"	f	class:OrderedTask
RemovePersistent	src/lua/InputEvent.cpp	/^  void RemovePersistent() {$/;"	f	class:final
RemovePersistent	src/lua/Persistent.cpp	/^Lua::RemovePersistent(lua_State *L, void *p)$/;"	f	class:Lua
RemovePointer	src/ui/event/poll/linux/MergeMouse.hpp	/^  void RemovePointer() {$/;"	f	class:UI::final
RemovePortListener	src/Device/MultipleDevices.cpp	/^MultipleDevices::RemovePortListener(PortListener &listener)$/;"	f	class:MultipleDevices
RemoveSource	src/Audio/PCMMixerDataSource.cpp	/^PCMMixerDataSource::RemoveSource(PCMDataSource &source)$/;"	f	class:PCMMixerDataSource
RemoveValue	src/util/RadixTree.hpp	/^    bool RemoveValue(const T &value) {$/;"	f	struct:RadixTree::Node
RemoveValue	src/util/RadixTree.hpp	/^    bool RemoveValue(const TCHAR *key, const T &value) {$/;"	f	struct:RadixTree::Node
RemoveValues	src/util/RadixTree.hpp	/^    void RemoveValues() {$/;"	f	struct:RadixTree::Node
RemoveValues	src/util/RadixTree.hpp	/^    void RemoveValues(const TCHAR *key) {$/;"	f	struct:RadixTree::Node
Rename	src/system/FileUtil.hpp	/^  Rename(Path oldpath, Path newpath)$/;"	f	namespace:File
RenameTask	src/Dialogs/Task/Manager/TaskListPanel.cpp	/^TaskListPanel::RenameTask()$/;"	f	class:TaskListPanel
Render	src/CrossSection/AirspaceXSRenderer.cpp	/^AirspaceIntersectionVisitorSlice::Render(const AbstractAirspace &as) const$/;"	f	class:AirspaceIntersectionVisitorSlice
Render	src/MapWindow/GlueMapWindowEvents.cpp	/^GlueMapWindow::Render(Canvas &canvas, const PixelRect &rc)$/;"	f	class:GlueMapWindow
Render	src/MapWindow/MapWindowRender.cpp	/^MapWindow::Render(Canvas &canvas, const PixelRect &rc)$/;"	f	class:MapWindow
Render	src/PopupMessage.cpp	/^PopupMessage::Render()$/;"	f	class:PopupMessage
RenderAirspace	src/MapWindow/MapWindowRender.cpp	/^MapWindow::RenderAirspace(Canvas &canvas)$/;"	f	class:MapWindow
RenderAirspace	src/MapWindow/TargetMapWindow.cpp	/^TargetMapWindow::RenderAirspace(Canvas &canvas)$/;"	f	class:TargetMapWindow
RenderAxis	src/Renderer/TraceHistoryRenderer.cpp	/^TraceHistoryRenderer::RenderAxis(ChartRenderer &chart,$/;"	f	class:TraceHistoryRenderer
RenderBarograph	src/Renderer/BarographRenderer.cpp	/^RenderBarograph(Canvas &canvas, const PixelRect rc,$/;"	f
RenderBarographSpark	src/Renderer/BarographRenderer.cpp	/^RenderBarographSpark(Canvas &canvas, const PixelRect rc,$/;"	f
RenderBox	src/CrossSection/AirspaceXSRenderer.cpp	/^AirspaceIntersectionVisitorSlice::RenderBox(const PixelRect rc,$/;"	f	class:AirspaceIntersectionVisitorSlice
RenderClimbChart	src/Renderer/ClimbChartRenderer.cpp	/^RenderClimbChart(Canvas &canvas, const PixelRect rc,$/;"	f
RenderFAISector	src/Renderer/FAITriangleAreaRenderer.cpp	/^RenderFAISector(Canvas &canvas, const WindowProjection &projection,$/;"	f
RenderFAISectors	src/Gauge/TaskView.cpp	/^RenderFAISectors(Canvas &canvas, const WindowProjection &projection,$/;"	f	file:
RenderFAISectors	src/MapWindow/MapWindowContest.cpp	/^RenderFAISectors(Canvas &canvas, const WindowProjection &projection,$/;"	f	file:
RenderFinalGlideShading	src/MapWindow/MapWindowRender.cpp	/^MapWindow::RenderFinalGlideShading(Canvas &canvas)$/;"	f	class:MapWindow
RenderGlide	src/MapWindow/MapWindowRender.cpp	/^MapWindow::RenderGlide(Canvas &canvas)$/;"	f	class:MapWindow
RenderGlidePolar	src/Renderer/GlidePolarRenderer.cpp	/^RenderGlidePolar(Canvas &canvas, const PixelRect rc,$/;"	f
RenderGlidePolarInfo	src/Renderer/GlidePolarInfoRenderer.cpp	/^RenderGlidePolarInfo(Canvas &canvas, const PixelRect rc,$/;"	f
RenderMacCready	src/Renderer/MacCreadyRenderer.cpp	/^RenderMacCready(Canvas &canvas, const PixelRect rc,$/;"	f
RenderMapScale	src/Renderer/MapScaleRenderer.cpp	/^RenderMapScale(Canvas &canvas,$/;"	f
RenderNOAAStations	src/MapWindow/MapWindowRender.cpp	/^MapWindow::RenderNOAAStations(Canvas &canvas)$/;"	f	class:MapWindow
RenderOLC	src/Renderer/FlightStatisticsRenderer.cpp	/^FlightStatisticsRenderer::RenderOLC(Canvas &canvas, const PixelRect rc,$/;"	f	class:FlightStatisticsRenderer
RenderOverlays	src/MapWindow/MapWindowRender.cpp	/^MapWindow::RenderOverlays(Canvas &canvas)$/;"	f	class:MapWindow
RenderRasp	src/MapWindow/MapWindowRender.cpp	/^MapWindow::RenderRasp(Canvas &canvas)$/;"	f	class:MapWindow
RenderShadowedText	src/Renderer/TextInBox.cpp	/^RenderShadowedText(Canvas &canvas, const TCHAR *text,$/;"	f	file:
RenderSpeed	src/Renderer/TaskSpeedRenderer.cpp	/^RenderSpeed(Canvas &canvas, const PixelRect rc,$/;"	f
RenderTask	src/Renderer/FlightStatisticsRenderer.cpp	/^FlightStatisticsRenderer::RenderTask(Canvas &canvas, const PixelRect rc,$/;"	f	class:FlightStatisticsRenderer
RenderTaskLegs	src/Renderer/TaskLegRenderer.cpp	/^RenderTaskLegs(ChartRenderer &chart,$/;"	f
RenderTemperatureChart	src/Renderer/CuRenderer.cpp	/^RenderTemperatureChart(Canvas &canvas, const PixelRect rc,$/;"	f
RenderTerrain	src/MapWindow/MapWindowRender.cpp	/^MapWindow::RenderTerrain(Canvas &canvas)$/;"	f	class:MapWindow
RenderTerrain	src/MapWindow/TargetMapWindow.cpp	/^TargetMapWindow::RenderTerrain(Canvas &canvas)$/;"	f	class:TargetMapWindow
RenderTerrainAbove	src/MapWindow/MapWindowGlideRange.cpp	/^MapWindow::RenderTerrainAbove(Canvas &canvas, bool working)$/;"	f	class:MapWindow
RenderTopography	src/MapWindow/MapWindowRender.cpp	/^MapWindow::RenderTopography(Canvas &canvas)$/;"	f	class:MapWindow
RenderTopography	src/MapWindow/TargetMapWindow.cpp	/^TargetMapWindow::RenderTopography(Canvas &canvas)$/;"	f	class:TargetMapWindow
RenderTopographyLabels	src/MapWindow/MapWindowRender.cpp	/^MapWindow::RenderTopographyLabels(Canvas &canvas)$/;"	f	class:MapWindow
RenderTopographyLabels	src/MapWindow/TargetMapWindow.cpp	/^TargetMapWindow::RenderTopographyLabels(Canvas &canvas)$/;"	f	class:TargetMapWindow
RenderTrackBearing	src/MapWindow/GlueMapWindowOverlays.cpp	/^GlueMapWindow::RenderTrackBearing(Canvas &canvas, const PixelPoint aircraft_pos)$/;"	f	class:GlueMapWindow
RenderTrackBearing	src/MapWindow/MapWindowRender.cpp	/^MapWindow::RenderTrackBearing(Canvas &canvas, const PixelPoint aircraft_pos)$/;"	f	class:MapWindow
RenderTrail	src/MapWindow/GlueMapWindowOverlays.cpp	/^GlueMapWindow::RenderTrail(Canvas &canvas, const PixelPoint aircraft_pos)$/;"	f	class:GlueMapWindow
RenderTrail	src/MapWindow/MapWindowTrail.cpp	/^MapWindow::RenderTrail(Canvas &canvas, const PixelPoint aircraft_pos)$/;"	f	class:MapWindow
RenderTrail	src/MapWindow/TargetMapWindow.cpp	/^TargetMapWindow::RenderTrail(Canvas &canvas)$/;"	f	class:TargetMapWindow
RenderVario	src/Renderer/TraceHistoryRenderer.cpp	/^TraceHistoryRenderer::RenderVario(Canvas& canvas,$/;"	f	class:TraceHistoryRenderer
RenderVarioHistogram	src/Renderer/VarioHistogramRenderer.cpp	/^RenderVarioHistogram(Canvas &canvas, const PixelRect rc,$/;"	f
RenderWindChart	src/Renderer/WindChartRenderer.cpp	/^RenderWindChart(Canvas &canvas, const PixelRect rc,$/;"	f
RenderbufferStorage	src/ui/canvas/opengl/FBO.cpp	/^FBO::RenderbufferStorage(GLenum target, GLenum internalformat,$/;"	f	class:FBO
RenderedText	src/ui/canvas/custom/Cache.cpp	/^  RenderedText(RenderedText &&other)$/;"	f	struct:RenderedText
RenderedText	src/ui/canvas/custom/Cache.cpp	/^  RenderedText(int id, unsigned width, unsigned height,$/;"	f	struct:RenderedText
RenderedText	src/ui/canvas/custom/Cache.cpp	/^  RenderedText(unsigned _width, unsigned _height, uint8_t *_data)$/;"	f	struct:RenderedText
RenderedText	src/ui/canvas/custom/Cache.cpp	/^  RenderedText(unsigned width, unsigned height, const uint8_t *buffer) {$/;"	f	struct:RenderedText
RenderedText	src/ui/canvas/custom/Cache.cpp	/^struct RenderedText {$/;"	s	file:
Reopen	src/Device/Descriptor.cpp	/^DeviceDescriptor::Reopen(OperationEnvironment &env)$/;"	f	class:DeviceDescriptor
Repaint	src/ui/window/DoubleBufferWindow.hpp	/^  void Repaint() {$/;"	f	class:DoubleBufferWindow
Repeat	src/PopupMessage.cpp	/^PopupMessage::Repeat(Type type)$/;"	f	class:PopupMessage
RepeatBallast	src/Device/Driver/OpenVario.cpp	/^OpenVarioDevice::RepeatBallast(OperationEnvironment &env)$/;"	f	class:OpenVarioDevice
RepeatBugs	src/Device/Driver/OpenVario.cpp	/^OpenVarioDevice::RepeatBugs(OperationEnvironment &env)$/;"	f	class:OpenVarioDevice
RepeatIdealPolar	src/Device/Driver/OpenVario.cpp	/^OpenVarioDevice::RepeatIdealPolar(OperationEnvironment &env)$/;"	f	class:OpenVarioDevice
RepeatMacCready	src/Device/Driver/OpenVario.cpp	/^OpenVarioDevice::RepeatMacCready(OperationEnvironment &env)$/;"	f	class:OpenVarioDevice
RepeatRealPolar	src/Device/Driver/OpenVario.cpp	/^OpenVarioDevice::RepeatRealPolar(OperationEnvironment &env)$/;"	f	class:OpenVarioDevice
RepetitiveSound	src/Dialogs/Settings/Panels/AirspaceConfigPanel.cpp	/^  RepetitiveSound,$/;"	e	enum:ControlIndex	file:
RepetitiveSound	src/Profile/ProfileKeys.cpp	/^const char RepetitiveSound[] = "RepetitiveSound";$/;"	m	namespace:ProfileKeys	file:
Replace	src/Engine/Task/Factory/AbstractTaskFactory.cpp	/^AbstractTaskFactory::Replace(const OrderedTaskPoint &new_tp,$/;"	f	class:AbstractTaskFactory
Replace	src/Engine/Task/Ordered/OrderedTask.cpp	/^OrderedTask::Replace(const OrderedTaskPoint &new_tp, const unsigned position)$/;"	f	class:OrderedTask
Replace	src/Engine/Waypoint/Waypoints.cpp	/^Waypoints::Replace(const WaypointPtr &orig, Waypoint &&replacement)$/;"	f	class:Waypoints
Replace	src/GliderLink/List.hpp	/^  void Replace(const GliderLinkTrafficList &add) {$/;"	f	struct:GliderLinkTrafficList
Replace	src/system/FileUtil.hpp	/^  Replace(Path oldpath, Path newpath)$/;"	f	namespace:File
Replace	src/util/Cache.hxx	/^		void Replace(K &&_key, U &&_data) {$/;"	f	struct:Cache::Pair
Replace	src/util/Cache.hxx	/^		void Replace(K &&_key, U &&value) {$/;"	f	class:Cache::Item
ReplaceBaseName	src/system/PathName.cpp	/^ReplaceBaseName(TCHAR *path, const TCHAR *new_base)$/;"	f
ReplaceData	src/util/Cache.hxx	/^		void ReplaceData(U &&_data) {$/;"	f	struct:Cache::Pair
ReplaceData	src/util/Cache.hxx	/^		void ReplaceData(U &&value) {$/;"	f	class:Cache::Item
ReplaceHighestByte64	src/Tracking/SkyLines/Key.cpp	/^ReplaceHighestByte64(uint64_t value, uint64_t new_highest_byte)$/;"	f	file:
ReplaceInTask	src/Dialogs/Waypoint/WaypointCommandsWidget.cpp	/^ReplaceInTask(ProtectedTaskManager &task_manager,$/;"	f	file:
ReplaceInTask	src/Task/MapTaskManager.cpp	/^MapTaskManager::ReplaceInTask(WaypointPtr &&waypoint)$/;"	f	class:MapTaskManager
ReplaceOptionalStart	src/Engine/Task/Ordered/OrderedTask.cpp	/^OrderedTask::ReplaceOptionalStart(const OrderedTaskPoint &new_tp,$/;"	f	class:OrderedTask
ReplaceProfilePathBase	src/Dialogs/Waypoint/WaypointList.cpp	/^ReplaceProfilePathBase(DataFieldEnum &df, unsigned i,$/;"	f	file:
Replay	src/Replay/Replay.hpp	/^  Replay(Logger *_logger, ProtectedTaskManager &_task_manager)$/;"	f	class:final
ReplayClock	src/time/ReplayClock.hpp	/^class ReplayClock {$/;"	c
ReplayControlWidget	src/Dialogs/ReplayDialog.cpp	/^  ReplayControlWidget(const DialogLook &look)$/;"	f	class:final
Request	src/event/net/cares/Channel.cxx	/^	Request(Handler &_handler, unsigned _pending,$/;"	f	class:Cares::final
RequestAll	src/Dialogs/Device/BlueFly/BlueFlyConfigurationDialog.cpp	/^RequestAll(BlueFlyDevice &device)$/;"	f	file:
RequestAll	src/Dialogs/Device/Vega/VegaParametersWidget.cpp	/^VegaParametersWidget::RequestAll()$/;"	f	class:VegaParametersWidget
RequestAllSettings	src/Dialogs/Device/FLARM/ConfigWidget.cpp	/^RequestAllSettings(FlarmDevice &device)$/;"	f	file:
RequestAllSettings	src/Dialogs/Device/LX/NanoConfigWidget.cpp	/^RequestAllSettings(LXDevice &device)$/;"	f	file:
RequestAllSettings	src/Dialogs/Device/LX/V7ConfigWidget.cpp	/^RequestAllSettings(LXDevice &device)$/;"	f	file:
RequestFlight	src/Device/Driver/LX/NanoLogger.cpp	/^RequestFlight(Port &port, const char *filename,$/;"	f	file:
RequestForwardedInfo	src/Device/Driver/LX/NanoProtocol.hpp	/^  RequestForwardedInfo(Port &port, OperationEnvironment &env)$/;"	f	namespace:Nano
RequestInfo	src/Device/Driver/LX/NanoProtocol.hpp	/^  RequestInfo(Port &port, OperationEnvironment &env)$/;"	f	namespace:Nano
RequestLogbookContents	src/Device/Driver/LX/NanoLogger.cpp	/^RequestLogbookContents(Port &port, unsigned start, unsigned end,$/;"	f	file:
RequestLogbookInfo	src/Device/Driver/LX/NanoLogger.cpp	/^RequestLogbookInfo(Port &port, OperationEnvironment &env)$/;"	f	file:
RequestNanoSetting	src/Device/Driver/LX/Settings.cpp	/^LXDevice::RequestNanoSetting(const char *name, OperationEnvironment &env)$/;"	f	class:LXDevice
RequestSetting	src/Device/Driver/FLARM/Settings.cpp	/^FlarmDevice::RequestSetting(const char *name, OperationEnvironment &env)$/;"	f	class:FlarmDevice
RequestSetting	src/Device/Driver/Vega/Settings.cpp	/^VegaDevice::RequestSetting(const char *name, OperationEnvironment &env)$/;"	f	class:VegaDevice
RequestSettings	src/Device/Driver/BlueFly/Settings.cpp	/^BlueFlyDevice::RequestSettings(OperationEnvironment &env)$/;"	f	class:BlueFlyDevice
RequestUserName	src/Tracking/SkyLines/Glue.hpp	/^  void RequestUserName(uint32_t user_id) {$/;"	f	class:SkyLinesTracking::Glue
RequestV7Setting	src/Device/Driver/LX/Settings.cpp	/^LXDevice::RequestV7Setting(const char *name, OperationEnvironment &env)$/;"	f	class:LXDevice
Reset	src/Airspace/AirspaceParser.cpp	/^  Reset()$/;"	f	struct:TempAirspaceType
Reset	src/Atmosphere/CuSonde.cpp	/^CuSonde::Reset()$/;"	f	class:CuSonde
Reset	src/Atmosphere/CuSonde.hpp	/^    void Reset() {$/;"	f	struct:CuSonde::Level
Reset	src/Computer/AutoQNH.cpp	/^AutoQNH::Reset()$/;"	f	class:AutoQNH
Reset	src/Computer/AverageVarioComputer.cpp	/^AverageVarioComputer::Reset()$/;"	f	class:AverageVarioComputer
Reset	src/Computer/CirclingComputer.cpp	/^CirclingComputer::Reset()$/;"	f	class:CirclingComputer
Reset	src/Computer/ClimbAverageCalculator.cpp	/^ClimbAverageCalculator::Reset()$/;"	f	class:ClimbAverageCalculator
Reset	src/Computer/ClimbAverageCalculator.hpp	/^    void Reset() {$/;"	f	struct:ClimbAverageCalculator::HistoryItem
Reset	src/Computer/ContestComputer.hpp	/^  void Reset() {$/;"	f	class:ContestComputer
Reset	src/Computer/CuComputer.cpp	/^CuComputer::Reset()$/;"	f	class:CuComputer
Reset	src/Computer/Events.cpp	/^GlideComputerEvents::Reset()$/;"	f	class:GlideComputerEvents
Reset	src/Computer/FlyingComputer.cpp	/^FlyingComputer::Reset()$/;"	f	class:FlyingComputer
Reset	src/Computer/GlideRatioComputer.cpp	/^GlideRatioComputer::Reset()$/;"	f	class:GlideRatioComputer
Reset	src/Computer/LiftDatabaseComputer.cpp	/^LiftDatabaseComputer::Reset(LiftDatabase &lift_database,$/;"	f	class:LiftDatabaseComputer
Reset	src/Computer/LogComputer.cpp	/^LogComputer::Reset()$/;"	f	class:LogComputer
Reset	src/Computer/ThermalBandComputer.cpp	/^ThermalBandComputer::Reset()$/;"	f	class:ThermalBandComputer
Reset	src/Computer/ThermalLocator.cpp	/^ThermalLocator::Reset()$/;"	f	class:ThermalLocator
Reset	src/Computer/TraceComputer.cpp	/^TraceComputer::Reset()$/;"	f	class:TraceComputer
Reset	src/Computer/WarningComputer.hpp	/^  void Reset() {$/;"	f	class:WarningComputer
Reset	src/Computer/Wind/CirclingWind.cpp	/^CirclingWind::Reset()$/;"	f	class:CirclingWind
Reset	src/Computer/Wind/Computer.cpp	/^WindComputer::Reset()$/;"	f	class:WindComputer
Reset	src/Computer/Wind/MeasurementList.cpp	/^WindMeasurementList::Reset()$/;"	f	class:WindMeasurementList
Reset	src/Computer/Wind/WindEKFGlue.cpp	/^WindEKFGlue::Reset()$/;"	f	class:WindEKFGlue
Reset	src/Device/Driver/IMI/Protocol/MessageParser.cpp	/^IMI::MessageParser::Reset()$/;"	f	class:IMI::MessageParser
Reset	src/Device/Driver/Volkslogger/Protocol.cpp	/^Volkslogger::Reset(Port &port, OperationEnvironment &env, unsigned n)$/;"	f	class:Volkslogger
Reset	src/Device/Driver/Volkslogger/Protocol.hpp	/^  static inline bool Reset(Port &port, OperationEnvironment &env) {$/;"	f	namespace:Volkslogger
Reset	src/Device/Parser.cpp	/^NMEAParser::Reset()$/;"	f	class:NMEAParser
Reset	src/Engine/Airspace/AirspaceWarningManager.cpp	/^AirspaceWarningManager::Reset(const AircraftState &state)$/;"	f	class:AirspaceWarningManager
Reset	src/Engine/Contest/ContestManager.cpp	/^ContestManager::Reset()$/;"	f	class:ContestManager
Reset	src/Engine/Contest/ContestResult.hpp	/^  void Reset() {$/;"	f	struct:ContestResult
Reset	src/Engine/Contest/ContestStatistics.hpp	/^  void Reset() {$/;"	f	struct:ContestStatistics
Reset	src/Engine/GlideSolvers/GlideResult.cpp	/^GlideResult::Reset()$/;"	f	class:GlideResult
Reset	src/Engine/Navigation/Aircraft.cpp	/^AircraftState::Reset()$/;"	f	class:AircraftState
Reset	src/Engine/Navigation/Aircraft.cpp	/^AltitudeState::Reset()$/;"	f	class:AltitudeState
Reset	src/Engine/Navigation/Aircraft.hpp	/^  void Reset() {$/;"	f	struct:SpeedState
Reset	src/Engine/Navigation/Aircraft.hpp	/^  void Reset(){$/;"	f	struct:VarioState
Reset	src/Engine/Route/AirspaceRoute.cpp	/^AirspaceRoute::Reset()$/;"	f	class:AirspaceRoute
Reset	src/Engine/Route/ReachFan.cpp	/^ReachFan::Reset()$/;"	f	class:ReachFan
Reset	src/Engine/Route/RoutePlanner.cpp	/^RoutePlanner::Reset()$/;"	f	class:RoutePlanner
Reset	src/Engine/Task/Computer/ElementStatComputer.cpp	/^ElementStatComputer::Reset(ElementStat &data)$/;"	f	class:ElementStatComputer
Reset	src/Engine/Task/Computer/IncrementalSpeedComputer.cpp	/^IncrementalSpeedComputer::Reset(DistanceStat &data)$/;"	f	class:IncrementalSpeedComputer
Reset	src/Engine/Task/Computer/TaskStatsComputer.cpp	/^TaskStatsComputer::Reset(TaskStats &data)$/;"	f	class:TaskStatsComputer
Reset	src/Engine/Task/Computer/WindowStatsComputer.hpp	/^  void Reset() {$/;"	f	class:WindowStatsComputer
Reset	src/Engine/Task/Ordered/Points/FinishPoint.cpp	/^FinishPoint::Reset()$/;"	f	class:FinishPoint
Reset	src/Engine/Task/Ordered/TaskAdvance.cpp	/^TaskAdvance::Reset()$/;"	f	class:TaskAdvance
Reset	src/Engine/Task/Points/SampledTaskPoint.cpp	/^SampledTaskPoint::Reset()$/;"	f	class:SampledTaskPoint
Reset	src/Engine/Task/Points/ScoredTaskPoint.cpp	/^ScoredTaskPoint::Reset()$/;"	f	class:ScoredTaskPoint
Reset	src/Engine/Task/Stats/CommonStats.cpp	/^CommonStats::Reset()$/;"	f	class:CommonStats
Reset	src/Engine/Task/Stats/DistanceStat.hpp	/^  void Reset() {$/;"	f	class:DistanceStat
Reset	src/Engine/Task/Stats/ElementStat.cpp	/^ElementStat::Reset()$/;"	f	class:ElementStat
Reset	src/Engine/Task/Stats/StartStats.hpp	/^  void Reset() {$/;"	f	struct:StartStats
Reset	src/Engine/Task/Stats/TaskVario.hpp	/^  void Reset() {$/;"	f	class:TaskVario
Reset	src/Engine/Task/Stats/WindowStats.hpp	/^  void Reset() {$/;"	f	struct:WindowStats
Reset	src/Engine/Task/TaskManager.cpp	/^TaskManager::Reset()$/;"	f	class:TaskManager
Reset	src/Engine/ThermalBand/ThermalBand.cpp	/^ThermalBand::Reset()$/;"	f	class:ThermalBand
Reset	src/Engine/ThermalBand/ThermalSlice.hpp	/^  void Reset() {$/;"	f	struct:ThermalSlice
Reset	src/Engine/Util/AircraftStateFilter.cpp	/^AircraftStateFilter::Reset(const AircraftState &state)$/;"	f	class:AircraftStateFilter
Reset	src/FlightStatistics.cpp	/^void FlightStatistics::Reset() {$/;"	f	class:FlightStatistics
Reset	src/Form/ScrollBar.cpp	/^ScrollBar::Reset()$/;"	f	class:ScrollBar
Reset	src/Geo/Flat/TaskProjection.cpp	/^TaskProjection::Reset(const GeoPoint &ref)$/;"	f	class:TaskProjection
Reset	src/Logger/FlightLogger.cpp	/^FlightLogger::Reset()$/;"	f	class:FlightLogger
Reset	src/Logger/LoggerFRecord.cpp	/^LoggerFRecord::Reset()$/;"	f	class:LoggerFRecord
Reset	src/MapWindow/GlueMapWindowDisplayMode.cpp	/^OffsetHistory::Reset()$/;"	f	class:OffsetHistory
Reset	src/Math/AvFilter.hpp	/^  void Reset() {$/;"	f	class:AvFilter
Reset	src/Math/KalmanFilter1d.cpp	/^KalmanFilter1d::Reset()$/;"	f	class:KalmanFilter1d
Reset	src/Math/KalmanFilter1d.cpp	/^KalmanFilter1d::Reset(const double x_abs_value)$/;"	f	class:KalmanFilter1d
Reset	src/Math/KalmanFilter1d.cpp	/^KalmanFilter1d::Reset(const double x_abs_value, const double x_vel_value)$/;"	f	class:KalmanFilter1d
Reset	src/Math/SelfTimingKalmanFilter1d.hpp	/^  void Reset() {$/;"	f	class:SelfTimingKalmanFilter1d
Reset	src/Math/SelfTimingKalmanFilter1d.hpp	/^  void Reset(const double x_abs_value) {$/;"	f	class:SelfTimingKalmanFilter1d
Reset	src/Math/SelfTimingKalmanFilter1d.hpp	/^  void Reset(const double x_abs_value, const double x_vel_value) {$/;"	f	class:SelfTimingKalmanFilter1d
Reset	src/Math/WindowFilter.hpp	/^  void Reset() {$/;"	f	class:WindowFilter
Reset	src/Monitor/AirspaceWarningMonitor.cpp	/^AirspaceWarningMonitor::Reset()$/;"	f	class:AirspaceWarningMonitor
Reset	src/Monitor/AllMonitors.hpp	/^  void Reset() {$/;"	f	class:final
Reset	src/Monitor/MatTaskMonitor.hpp	/^  void Reset() {$/;"	f	class:MatTaskMonitor
Reset	src/Monitor/TaskAdvanceMonitor.hpp	/^  void Reset() {$/;"	f	class:TaskAdvanceMonitor
Reset	src/Monitor/TaskConstraintsMonitor.hpp	/^  void Reset() {$/;"	f	class:TaskConstraintsMonitor
Reset	src/Monitor/WindMonitor.hpp	/^  void Reset() {$/;"	f	class:WindMonitor
Reset	src/NMEA/Acceleration.hpp	/^  void Reset() {$/;"	f	struct:AccelerationState
Reset	src/NMEA/Attitude.hpp	/^  void Reset() {$/;"	f	struct:AttitudeState
Reset	src/NMEA/Derived.cpp	/^DerivedInfo::Reset()$/;"	f	class:DerivedInfo
Reset	src/NMEA/FlyingState.cpp	/^FlyingState::Reset()$/;"	f	class:FlyingState
Reset	src/NMEA/GPSState.cpp	/^GPSState::Reset()$/;"	f	class:GPSState
Reset	src/NMEA/Info.cpp	/^NMEAInfo::Reset()$/;"	f	class:NMEAInfo
Reset	src/NMEA/MoreData.cpp	/^MoreData::Reset()$/;"	f	class:MoreData
Reset	src/NMEA/SwitchState.cpp	/^SwitchState::Reset()$/;"	f	class:SwitchState
Reset	src/NMEA/VegaSwitchState.hpp	/^  void Reset() {$/;"	f	struct:VegaSwitchState
Reset	src/Replay/CatmullRomInterpolator.hpp	/^  Reset()$/;"	f	class:CatmullRomInterpolator
Reset	src/Task/ProtectedRoutePlanner.hpp	/^  void Reset() {$/;"	f	class:ProtectedRoutePlanner
Reset	src/Task/ProtectedTaskManager.cpp	/^ProtectedTaskManager::Reset()$/;"	f	class:ProtectedTaskManager
Reset	src/Task/RoutePlannerGlue.hpp	/^  void Reset() {$/;"	f	class:RoutePlannerGlue
Reset	src/Terrain/RasterBuffer.hpp	/^  void Reset() {$/;"	f	class:RasterBuffer
Reset	src/Terrain/RasterTileCache.cpp	/^RasterTileCache::Reset()$/;"	f	class:RasterTileCache
Reset	src/Topography/TopographyStore.cpp	/^TopographyStore::Reset()$/;"	f	class:TopographyStore
Reset	src/Weather/ParsedMETAR.hpp	/^  void Reset() {$/;"	f	struct:ParsedMETAR
Reset	src/thread/Trigger.hpp	/^  void Reset() {$/;"	f	class:Trigger
Reset	src/time/DeltaTime.hpp	/^  void Reset() {$/;"	f	class:DeltaTime
Reset	src/time/GPSClock.hpp	/^  void Reset() {$/;"	f	class:GPSClock
Reset	src/time/PeriodClock.hpp	/^  void Reset() {$/;"	f	class:PeriodClock
Reset	src/time/ReplayClock.hpp	/^  void Reset() {$/;"	f	class:ReplayClock
Reset	src/time/WrapClock.hpp	/^  void Reset() {$/;"	f	class:WrapClock
Reset	src/ui/canvas/Icon.hpp	/^  void Reset() {$/;"	f	class:MaskedIcon
Reset	src/ui/canvas/android/Bitmap.cpp	/^Bitmap::Reset()$/;"	f	class:Bitmap
Reset	src/ui/canvas/gdi/Bitmap.cpp	/^Bitmap::Reset()$/;"	f	class:Bitmap
Reset	src/ui/canvas/memory/Bitmap.cpp	/^Bitmap::Reset()$/;"	f	class:Bitmap
Reset	src/ui/canvas/opengl/Bitmap.cpp	/^Bitmap::Reset()$/;"	f	class:Bitmap
Reset	src/ui/window/custom/DoubleClick.hpp	/^  void Reset() {$/;"	f	class:DoubleClick
Reset	src/util/AllocatedGrid.hxx	/^	void Reset() {$/;"	f	class:AllocatedGrid
ResetBlackout	src/Computer/Wind/WindEKFGlue.hpp	/^  void ResetBlackout() {$/;"	f	class:WindEKFGlue
ResetDeviceDetection	src/Device/Driver/LX/Internal.hpp	/^  void ResetDeviceDetection() {$/;"	f	class:LXDevice
ResetFailureCounter	src/Device/Descriptor.hpp	/^  void ResetFailureCounter() {$/;"	f	class:final
ResetFlight	src/Computer/GlideComputer.cpp	/^GlideComputer::ResetFlight(const bool full)$/;"	f	class:GlideComputer
ResetFlight	src/Computer/GlideComputerAirData.cpp	/^GlideComputerAirData::ResetFlight(DerivedInfo &calculated,$/;"	f	class:GlideComputerAirData
ResetFlight	src/Computer/GlideComputerBlackboard.cpp	/^GlideComputerBlackboard::ResetFlight(const bool full)$/;"	f	class:GlideComputerBlackboard
ResetFlight	src/Computer/RouteComputer.cpp	/^RouteComputer::ResetFlight()$/;"	f	class:RouteComputer
ResetFlight	src/Computer/StatsComputer.cpp	/^StatsComputer::ResetFlight(const bool full)$/;"	f	class:StatsComputer
ResetFlight	src/Computer/TaskComputer.cpp	/^TaskComputer::ResetFlight(const bool full)$/;"	f	class:TaskComputer
ResetIncrementalSpeed	src/Engine/Task/Computer/DistanceStatComputer.hpp	/^  void ResetIncrementalSpeed(DistanceStat &data) {$/;"	f	class:DistanceStatComputer
ResetIndex	src/Renderer/TaskPointRenderer.hpp	/^  void ResetIndex() {$/;"	f	class:TaskPointRenderer
ResetPoints	src/Engine/Task/Ordered/OrderedTask.cpp	/^ResetPoints(OrderedTask::OrderedTaskPointVector &points)$/;"	f	file:
ResetSession	src/Tracking/TrackingGlue.hpp	/^    void ResetSession() {$/;"	f	struct:final::LiveTrack24State
ResetStats	src/Computer/CirclingComputer.cpp	/^CirclingComputer::ResetStats()$/;"	f	class:CirclingComputer
ResetStats	src/Computer/GlideComputerAirData.hpp	/^  void ResetStats() {$/;"	f	class:GlideComputerAirData
ResetTNP	src/Airspace/AirspaceParser.cpp	/^  ResetTNP()$/;"	f	struct:TempAirspaceType
ResetTask	src/Engine/Task/Stats/CommonStats.cpp	/^CommonStats::ResetTask()$/;"	f	class:CommonStats
ResetTask	src/Engine/Task/TaskManager.cpp	/^TaskManager::ResetTask()$/;"	f	class:TaskManager
ResetTask	src/Task/ProtectedTaskManager.cpp	/^ProtectedTaskManager::ResetTask()$/;"	f	class:ProtectedTaskManager
ResetTaskView	src/Dialogs/Task/Manager/Internal.hpp	/^  void ResetTaskView() {$/;"	f	class:final
ResetUserIdle	src/ui/event/Idle.cpp	/^ResetUserIdle()$/;"	f
ResetVector	src/Engine/Airspace/AirspaceSorter.cpp	/^AirspaceSelectInfo::ResetVector()$/;"	f	class:AirspaceSelectInfo
ResetVector	src/Waypoint/WaypointList.cpp	/^WaypointListItem::ResetVector()$/;"	f	class:WaypointListItem
Resizable	src/ui/window/TopWindow.hpp	/^  void Resizable() {$/;"	f	class:UI::TopWindowStyle
Resize	src/Terrain/RasterBuffer.cpp	/^RasterBuffer::Resize(unsigned _width, unsigned _height)$/;"	f	class:RasterBuffer
Resize	src/ui/canvas/VirtualCanvas.hpp	/^  void Resize(PixelSize new_size) {$/;"	f	class:VirtualCanvas
Resize	src/ui/canvas/gdi/BufferCanvas.cpp	/^BufferCanvas::Resize(PixelSize new_size)$/;"	f	class:BufferCanvas
Resize	src/ui/canvas/gdi/Canvas.hpp	/^  void Resize(PixelSize new_size) {$/;"	f	class:Canvas
Resize	src/ui/canvas/opengl/BufferCanvas.cpp	/^BufferCanvas::Resize(PixelSize new_size)$/;"	f	class:BufferCanvas
ResizeButton	src/Widget/KeyboardWidget.cpp	/^KeyboardWidget::ResizeButton(unsigned ch,$/;"	f	class:KeyboardWidget
ResizeButtons	src/Widget/KeyboardWidget.cpp	/^KeyboardWidget::ResizeButtons()$/;"	f	class:KeyboardWidget
ResizeToHeight	src/Engine/ThermalBand/ThermalEncounterBand.cpp	/^ThermalEncounterBand::ResizeToHeight(const double height)$/;"	f	class:ThermalEncounterBand
Resolve	src/net/Resolver.cxx	/^Resolve(const char *host_and_port, int default_port,$/;"	f
Resolve	src/net/Resolver.cxx	/^Resolve(const char *host_port, unsigned default_port, int flags, int socktype)$/;"	f
Resolve	src/net/Resolver.cxx	/^Resolve(const char *node, const char *service,$/;"	f
ResourceId	src/ResourceId.hpp	/^  constexpr explicit ResourceId(const void *_begin, const size_t *_size_ptr)$/;"	f	class:ResourceId
ResourceId	src/ResourceId.hpp	/^  constexpr explicit ResourceId(unsigned _id)$/;"	f	class:ResourceId
ResourceId	src/ResourceId.hpp	/^class ResourceId {$/;"	c
ResourceLoader	src/ResourceLoader.hpp	/^namespace ResourceLoader {$/;"	n
ResourceLoaderInstance	src/ResourceLoader.cpp	/^static HINSTANCE ResourceLoaderInstance;$/;"	v	file:
ResponseHandler	src/net/http/Handler.hpp	/^class ResponseHandler : public DataHandler {$/;"	c	namespace:Net
Rest	src/io/CSVLine.hpp	/^  Range<const char *> Rest() const {$/;"	f	class:CSVLine
Restart	src/Audio/ToneSynthesiser.hpp	/^  void Restart() {$/;"	f	class:ToneSynthesiser
Restart	src/Device/Driver/FLARM/Device.cpp	/^FlarmDevice::Restart(OperationEnvironment &env)$/;"	f	class:FlarmDevice
Restore	src/PageActions.cpp	/^PageActions::Restore()$/;"	f	class:PageActions
RestoreBottom	src/PageActions.cpp	/^PageActions::RestoreBottom()$/;"	f	class:PageActions
RestoreExtra	src/Widget/TabWidget.cpp	/^TabWidget::RestoreExtra()$/;"	f	class:TabWidget
RestoreFinish	src/Computer/GlideComputerBlackboard.cpp	/^GlideComputerBlackboard::RestoreFinish()$/;"	f	class:GlideComputerBlackboard
RestoreMapScale	src/MapWindow/GlueMapWindowDisplayMode.cpp	/^GlueMapWindow::RestoreMapScale()$/;"	f	class:GlueMapWindow
RestoreMapZoom	src/PageActions.cpp	/^PageActions::RestoreMapZoom()$/;"	f	class:PageActions
RestoreOrientation	src/Hardware/DisplayGlue.cpp	/^Display::RestoreOrientation()$/;"	f	class:Display
RestoreTaskView	src/Dialogs/Task/Manager/Internal.hpp	/^  void RestoreTaskView() {$/;"	f	class:final
Result	src/Computer/Wind/CirclingWind.hpp	/^    Result() {}$/;"	f	struct:CirclingWind::Result
Result	src/Computer/Wind/CirclingWind.hpp	/^    Result(unsigned _quality):quality(_quality) {}$/;"	f	struct:CirclingWind::Result
Result	src/Computer/Wind/CirclingWind.hpp	/^    Result(unsigned _quality, SpeedVector _wind)$/;"	f	struct:CirclingWind::Result
Result	src/Computer/Wind/CirclingWind.hpp	/^  struct Result$/;"	s	class:CirclingWind
Result	src/Computer/Wind/WindEKFGlue.hpp	/^    Result() {}$/;"	f	struct:WindEKFGlue::Result
Result	src/Computer/Wind/WindEKFGlue.hpp	/^    Result(int _quality):quality(_quality) {}$/;"	f	struct:WindEKFGlue::Result
Result	src/Computer/Wind/WindEKFGlue.hpp	/^  struct Result$/;"	s	class:WindEKFGlue
Result	src/Dialogs/SimulatorPromptWindow.hpp	/^  enum class Result {$/;"	c	class:final
Result	src/Engine/GlideSolvers/MacCready.cpp	/^  GlideResult Result(const double v_init) {$/;"	f	class:MacCreadyVopt
Result	src/Math/SunEphemeris.hpp	/^  struct Result {$/;"	s	namespace:SunEphemeris
Result	src/ui/canvas/custom/Cache.hpp	/^  typedef GLTexture *Result;$/;"	t	namespace:TextCache
Resume	src/Engine/Task/TaskManager.hpp	/^  void Resume() {$/;"	f	class:TaskManager
Resume	src/thread/RecursivelySuspensibleThread.cpp	/^RecursivelySuspensibleThread::Resume()$/;"	f	class:RecursivelySuspensibleThread
Resume	src/ui/canvas/opengl/TopCanvas.cpp	/^TopCanvas::Resume()$/;"	f	class:TopCanvas
ResumeAllThreads	src/Protection.cpp	/^ResumeAllThreads()$/;"	f
ResumeThreads	src/MainWindow.cpp	/^MainWindow::ResumeThreads()$/;"	f	class:MainWindow
ResumeThreads	src/MapWindow/GlueMapWindow.cpp	/^GlueMapWindow::ResumeThreads()$/;"	f	class:GlueMapWindow
Rethrow	src/Dialogs/DownloadFilePicker.cpp	/^  void Rethrow() const {$/;"	f	class:final
RethrowException	src/java/Exception.cxx	/^Java::RethrowException(JNIEnv *env)$/;"	f	class:Java
Retrospective	src/Engine/Contest/Solvers/Retrospective.hpp	/^class Retrospective {$/;"	c
Return	src/Device/Descriptor.cpp	/^DeviceDescriptor::Return()$/;"	f	class:DeviceDescriptor
ReturnExtraButton	src/Dialogs/Settings/dlgConfiguration.cpp	/^ConfigPanel::ReturnExtraButton(unsigned i)$/;"	f	class:ConfigPanel
ReusableArray	src/util/ReusableArray.hpp	/^  ReusableArray(ReusableArray<T> &&other)$/;"	f	class:ReusableArray
ReusableArray	src/util/ReusableArray.hpp	/^  ReusableArray(size_type _length):array(_length) {}$/;"	f	class:ReusableArray
ReusableArray	src/util/ReusableArray.hpp	/^class ReusableArray {$/;"	c
ReverseTask	src/Dialogs/Task/Manager/TaskEditPanel.cpp	/^void TaskEditPanel::ReverseTask()$/;"	f	class:TaskEditPanel
Revert	src/Dialogs/Device/Vega/VegaParametersWidget.cpp	/^VegaParametersWidget::Revert()$/;"	f	class:VegaParametersWidget
Revert	src/Dialogs/Task/Manager/TaskManagerDialog.cpp	/^TaskManagerDialog::Revert()$/;"	f	class:TaskManagerDialog
Rewind	src/io/FileLineReader.hpp	/^  void Rewind() {$/;"	f	class:FileLineReader
Rewind	src/io/FileLineReader.hpp	/^  void Rewind() {$/;"	f	class:FileLineReaderA
Rewind	src/io/FileReader.hxx	/^	void Rewind() {$/;"	f	class:final
RiskFactor	src/Dialogs/Settings/Panels/SafetyFactorsConfigPanel.cpp	/^  RiskFactor,$/;"	e	enum:ControlIndex	file:
RiskGamma	src/Profile/ProfileKeys.cpp	/^const char RiskGamma[] = "RiskGamma";$/;"	m	namespace:ProfileKeys	file:
RmMod	src/Kobo/System.cpp	/^RmMod(const char *name)$/;"	f	file:
RootDC	src/ui/canvas/gdi/RootDC.hpp	/^  RootDC()$/;"	f	class:RootDC
RootDC	src/ui/canvas/gdi/RootDC.hpp	/^class RootDC {$/;"	c
Rotate	src/Geo/Flat/FlatLine.cpp	/^FlatLine::Rotate(const Angle theta)$/;"	f	class:FlatLine
Rotate	src/Geo/Flat/FlatPoint.cpp	/^FlatPoint::Rotate(const Angle angle)$/;"	f	class:FlatPoint
Rotate	src/Hardware/RotateDisplay.cpp	/^Display::Rotate(DisplayOrientation orientation)$/;"	f	class:Display
RotateInitialize	src/Hardware/RotateDisplay.cpp	/^Display::RotateInitialize()$/;"	f	class:Display
RotateOptionalStarts	src/Engine/Task/Ordered/OrderedTask.cpp	/^OrderedTask::RotateOptionalStarts()$/;"	f	class:OrderedTask
RotatePointer	src/ui/event/shared/RotatePointer.hpp	/^class RotatePointer {$/;"	c	namespace:UI
RotateRestore	src/Hardware/RotateDisplay.cpp	/^Display::RotateRestore()$/;"	f	class:Display
RotateSupported	src/Hardware/RotateDisplay.cpp	/^Display::RotateSupported()$/;"	f	class:Display
RotatedPolygonRenderer	src/Renderer/RotatedPolygonRenderer.hpp	/^  RotatedPolygonRenderer(const BulkPixelPoint *src, unsigned n,$/;"	f	class:RotatedPolygonRenderer
RotatedPolygonRenderer	src/Renderer/RotatedPolygonRenderer.hpp	/^class RotatedPolygonRenderer {$/;"	c
RoughAltitude	src/Rough/RoughAltitude.hpp	/^  RoughAltitude(double _value) {$/;"	f	class:RoughAltitude
RoughAltitude	src/Rough/RoughAltitude.hpp	/^  RoughAltitude(int _value):value((short)_value) {}$/;"	f	class:RoughAltitude
RoughAltitude	src/Rough/RoughAltitude.hpp	/^  RoughAltitude(short _value):value(_value) {}$/;"	f	class:RoughAltitude
RoughAltitude	src/Rough/RoughAltitude.hpp	/^class RoughAltitude {$/;"	c
RoughAngle	src/Rough/RoughAngle.hpp	/^  RoughAngle(Angle _value):value(Import(_value)) {}$/;"	f	class:RoughAngle
RoughAngle	src/Rough/RoughAngle.hpp	/^  RoughAngle(int16_t _value):value(_value) {}$/;"	f	class:RoughAngle
RoughAngle	src/Rough/RoughAngle.hpp	/^class RoughAngle {$/;"	c
RoughDistance	src/Rough/RoughDistance.hpp	/^  RoughDistance(double _value):value(_value) {}$/;"	f	class:RoughDistance
RoughDistance	src/Rough/RoughDistance.hpp	/^class RoughDistance {$/;"	c
RoughSpeed	src/Rough/RoughSpeed.hpp	/^  RoughSpeed(double _value):value(Import(_value)) {}$/;"	f	class:RoughSpeed
RoughSpeed	src/Rough/RoughSpeed.hpp	/^class RoughSpeed {$/;"	c
RoughTime	src/time/RoughTime.hpp	/^  constexpr RoughTime(uint16_t _value)$/;"	f	class:RoughTime
RoughTime	src/time/RoughTime.hpp	/^  constexpr RoughTime(unsigned hour, unsigned minute)$/;"	f	class:RoughTime
RoughTime	src/time/RoughTime.hpp	/^class RoughTime {$/;"	c
RoughTimeDataField	src/Form/DataField/RoughTime.hpp	/^  RoughTimeDataField(RoughTime _value, RoughTimeDelta _time_zone,$/;"	f	class:final
RoughTimeDelta	src/time/RoughTime.hpp	/^  constexpr RoughTimeDelta(int16_t _value)$/;"	f	class:RoughTimeDelta
RoughTimeDelta	src/time/RoughTime.hpp	/^class RoughTimeDelta {$/;"	c
RoughTimeSpan	src/time/RoughTime.hpp	/^  constexpr RoughTimeSpan(RoughTime _start, RoughTime _end)$/;"	f	class:RoughTimeSpan
RoughTimeSpan	src/time/RoughTime.hpp	/^class RoughTimeSpan {$/;"	c
RoughVSpeed	src/Rough/RoughVSpeed.hpp	/^  RoughVSpeed(double _value):value(Import(_value)) {}$/;"	f	class:RoughVSpeed
RoughVSpeed	src/Rough/RoughVSpeed.hpp	/^class RoughVSpeed {$/;"	c
RoundLocation	src/Geo/Flat/FlatGeoPoint.hpp	/^  void RoundLocation() {$/;"	f	struct:AFlatGeoPoint
RoundTime	src/Engine/Route/RoutePolars.cpp	/^RoutePolars::RoundTime(const unsigned val)$/;"	f	class:RoutePolars
RoundingRightShift	src/Math/Shift.hpp	/^RoundingRightShift(T value, unsigned bits)$/;"	f
RoundingRightShift	src/Terrain/RasterLocation.hpp	/^  constexpr RasterLocation RoundingRightShift(unsigned bits) const {$/;"	f	struct:RasterLocation
RoundingRightShift	src/Terrain/RasterLocation.hpp	/^  constexpr SignedRasterLocation RoundingRightShift(unsigned bits) const {$/;"	f	struct:SignedRasterLocation
Route	src/Device/Driver/Volkslogger/Database.hpp	/^  struct Route {$/;"	s	namespace:Volkslogger
Route	src/Engine/Route/Route.hpp	/^typedef std::vector<AGeoPoint> Route;$/;"	t
RouteAirspaceIntersection	src/Engine/Route/AirspaceRoute.hpp	/^    RouteAirspaceIntersection(const AbstractAirspace *_airspace,$/;"	f	struct:AirspaceRoute::RouteAirspaceIntersection
RouteAirspaceIntersection	src/Engine/Route/AirspaceRoute.hpp	/^  struct RouteAirspaceIntersection {$/;"	s	class:AirspaceRoute
RouteComputer	src/Computer/RouteComputer.cpp	/^RouteComputer::RouteComputer(const Airspaces &airspace_database,$/;"	f	class:RouteComputer
RouteComputer	src/Computer/RouteComputer.hpp	/^class RouteComputer {$/;"	c
RouteConfigPanel	src/Dialogs/Settings/Panels/RouteConfigPanel.cpp	/^  RouteConfigPanel()$/;"	f	class:final
RouteLink	src/Engine/Route/RouteLink.hpp	/^struct RouteLink: public RouteLinkBase {$/;"	s
RouteLinkBase	src/Engine/Route/RouteLink.cpp	/^  :RouteLinkBase(_destination, _origin)$/;"	f
RouteLinkBase	src/Engine/Route/RouteLink.cpp	/^  :RouteLinkBase(_link)$/;"	f
RouteLinkBase	src/Engine/Route/RouteLink.hpp	/^struct RouteLinkBase {$/;"	s
RouteLinkBaseHasher	src/Engine/Route/RoutePlanner.hpp	/^  struct RouteLinkBaseHasher : std::unary_function<RouteLinkBase, size_t> {$/;"	s	class:RoutePlanner
RouteLinkQueue	src/Engine/Route/RoutePlanner.hpp	/^  typedef std::queue< RouteLink> RouteLinkQueue;$/;"	t	class:RoutePlanner
RouteLinkSet	src/Engine/Route/RoutePlanner.hpp	/^  typedef std::unordered_set<RouteLinkBase, RouteLinkBaseHasher> RouteLinkSet;$/;"	t	class:RoutePlanner
RoutePlanner	src/Engine/Route/RoutePlanner.cpp	/^RoutePlanner::RoutePlanner()$/;"	f	class:RoutePlanner
RoutePlanner	src/Engine/Route/RoutePlanner.hpp	/^class RoutePlanner {$/;"	c
RoutePlannerAllowClimb	src/Dialogs/Settings/Panels/RouteConfigPanel.cpp	/^  RoutePlannerAllowClimb,$/;"	e	enum:ControlIndex	file:
RoutePlannerAllowClimb	src/Profile/ProfileKeys.cpp	/^const char RoutePlannerAllowClimb[] = "RoutePlannerAllowClimb";$/;"	m	namespace:ProfileKeys	file:
RoutePlannerConfig	src/Engine/Route/Config.hpp	/^struct RoutePlannerConfig$/;"	s
RoutePlannerGlue	src/Task/RoutePlannerGlue.hpp	/^  RoutePlannerGlue():terrain(nullptr) {}$/;"	f	class:RoutePlannerGlue
RoutePlannerGlue	src/Task/RoutePlannerGlue.hpp	/^class RoutePlannerGlue {$/;"	c
RoutePlannerMode	src/Dialogs/Settings/Panels/RouteConfigPanel.cpp	/^  RoutePlannerMode,$/;"	e	enum:ControlIndex	file:
RoutePlannerMode	src/Profile/ProfileKeys.cpp	/^const char RoutePlannerMode[] = "RoutePlannerMode";$/;"	m	namespace:ProfileKeys	file:
RoutePlannerUseCeiling	src/Dialogs/Settings/Panels/RouteConfigPanel.cpp	/^  RoutePlannerUseCeiling,$/;"	e	enum:ControlIndex	file:
RoutePlannerUseCeiling	src/Profile/ProfileKeys.cpp	/^const char RoutePlannerUseCeiling[] = "RoutePlannerUseCeiling";$/;"	m	namespace:ProfileKeys	file:
RoutePoint	src/Engine/Route/Point.hpp	/^typedef AFlatGeoPoint RoutePoint;$/;"	t
RoutePointHasher	src/Engine/Route/RoutePlanner.hpp	/^  struct RoutePointHasher : std::unary_function<RoutePoint, size_t> {$/;"	s	class:RoutePlanner
RoutePolar	src/Engine/Route/RoutePolar.hpp	/^class RoutePolar$/;"	c
RoutePolarPoint	src/Engine/Route/RoutePolar.hpp	/^    RoutePolarPoint(double _slowness, double _gradient)$/;"	f	struct:RoutePolar::RoutePolarPoint
RoutePolarPoint	src/Engine/Route/RoutePolar.hpp	/^  struct RoutePolarPoint$/;"	s	class:RoutePolar
RoutePolars	src/Engine/Route/RoutePolars.hpp	/^class RoutePolars$/;"	c
Row	src/Widget/RowFormWidget.hpp	/^  struct Row {$/;"	s	class:RowFormWidget
RowFormWidget	src/Widget/RowFormWidget.hpp	/^class RowFormWidget : public WindowWidget {$/;"	c
RowLayout	src/Dialogs/Task/TargetDialog.cpp	/^  explicit constexpr RowLayout(PixelRect _rc):rc(_rc) {}$/;"	f	class:RowLayout
RowLayout	src/Dialogs/Task/TargetDialog.cpp	/^class RowLayout {$/;"	c	file:
Rows	src/Dialogs/Waypoint/dlgWaypointEdit.cpp	/^  enum Rows {$/;"	g	class:final	file:
RulesStatusPanel	src/Dialogs/StatusPanels/RulesStatusPanel.hpp	/^class RulesStatusPanel : public StatusPanel {$/;"	c
RulesTab	src/Dialogs/Task/Manager/Internal.hpp	/^    RulesTab,$/;"	e	enum:final::Tabs
Run	src/Blackboard/RateLimitedBlackboardListener.cpp	/^RateLimitedBlackboardListener::Run()$/;"	f	class:RateLimitedBlackboardListener
Run	src/Computer/LogComputer.cpp	/^LogComputer::Run(const MoreData &basic, const DerivedInfo &calculated,$/;"	f	class:LogComputer
Run	src/Device/Descriptor.cpp	/^  virtual void Run(OperationEnvironment &env) {$/;"	f	class:final
Run	src/Dialogs/Device/CAI302/WaypointUploader.cpp	/^CAI302WaypointUploader::Run(OperationEnvironment &env)$/;"	f	class:CAI302WaypointUploader
Run	src/Dialogs/JobDialog.cpp	/^DialogJobRunner::Run(Job &job)$/;"	f	class:DialogJobRunner
Run	src/Job/TriStateJob.hpp	/^  virtual void Run(OperationEnvironment &env) {$/;"	f	class:final
Run	src/Logger/ExternalLogger.cpp	/^  bool Run(OperationEnvironment &env) {$/;"	f	class:DeclareJob
Run	src/Logger/ExternalLogger.cpp	/^  bool Run(OperationEnvironment &env) {$/;"	f	class:DownloadFlightJob
Run	src/Logger/ExternalLogger.cpp	/^  bool Run(OperationEnvironment &env) {$/;"	f	class:ReadFlightListJob
Run	src/event/Call.cxx	/^	void Run() {$/;"	f	class:final
Run	src/net/http/ToBuffer.cpp	/^Net::DownloadToBufferJob::Run(OperationEnvironment &env)$/;"	f	class:Net::DownloadToBufferJob
Run	src/net/http/ToFile.cpp	/^Net::DownloadToFileJob::Run(OperationEnvironment &env)$/;"	f	class:Net::DownloadToFileJob
Run	src/system/Process.cpp	/^Run(const char *const*argv)$/;"	f
Run	src/system/Process.hpp	/^Run(const char *path, Args... args)$/;"	f
RunContest	src/Engine/Contest/ContestManager.cpp	/^RunContest(AbstractContest &_contest,$/;"	f	file:
RunDijsktraMax	src/Engine/Task/Ordered/OrderedTask.cpp	/^OrderedTask::RunDijsktraMax()$/;"	f	class:OrderedTask
RunDijsktraMin	src/Engine/Task/Ordered/OrderedTask.cpp	/^OrderedTask::RunDijsktraMin(const GeoPoint &location)$/;"	f	class:OrderedTask
RunFile	src/lua/RunFile.cxx	/^Lua::RunFile(lua_State *L, Path path)$/;"	f	class:Lua
RunFile	src/system/RunFile.cpp	/^RunFile(const TCHAR *path)$/;"	f
RunNotification	src/ui/event/Notify.cpp	/^Notify::RunNotification()$/;"	f	class:UI::Notify
RunValidate	src/VALI-XCS.cpp	/^RunValidate(Path path)$/;"	f	file:
Runway	src/Engine/Waypoint/Runway.hpp	/^  constexpr Runway(int _direction, unsigned _length)$/;"	f	class:Runway
Runway	src/Engine/Waypoint/Runway.hpp	/^class Runway {$/;"	c
SAFETY	src/Engine/Route/Config.hpp	/^    SAFETY,$/;"	m	class:RoutePlannerConfig::Polar
SAFETYFACTORSCONFIGPANEL_HPP	src/Dialogs/Settings/Panels/SafetyFactorsConfigPanel.hpp	25;"	d
SAILING	src/Tracking/LiveTrack24.hpp	/^  SAILING = 16502,$/;"	m	class:LiveTrack24::VehicleType
SAMPLEDTASKPOINT_H	src/Engine/Task/Points/SampledTaskPoint.hpp	24;"	d
SAVE	src/Dialogs/Device/BlueFly/BlueFlyConfigurationDialog.cpp	/^    SAVE,$/;"	e	enum:final::BlueFlyWidgets	file:
SAVE	src/Dialogs/Task/Manager/TaskActionsPanel.hpp	/^    SAVE,$/;"	e	enum:TaskActionsPanel::Controls
SCALE_HIGHEND	src/Dialogs/Device/Vega/Types.hpp	75;"	d
SCALE_HIGHEND_NEG	src/Dialogs/Device/Vega/Types.hpp	78;"	d
SCALE_LINEAR	src/Dialogs/Device/Vega/Types.hpp	73;"	d
SCALE_LINEAR_NEG	src/Dialogs/Device/Vega/Types.hpp	76;"	d
SCALE_LOWEND	src/Dialogs/Device/Vega/Types.hpp	74;"	d
SCALE_LOWEND_NEG	src/Dialogs/Device/Vega/Types.hpp	77;"	d
SCANTASKPOINT_HPP	src/Engine/PathSolvers/ScanTaskPoint.hpp	25;"	d
SCControlMode	src/Device/Driver/LX/LX1600.hpp	/^  enum class SCControlMode : uint8_t {$/;"	c	namespace:LX1600
SCMode	src/Device/Driver/LX/LX1600.hpp	/^  enum class SCMode : uint8_t {$/;"	c	namespace:LX1600
SCOPE_EXIT_HXX	src/util/ScopeExit.hxx	31;"	d
SCOREDTASKPOINT_HPP	src/Engine/Task/Points/ScoredTaskPoint.hpp	24;"	d
SCREEN_HEIGHT	src/Renderer/LabelBlock.hpp	/^  static constexpr unsigned SCREEN_HEIGHT = 2048;$/;"	m	class:LabelBlock
SCREEN_LABELBLOCK_HPP	src/Renderer/LabelBlock.hpp	25;"	d
SCROLL	src/Form/List.hpp	/^    SCROLL,$/;"	m	class:ListControl::DragMode
SDLPCMPlayer	src/Audio/SDLPCMPlayer.hpp	/^class SDLPCMPlayer : public PCMPlayer {$/;"	c
SDLRasterCanvas	src/ui/canvas/memory/Canvas.cpp	/^  SDLRasterCanvas(WritableImageBuffer<ActivePixelTraits> buffer)$/;"	f	class:SDLRasterCanvas
SDLRasterCanvas	src/ui/canvas/memory/Canvas.cpp	/^class SDLRasterCanvas : public RasterCanvas<ActivePixelTraits> {$/;"	c	file:
SEARCHPOINTVECTOR_HPP	src/Geo/SearchPointVector.hpp	24;"	d
SEARCH_POINT_HPP	src/Geo/SearchPoint.hpp	23;"	d
SECTOR	src/Device/Declaration.hpp	/^      SECTOR,$/;"	e	enum:Declaration::TurnPoint::Shape
SECTOR	src/Engine/Task/ObservationZones/ObservationZone.hpp	/^    SECTOR,$/;"	m	class:ObservationZone::Shape
SECTORZONE_HPP	src/Engine/Task/ObservationZones/SectorZone.hpp	25;"	d
SECURITY	src/Device/Driver/LX/LXN.hpp	/^    SECURITY = 0xf0,$/;"	e	enum:LXN::Command
SECURITY_7000	src/Device/Driver/LX/LXN.hpp	/^    SECURITY_7000 = 0xef,$/;"	e	enum:LXN::Command
SECURITY_HIGH	src/Device/Driver/LX/LXN.hpp	/^    SECURITY_HIGH = 0x0f,$/;"	e	enum:LXN::SecurityType
SECURITY_LOW	src/Device/Driver/LX/LXN.hpp	/^    SECURITY_LOW = 0x0d,$/;"	e	enum:LXN::SecurityType
SECURITY_MED	src/Device/Driver/LX/LXN.hpp	/^    SECURITY_MED = 0x0e,$/;"	e	enum:LXN::SecurityType
SECURITY_OLD	src/Device/Driver/LX/LXN.hpp	/^    SECURITY_OLD = 0xf5,$/;"	e	enum:LXN::Command
SEEK_MEMORY	src/Device/Driver/LX/Protocol.hpp	/^    SEEK_MEMORY = 0xce,$/;"	e	enum:LX::Command
SEEYOU	src/Waypoint/WaypointFileType.hpp	/^  SEEYOU,$/;"	m	class:WaypointFileType
SELF	src/MapWindow/Items/MapItem.hpp	/^    SELF,$/;"	e	enum:TaskPointType::Type
SEND_SETTINGS	src/Device/Driver.hpp	/^    SEND_SETTINGS = 0x100,$/;"	e	enum:DeviceRegister::__anon158
SENSOR	src/Android/NativeView.hpp	/^    SENSOR = 4,$/;"	m	class:NativeView::ScreenOrientation
SENTINEL	src/system/Path.hpp	/^  static constexpr auto SENTINEL = value_type::SENTINEL;$/;"	m	class:AllocatedPath
SENTINEL	src/system/Path.hpp	/^  static constexpr auto SENTINEL = value_type::SENTINEL;$/;"	m	class:Path
SENTINEL	src/util/AllocatedString.hxx	/^	static constexpr value_type SENTINEL = '\\0';$/;"	m	class:BasicAllocatedString
SENTINEL	src/util/StaticString.hxx	/^	static constexpr value_type SENTINEL = Base::SENTINEL;$/;"	m	class:StaticStringBase
SENTINEL	src/util/StringBuffer.hxx	/^	static constexpr value_type SENTINEL = '\\0';$/;"	m	class:BasicStringBuffer
SENTINEL	src/util/StringBuilder.hxx	/^	static constexpr value_type SENTINEL = '\\0';$/;"	m	class:StringBuilder
SENTINEL	src/util/StringParser.hxx	/^	static constexpr value_type SENTINEL = '\\0';$/;"	m	class:StringParser
SENTINEL	src/util/StringPointer.hxx	/^	static constexpr value_type SENTINEL = '\\0';$/;"	m	class:StringPointer
SERIAL	src/Device/Config.hpp	/^    SERIAL,$/;"	m	class:DeviceConfig::PortType
SERIAL	src/Device/Driver/LX/LXN.hpp	/^    SERIAL = 0xf6,$/;"	e	enum:LXN::Command
SERIALISER_HPP	src/Task/Serialiser.hpp	23;"	d
SETACTIVE	src/Device/Driver/ATR833.cpp	/^  static constexpr uint8_t SETACTIVE = 0x13;$/;"	m	class:final	file:
SETPOWERMANAGEMENT	src/Hardware/VideoPower.h	29;"	d
SETSTANDBY	src/Device/Driver/ATR833.cpp	/^  static constexpr uint8_t SETSTANDBY = 0x12;$/;"	m	class:final	file:
SETTINGS	src/Dialogs/Task/AlternatesListDialog.cpp	/^    SETTINGS,$/;"	e	enum:final::Buttons	file:
SETUP	src/Dialogs/Device/LX/ManageNanoDialog.cpp	/^    SETUP,$/;"	e	enum:final::Controls	file:
SHA256State	src/Crypto/SHA256.hxx	/^class SHA256State {$/;"	c
SHADED	src/InfoBoxes/InfoBoxSettings.hpp	/^    SHADED,$/;"	m	class:InfoBoxSettings::BorderStyle
SHAPE	src/Dialogs/Plane/PlanePolarDialog.cpp	/^    SHAPE,$/;"	e	enum:final::Controls	file:
SHAPE_RENDERER_HPP	src/Topography/ShapeRenderer.hpp	25;"	d
SHIFT	src/Math/FastRotation.hpp	/^  static constexpr int SHIFT = 10;$/;"	m	class:FastIntegerRotation
SHORT	src/MapSettings.hpp	/^    SHORT,$/;"	m	class:TrailSettings::Length
SHOW_FAI_TRIANGLE_AREAS	src/Dialogs/Settings/Panels/ScoringConfigPanel.cpp	/^  SHOW_FAI_TRIANGLE_AREAS,$/;"	e	enum:ControlIndex	file:
SHOW_THERMALS	src/Dialogs/Settings/Panels/CloudConfigPanel.cpp	/^  SHOW_THERMALS,$/;"	e	enum:ControlIndex	file:
SHPHandle	src/Topography/shapelib/mapshape.h	/^  typedef SHPInfo * SHPHandle;$/;"	t
SHPInfo	src/Topography/shapelib/mapshape.h	/^  } SHPInfo;$/;"	t	typeref:struct:__anon75
SHPTreeHandle	src/Topography/shapelib/maptree.h	/^  typedef SHPTreeInfo * SHPTreeHandle;$/;"	t
SHPTreeInfo	src/Topography/shapelib/maptree.h	/^  } SHPTreeInfo;$/;"	t	typeref:struct:__anon81
SHP_ARC	src/Topography/shapelib/mapshape.h	59;"	d
SHP_ARCM	src/Topography/shapelib/mapshape.h	69;"	d
SHP_ARCZ	src/Topography/shapelib/mapshape.h	64;"	d
SHP_MULTIPOINT	src/Topography/shapelib/mapshape.h	61;"	d
SHP_MULTIPOINTM	src/Topography/shapelib/mapshape.h	71;"	d
SHP_MULTIPOINTZ	src/Topography/shapelib/mapshape.h	66;"	d
SHP_POINT	src/Topography/shapelib/mapshape.h	58;"	d
SHP_POINTM	src/Topography/shapelib/mapshape.h	68;"	d
SHP_POINTZ	src/Topography/shapelib/mapshape.h	63;"	d
SHP_POLYGON	src/Topography/shapelib/mapshape.h	60;"	d
SHP_POLYGONM	src/Topography/shapelib/mapshape.h	70;"	d
SHP_POLYGONZ	src/Topography/shapelib/mapshape.h	65;"	d
SHX_BUFFER_PAGE	src/Topography/shapelib/mapshape.h	52;"	d
SIDE_INFO_RELATIVE_ALTITUDE	src/Gauge/FlarmTrafficWindow.hpp	/^    SIDE_INFO_RELATIVE_ALTITUDE,$/;"	e	enum:FlarmTrafficWindow::SideInfoType
SIDE_INFO_VARIO	src/Gauge/FlarmTrafficWindow.hpp	/^    SIDE_INFO_VARIO,$/;"	e	enum:FlarmTrafficWindow::SideInfoType
SIGN	src/Form/DigitEntry.hpp	/^      SIGN,$/;"	m	class:CoordinateFormat::Column::Type
SIGNAL_FD_HXX	src/system/SignalFD.hxx	31;"	d
SIMPLE	src/Engine/Task/TaskBehaviour.hpp	/^  SIMPLE,$/;"	m	class:AbortTaskMode
SIMPLE	src/MapSettings.hpp	/^  SIMPLE,$/;"	m	class:AircraftSymbol
SIMPLE	src/Renderer/LabelShape.hpp	/^  SIMPLE,$/;"	m	class:LabelShape
SIMPLE_LARGE	src/MapSettings.hpp	/^  SIMPLE_LARGE,$/;"	m	class:AircraftSymbol
SIMULATION	src/NMEA/GPSState.hpp	/^  SIMULATION,$/;"	m	class:FixQuality
SIMULATOR	src/Dialogs/SimulatorPromptWindow.hpp	/^    SIMULATOR,$/;"	m	class:final::Result
SIMULATOR_AVAILABLE	src/Simulator.hpp	27;"	d
SIS_AT	src/Engine/Contest/Settings.hpp	/^  SIS_AT,$/;"	m	class:Contest
SITECONFIGPANEL_HPP	src/Dialogs/Settings/Panels/SiteConfigPanel.hpp	25;"	d
SIZE	src/Device/Driver/Volkslogger/dbbconv.h	/^  static constexpr size_t SIZE = DBB_SIZE + FRM_SIZE;$/;"	m	class:DBB
SIZE	src/NMEA/ClimbHistory.hpp	/^  static constexpr unsigned SIZE = 100;$/;"	m	class:ClimbHistory
SIZE	src/ui/canvas/opengl/VertexArray.hpp	/^  static constexpr unsigned SIZE = n;$/;"	m	struct:GLVertexArray
SIZE_MAX	src/Topography/shapelib/mapserver.h	92;"	d
SIZE_MAX	src/Topography/shapelib/mapserver.h	94;"	d
SKI	src/Tracking/LiveTrack24.hpp	/^  SKI = 16601,$/;"	m	class:LiveTrack24::VehicleType
SKYLINES_TRAFFIC	src/MapWindow/Items/MapItem.hpp	/^    SKYLINES_TRAFFIC,$/;"	e	enum:TaskPointType::Type
SKYLINES_TRAFFIC_MAP_MODE	src/Dialogs/Settings/Panels/SymbolsConfigPanel.cpp	/^  SKYLINES_TRAFFIC_MAP_MODE,$/;"	e	enum:ControlIndex	file:
SLES	src/Audio/SLES/AndroidSimpleBufferQueue.hpp	/^namespace SLES {$/;"	n
SLES	src/Audio/SLES/Engine.hpp	/^namespace SLES {$/;"	n
SLES	src/Audio/SLES/Init.cpp	/^namespace SLES {$/;"	n	file:
SLES	src/Audio/SLES/Init.hpp	/^namespace SLES {$/;"	n
SLES	src/Audio/SLES/Object.hpp	/^namespace SLES {$/;"	n
SLES	src/Audio/SLES/Play.hpp	/^namespace SLES {$/;"	n
SLES_ANDROID_SIMPLE_BUFFER_QUEUE_HPP	src/Audio/SLES/AndroidSimpleBufferQueue.hpp	31;"	d
SLES_ENGINE_HPP	src/Audio/SLES/Engine.hpp	31;"	d
SLES_OBJECT_HPP	src/Audio/SLES/Object.hpp	31;"	d
SLES_PLAY_HPP	src/Audio/SLES/Play.hpp	31;"	d
SLICE_ALLOCATOR_HXX	src/util/SliceAllocator.hxx	31;"	d
SL_ENABLED	src/Dialogs/Settings/Panels/TrackingConfigPanel.cpp	/^  SL_ENABLED,$/;"	e	enum:ControlIndex	file:
SL_INTERVAL	src/Dialogs/Settings/Panels/TrackingConfigPanel.cpp	/^  SL_INTERVAL,$/;"	e	enum:ControlIndex	file:
SL_KEY	src/Dialogs/Settings/Panels/TrackingConfigPanel.cpp	/^  SL_KEY,$/;"	e	enum:ControlIndex	file:
SL_NEAR_TRAFFIC_ENABLED	src/Dialogs/Settings/Panels/TrackingConfigPanel.cpp	/^  SL_NEAR_TRAFFIC_ENABLED,$/;"	e	enum:ControlIndex	file:
SL_ROAMING	src/Dialogs/Settings/Panels/TrackingConfigPanel.cpp	/^  SL_ROAMING,$/;"	e	enum:ControlIndex	file:
SL_TRAFFIC_ENABLED	src/Dialogs/Settings/Panels/TrackingConfigPanel.cpp	/^  SL_TRAFFIC_ENABLED,$/;"	e	enum:ControlIndex	file:
SMALL_CIRCLE_SIZE	src/ui/canvas/opengl/Shapes.hpp	/^static constexpr unsigned SMALL_CIRCLE_SIZE = 8;$/;"	m	namespace:OpenGL
SMALL_NUMBER	src/Topography/shapelib/mapsearch.c	373;"	d	file:
SNOWBOARD	src/Tracking/LiveTrack24.hpp	/^  SNOWBOARD = 16600,$/;"	m	class:LiveTrack24::VehicleType
SNOWKITE	src/Tracking/LiveTrack24.hpp	/^  SNOWKITE = 16602,$/;"	m	class:LiveTrack24::VehicleType
SOCKET_ADDRESS_HXX	src/net/SocketAddress.hxx	31;"	d
SOCKET_DESCRIPTOR_HXX	src/net/SocketDescriptor.hxx	31;"	d
SOCKET_ERROR_HXX	src/net/SocketError.hxx	31;"	d
SOFTWARE_ROTATE_DISPLAY	src/ui/opengl/Features.hpp	60;"	d
SOLID	src/Topography/ShapeRenderer.hpp	/^  enum { NONE, OUTLINE, SOLID } mode;$/;"	e	enum:ShapeRenderer::__anon82
SOLID	src/ui/canvas/Pen.hpp	/^    SOLID = PS_SOLID,$/;"	e	enum:Pen::Style
SOLVE_ZERO	src/Engine/Task/Solvers/TaskSolveTravelled.cpp	26;"	d	file:
SOONEST_AIRSPACE_HPP	src/Engine/Airspace/SoonestAirspace.hpp	25;"	d
SORT_ASC	src/Topography/shapelib/mapserver.h	/^      SORT_ASC,$/;"	e	enum:__anon54
SORT_DESC	src/Topography/shapelib/mapserver.h	/^      SORT_DESC$/;"	e	enum:__anon54
SOURCE	src/Dialogs/Settings/WindSettingsPanel.hpp	/^    SOURCE,$/;"	e	enum:final::ControlIndex
SPACER	src/Dialogs/Settings/Panels/AudioVarioConfigPanel.cpp	/^  SPACER,$/;"	e	enum:ControlIndex	file:
SPACER	src/Dialogs/Settings/Panels/ScoringConfigPanel.cpp	/^  SPACER,$/;"	e	enum:ControlIndex	file:
SPACER	src/Dialogs/Settings/Panels/TrackingConfigPanel.cpp	/^  SPACER,$/;"	e	enum:ControlIndex	file:
SPACER1	src/Dialogs/Traffic/FlarmTrafficDetails.cpp	/^    SPACER1,$/;"	e	enum:final::Controls	file:
SPACER2	src/Dialogs/Settings/Panels/AudioVarioConfigPanel.cpp	/^  SPACER2,$/;"	e	enum:ControlIndex	file:
SPACER2	src/Dialogs/Traffic/FlarmTrafficDetails.cpp	/^    SPACER2,$/;"	e	enum:final::Controls	file:
SPAN	src/event/TimerWheel.hxx	/^	static constexpr Event::Duration SPAN = std::chrono::minutes(2);$/;"	m	class:final
SPEED_ACHIEVED	src/Dialogs/StatusPanels/TaskStatusPanel.cpp	/^  SPEED_ACHIEVED,$/;"	e	enum:Controls	file:
SPEED_COMMAND	src/Dialogs/Device/Vega/SwitchesDialog.cpp	/^    SPEED_COMMAND,$/;"	e	enum:SwitchesLeft::Controls	file:
SPEED_REMAINING	src/Dialogs/StatusPanels/TaskStatusPanel.cpp	/^  SPEED_REMAINING,$/;"	e	enum:Controls	file:
SPLITRATIO	src/Topography/shapelib/maptree.c	55;"	d	file:
SPLIT_10	src/InfoBoxes/InfoBoxSettings.hpp	/^    SPLIT_10 = 23,$/;"	m	class:InfoBoxSettings::Geometry
SPLIT_3X4	src/InfoBoxes/InfoBoxSettings.hpp	/^    SPLIT_3X4 = 24,$/;"	m	class:InfoBoxSettings::Geometry
SPLIT_8	src/InfoBoxes/InfoBoxSettings.hpp	/^    SPLIT_8,$/;"	m	class:InfoBoxSettings::Geometry
SPLIT_THRESHOLD	src/util/QuadTree.hxx	/^	static constexpr unsigned SPLIT_THRESHOLD = 16;$/;"	m	class:QuadTree
SPREAD	src/Math/Histogram.hpp	/^  static constexpr double SPREAD = 0.15;$/;"	m	class:Histogram
SPR_FLY	src/Dialogs/dlgSimulatorPrompt.hpp	/^  SPR_FLY,$/;"	e	enum:SimulatorPromptResult
SPR_QUIT	src/Dialogs/dlgSimulatorPrompt.hpp	/^  SPR_QUIT,$/;"	e	enum:SimulatorPromptResult
SPR_SIMULATOR	src/Dialogs/dlgSimulatorPrompt.hpp	/^  SPR_SIMULATOR,$/;"	e	enum:SimulatorPromptResult
STA	src/Device/Driver/Volkslogger/vlconv.cpp	/^  C2 STA;$/;"	m	class:C_RECORD	file:
STANDARD	src/ui/canvas/Bitmap.hpp	/^    STANDARD,$/;"	m	class:final::Type
START	src/Device/Driver/LX/LXN.hpp	/^    START = 0x80,$/;"	e	enum:LXN::Command
START	src/Engine/Task/Points/Type.hpp	/^  START,$/;"	m	class:TaskPointType
START	src/Waypoint/WaypointFilter.hpp	/^  START,$/;"	m	class:TypeFilter
STARTPOINT_HPP	src/Engine/Task/Ordered/Points/StartPoint.hpp	26;"	d
START_ARMED	src/Engine/Task/Ordered/TaskAdvance.hpp	/^    START_ARMED,$/;"	e	enum:TaskAdvance::State
START_BGA	src/Engine/Task/Factory/TaskPointFactoryType.hpp	/^  START_BGA,$/;"	m	class:TaskPointFactoryType
START_CLOSE_TIME	src/Dialogs/Task/Manager/TaskPropertiesPanel.cpp	/^  START_CLOSE_TIME,$/;"	e	enum:Controls	file:
START_CYLINDER	src/Engine/Task/Factory/TaskPointFactoryType.hpp	/^  START_CYLINDER,$/;"	m	class:TaskPointFactoryType
START_DISARMED	src/Engine/Task/Ordered/TaskAdvance.hpp	/^    START_DISARMED,$/;"	e	enum:TaskAdvance::State
START_FRAME	src/Device/Driver/FLARM/BinaryProtocol.hpp	/^  static constexpr uint8_t START_FRAME = 0x73;$/;"	m	namespace:FLARM
START_HEIGHT_REF	src/Dialogs/Task/Manager/TaskPropertiesPanel.cpp	/^  START_HEIGHT_REF,$/;"	e	enum:Controls	file:
START_LINE	src/Engine/Task/Factory/TaskPointFactoryType.hpp	/^  START_LINE,$/;"	m	class:TaskPointFactoryType
START_MAX_HEIGHT	src/Dialogs/Task/Manager/TaskPropertiesPanel.cpp	/^  START_MAX_HEIGHT,$/;"	e	enum:Controls	file:
START_MAX_SPEED	src/Dialogs/Task/Manager/TaskPropertiesPanel.cpp	/^  START_MAX_SPEED,$/;"	e	enum:Controls	file:
START_ONLY	src/Logger/Settings.hpp	/^    START_ONLY,$/;"	m	class:LoggerSettings::AutoLogger
START_OPEN_ARRIVAL_TIME	src/InfoBoxes/Content/Type.hpp	/^    START_OPEN_ARRIVAL_TIME,$/;"	e	enum:InfoBoxFactory::Type
START_OPEN_TIME	src/Dialogs/Task/Manager/TaskPropertiesPanel.cpp	/^  START_OPEN_TIME,$/;"	e	enum:Controls	file:
START_OPEN_TIME	src/InfoBoxes/Content/Type.hpp	/^    START_OPEN_TIME,$/;"	e	enum:InfoBoxFactory::Type
START_RADIAL	src/Dialogs/Task/Widgets/SectorZoneEditWidget.cpp	/^  START_RADIAL,$/;"	e	enum:Controls	file:
START_REQUIRES_ARM	src/Dialogs/Task/Manager/TaskPropertiesPanel.cpp	/^  START_REQUIRES_ARM,$/;"	e	enum:Controls	file:
START_SECTOR	src/Engine/Task/Factory/TaskPointFactoryType.hpp	/^  START_SECTOR = 0,$/;"	m	class:TaskPointFactoryType
STATE_COMM_MSG	src/Device/Driver/IMI/Protocol/MessageParser.cpp	/^    STATE_COMM_MSG$/;"	e	enum:IMI::MessageParser::TState	file:
STATE_NOT_SYNC	src/Device/Driver/IMI/Protocol/MessageParser.cpp	/^    STATE_NOT_SYNC,$/;"	e	enum:IMI::MessageParser::TState	file:
STATIC_ARRAY_HXX	src/util/StaticArray.hxx	31;"	d
STATIC_FIFO_BUFFER_HXX	src/util/StaticFifoBuffer.hxx	31;"	d
STATIC_OBJECT	src/FLARM/Traffic.hpp	/^    STATIC_OBJECT = 15    \/\/!< static object$/;"	m	class:FlarmTraffic::AircraftType
STATIC_ONLY	src/Device/Config.hpp	/^    STATIC_ONLY,$/;"	m	class:DeviceConfig::PressureUse
STATIC_SOCKET_ADDRESS_HXX	src/net/StaticSocketAddress.hxx	31;"	d
STATIC_STRING_HPP	src/util/StaticString.hxx	31;"	d
STATIC_WITH_VARIO	src/Device/Config.hpp	/^    STATIC_WITH_VARIO,$/;"	m	class:DeviceConfig::PressureUse
STATUS_t	src/VALI-XCS.cpp	/^enum STATUS_t {$/;"	g	file:
STATUTE_MILES	src/Units/Unit.hpp	/^  STATUTE_MILES,$/;"	m	class:Unit
STATUTE_MILES_PER_HOUR	src/Units/Unit.hpp	/^  STATUTE_MILES_PER_HOUR,$/;"	m	class:Unit
STD	src/Geo/AltitudeReference.hpp	/^  STD,$/;"	m	class:AltitudeReference
STDIO_OUTPUT_STREAM_HXX	src/io/StdioOutputStream.hxx	31;"	d
STENCIL_ATTACHMENT	src/ui/canvas/opengl/FBO.hpp	/^static constexpr GLenum STENCIL_ATTACHMENT = GL_STENCIL_ATTACHMENT;$/;"	m	namespace:FBO
STEPS	src/Engine/Task/Shapes/FAITriangleArea.cpp	/^static constexpr unsigned STEPS = FAI_TRIANGLE_SECTOR_MAX \/ 3 \/ 8;$/;"	v	file:
STEPS_MACCREADY	src/Renderer/MacCreadyRenderer.cpp	36;"	d	file:
STRAIGHT	src/Engine/Route/Config.hpp	/^    STRAIGHT,$/;"	m	class:RoutePlannerConfig::ReachMode
STRING	src/Form/DataField/Base.hpp	/^    STRING,$/;"	m	class:DataField::Type
STRING_API_HXX	src/util/StringAPI.hxx	31;"	d
STRING_BUFFER_HXX	src/util/StringBuffer.hxx	31;"	d
STRING_BUILDER_HXX	src/util/StringBuilder.hxx	31;"	d
STRING_COMPARE_HXX	src/util/StringCompare.hxx	31;"	d
STRING_FORMAT_HPP	src/util/StringFormat.hpp	31;"	d
STRING_PARSER_HXX	src/util/StringParser.hxx	31;"	d
STRING_POINTER_HXX	src/util/StringPointer.hxx	31;"	d
STRING_STRIP_HXX	src/util/StringStrip.hxx	31;"	d
STRING_VIEW_HXX	src/util/StringView.hxx	31;"	d
STX	src/Device/Driver/ATR833.cpp	/^static constexpr uint8_t STX = 0x02;$/;"	v	file:
STX	src/Device/Driver/KRT2.cpp	/^  static constexpr char STX = 0x02; \/\/!< Command start character.$/;"	m	class:final	file:
STX	src/Device/Driver/Volkslogger/Protocol.hpp	/^    STX = 0x02,$/;"	e	enum:Volkslogger::__anon164
STYLE_BLACK	src/Look/ChartLook.hpp	/^    STYLE_BLACK,$/;"	e	enum:ChartLook::Style
STYLE_BLUE	src/Look/ChartLook.hpp	/^    STYLE_BLUE,$/;"	e	enum:ChartLook::Style
STYLE_BLUEDASH	src/Look/ChartLook.hpp	/^    STYLE_BLUEDASH,$/;"	e	enum:ChartLook::Style
STYLE_BLUETHINDASH	src/Look/ChartLook.hpp	/^    STYLE_BLUETHINDASH,$/;"	e	enum:ChartLook::Style
STYLE_COUNT	src/Look/ChartLook.hpp	/^    STYLE_COUNT$/;"	e	enum:ChartLook::Style
STYLE_GREEN	src/Look/ChartLook.hpp	/^    STYLE_GREEN,$/;"	e	enum:ChartLook::Style
STYLE_GREENDASH	src/Look/ChartLook.hpp	/^    STYLE_GREENDASH,$/;"	e	enum:ChartLook::Style
STYLE_GRID	src/Look/ChartLook.hpp	/^    STYLE_GRID,$/;"	e	enum:ChartLook::Style
STYLE_GRIDMINOR	src/Look/ChartLook.hpp	/^    STYLE_GRIDMINOR,$/;"	e	enum:ChartLook::Style
STYLE_GRIDZERO	src/Look/ChartLook.hpp	/^    STYLE_GRIDZERO,$/;"	e	enum:ChartLook::Style
STYLE_RED	src/Look/ChartLook.hpp	/^    STYLE_RED,$/;"	e	enum:ChartLook::Style
STYLE_REDTHICKDASH	src/Look/ChartLook.hpp	/^    STYLE_REDTHICKDASH,$/;"	e	enum:ChartLook::Style
STYLE_WHITE	src/Look/ChartLook.hpp	/^    STYLE_WHITE,$/;"	e	enum:ChartLook::Style
SUBLANG_ENGLISH_AUS	src/Units/UnitsGlue.cpp	/^  SUBLANG_ENGLISH_AUS,$/;"	e	enum:__anon169	file:
SUBLANG_ENGLISH_UK	src/Units/UnitsGlue.cpp	/^  SUBLANG_ENGLISH_UK,$/;"	e	enum:__anon169	file:
SUBLANG_ENGLISH_US	src/Units/UnitsGlue.cpp	/^  SUBLANG_ENGLISH_US,$/;"	e	enum:__anon169	file:
SUBPIXEL_BITS	src/Terrain/RasterTraits.hpp	/^  constexpr unsigned SUBPIXEL_BITS = 8;$/;"	m	namespace:RasterTraits
SUCCESS	src/Job/TriStateJob.hpp	/^  SUCCESS, ERROR, CANCELLED$/;"	m	class:TriStateJobResult
SUCCESS	src/Task/MapTaskManager.hpp	/^    SUCCESS,$/;"	e	enum:MapTaskManager::TaskEditResult
SUN	src/Terrain/TerrainSettings.hpp	/^  SUN,$/;"	m	class:SlopeShading
SUN_DIAMETER	src/Math/SunEphemeris.cpp	/^static constexpr double SUN_DIAMETER = 0.53;$/;"	v	file:
SUN_EPHEMERIS_HPP	src/Math/SunEphemeris.hpp	25;"	d
SWAP	src/Topography/shapelib/mapprimitive.c	44;"	d	file:
SWAP_FOUR_BYTES	src/Topography/shapelib/mapshape.c	59;"	d	file:
SWITCH_INFO_BOX	src/Dialogs/dlgInfoBoxAccess.cpp	/^static constexpr int SWITCH_INFO_BOX = 100;$/;"	v	file:
SWITCH_KERNEL	src/Kobo/SystemDialog.cpp	/^    SWITCH_KERNEL,$/;"	e	enum:final::Buttons	file:
SYMBOL	src/MapSettings.hpp	/^  SYMBOL,$/;"	m	class:DisplaySkyLinesTrafficMapMode
SYMBOLSCONFIGPANEL_HPP	src/Dialogs/Settings/Panels/SymbolsConfigPanel.hpp	25;"	d
SYMBOL_NAME	src/MapSettings.hpp	/^  SYMBOL_NAME,$/;"	m	class:DisplaySkyLinesTrafficMapMode
SYMMETRICAL	src/Task/TaskFileSeeYou.cpp	/^    SYMMETRICAL,$/;"	e	enum:SeeYouTurnpointInformation::Style	file:
SYMMETRICSECTORZONE_HPP	src/Engine/Task/ObservationZones/SymmetricSectorZone.hpp	25;"	d
SYMMETRIC_QUADRANT	src/Engine/Task/Factory/TaskPointFactoryType.hpp	/^  SYMMETRIC_QUADRANT,$/;"	m	class:TaskPointFactoryType
SYMMETRIC_QUADRANT	src/Engine/Task/ObservationZones/ObservationZone.hpp	/^    SYMMETRIC_QUADRANT,$/;"	m	class:ObservationZone::Shape
SYN	src/Device/Driver/LX/Protocol.hpp	/^    SYN = 0x16,$/;"	e	enum:LX::Command
SYNC	src/Device/Driver/ATR833.cpp	/^static constexpr uint8_t SYNC = 'r';$/;"	v	file:
SYSTEM	src/Kobo/KoboMenu.cpp	/^  SYSTEM,$/;"	e	enum:Buttons	file:
SYSTEM_ERROR_HXX	src/system/Error.hxx	31;"	d
SafeLinkIntrusiveListHook	src/util/IntrusiveList.hxx	/^class SafeLinkIntrusiveListHook : public IntrusiveListHook {$/;"	c
SafetyAltitudeArrival	src/Profile/ProfileKeys.cpp	/^const char SafetyAltitudeArrival[] = "SafetyAltitudeArrival";$/;"	m	namespace:ProfileKeys	file:
SafetyAltitudeTerrain	src/Profile/ProfileKeys.cpp	/^const char SafetyAltitudeTerrain[] = "SafetyAltitudeTerrain";$/;"	m	namespace:ProfileKeys	file:
SafetyFactorsConfigPanel	src/Dialogs/Settings/Panels/SafetyFactorsConfigPanel.cpp	/^  SafetyFactorsConfigPanel()$/;"	f	class:final
SafetyMC	src/Dialogs/Settings/Panels/SafetyFactorsConfigPanel.cpp	/^  SafetyMC,$/;"	e	enum:ControlIndex	file:
SafetyMacCready	src/Profile/ProfileKeys.cpp	/^const char SafetyMacCready[] = "SafetyMacCready";$/;"	m	namespace:ProfileKeys	file:
SafteySpeed	src/Profile/ProfileKeys.cpp	/^const char SafteySpeed[] = "SafteySpeed";$/;"	m	namespace:ProfileKeys	file:
Sample	src/Computer/Wind/CirclingWind.hpp	/^  struct Sample$/;"	s	class:CirclingWind
Sample	src/Math/DifferentialWindowFilter.hpp	/^  struct Sample {$/;"	s	class:DifferentialWindowFilter
SampledTaskPoint	src/Engine/Task/Points/SampledTaskPoint.cpp	/^SampledTaskPoint::SampledTaskPoint(const GeoPoint &location,$/;"	f	class:SampledTaskPoint
SampledTaskPoint	src/Engine/Task/Points/SampledTaskPoint.hpp	/^class SampledTaskPoint {$/;"	c
SanitiseLine	src/Device/Util/LineSplitter.cpp	/^SanitiseLine(char *const begin, char *const end)$/;"	f	file:
Save	src/Cloud/Client.cpp	/^CloudClient::Save(Serialiser &s) const$/;"	f	class:CloudClient
Save	src/Cloud/Client.cpp	/^CloudClientContainer::Save(Serialiser &s) const$/;"	f	class:CloudClientContainer
Save	src/Cloud/Data.cpp	/^CloudData::Save(Serialiser &s) const$/;"	f	class:CloudData
Save	src/Cloud/Main.cpp	/^CloudServer::Save()$/;"	f	class:CloudServer
Save	src/Cloud/Thermal.cpp	/^CloudThermal::Save(Serialiser &s) const$/;"	f	class:CloudThermal
Save	src/Cloud/Thermal.cpp	/^CloudThermalContainer::Save(Serialiser &s) const$/;"	f	class:CloudThermalContainer
Save	src/Profile/FlarmProfile.cpp	/^Profile::Save(ProfileMap &map, const FlarmColorDatabase &db)$/;"	f	class:Profile
Save	src/Profile/InfoBoxConfig.cpp	/^Profile::Save(ProfileMap &map,$/;"	f	class:Profile
Save	src/Profile/PageProfile.cpp	/^Profile::Save(ProfileMap &map, const PageLayout &page, const unsigned i)$/;"	f	class:Profile
Save	src/Profile/PageProfile.cpp	/^Profile::Save(ProfileMap &map, const PageSettings &settings)$/;"	f	class:Profile
Save	src/Widget/ManagedWidget.cpp	/^ManagedWidget::Save(bool &changed)$/;"	f	class:ManagedWidget
Save	src/io/FileCache.cpp	/^FileCache::Save(const TCHAR *name, Path original_path)$/;"	f	class:FileCache
SaveCache	src/Terrain/RasterMap.hpp	/^  bool SaveCache(FILE *file) const {$/;"	f	class:RasterMap
SaveCache	src/Terrain/RasterTerrain.cpp	/^RasterTerrain::SaveCache(FileCache &cache, Path path) const$/;"	f	class:RasterTerrain
SaveCache	src/Terrain/RasterTile.cpp	/^RasterTile::SaveCache(FILE *file) const$/;"	f	class:RasterTile
SaveCache	src/Terrain/RasterTileCache.cpp	/^RasterTileCache::SaveCache(FILE *file) const$/;"	f	class:RasterTileCache
SaveConfig	src/Kobo/WPASupplicant.hpp	/^  bool SaveConfig() {$/;"	f	class:WPASupplicant
SaveDisplayModeScales	src/MapWindow/GlueMapWindowDisplayMode.cpp	/^GlueMapWindow::SaveDisplayModeScales()$/;"	f	class:GlueMapWindow
SaveFile	src/Profile/File.cpp	/^Profile::SaveFile(const ProfileMap &map, Path path)$/;"	f	class:Profile
SaveFile	src/Profile/Profile.cpp	/^Profile::SaveFile(Path path)$/;"	f	class:Profile
SaveFinish	src/Computer/GlideComputerBlackboard.cpp	/^GlideComputerBlackboard::SaveFinish()$/;"	f	class:GlideComputerBlackboard
SaveFlarmColors	src/FLARM/Glue.cpp	/^SaveFlarmColors()$/;"	f
SaveFlarmNameFile	src/FLARM/NameFile.cpp	/^SaveFlarmNameFile(BufferedOutputStream &writer, FlarmNameDatabase &db)$/;"	f
SaveFlarmNames	src/FLARM/Glue.cpp	/^SaveFlarmNames()$/;"	f
SaveHome	src/Waypoint/HomeGlue.cpp	/^WaypointGlue::SaveHome(ProfileMap &profile,$/;"	f	class:WaypointGlue
SaveKey	src/Dialogs/Settings/Panels/TrackingConfigPanel.cpp	/^SaveKey(const RowFormWidget &form, unsigned idx, const char *profile_key,$/;"	f	file:
SaveLast	src/Computer/ConditionMonitor/ConditionMonitorFinalGlide.cpp	/^ConditionMonitorFinalGlide::SaveLast()$/;"	f	class:ConditionMonitorFinalGlide
SaveLast	src/Computer/ConditionMonitor/ConditionMonitorLandableReachable.cpp	/^ConditionMonitorLandableReachable::SaveLast()$/;"	f	class:ConditionMonitorLandableReachable
SaveLast	src/Computer/ConditionMonitor/ConditionMonitorWind.cpp	/^ConditionMonitorWind::SaveLast()$/;"	f	class:ConditionMonitorWind
SaveSecondary	src/FLARM/Glue.cpp	/^SaveSecondary(FlarmNameDatabase &flarm_names)$/;"	f	file:
SaveSetting	src/Dialogs/Device/LX/NanoConfigWidget.cpp	/^NanoConfigWidget::SaveSetting(const char *name, unsigned idx,$/;"	f	class:NanoConfigWidget
SaveState	src/Engine/Airspace/AirspaceWarning.cpp	/^void AirspaceWarning::SaveState()$/;"	f	class:AirspaceWarning
SaveTask	src/Dialogs/Task/Manager/TaskActionsPanel.cpp	/^TaskActionsPanel::SaveTask()$/;"	f	class:TaskActionsPanel
SaveTask	src/Task/SaveFile.cpp	/^SaveTask(Path path, const OrderedTask &task)$/;"	f
SaveTask	src/Task/Serialiser.cpp	/^SaveTask(WritableDataNode &node, const OrderedTask &task)$/;"	f
SaveToEEPROM	src/Device/Driver/LX/LX1600.hpp	/^  SaveToEEPROM(Port &port, OperationEnvironment &env)$/;"	f	namespace:LX1600
SaveToFile	src/Polar/PolarFileGlue.cpp	/^PolarGlue::SaveToFile(const PolarInfo &polar, BufferedOutputStream &writer)$/;"	f	class:PolarGlue
SaveToFile	src/Polar/PolarFileGlue.cpp	/^PolarGlue::SaveToFile(const PolarInfo &polar, Path path)$/;"	f	class:PolarGlue
SaveToProfile	src/Weather/NOAAGlue.cpp	/^NOAAStore::SaveToProfile()$/;"	f	class:NOAAStore
SaveWaypoint	src/Waypoint/SaveGlue.cpp	/^WaypointGlue::SaveWaypoint(const Waypoint &wp)$/;"	f	class:WaypointGlue
SaveWaypoints	src/Dialogs/Waypoint/Manager.cpp	/^WaypointManagerWidget::SaveWaypoints()$/;"	f	class:WaypointManagerWidget
SaveWaypoints	src/Waypoint/SaveGlue.cpp	/^WaypointGlue::SaveWaypoints(const Waypoints &way_points)$/;"	f	class:WaypointGlue
SbestLD	src/Engine/GlideSolvers/GlidePolar.hpp	/^  double SbestLD;$/;"	m	class:GlidePolar
Scale	src/Geo/GeoBounds.cpp	/^GeoBounds::Scale(double factor) const$/;"	f	class:GeoBounds
ScaleChart	src/Renderer/ThermalBandRenderer.cpp	/^ThermalBandRenderer::ScaleChart(const DerivedInfo &calculated,$/;"	f	class:ThermalBandRenderer
ScaleChart	src/Renderer/TraceHistoryRenderer.cpp	/^TraceHistoryRenderer::ScaleChart(ChartRenderer &chart,$/;"	f	class:TraceHistoryRenderer
ScaleChartFromThermalBand	src/Renderer/ThermalBandRenderer.cpp	/^ThermalBandRenderer::ScaleChartFromThermalBand(const ThermalBand &thermal_band,$/;"	f	class:ThermalBandRenderer
ScaleList	src/Projection/MapWindowProjection.cpp	/^static constexpr unsigned ScaleList[] = {$/;"	v	file:
ScaleListCount	src/Projection/MapWindowProjection.cpp	/^static constexpr unsigned ScaleListCount = ARRAY_SIZE(ScaleList);$/;"	v	file:
ScalePixels	src/ui/canvas/memory/RasterCanvas.hpp	/^  void ScalePixels(rpointer dest, unsigned dest_size,$/;"	f	class:RasterCanvas
ScaleRectangle	src/ui/canvas/memory/RasterCanvas.hpp	/^  void ScaleRectangle(PixelPoint dest_position, PixelSize dest_size,$/;"	f	class:RasterCanvas
ScaleX	src/Terrain/ScanLine.cpp	/^ScaleX(const GridRay &ray, int x, int range)$/;"	f	file:
ScaleY	src/Terrain/ScanLine.cpp	/^ScaleY(const GridRay &ray, int y, int range)$/;"	f	file:
Scan	src/Geo/Flat/TaskProjection.hpp	/^  bool Scan(const GeoPoint &ref) {$/;"	f	class:TaskProjection
Scan	src/Kobo/WPASupplicant.cpp	/^WPASupplicant::Scan()$/;"	f	class:WPASupplicant
Scan	src/Task/TaskStore.cpp	/^TaskStore::Scan(bool extra)$/;"	f	class:TaskStore
ScanActive	src/Engine/Task/Ordered/Points/OrderedTaskPoint.cpp	/^OrderedTaskPoint::ScanActive(const OrderedTaskPoint &atp)$/;"	f	class:OrderedTaskPoint
ScanAll	src/Weather/Rasp/RaspStore.cpp	/^RaspStore::ScanAll()$/;"	f	class:RaspStore
ScanBluetoothLeWidget	src/Dialogs/Device/ScanBluetoothLeDialog.cpp	/^  explicit ScanBluetoothLeWidget(WidgetDialog &_dialog)$/;"	f	class:final
ScanBounds	src/Engine/Task/Ordered/Points/OrderedTaskPoint.cpp	/^OrderedTaskPoint::ScanBounds(GeoBounds &bounds) const$/;"	f	class:OrderedTaskPoint
ScanBounds	src/Engine/Trace/Vector.cpp	/^TracePointVector::ScanBounds(GeoBounds &bounds) const$/;"	f	class:TracePointVector
ScanBounds	src/Renderer/TrailRenderer.hpp	/^  void ScanBounds(GeoBounds &bounds) const {$/;"	f	class:TrailRenderer
ScanBuffer	src/Replay/IgcReplay.cpp	/^IgcReplay::ScanBuffer(const char *buffer, IGCFix &fix, NMEAInfo &basic)$/;"	f	class:IgcReplay
ScanDirectories	src/system/FileUtil.cpp	/^ScanDirectories(File::Visitor &visitor, bool recursive,$/;"	f	file:
ScanDirectoryTop	src/Form/DataField/File.cpp	/^FileDataField::ScanDirectoryTop(const TCHAR *filter)$/;"	f	class:FileDataField
ScanDistanceMax	src/Engine/Task/Ordered/OrderedTask.cpp	/^OrderedTask::ScanDistanceMax()$/;"	f	class:OrderedTask
ScanDistanceMax	src/Engine/Task/Points/TaskLeg.cpp	/^TaskLeg::ScanDistanceMax() const$/;"	f	class:TaskLeg
ScanDistanceMin	src/Engine/Task/Ordered/OrderedTask.cpp	/^OrderedTask::ScanDistanceMin(const GeoPoint &location, bool full)$/;"	f	class:OrderedTask
ScanDistanceMin	src/Engine/Task/Points/TaskLeg.cpp	/^TaskLeg::ScanDistanceMin() const$/;"	f	class:TaskLeg
ScanDistanceNominal	src/Engine/Task/Points/TaskLeg.cpp	/^TaskLeg::ScanDistanceNominal() const$/;"	f	class:TaskLeg
ScanDistancePlanned	src/Engine/Task/Points/TaskLeg.cpp	/^TaskLeg::ScanDistancePlanned()$/;"	f	class:TaskLeg
ScanDistanceRemaining	src/Engine/Task/Points/TaskLeg.cpp	/^TaskLeg::ScanDistanceRemaining(const GeoPoint &ref)$/;"	f	class:TaskLeg
ScanDistanceScored	src/Engine/Task/Points/TaskLeg.cpp	/^TaskLeg::ScanDistanceScored(const GeoPoint &ref) const$/;"	f	class:TaskLeg
ScanDistanceTravelled	src/Engine/Task/Points/TaskLeg.cpp	/^TaskLeg::ScanDistanceTravelled(const GeoPoint &ref)$/;"	f	class:TaskLeg
ScanFiles	src/system/FileUtil.cpp	/^ScanFiles(File::Visitor &visitor, Path sPath,$/;"	f	file:
ScanHorizontalLine	src/Terrain/RasterBuffer.cpp	/^RasterBuffer::ScanHorizontalLine(unsigned ax, unsigned bx, unsigned y,$/;"	f	class:RasterBuffer
ScanLine	src/Terrain/RasterBuffer.cpp	/^RasterBuffer::ScanLine(unsigned ax, unsigned ay, unsigned bx, unsigned by,$/;"	f	class:RasterBuffer
ScanLine	src/Terrain/RasterMap.cpp	/^RasterMap::ScanLine(const GeoPoint &start, const GeoPoint &end,$/;"	f	class:RasterMap
ScanLine	src/Terrain/RasterTile.hpp	/^  void ScanLine(unsigned ax, unsigned ay, unsigned bx, unsigned by,$/;"	f	class:RasterTile
ScanLine	src/Terrain/ScanLine.cpp	/^RasterTileCache::ScanLine(const RasterLocation _start,$/;"	f	class:RasterTileCache
ScanLineChecked	src/Terrain/RasterBuffer.cpp	/^RasterBuffer::ScanLineChecked(unsigned ax, unsigned ay,$/;"	f	class:RasterBuffer
ScanMap	src/Terrain/RasterRenderer.cpp	/^RasterRenderer::ScanMap(const RasterMap &map, const WindowProjection &projection)$/;"	f	class:RasterRenderer
ScanMapItem	src/Weather/Rasp/RaspStore.cpp	/^RaspStore::ScanMapItem(const ZipArchive &archive, MapItem &item)$/;"	f	class:RaspStore
ScanMultiplePatterns	src/Form/DataField/File.cpp	/^FileDataField::ScanMultiplePatterns(const TCHAR *patterns)$/;"	f	class:FileDataField
ScanResults	src/Kobo/WPASupplicant.cpp	/^WPASupplicant::ScanResults(WifiVisibleNetwork *dest, unsigned max)$/;"	f	class:WPASupplicant
ScanStartFinish	src/Engine/Task/Ordered/OrderedTask.cpp	/^OrderedTask::ScanStartFinish()$/;"	f	class:OrderedTask
ScanTaskPoint	src/Engine/PathSolvers/ScanTaskPoint.hpp	/^class ScanTaskPoint {$/;"	c
ScanTileLine	src/Terrain/ScanLine.cpp	/^RasterTileCache::ScanTileLine(GridLocation start, GridLocation end,$/;"	f	class:RasterTileCache
ScanVisibility	src/Topography/TopographyStore.cpp	/^TopographyStore::ScanVisibility(const WindowProjection &m_projection,$/;"	f	class:TopographyStore
Schedule	src/Monitor/AirspaceWarningMonitor.hpp	/^  void Schedule() {$/;"	f	class:AirspaceWarningMonitor
ScheduleExpire	src/Cloud/Main.cpp	/^  void ScheduleExpire() {$/;"	f	class:final	file:
ScheduleMerge	src/Blackboard/DeviceBlackboard.cpp	/^DeviceBlackboard::ScheduleMerge()$/;"	f	class:DeviceBlackboard
ScheduleOptimise	src/Engine/Waypoint/Waypoints.hpp	/^  void ScheduleOptimise() {$/;"	f	class:Waypoints
ScheduleSave	src/Cloud/Main.cpp	/^  void ScheduleSave() {$/;"	f	class:final	file:
ScopeAlphaBlend	src/ui/canvas/opengl/Scope.hpp	/^class ScopeAlphaBlend : GLBlend {$/;"	c
ScopeCalculatedListener	src/Blackboard/ScopeCalculatedListener.hpp	/^  ScopeCalculatedListener(LiveBlackboard &_blackboard, Function _function)$/;"	f	class:ScopeCalculatedListener
ScopeCalculatedListener	src/Blackboard/ScopeCalculatedListener.hpp	/^class ScopeCalculatedListener : public NullBlackboardListener {$/;"	c
ScopeCheckStack	src/lua/Assert.hxx	/^	explicit ScopeCheckStack(lua_State *_L, int offset = 0)$/;"	f	class:Lua::ScopeCheckStack
ScopeCheckStack	src/lua/Assert.hxx	/^class ScopeCheckStack {$/;"	c	namespace:Lua
ScopeColorPointer	src/ui/canvas/opengl/Color.hpp	/^  ScopeColorPointer(const Color *p) {$/;"	f	struct:ScopeColorPointer
ScopeColorPointer	src/ui/canvas/opengl/Color.hpp	/^struct ScopeColorPointer {$/;"	s
ScopeExitCat	src/util/ScopeExit.hxx	72;"	d
ScopeExitGuard	src/util/ScopeExit.hxx	/^	ScopeExitGuard(ScopeExitGuard &&src)$/;"	f	class:ScopeExitGuard
ScopeExitGuard	src/util/ScopeExit.hxx	/^	explicit ScopeExitGuard(F &&f):F(std::forward<F>(f)) {}$/;"	f	class:ScopeExitGuard
ScopeExitGuard	src/util/ScopeExit.hxx	/^class ScopeExitGuard : F {$/;"	c
ScopeExitName	src/util/ScopeExit.hxx	73;"	d
ScopeExitTag	src/util/ScopeExit.hxx	/^struct ScopeExitTag {$/;"	s
ScopeGPSListener	src/Blackboard/ScopeGPSListener.hpp	/^  ScopeGPSListener(LiveBlackboard &_blackboard, Function _function)$/;"	f	class:ScopeGPSListener
ScopeGPSListener	src/Blackboard/ScopeGPSListener.hpp	/^class ScopeGPSListener : public NullBlackboardListener {$/;"	c
ScopeGlobalAsioThread	src/io/async/GlobalAsioThread.hpp	/^  ScopeGlobalAsioThread() {$/;"	f	class:ScopeGlobalAsioThread
ScopeGlobalAsioThread	src/io/async/GlobalAsioThread.hpp	/^class ScopeGlobalAsioThread {$/;"	c
ScopeGlobalPCMMixer	src/Audio/GlobalPCMMixer.hpp	/^  ScopeGlobalPCMMixer(EventLoop &event_loop) {$/;"	f	class:final
ScopeGlobalPCMResourcePlayer	src/Audio/GlobalPCMResourcePlayer.hpp	/^  ScopeGlobalPCMResourcePlayer() {$/;"	f	class:final
ScopeGlobalVolumeController	src/Audio/GlobalVolumeController.hpp	/^  ScopeGlobalVolumeController() {$/;"	f	class:final
ScopeInit	src/net/http/Init.hpp	/^  ScopeInit(EventLoop &event_loop) {$/;"	f	class:Net::ScopeInit
ScopeInit	src/net/http/Init.hpp	/^class ScopeInit {$/;"	c	namespace:Net
ScopeLockCPU	src/Hardware/CPU.hpp	/^  ScopeLockCPU() {$/;"	f	struct:ScopeLockCPU
ScopeLockCPU	src/Hardware/CPU.hpp	/^struct ScopeLockCPU {$/;"	s
ScopeReturnDevice	src/Device/Descriptor.cpp	/^  ScopeReturnDevice(DeviceDescriptor &_device, OperationEnvironment &_env)$/;"	f	struct:ScopeReturnDevice
ScopeReturnDevice	src/Device/Descriptor.cpp	/^struct ScopeReturnDevice {$/;"	s	file:
ScopeSuspendAllThreads	src/Protection.hpp	/^  ScopeSuspendAllThreads() { SuspendAllThreads(); }$/;"	f	class:ScopeSuspendAllThreads
ScopeSuspendAllThreads	src/Protection.hpp	/^class ScopeSuspendAllThreads {$/;"	c
ScopeTextureConstantAlpha	src/ui/canvas/opengl/ConstantAlpha.cpp	/^ScopeTextureConstantAlpha::ScopeTextureConstantAlpha(bool use_texture_alpha,$/;"	f	class:ScopeTextureConstantAlpha
ScopeTextureConstantAlpha	src/ui/canvas/opengl/ConstantAlpha.hpp	/^class ScopeTextureConstantAlpha {$/;"	c
ScopeUnlock	src/thread/Mutex.hxx	/^class ScopeUnlock {$/;"	c
ScopeVertexPointer	src/ui/canvas/opengl/VertexPointer.hpp	/^struct ScopeVertexPointer {$/;"	s
Score	src/Computer/Wind/MeasurementList.hpp	/^  constexpr unsigned Score(unsigned _time) const {$/;"	f	struct:WindMeasurement
ScoreAdjustment	src/Engine/Task/ObservationZones/CylinderZone.cpp	/^CylinderZone::ScoreAdjustment() const$/;"	f	class:CylinderZone
ScoreAdjustment	src/Engine/Task/ObservationZones/KeyholeZone.cpp	/^KeyholeZone::ScoreAdjustment() const$/;"	f	class:KeyholeZone
ScoreAdjustment	src/Engine/Task/ObservationZones/LineSectorZone.cpp	/^LineSectorZone::ScoreAdjustment() const$/;"	f	class:LineSectorZone
ScoreAdjustment	src/Engine/Task/ObservationZones/ObservationZoneClient.cpp	/^ObservationZoneClient::ScoreAdjustment() const$/;"	f	class:ObservationZoneClient
ScoreAdjustment	src/Engine/Task/ObservationZones/SectorZone.cpp	/^SectorZone::ScoreAdjustment() const$/;"	f	class:SectorZone
ScoreFirstEntry	src/Engine/Task/Points/ScoredTaskPoint.hpp	/^  virtual bool ScoreFirstEntry() const {$/;"	f	class:ScoredTaskPoint
ScoreLastExit	src/Engine/Task/Points/ScoredTaskPoint.hpp	/^  virtual bool ScoreLastExit() const {$/;"	f	class:ScoredTaskPoint
ScoredTaskPoint	src/Engine/Task/Points/ScoredTaskPoint.cpp	/^ScoredTaskPoint::ScoredTaskPoint(const GeoPoint &location, bool b_scored)$/;"	f	class:ScoredTaskPoint
ScoredTaskPoint	src/Engine/Task/Points/ScoredTaskPoint.hpp	/^class ScoredTaskPoint : public SampledTaskPoint$/;"	c
ScoringConfigPanel	src/Dialogs/Settings/Panels/ScoringConfigPanel.cpp	/^  ScoringConfigPanel()$/;"	f	class:final
ScreenDeinitialized	src/Screen/Debug.cpp	/^ScreenDeinitialized()$/;"	f
ScreenDeinitialized	src/Screen/Debug.hpp	/^ScreenDeinitialized() {}$/;"	f
ScreenGlobalInit	src/ui/window/Init.hpp	/^class ScreenGlobalInit {$/;"	c
ScreenGlobalInit	src/ui/window/egl/Init.cpp	/^ScreenGlobalInit::ScreenGlobalInit()$/;"	f	class:ScreenGlobalInit
ScreenGlobalInit	src/ui/window/fb/Init.cpp	/^ScreenGlobalInit::ScreenGlobalInit()$/;"	f	class:ScreenGlobalInit
ScreenGlobalInit	src/ui/window/gdi/Init.cpp	/^ScreenGlobalInit::ScreenGlobalInit()$/;"	f	class:ScreenGlobalInit
ScreenGlobalInit	src/ui/window/glx/Init.cpp	/^ScreenGlobalInit::ScreenGlobalInit()$/;"	f	class:ScreenGlobalInit
ScreenGlobalInit	src/ui/window/sdl/Init.cpp	/^ScreenGlobalInit::ScreenGlobalInit()$/;"	f	class:ScreenGlobalInit
ScreenInitialized	src/Screen/Debug.cpp	/^ScreenInitialized()$/;"	f
ScreenInitialized	src/Screen/Debug.hpp	/^ScreenInitialized() {}$/;"	f
ScreenOrientation	src/Android/NativeView.hpp	/^  enum class ScreenOrientation {$/;"	c	class:NativeView
ScreenStopWatch	src/Screen/StopWatch.hpp	/^class ScreenStopWatch {$/;"	c
ScriptFileVisitor	src/Kobo/ToolsDialog.cpp	/^  ScriptFileVisitor(std::vector<ListItem> &_list):list(_list) {}$/;"	f	class:ScriptFileVisitor
ScriptFileVisitor	src/Kobo/ToolsDialog.cpp	/^class ScriptFileVisitor: public File::Visitor$/;"	c	file:
Scroll	src/Screen/TerminalWindow.cpp	/^TerminalWindow::Scroll()$/;"	f	class:TerminalWindow
ScrollBar	src/Form/ScrollBar.cpp	/^ScrollBar::ScrollBar(const ButtonLook &_button_look)$/;"	f	class:ScrollBar
ScrollBar	src/Form/ScrollBar.hpp	/^class ScrollBar {$/;"	c
ScrollVertically	src/Screen/Custom/LargeTextWindow.cpp	/^LargeTextWindow::ScrollVertically(int delta_lines)$/;"	f	class:LargeTextWindow
ScrollVertically	src/Screen/GDI/LargeTextWindow.cpp	/^LargeTextWindow::ScrollVertically(int delta_lines)$/;"	f	class:LargeTextWindow
SearchPoint	src/Geo/SearchPoint.cpp	/^SearchPoint::SearchPoint(const FlatGeoPoint &floc, const FlatProjection &tp)$/;"	f	class:SearchPoint
SearchPoint	src/Geo/SearchPoint.cpp	/^SearchPoint::SearchPoint(const GeoPoint &loc, const FlatProjection &tp)$/;"	f	class:SearchPoint
SearchPoint	src/Geo/SearchPoint.hpp	/^  SearchPoint(const GeoPoint &_location, const FlatGeoPoint &_flat)$/;"	f	class:SearchPoint
SearchPoint	src/Geo/SearchPoint.hpp	/^  SearchPoint(const GeoPoint &loc)$/;"	f	class:SearchPoint
SearchPoint	src/Geo/SearchPoint.hpp	/^class SearchPoint$/;"	c
SearchPointVector	src/Geo/SearchPointVector.hpp	/^  SearchPointVector(Args&&... args)$/;"	f	class:SearchPointVector
SearchPointVector	src/Geo/SearchPointVector.hpp	/^class SearchPointVector: public std::vector<SearchPoint> {$/;"	c
SeatHandleCapabilities	src/ui/event/poll/WaylandQueue.cpp	/^WaylandEventQueue::SeatHandleCapabilities(bool has_pointer, bool has_keyboard,$/;"	f	class:UI::WaylandEventQueue
SecondDriver	src/Dialogs/Device/DeviceEditWidget.cpp	/^  I2CBus, I2CAddr, PressureUsage, Driver, UseSecondDriver, SecondDriver,$/;"	e	enum:ControlIndex	file:
SecondsUntil	src/InfoBoxes/Content/Task.cpp	/^SecondsUntil(unsigned now, RoughTime until)$/;"	f	file:
SectorDefaults	src/Engine/Task/TaskBehaviour.hpp	/^struct SectorDefaults$/;"	s
SectorZone	src/Engine/Task/ObservationZones/SectorZone.hpp	/^  SectorZone(Shape _shape, bool _can_start_through_top,$/;"	f	class:SectorZone
SectorZone	src/Engine/Task/ObservationZones/SectorZone.hpp	/^  SectorZone(const GeoPoint &loc, const double _radius = 10000.0,$/;"	f	class:SectorZone
SectorZone	src/Engine/Task/ObservationZones/SectorZone.hpp	/^  SectorZone(const SectorZone &other, const GeoPoint &reference)$/;"	f	class:SectorZone
SectorZone	src/Engine/Task/ObservationZones/SectorZone.hpp	/^class SectorZone: public CylinderZone$/;"	c
SectorZoneEditWidget	src/Dialogs/Task/Widgets/SectorZoneEditWidget.hpp	/^class SectorZoneEditWidget : public ObservationZoneEditWidget {$/;"	c
Security	src/Device/Driver/LX/LXN.hpp	/^  struct Security {$/;"	s	namespace:LXN
Security7000	src/Device/Driver/LX/LXN.hpp	/^  struct Security7000 {$/;"	s	namespace:LXN
SecurityOld	src/Device/Driver/LX/LXN.hpp	/^  struct SecurityOld {$/;"	s	namespace:LXN
SecurityType	src/Device/Driver/LX/LXN.hpp	/^  enum SecurityType {$/;"	g	namespace:LXN
SeeYouTaskInformation	src/Task/TaskFileSeeYou.cpp	/^  SeeYouTaskInformation():$/;"	f	struct:SeeYouTaskInformation
SeeYouTaskInformation	src/Task/TaskFileSeeYou.cpp	/^struct SeeYouTaskInformation {$/;"	s	file:
SeeYouTurnpointInformation	src/Task/TaskFileSeeYou.cpp	/^  SeeYouTurnpointInformation():$/;"	f	struct:SeeYouTurnpointInformation
SeeYouTurnpointInformation	src/Task/TaskFileSeeYou.cpp	/^struct SeeYouTurnpointInformation {$/;"	s	file:
Seek	src/io/FileHandle.hpp	/^  bool Seek(long offset, int whence) {$/;"	f	class:FileHandle
Seek	src/io/FileReader.cxx	/^FileReader::Seek(off_t offset)$/;"	f	class:FileReader
SeekMemory	src/Device/Driver/LX/Protocol.hpp	/^  struct SeekMemory {$/;"	s	namespace:LX
SegmentNearestPoint	src/Geo/SearchPointVector.cpp	/^SegmentNearestPoint(const SearchPointVector& spv,$/;"	f	file:
Select	src/Computer/Wind/Computer.cpp	/^WindComputer::Select(const WindSettings &settings,$/;"	f	class:WindComputer
Select	src/ui/canvas/gdi/Canvas.hpp	/^  void Select(const Brush &brush) {$/;"	f	class:Canvas
Select	src/ui/canvas/gdi/Canvas.hpp	/^  void Select(const Font &font) {$/;"	f	class:Canvas
Select	src/ui/canvas/gdi/Canvas.hpp	/^  void Select(const Pen &pen) {$/;"	f	class:Canvas
Select	src/ui/canvas/memory/Canvas.hpp	/^  void Select(const Brush &_brush) {$/;"	f	class:Canvas
Select	src/ui/canvas/memory/Canvas.hpp	/^  void Select(const Font &_font) {$/;"	f	class:Canvas
Select	src/ui/canvas/memory/Canvas.hpp	/^  void Select(const Pen &_pen) {$/;"	f	class:Canvas
Select	src/ui/canvas/opengl/Canvas.hpp	/^  void Select(const Brush &_brush) {$/;"	f	class:Canvas
Select	src/ui/canvas/opengl/Canvas.hpp	/^  void Select(const Font &_font) {$/;"	f	class:Canvas
Select	src/ui/canvas/opengl/Canvas.hpp	/^  void Select(const Pen &_pen) {$/;"	f	class:Canvas
SelectAltitudeDifference	src/Engine/GlideSolvers/GlideResult.hpp	/^  double SelectAltitudeDifference(const GlideSettings &settings) const {$/;"	f	struct:GlideResult
SelectBlackBrush	src/ui/canvas/gdi/Canvas.hpp	/^  void SelectBlackBrush() {$/;"	f	class:Canvas
SelectBlackBrush	src/ui/canvas/memory/Canvas.hpp	/^  void SelectBlackBrush() {$/;"	f	class:Canvas
SelectBlackBrush	src/ui/canvas/opengl/Canvas.hpp	/^  void SelectBlackBrush() {$/;"	f	class:Canvas
SelectBlackPen	src/ui/canvas/gdi/Canvas.hpp	/^  void SelectBlackPen() {$/;"	f	class:Canvas
SelectBlackPen	src/ui/canvas/gdi/Canvas.hpp	/^  void SelectBlackPen(unsigned width) {$/;"	f	class:Canvas
SelectBlackPen	src/ui/canvas/memory/Canvas.hpp	/^  void SelectBlackPen() {$/;"	f	class:Canvas
SelectBlackPen	src/ui/canvas/memory/Canvas.hpp	/^  void SelectBlackPen(unsigned width) {$/;"	f	class:Canvas
SelectBlackPen	src/ui/canvas/opengl/Canvas.hpp	/^  void SelectBlackPen() {$/;"	f	class:Canvas
SelectBlackPen	src/ui/canvas/opengl/Canvas.hpp	/^  void SelectBlackPen(unsigned width) {$/;"	f	class:Canvas
SelectFlight	src/Device/Driver/FLARM/Logger.cpp	/^FlarmDevice::SelectFlight(uint8_t record_number, OperationEnvironment &env)$/;"	f	class:FlarmDevice
SelectHollowBrush	src/ui/canvas/gdi/Canvas.hpp	/^  void SelectHollowBrush() {$/;"	f	class:Canvas
SelectHollowBrush	src/ui/canvas/memory/Canvas.hpp	/^  void SelectHollowBrush() {$/;"	f	class:Canvas
SelectHollowBrush	src/ui/canvas/opengl/Canvas.hpp	/^  void SelectHollowBrush() {$/;"	f	class:Canvas
SelectLuaFile	src/Input/InputEventsLua.cpp	/^SelectLuaFile(const TCHAR *path)$/;"	f	file:
SelectNearTarget	src/Gauge/FlarmTrafficWindow.cpp	/^FlarmTrafficWindow::SelectNearTarget(PixelPoint p, int max_distance)$/;"	f	class:FlarmTrafficWindow
SelectNetwork	src/Kobo/WPASupplicant.cpp	/^WPASupplicant::SelectNetwork(unsigned id)$/;"	f	class:WPASupplicant
SelectNext	src/Form/ButtonPanel.cpp	/^ButtonPanel::SelectNext()$/;"	f	class:ButtonPanel
SelectNullPen	src/ui/canvas/gdi/Canvas.hpp	/^  void SelectNullPen() {$/;"	f	class:Canvas
SelectNullPen	src/ui/canvas/memory/Canvas.hpp	/^  void SelectNullPen() {$/;"	f	class:Canvas
SelectNullPen	src/ui/canvas/opengl/Canvas.hpp	/^  void SelectNullPen() {$/;"	f	class:Canvas
SelectObject	src/ui/canvas/gdi/Canvas.hpp	/^  HGDIOBJ SelectObject(HGDIOBJ handle) {$/;"	f	class:Canvas
SelectOptimisedPixelOperations	src/ui/canvas/memory/Optimised.hpp	/^  constexpr SelectOptimisedPixelOperations(const SelectOptimisedPixelOperations<Optimised, N, Portable> &other)$/;"	f	class:SelectOptimisedPixelOperations
SelectOptimisedPixelOperations	src/ui/canvas/memory/Optimised.hpp	/^  explicit constexpr SelectOptimisedPixelOperations(Args... args)$/;"	f	class:SelectOptimisedPixelOperations
SelectOptimisedPixelOperations	src/ui/canvas/memory/Optimised.hpp	/^class SelectOptimisedPixelOperations$/;"	c
SelectOptionalStart	src/Engine/Task/Ordered/OrderedTask.cpp	/^OrderedTask::SelectOptionalStart(unsigned pos)$/;"	f	class:OrderedTask
SelectPath	src/Dialogs/ProfileListDialog.cpp	/^ProfileListWidget::SelectPath(Path path)$/;"	f	class:ProfileListWidget
SelectPrevious	src/Form/ButtonPanel.cpp	/^ButtonPanel::SelectPrevious()$/;"	f	class:ButtonPanel
SelectProfile	src/Dialogs/StartupDialog.cpp	/^SelectProfile(Path path)$/;"	f	file:
SelectProfileCallback	src/Dialogs/StartupDialog.cpp	/^SelectProfileCallback(const TCHAR *caption, DataField &_df,$/;"	f	file:
SelectProfileDialog	src/Dialogs/ProfileListDialog.cpp	/^SelectProfileDialog(Path selected_path)$/;"	f
SelectStockObject	src/ui/canvas/gdi/Canvas.hpp	/^  void SelectStockObject(int fnObject) {$/;"	f	class:Canvas
SelectWhiteBrush	src/ui/canvas/gdi/Canvas.hpp	/^  void SelectWhiteBrush() {$/;"	f	class:Canvas
SelectWhiteBrush	src/ui/canvas/memory/Canvas.hpp	/^  void SelectWhiteBrush() {$/;"	f	class:Canvas
SelectWhiteBrush	src/ui/canvas/opengl/Canvas.hpp	/^  void SelectWhiteBrush() {$/;"	f	class:Canvas
SelectWhitePen	src/ui/canvas/gdi/Canvas.hpp	/^  void SelectWhitePen() {$/;"	f	class:Canvas
SelectWhitePen	src/ui/canvas/gdi/Canvas.hpp	/^  void SelectWhitePen(unsigned width) {$/;"	f	class:Canvas
SelectWhitePen	src/ui/canvas/memory/Canvas.hpp	/^  void SelectWhitePen() {$/;"	f	class:Canvas
SelectWhitePen	src/ui/canvas/memory/Canvas.hpp	/^  void SelectWhitePen(unsigned width) {$/;"	f	class:Canvas
SelectWhitePen	src/ui/canvas/opengl/Canvas.hpp	/^  void SelectWhitePen() {$/;"	f	class:Canvas
SelectWhitePen	src/ui/canvas/opengl/Canvas.hpp	/^  void SelectWhitePen(unsigned width) {$/;"	f	class:Canvas
SelfMapItem	src/MapWindow/Items/MapItem.hpp	/^  SelfMapItem(const GeoPoint &_location, const Angle _bearing)$/;"	f	struct:SelfMapItem
SelfMapItem	src/MapWindow/Items/MapItem.hpp	/^struct SelfMapItem: public MapItem$/;"	s
SelfTimingKalmanFilter1d	src/Math/SelfTimingKalmanFilter1d.cpp	/^SelfTimingKalmanFilter1d::SelfTimingKalmanFilter1d(const double max_dt) {$/;"	f	class:SelfTimingKalmanFilter1d
SelfTimingKalmanFilter1d	src/Math/SelfTimingKalmanFilter1d.cpp	/^SelfTimingKalmanFilter1d::SelfTimingKalmanFilter1d(const double max_dt,$/;"	f	class:SelfTimingKalmanFilter1d
SelfTimingKalmanFilter1d	src/Math/SelfTimingKalmanFilter1d.hpp	/^class SelfTimingKalmanFilter1d {$/;"	c
Send	src/Device/Driver/ATR833.cpp	/^  bool Send(Port &port, OperationEnvironment &env) {$/;"	f	class:ATRBuffer
Send	src/Device/Driver/FLARM/TextProtocol.cpp	/^FlarmDevice::Send(const char *sentence, OperationEnvironment &env)$/;"	f	class:FlarmDevice
Send	src/Device/Driver/IMI/Protocol/Communication.cpp	/^IMI::Send(Port &port, OperationEnvironment &env,$/;"	f	class:IMI
Send	src/Device/Driver/IMI/Protocol/Communication.cpp	/^IMI::Send(Port &port, const TMsg &msg, OperationEnvironment &env)$/;"	f	class:IMI
Send	src/Device/Driver/KRT2.cpp	/^KRT2Device::Send(const uint8_t *msg, unsigned msg_size,$/;"	f	class:KRT2Device
SendCalculatedUpdate	src/MainWindow.hpp	/^  void SendCalculatedUpdate() {$/;"	f	class:MainWindow
SendCloudFix	src/Tracking/SkyLines/Glue.cpp	/^SkyLinesTracking::Glue::SendCloudFix(const NMEAInfo &basic,$/;"	f	class:SkyLinesTracking::Glue
SendCommand	src/Device/Driver/CAI302/Protocol.cpp	/^CAI302::SendCommand(Port &port, const char *cmd,$/;"	f	class:CAI302
SendCommand	src/Device/Driver/LX/Protocol.hpp	/^  SendCommand(Port &port, Command command)$/;"	f	namespace:LX
SendCommand	src/Device/Driver/Volkslogger/Protocol.cpp	/^Volkslogger::SendCommand(Port &port, OperationEnvironment &env,$/;"	f	class:Volkslogger
SendCommand	src/Device/Port/K6BtPort.cpp	/^K6BtPort::SendCommand(uint8_t cmd)$/;"	f	class:K6BtPort
SendCommand	src/Kobo/WPASupplicant.cpp	/^WPASupplicant::SendCommand(const char *cmd)$/;"	f	class:WPASupplicant
SendCommandQuick	src/Device/Driver/CAI302/Protocol.cpp	/^CAI302::SendCommandQuick(Port &port, const char *cmd,$/;"	f	class:CAI302
SendCommandReadBulk	src/Device/Driver/Volkslogger/Protocol.cpp	/^Volkslogger::SendCommandReadBulk(Port &port, OperationEnvironment &env,$/;"	f	class:Volkslogger
SendCommandReadBulk	src/Device/Driver/Volkslogger/Protocol.cpp	/^Volkslogger::SendCommandReadBulk(Port &port, unsigned baud_rate,$/;"	f	class:Volkslogger
SendCommandReadBulk	src/Device/Driver/Volkslogger/Protocol.hpp	/^  static inline int SendCommandReadBulk(Port &port, unsigned baud_rate,$/;"	f	namespace:Volkslogger
SendCommandSwitchBaudRate	src/Device/Driver/Volkslogger/Protocol.cpp	/^Volkslogger::SendCommandSwitchBaudRate(Port &port, OperationEnvironment &env,$/;"	f	class:Volkslogger
SendCommandSwitchBaudRate	src/Device/Driver/Volkslogger/Protocol.hpp	/^  static inline bool SendCommandSwitchBaudRate(Port &port,$/;"	f	namespace:Volkslogger
SendCommandWriteBulk	src/Device/Driver/Volkslogger/Protocol.cpp	/^Volkslogger::SendCommandWriteBulk(Port &port, OperationEnvironment &env,$/;"	f	class:Volkslogger
SendEscaped	src/Device/Driver/FLARM/BinaryProtocol.cpp	/^FLARM::SendEscaped(Port &port, const void *buffer, size_t length,$/;"	f	class:FLARM
SendEscaped	src/Device/Driver/FLARM/Device.hpp	/^  bool SendEscaped(const void *data, size_t length,$/;"	f	class:FlarmDevice
SendFix	src/Tracking/SkyLines/Client.cpp	/^SkyLinesTracking::Client::SendFix(const NMEAInfo &basic)$/;"	f	class:SkyLinesTracking::Client
SendFixes	src/Tracking/SkyLines/Glue.cpp	/^SkyLinesTracking::Glue::SendFixes(const NMEAInfo &basic)$/;"	f	class:SkyLinesTracking::Glue
SendFrameHeader	src/Device/Driver/FLARM/BinaryProtocol.cpp	/^FlarmDevice::SendFrameHeader(const FLARM::FrameHeader &header,$/;"	f	class:FlarmDevice
SendGPSUpdate	src/MainWindow.hpp	/^  void SendGPSUpdate() {$/;"	f	class:MainWindow
SendGetComputerSettings	src/ActionInterface.cpp	/^ActionInterface::SendGetComputerSettings()$/;"	f	class:ActionInterface
SendMapSettings	src/ActionInterface.cpp	/^ActionInterface::SendMapSettings(const bool trigger_draw)$/;"	f	class:ActionInterface
SendNanoSetting	src/Device/Driver/LX/Settings.cpp	/^LXDevice::SendNanoSetting(const char *name, const char *value,$/;"	f	class:LXDevice
SendNotification	src/ui/event/DelayedNotify.hpp	/^  void SendNotification() {$/;"	f	class:UI::final
SendNotification	src/ui/event/Notify.cpp	/^Notify::SendNotification()$/;"	f	class:UI::Notify
SendPacket	src/Device/Driver/LX/Protocol.cpp	/^LX::SendPacket(Port &port, Command command,$/;"	f	class:LX
SendPacket	src/Tracking/SkyLines/Client.hpp	/^  bool SendPacket(const P &packet) {$/;"	f	class:SkyLinesTracking::final
SendPing	src/Tracking/SkyLines/Client.cpp	/^SkyLinesTracking::Client::SendPing(uint16_t id)$/;"	f	class:SkyLinesTracking::Client
SendPosition	src/Tracking/LiveTrack24.cpp	/^LiveTrack24::SendPosition(SessionID session, unsigned packet_id,$/;"	f	class:LiveTrack24
SendRequest	src/Tracking/LiveTrack24.cpp	/^LiveTrack24::SendRequest(const char *url,$/;"	f	class:LiveTrack24
SendRet	src/Device/Driver/IMI/Protocol/Communication.cpp	/^IMI::SendRet(Port &port, OperationEnvironment &env,$/;"	f	class:IMI
SendSYN	src/Device/Driver/LX/Protocol.hpp	/^  SendSYN(Port &port)$/;"	f	namespace:LX
SendSetBaudrate	src/Device/Port/K6BtPort.cpp	/^K6BtPort::SendSetBaudrate(unsigned _baud_rate)$/;"	f	class:K6BtPort
SendSetting	src/Device/Driver/FLARM/Settings.cpp	/^FlarmDevice::SendSetting(const char *name, const char *value,$/;"	f	class:FlarmDevice
SendSetting	src/Device/Driver/Vega/Settings.cpp	/^VegaDevice::SendSetting(const char *name, int value, OperationEnvironment &env)$/;"	f	class:VegaDevice
SendStartByte	src/Device/Driver/FLARM/BinaryProtocol.cpp	/^FlarmDevice::SendStartByte()$/;"	f	class:FlarmDevice
SendThermal	src/Tracking/SkyLines/Client.cpp	/^SkyLinesTracking::Client::SendThermal(uint32_t time,$/;"	f	class:SkyLinesTracking::Client
SendThermalRequest	src/Tracking/SkyLines/Client.cpp	/^SkyLinesTracking::Client::SendThermalRequest()$/;"	f	class:SkyLinesTracking::Client
SendTo	src/Device/Driver/Vega/Volatile.cpp	/^Vega::VolatileData::SendTo(Port &port, OperationEnvironment &env) const$/;"	f	class:Vega::VolatileData
SendTrafficRequest	src/Tracking/SkyLines/Client.cpp	/^SkyLinesTracking::Client::SendTrafficRequest(bool followees, bool club,$/;"	f	class:SkyLinesTracking::Client
SendUIState	src/ActionInterface.cpp	/^ActionInterface::SendUIState()$/;"	f	class:ActionInterface
SendUIState	src/ActionInterface.cpp	/^ActionInterface::SendUIState(const bool trigger_draw)$/;"	f	class:ActionInterface
SendUserNameRequest	src/Tracking/SkyLines/Client.cpp	/^SkyLinesTracking::Client::SendUserNameRequest(uint32_t user_id)$/;"	f	class:SkyLinesTracking::Client
SendV7Setting	src/Device/Driver/LX/Settings.cpp	/^LXDevice::SendV7Setting(const char *name, const char *value,$/;"	f	class:LXDevice
SendWithCRC	src/Device/Driver/Volkslogger/Protocol.cpp	/^SendWithCRC(Port &port, const void *data, size_t length,$/;"	f	file:
Serial	src/Device/Driver/LX/LXN.hpp	/^  struct Serial {$/;"	s	namespace:LXN
Serial	src/util/Serial.hpp	/^  Serial():value(0) {}$/;"	f	class:Serial
Serial	src/util/Serial.hpp	/^class Serial {$/;"	c
SerialPort	src/Device/Port/SerialPort.cpp	/^SerialPort::SerialPort(PortListener *_listener, DataHandler &_handler)$/;"	f	class:SerialPort
SerialPort	src/Device/Port/SerialPort.hpp	/^class SerialPort : public BufferedPort, protected StoppableThread$/;"	c
Serialise	src/Task/Serialiser.cpp	/^Serialise(WritableDataNode &node, const GeoPoint &data)$/;"	f	file:
Serialise	src/Task/Serialiser.cpp	/^Serialise(WritableDataNode &node, const ObservationZonePoint &data)$/;"	f	file:
Serialise	src/Task/Serialiser.cpp	/^Serialise(WritableDataNode &node, const OrderedTaskPoint &data,$/;"	f	file:
Serialise	src/Task/Serialiser.cpp	/^Serialise(WritableDataNode &node, const OrderedTaskPoint &tp,$/;"	f	file:
Serialise	src/Task/Serialiser.cpp	/^Serialise(WritableDataNode &node, const OrderedTaskSettings &data)$/;"	f	file:
Serialise	src/Task/Serialiser.cpp	/^Serialise(WritableDataNode &node, const Waypoint &data)$/;"	f	file:
Serialise	src/XML/Writer.cpp	/^XMLNode::Serialise(BufferedOutputStream &os, bool format) const$/;"	f	class:XMLNode
Serialise	src/XML/Writer.cpp	/^XMLNode::Serialise(const Data &data, BufferedOutputStream &os, int format)$/;"	f	class:XMLNode
Serialiser	src/Cloud/Serialiser.hpp	/^  explicit Serialiser(OutputStream &_os):BufferedOutputStream(_os) {}$/;"	f	class:Serialiser
Serialiser	src/Cloud/Serialiser.hpp	/^class Serialiser : public BufferedOutputStream {$/;"	c
Server	src/Tracking/SkyLines/Server.cpp	/^Server::Server(EventLoop &event_loop,$/;"	f	class:SkyLinesTracking::Server
Server	src/Tracking/SkyLines/Server.hpp	/^class Server {$/;"	c	namespace:SkyLinesTracking
SessionID	src/Tracking/LiveTrack24.hpp	/^typedef uint32_t SessionID;$/;"	t	namespace:LiveTrack24
Set	src/Device/SettingsMap.hpp	/^  void Set(const K &key, const V &value) {$/;"	f	class:DeviceSettingsMap
Set	src/Dialogs/Device/DeviceListDialog.cpp	/^    void Set(const DeviceConfig &config, const DeviceDescriptor &device,$/;"	f	struct:final::Flags
Set	src/Dialogs/Device/DeviceListDialog.cpp	/^    void Set(const DeviceConfig &config, const DeviceDescriptor &device,$/;"	f	union:final::Item
Set	src/Dialogs/FileManager.cpp	/^    void Set(const TCHAR *_name, const DownloadStatus *_download_status,$/;"	f	struct:ManagedFileListWidget::FileItem
Set	src/FLARM/ColorDatabase.hpp	/^  void Set(FlarmId id, FlarmColor color) {$/;"	f	class:FlarmColorDatabase
Set	src/FLARM/NameDatabase.cpp	/^FlarmNameDatabase::Set(FlarmId id, const TCHAR *name)$/;"	f	class:FlarmNameDatabase
Set	src/Form/DataField/Boolean.cpp	/^DataFieldBoolean::Set(bool Value)$/;"	f	class:DataFieldBoolean
Set	src/Form/DataField/Boolean.hpp	/^  void Set(int Value) {$/;"	f	class:final
Set	src/Form/DataField/Enum.cpp	/^DataFieldEnum::Entry::Set(unsigned _id, const TCHAR *_string,$/;"	f	class:DataFieldEnum::Entry
Set	src/Form/DataField/Enum.cpp	/^DataFieldEnum::Set(const TCHAR *text)$/;"	f	class:DataFieldEnum
Set	src/Form/DataField/Enum.cpp	/^DataFieldEnum::Set(unsigned Value)$/;"	f	class:DataFieldEnum
Set	src/Form/DataField/File.cpp	/^FileDataField::Item::Set(Path _path)$/;"	f	class:FileDataField::Item
Set	src/Form/DataField/File.cpp	/^FileDataField::Set(unsigned new_value)$/;"	f	class:FileDataField
Set	src/Form/DataField/Float.hpp	/^  void Set(double _value) {$/;"	f	class:final
Set	src/Form/DataField/Integer.hpp	/^  void Set(int _value) {$/;"	f	class:final
Set	src/Form/DataField/String.cpp	/^DataFieldString::Set(const TCHAR *Value)$/;"	f	class:DataFieldString
Set	src/Form/DataField/Time.hpp	/^  void Set(int _value) {$/;"	f	class:final
Set	src/Menu/ButtonLabel.cpp	/^ButtonLabel::Set(const Menu &menu, const Menu *overlay, bool full)$/;"	f	class:ButtonLabel
Set	src/Profile/Map.cpp	/^ProfileMap::Set(const char *key, const char *value)$/;"	f	class:ProfileMap
Set	src/Profile/Map.hpp	/^  void Set(const char *key, bool value) {$/;"	f	class:ProfileMap
Set	src/Profile/NumericValue.cpp	/^ProfileMap::Set(const char *key, double value)$/;"	f	class:ProfileMap
Set	src/Profile/NumericValue.cpp	/^ProfileMap::Set(const char *key, int value)$/;"	f	class:ProfileMap
Set	src/Profile/NumericValue.cpp	/^ProfileMap::Set(const char *key, long value)$/;"	f	class:ProfileMap
Set	src/Profile/NumericValue.cpp	/^ProfileMap::Set(const char *key, unsigned value)$/;"	f	class:ProfileMap
Set	src/Profile/ProfileMap.cpp	/^Profile::Set(const char *key, const TCHAR *value)$/;"	f	class:Profile
Set	src/Profile/ProfileMap.cpp	/^Profile::Set(const char *key, const char *value)$/;"	f	class:Profile
Set	src/Profile/ProfileMap.cpp	/^Profile::Set(const char *key, double value)$/;"	f	class:Profile
Set	src/Profile/ProfileMap.cpp	/^Profile::Set(const char *key, int value)$/;"	f	class:Profile
Set	src/Profile/ProfileMap.cpp	/^Profile::Set(const char *key, long value)$/;"	f	class:Profile
Set	src/Profile/ProfileMap.cpp	/^Profile::Set(const char *key, unsigned value)$/;"	f	class:Profile
Set	src/Profile/ProfileMap.hpp	/^  static inline void Set(const char *key, bool value)$/;"	f	namespace:Profile
Set	src/Profile/StringValue.cpp	/^ProfileMap::Set(const char *key, const TCHAR *value)$/;"	f	class:ProfileMap
Set	src/Renderer/WaypointRenderer.cpp	/^  void Set(const WaypointPtr &_waypoint, PixelPoint &_point,$/;"	f	struct:VisibleWaypoint
Set	src/Screen/StopWatch.hpp	/^    void Set(const char *_text) {$/;"	f	struct:ScreenStopWatch::Marker
Set	src/Terrain/RasterProjection.cpp	/^RasterProjection::Set(const GeoBounds &bounds,$/;"	f	class:RasterProjection
Set	src/Terrain/RasterTile.hpp	/^  void Set(unsigned _xstart, unsigned _ystart,$/;"	f	class:RasterTile
Set	src/lua/Value.hxx	/^	void Set(V &&value) {$/;"	f	class:Lua::Value
Set	src/ui/canvas/android/Bitmap.cpp	/^Bitmap::Set(JNIEnv *env, jobject _bmp, Type _type, bool flipped)$/;"	f	class:Bitmap
SetASCII	src/util/StaticString.hxx	/^	void SetASCII(const char *src) {$/;"	f	class:StaticStringBase
SetASCII	src/util/StaticString.hxx	/^	void SetASCII(const char *src, const char *src_end) {$/;"	f	class:StaticStringBase
SetASCII	src/util/StaticString.hxx	/^	void SetASCII(const wchar_t *src) {$/;"	f	class:StaticStringBase
SetASCII	src/util/StaticString.hxx	/^	void SetASCII(const wchar_t *src, const wchar_t *src_end) {$/;"	f	class:StaticStringBase
SetAccelerationVariance	src/Math/KalmanFilter1d.hpp	/^  void SetAccelerationVariance(double var_x_accel) {$/;"	f	class:KalmanFilter1d
SetAccelerationVariance	src/Math/SelfTimingKalmanFilter1d.hpp	/^  void SetAccelerationVariance(const double var_x_accel) {$/;"	f	class:SelfTimingKalmanFilter1d
SetActiveFrequency	src/ActionInterface.cpp	/^ActionInterface::SetActiveFrequency(const RadioFrequency & freq, const TCHAR * freq_name, bool to_devices)$/;"	f	class:ActionInterface
SetActiveFrequency	src/Blackboard/DeviceBlackboard.cpp	/^DeviceBlackboard::SetActiveFrequency(RadioFrequency frequency,$/;"	f	class:DeviceBlackboard
SetActiveIndex	src/Renderer/TaskPointRenderer.hpp	/^  void SetActiveIndex(unsigned _active_index) {$/;"	f	class:TaskPointRenderer
SetActiveTaskPoint	src/Engine/Task/TaskManager.cpp	/^TaskManager::SetActiveTaskPoint(unsigned index)$/;"	f	class:TaskManager
SetActiveTaskPoint	src/Replay/TaskAccessor.hpp	/^  void SetActiveTaskPoint(unsigned index) {$/;"	f	class:TaskAccessor
SetActivity	src/Engine/Airspace/AbstractAirspace.cpp	/^AbstractAirspace::SetActivity(const AirspaceActivity mask) const$/;"	f	class:AbstractAirspace
SetActivity	src/Engine/Airspace/Airspace.cpp	/^Airspace::SetActivity(const AirspaceActivity mask) const$/;"	f	class:Airspace
SetActivity	src/Engine/Airspace/Airspaces.cpp	/^Airspaces::SetActivity(const AirspaceActivity mask)$/;"	f	class:Airspaces
SetAirfieldDetails	src/Waypoint/WaypointDetailsReader.cpp	/^SetAirfieldDetails(Waypoints &way_points, const TCHAR *name,$/;"	f	file:
SetAirspaceBorderColor	src/Profile/AirspaceConfig.cpp	/^Profile::SetAirspaceBorderColor(ProfileMap &map,$/;"	f	class:Profile
SetAirspaceBorderWidth	src/Profile/AirspaceConfig.cpp	/^Profile::SetAirspaceBorderWidth(ProfileMap &map,$/;"	f	class:Profile
SetAirspaceBrush	src/Profile/AirspaceConfig.cpp	/^Profile::SetAirspaceBrush(ProfileMap &map, unsigned i, int brush_index)$/;"	f	class:Profile
SetAirspaceFillColor	src/Profile/AirspaceConfig.cpp	/^Profile::SetAirspaceFillColor(ProfileMap &map,$/;"	f	class:Profile
SetAirspaceFillMode	src/Profile/AirspaceConfig.cpp	/^Profile::SetAirspaceFillMode(ProfileMap &map, unsigned i, uint8_t mode)$/;"	f	class:Profile
SetAirspaceMode	src/Profile/AirspaceConfig.cpp	/^Profile::SetAirspaceMode(ProfileMap &map,$/;"	f	class:Profile
SetAirspaceWarnings	src/Renderer/AirspaceLabelRenderer.hpp	/^  void SetAirspaceWarnings(const ProtectedAirspaceWarningManager *_warning_manager) {$/;"	f	class:AirspaceLabelRenderer
SetAirspaceWarnings	src/Renderer/AirspaceRenderer.hpp	/^  void SetAirspaceWarnings(const ProtectedAirspaceWarningManager *_warning_manager) {$/;"	f	class:AirspaceRenderer
SetAirspaces	src/CrossSection/CrossSectionRenderer.hpp	/^  void SetAirspaces(const Airspaces *_airspace_database) {$/;"	f	class:CrossSectionRenderer
SetAirspaces	src/CrossSection/CrossSectionWindow.hpp	/^  void SetAirspaces(const Airspaces *airspace_database) {$/;"	f	class:CrossSectionWindow
SetAirspaces	src/MapWindow/MapWindow.hpp	/^  void SetAirspaces(Airspaces *airspaces) {$/;"	f	class:MapWindow
SetAirspaces	src/MapWindow/TargetMapWindow.hpp	/^  void SetAirspaces(Airspaces *airspace_database) {$/;"	f	class:TargetMapWindow
SetAirspaces	src/Renderer/AirspaceLabelRenderer.hpp	/^  void SetAirspaces(const Airspaces *_airspaces) {$/;"	f	class:AirspaceLabelRenderer
SetAirspaces	src/Renderer/AirspaceRenderer.hpp	/^  void SetAirspaces(const Airspaces *_airspaces) {$/;"	f	class:AirspaceRenderer
SetAll	src/Engine/Airspace/AirspaceActivity.hpp	/^  void SetAll() {$/;"	f	class:AirspaceActivity
SetAllColors	src/InfoBoxes/Data.cpp	/^InfoBoxData::SetAllColors(unsigned color)$/;"	f	class:InfoBoxData
SetAllowedCharacters	src/Widget/KeyboardWidget.cpp	/^KeyboardWidget::SetAllowedCharacters(const TCHAR *allowed)$/;"	f	class:KeyboardWidget
SetAlpha	src/MapWindow/OverlayBitmap.hpp	/^  void SetAlpha(float _alpha) {$/;"	f	class:final
SetAltitude	src/Blackboard/DeviceBlackboard.cpp	/^DeviceBlackboard::SetAltitude(double val)$/;"	f	class:DeviceBlackboard
SetAltitudeOffset	src/Device/Driver/LX/LX1600.hpp	/^  SetAltitudeOffset(Port &port, OperationEnvironment &env,$/;"	f	namespace:LX1600
SetAltitudeUnit	src/Device/Driver/CAI302/Protocol.hpp	/^    void SetAltitudeUnit(unsigned unit) {$/;"	f	struct:CAI302::Pilot
SetArmed	src/Engine/Task/Ordered/TaskAdvance.cpp	/^TaskAdvance::SetArmed(const bool do_armed)$/;"	f	class:TaskAdvance
SetAsBoolean	src/Form/DataField/Boolean.cpp	/^DataFieldBoolean::SetAsBoolean(bool Value)$/;"	f	class:DataFieldBoolean
SetAsFloat	src/Form/DataField/Float.cpp	/^DataFieldFloat::SetAsFloat(double Value)$/;"	f	class:DataFieldFloat
SetAsInteger	src/Form/DataField/Angle.cpp	/^AngleDataField::SetAsInteger(int _value)$/;"	f	class:AngleDataField
SetAsInteger	src/Form/DataField/Base.cpp	/^DataField::SetAsInteger(gcc_unused int value)$/;"	f	class:DataField
SetAsInteger	src/Form/DataField/Boolean.cpp	/^DataFieldBoolean::SetAsInteger(int Value)$/;"	f	class:DataFieldBoolean
SetAsInteger	src/Form/DataField/Enum.cpp	/^DataFieldEnum::SetAsInteger(int Value)$/;"	f	class:DataFieldEnum
SetAsInteger	src/Form/DataField/File.cpp	/^FileDataField::SetAsInteger(int new_value)$/;"	f	class:FileDataField
SetAsInteger	src/Form/DataField/Float.cpp	/^DataFieldFloat::SetAsInteger(int Value)$/;"	f	class:DataFieldFloat
SetAsInteger	src/Form/DataField/Integer.cpp	/^DataFieldInteger::SetAsInteger(int _value)$/;"	f	class:DataFieldInteger
SetAsString	src/Form/DataField/Angle.cpp	/^AngleDataField::SetAsString(const TCHAR *_value)$/;"	f	class:AngleDataField
SetAsString	src/Form/DataField/Base.cpp	/^DataField::SetAsString(gcc_unused const TCHAR *value)$/;"	f	class:DataField
SetAsString	src/Form/DataField/Boolean.cpp	/^DataFieldBoolean::SetAsString(const TCHAR *Value)$/;"	f	class:DataFieldBoolean
SetAsString	src/Form/DataField/Enum.cpp	/^DataFieldEnum::SetAsString(const TCHAR *Value)$/;"	f	class:DataFieldEnum
SetAsString	src/Form/DataField/Float.cpp	/^DataFieldFloat::SetAsString(const TCHAR *Value)$/;"	f	class:DataFieldFloat
SetAsString	src/Form/DataField/Integer.cpp	/^DataFieldInteger::SetAsString(const TCHAR *_value)$/;"	f	class:DataFieldInteger
SetAsString	src/Form/DataField/String.cpp	/^DataFieldString::SetAsString(const TCHAR *Value)$/;"	f	class:DataFieldString
SetAutoZoom	src/Gauge/BigTrafficWidget.cpp	/^FlarmTrafficControl::SetAutoZoom(bool enabled)$/;"	f	class:FlarmTrafficControl
SetBackgroundColor	src/Look/DialogLook.cpp	/^DialogLook::SetBackgroundColor(Color color)$/;"	f	class:DialogLook
SetBackgroundColor	src/ui/canvas/gdi/Canvas.hpp	/^  void SetBackgroundColor(const Color c) {$/;"	f	class:Canvas
SetBackgroundColor	src/ui/canvas/memory/Canvas.hpp	/^  void SetBackgroundColor(const Color c) {$/;"	f	class:Canvas
SetBackgroundColor	src/ui/canvas/opengl/Canvas.hpp	/^  void SetBackgroundColor(const Color c) {$/;"	f	class:Canvas
SetBackgroundColor	src/ui/window/SolidContainerWindow.hpp	/^  void SetBackgroundColor(Color _color) {$/;"	f	class:SolidContainerWindow
SetBackgroundOpaque	src/ui/canvas/gdi/Canvas.hpp	/^  void SetBackgroundOpaque() {$/;"	f	class:Canvas
SetBackgroundOpaque	src/ui/canvas/memory/Canvas.hpp	/^  void SetBackgroundOpaque() {$/;"	f	class:Canvas
SetBackgroundOpaque	src/ui/canvas/opengl/Canvas.hpp	/^  void SetBackgroundOpaque() {$/;"	f	class:Canvas
SetBackgroundTransparent	src/ui/canvas/gdi/Canvas.hpp	/^  void SetBackgroundTransparent() {$/;"	f	class:Canvas
SetBackgroundTransparent	src/ui/canvas/memory/Canvas.hpp	/^  void SetBackgroundTransparent() {$/;"	f	class:Canvas
SetBackgroundTransparent	src/ui/canvas/opengl/Canvas.hpp	/^  void SetBackgroundTransparent() {$/;"	f	class:Canvas
SetBallast	src/ActionInterface.cpp	/^ActionInterface::SetBallast(double ballast, bool to_devices)$/;"	f	class:ActionInterface
SetBallast	src/Blackboard/DeviceBlackboard.cpp	/^DeviceBlackboard::SetBallast(double fraction, double overload,$/;"	f	class:DeviceBlackboard
SetBallast	src/Device/Driver/LX/LX1600.hpp	/^  SetBallast(Port &port, OperationEnvironment &env, double overload)$/;"	f	namespace:LX1600
SetBallast	src/Device/Driver/LX/V7.hpp	/^  SetBallast(Port &port, OperationEnvironment &env, double overload)$/;"	f	namespace:V7
SetBallast	src/Dialogs/Settings/dlgBasicSettings.cpp	/^FlightSetupPanel::SetBallast()$/;"	f	class:FlightSetupPanel
SetBallast	src/Engine/GlideSolvers/GlidePolar.cpp	/^GlidePolar::SetBallast(const double bal)$/;"	f	class:GlidePolar
SetBallastLitres	src/Dialogs/Settings/dlgBasicSettings.cpp	/^  void SetBallastLitres(double ballast_litres) {$/;"	f	class:final
SetBallastLitres	src/Engine/GlideSolvers/GlidePolar.cpp	/^GlidePolar::SetBallastLitres(const double litres)$/;"	f	class:GlidePolar
SetBallastRatio	src/Engine/GlideSolvers/GlidePolar.hpp	/^  void SetBallastRatio(double _ballast_ratio) {$/;"	f	class:GlidePolar
SetBallastTimer	src/Dialogs/Settings/dlgBasicSettings.cpp	/^FlightSetupPanel::SetBallastTimer(bool active)$/;"	f	class:FlightSetupPanel
SetBasic	src/Blackboard/DeviceBlackboard.hpp	/^  NMEAInfo &SetBasic() { return gps_info; }$/;"	f	class:DeviceBlackboard
SetBasicAuth	src/net/http/Easy.hxx	/^	void SetBasicAuth(const char *userpwd) {$/;"	f	class:CurlEasy
SetBasicAuth	src/net/http/ToBuffer.hpp	/^  void SetBasicAuth(const char *_username, const char *_password) {$/;"	f	class:Net::DownloadToBufferJob
SetBasicAuth	src/net/http/ToFile.hpp	/^  void SetBasicAuth(const char *_username, const char *_password) {$/;"	f	class:Net::DownloadToFileJob
SetBaudRate	src/Device/Driver/CAI302/Mode.cpp	/^CAI302Device::SetBaudRate(unsigned baud_rate, OperationEnvironment &env)$/;"	f	class:CAI302Device
SetBaudRate	src/Device/Driver/CAI302/Protocol.cpp	/^CAI302::SetBaudRate(Port &port, unsigned baud_rate, OperationEnvironment &env)$/;"	f	class:CAI302
SetBaudRate	src/Device/Driver/FLARM/Device.cpp	/^FlarmDevice::SetBaudRate(unsigned baud_id, OperationEnvironment &env)$/;"	f	class:FlarmDevice
SetBaudrate	src/Device/Port/AndroidPort.cpp	/^AndroidPort::SetBaudrate(unsigned baud_rate)$/;"	f	class:AndroidPort
SetBaudrate	src/Device/Port/DumpPort.cpp	/^DumpPort::SetBaudrate(unsigned baud_rate)$/;"	f	class:DumpPort
SetBaudrate	src/Device/Port/K6BtPort.cpp	/^K6BtPort::SetBaudrate(unsigned _baud_rate)$/;"	f	class:K6BtPort
SetBaudrate	src/Device/Port/NullPort.cpp	/^NullPort::SetBaudrate(unsigned baud_rate)$/;"	f	class:NullPort
SetBaudrate	src/Device/Port/SerialPort.cpp	/^SerialPort::SetBaudrate(unsigned BaudRate)$/;"	f	class:SerialPort
SetBaudrate	src/Device/Port/TTYPort.cpp	/^SetBaudrate(TTYDescriptor tty, unsigned BaudRate)$/;"	f	file:
SetBaudrate	src/Device/Port/TTYPort.cpp	/^TTYPort::SetBaudrate(unsigned baud_rate)$/;"	f	class:TTYPort
SetBitmap	src/Widget/ViewImageWidget.cpp	/^  void SetBitmap(const Bitmap *_bitmap) {$/;"	f	class:final
SetBitmap	src/Widget/ViewImageWidget.cpp	/^ViewImageWidget::SetBitmap(const Bitmap *_bitmap)$/;"	f	class:ViewImageWidget
SetBitmap	src/Widget/ViewImageWidget.hpp	/^  void SetBitmap(const Bitmap &_bitmap) {$/;"	f	class:ViewImageWidget
SetBlackout	src/Computer/Wind/WindEKFGlue.hpp	/^  void SetBlackout(const unsigned time) {$/;"	f	class:WindEKFGlue
SetBold	src/Look/FontDescription.hpp	/^  void SetBold(bool _bold=true) {$/;"	f	class:FontDescription
SetBold	src/Look/FontDescription.hpp	/^  void SetBold(bool bold=true) {$/;"	f	class:FontDescription
SetBottomWidget	src/MainWindow.cpp	/^MainWindow::SetBottomWidget(Widget *_widget)$/;"	f	class:MainWindow
SetBoundingBox	src/Renderer/TaskPointRenderer.hpp	/^  void SetBoundingBox(const FlatBoundingBox &bb) {$/;"	f	class:TaskPointRenderer
SetBounds	src/Terrain/RasterTileCache.hpp	/^  void SetBounds(const GeoBounds &_bounds) {$/;"	f	class:RasterTileCache
SetBufferPens	src/Renderer/AirspaceRendererOther.cpp	/^  void SetBufferPens(const AbstractAirspace &airspace) {$/;"	f	class:final	file:
SetBugs	src/ActionInterface.cpp	/^ActionInterface::SetBugs(double bugs, bool to_devices)$/;"	f	class:ActionInterface
SetBugs	src/Blackboard/DeviceBlackboard.cpp	/^DeviceBlackboard::SetBugs(double bugs, OperationEnvironment &env)$/;"	f	class:DeviceBlackboard
SetBugs	src/Computer/Settings.hpp	/^  void SetBugs(double _bugs) {$/;"	f	struct:PolarSettings
SetBugs	src/Device/Driver/LX/LX1600.hpp	/^  SetBugs(Port &port, OperationEnvironment &env, unsigned bugs)$/;"	f	namespace:LX1600
SetBugs	src/Device/Driver/LX/V7.hpp	/^  SetBugs(Port &port, OperationEnvironment &env, unsigned bugs)$/;"	f	namespace:V7
SetBugs	src/Dialogs/Settings/dlgBasicSettings.cpp	/^FlightSetupPanel::SetBugs(double bugs) {$/;"	f	class:FlightSetupPanel
SetBugs	src/Engine/GlideSolvers/GlidePolar.cpp	/^GlidePolar::SetBugs(const double clean)$/;"	f	class:GlidePolar
SetButtonPanel	src/Dialogs/Settings/Panels/PagesConfigPanel.cpp	/^  void SetButtonPanel(ButtonPanelWidget &_buttons) {$/;"	f	class:PageListWidget
SetButtonPanel	src/Dialogs/Task/Manager/TaskListPanel.cpp	/^  void SetButtonPanel(ButtonPanelWidget &_buttons) {$/;"	f	class:final
SetButtonPanel	src/Dialogs/Weather/MapOverlayWidget.cpp	/^  void SetButtonPanel(ButtonPanelWidget &_buttons) {$/;"	f	class:final
SetButtonPanel	src/Dialogs/Weather/NOAAList.cpp	/^  void SetButtonPanel(ButtonPanelWidget &_buttons) {$/;"	f	class:final
SetButtons	src/Dialogs/Settings/dlgBasicSettings.cpp	/^FlightSetupPanel::SetButtons()$/;"	f	class:FlightSetupPanel
SetCPUFrequencyGovernor	src/Hardware/CPU.cpp	/^SetCPUFrequencyGovernor(const char *governor)$/;"	f	file:
SetCalcCaption	src/Dialogs/dlgAnalysis.cpp	/^AnalysisWidget::SetCalcCaption(const TCHAR *caption)$/;"	f	class:AnalysisWidget
SetCalcVisibility	src/Dialogs/dlgAnalysis.cpp	/^AnalysisWidget::SetCalcVisibility(bool visible)$/;"	f	class:AnalysisWidget
SetCalculated	src/Computer/GlideComputerBlackboard.hpp	/^  DerivedInfo& SetCalculated() { return calculated_info; }$/;"	f	class:GlideComputerBlackboard
SetCaption	src/Form/Button.cpp	/^Button::SetCaption(const TCHAR *caption)$/;"	f	class:Button
SetCaption	src/Form/Form.cpp	/^WndForm::SetCaption(const TCHAR *_caption)$/;"	f	class:WndForm
SetCaption	src/Renderer/TextButtonRenderer.hpp	/^  void SetCaption(StaticString<64>::const_pointer _caption) {$/;"	f	class:TextButtonRenderer
SetCatchCallback	src/lua/Catch.cpp	/^Lua::SetCatchCallback(lua_State *L, CatchCallback callback)$/;"	f	class:Lua
SetCenter	src/Geo/Flat/FlatProjection.cpp	/^FlatProjection::SetCenter(const GeoPoint &_center)$/;"	f	class:FlatProjection
SetCenter	src/Renderer/TextRenderer.hpp	/^  void SetCenter(bool _center=true) {$/;"	f	class:TextRenderer
SetCharacter	src/Form/CharacterButton.cpp	/^CharacterButton::SetCharacter(unsigned _character)$/;"	f	class:CharacterButton
SetCharacterFunction	src/Form/Form.hpp	/^  void SetCharacterFunction(CharacterFunction function) {$/;"	f	class:WndForm
SetCharge100	src/Android/Nook.cpp	/^Nook::SetCharge100()$/;"	f	class:Nook
SetCharge500	src/Android/Nook.cpp	/^Nook::SetCharge500()$/;"	f	class:Nook
SetCoPilot	src/Device/Driver/FLARM/Device.cpp	/^FlarmDevice::SetCoPilot(const TCHAR *copilot_name, OperationEnvironment &env)$/;"	f	class:FlarmDevice
SetCoefficients	src/Engine/GlideSolvers/GlidePolar.hpp	/^  void SetCoefficients(PolarCoefficients coeff, bool update = true) {$/;"	f	class:GlidePolar
SetColor	src/Profile/Screen.cpp	/^ProfileMap::SetColor(const char *key, const RGB8Color color)$/;"	f	class:ProfileMap
SetColors	src/Renderer/AirspaceRendererSettings.hpp	/^  void SetColors(RGB8Color color) {$/;"	f	struct:AirspaceClassRendererSettings
SetComment	src/InfoBoxes/Data.cpp	/^InfoBoxData::SetComment(const TCHAR *_comment)$/;"	f	class:InfoBoxData
SetComment	src/InfoBoxes/Format.cpp	/^InfoBoxData::SetComment(Angle _value, const TCHAR *suffix)$/;"	f	class:InfoBoxData
SetCommentColor	src/InfoBoxes/Data.hpp	/^  void SetCommentColor(unsigned _color) {$/;"	f	struct:InfoBoxData
SetCommentFromAlternateAltitude	src/InfoBoxes/Units.cpp	/^InfoBoxData::SetCommentFromAlternateAltitude(double new_value)$/;"	f	class:InfoBoxData
SetCommentFromBearingDifference	src/InfoBoxes/Format.cpp	/^InfoBoxData::SetCommentFromBearingDifference(Angle delta)$/;"	f	class:InfoBoxData
SetCommentFromDistance	src/InfoBoxes/Units.cpp	/^InfoBoxData::SetCommentFromDistance(double new_value)$/;"	f	class:InfoBoxData
SetCommentFromPercent	src/InfoBoxes/Format.cpp	/^InfoBoxData::SetCommentFromPercent(double dd)$/;"	f	class:InfoBoxData
SetCommentFromSpeed	src/InfoBoxes/Units.cpp	/^InfoBoxData::SetCommentFromSpeed(double new_value, bool precision)$/;"	f	class:InfoBoxData
SetCommentFromTaskSpeed	src/InfoBoxes/Units.cpp	/^InfoBoxData::SetCommentFromTaskSpeed(double new_value, bool precision)$/;"	f	class:InfoBoxData
SetCommentFromVerticalSpeed	src/InfoBoxes/Units.cpp	/^InfoBoxData::SetCommentFromVerticalSpeed(double new_value, bool include_sign)$/;"	f	class:InfoBoxData
SetCommentInvalid	src/InfoBoxes/Data.hpp	/^  void SetCommentInvalid() {$/;"	f	struct:InfoBoxData
SetCompetitionClass	src/Device/Driver/FLARM/Device.cpp	/^FlarmDevice::SetCompetitionClass(const TCHAR *competition_class,$/;"	f	class:FlarmDevice
SetCompetitionId	src/Device/Driver/FLARM/Device.cpp	/^FlarmDevice::SetCompetitionId(const TCHAR *competition_id,$/;"	f	class:FlarmDevice
SetComputerSettings	src/Blackboard/InterfaceBlackboard.hpp	/^  ComputerSettings& SetComputerSettings() {$/;"	f	class:InterfaceBlackboard
SetComputerSettings	src/CalculationThread.cpp	/^CalculationThread::SetComputerSettings(const ComputerSettings &new_value)$/;"	f	class:CalculationThread
SetComputerSettings	src/Interface.hpp	/^  static inline ComputerSettings &SetComputerSettings() {$/;"	f	namespace:CommonInterface
SetComputerSettings	src/MainWindow.cpp	/^MainWindow::SetComputerSettings(const ComputerSettings &settings_computer)$/;"	f	class:MainWindow
SetComputerSettings	src/MapWindow/GlueMapWindow.cpp	/^GlueMapWindow::SetComputerSettings(const ComputerSettings &new_value)$/;"	f	class:GlueMapWindow
SetConfig	src/Device/Descriptor.cpp	/^DeviceDescriptor::SetConfig(const DeviceConfig &_config)$/;"	f	class:DeviceDescriptor
SetConfig	src/Device/Driver/FLARM/Device.cpp	/^FlarmDevice::SetConfig(const char *setting, const TCHAR *value,$/;"	f	class:FlarmDevice
SetConfig	src/Device/Driver/FLARM/Device.cpp	/^FlarmDevice::SetConfig(const char *setting, const char *value,$/;"	f	class:FlarmDevice
SetConfig	src/Engine/Airspace/AirspaceWarningManager.cpp	/^AirspaceWarningManager::SetConfig(const AirspaceWarningConfig &_config)$/;"	f	class:AirspaceWarningManager
SetConfig	src/Engine/Route/RoutePolars.cpp	/^RoutePolars::SetConfig(const RoutePlannerConfig& _config,$/;"	f	class:RoutePolars
SetConfig	src/Units/Units.cpp	/^Units::SetConfig(const UnitSetting &new_config)$/;"	f	class:Units
SetConnectTimeout	src/net/http/Easy.hxx	/^	void SetConnectTimeout(long timeout) {$/;"	f	class:CurlEasy
SetContentProvider	src/InfoBoxes/InfoBoxWindow.cpp	/^InfoBoxWindow::SetContentProvider(std::unique_ptr<InfoBoxContent> _content)$/;"	f	class:InfoBoxWindow
SetContest	src/Engine/Contest/ContestManager.hpp	/^  void SetContest(Contest _contest) {$/;"	f	class:ContestManager
SetContestIncremental	src/Computer/GlideComputer.hpp	/^  void SetContestIncremental(bool incremental) {$/;"	f	class:GlideComputer
SetContestIncremental	src/Computer/TaskComputer.hpp	/^  void SetContestIncremental(bool incremental) {$/;"	f	class:TaskComputer
SetControl	src/Renderer/TextRenderer.hpp	/^  void SetControl(bool _control=true) {$/;"	f	class:TextRenderer
SetCruiseEfficiency	src/Engine/GlideSolvers/GlidePolar.hpp	/^  void SetCruiseEfficiency(const double _ce) {$/;"	f	class:GlidePolar
SetCurrentInfoBox	src/Dialogs/Settings/dlgConfigInfoboxes.cpp	/^InfoBoxesConfigWidget::SetCurrentInfoBox(unsigned _current_preview)$/;"	f	class:InfoBoxesConfigWidget
SetCursor	src/Form/DigitEntry.cpp	/^DigitEntry::SetCursor(unsigned _cursor)$/;"	f	class:DigitEntry
SetCursor	src/Form/TabMenuDisplay.cpp	/^TabMenuDisplay::SetCursor(unsigned i)$/;"	f	class:TabMenuDisplay
SetCursorColorsInverted	src/ui/window/TopWindow.hpp	/^  void SetCursorColorsInverted(bool inverted) {$/;"	f	class:UI::TopWindow
SetCustom	src/InfoBoxes/Data.hpp	/^  void SetCustom() {$/;"	f	struct:InfoBoxData
SetCustomBottom	src/PageActions.cpp	/^PageActions::SetCustomBottom(Widget *widget)$/;"	f	class:PageActions
SetDays	src/Engine/Airspace/AbstractAirspace.hpp	/^  void SetDays(const AirspaceActivity mask) {$/;"	f	class:AbstractAirspace
SetDeadBand	src/Audio/VarioSynthesiser.hpp	/^  void SetDeadBand(bool enabled) {$/;"	f	class:final
SetDeadBandRange	src/Audio/VarioSynthesiser.hpp	/^  void SetDeadBandRange(double min, double max) {$/;"	f	class:final
SetDefaultFocus	src/Dialogs/WidgetDialog.cpp	/^WidgetDialog::SetDefaultFocus()$/;"	f	class:WidgetDialog
SetDefaultFocus	src/Form/Form.cpp	/^WndForm::SetDefaultFocus()$/;"	f	class:WndForm
SetDefaultFocus	src/MainWindow.cpp	/^MainWindow::SetDefaultFocus()$/;"	f	class:MainWindow
SetDefaultHidden	src/Form/ButtonPanel.hpp	/^  void SetDefaultHidden() {$/;"	f	class:ButtonPanel
SetDefaultLocation	src/Replay/TaskAutoPilot.hpp	/^  void SetDefaultLocation(const GeoPoint& default_location) {$/;"	f	class:AbstractAutoPilot
SetDefaults	src/Airspace/AirspaceComputerSettings.cpp	/^AirspaceComputerSettings::SetDefaults()$/;"	f	class:AirspaceComputerSettings
SetDefaults	src/Audio/Settings.cpp	/^SoundSettings::SetDefaults()$/;"	f	class:SoundSettings
SetDefaults	src/Audio/VarioSettings.cpp	/^VarioSoundSettings::SetDefaults()$/;"	f	class:VarioSoundSettings
SetDefaults	src/Computer/Settings.cpp	/^ComputerSettings::SetDefaults()$/;"	f	class:ComputerSettings
SetDefaults	src/Computer/Settings.cpp	/^FeaturesSettings::SetDefaults()$/;"	f	class:FeaturesSettings
SetDefaults	src/Computer/Settings.cpp	/^PolarSettings::SetDefaults()$/;"	f	class:PolarSettings
SetDefaults	src/Computer/Settings.hpp	/^  void SetDefaults() {$/;"	f	struct:CirclingSettings
SetDefaults	src/Computer/Settings.hpp	/^  void SetDefaults() {$/;"	f	struct:PlacesOfInterestSettings
SetDefaults	src/Computer/Settings.hpp	/^  void SetDefaults() {$/;"	f	struct:RadioSettings
SetDefaults	src/Computer/WaveSettings.hpp	/^  void SetDefaults() {$/;"	f	struct:WaveSettings
SetDefaults	src/Computer/Wind/Settings.cpp	/^WindSettings::SetDefaults()$/;"	f	class:WindSettings
SetDefaults	src/Dialogs/DialogSettings.cpp	/^DialogSettings::SetDefaults()$/;"	f	class:DialogSettings
SetDefaults	src/DisplaySettings.cpp	/^DisplaySettings::SetDefaults()$/;"	f	class:DisplaySettings
SetDefaults	src/Engine/Airspace/AirspaceWarningConfig.cpp	/^AirspaceWarningConfig::SetDefaults()$/;"	f	class:AirspaceWarningConfig
SetDefaults	src/Engine/Contest/Settings.cpp	/^ContestSettings::SetDefaults()$/;"	f	class:ContestSettings
SetDefaults	src/Engine/GlideSolvers/GlideSettings.cpp	/^GlideSettings::SetDefaults()$/;"	f	class:GlideSettings
SetDefaults	src/Engine/Route/Config.cpp	/^RoutePlannerConfig::SetDefaults()$/;"	f	class:RoutePlannerConfig
SetDefaults	src/Engine/Task/Ordered/FinishConstraints.cpp	/^FinishConstraints::SetDefaults()$/;"	f	class:FinishConstraints
SetDefaults	src/Engine/Task/Ordered/Settings.cpp	/^OrderedTaskSettings::SetDefaults()$/;"	f	class:OrderedTaskSettings
SetDefaults	src/Engine/Task/Ordered/StartConstraints.cpp	/^StartConstraints::SetDefaults()$/;"	f	class:StartConstraints
SetDefaults	src/Engine/Task/Shapes/FAITriangleSettings.hpp	/^  void SetDefaults() {$/;"	f	struct:FAITriangleSettings
SetDefaults	src/Engine/Task/TaskBehaviour.cpp	/^SectorDefaults::SetDefaults()$/;"	f	class:SectorDefaults
SetDefaults	src/Engine/Task/TaskBehaviour.cpp	/^TaskBehaviour::SetDefaults()$/;"	f	class:TaskBehaviour
SetDefaults	src/Engine/Task/TaskBehaviour.cpp	/^TaskStartMargins::SetDefaults()$/;"	f	class:TaskStartMargins
SetDefaults	src/FormatSettings.hpp	/^  void SetDefaults() {$/;"	f	struct:FormatSettings
SetDefaults	src/Gauge/TrafficSettings.cpp	/^TrafficSettings::SetDefaults()$/;"	f	class:TrafficSettings
SetDefaults	src/Gauge/VarioSettings.cpp	/^VarioSettings::SetDefaults()$/;"	f	class:VarioSettings
SetDefaults	src/InfoBoxes/InfoBoxSettings.cpp	/^InfoBoxSettings::SetDefaults()$/;"	f	class:InfoBoxSettings
SetDefaults	src/Input/InputConfig.cpp	/^InputConfig::SetDefaults()$/;"	f	class:InputConfig
SetDefaults	src/Logger/Settings.cpp	/^LoggerSettings::SetDefaults()$/;"	f	class:LoggerSettings
SetDefaults	src/MapSettings.cpp	/^MapItemListSettings::SetDefaults()$/;"	f	class:MapItemListSettings
SetDefaults	src/MapSettings.cpp	/^MapSettings::SetDefaults()$/;"	f	class:MapSettings
SetDefaults	src/MapSettings.cpp	/^TrailSettings::SetDefaults()$/;"	f	class:TrailSettings
SetDefaults	src/PageSettings.cpp	/^PageSettings::SetDefaults()$/;"	f	class:PageSettings
SetDefaults	src/PageSettings.hpp	/^    void SetDefaults() {$/;"	f	struct:PageLayout::InfoBoxConfig
SetDefaults	src/Renderer/AirspaceRendererSettings.cpp	/^AirspaceClassRendererSettings::SetDefaults()$/;"	f	class:AirspaceClassRendererSettings
SetDefaults	src/Renderer/AirspaceRendererSettings.cpp	/^AirspaceRendererSettings::SetDefaults()$/;"	f	class:AirspaceRendererSettings
SetDefaults	src/Renderer/WaypointRendererSettings.hpp	/^  void SetDefaults() {$/;"	f	struct:WaypointRendererSettings
SetDefaults	src/SystemSettings.cpp	/^SystemSettings::SetDefaults()$/;"	f	class:SystemSettings
SetDefaults	src/TeamCode/Settings.cpp	/^TeamCodeSettings::SetDefaults()$/;"	f	class:TeamCodeSettings
SetDefaults	src/Terrain/TerrainSettings.cpp	/^TerrainRendererSettings::SetDefaults()$/;"	f	class:TerrainRendererSettings
SetDefaults	src/Tracking/LiveTrack24/Settings.hpp	/^  void SetDefaults() {$/;"	f	struct:LiveTrack24::Settings
SetDefaults	src/Tracking/SkyLines/CloudSettings.hpp	/^  void SetDefaults() {$/;"	f	struct:SkyLinesTracking::CloudSettings
SetDefaults	src/Tracking/SkyLines/Settings.hpp	/^  void SetDefaults() {$/;"	f	struct:SkyLinesTracking::Settings
SetDefaults	src/Tracking/TrackingSettings.hpp	/^  void SetDefaults() {$/;"	f	struct:TrackingSettings
SetDefaults	src/UISettings.cpp	/^UISettings::SetDefaults()$/;"	f	class:UISettings
SetDefaults	src/Units/Settings.cpp	/^UnitSetting::SetDefaults()$/;"	f	class:UnitSetting
SetDefaults	src/Weather/PCMet/Settings.hpp	/^    void SetDefaults() {$/;"	f	struct:PCMetSettings::Credentials
SetDefaults	src/Weather/PCMet/Settings.hpp	/^  void SetDefaults() {$/;"	f	struct:PCMetSettings
SetDefaults	src/Weather/Settings.hpp	/^  void SetDefaults() {$/;"	f	struct:WeatherSettings
SetDegradationFactor	src/Computer/Settings.hpp	/^  void SetDegradationFactor(double _degradation_factor) {$/;"	f	struct:PolarSettings
SetDeviceConfig	src/Profile/DeviceConfig.cpp	/^Profile::SetDeviceConfig(ProfileMap &map,$/;"	f	class:Profile
SetDevices	src/Blackboard/DeviceBlackboard.hpp	/^  void SetDevices(MultipleDevices &_devices) {$/;"	f	class:DeviceBlackboard
SetDigits	src/Form/DigitEntry.cpp	/^DigitEntry::SetDigits(double degrees, CoordinateFormat format, bool isLatitude)$/;"	f	class:DigitEntry
SetDirection	src/CrossSection/CrossSectionRenderer.hpp	/^  void SetDirection(Angle bearing) {$/;"	f	class:CrossSectionRenderer
SetDirection	src/CrossSection/CrossSectionWindow.hpp	/^  void SetDirection(Angle bearing) {$/;"	f	class:CrossSectionWindow
SetDirection	src/Engine/Waypoint/Runway.hpp	/^  void SetDirection(Angle _direction) {$/;"	f	class:Runway
SetDirectionDegrees	src/Engine/Waypoint/Runway.hpp	/^  void SetDirectionDegrees(unsigned degrees) {$/;"	f	class:Runway
SetDirty	src/InfoBoxes/InfoBoxManager.cpp	/^InfoBoxManager::SetDirty()$/;"	f	class:InfoBoxManager
SetDirty	src/ui/canvas/RawBitmap.hpp	/^  void SetDirty() {$/;"	f	class:final
SetDispatcher	src/Device/Descriptor.hpp	/^  void SetDispatcher(PortLineHandler *_dispatcher) {$/;"	f	class:final
SetDisplayOrientation	src/ui/canvas/opengl/TopCanvas.cpp	/^TopCanvas::SetDisplayOrientation(DisplayOrientation orientation)$/;"	f	class:TopCanvas
SetDisplayOrientation	src/ui/event/poll/InputQueue.hpp	/^  void SetDisplayOrientation(DisplayOrientation orientation) {$/;"	f	class:DisplayOrientation::final
SetDisplayOrientation	src/ui/event/poll/Queue.hpp	/^  void SetDisplayOrientation(DisplayOrientation orientation) {$/;"	f	class:DisplayOrientation::final
SetDisplayOrientation	src/ui/event/poll/linux/MergeMouse.hpp	/^  void SetDisplayOrientation(DisplayOrientation orientation) {$/;"	f	class:UI::final
SetDisplayOrientation	src/ui/event/shared/RotatePointer.hpp	/^  void SetDisplayOrientation(DisplayOrientation orientation) {$/;"	f	class:UI::RotatePointer
SetDistance	src/Engine/Task/Stats/DistanceStat.hpp	/^  void SetDistance(const double d) {$/;"	f	class:DistanceStat
SetDistance	src/Gauge/FlarmTrafficWindow.hpp	/^  void SetDistance(double _distance) {$/;"	f	class:FlarmTrafficWindow
SetDistanceUnit	src/Device/Driver/CAI302/Protocol.hpp	/^    void SetDistanceUnit(unsigned unit) {$/;"	f	struct:CAI302::Pilot
SetDown	src/Form/Button.cpp	/^Button::SetDown(bool _down)$/;"	f	class:Button
SetDown	src/ui/event/poll/linux/MergeMouse.cpp	/^MergeMouse::SetDown(bool new_down)$/;"	f	class:UI::MergeMouse
SetDryMass	src/Engine/GlideSolvers/GlidePolar.hpp	/^  void SetDryMass(double _dry_mass, bool update = true) {$/;"	f	class:GlidePolar
SetDumpButton	src/Dialogs/Settings/dlgBasicSettings.cpp	/^  void SetDumpButton(Button *_dump_button) {$/;"	f	class:final
SetEditor	src/Dialogs/Settings/Panels/PagesConfigPanel.cpp	/^  void SetEditor(PageLayoutEditWidget &_editor) {$/;"	f	class:PageListWidget
SetEnableDither	src/ui/canvas/custom/TopCanvas.hpp	/^  void SetEnableDither(bool _enable_dither) {$/;"	f	class:DisplayOrientation
SetEnabled	src/Dialogs/Settings/Panels/CloudConfigPanel.cpp	/^CloudConfigPanel::SetEnabled(bool enabled)$/;"	f	class:CloudConfigPanel
SetEndRadial	src/Engine/Task/ObservationZones/SectorZone.cpp	/^SectorZone::SetEndRadial(const Angle x)$/;"	f	class:SectorZone
SetEnum	src/Profile/Map.hpp	/^  void SetEnum(const char *key, T value) {$/;"	f	class:ProfileMap
SetEnum	src/Profile/ProfileMap.hpp	/^  static inline void SetEnum(const char *key, T value)$/;"	f	namespace:Profile
SetErrorBuffer	src/net/http/Easy.hxx	/^	void SetErrorBuffer(char *buf) {$/;"	f	class:CurlEasy
SetEvent	src/Menu/MenuBar.hpp	/^    void SetEvent(unsigned _event) {$/;"	f	class:MenuBar::Button
SetExternalVolume	src/Audio/VolumeController.cpp	/^VolumeController::SetExternalVolume(unsigned vol_percent)$/;"	f	class:VolumeController
SetExternalVolumeNoLock	src/Audio/VolumeController.cpp	/^VolumeController::SetExternalVolumeNoLock(unsigned vol_percent)$/;"	f	class:VolumeController
SetFactory	src/Engine/Task/Ordered/OrderedTask.cpp	/^OrderedTask::SetFactory(const TaskFactoryType the_factory)$/;"	f	class:OrderedTask
SetFactory	src/Engine/Task/TaskManager.cpp	/^TaskManager::SetFactory(const TaskFactoryType _factory)$/;"	f	class:TaskManager
SetFaiFinishHeight	src/Engine/Task/Ordered/Points/FinishPoint.cpp	/^FinishPoint::SetFaiFinishHeight(const double height)$/;"	f	class:FinishPoint
SetFailOnError	src/net/http/Easy.hxx	/^	void SetFailOnError(bool value=true) {$/;"	f	class:CurlEasy
SetFailOnError	src/net/http/Request.hxx	/^	void SetFailOnError(bool value=true) {$/;"	f	class:final
SetFakeLocation	src/NMEA/Info.hpp	/^  void SetFakeLocation(const GeoPoint &_location, const double _altitude) {$/;"	f	struct:NMEAInfo
SetFastLogging	src/Computer/LogComputer.hpp	/^  void SetFastLogging() {$/;"	f	class:LogComputer
SetFileType	src/Form/DataField/File.hpp	/^  void SetFileType(FileType _file_type) {$/;"	f	class:final
SetFiles	src/Profile/Profile.cpp	/^Profile::SetFiles(Path override_path)$/;"	f	class:Profile
SetFillStencil	src/Renderer/AirspaceRendererGL.cpp	/^  void SetFillStencil() {$/;"	f	class:final	file:
SetFilters	src/Device/Driver/LX/LX1600.hpp	/^  SetFilters(Port &port, OperationEnvironment &env,$/;"	f	namespace:LX1600
SetFinishLabel	src/Dialogs/Settings/Panels/TaskDefaultsConfigPanel.cpp	/^TaskDefaultsConfigPanel::SetFinishLabel()$/;"	f	class:TaskDefaultsConfigPanel
SetFlavour	src/Input/InputEvents.cpp	/^InputEvents::SetFlavour(const TCHAR *_flavour)$/;"	f	class:InputEvents
SetFlightLevel	src/Engine/Airspace/AbstractAirspace.cpp	/^AbstractAirspace::SetFlightLevel(const AtmosphericPressure &press)$/;"	f	class:AbstractAirspace
SetFlightLevel	src/Engine/Airspace/Airspace.cpp	/^Airspace::SetFlightLevel(const AtmosphericPressure &press) const$/;"	f	class:Airspace
SetFlightLevel	src/Engine/Airspace/AirspaceAltitude.cpp	/^AirspaceAltitude::SetFlightLevel(const AtmosphericPressure &press)$/;"	f	class:AirspaceAltitude
SetFlightLevels	src/Engine/Airspace/Airspaces.cpp	/^Airspaces::SetFlightLevels(const AtmosphericPressure &press)$/;"	f	class:Airspaces
SetFont	src/Screen/LargeTextWindow.hpp	/^  void SetFont(const Font &_font) {$/;"	f	class:LargeTextWindow
SetForceOpen	src/Form/Form.hpp	/^  void SetForceOpen(bool _force) {$/;"	f	class:WndForm
SetForcedDPI	src/Hardware/DisplayDPI.cpp	/^Display::SetForcedDPI(unsigned x_dpi, unsigned y_dpi)$/;"	f	class:Display
SetForecastTemperature	src/Atmosphere/CuSonde.cpp	/^CuSonde::SetForecastTemperature(Temperature val)$/;"	f	class:CuSonde
SetFormat	src/Form/DataField/Number.cpp	/^NumberDataField::SetFormat(const TCHAR *text)$/;"	f	class:NumberDataField
SetFrequencies	src/Audio/VarioSynthesiser.hpp	/^  void SetFrequencies(unsigned min, unsigned zero, unsigned max) {$/;"	f	class:final
SetFriendColor	src/FLARM/Friends.cpp	/^FlarmFriends::SetFriendColor(FlarmId id, FlarmColor color)$/;"	f	class:FlarmFriends
SetFromCombo	src/Form/DataField/Angle.cpp	/^AngleDataField::SetFromCombo(int i, gcc_unused const TCHAR *s)$/;"	f	class:AngleDataField
SetFromCombo	src/Form/DataField/Base.hpp	/^  virtual void SetFromCombo(int iDataFieldIndex,$/;"	f	class:DataField
SetFromCombo	src/Form/DataField/Float.cpp	/^DataFieldFloat::SetFromCombo(int iDataFieldIndex, const TCHAR *sValue)$/;"	f	class:DataFieldFloat
SetFromCombo	src/Form/DataField/Integer.cpp	/^DataFieldInteger::SetFromCombo(gcc_unused int index, const TCHAR *value)$/;"	f	class:DataFieldInteger
SetFromCombo	src/Form/DataField/Time.cpp	/^DataFieldTime::SetFromCombo(int data_field_index,$/;"	f	class:DataFieldTime
SetFullScreen	src/MainWindow.cpp	/^MainWindow::SetFullScreen(bool _full_screen)$/;"	f	class:MainWindow
SetGeoPoint	src/Profile/GeoValue.cpp	/^ProfileMap::SetGeoPoint(const char *key, const GeoPoint &value)$/;"	f	class:ProfileMap
SetGlideComputer	src/MapWindow/MapWindow.cpp	/^MapWindow::SetGlideComputer(GlideComputer *_gc)$/;"	f	class:MapWindow
SetGlideComputer	src/MapWindow/TargetMapWindow.hpp	/^  void SetGlideComputer(const GlideComputer *_gc) {$/;"	f	class:TargetMapWindow
SetGlidePolar	src/Engine/Task/TaskManager.cpp	/^TaskManager::SetGlidePolar(const GlidePolar &_glide_polar)$/;"	f	class:TaskManager
SetGlidePolar	src/Task/ProtectedTaskManager.cpp	/^ProtectedTaskManager::SetGlidePolar(const GlidePolar &glide_polar)$/;"	f	class:ProtectedTaskManager
SetGroundLevel	src/Engine/Airspace/AbstractAirspace.cpp	/^AbstractAirspace::SetGroundLevel(const double alt)$/;"	f	class:AbstractAirspace
SetGroundLevel	src/Engine/Airspace/Airspace.cpp	/^Airspace::SetGroundLevel(const double alt) const$/;"	f	class:Airspace
SetGroundLevel	src/Engine/Airspace/AirspaceAltitude.cpp	/^AirspaceAltitude::SetGroundLevel(const double alt)$/;"	f	class:AirspaceAltitude
SetGroundLevels	src/Engine/Airspace/AirspacesTerrain.cpp	/^Airspaces::SetGroundLevels(const RasterTerrain &terrain)$/;"	f	class:Airspaces
SetHandicap	src/Engine/Contest/ContestManager.cpp	/^ContestManager::SetHandicap(unsigned handicap)$/;"	f	class:ContestManager
SetHeaderFunction	src/net/http/Easy.hxx	/^	void SetHeaderFunction(size_t (*function)(char *buffer, size_t size,$/;"	f	class:CurlEasy
SetHeight	src/Look/FontDescription.hpp	/^  void SetHeight(unsigned _height) {$/;"	f	class:FontDescription
SetHome	src/Computer/Settings.cpp	/^PlacesOfInterestSettings::SetHome(const Waypoint &wp)$/;"	f	class:PlacesOfInterestSettings
SetHome	src/Dialogs/Waypoint/WaypointCommandsWidget.cpp	/^SetHome(const Waypoint &waypoint)$/;"	f	file:
SetHome	src/Engine/Waypoint/Waypoints.cpp	/^Waypoints::SetHome(const unsigned id)$/;"	f	class:Waypoints
SetHome	src/Waypoint/HomeGlue.cpp	/^WaypointGlue::SetHome(Waypoints &way_points, const RasterTerrain *terrain,$/;"	f	class:WaypointGlue
SetHttpPost	src/net/http/Easy.hxx	/^	void SetHttpPost(const struct curl_httppost *post) {$/;"	f	class:CurlEasy
SetIdeal	src/Replay/TaskAutoPilot.cpp	/^AutopilotParameters::SetIdeal()$/;"	f	class:AutopilotParameters
SetIncremental	src/Computer/ContestComputer.hpp	/^  void SetIncremental(bool incremental) {$/;"	f	class:ContestComputer
SetIncremental	src/Engine/Contest/ContestManager.cpp	/^ContestManager::SetIncremental(bool incremental)$/;"	f	class:ContestManager
SetIndex	src/Form/DataField/Enum.cpp	/^DataFieldEnum::SetIndex(unsigned new_value, bool invoke_callback)$/;"	f	class:DataFieldEnum
SetInnerRadius	src/Engine/Task/ObservationZones/AnnularSectorZone.hpp	/^  void SetInnerRadius(const double new_radius) {$/;"	f	class:AnnularSectorZone
SetInnerRadius	src/Engine/Task/ObservationZones/KeyholeZone.hpp	/^  void SetInnerRadius(double _radius) {$/;"	f	class:final
SetInternalVolume	src/Audio/VolumeController.cpp	/^VolumeController::SetInternalVolume(unsigned vol_percent$/;"	f	class:VolumeController
SetIntersectionTest	src/Engine/Task/TaskManager.cpp	/^TaskManager::SetIntersectionTest(AbortIntersectionTest *test)$/;"	f	class:TaskManager
SetIntersections	src/Engine/Airspace/AirspaceIntersectionVisitor.hpp	/^  bool SetIntersections(AirspaceIntersectionVector &&p) {$/;"	f	class:AirspaceIntersectionVisitor
SetInvalid	src/CrossSection/CrossSectionRenderer.hpp	/^  void SetInvalid() {$/;"	f	class:CrossSectionRenderer
SetInvalid	src/CrossSection/CrossSectionWindow.hpp	/^  void SetInvalid() {$/;"	f	class:CrossSectionWindow
SetInvalid	src/Engine/Airspace/AirspaceInterceptSolution.hpp	/^  void SetInvalid() {$/;"	f	struct:AirspaceInterceptSolution
SetInvalid	src/Engine/GlideSolvers/GlidePolar.hpp	/^  void SetInvalid() {$/;"	f	class:GlidePolar
SetInvalid	src/Form/DigitEntry.cpp	/^DigitEntry::SetInvalid()$/;"	f	class:DigitEntry
SetInvalid	src/Geo/Flat/FlatProjection.hpp	/^  void SetInvalid() {$/;"	f	class:FlatProjection
SetInvalid	src/Geo/GeoBounds.hpp	/^  void SetInvalid() {$/;"	f	class:GeoBounds
SetInvalid	src/Geo/GeoPoint.hpp	/^  void SetInvalid() {$/;"	f	struct:GeoPoint
SetInvalid	src/Geo/GeoVector.hpp	/^  void SetInvalid() {$/;"	f	struct:GeoVector
SetInvalid	src/Geo/SearchPoint.hpp	/^  void SetInvalid() {$/;"	f	class:SearchPoint
SetInvalid	src/InfoBoxes/Data.cpp	/^InfoBoxData::SetInvalid()$/;"	f	class:InfoBoxData
SetInvalid	src/time/RoughTime.hpp	/^  void SetInvalid() {$/;"	f	class:RoughTime
SetInvert	src/ui/event/shared/RotatePointer.hpp	/^  void SetInvert(bool _invert_x, bool _invert_y) {$/;"	f	class:UI::RotatePointer
SetKey	src/Tracking/SkyLines/Client.hpp	/^  void SetKey(uint64_t _key) {$/;"	f	class:SkyLinesTracking::final
SetKeyDownFunction	src/Form/Form.hpp	/^  void SetKeyDownFunction(KeyDownFunction function) {$/;"	f	class:WndForm
SetKeyEvent	src/Input/InputConfig.hpp	/^  void SetKeyEvent(unsigned mode, unsigned key_code, unsigned event_id) {$/;"	f	struct:InputConfig
SetKiloHertz	src/RadioFrequency.hpp	/^  void SetKiloHertz(unsigned khz) {$/;"	f	class:RadioFrequency
SetLabel	src/MapWindow/OverlayBitmap.hpp	/^  void SetLabel(T &&_label) {$/;"	f	class:final
SetLabelText	src/Menu/ButtonLabel.cpp	/^ButtonLabel::SetLabelText(unsigned index, const TCHAR *text, unsigned event)$/;"	f	class:ButtonLabel
SetLatLonBounds	src/Terrain/RasterTileCache.cpp	/^RasterTileCache::SetLatLonBounds(double _lon_min, double _lon_max,$/;"	f	class:RasterTileCache
SetLatitude	src/Form/DigitEntry.cpp	/^DigitEntry::SetLatitude(Angle value, CoordinateFormat format)$/;"	f	class:DigitEntry
SetLegacyAutoWindMode	src/Computer/Wind/Settings.hpp	/^  void SetLegacyAutoWindMode(unsigned mode) {$/;"	f	struct:WindSettings
SetLegs	src/Engine/Task/ObservationZones/ObservationZoneClient.cpp	/^ObservationZoneClient::SetLegs(const TaskPoint *previous,$/;"	f	class:ObservationZoneClient
SetLegs	src/Engine/Task/ObservationZones/ObservationZonePoint.hpp	/^  virtual void SetLegs([[maybe_unused]] const GeoPoint *previous,$/;"	f	class:ObservationZonePoint
SetLegs	src/Engine/Task/ObservationZones/SymmetricSectorZone.cpp	/^SymmetricSectorZone::SetLegs(const GeoPoint *previous, const GeoPoint *next)$/;"	f	class:SymmetricSectorZone
SetLength	src/Engine/Task/ObservationZones/LineSectorZone.hpp	/^  void SetLength(const double new_length) {$/;"	f	class:LineSectorZone
SetLength	src/Engine/Waypoint/Runway.hpp	/^  void SetLength(unsigned _length) {$/;"	f	class:Runway
SetList	src/Dialogs/Airspace/AirspaceList.cpp	/^  void SetList(AirspaceListWidget *_list) {$/;"	f	class:final
SetList	src/Dialogs/Waypoint/WaypointList.cpp	/^  void SetList(WaypointListWidget *_list) {$/;"	f	class:WaypointListButtons
SetListener	src/Dialogs/Airspace/AirspaceList.cpp	/^  void SetListener(DataFieldListener *_listener) {$/;"	f	class:final
SetListener	src/Dialogs/Task/Widgets/ObservationZoneEditWidget.hpp	/^  void SetListener(Listener *_listener) {$/;"	f	class:ObservationZoneEditWidget
SetListener	src/Dialogs/Traffic/TrafficList.cpp	/^  void SetListener(DataFieldListener *_listener) {$/;"	f	class:TrafficFilterWidget
SetListener	src/Dialogs/Waypoint/WaypointList.cpp	/^  void SetListener(DataFieldListener *_listener) {$/;"	f	class:WaypointFilterWidget
SetListener	src/Form/DataField/Base.hpp	/^  void SetListener(DataFieldListener *_listener) {$/;"	f	class:DataField
SetLiveTrack24Enabled	src/Dialogs/Settings/Panels/TrackingConfigPanel.cpp	/^TrackingConfigPanel::SetLiveTrack24Enabled(bool enabled)$/;"	f	class:TrackingConfigPanel
SetLocalTime	src/Dialogs/Settings/Panels/TimeConfigPanel.cpp	/^TimeConfigPanel::SetLocalTime(RoughTimeDelta utc_offset)$/;"	f	class:TimeConfigPanel
SetLocation	src/Device/Driver/Volkslogger/Database.cpp	/^Volkslogger::Waypoint::SetLocation(GeoPoint gp)$/;"	f	class:Volkslogger::Waypoint
SetLocation	src/MapWindow/GlueMapWindowDisplayMode.cpp	/^GlueMapWindow::SetLocation(const GeoPoint location)$/;"	f	class:GlueMapWindow
SetLocation	src/MapWindow/MapWindow.hpp	/^  void SetLocation(const GeoPoint location) {$/;"	f	class:MapWindow
SetLocationLazy	src/MapWindow/GlueMapWindowDisplayMode.cpp	/^GlueMapWindow::SetLocationLazy(const GeoPoint location)$/;"	f	class:GlueMapWindow
SetLogger	src/Computer/GlideComputer.hpp	/^  void SetLogger(Logger *logger) {$/;"	f	class:GlideComputer
SetLogger	src/Computer/LogComputer.hpp	/^  void SetLogger(Logger *_logger) {$/;"	f	class:LogComputer
SetLongitude	src/Form/DigitEntry.cpp	/^DigitEntry::SetLongitude(Angle value, CoordinateFormat format)$/;"	f	class:DigitEntry
SetLook	src/MainWindow.hpp	/^  Look &SetLook() {$/;"	f	class:MainWindow
SetMC	src/Blackboard/DeviceBlackboard.cpp	/^DeviceBlackboard::SetMC(double mc, OperationEnvironment &env)$/;"	f	class:DeviceBlackboard
SetMC	src/Engine/GlideSolvers/GlidePolar.cpp	/^GlidePolar::SetMC(const double _mc)$/;"	f	class:GlidePolar
SetMacCready	src/ActionInterface.cpp	/^ActionInterface::SetMacCready(double mc, bool to_devices)$/;"	f	class:ActionInterface
SetMacCready	src/Device/Driver/LX/LX1600.hpp	/^  SetMacCready(Port &port, OperationEnvironment &env, double mc)$/;"	f	namespace:LX1600
SetMacCready	src/Device/Driver/LX/V7.hpp	/^  SetMacCready(Port &port, OperationEnvironment &env, double mc)$/;"	f	namespace:V7
SetManualMacCready	src/ActionInterface.cpp	/^void ActionInterface::SetManualMacCready(double mc, bool to_devices)$/;"	f	class:ActionInterface
SetMapScale	src/MapWindow/GlueMapWindowDisplayMode.cpp	/^GlueMapWindow::SetMapScale(double scale)$/;"	f	class:GlueMapWindow
SetMapScale	src/MapWindow/MapWindow.hpp	/^  void SetMapScale(const double x) {$/;"	f	class:MapWindow
SetMapSettings	src/Interface.hpp	/^  static inline MapSettings &SetMapSettings() {$/;"	f	namespace:CommonInterface
SetMapSettings	src/MainWindow.cpp	/^MainWindow::SetMapSettings(const MapSettings &settings_map)$/;"	f	class:MainWindow
SetMapSettings	src/MapWindow/GlueMapWindow.cpp	/^GlueMapWindow::SetMapSettings(const MapSettings &new_value)$/;"	f	class:GlueMapWindow
SetMax	src/Form/DataField/Float.hpp	/^  void SetMax(double v) {$/;"	f	class:final
SetMax	src/Form/DataField/Integer.hpp	/^  void SetMax(int _max) {$/;"	f	class:final
SetMax	src/Form/DataField/Time.hpp	/^  void SetMax(int _max) {$/;"	f	class:final
SetMaxDt	src/Math/SelfTimingKalmanFilter1d.cpp	/^SelfTimingKalmanFilter1d::SetMaxDt(const double max_dt)$/;"	f	class:SelfTimingKalmanFilter1d
SetMaxSize	src/net/StaticSocketAddress.hxx	/^	void SetMaxSize() {$/;"	f	class:StaticSocketAddress
SetMaxTokenNumber	src/Form/DataField/Time.hpp	/^  void SetMaxTokenNumber(unsigned _max_tokens) {$/;"	f	class:final
SetMessage	src/ProgressWindow.cpp	/^ProgressWindow::SetMessage(const TCHAR *text)$/;"	f	class:ProgressWindow
SetMin	src/Form/DataField/Float.hpp	/^  void SetMin(double v) {$/;"	f	class:final
SetMin	src/Form/DataField/Integer.hpp	/^  void SetMin(int _min) {$/;"	f	class:final
SetMin	src/Form/DataField/Time.hpp	/^  void SetMin(int _min) {$/;"	f	class:final
SetMixCopy	src/ui/canvas/gdi/Canvas.hpp	/^  void SetMixCopy() {$/;"	f	class:Canvas
SetMixMask	src/ui/canvas/gdi/Canvas.hpp	/^  void SetMixMask() {$/;"	f	class:Canvas
SetModalResult	src/Dialogs/Task/Manager/Internal.hpp	/^  void SetModalResult(int r) {$/;"	f	class:final
SetMode	src/Engine/Airspace/AirspaceWarningManager.cpp	/^  void SetMode(bool m) {$/;"	f	class:final
SetMode	src/Engine/Task/TaskManager.cpp	/^TaskManager::SetMode(const TaskType _mode)$/;"	f	class:TaskManager
SetModeOptional	src/Renderer/TaskPointRenderer.hpp	/^  void SetModeOptional(const bool mode) {$/;"	f	class:TaskPointRenderer
SetModeless	src/Form/Form.hpp	/^  void SetModeless() {$/;"	f	class:WndForm
SetModified	src/Profile/Map.hpp	/^  void SetModified(bool _modified=true) {$/;"	f	class:ProfileMap
SetModified	src/Profile/ProfileMap.cpp	/^Profile::SetModified(bool _modified)$/;"	f	class:Profile
SetMonitor	src/Device/Descriptor.hpp	/^  void SetMonitor(DataHandler  *_monitor) {$/;"	f	class:final
SetMoreData	src/Blackboard/DeviceBlackboard.hpp	/^  MoreData &SetMoreData() { return gps_info; }$/;"	f	class:DeviceBlackboard
SetNOAAStore	src/MapWindow/MapWindow.hpp	/^  void SetNOAAStore(NOAAStore *_noaa_store) {$/;"	f	class:MapWindow
SetName	src/Engine/Task/Ordered/OrderedTask.hpp	/^  void SetName(const StaticString<64> &name_) {$/;"	f	class:final
SetNegative	src/Form/DigitEntry.hpp	/^    void SetNegative(bool is_negative) {$/;"	f	struct:CoordinateFormat::Column
SetNeighbours	src/Engine/Task/Ordered/OrderedTask.cpp	/^OrderedTask::SetNeighbours(unsigned position)$/;"	f	class:OrderedTask
SetNeighbours	src/Engine/Task/Ordered/Points/FinishPoint.cpp	/^FinishPoint::SetNeighbours(OrderedTaskPoint *_prev, OrderedTaskPoint *_next)$/;"	f	class:FinishPoint
SetNeighbours	src/Engine/Task/Ordered/Points/OrderedTaskPoint.cpp	/^OrderedTaskPoint::SetNeighbours(OrderedTaskPoint *_previous,$/;"	f	class:OrderedTaskPoint
SetNeighbours	src/Engine/Task/Ordered/Points/StartPoint.cpp	/^StartPoint::SetNeighbours(OrderedTaskPoint *_prev, OrderedTaskPoint *_next)$/;"	f	class:StartPoint
SetNetworkID	src/Kobo/WPASupplicant.cpp	/^WPASupplicant::SetNetworkID(unsigned id,$/;"	f	class:WPASupplicant
SetNetworkPSK	src/Kobo/WPASupplicant.hpp	/^  bool SetNetworkPSK(unsigned id, const char *psk) {$/;"	f	class:WPASupplicant
SetNetworkSSID	src/Kobo/WPASupplicant.hpp	/^  bool SetNetworkSSID(unsigned id, const char *ssid) {$/;"	f	class:WPASupplicant
SetNetworkString	src/Kobo/WPASupplicant.cpp	/^WPASupplicant::SetNetworkString(unsigned id,$/;"	f	class:WPASupplicant
SetNoBody	src/net/http/Easy.hxx	/^	void SetNoBody(bool value=true) {$/;"	f	class:CurlEasy
SetNoBody	src/net/http/Request.hxx	/^	void SetNoBody(bool value=true) {$/;"	f	class:final
SetNoProgress	src/net/http/Easy.hxx	/^	void SetNoProgress(bool value=true) {$/;"	f	class:CurlEasy
SetNoSignal	src/net/http/Easy.hxx	/^	void SetNoSignal(bool value=true) {$/;"	f	class:CurlEasy
SetNorthUp	src/Gauge/BigTrafficWidget.cpp	/^FlarmTrafficControl::SetNorthUp(bool enabled)$/;"	f	class:FlarmTrafficControl
SetOffset	src/Topography/XShape.hpp	/^  void SetOffset(unsigned _offset) const {$/;"	f	class:XShape
SetOption	src/net/http/Easy.hxx	/^	void SetOption(CURLoption option, T value) {$/;"	f	class:CurlEasy
SetOption	src/net/http/Multi.hxx	/^	void SetOption(CURLMoption option, T value) {$/;"	f	class:CurlMulti
SetOption	src/net/http/Request.hxx	/^	void SetOption(CURLoption option, T value) {$/;"	f	class:final
SetOrderedTaskSettings	src/Engine/Task/Ordered/OrderedTask.cpp	/^OrderedTask::SetOrderedTaskSettings(const OrderedTaskSettings& ob)$/;"	f	class:OrderedTask
SetOrderedTaskSettings	src/Engine/Task/Ordered/Points/FinishPoint.cpp	/^FinishPoint::SetOrderedTaskSettings(const OrderedTaskSettings &otb)$/;"	f	class:FinishPoint
SetOrderedTaskSettings	src/Engine/Task/Ordered/Points/OrderedTaskPoint.hpp	/^  virtual void SetOrderedTaskSettings([[maybe_unused]] const OrderedTaskSettings &otb) {}$/;"	f	class:OrderedTaskPoint
SetOrderedTaskSettings	src/Engine/Task/Ordered/Points/StartPoint.cpp	/^StartPoint::SetOrderedTaskSettings(const OrderedTaskSettings &settings)$/;"	f	class:StartPoint
SetOrderedTaskSettings	src/Engine/Task/TaskManager.cpp	/^TaskManager::SetOrderedTaskSettings(const OrderedTaskSettings &otb)$/;"	f	class:TaskManager
SetOverlay	src/Dialogs/Weather/MapOverlayWidget.cpp	/^WeatherMapOverlayListWidget::SetOverlay(Path path, const TCHAR *label)$/;"	f	class:WeatherMapOverlayListWidget
SetOverlay	src/MapWindow/MapWindow.cpp	/^MapWindow::SetOverlay(std::unique_ptr<MapOverlay> &&_overlay)$/;"	f	class:MapWindow
SetPan	src/MapWindow/GlueMapWindowDisplayMode.cpp	/^GlueMapWindow::SetPan(bool enable)$/;"	f	class:GlueMapWindow
SetParameters	src/Audio/ALSAPCMPlayer.cpp	/^ALSAPCMPlayer::SetParameters(snd_pcm_t &alsa_handle, unsigned sample_rate,$/;"	f	class:ALSAPCMPlayer
SetParametersScheme	src/Dialogs/Device/Vega/VegaConfigurationDialog.cpp	/^SetParametersScheme(PagerWidget &pager, int schemetype)$/;"	f	file:
SetParent	src/Dialogs/Settings/dlgConfigInfoboxes.cpp	/^  void SetParent(InfoBoxesConfigWidget &_parent, unsigned _i) {$/;"	f	class:InfoBoxPreview
SetPast	src/Engine/Task/Points/SampledTaskPoint.hpp	/^  void SetPast(bool _past) {$/;"	f	class:SampledTaskPoint
SetPath	src/Logger/FlightLogger.hpp	/^  void SetPath(Path _path) {$/;"	f	class:FlightLogger
SetPath	src/Profile/PathValue.cpp	/^ProfileMap::SetPath(const char *key, Path value)$/;"	f	class:ProfileMap
SetPath	src/Profile/Profile.cpp	/^Profile::SetPath(const char *key, Path value)$/;"	f	class:Profile
SetPath	src/io/FileTransaction.hpp	/^  void SetPath(P &&_path) {$/;"	f	class:FileTransaction
SetPeriods	src/Audio/VarioSynthesiser.hpp	/^  void SetPeriods(unsigned min, unsigned max) {$/;"	f	class:final
SetPersistentCallback	src/lua/Persistent.cpp	/^Lua::SetPersistentCallback(lua_State *L, PersistentCallback callback)$/;"	f	class:Lua
SetPilot	src/Device/Driver/FLARM/Device.cpp	/^FlarmDevice::SetPilot(const TCHAR *pilot_name, OperationEnvironment &env)$/;"	f	class:FlarmDevice
SetPlaneRegistration	src/Device/Driver/FLARM/Device.cpp	/^FlarmDevice::SetPlaneRegistration(const TCHAR *registration,$/;"	f	class:FlarmDevice
SetPlaneType	src/Device/Driver/FLARM/Device.cpp	/^FlarmDevice::SetPlaneType(const TCHAR *plane_type, OperationEnvironment &env)$/;"	f	class:FlarmDevice
SetPlayState	src/Audio/SLES/Play.hpp	/^    SLresult SetPlayState(SLuint32 state) {$/;"	f	class:SLES::Play
SetPointSearchMax	src/Engine/Task/Ordered/OrderedTask.cpp	/^OrderedTask::SetPointSearchMax(unsigned tp, const SearchPoint &sol)$/;"	f	class:OrderedTask
SetPointSearchMin	src/Engine/Task/Ordered/OrderedTask.cpp	/^OrderedTask::SetPointSearchMin(unsigned tp, const SearchPoint &sol)$/;"	f	class:OrderedTask
SetPointType	src/Dialogs/Task/MutateTaskPointDialog.cpp	/^SetPointType(OrderedTask &task, unsigned index,$/;"	f	file:
SetPolar	src/Device/Driver/LX/LX1600.hpp	/^  SetPolar(Port &port, OperationEnvironment &env, const PolarCoefficients &polar)$/;"	f	namespace:LX1600
SetPolar	src/Device/Driver/LX/LX1600.hpp	/^  SetPolar(Port &port, OperationEnvironment &env, double a, double b, double c)$/;"	f	namespace:LX1600
SetPolars	src/Task/ProtectedRoutePlanner.cpp	/^ProtectedRoutePlanner::SetPolars(const GlideSettings &settings,$/;"	f	class:ProtectedRoutePlanner
SetPost	src/net/http/Easy.hxx	/^	void SetPost(bool value=true) {$/;"	f	class:CurlEasy
SetPost	src/net/http/Request.hxx	/^	void SetPost(bool value=true) {$/;"	f	class:final
SetPredicted	src/Computer/ContestComputer.hpp	/^  void SetPredicted(const TracePoint &predicted) {$/;"	f	class:ContestComputer
SetPredicted	src/Engine/Contest/ContestManager.cpp	/^ContestManager::SetPredicted(const TracePoint &predicted)$/;"	f	class:ContestManager
SetPredictionTimeFilter	src/Engine/Airspace/AirspaceWarningManager.cpp	/^AirspaceWarningManager::SetPredictionTimeFilter(double time)$/;"	f	class:AirspaceWarningManager
SetPredictionTimeGlide	src/Engine/Airspace/AirspaceWarningManager.cpp	/^AirspaceWarningManager::SetPredictionTimeGlide(double time)$/;"	f	class:AirspaceWarningManager
SetPressed	src/Form/CheckBox.cpp	/^CheckBoxControl::SetPressed(bool value)$/;"	f	class:CheckBoxControl
SetPressed	src/InfoBoxes/InfoBoxWindow.hpp	/^  void SetPressed(bool _pressed) {$/;"	f	class:InfoBoxWindow
SetPressureUnit	src/Device/Driver/CAI302/Protocol.hpp	/^    void SetPressureUnit(unsigned unit) {$/;"	f	struct:CAI302::Pilot
SetPreview	src/Dialogs/Weather/MapOverlayWidget.cpp	/^  void SetPreview(ViewImageWidget &_preview_widget) {$/;"	f	class:final
SetPrimaryDataPath	src/LocalPath.cpp	/^SetPrimaryDataPath(Path path)$/;"	f
SetPrivate	src/net/http/Easy.hxx	/^	void SetPrivate(void *pointer) {$/;"	f	class:CurlEasy
SetProfilePasswordDialog	src/Dialogs/ProfilePasswordDialog.cpp	/^SetProfilePasswordDialog(ProfileMap &map)$/;"	f
SetProperties	src/Engine/Airspace/AbstractAirspace.hpp	/^  void SetProperties(tstring &&_name, const AirspaceClass _Type,$/;"	f	class:AbstractAirspace
SetQNH	src/Blackboard/DeviceBlackboard.cpp	/^DeviceBlackboard::SetQNH(AtmosphericPressure qnh, OperationEnvironment &env)$/;"	f	class:DeviceBlackboard
SetQNH	src/Device/Driver/LX/LX1600.hpp	/^  SetQNH(Port &port, OperationEnvironment &env, const AtmosphericPressure &qnh)$/;"	f	namespace:LX1600
SetQNH	src/Device/Driver/LX/V7.hpp	/^  SetQNH(Port &port, OperationEnvironment &env, const AtmosphericPressure &qnh)$/;"	f	namespace:V7
SetQNH	src/Dialogs/Settings/dlgBasicSettings.cpp	/^FlightSetupPanel::SetQNH(AtmosphericPressure qnh)$/;"	f	class:FlightSetupPanel
SetRadio	src/Engine/Airspace/AbstractAirspace.hpp	/^  void SetRadio(const tstring &_Radio) {$/;"	f	class:AbstractAirspace
SetRadius	src/Engine/Task/ObservationZones/CylinderZone.hpp	/^  virtual void SetRadius(double new_radius) {$/;"	f	class:CylinderZone
SetRange	src/CrossSection/CrossSectionRenderer.hpp	/^  void SetRange(double range) {$/;"	f	class:CrossSectionRenderer
SetRange	src/CrossSection/CrossSectionWindow.hpp	/^  void SetRange(double range) {$/;"	f	class:CrossSectionWindow
SetRange	src/Device/Driver/FLARM/Device.cpp	/^FlarmDevice::SetRange(unsigned range, OperationEnvironment &env)$/;"	f	class:FlarmDevice
SetRange	src/Engine/Task/Ordered/Points/AATPoint.cpp	/^AATPoint::SetRange(const double p, const bool force_if_current)$/;"	f	class:AATPoint
SetRange	src/ProgressGlue.cpp	/^ProgressGlue::SetRange(unsigned value)$/;"	f	class:ProgressGlue
SetRange	src/ProgressWindow.cpp	/^ProgressWindow::SetRange(unsigned min_value, unsigned max_value)$/;"	f	class:ProgressWindow
SetRange	src/Screen/ProgressBar.cpp	/^ProgressBar::SetRange(unsigned min_value, unsigned max_value)$/;"	f	class:ProgressBar
SetRasp	src/DataGlobals.cpp	/^DataGlobals::SetRasp(std::shared_ptr<RaspStore> rasp)$/;"	f	class:DataGlobals
SetRasp	src/MapWindow/MapWindow.cpp	/^MapWindow::SetRasp(const std::shared_ptr<RaspStore> &_rasp_store)$/;"	f	class:MapWindow
SetReadFunction	src/net/http/Easy.hxx	/^	void SetReadFunction(size_t (*function)(char *ptr, size_t size,$/;"	f	class:CurlEasy
SetReal	src/Device/Parser.hpp	/^  void SetReal(bool _real) {$/;"	f	class:NMEAParser
SetRealState	src/Blackboard/DeviceBlackboard.hpp	/^  NMEAInfo &SetRealState(unsigned i) {$/;"	f	class:DeviceBlackboard
SetRealistic	src/Replay/TaskAutoPilot.cpp	/^AutopilotParameters::SetRealistic()$/;"	f	class:AutopilotParameters
SetReferenceMass	src/Engine/GlideSolvers/GlidePolar.hpp	/^  void SetReferenceMass(double _reference_mass, bool update = true) {$/;"	f	class:GlidePolar
SetReplayState	src/Blackboard/DeviceBlackboard.hpp	/^  NMEAInfo &SetReplayState() { return replay_data; }$/;"	f	class:DeviceBlackboard
SetRequest	src/Terrain/RasterTile.hpp	/^  void SetRequest() {$/;"	f	class:RasterTile
SetRequestBody	src/net/http/Easy.hxx	/^	void SetRequestBody(const void *data, size_t size) {$/;"	f	class:CurlEasy
SetRequestBody	src/net/http/Request.hxx	/^	void SetRequestBody(const void *data, size_t size) {$/;"	f	class:final
SetRequestHeaders	src/net/http/Easy.hxx	/^	void SetRequestHeaders(struct curl_slist *headers) {$/;"	f	class:CurlEasy
SetRequestHeaders	src/net/http/Request.hxx	/^	void SetRequestHeaders(struct curl_slist *request_headers) {$/;"	f	class:final
SetRoute	src/Task/ProtectedTaskManager.hpp	/^  void SetRoute(const RoutePlannerGlue *_route) {$/;"	f	class:ReachIntersectionTest
SetRoutePlanner	src/MapWindow/MapWindow.hpp	/^  void SetRoutePlanner(const ProtectedRoutePlanner *_route_planner) {$/;"	f	class:MapWindow
SetRoutePlanner	src/Task/ProtectedTaskManager.cpp	/^ProtectedTaskManager::SetRoutePlanner(const RoutePlannerGlue *_route) {$/;"	f	class:ProtectedTaskManager
SetRxTimeout	src/Device/Port/SerialPort.cpp	/^SerialPort::SetRxTimeout(unsigned Timeout)$/;"	f	class:SerialPort
SetSCSettings	src/Device/Driver/LX/LX1600.hpp	/^  SetSCSettings(Port &port, OperationEnvironment &env,$/;"	f	namespace:LX1600
SetSample	src/Engine/ThermalBand/ThermalSlice.hpp	/^  void SetSample(double _time) {$/;"	f	struct:ThermalSlice
SetScoreExit	src/Engine/Task/Ordered/Points/ASTPoint.hpp	/^  void SetScoreExit(bool _score_exit) {$/;"	f	class:final
SetScreenDistanceMeters	src/CalculationThread.cpp	/^CalculationThread::SetScreenDistanceMeters(double new_value)$/;"	f	class:CalculationThread
SetScreenSize	src/ui/event/poll/InputQueue.hpp	/^  void SetScreenSize(unsigned width, unsigned height) {$/;"	f	class:DisplayOrientation::final
SetScreenSize	src/ui/event/poll/Queue.hpp	/^  void SetScreenSize(unsigned width, unsigned height) {$/;"	f	class:DisplayOrientation::final
SetScreenSize	src/ui/event/poll/libinput/LibInputHandler.hpp	/^  void SetScreenSize(unsigned _width, unsigned _height) {$/;"	f	class:UI::final
SetScreenSize	src/ui/event/poll/linux/MergeMouse.cpp	/^MergeMouse::SetScreenSize(unsigned width, unsigned height)$/;"	f	class:UI::MergeMouse
SetSearchMax	src/Engine/Task/Points/SampledTaskPoint.hpp	/^  void SetSearchMax(const SearchPoint &locmax) {$/;"	f	class:SampledTaskPoint
SetSearchMin	src/Engine/Task/Points/SampledTaskPoint.hpp	/^  void SetSearchMin(const SearchPoint &locmin) {$/;"	f	class:SampledTaskPoint
SetSectorAngle	src/Engine/Task/ObservationZones/SymmetricSectorZone.hpp	/^  void SetSectorAngle(Angle _angle) {$/;"	f	class:SymmetricSectorZone
SetSelected	src/Form/Button.cpp	/^Button::SetSelected(bool _selected)$/;"	f	class:Button
SetSelectedIndex	src/Form/ButtonPanel.cpp	/^ButtonPanel::SetSelectedIndex(unsigned _index)$/;"	f	class:ButtonPanel
SetServer	src/Tracking/LiveTrack24.cpp	/^LiveTrack24::SetServer(const TCHAR * _server)$/;"	f	class:LiveTrack24
SetSettings	src/CrossSection/AirspaceXSRenderer.hpp	/^  void SetSettings(const AirspaceRendererSettings &_settings) {$/;"	f	class:AirspaceXSRenderer
SetSettings	src/Dialogs/Settings/Panels/TerrainDisplayConfigPanel.cpp	/^  void SetSettings(const TerrainRendererSettings &settings) {$/;"	f	class:TerrainPreviewWindow
SetSettings	src/Terrain/TerrainRenderer.hpp	/^  void SetSettings(const TerrainRendererSettings &_settings) {$/;"	f	class:TerrainRenderer
SetSettings	src/Tracking/SkyLines/Glue.cpp	/^SkyLinesTracking::Glue::SetSettings(const Settings &settings)$/;"	f	class:SkyLinesTracking::Glue
SetSettings	src/Tracking/TrackingGlue.cpp	/^TrackingGlue::SetSettings(const TrackingSettings &_settings)$/;"	f	class:TrackingGlue
SetShadingAngle	src/Renderer/BackgroundRenderer.cpp	/^BackgroundRenderer::SetShadingAngle(const WindowProjection& projection,$/;"	f	class:BackgroundRenderer
SetSilence	src/Audio/VarioSynthesiser.cpp	/^VarioSynthesiser::SetSilence()$/;"	f	class:VarioSynthesiser
SetSimulatorLocation	src/Blackboard/DeviceBlackboard.cpp	/^DeviceBlackboard::SetSimulatorLocation(const GeoPoint &location)$/;"	f	class:DeviceBlackboard
SetSimulatorState	src/Blackboard/DeviceBlackboard.hpp	/^  NMEAInfo &SetSimulatorState() { return simulator_data; }$/;"	f	class:DeviceBlackboard
SetSinkTone	src/Device/Driver/CAI302/Protocol.hpp	/^    void SetSinkTone(unsigned v) {$/;"	f	struct:CAI302::Pilot
SetSize	src/Android/NativeView.hpp	/^  void SetSize(unsigned _width, unsigned _height) {$/;"	f	class:NativeView
SetSize	src/Form/ScrollBar.cpp	/^ScrollBar::SetSize(const PixelSize size)$/;"	f	class:ScrollBar
SetSize	src/Terrain/HeightMatrix.cpp	/^HeightMatrix::SetSize(size_t _size)$/;"	f	class:HeightMatrix
SetSize	src/Terrain/HeightMatrix.cpp	/^HeightMatrix::SetSize(unsigned _width, unsigned _height)$/;"	f	class:HeightMatrix
SetSize	src/Terrain/HeightMatrix.cpp	/^HeightMatrix::SetSize(unsigned width, unsigned height,$/;"	f	class:HeightMatrix
SetSize	src/Terrain/Loader.cpp	/^TerrainLoader::SetSize(unsigned _width, unsigned _height,$/;"	f	class:TerrainLoader
SetSize	src/Terrain/RasterTileCache.cpp	/^RasterTileCache::SetSize(unsigned _width, unsigned _height,$/;"	f	class:RasterTileCache
SetSize	src/ui/event/shared/RotatePointer.hpp	/^  void SetSize(unsigned _width, unsigned _height) {$/;"	f	class:UI::RotatePointer
SetSkyLinesData	src/MapWindow/MapWindow.hpp	/^  void SetSkyLinesData(const SkyLinesTracking::Data *_data) {$/;"	f	class:MapWindow
SetSkyLinesEnabled	src/Dialogs/Settings/Panels/TrackingConfigPanel.cpp	/^TrackingConfigPanel::SetSkyLinesEnabled(bool enabled)$/;"	f	class:TrackingConfigPanel
SetSlider	src/Form/ScrollBar.cpp	/^ScrollBar::SetSlider(unsigned size, unsigned view_size,$/;"	f	class:ScrollBar
SetSmartDiffFilter	src/Device/Driver/LX/LX1600.hpp	/^  SetSmartDiffFilter(Port &port, OperationEnvironment &env, double filter)$/;"	f	namespace:LX1600
SetSpeed	src/Blackboard/DeviceBlackboard.cpp	/^DeviceBlackboard::SetSpeed(double val)$/;"	f	class:DeviceBlackboard
SetSpeedFactor	src/Replay/TaskAutoPilot.hpp	/^  void SetSpeedFactor(double f) {$/;"	f	class:TaskAutoPilot
SetSpeedUnit	src/Device/Driver/CAI302/Protocol.hpp	/^    void SetSpeedUnit(unsigned unit) {$/;"	f	struct:CAI302::Pilot
SetStandbyFrequency	src/ActionInterface.cpp	/^ActionInterface::SetStandbyFrequency(const RadioFrequency & freq, const TCHAR * freq_name, bool to_devices)$/;"	f	class:ActionInterface
SetStandbyFrequency	src/Blackboard/DeviceBlackboard.cpp	/^DeviceBlackboard::SetStandbyFrequency(RadioFrequency frequency,$/;"	f	class:DeviceBlackboard
SetStart	src/CrossSection/CrossSectionRenderer.hpp	/^  void SetStart(GeoPoint _start) {$/;"	f	class:CrossSectionRenderer
SetStart	src/CrossSection/CrossSectionWindow.hpp	/^  void SetStart(GeoPoint start) {$/;"	f	class:CrossSectionWindow
SetStartLabel	src/Dialogs/Settings/Panels/TaskDefaultsConfigPanel.cpp	/^TaskDefaultsConfigPanel::SetStartLabel()$/;"	f	class:TaskDefaultsConfigPanel
SetStartRadial	src/Engine/Task/ObservationZones/SectorZone.cpp	/^SectorZone::SetStartRadial(const Angle x)$/;"	f	class:SectorZone
SetStarted	src/Engine/Task/Stats/StartStats.cpp	/^StartStats::SetStarted(const AircraftState &aircraft)$/;"	f	class:StartStats
SetStartupLocation	src/Blackboard/DeviceBlackboard.cpp	/^DeviceBlackboard::SetStartupLocation(const GeoPoint &loc, const double alt)$/;"	f	class:DeviceBlackboard
SetState	src/Form/CheckBox.cpp	/^CheckBoxControl::SetState(bool value)$/;"	f	class:CheckBoxControl
SetStealthMode	src/Device/Driver/FLARM/Device.cpp	/^FlarmDevice::SetStealthMode(bool enabled, OperationEnvironment &env)$/;"	f	class:FlarmDevice
SetStep	src/Form/DataField/Float.hpp	/^  void SetStep(double v) {$/;"	f	class:final
SetStep	src/Form/DataField/Time.hpp	/^  void SetStep(unsigned _step) {$/;"	f	class:final
SetStep	src/ProgressGlue.cpp	/^ProgressGlue::SetStep(int step)$/;"	f	class:ProgressGlue
SetStep	src/ProgressWindow.cpp	/^ProgressWindow::SetStep(unsigned size)$/;"	f	class:ProgressWindow
SetStep	src/Screen/ProgressBar.cpp	/^ProgressBar::SetStep(unsigned size)$/;"	f	class:ProgressBar
SetString	src/Form/DataField/Enum.cpp	/^DataFieldEnum::Entry::SetString(const TCHAR *_string)$/;"	f	class:DataFieldEnum::Entry
SetStringAutoAdd	src/Form/DataField/Enum.cpp	/^DataFieldEnum::SetStringAutoAdd(const TCHAR *text)$/;"	f	class:DataFieldEnum
SetSwap	src/ui/event/shared/RotatePointer.hpp	/^  void SetSwap(bool _swap) {$/;"	f	class:UI::RotatePointer
SetSystemSettings	src/Blackboard/InterfaceBlackboard.hpp	/^  SystemSettings &SetSystemSettings() {$/;"	f	class:InterfaceBlackboard
SetSystemSettings	src/Interface.hpp	/^  static inline SystemSettings &SetSystemSettings() {$/;"	f	namespace:CommonInterface
SetSystemTimeFromGPS	src/Profile/ProfileKeys.cpp	/^const char SetSystemTimeFromGPS[] = "SetSystemTimeFromGPS";$/;"	m	namespace:ProfileKeys	file:
SetTarget	src/Dialogs/Task/TargetDialog.cpp	/^TargetWidget::SetTarget()$/;"	f	class:TargetWidget
SetTarget	src/Engine/Task/Ordered/Points/AATPoint.cpp	/^AATPoint::SetTarget(RangeAndRadial rar, const FlatProjection &proj)$/;"	f	class:AATPoint
SetTarget	src/Engine/Task/Ordered/Points/AATPoint.cpp	/^AATPoint::SetTarget(const GeoPoint &loc, const bool override_lock)$/;"	f	class:AATPoint
SetTarget	src/Engine/Task/Solvers/TaskOptTarget.cpp	/^TaskOptTarget::SetTarget(const double p)$/;"	f	class:TaskOptTarget
SetTarget	src/Engine/Task/TaskManager.cpp	/^TaskManager::SetTarget(const unsigned index, RangeAndRadial rar)$/;"	f	class:TaskManager
SetTarget	src/Engine/Task/TaskManager.cpp	/^TaskManager::SetTarget(const unsigned index, const GeoPoint &loc,$/;"	f	class:TaskManager
SetTarget	src/Gauge/FlarmTrafficWindow.cpp	/^FlarmTrafficWindow::SetTarget(int i)$/;"	f	class:FlarmTrafficWindow
SetTarget	src/Gauge/FlarmTrafficWindow.hpp	/^  void SetTarget(const FlarmId &id) {$/;"	f	class:FlarmTrafficWindow
SetTarget	src/Gauge/FlarmTrafficWindow.hpp	/^  void SetTarget(const FlarmTraffic *traffic) {$/;"	f	class:FlarmTrafficWindow
SetTarget	src/MapWindow/TargetMapWindow.cpp	/^TargetMapWindow::SetTarget(unsigned index)$/;"	f	class:TargetMapWindow
SetTask	src/Dialogs/Task/Manager/TaskMapButtonRenderer.hpp	/^  void SetTask(const OrderedTask *_task) {$/;"	f	class:TaskMapButtonRenderer
SetTask	src/MapWindow/MapWindow.hpp	/^  void SetTask(ProtectedTaskManager *_task) {$/;"	f	class:MapWindow
SetTask	src/MapWindow/TargetMapWindow.hpp	/^  void SetTask(ProtectedTaskManager *_task) {$/;"	f	class:TargetMapWindow
SetTaskAdvance	src/Engine/Task/Ordered/OrderedTask.hpp	/^  TaskAdvance &SetTaskAdvance() {$/;"	f	class:final
SetTaskAdvance	src/Engine/Task/TaskManager.cpp	/^TaskManager::SetTaskAdvance()$/;"	f	class:TaskManager
SetTaskBehaviour	src/Engine/Task/Ordered/OrderedTask.cpp	/^OrderedTask::SetTaskBehaviour(const TaskBehaviour &tb)$/;"	f	class:OrderedTask
SetTaskBehaviour	src/Engine/Task/Ordered/OrderedTask.cpp	/^SetTaskBehaviour(OrderedTask::OrderedTaskPointVector &vector,$/;"	f	file:
SetTaskBehaviour	src/Engine/Task/Ordered/Points/FinishPoint.cpp	/^FinishPoint::SetTaskBehaviour(const TaskBehaviour &tb)$/;"	f	class:FinishPoint
SetTaskBehaviour	src/Engine/Task/Ordered/Points/IntermediatePoint.cpp	/^IntermediateTaskPoint::SetTaskBehaviour(const TaskBehaviour &tb)$/;"	f	class:IntermediateTaskPoint
SetTaskBehaviour	src/Engine/Task/Ordered/Points/OrderedTaskPoint.hpp	/^  virtual void SetTaskBehaviour([[maybe_unused]] const TaskBehaviour &tb) {}$/;"	f	class:OrderedTaskPoint
SetTaskBehaviour	src/Engine/Task/Ordered/Points/StartPoint.cpp	/^StartPoint::SetTaskBehaviour(const TaskBehaviour &tb)$/;"	f	class:StartPoint
SetTaskBehaviour	src/Engine/Task/TaskManager.cpp	/^TaskManager::SetTaskBehaviour(const TaskBehaviour &behaviour)$/;"	f	class:TaskManager
SetTaskBehaviour	src/Engine/Task/Unordered/GotoTask.cpp	/^GotoTask::SetTaskBehaviour(const TaskBehaviour &tb)$/;"	f	class:GotoTask
SetTaskBehaviour	src/Engine/Task/Unordered/UnorderedTaskPoint.cpp	/^UnorderedTaskPoint::SetTaskBehaviour(const TaskBehaviour &tb)$/;"	f	class:UnorderedTaskPoint
SetTaskEvents	src/Engine/Task/TaskManager.cpp	/^TaskManager::SetTaskEvents(TaskEvents &_task_events)$/;"	f	class:TaskManager
SetTaskFinished	src/Renderer/TaskPointRenderer.hpp	/^  void SetTaskFinished(bool _task_finished) {$/;"	f	class:TaskPointRenderer
SetTaskValid	src/Renderer/WaypointRenderer.cpp	/^  void SetTaskValid() {$/;"	f	class:final
SetTemperatureUnit	src/Device/Driver/CAI302/Protocol.hpp	/^    void SetTemperatureUnit(unsigned unit) {$/;"	f	struct:CAI302::Pilot
SetTerrain	src/Computer/GlideComputer.cpp	/^GlideComputer::SetTerrain(RasterTerrain* _terrain)$/;"	f	class:GlideComputer
SetTerrain	src/Computer/GlideComputerAirData.hpp	/^  void SetTerrain(const RasterTerrain* _terrain) {$/;"	f	class:GlideComputerAirData
SetTerrain	src/Computer/TaskComputer.cpp	/^TaskComputer::SetTerrain(const RasterTerrain* _terrain)$/;"	f	class:TaskComputer
SetTerrain	src/CrossSection/CrossSectionRenderer.hpp	/^  void SetTerrain(const RasterTerrain *_terrain) {$/;"	f	class:CrossSectionRenderer
SetTerrain	src/CrossSection/CrossSectionWindow.hpp	/^  void SetTerrain(const RasterTerrain *terrain) {$/;"	f	class:CrossSectionWindow
SetTerrain	src/Engine/Route/RoutePlanner.hpp	/^  void SetTerrain(const RasterMap *_terrain) {$/;"	f	class:RoutePlanner
SetTerrain	src/MainWindow.cpp	/^MainWindow::SetTerrain(RasterTerrain *terrain)$/;"	f	class:MainWindow
SetTerrain	src/MapWindow/GlueMapWindow.cpp	/^GlueMapWindow::SetTerrain(RasterTerrain *_terrain)$/;"	f	class:GlueMapWindow
SetTerrain	src/MapWindow/MapWindow.cpp	/^MapWindow::SetTerrain(RasterTerrain *_terrain)$/;"	f	class:MapWindow
SetTerrain	src/MapWindow/TargetMapWindow.cpp	/^TargetMapWindow::SetTerrain(RasterTerrain *terrain)$/;"	f	class:TargetMapWindow
SetTerrain	src/Renderer/BackgroundRenderer.cpp	/^BackgroundRenderer::SetTerrain(const RasterTerrain *_terrain)$/;"	f	class:BackgroundRenderer
SetTerrain	src/Task/ProtectedRoutePlanner.cpp	/^ProtectedRoutePlanner::SetTerrain(const RasterTerrain *terrain)$/;"	f	class:ProtectedRoutePlanner
SetTerrain	src/Task/RoutePlannerGlue.cpp	/^RoutePlannerGlue::SetTerrain(const RasterTerrain *_terrain)$/;"	f	class:RoutePlannerGlue
SetText	src/Screen/Custom/LargeTextWindow.cpp	/^LargeTextWindow::SetText(const TCHAR *text)$/;"	f	class:LargeTextWindow
SetText	src/Screen/GDI/LargeTextWindow.cpp	/^LargeTextWindow::SetText(const TCHAR *text)$/;"	f	class:LargeTextWindow
SetTextColor	src/ui/canvas/gdi/Canvas.hpp	/^  void SetTextColor(const Color c) {$/;"	f	class:Canvas
SetTextColor	src/ui/canvas/memory/Canvas.hpp	/^  void SetTextColor(const Color c) {$/;"	f	class:Canvas
SetTextColor	src/ui/canvas/opengl/Canvas.hpp	/^  void SetTextColor(const Color c) {$/;"	f	class:Canvas
SetTexturePowerOfTwo	src/Android/NativeView.hpp	/^  void SetTexturePowerOfTwo(bool value) {$/;"	f	class:NativeView
SetThreadIdlePriority	src/thread/Util.hpp	/^SetThreadIdlePriority()$/;"	f
SetThreadName	src/thread/Name.hpp	/^SetThreadName(const char *name)$/;"	f
SetThreadRealtime	src/thread/Util.hpp	/^SetThreadRealtime()$/;"	f
SetTime	src/Weather/Rasp/RaspCache.cpp	/^RaspCache::SetTime(BrokenTime t)$/;"	f	class:RaspCache
SetTime	src/Weather/Rasp/RaspRenderer.hpp	/^  void SetTime(BrokenTime t) {$/;"	f	class:RaspRenderer
SetTimeOffset	src/Device/Driver/LX/LX1600.hpp	/^  SetTimeOffset(Port &port, OperationEnvironment &env, int offset)$/;"	f	namespace:LX1600
SetTimeScale	src/Replay/Replay.hpp	/^  void SetTimeScale(const double _time_scale) {$/;"	f	class:final
SetTimeZone	src/Form/DataField/RoughTime.hpp	/^  void SetTimeZone(RoughTimeDelta _time_zone) {$/;"	f	class:final
SetTimeout	src/net/http/Easy.hxx	/^	void SetTimeout(long timeout) {$/;"	f	class:CurlEasy
SetTimes	src/Engine/Task/Stats/ElementStat.cpp	/^ElementStat::SetTimes(const double until_start_s, const double ts,$/;"	f	class:ElementStat
SetTitle	src/Dialogs/Weather/WeatherDialog.cpp	/^SetTitle(WndForm &form, const TabWidget &pager)$/;"	f	file:
SetTitle	src/Dialogs/dlgStatus.cpp	/^SetTitle(WndForm &form, const TabWidget &pager)$/;"	f	file:
SetTitle	src/InfoBoxes/Data.cpp	/^InfoBoxData::SetTitle(const TCHAR *_title)$/;"	f	class:InfoBoxData
SetTitle	src/InfoBoxes/InfoBoxWindow.cpp	/^InfoBoxWindow::SetTitle(const TCHAR *_title)$/;"	f	class:InfoBoxWindow
SetTitleColor	src/InfoBoxes/Data.hpp	/^  void SetTitleColor(unsigned _color) {$/;"	f	struct:InfoBoxData
SetTone	src/Audio/ToneSynthesiser.cpp	/^ToneSynthesiser::SetTone(unsigned tone_hz)$/;"	f	class:ToneSynthesiser
SetTopograpgy	src/MapWindow/TargetMapWindow.cpp	/^TargetMapWindow::SetTopograpgy(TopographyStore *topography)$/;"	f	class:TargetMapWindow
SetTopography	src/MainWindow.cpp	/^MainWindow::SetTopography(TopographyStore *topography)$/;"	f	class:MainWindow
SetTopography	src/MapWindow/GlueMapWindow.cpp	/^GlueMapWindow::SetTopography(TopographyStore *_topography)$/;"	f	class:GlueMapWindow
SetTopography	src/MapWindow/MapWindow.cpp	/^MapWindow::SetTopography(TopographyStore *_topography)$/;"	f	class:MapWindow
SetTrack	src/Blackboard/DeviceBlackboard.cpp	/^DeviceBlackboard::SetTrack(Angle val)$/;"	f	class:DeviceBlackboard
SetTwoWidgets	src/Dialogs/Task/Manager/TaskEditPanel.cpp	/^  void SetTwoWidgets(TwoWidgets &_two_widgets) {$/;"	f	class:TaskEditPanel
SetTwoWidgets	src/Dialogs/Task/Manager/TaskListPanel.cpp	/^  void SetTwoWidgets(TwoWidgets &_two_widgets) {$/;"	f	class:final
SetType	src/Dialogs/Weather/PCMetDialog.cpp	/^  void SetType(const PCMet::ImageType *_type) {$/;"	f	class:final
SetUISettings	src/Blackboard/InterfaceBlackboard.hpp	/^  UISettings &SetUISettings() {$/;"	f	class:InterfaceBlackboard
SetUISettings	src/Interface.hpp	/^  static inline UISettings &SetUISettings() {$/;"	f	namespace:CommonInterface
SetUIState	src/Interface.hpp	/^  static inline UIState &SetUIState() {$/;"	f	namespace:CommonInterface
SetUIState	src/MainWindow.cpp	/^MainWindow::SetUIState(const UIState &ui_state)$/;"	f	class:MainWindow
SetUIState	src/MapWindow/GlueMapWindow.cpp	/^GlueMapWindow::SetUIState(const UIState &new_value)$/;"	f	class:GlueMapWindow
SetURL	src/net/http/Easy.hxx	/^	void SetURL(const char *value) {$/;"	f	class:CurlEasy
SetUTF8	src/util/StaticString.hxx	/^	bool SetUTF8(const char *src) {$/;"	f	class:StaticStringBase
SetUndefined	src/PageSettings.hpp	/^  void SetUndefined() {$/;"	f	struct:PageLayout
SetUnitBits	src/Device/Driver/CAI302/Protocol.hpp	/^    void SetUnitBits(unsigned bit, unsigned n, unsigned value) {$/;"	f	struct:CAI302::Pilot
SetUnits	src/Form/DataField/Float.hpp	/^  void SetUnits(const TCHAR *text) {$/;"	f	class:final
SetUpload	src/net/http/Easy.hxx	/^	void SetUpload(bool value=true) {$/;"	f	class:CurlEasy
SetUrl	src/net/http/Request.hxx	/^	void SetUrl(const char *url) {$/;"	f	class:final
SetUserAgent	src/net/http/Easy.hxx	/^	void SetUserAgent(const char *value) {$/;"	f	class:CurlEasy
SetUserCoordinateFormat	src/Formatter/UserGeoPointFormatter.cpp	/^SetUserCoordinateFormat(CoordinateFormat _fmt)$/;"	f
SetVCenter	src/Renderer/TextRenderer.hpp	/^  void SetVCenter(bool _vcenter=true) {$/;"	f	class:TextRenderer
SetVMax	src/Engine/GlideSolvers/GlidePolar.hpp	/^  void SetVMax(double _v_max, bool update = true) {$/;"	f	class:GlidePolar
SetVSpeed	src/InfoBoxes/Content/MacCready.cpp	/^SetVSpeed(InfoBoxData &data, double value)$/;"	f	file:
SetVSpeed	src/InfoBoxes/Content/Thermal.cpp	/^SetVSpeed(InfoBoxData &data, double value)$/;"	f	file:
SetVSpeedComment	src/InfoBoxes/Content/Trace.cpp	/^InfoBoxContentSpark::SetVSpeedComment(InfoBoxData &data,$/;"	f	class:InfoBoxContentSpark
SetValue	src/Audio/VarioGlue.cpp	/^AudioVarioGlue::SetValue(double vario)$/;"	f	class:AudioVarioGlue
SetValue	src/Config/Registry.hpp	/^  bool SetValue(const TCHAR *name, DWORD type,$/;"	f	class:RegistryKey
SetValue	src/Config/Registry.hpp	/^  bool SetValue(const TCHAR *name, DWORD value) {$/;"	f	class:RegistryKey
SetValue	src/Config/Registry.hpp	/^  bool SetValue(const TCHAR *name, const TCHAR *value) {$/;"	f	class:RegistryKey
SetValue	src/Dialogs/Settings/Panels/PagesConfigPanel.cpp	/^PageLayoutEditWidget::SetValue(const PageLayout &_value)$/;"	f	class:PageLayoutEditWidget
SetValue	src/Form/DataField/Angle.hpp	/^  void SetValue(Angle _value) {$/;"	f	class:final
SetValue	src/Form/DataField/Angle.hpp	/^  void SetValue(int _value) {$/;"	f	class:final
SetValue	src/Form/DataField/Angle.hpp	/^  void SetValue(unsigned _value) {$/;"	f	class:final
SetValue	src/Form/DataField/GeoPoint.hpp	/^  void SetValue(GeoPoint _value) {$/;"	f	class:final
SetValue	src/Form/DataField/RoughTime.hpp	/^  void SetValue(RoughTime _value) {$/;"	f	class:final
SetValue	src/Form/DataField/Time.hpp	/^  void SetValue(int _value) {$/;"	f	class:final
SetValue	src/Form/DigitEntry.cpp	/^DigitEntry::SetValue(Angle value)$/;"	f	class:DigitEntry
SetValue	src/Form/DigitEntry.cpp	/^DigitEntry::SetValue(RoughTime value)$/;"	f	class:DigitEntry
SetValue	src/Form/DigitEntry.cpp	/^DigitEntry::SetValue(double value)$/;"	f	class:DigitEntry
SetValue	src/Form/DigitEntry.cpp	/^DigitEntry::SetValue(int value)$/;"	f	class:DigitEntry
SetValue	src/Form/DigitEntry.cpp	/^DigitEntry::SetValue(unsigned value)$/;"	f	class:DigitEntry
SetValue	src/InfoBoxes/Data.cpp	/^InfoBoxData::SetValue(const TCHAR *_value)$/;"	f	class:InfoBoxData
SetValue	src/InfoBoxes/Format.cpp	/^InfoBoxData::SetValue(Angle _value, const TCHAR *suffix)$/;"	f	class:InfoBoxData
SetValue	src/InfoBoxes/Format.cpp	/^InfoBoxData::SetValue(const TCHAR *format, double value)$/;"	f	class:InfoBoxData
SetValue	src/ProgressGlue.cpp	/^ProgressGlue::SetValue(unsigned value)$/;"	f	class:ProgressGlue
SetValue	src/ProgressWindow.cpp	/^ProgressWindow::SetValue(unsigned value)$/;"	f	class:ProgressWindow
SetValue	src/Screen/ProgressBar.cpp	/^ProgressBar::SetValue(unsigned value)$/;"	f	class:ProgressBar
SetValueColor	src/InfoBoxes/Data.hpp	/^  void SetValueColor(unsigned _color) {$/;"	f	struct:InfoBoxData
SetValueFromAltDiff	src/InfoBoxes/Content/Task.cpp	/^SetValueFromAltDiff(InfoBoxData &data, const TaskStats &task_stats,$/;"	f	file:
SetValueFromAltitude	src/InfoBoxes/Units.cpp	/^InfoBoxData::SetValueFromAltitude(double new_value)$/;"	f	class:InfoBoxData
SetValueFromArrival	src/InfoBoxes/Units.cpp	/^InfoBoxData::SetValueFromArrival(double new_value)$/;"	f	class:InfoBoxData
SetValueFromBearingDifference	src/InfoBoxes/Format.cpp	/^InfoBoxData::SetValueFromBearingDifference(Angle delta)$/;"	f	class:InfoBoxData
SetValueFromDistance	src/InfoBoxes/Units.cpp	/^InfoBoxData::SetValueFromDistance(double new_value)$/;"	f	class:InfoBoxData
SetValueFromGlideRatio	src/InfoBoxes/Format.cpp	/^InfoBoxData::SetValueFromGlideRatio(double gr)$/;"	f	class:InfoBoxData
SetValueFromPercent	src/InfoBoxes/Format.cpp	/^InfoBoxData::SetValueFromPercent(double dd)$/;"	f	class:InfoBoxData
SetValueFromSpeed	src/InfoBoxes/Units.cpp	/^InfoBoxData::SetValueFromSpeed(double new_value, bool precision)$/;"	f	class:InfoBoxData
SetValueFromTaskSpeed	src/InfoBoxes/Units.cpp	/^InfoBoxData::SetValueFromTaskSpeed(double new_value, bool precision)$/;"	f	class:InfoBoxData
SetValueFromTimeTwoLines	src/InfoBoxes/Format.cpp	/^InfoBoxData::SetValueFromTimeTwoLines(int dd)$/;"	f	class:InfoBoxData
SetValueFromVoltage	src/InfoBoxes/Format.cpp	/^InfoBoxData::SetValueFromVoltage(double dd)$/;"	f	class:InfoBoxData
SetValueInvalid	src/InfoBoxes/Data.cpp	/^InfoBoxData::SetValueInvalid()$/;"	f	class:InfoBoxData
SetValueUnit	src/InfoBoxes/Data.hpp	/^  void SetValueUnit(Unit _value_unit) {$/;"	f	struct:InfoBoxData
SetVario	src/Audio/VarioSynthesiser.cpp	/^VarioSynthesiser::SetVario(double vario)$/;"	f	class:VarioSynthesiser
SetVarioSettings	src/Device/Driver/LX/LX1600.hpp	/^  SetVarioSettings(Port &port, OperationEnvironment &env,$/;"	f	namespace:LX1600
SetVarioUnit	src/Device/Driver/CAI302/Protocol.hpp	/^    void SetVarioUnit(unsigned unit) {$/;"	f	struct:CAI302::Pilot
SetVerifyHost	src/net/http/Easy.hxx	/^	void SetVerifyHost(bool value) {$/;"	f	class:CurlEasy
SetVerifyHost	src/net/http/Request.hxx	/^	void SetVerifyHost(bool value) {$/;"	f	class:final
SetVerifyPeer	src/net/http/Easy.hxx	/^	void SetVerifyPeer(bool value) {$/;"	f	class:CurlEasy
SetVerifyPeer	src/net/http/Request.hxx	/^	void SetVerifyPeer(bool value) {$/;"	f	class:final
SetVolume	src/Audio/PCMMixer.hpp	/^  void SetVolume(unsigned vol_percent) {$/;"	f	class:final
SetVolume	src/Audio/PCMMixerDataSource.cpp	/^PCMMixerDataSource::SetVolume(unsigned _vol_percent)$/;"	f	class:PCMMixerDataSource
SetVolume	src/Audio/ToneSynthesiser.hpp	/^  void SetVolume(unsigned _volume) {$/;"	f	class:ToneSynthesiser
SetVolume	src/Audio/VolumeController.cpp	/^VolumeController::SetVolume(unsigned vol_percent)$/;"	f	class:VolumeController
SetVolume	src/Device/Driver/CAI302/Manage.cpp	/^CAI302Device::SetVolume(unsigned volume, OperationEnvironment &env)$/;"	f	class:CAI302Device
SetVolume	src/Device/Driver/CAI302/Protocol.cpp	/^CAI302::SetVolume(Port &port, unsigned volume, OperationEnvironment &env)$/;"	f	class:CAI302
SetVolume	src/Device/Driver/LX/LX1600.hpp	/^  SetVolume(Port &port, OperationEnvironment &env, unsigned volume)$/;"	f	namespace:LX1600
SetWaypoints	src/MapWindow/MapWindow.hpp	/^  void SetWaypoints(const Waypoints *_waypoints) {$/;"	f	class:MapWindow
SetWaypoints	src/MapWindow/TargetMapWindow.hpp	/^  void SetWaypoints(const Waypoints *way_points) {$/;"	f	class:TargetMapWindow
SetWeekdays	src/Engine/Airspace/AirspaceActivity.hpp	/^  void SetWeekdays() {$/;"	f	class:AirspaceActivity
SetWeekend	src/Engine/Airspace/AirspaceActivity.hpp	/^  void SetWeekend() {$/;"	f	class:AirspaceActivity
SetWidget	src/Dialogs/WidgetDialog.hpp	/^  void SetWidget(Args&&... args) {$/;"	f	class:final
SetWidget	src/MainWindow.cpp	/^MainWindow::SetWidget(Widget *_widget)$/;"	f	class:MainWindow
SetWind	src/Replay/AircraftSim.cpp	/^AircraftSim::SetWind(const double speed, const Angle direction)$/;"	f	class:AircraftSim
SetWingArea	src/Engine/GlideSolvers/GlidePolar.hpp	/^  void SetWingArea(double _wing_area) {$/;"	f	class:GlidePolar
SetWriteFunction	src/net/http/Easy.hxx	/^	void SetWriteFunction(size_t (*function)(char *ptr, size_t size,$/;"	f	class:CurlEasy
SetZoom	src/Gauge/BigTrafficWidget.cpp	/^  void SetZoom(unsigned _zoom) {$/;"	f	class:FlarmTrafficControl
SettingExists	src/Dialogs/Device/FLARM/ConfigWidget.cpp	/^SettingExists(FlarmDevice &device, const char *name)$/;"	f	file:
SettingExists	src/Dialogs/Device/Vega/VegaParametersWidget.cpp	/^SettingExists(VegaDevice &device, const char *name)$/;"	f	file:
Settings	src/Tracking/LiveTrack24/Settings.hpp	/^struct Settings {$/;"	s	namespace:LiveTrack24
Settings	src/Tracking/SkyLines/Settings.hpp	/^struct Settings {$/;"	s	namespace:SkyLinesTracking
SettingsBlackboard	src/Blackboard/SettingsBlackboard.hpp	/^class SettingsBlackboard : public ComputerSettingsBlackboard {$/;"	c
SettingsEnter	src/UtilsSettings.cpp	/^SettingsEnter()$/;"	f	file:
SettingsLeave	src/UtilsSettings.cpp	/^SettingsLeave(const UISettings &old_ui_settings)$/;"	f	file:
SettingsProcessTimer	src/ProcessTimer.cpp	/^SettingsProcessTimer()$/;"	f	file:
Setup	src/Dialogs/Device/ManageFlarmDialog.cpp	/^    Setup,$/;"	e	enum:final::Controls	file:
SetupCanvas	src/Renderer/AirspaceRendererOther.cpp	/^  bool SetupCanvas(const AbstractAirspace &airspace) {$/;"	f	class:final
SetupContext	src/ui/canvas/opengl/Init.cpp	/^OpenGL::SetupContext()$/;"	f	class:OpenGL
SetupInterior	src/Renderer/AirspaceRendererGL.cpp	/^  bool SetupInterior(const AbstractAirspace &airspace) {$/;"	f	class:final	file:
SetupInterior	src/Renderer/AirspaceRendererGL.cpp	/^  void SetupInterior(const AbstractAirspace &airspace,$/;"	f	class:final	file:
SetupNMEA	src/Device/Driver/LX/LX1600.hpp	/^  SetupNMEA(Port &port, OperationEnvironment &env)$/;"	f	namespace:LX1600
SetupNMEA	src/Device/Driver/LX/V7.hpp	/^  SetupNMEA(Port &port, OperationEnvironment &env)$/;"	f	namespace:V7
SetupOutline	src/Renderer/AirspaceRendererGL.cpp	/^  bool SetupOutline(const AbstractAirspace &airspace) {$/;"	f	class:final	file:
SetupOverlay	src/Dialogs/Weather/MapOverlayWidget.cpp	/^SetupOverlay(MapOverlayBitmap &bmp, Path::const_pointer name)$/;"	f	file:
SetupViewport	src/ui/canvas/opengl/TopCanvas.cpp	/^TopCanvas::SetupViewport(PixelSize native_size)$/;"	f	class:TopCanvas
SfRealloc	src/Topography/shapelib/mapshape.c	/^static void * SfRealloc( void * pMem, int nNewSize )$/;"	f	file:
SfRealloc	src/Topography/shapelib/maptree.c	/^static void * SfRealloc( void * pMem, int nNewSize )$/;"	f	file:
SfRealloc	src/Topography/shapelib/mapxbase.c	/^static void * SfRealloc( void * pMem, int nNewSize )$/;"	f	file:
Shadow	src/ui/canvas/gdi/Color.hpp	/^  constexpr Color Shadow() const {$/;"	f	class:Color
Shadow	src/ui/canvas/memory/Color.hpp	/^  constexpr Color Shadow() const {$/;"	f	class:Color
Shadow	src/ui/canvas/opengl/Color.hpp	/^  constexpr Color Shadow() const {$/;"	f	class:Color
Shape	src/Device/Declaration.hpp	/^    enum Shape {$/;"	g	struct:Declaration::TurnPoint
Shape	src/Engine/Airspace/AbstractAirspace.hpp	/^  enum class Shape: uint8_t {$/;"	c	class:AbstractAirspace
Shape	src/Engine/Task/ObservationZones/ObservationZone.hpp	/^  enum class Shape : uint8_t {$/;"	c	class:ObservationZone
ShapeList	src/Topography/TopographyFile.hpp	/^    ShapeList() {}$/;"	f	struct:TopographyFile::ShapeList
ShapeList	src/Topography/TopographyFile.hpp	/^    ShapeList(const XShape *_shape):shape(_shape) {}$/;"	f	struct:TopographyFile::ShapeList
ShapeList	src/Topography/TopographyFile.hpp	/^  struct ShapeList {$/;"	s	class:TopographyFile
ShapePoint	src/Topography/XShapePoint.hpp	/^struct ShapePoint : FloatPoint2D {$/;"	s
ShapeRenderer	src/Topography/ShapeRenderer.hpp	/^class ShapeRenderer : private NonCopyable {$/;"	c
ShapeScalar	src/Topography/XShapePoint.hpp	/^typedef ShapePoint::scalar_type ShapeScalar;$/;"	t
Shift	src/Geo/Flat/FlatBoundingBox.hpp	/^  void Shift(const FlatGeoPoint &offset) {$/;"	f	struct:FlatBoundingBox
ShouldReopen	src/Device/Descriptor.hpp	/^  bool ShouldReopen() const {$/;"	f	class:final
ShouldReopenDriverOnTimeout	src/Device/Descriptor.cpp	/^DeviceDescriptor::ShouldReopenDriverOnTimeout() const$/;"	f	class:DeviceDescriptor
ShouldReopenOnTimeout	src/Device/Config.cpp	/^DeviceConfig::ShouldReopenOnTimeout() const$/;"	f	class:DeviceConfig
ShouldReopenOnTimeout	src/Device/Descriptor.hpp	/^  bool ShouldReopenOnTimeout() const {$/;"	f	class:final
Show	src/InfoBoxes/InfoBoxManager.cpp	/^InfoBoxManager::Show()$/;"	f	class:InfoBoxManager
ShowAirspaceClassRendererSettingsDialog	src/Dialogs/Airspace/AirspaceCRendererSettingsDialog.cpp	/^ShowAirspaceClassRendererSettingsDialog(AirspaceClass selected)$/;"	f
ShowAirspaceListDialog	src/Dialogs/Airspace/AirspaceList.cpp	/^ShowAirspaceListDialog(const Airspaces &_airspaces,$/;"	f
ShowAll	src/Form/ButtonPanel.cpp	/^ButtonPanel::ShowAll()$/;"	f	class:ButtonPanel
ShowAltitude	src/Dialogs/Settings/dlgBasicSettings.cpp	/^FlightSetupPanel::ShowAltitude(double altitude)$/;"	f	class:FlightSetupPanel
ShowAnalysis8	src/InfoBoxes/Content/Contest.cpp	/^ShowAnalysis8()$/;"	f	file:
ShowAnalysisBarograph	src/InfoBoxes/Content/Trace.cpp	/^ShowAnalysisBarograph()$/;"	f	file:
ShowButton	src/Menu/MenuBar.cpp	/^MenuBar::ShowButton(unsigned i, bool enabled, const TCHAR *text,$/;"	f	class:MenuBar
ShowColorListDialog	src/Dialogs/ColorListDialog.cpp	/^ShowColorListDialog(RGB8Color &color)$/;"	f
ShowDeviceList	src/Dialogs/Device/DeviceListDialog.cpp	/^ShowDeviceList()$/;"	f
ShowDialog	src/InfoBoxes/InfoBoxWindow.cpp	/^InfoBoxWindow::ShowDialog()$/;"	f	class:InfoBoxWindow
ShowDisplayControls	src/Dialogs/Settings/Panels/AirspaceConfigPanel.cpp	/^AirspaceConfigPanel::ShowDisplayControls(AirspaceDisplayMode mode)$/;"	f	class:AirspaceConfigPanel
ShowFAITriangleAreas	src/Profile/ProfileKeys.cpp	/^const char ShowFAITriangleAreas[] = "ShowFAITriangleAreas";$/;"	m	namespace:ProfileKeys	file:
ShowFAITriangleControls	src/Dialogs/Settings/Panels/ScoringConfigPanel.cpp	/^ScoringConfigPanel::ShowFAITriangleControls(bool show)$/;"	f	class:ScoringConfigPanel
ShowFileManager	src/Dialogs/FileManager.cpp	/^ShowFileManager()$/;"	f
ShowFileManager2	src/Dialogs/FileManager.cpp	/^ShowFileManager2()$/;"	f	file:
ShowFlightList	src/Logger/ExternalLogger.cpp	/^ShowFlightList(const RecordedFlightList &flight_list)$/;"	f	file:
ShowHorizon	src/UIActions.cpp	/^UIActions::ShowHorizon()$/;"	f	class:UIActions
ShowInfoBoxPicker	src/InfoBoxes/InfoBoxManager.cpp	/^InfoBoxManager::ShowInfoBoxPicker(const int i)$/;"	f	class:InfoBoxManager
ShowLockBox	src/Dialogs/LockScreen.cpp	/^ShowLockBox()$/;"	f
ShowMap	src/PageActions.cpp	/^PageActions::ShowMap()$/;"	f	class:PageActions
ShowMapItemDialog	src/Dialogs/MapItemListDialog.cpp	/^ShowMapItemDialog(const MapItem &item,$/;"	f	file:
ShowMapItemListDialog	src/Dialogs/MapItemListDialog.cpp	/^ShowMapItemListDialog(const MapItemList &list,$/;"	f
ShowMapItemListDialog	src/Dialogs/MapItemListDialog.cpp	/^ShowMapItemListDialog(const MapItemList &list,$/;"	f	file:
ShowMapItemListSettingsDialog	src/Dialogs/MapItemListSettingsDialog.cpp	/^ShowMapItemListSettingsDialog()$/;"	f
ShowMapItems	src/MapWindow/GlueMapWindowItems.cpp	/^GlueMapWindow::ShowMapItems(const GeoPoint &location,$/;"	f	class:GlueMapWindow
ShowMenu	src/Input/InputEvents.cpp	/^InputEvents::ShowMenu()$/;"	f	class:InputEvents
ShowMenuButton	src/Dialogs/Settings/Panels/LayoutConfigPanel.cpp	/^  ShowMenuButton,$/;"	e	enum:ControlIndex	file:
ShowMenuButton	src/Menu/ShowMenuButton.hpp	/^class ShowMenuButton : public Button {$/;"	c
ShowMenuButton	src/Profile/ProfileKeys.cpp	/^const char ShowMenuButton[] = "ShowMenuButton";$/;"	m	namespace:ProfileKeys	file:
ShowMenuButtonRenderer	src/Menu/ShowMenuButton.cpp	/^class ShowMenuButtonRenderer : public ButtonRenderer {$/;"	c	file:
ShowMessageBox	src/Dialogs/Message.cpp	/^ShowMessageBox(const TCHAR *text, const TCHAR *caption, unsigned flags)$/;"	f
ShowModal	src/Dialogs/WidgetDialog.cpp	/^WidgetDialog::ShowModal()$/;"	f	class:WidgetDialog
ShowModal	src/Form/Form.cpp	/^WndForm::ShowModal()$/;"	f	class:WndForm
ShowNetworkDialog	src/Kobo/NetworkDialog.cpp	/^ShowNetworkDialog()$/;"	f
ShowNextPage	src/Form/GridView.cpp	/^GridView::ShowNextPage(Direction direction)$/;"	f	class:GridView
ShowNextWaypointDetails	src/InfoBoxes/Content/Task.cpp	/^ShowNextWaypointDetails()$/;"	f	file:
ShowOnlyMap	src/PageActions.cpp	/^PageActions::ShowOnlyMap()$/;"	f	class:PageActions
ShowParseWarning	src/Airspace/AirspaceParser.cpp	/^ShowParseWarning(int line, const TCHAR *str, OperationEnvironment &operation)$/;"	f	file:
ShowPortMonitor	src/Dialogs/Device/PortMonitor.cpp	/^ShowPortMonitor(DeviceDescriptor &device)$/;"	f
ShowReachControls	src/Dialogs/Settings/Panels/RouteConfigPanel.cpp	/^RouteConfigPanel::ShowReachControls(bool show)$/;"	f	class:RouteConfigPanel
ShowReplayDialog	src/Dialogs/ReplayDialog.cpp	/^ShowReplayDialog()$/;"	f
ShowRouteControls	src/Dialogs/Settings/Panels/RouteConfigPanel.cpp	/^RouteConfigPanel::ShowRouteControls(bool show)$/;"	f	class:RouteConfigPanel
ShowSystemDialog	src/Kobo/SystemDialog.cpp	/^ShowSystemDialog()$/;"	f
ShowTaskView	src/Dialogs/Task/Manager/TaskManagerDialog.cpp	/^TaskManagerDialog::ShowTaskView(const OrderedTask *_task)$/;"	f	class:TaskManagerDialog
ShowTeamCodeDialog	src/InfoBoxes/Content/Team.cpp	/^ShowTeamCodeDialog()$/;"	f	file:
ShowTerrainControls	src/Dialogs/Settings/Panels/TerrainDisplayConfigPanel.cpp	/^TerrainDisplayConfigPanel::ShowTerrainControls()$/;"	f	class:TerrainDisplayConfigPanel
ShowThermalAssistant	src/PageActions.cpp	/^PageActions::ShowThermalAssistant()$/;"	f	class:PageActions
ShowThermalAssistant	src/UIActions.cpp	/^UIActions::ShowThermalAssistant()$/;"	f	class:UIActions
ShowToolsDialog	src/Kobo/ToolsDialog.cpp	/^ShowToolsDialog()$/;"	f
ShowTrafficRadar	src/PageActions.cpp	/^PageActions::ShowTrafficRadar()$/;"	f	class:PageActions
ShowTrafficRadar	src/UIActions.cpp	/^UIActions::ShowTrafficRadar()$/;"	f	class:UIActions
ShowTrailControls	src/Dialogs/Settings/Panels/SymbolsConfigPanel.cpp	/^SymbolsConfigPanel::ShowTrailControls(bool show)$/;"	f	class:SymbolsConfigPanel
ShowWarningControls	src/Dialogs/Settings/Panels/AirspaceConfigPanel.cpp	/^AirspaceConfigPanel::ShowWarningControls(bool visible)$/;"	f	class:AirspaceConfigPanel
ShowWaypointListDialog	src/Dialogs/Waypoint/WaypointList.cpp	/^ShowWaypointListDialog(const GeoPoint &_location,$/;"	f
ShowWeatherDialog	src/Dialogs/Weather/WeatherDialog.cpp	/^ShowWeatherDialog(const TCHAR *page)$/;"	f
ShowWifiDialog	src/Kobo/WifiDialog.cpp	/^ShowWifiDialog()$/;"	f
ShowWindSettingsDialog	src/Dialogs/Settings/WindSettingsDialog.cpp	/^ShowWindSettingsDialog()$/;"	f
Shutdown	src/Logger/NMEALogger.cpp	/^NMEALogger::Shutdown()$/;"	f	class:NMEALogger
Shutdown	src/Startup.cpp	/^Shutdown()$/;"	f
SiblingPath	src/Kobo/System.cpp	/^SiblingPath(const char *name, char *buffer, size_t size)$/;"	f	file:
SiblingsHook	src/ui/window/Window.hpp	/^  typedef boost::intrusive::list_member_hook<boost::intrusive::link_mode<boost::intrusive::normal_link>> SiblingsHook;$/;"	t	class:Window
SideInfoType	src/Gauge/FlarmTrafficWindow.hpp	/^  enum SideInfoType {$/;"	g	class:FlarmTrafficWindow
Sign	src/Geo/ConvexHull/GrahamScan.cpp	/^Sign(double value, double tolerance)$/;"	f	file:
Sign	src/IGC/IGCWriter.cpp	/^IGCWriter::Sign()$/;"	f	class:IGCWriter
Signal	src/thread/Trigger.hpp	/^  void Signal() {$/;"	f	class:Trigger
SignalFD	src/system/SignalFD.hxx	/^class SignalFD {$/;"	c
SignalMonitor	src/event/SignalMonitor.cxx	/^	explicit SignalMonitor(EventLoop &_loop)$/;"	f	class:final
SignalMonitorInit	src/event/SignalMonitor.cxx	/^SignalMonitorInit(EventLoop &loop)$/;"	f
SignalMonitorInit	src/event/SignalMonitor.hxx	/^SignalMonitorInit(EventLoop &)$/;"	f
SignalMonitorRegister	src/event/SignalMonitor.cxx	/^SignalMonitorRegister(int signo, SignalHandler handler)$/;"	f
SignalShutdown	src/UIActions.cpp	/^UIActions::SignalShutdown(bool force)$/;"	f	class:UIActions
Signature	src/Device/Driver/IMI/Protocol/Types.hpp	/^  struct Signature$/;"	s	namespace:IMI
SignedRasterLocation	src/Terrain/RasterLocation.hpp	/^  constexpr SignedRasterLocation(RasterLocation other)$/;"	f	struct:SignedRasterLocation
SignedRasterLocation	src/Terrain/RasterLocation.hpp	/^struct SignedRasterLocation : Point2D<int> {$/;"	s
Simple	src/Engine/Airspace/AirspaceAircraftPerformance.hpp	/^  struct Simple {};$/;"	s	class:AirspaceAircraftPerformance
SimpleHandler	src/event/net/cares/SimpleResolver.hxx	/^class SimpleHandler {$/;"	c	namespace:Cares
Simulator	src/Device/Simulator.hpp	/^class Simulator {$/;"	c
SimulatorPromptResult	src/Dialogs/dlgSimulatorPrompt.hpp	/^enum SimulatorPromptResult {$/;"	g
SimulatorPromptWindow	src/Dialogs/SimulatorPromptWindow.hpp	/^  SimulatorPromptWindow(const DialogLook &_look,$/;"	f	class:final
SinCos	src/Math/Angle.hpp	/^  std::pair<double, double> SinCos() const {$/;"	f	class:Angle
SinceInMinutes	src/Dialogs/Traffic/TrafficList.cpp	/^SinceInMinutes(double now_s, uint32_t past_ms)$/;"	f	file:
SinceInMinutes	src/Renderer/MapItemListRenderer.cpp	/^SinceInMinutes(double now_s, uint32_t past_ms)$/;"	f	file:
SingleWindow	src/ui/window/SingleWindow.hpp	/^class SingleWindow : public TopWindow {$/;"	c	namespace:UI
SinkRate	src/Engine/GlideSolvers/GlidePolar.cpp	/^GlidePolar::SinkRate(const double V) const$/;"	f	class:GlidePolar
SinkRate	src/Engine/GlideSolvers/GlidePolar.cpp	/^GlidePolar::SinkRate(const double V, const double n) const$/;"	f	class:GlidePolar
SinkTone	src/Dialogs/Device/CAI302/UnitsEditor.hpp	/^    SinkTone,$/;"	e	enum:final::Controls
SiteConfigPanel	src/Dialogs/Settings/Panels/SiteConfigPanel.cpp	/^  SiteConfigPanel()$/;"	f	class:final
Size	src/Device/Declaration.hpp	/^  unsigned Size() const {$/;"	f	struct:Declaration
Size	src/Task/TaskStore.hpp	/^  size_t Size() const {$/;"	f	class:TaskStore
Skip	src/io/CSVLine.cpp	/^CSVLine::Skip()$/;"	f	class:CSVLine
Skip	src/io/CSVLine.hpp	/^  void Skip(unsigned n) {$/;"	f	class:CSVLine
Skip	src/io/FileReader.cxx	/^FileReader::Skip(off_t offset)$/;"	f	class:FileReader
Skip	src/system/Args.hpp	/^  void Skip() {$/;"	f	class:Args
Skip	src/util/StringParser.hxx	/^	void Skip(size_t n=1) {$/;"	f	class:StringParser
SkipMarkerSegment	src/Terrain/Loader.cpp	/^TerrainLoader::SkipMarkerSegment(long file_offset) const$/;"	f	class:TerrainLoader
SkipMatch	src/util/StringParser.hxx	/^	bool SkipMatch(const_pointer value, size_t size) {$/;"	f	class:StringParser
SkipMatch	src/util/StringParser.hxx	/^	bool SkipMatch(value_type value) {$/;"	f	class:StringParser
SkipMatchIgnoreCase	src/util/StringParser.hxx	/^	bool SkipMatchIgnoreCase(const_pointer value, size_t size) {$/;"	f	class:StringParser
SkipWhitespace	src/util/StringParser.hxx	/^	bool SkipWhitespace() {$/;"	f	class:StringParser
SkipWord	src/util/StringParser.hxx	/^	bool SkipWord() {$/;"	f	class:StringParser
SkyLinesNearTrafficEnabled	src/Profile/ProfileKeys.cpp	/^const char SkyLinesNearTrafficEnabled[] = "SkyLinesNearTrafficEnabled";$/;"	m	namespace:ProfileKeys	file:
SkyLinesRoaming	src/Profile/ProfileKeys.cpp	/^const char SkyLinesRoaming[] = "SkyLinesRoaming";$/;"	m	namespace:ProfileKeys	file:
SkyLinesTracking	src/Cloud/Thermal.hpp	/^namespace SkyLinesTracking { struct Thermal; }$/;"	n
SkyLinesTracking	src/MapWindow/MapWindow.hpp	/^namespace SkyLinesTracking {$/;"	n
SkyLinesTracking	src/Renderer/WaveRenderer.hpp	/^namespace SkyLinesTracking {$/;"	n
SkyLinesTracking	src/Tracking/SkyLines/Assemble.hpp	/^namespace SkyLinesTracking {$/;"	n
SkyLinesTracking	src/Tracking/SkyLines/Client.hpp	/^namespace SkyLinesTracking {$/;"	n
SkyLinesTracking	src/Tracking/SkyLines/CloudSettings.hpp	/^namespace SkyLinesTracking {$/;"	n
SkyLinesTracking	src/Tracking/SkyLines/Data.hpp	/^namespace SkyLinesTracking {$/;"	n
SkyLinesTracking	src/Tracking/SkyLines/Export.hpp	/^namespace SkyLinesTracking {$/;"	n
SkyLinesTracking	src/Tracking/SkyLines/Glue.hpp	/^namespace SkyLinesTracking {$/;"	n
SkyLinesTracking	src/Tracking/SkyLines/Handler.hpp	/^namespace SkyLinesTracking {$/;"	n
SkyLinesTracking	src/Tracking/SkyLines/Import.hpp	/^namespace SkyLinesTracking {$/;"	n
SkyLinesTracking	src/Tracking/SkyLines/Key.hpp	/^namespace SkyLinesTracking {$/;"	n
SkyLinesTracking	src/Tracking/SkyLines/Protocol.hpp	/^namespace SkyLinesTracking {$/;"	n
SkyLinesTracking	src/Tracking/SkyLines/Queue.hpp	/^namespace SkyLinesTracking {$/;"	n
SkyLinesTracking	src/Tracking/SkyLines/Server.cpp	/^namespace SkyLinesTracking {$/;"	n	file:
SkyLinesTracking	src/Tracking/SkyLines/Server.hpp	/^namespace SkyLinesTracking {$/;"	n
SkyLinesTracking	src/Tracking/SkyLines/Settings.hpp	/^namespace SkyLinesTracking {$/;"	n
SkyLinesTrackingEnabled	src/Profile/ProfileKeys.cpp	/^const char SkyLinesTrackingEnabled[] = "SkyLinesTrackingEnabled";$/;"	m	namespace:ProfileKeys	file:
SkyLinesTrackingInterval	src/Profile/ProfileKeys.cpp	/^const char SkyLinesTrackingInterval[] = "SkyLinesTrackingInterval";$/;"	m	namespace:ProfileKeys	file:
SkyLinesTrackingKey	src/Profile/ProfileKeys.cpp	/^const char SkyLinesTrackingKey[] = "SkyLinesTrackingKey";$/;"	m	namespace:ProfileKeys	file:
SkyLinesTrafficEnabled	src/Profile/ProfileKeys.cpp	/^const char SkyLinesTrafficEnabled[] = "SkyLinesTrafficEnabled";$/;"	m	namespace:ProfileKeys	file:
SkyLinesTrafficMapItem	src/MapWindow/Items/MapItem.hpp	/^  SkyLinesTrafficMapItem(uint32_t _id, uint32_t _time_of_day_ms,$/;"	f	struct:SkyLinesTrafficMapItem
SkyLinesTrafficMapItem	src/MapWindow/Items/MapItem.hpp	/^struct SkyLinesTrafficMapItem : public MapItem$/;"	s
SkyLinesTrafficMapMode	src/Profile/ProfileKeys.cpp	/^const char SkyLinesTrafficMapMode[] = "SkyLinesTrafficMapMode";$/;"	m	namespace:ProfileKeys	file:
Sleep	src/system/Sleep.h	/^Sleep(unsigned ms)$/;"	f
SliceAllocator	src/util/SliceAllocator.hxx	/^	SliceAllocator():head(nullptr) {}$/;"	f	class:SliceAllocator
SliceAllocator	src/util/SliceAllocator.hxx	/^	SliceAllocator(const SliceAllocator &):head(nullptr) {}$/;"	f	class:SliceAllocator
SliceAllocator	src/util/SliceAllocator.hxx	/^class SliceAllocator {$/;"	c
SlopeShading	src/Profile/ProfileKeys.cpp	/^const char SlopeShading[] = "SlopeShading";$/;"	m	namespace:ProfileKeys	file:
SlopeShading	src/Terrain/TerrainSettings.hpp	/^enum class SlopeShading: uint8_t {$/;"	c
SlopeShadingType	src/Profile/ProfileKeys.cpp	/^const char SlopeShadingType[] = "SlopeShadingType";$/;"	m	namespace:ProfileKeys	file:
Slot	src/Math/XYDataStore.hpp	/^  struct Slot {$/;"	s	class:XYDataStore
SlotAltitude	src/Computer/Wind/Store.cpp	/^WindStore::SlotAltitude(const MoreData &info, DerivedInfo &derived)$/;"	f	class:WindStore
SlotMeasurement	src/Computer/Wind/Store.cpp	/^WindStore::SlotMeasurement(const MoreData &info,$/;"	f	class:WindStore
SmallTrafficWindow	src/Gauge/GaugeFLARM.cpp	/^class SmallTrafficWindow : public FlarmTrafficWindow {$/;"	c	file:
SmartTaskAdvance	src/Engine/Task/Ordered/SmartTaskAdvance.cpp	/^SmartTaskAdvance::SmartTaskAdvance()$/;"	f	class:SmartTaskAdvance
Smax	src/Engine/GlideSolvers/GlidePolar.hpp	/^  double Smax;$/;"	m	class:GlidePolar
Smin	src/Engine/GlideSolvers/GlidePolar.hpp	/^  double Smin;$/;"	m	class:GlidePolar
SnailTrail	src/Profile/ProfileKeys.cpp	/^const char SnailTrail[] = "SnailTrail";$/;"	m	namespace:ProfileKeys	file:
SnailType	src/Profile/ProfileKeys.cpp	/^const char SnailType[] = "SnailType";$/;"	m	namespace:ProfileKeys	file:
SnailWidthScale	src/Profile/ProfileKeys.cpp	/^const char SnailWidthScale[] = "SnailWidthScale";$/;"	m	namespace:ProfileKeys	file:
Socket	src/event/net/cares/Channel.cxx	/^class Channel::Socket {$/;"	c	class:Cares::Channel	file:
SocketAddress	src/net/SocketAddress.hxx	/^class SocketAddress {$/;"	c
SocketDescriptor	src/net/SocketDescriptor.hxx	/^class SocketDescriptor : protected FileDescriptor {$/;"	c
SocketDescriptor	src/net/UniqueSocketDescriptor.hxx	/^		:SocketDescriptor(_fd) {}$/;"	f	class:UniqueSocketDescriptor
SocketErrorMessage	src/net/SocketError.hxx	/^class SocketErrorMessage {$/;"	c
SocketSet	src/event/WinSelectBackend.hxx	/^class SocketSet$/;"	c
SolidContainerWindow	src/ui/window/SolidContainerWindow.hpp	/^class SolidContainerWindow : public ContainerWindow {$/;"	c
SolidWidget	src/Widget/SolidWidget.hpp	/^class SolidWidget : public WindowWidget {$/;"	c
SolutionExists	src/Engine/Airspace/AirspaceAircraftPerformance.cpp	/^AirspaceAircraftPerformance::SolutionExists(double distance_max,$/;"	f	class:AirspaceAircraftPerformance
SolutionGeneral	src/Engine/Airspace/AirspaceAircraftPerformance.cpp	/^AirspaceAircraftPerformance::SolutionGeneral(double distance, double dh) const$/;"	f	class:AirspaceAircraftPerformance
SolutionHorizontal	src/Engine/Airspace/AirspaceAircraftPerformance.cpp	/^AirspaceAircraftPerformance::SolutionHorizontal(double distance_min,$/;"	f	class:AirspaceAircraftPerformance
SolutionVertical	src/Engine/Airspace/AirspaceAircraftPerformance.cpp	/^AirspaceAircraftPerformance::SolutionVertical(double distance, double altitude,$/;"	f	class:AirspaceAircraftPerformance
Solve	src/Computer/ContestComputer.cpp	/^ContestComputer::Solve(const ContestSettings &settings,$/;"	f	class:ContestComputer
Solve	src/Engine/GlideSolvers/GlideState.cpp	/^  double Solve() const {$/;"	f	class:AverageSpeedSolver
Solve	src/Engine/GlideSolvers/MacCready.cpp	/^MacCready::Solve(const GlideSettings &settings, const GlidePolar &glide_polar,$/;"	f	class:MacCready
Solve	src/Engine/GlideSolvers/MacCready.cpp	/^MacCready::Solve(const GlideState &task) const$/;"	f	class:MacCready
Solve	src/Engine/Route/ReachFan.cpp	/^ReachFan::Solve(const AGeoPoint origin, const RoutePolars &rpolars,$/;"	f	class:ReachFan
Solve	src/Engine/Route/RoutePlanner.cpp	/^RoutePlanner::Solve(const AGeoPoint &origin, const AGeoPoint &destination,$/;"	f	class:RoutePlanner
Solve	src/Task/RoutePlannerGlue.cpp	/^RoutePlannerGlue::Solve(const AGeoPoint &origin,$/;"	f	class:RoutePlannerGlue
SolveCruise	src/Engine/GlideSolvers/MacCready.cpp	/^MacCready::SolveCruise(const GlideState &task) const$/;"	f	class:MacCready
SolveExhaustive	src/Computer/ContestComputer.cpp	/^ContestComputer::SolveExhaustive(const ContestSettings &settings,$/;"	f	class:ContestComputer
SolveExhaustive	src/Engine/Contest/ContestManager.hpp	/^  bool SolveExhaustive() {$/;"	f	class:ContestManager
SolveExhaustive	src/Engine/Contest/ContestManager.hpp	/^  bool SolveExhaustive(unsigned max_iterations, unsigned max_tree_size) {$/;"	f	class:ContestManager
SolveGlide	src/Engine/GlideSolvers/MacCready.cpp	/^MacCready::SolveGlide(const GlideState &task, const double v_set,$/;"	f	class:MacCready
SolvePoint	src/Engine/Task/Solvers/TaskMacCreadyRemaining.cpp	/^TaskMacCreadyRemaining::SolvePoint(const TaskPoint &tp,$/;"	f	class:TaskMacCreadyRemaining
SolvePoint	src/Engine/Task/Solvers/TaskMacCreadyTotal.cpp	/^TaskMacCreadyTotal::SolvePoint(const TaskPoint &tp,$/;"	f	class:TaskMacCreadyTotal
SolvePoint	src/Engine/Task/Solvers/TaskMacCreadyTravelled.cpp	/^TaskMacCreadyTravelled::SolvePoint(const TaskPoint &tp,$/;"	f	class:TaskMacCreadyTravelled
SolveReach	src/Task/ProtectedRoutePlanner.cpp	/^ProtectedRoutePlanner::SolveReach(const AGeoPoint &origin,$/;"	f	class:ProtectedRoutePlanner
SolveReach	src/Task/RoutePlannerGlue.cpp	/^RoutePlannerGlue::SolveReach(const AGeoPoint &origin,$/;"	f	class:RoutePlannerGlue
SolveReachTerrain	src/Engine/Route/RoutePlanner.cpp	/^RoutePlanner::SolveReachTerrain(const AGeoPoint &origin,$/;"	f	class:RoutePlanner
SolveReachWorking	src/Engine/Route/RoutePlanner.cpp	/^RoutePlanner::SolveReachWorking(const AGeoPoint &origin,$/;"	f	class:RoutePlanner
SolveRoute	src/Task/ProtectedRoutePlanner.cpp	/^ProtectedRoutePlanner::SolveRoute(const AGeoPoint &dest,$/;"	f	class:ProtectedRoutePlanner
SolveSink	src/Engine/GlideSolvers/MacCready.cpp	/^MacCready::SolveSink(const GlideSettings &settings,$/;"	f	class:MacCready
SolveSink	src/Engine/GlideSolvers/MacCready.cpp	/^MacCready::SolveSink(const GlideState &task, const double sink_rate) const$/;"	f	class:MacCready
SolveStraight	src/Engine/GlideSolvers/MacCready.cpp	/^MacCready::SolveStraight(const GlideState &task) const$/;"	f	class:MacCready
SolveTask	src/Engine/Route/RoutePolar.cpp	/^RoutePolar::SolveTask(const GlideSettings &settings,$/;"	f	class:RoutePolar
SolveVertical	src/Engine/GlideSolvers/MacCready.cpp	/^MacCready::SolveVertical(const GlideState &task) const$/;"	f	class:MacCready
SolverResult	src/Engine/PathSolvers/SolverResult.hpp	/^enum class SolverResult {$/;"	c
SoonestAirspace	src/Engine/Airspace/SoonestAirspace.cpp	/^  SoonestAirspace(const AbstractAirspace &_airspace,$/;"	f	struct:SoonestAirspace
SoonestAirspace	src/Engine/Airspace/SoonestAirspace.cpp	/^struct SoonestAirspace {$/;"	s	file:
Sort	src/Form/DataField/ComboList.cpp	/^ComboList::Sort()$/;"	f	class:ComboList
Sort	src/Form/DataField/Enum.cpp	/^DataFieldEnum::Sort(unsigned startindex)$/;"	f	class:DataFieldEnum
Sort	src/Form/DataField/File.cpp	/^FileDataField::Sort()$/;"	f	class:FileDataField
Sort	src/Geo/Flat/FlatGeoPoint.hpp	/^  bool Sort(const AFlatGeoPoint &sp) const {$/;"	f	struct:AFlatGeoPoint
Sort	src/Geo/Flat/FlatGeoPoint.hpp	/^  bool Sort(const FlatGeoPoint& sp) const {$/;"	f	struct:FlatGeoPoint
Sort	src/Geo/GeoPoint.cpp	/^GeoPoint::Sort(const GeoPoint &sp) const$/;"	f	class:GeoPoint
Sort	src/Geo/SearchPoint.hpp	/^  bool Sort(const SearchPoint &other) const {$/;"	f	class:SearchPoint
Sort	src/MapWindow/Items/List.cpp	/^MapItemList::Sort()$/;"	f	class:MapItemList
Sort	src/Renderer/AirspaceLabelList.cpp	/^AirspaceLabelList::Sort(const AirspaceWarningConfig &config)$/;"	f	class:AirspaceLabelList
Sort	src/Renderer/WaypointLabelList.cpp	/^WaypointLabelList::Sort()$/;"	f	class:WaypointLabelList
SortByDistance	src/Engine/Airspace/AirspaceSorter.cpp	/^SortByDistance(AirspaceSelectInfoVector &vec, const GeoPoint &location,$/;"	f	file:
SortByDistance	src/Waypoint/WaypointList.cpp	/^void WaypointList::SortByDistance(const GeoPoint &location) {$/;"	f	class:WaypointList
SortByName	src/Engine/Airspace/AirspaceSorter.cpp	/^SortByName(AirspaceSelectInfoVector &vec)$/;"	f	file:
SortHighest	src/Engine/Airspace/AirspaceAltitude.hpp	/^  static bool SortHighest(const AirspaceAltitude &a, const AirspaceAltitude &b) {$/;"	f	struct:AirspaceAltitude
SoundAudioVario	src/Profile/ProfileKeys.cpp	/^const char SoundAudioVario[] = "AudioVario2";$/;"	m	namespace:ProfileKeys	file:
SoundDeadband	src/Profile/ProfileKeys.cpp	/^const char SoundDeadband[] = "SoundDeadband";$/;"	m	namespace:ProfileKeys	file:
SoundModes	src/Profile/ProfileKeys.cpp	/^const char SoundModes[] = "SoundModes";$/;"	m	namespace:ProfileKeys	file:
SoundSettings	src/Audio/Settings.hpp	/^struct SoundSettings {$/;"	s
SoundTask	src/Profile/ProfileKeys.cpp	/^const char SoundTask[] = "SoundTask";$/;"	m	namespace:ProfileKeys	file:
SoundUtil	src/Android/SoundUtil.cpp	/^namespace SoundUtil {$/;"	n	file:
SoundUtil	src/Android/SoundUtil.hpp	/^namespace SoundUtil {$/;"	n
SoundVolume	src/Profile/ProfileKeys.cpp	/^const char SoundVolume[] = "SoundVolume";$/;"	m	namespace:ProfileKeys	file:
SourcePixelTraits	src/ui/canvas/memory/PixelOperations.hpp	/^  typedef PixelTraits SourcePixelTraits;$/;"	t	struct:ConditionalWritePixel
SourcePixelTraits	src/ui/canvas/memory/PixelOperations.hpp	/^  typedef PixelTraits SourcePixelTraits;$/;"	t	struct:PixelIntegerAdapter
SourcePixelTraits	src/ui/canvas/memory/PixelOperations.hpp	/^  typedef PixelTraits SourcePixelTraits;$/;"	t	struct:PixelPerChannelAdapter
SourcePixelTraits	src/ui/canvas/memory/PixelOperations.hpp	/^  typedef SPT SourcePixelTraits;$/;"	t	struct:PixelColoredAlpha
SourcePixelTraits	src/ui/canvas/memory/PixelOperations.hpp	/^  typedef SPT SourcePixelTraits;$/;"	t	struct:PixelOpaqueAlpha
SourcePixelTraits	src/ui/canvas/memory/PixelOperations.hpp	/^  typedef SPT SourcePixelTraits;$/;"	t	struct:PixelOpaqueText
SourcePixelTraits	src/ui/canvas/memory/PixelOperations.hpp	/^  typedef typename Operation::SourcePixelTraits SourcePixelTraits;$/;"	t	struct:BinaryWritePixel
SourcePixelTraits	src/ui/canvas/memory/PixelOperations.hpp	/^  typedef typename Operation::SourcePixelTraits SourcePixelTraits;$/;"	t	struct:UnaryWritePixel
SourcePixelTraits	src/ui/canvas/memory/PixelOperations.hpp	/^  typedef typename WritePixelOperation::SourcePixelTraits SourcePixelTraits;$/;"	t	struct:PerPixelOperations
Speed	src/Dialogs/Settings/WindSettingsPanel.hpp	/^    Speed,$/;"	e	enum:final::ControlIndex
SpeedState	src/Engine/Navigation/Aircraft.hpp	/^struct SpeedState $/;"	s
SpeedToFly	src/Engine/GlideSolvers/GlidePolar.cpp	/^GlidePolar::SpeedToFly(const AircraftState &state,$/;"	f	class:GlidePolar
SpeedToFly	src/Engine/GlideSolvers/GlidePolar.cpp	/^GlidePolar::SpeedToFly(const double stf_sink_rate, const double head_wind) const$/;"	f	class:GlidePolar
SpeedUnit	src/Dialogs/Device/CAI302/UnitsEditor.hpp	/^    SpeedUnit,$/;"	e	enum:final::Controls
SpeedUnitsValue	src/Profile/ProfileKeys.cpp	/^const char SpeedUnitsValue[] = "SpeedUnit";$/;"	m	namespace:ProfileKeys	file:
SpeedUp	src/Form/DataField/Float.cpp	/^DataFieldFloat::SpeedUp(bool keyup)$/;"	f	class:DataFieldFloat
SpeedUp	src/Form/DataField/Integer.cpp	/^DataFieldInteger::SpeedUp(bool keyup)$/;"	f	class:DataFieldInteger
SpeedUp	src/Form/DataField/Time.cpp	/^DataFieldTime::SpeedUp(bool key_up)$/;"	f	class:DataFieldTime
SpeedVector	src/Geo/SpeedVector.hpp	/^  SpeedVector(Angle _bearing, double _norm):bearing(_bearing), norm(_norm) {}$/;"	f	struct:SpeedVector
SpeedVector	src/Geo/SpeedVector.hpp	/^  SpeedVector(double x, double y)$/;"	f	struct:SpeedVector
SpeedVector	src/Geo/SpeedVector.hpp	/^struct SpeedVector {$/;"	s
Split	src/util/RadixTree.hpp	/^    void Split(size_t length) {$/;"	f	struct:RadixTree::Node
SplitB2Fix	src/Device/Driver/IMI/Protocol/IGC.cpp	/^SplitB2Fix(const IMI::FixB2 *fixB2, const IMI::FixB *fixFull,$/;"	f	file:
SplitRow	src/Dialogs/Task/TargetDialog.cpp	/^SplitRow(PixelRect &left)$/;"	f	file:
SquareDistanceTo	src/Geo/Flat/FlatBoundingBox.cpp	/^FlatBoundingBox::SquareDistanceTo(FlatGeoPoint p) const$/;"	f	class:FlatBoundingBox
SquareDistanceTo	src/Math/Line2D.hpp	/^  constexpr product_type SquareDistanceTo(Point p) const {$/;"	f	struct:Line2D
StackIndex	src/lua/Util.hxx	/^struct StackIndex {$/;"	s	namespace:Lua
Standard	src/Atmosphere/Pressure.hpp	/^  AtmosphericPressure Standard() {$/;"	f	class:AtmosphericPressure
StandbyThread	src/thread/StandbyThread.cpp	/^StandbyThread::StandbyThread(const char *_name)$/;"	f	class:StandbyThread
StandbyThread	src/thread/StandbyThread.hpp	/^class StandbyThread : private Thread {$/;"	c
Start	src/Audio/ALSAPCMPlayer.cpp	/^ALSAPCMPlayer::Start(PCMDataSource &_source)$/;"	f	class:ALSAPCMPlayer
Start	src/Audio/AndroidPCMPlayer.cpp	/^AndroidPCMPlayer::Start(PCMSynthesiser &_source)$/;"	f	class:AndroidPCMPlayer
Start	src/Audio/MixerPCMPlayer.cpp	/^MixerPCMPlayer::Start(PCMDataSource &_source)$/;"	f	class:MixerPCMPlayer
Start	src/Audio/PCMMixer.cpp	/^PCMMixer::Start(PCMDataSource &source)$/;"	f	class:PCMMixer
Start	src/Audio/SDLPCMPlayer.cpp	/^SDLPCMPlayer::Start(PCMDataSource &_source)$/;"	f	class:SDLPCMPlayer
Start	src/CalculationThread.hpp	/^  bool Start(bool suspended=false) {$/;"	f	class:final
Start	src/Device/Driver/LX/LXN.hpp	/^  struct Start {$/;"	s	namespace:LXN
Start	src/Engine/ThermalBand/ThermalEncounterBand.cpp	/^ThermalEncounterBand::Start(const double time,$/;"	f	class:ThermalEncounterBand
Start	src/Job/Async.cpp	/^AsyncJobRunner::Start(Job *_job, OperationEnvironment &_env,$/;"	f	class:AsyncJobRunner
Start	src/Job/Thread.cpp	/^JobThread::Start()$/;"	f	class:JobThread
Start	src/Logger/NMEALogger.cpp	/^NMEALogger::Start()$/;"	f	class:NMEALogger
Start	src/MergeThread.hpp	/^  bool Start(bool suspended=false) {$/;"	f	class:final
Start	src/Replay/AircraftSim.cpp	/^AircraftSim::Start(const GeoPoint& location_start,$/;"	f	class:AircraftSim
Start	src/Replay/DemoReplay.cpp	/^DemoReplay::Start(const TaskAccessor& task, const GeoPoint& default_location)$/;"	f	class:DemoReplay
Start	src/Replay/Replay.cpp	/^Replay::Start(Path _path)$/;"	f	class:Replay
Start	src/Replay/TaskAutoPilot.cpp	/^TaskAutoPilot::Start(const TaskAccessor& task)$/;"	f	class:TaskAutoPilot
Start	src/UIUtil/GestureManager.cpp	/^GestureManager::Start(PixelPoint p, int _threshold)$/;"	f	class:GestureManager
Start	src/UIUtil/TrackingGestureManager.cpp	/^TrackingGestureManager::Start(PixelPoint p, int threshold)$/;"	f	class:TrackingGestureManager
Start	src/io/async/AsioThread.cpp	/^AsioThread::Start()$/;"	f	class:AsioThread
Start	src/net/http/Request.cxx	/^CurlRequest::Start()$/;"	f	class:CurlRequest
Start	src/system/Process.cpp	/^Start(const char *const*argv)$/;"	f
Start	src/system/Process.hpp	/^Start(const char *path, Args... args)$/;"	f
Start	src/thread/RecursivelySuspensibleThread.cpp	/^RecursivelySuspensibleThread::Start(bool suspended)$/;"	f	class:RecursivelySuspensibleThread
Start	src/thread/StoppableThread.hpp	/^  bool Start() {$/;"	f	class:StoppableThread
StartConstraints	src/Engine/Task/Ordered/StartConstraints.hpp	/^struct StartConstraints {$/;"	s
StartDeclaration	src/IGC/IGCWriter.cpp	/^IGCWriter::StartDeclaration(const BrokenDateTime &date_time,$/;"	f	class:IGCWriter
StartFile	src/lua/StartFile.cpp	/^Lua::StartFile(Path path)$/;"	f	class:Lua
StartHeight	src/Dialogs/StatusPanels/RulesStatusPanel.cpp	/^  StartHeight,$/;"	e	enum:Controls	file:
StartHeightRef	src/Dialogs/Settings/Panels/TaskRulesConfigPanel.cpp	/^  StartHeightRef,$/;"	e	enum:ControlIndex	file:
StartHeightRef	src/Profile/ProfileKeys.cpp	/^const char StartHeightRef[] = "StartHeightRef";$/;"	m	namespace:ProfileKeys	file:
StartIndirect	src/net/http/Request.cxx	/^CurlRequest::StartIndirect()$/;"	f	class:CurlRequest
StartLeScan	src/Android/BluetoothHelper.cpp	/^BluetoothHelper::StartLeScan(JNIEnv *env, LeScanCallback &_cb)$/;"	f	class:BluetoothHelper
StartLogger	src/Logger/LoggerImpl.cpp	/^LoggerImpl::StartLogger(const NMEAInfo &gps_info,$/;"	f	class:LoggerImpl
StartLogging	src/Device/Driver/CAI302/Manage.cpp	/^CAI302Device::StartLogging(OperationEnvironment &env)$/;"	f	class:CAI302Device
StartLogging	src/Device/Driver/CAI302/Protocol.cpp	/^CAI302::StartLogging(Port &port, OperationEnvironment &env)$/;"	f	class:CAI302
StartMaxHeight	src/Dialogs/Settings/Panels/TaskRulesConfigPanel.cpp	/^  StartMaxHeight,$/;"	e	enum:ControlIndex	file:
StartMaxHeight	src/Profile/ProfileKeys.cpp	/^const char StartMaxHeight[] = "StartMaxHeight";$/;"	m	namespace:ProfileKeys	file:
StartMaxHeightMargin	src/Dialogs/Settings/Panels/TaskRulesConfigPanel.cpp	/^  StartMaxHeightMargin,$/;"	e	enum:ControlIndex	file:
StartMaxHeightMargin	src/Profile/ProfileKeys.cpp	/^const char StartMaxHeightMargin[] = "StartMaxHeightMargin";$/;"	m	namespace:ProfileKeys	file:
StartMaxSpeed	src/Dialogs/Settings/Panels/TaskRulesConfigPanel.cpp	/^  StartMaxSpeed,$/;"	e	enum:ControlIndex	file:
StartMaxSpeed	src/Profile/ProfileKeys.cpp	/^const char StartMaxSpeed[] = "StartMaxSpeed";$/;"	m	namespace:ProfileKeys	file:
StartMaxSpeedMargin	src/Dialogs/Settings/Panels/TaskRulesConfigPanel.cpp	/^  StartMaxSpeedMargin,$/;"	e	enum:ControlIndex	file:
StartMaxSpeedMargin	src/Profile/ProfileKeys.cpp	/^const char StartMaxSpeedMargin[] = "StartMaxSpeedMargin";$/;"	m	namespace:ProfileKeys	file:
StartPoint	src/Dialogs/StatusPanels/RulesStatusPanel.cpp	/^  StartPoint,$/;"	e	enum:Controls	file:
StartPoint	src/Engine/Task/Ordered/Points/StartPoint.cpp	/^StartPoint::StartPoint(std::unique_ptr<ObservationZonePoint> &&_oz,$/;"	f	class:StartPoint
StartRadius	src/Dialogs/Settings/Panels/TaskDefaultsConfigPanel.cpp	/^  StartRadius,$/;"	e	enum:ControlIndex	file:
StartRadius	src/Profile/ProfileKeys.cpp	/^const char StartRadius[] = "StartRadius";$/;"	m	namespace:ProfileKeys	file:
StartRxThread	src/Device/Port/BufferedPort.cpp	/^BufferedPort::StartRxThread()$/;"	f	class:BufferedPort
StartRxThread	src/Device/Port/DumpPort.cpp	/^DumpPort::StartRxThread()$/;"	f	class:DumpPort
StartRxThread	src/Device/Port/K6BtPort.cpp	/^K6BtPort::StartRxThread(void)$/;"	f	class:K6BtPort
StartRxThread	src/Device/Port/NullPort.cpp	/^NullPort::StartRxThread()$/;"	f	class:NullPort
StartSpeed	src/Dialogs/StatusPanels/RulesStatusPanel.cpp	/^  StartSpeed,$/;"	e	enum:Controls	file:
StartStats	src/Engine/Task/Stats/StartStats.hpp	/^struct StartStats {$/;"	s
StartTask	src/Computer/GlideComputerBlackboard.cpp	/^GlideComputerBlackboard::StartTask()$/;"	f	class:GlideComputerBlackboard
StartTask	src/Computer/LogComputer.cpp	/^LogComputer::StartTask(const NMEAInfo &basic)$/;"	f	class:LogComputer
StartTask	src/Computer/StatsComputer.cpp	/^StatsComputer::StartTask(const NMEAInfo &basic)$/;"	f	class:StatsComputer
StartTask	src/FlightStatistics.cpp	/^FlightStatistics::StartTask()$/;"	f	class:FlightStatistics
StartTile	src/Terrain/Loader.cpp	/^TerrainLoader::StartTile(unsigned index)$/;"	f	class:TerrainLoader
StartTile	src/Terrain/RasterTileCache.hpp	/^  void StartTile(unsigned index) {$/;"	f	class:RasterTileCache
StartTime	src/Dialogs/StatusPanels/RulesStatusPanel.cpp	/^  StartTime,$/;"	e	enum:Controls	file:
StartTracking	src/Tracking/LiveTrack24.cpp	/^LiveTrack24::StartTracking(SessionID session, const TCHAR *username,$/;"	f	class:LiveTrack24
StartType	src/Dialogs/Settings/Panels/TaskDefaultsConfigPanel.cpp	/^  StartType,$/;"	e	enum:ControlIndex	file:
StartType	src/Profile/ProfileKeys.cpp	/^const char StartType[] = "StartType";$/;"	m	namespace:ProfileKeys	file:
StartsWith	src/util/StaticString.hxx	/^	bool StartsWith(const_pointer prefix) const {$/;"	f	class:StaticStringBase
Startup	src/Startup.cpp	/^Startup()$/;"	f
StartupLogFreeRamAndStorage	src/UtilsSystem.cpp	/^StartupLogFreeRamAndStorage()$/;"	f
StartupWidget	src/Dialogs/StartupDialog.cpp	/^  StartupWidget(const DialogLook &look, WndForm &_dialog,$/;"	f	class:final
State	src/Engine/Task/Ordered/TaskAdvance.hpp	/^  enum State {$/;"	g	class:TaskAdvance
State	src/Widget/ManagedWidget.hpp	/^  enum class State : uint8_t {$/;"	c	class:ManagedWidget
State	src/net/http/Request.hxx	/^	enum class State {$/;"	c	class:final
State	src/util/MD5.hpp	/^  struct State {$/;"	s	class:MD5
StateChanged	src/Device/Port/Port.cpp	/^Port::StateChanged()$/;"	f	class:Port
StateClock	src/Computer/StateClock.hpp	/^class StateClock {$/;"	c
StateDeleter	src/lua/Ptr.hpp	/^struct StateDeleter {$/;"	s	namespace:Lua
StateLook	src/Look/ButtonLook.hpp	/^  struct StateLook {$/;"	s	struct:ButtonLook
StateLook	src/Look/CheckBoxLook.hpp	/^  struct StateLook {$/;"	s	struct:CheckBoxLook
StaticArray	src/util/StaticArray.hxx	/^class StaticArray: public TrivialArray<T, max> {$/;"	c
StaticEnumChoice	src/Form/DataField/Enum.hpp	/^struct StaticEnumChoice {$/;"	s
StaticFifoBuffer	src/util/StaticFifoBuffer.hxx	/^class StaticFifoBuffer {$/;"	c
StaticParameter	src/Dialogs/Device/Vega/VegaParametersWidget.hpp	/^  struct StaticParameter {$/;"	s	class:VegaParametersWidget
StaticPressureToPressureAltitude	src/Atmosphere/Pressure.cpp	/^AtmosphericPressure::StaticPressureToPressureAltitude(const AtmosphericPressure ps)$/;"	f	class:AtmosphericPressure
StaticPressureToQNHAltitude	src/Atmosphere/Pressure.cpp	/^AtmosphericPressure::StaticPressureToQNHAltitude(const AtmosphericPressure ps) const$/;"	f	class:AtmosphericPressure
StaticRoute	src/Engine/Route/Route.hpp	/^struct StaticRoute : public TrivialArray<Route::value_type, 64u> {$/;"	s
StaticSocketAddress	src/net/StaticSocketAddress.hxx	/^class StaticSocketAddress {$/;"	c
StaticString	src/util/StaticString.hxx	/^	explicit StaticString(const_pointer value):Base(value) {}$/;"	f	class:StaticString
StaticString	src/util/StaticString.hxx	/^class StaticString: public StaticStringBase<wchar_t, max>$/;"	c
StaticString	src/util/StaticString.hxx	401;"	d
StaticStringBase	src/util/StaticString.hxx	/^	explicit StaticStringBase(const_pointer value) {$/;"	f	class:StaticStringBase
StaticStringBase	src/util/StaticString.hxx	/^class StaticStringBase : public BasicStringBuffer<T, max> {$/;"	c
StationContainer	src/Weather/NOAAStore.hpp	/^  typedef std::list<Item> StationContainer;$/;"	t	class:NOAAStore
Stationary	src/Computer/FlyingComputer.cpp	/^FlyingComputer::Stationary(FlyingState &state, double time, double dt,$/;"	f	class:FlyingComputer
StatsComputer	src/Computer/StatsComputer.hpp	/^class StatsComputer {$/;"	c
StatsValid	src/Engine/Task/TaskManager.hpp	/^  bool StatsValid() const {$/;"	f	class:TaskManager
Status	src/Android/Battery.cpp	/^externalstatus Status = UNKNOWN;$/;"	m	namespace:Power::Power::External	file:
Status	src/Hardware/Battery.cpp	/^    batterystatus Status = UNKNOWN;$/;"	m	namespace:Power::Battery	file:
Status	src/Hardware/Battery.cpp	/^    externalstatus Status = UNKNOWN;$/;"	m	namespace:Power::External	file:
Status	src/Kobo/WPASupplicant.cpp	/^WPASupplicant::Status(WifiStatus &status)$/;"	f	class:WPASupplicant
Status	src/XML/Parser.cpp	/^  enum Status {$/;"	g	namespace:XML	file:
StatusMessage	src/StatusMessage.hpp	/^struct StatusMessage {$/;"	s
StatusPanel	src/Dialogs/StatusPanels/RulesStatusPanel.hpp	/^  explicit RulesStatusPanel(const DialogLook &look) noexcept:StatusPanel(look) {}$/;"	f	class:RulesStatusPanel
StatusPanel	src/Dialogs/StatusPanels/StatusPanel.hpp	/^  StatusPanel(const DialogLook &look):RowFormWidget(look) {}$/;"	f	class:StatusPanel
StatusPanel	src/Dialogs/StatusPanels/StatusPanel.hpp	/^class StatusPanel : public RowFormWidget {$/;"	c
StatusPanel	src/Dialogs/StatusPanels/TaskStatusPanel.hpp	/^    :StatusPanel(look) {}$/;"	f	class:TaskStatusPanel
StatusPanel	src/Dialogs/StatusPanels/TimesStatusPanel.hpp	/^    :StatusPanel(look) {}$/;"	f	class:TimesStatusPanel
StealWidget	src/Dialogs/WidgetDialog.hpp	/^  Widget *StealWidget() {$/;"	f	class:WidgetDialog
StencilMapCanvas	src/MapWindow/StencilMapCanvas.cpp	/^StencilMapCanvas::StencilMapCanvas(Canvas &_buffer, Canvas &_stencil,$/;"	f	class:StencilMapCanvas
StencilMapCanvas	src/MapWindow/StencilMapCanvas.cpp	/^StencilMapCanvas::StencilMapCanvas(const StencilMapCanvas &other)$/;"	f	class:StencilMapCanvas
StencilMapCanvas	src/MapWindow/StencilMapCanvas.hpp	/^class StencilMapCanvas$/;"	c
Step	src/ProgressGlue.cpp	/^ProgressGlue::Step()$/;"	f	class:ProgressGlue
Step	src/ProgressWindow.cpp	/^ProgressWindow::Step()$/;"	f	class:ProgressWindow
Step	src/Screen/ProgressBar.cpp	/^ProgressBar::Step()$/;"	f	class:ProgressBar
Stop	src/Audio/ALSAPCMPlayer.cpp	/^ALSAPCMPlayer::Stop()$/;"	f	class:ALSAPCMPlayer
Stop	src/Audio/AndroidPCMPlayer.cpp	/^AndroidPCMPlayer::Stop()$/;"	f	class:AndroidPCMPlayer
Stop	src/Audio/MixerPCMPlayer.cpp	/^MixerPCMPlayer::Stop()$/;"	f	class:MixerPCMPlayer
Stop	src/Audio/PCMMixer.cpp	/^PCMMixer::Stop(PCMDataSource &source)$/;"	f	class:PCMMixer
Stop	src/Audio/SDLPCMPlayer.cpp	/^SDLPCMPlayer::Stop()$/;"	f	class:SDLPCMPlayer
Stop	src/Replay/Replay.cpp	/^Replay::Stop()$/;"	f	class:Replay
Stop	src/io/async/AsioThread.cpp	/^AsioThread::Stop()$/;"	f	class:AsioThread
Stop	src/thread/StandbyThread.hpp	/^  void Stop() {$/;"	f	class:StandbyThread
StopAllBackground	src/lua/Background.cpp	/^Lua::StopAllBackground()$/;"	f	class:Lua
StopAsync	src/Tracking/TrackingGlue.cpp	/^TrackingGlue::StopAsync()$/;"	f	class:TrackingGlue
StopAsync	src/thread/StandbyThread.cpp	/^StandbyThread::StopAsync()$/;"	f	class:StandbyThread
StopDragging	src/Gauge/BigThermalAssistantWindow.hpp	/^  void StopDragging() {$/;"	f	class:BigThermalAssistantWindow
StopDragging	src/Gauge/BigTrafficWidget.cpp	/^  void StopDragging() {$/;"	f	class:FlarmTrafficControl
StopDragging	src/MainWindow.cpp	/^MainWindow::StopDragging()$/;"	f	class:MainWindow
StopEventHandling	src/Audio/ALSAPCMPlayer.cpp	/^ALSAPCMPlayer::StopEventHandling()$/;"	f	class:ALSAPCMPlayer
StopIndirect	src/net/http/Request.cxx	/^CurlRequest::StopIndirect()$/;"	f	class:CurlRequest
StopLeScan	src/Android/BluetoothHelper.cpp	/^BluetoothHelper::StopLeScan(JNIEnv *env, jobject cb)$/;"	f	class:BluetoothHelper
StopLogger	src/Logger/LoggerImpl.cpp	/^LoggerImpl::StopLogger(const NMEAInfo &gps_info)$/;"	f	class:LoggerImpl
StopLogging	src/Device/Driver/CAI302/Manage.cpp	/^CAI302Device::StopLogging(OperationEnvironment &env)$/;"	f	class:CAI302Device
StopLogging	src/Device/Driver/CAI302/Protocol.cpp	/^CAI302::StopLogging(Port &port, OperationEnvironment &env)$/;"	f	class:CAI302
StopReplay	src/Blackboard/DeviceBlackboard.cpp	/^void DeviceBlackboard::StopReplay() {$/;"	f	class:DeviceBlackboard
StopRxThread	src/Device/Port/BufferedPort.cpp	/^BufferedPort::StopRxThread()$/;"	f	class:BufferedPort
StopRxThread	src/Device/Port/DumpPort.cpp	/^DumpPort::StopRxThread()$/;"	f	class:DumpPort
StopRxThread	src/Device/Port/K6BtPort.cpp	/^K6BtPort::StopRxThread()$/;"	f	class:K6BtPort
StopRxThread	src/Device/Port/NullPort.cpp	/^NullPort::StopRxThread()$/;"	f	class:NullPort
StoppableThread	src/thread/StoppableThread.hpp	/^  StoppableThread(const char *_name):Thread(_name) {}$/;"	f	class:StoppableThread
StoppableThread	src/thread/StoppableThread.hpp	/^class StoppableThread : public Thread {$/;"	c
Storage	src/ui/canvas/opengl/RenderBuffer.hpp	/^  static void Storage(GLenum internalformat,$/;"	f	class:GLRenderBuffer
Store	src/Units/UnitsStore.hpp	/^  namespace Store$/;"	n	namespace:Units
Stretch	src/ui/canvas/gdi/Canvas.cpp	/^Canvas::Stretch(PixelPoint dest_position, PixelSize dest_size,$/;"	f	class:Canvas
Stretch	src/ui/canvas/gdi/Canvas.cpp	/^Canvas::Stretch(const Bitmap &src)$/;"	f	class:Canvas
Stretch	src/ui/canvas/gdi/Canvas.hpp	/^  void Stretch(PixelPoint dest_position, PixelSize dest_size,$/;"	f	class:Canvas
Stretch	src/ui/canvas/memory/Canvas.cpp	/^Canvas::Stretch(PixelPoint dest_position, PixelSize dest_size,$/;"	f	class:Canvas
Stretch	src/ui/canvas/memory/Canvas.hpp	/^  void Stretch(ConstImageBuffer src) {$/;"	f	class:Canvas
Stretch	src/ui/canvas/memory/Canvas.hpp	/^  void Stretch(const Bitmap &src) {$/;"	f	class:Canvas
Stretch	src/ui/canvas/opengl/Canvas.cpp	/^Canvas::Stretch(PixelPoint dest_position, PixelSize dest_size,$/;"	f	class:Canvas
Stretch	src/ui/canvas/opengl/Canvas.hpp	/^  void Stretch(const Bitmap &src) {$/;"	f	class:Canvas
StretchMono	src/ui/canvas/gdi/Canvas.cpp	/^Canvas::StretchMono(PixelPoint dest_position, PixelSize dest_size,$/;"	f	class:Canvas
StretchMono	src/ui/canvas/memory/Canvas.cpp	/^Canvas::StretchMono(PixelPoint dest_position, PixelSize dest_size,$/;"	f	class:Canvas
StretchMono	src/ui/canvas/opengl/Canvas.cpp	/^Canvas::StretchMono(PixelPoint dest_position, PixelSize dest_size,$/;"	f	class:Canvas
StretchNot	src/ui/canvas/gdi/Canvas.cpp	/^Canvas::StretchNot(const Bitmap &src)$/;"	f	class:Canvas
StretchNot	src/ui/canvas/memory/Canvas.cpp	/^Canvas::StretchNot(const Bitmap &_src)$/;"	f	class:Canvas
StretchNot	src/ui/canvas/opengl/Canvas.cpp	/^Canvas::StretchNot(const Bitmap &src)$/;"	f	class:Canvas
StretchTo	src/ui/canvas/gdi/RawBitmap.cpp	/^RawBitmap::StretchTo(PixelSize src_size,$/;"	f	class:RawBitmap
StretchTo	src/ui/canvas/memory/RawBitmap.cpp	/^RawBitmap::StretchTo(PixelSize src_size,$/;"	f	class:RawBitmap
StretchTo	src/ui/canvas/opengl/RawBitmap.cpp	/^RawBitmap::StretchTo(PixelSize src_size,$/;"	f	class:RawBitmap
String	src/Device/Driver/LX/LXN.hpp	/^  struct String {$/;"	s	namespace:LXN
String	src/java/String.cxx	/^	:String(_env, std::string(_value.data, _value.size).c_str())$/;"	f
String	src/java/String.hxx	/^class String : public LocalRef<jstring> {$/;"	c	namespace:Java
StringBuffer	src/util/StringBuffer.hxx	/^class StringBuffer : public BasicStringBuffer<char, CAPACITY> {};$/;"	c
StringBuilder	src/util/StringBuilder.hxx	/^	constexpr StringBuilder(pointer _p, pointer _end):p(_p), end(_end) {}$/;"	f	class:StringBuilder
StringBuilder	src/util/StringBuilder.hxx	/^	constexpr StringBuilder(pointer _p, size_type size)$/;"	f	class:StringBuilder
StringBuilder	src/util/StringBuilder.hxx	/^class StringBuilder {$/;"	c
StringConverter	src/io/StringConverter.hpp	/^class StringConverter {$/;"	c
StringFormat	src/util/StringFormat.hpp	/^StringFormat(char *buffer, size_t size, const char *fmt, Args&&... args)$/;"	f
StringFormat	src/util/WStringFormat.hpp	/^StringFormat(wchar_t *buffer, size_t size, const wchar_t *fmt, Args&&... args)$/;"	f
StringFormatUnsafe	src/util/StringFormat.hpp	/^StringFormatUnsafe(char *buffer, const char *fmt, Args&&... args)$/;"	f
StringFormatUnsafe	src/util/WStringFormat.hpp	/^StringFormatUnsafe(wchar_t *buffer, const wchar_t *fmt, Args&&... args)$/;"	f
StringHash	src/ui/canvas/custom/Cache.cpp	/^  struct StringHash {$/;"	s	struct:TextCacheKey	file:
StringLength	src/util/StringView.hxx	/^				_data != nullptr ? StringLength(_data) : 0) {}$/;"	f	struct:BasicStringView
StringParser	src/util/StringParser.hxx	/^	constexpr explicit StringParser(const_pointer _p):p(_p) {}$/;"	f	class:StringParser
StringParser	src/util/StringParser.hxx	/^class StringParser {$/;"	c
StringPointer	src/util/StringPointer.hxx	/^class StringPointer {$/;"	c
StringToPortType	src/Profile/DeviceConfig.cpp	/^StringToPortType(const char *value, DeviceConfig::PortType &type)$/;"	f	file:
StringView	src/util/IterableSplitString.hxx	/^	typedef BasicStringView<T> StringView;$/;"	t	class:BasicIterableSplitString
StringView	src/util/StringView.hxx	/^struct StringView : BasicStringView<char> {$/;"	s
Strip	src/util/StringParser.hxx	/^	void Strip() {$/;"	f	class:StringParser
Style	src/Look/ChartLook.hpp	/^  enum Style {$/;"	g	struct:ChartLook
Style	src/Task/TaskFileSeeYou.cpp	/^  enum Style {$/;"	g	struct:SeeYouTurnpointInformation	file:
Style	src/ui/canvas/Pen.hpp	/^  enum Style {$/;"	g	class:Pen
SubCanvas	src/ui/canvas/SubCanvas.hpp	/^class SubCanvas : public Canvas {$/;"	c
SubCanvas	src/ui/canvas/memory/SubCanvas.cpp	/^SubCanvas::SubCanvas(Canvas &canvas, PixelPoint _offset, PixelSize _size)$/;"	f	class:SubCanvas
SubCanvas	src/ui/canvas/opengl/SubCanvas.cpp	/^SubCanvas::SubCanvas(Canvas &canvas, PixelPoint _offset, PixelSize _size)$/;"	f	class:SubCanvas
SubMenuButton	src/Form/TabMenuDisplay.hpp	/^  struct SubMenuButton {$/;"	s	class:final
Subtract	src/Computer/StateClock.hpp	/^  void Subtract(double delta) {$/;"	f	class:StateClock
Subtract	src/Engine/Route/ReachResult.hpp	/^  void Subtract(int delta) {$/;"	f	struct:ReachResult
Suggest	src/util/RadixTree.hpp	/^    TCHAR *Suggest(const TCHAR *prefix, TCHAR *dest, size_t max_length) const {$/;"	f	struct:RadixTree::Node
Suggest	src/util/RadixTree.hpp	/^  TCHAR *Suggest(const TCHAR *prefix, TCHAR *dest, size_t max_length) const {$/;"	f	class:RadixTree
SuggestNamePrefix	src/Engine/Waypoint/Waypoints.hpp	/^  TCHAR *SuggestNamePrefix(const TCHAR *prefix,$/;"	f	class:Waypoints
SuggestNormalisedPrefix	src/Engine/Waypoint/Waypoints.cpp	/^Waypoints::WaypointNameTree::SuggestNormalisedPrefix(const TCHAR *prefix,$/;"	f	class:Waypoints::WaypointNameTree
SunEphemeris	src/Math/SunEphemeris.cpp	/^namespace SunEphemeris$/;"	n	file:
SunEphemeris	src/Math/SunEphemeris.hpp	/^namespace SunEphemeris$/;"	n
SupportsBulkBaudRate	src/Device/Driver.hpp	/^  bool SupportsBulkBaudRate() const {$/;"	f	struct:DeviceRegister
SupportsCombolist	src/Form/DataField/Base.hpp	/^  bool SupportsCombolist() const {$/;"	f	class:DataField
SurfaceCreated	src/Topography/TopographyFileRenderer.cpp	/^TopographyFileRenderer::SurfaceCreated()$/;"	f	class:TopographyFileRenderer
SurfaceCreated	src/ui/canvas/android/Bitmap.cpp	/^Bitmap::SurfaceCreated()$/;"	f	class:Bitmap
SurfaceCreated	src/ui/canvas/opengl/BufferCanvas.cpp	/^BufferCanvas::SurfaceCreated()$/;"	f	class:BufferCanvas
SurfaceCreated	src/ui/canvas/opengl/RawBitmap.cpp	/^RawBitmap::SurfaceCreated()$/;"	f	class:RawBitmap
SurfaceDestroyed	src/Topography/TopographyFileRenderer.cpp	/^TopographyFileRenderer::SurfaceDestroyed()$/;"	f	class:TopographyFileRenderer
SurfaceDestroyed	src/ui/canvas/android/Bitmap.cpp	/^Bitmap::SurfaceDestroyed()$/;"	f	class:Bitmap
SurfaceDestroyed	src/ui/canvas/opengl/BufferCanvas.cpp	/^BufferCanvas::SurfaceDestroyed()$/;"	f	class:BufferCanvas
SurfaceDestroyed	src/ui/canvas/opengl/RawBitmap.cpp	/^RawBitmap::SurfaceDestroyed()$/;"	f	class:RawBitmap
Suspend	src/thread/RecursivelySuspensibleThread.cpp	/^RecursivelySuspensibleThread::Suspend()$/;"	f	class:RecursivelySuspensibleThread
Suspend	src/thread/WorkerThread.hpp	/^  void Suspend() {$/;"	f	class:WorkerThread
SuspendAllThreads	src/Protection.cpp	/^SuspendAllThreads()$/;"	f
SuspendAppendSaveWaypoint	src/Input/InputEventsActions.cpp	/^SuspendAppendSaveWaypoint(Waypoint &&wp)$/;"	f	file:
SuspendAppendWaypoint	src/Input/InputEventsActions.cpp	/^SuspendAppendWaypoint(Waypoint &&wp)$/;"	f	file:
SuspendThreads	src/MainWindow.cpp	/^MainWindow::SuspendThreads()$/;"	f	class:MainWindow
SuspendThreads	src/MapWindow/GlueMapWindow.cpp	/^GlueMapWindow::SuspendThreads()$/;"	f	class:GlueMapWindow
SuspensibleThread	src/thread/SuspensibleThread.hpp	/^class SuspensibleThread : public Thread {$/;"	c
Swap	src/Engine/Task/Factory/AbstractTaskFactory.cpp	/^AbstractTaskFactory::Swap(const unsigned position, const bool auto_mutate)$/;"	f	class:AbstractTaskFactory
Swap	src/util/RadixTree.hpp	/^    void Swap(LeafList &other) {$/;"	f	struct:RadixTree::LeafList
SwapWord	src/Topography/shapelib/mapshape.c	/^static void SwapWord( int length, void * wordP )$/;"	f	file:
SwapWord	src/Topography/shapelib/maptree.c	/^static void SwapWord( int length, void * wordP )$/;"	f	file:
SweepList	src/Kobo/WifiDialog.cpp	/^WifiListWidget::SweepList()$/;"	f	class:WifiListWidget
SwitchData	src/Gauge/BigTrafficWidget.cpp	/^FlarmTrafficControl::SwitchData()$/;"	f	class:FlarmTrafficControl
SwitchKernel	src/Kobo/SystemDialog.cpp	/^SystemWidget::SwitchKernel()$/;"	f	class:SystemWidget
SwitchState	src/NMEA/SwitchState.hpp	/^struct SwitchState$/;"	s
SwitchToEditTab	src/Dialogs/Task/Manager/TaskManagerDialog.cpp	/^TaskManagerDialog::SwitchToEditTab()$/;"	f	class:TaskManagerDialog
SwitchToPropertiesPanel	src/Dialogs/Task/Manager/TaskManagerDialog.cpp	/^TaskManagerDialog::SwitchToPropertiesPanel()$/;"	f	class:TaskManagerDialog
SwitchZoomClimb	src/MapWindow/GlueMapWindowDisplayMode.cpp	/^GlueMapWindow::SwitchZoomClimb()$/;"	f	class:GlueMapWindow
SwitchesDialog	src/Dialogs/Device/Vega/SwitchesDialog.cpp	/^  SwitchesDialog(const DialogLook &look)$/;"	f	class:SwitchesDialog
SwitchesDialog	src/Dialogs/Device/Vega/SwitchesDialog.cpp	/^class SwitchesDialog : public TwoWidgets, private NullBlackboardListener {$/;"	c	file:
SwitchesLeft	src/Dialogs/Device/Vega/SwitchesDialog.cpp	/^  SwitchesLeft(const DialogLook &look):RowFormWidget(look) {}$/;"	f	class:SwitchesLeft
SwitchesLeft	src/Dialogs/Device/Vega/SwitchesDialog.cpp	/^class SwitchesLeft : public RowFormWidget {$/;"	c	file:
SwitchesRight	src/Dialogs/Device/Vega/SwitchesDialog.cpp	/^  SwitchesRight(const DialogLook &look):RowFormWidget(look) {}$/;"	f	class:SwitchesRight
SwitchesRight	src/Dialogs/Device/Vega/SwitchesDialog.cpp	/^class SwitchesRight : public RowFormWidget {$/;"	c	file:
SymbolButtonRenderer	src/Renderer/SymbolButtonRenderer.hpp	/^  SymbolButtonRenderer(const ButtonLook &_look,$/;"	f	class:SymbolButtonRenderer
SymbolButtonRenderer	src/Renderer/SymbolButtonRenderer.hpp	/^class SymbolButtonRenderer : public ButtonRenderer {$/;"	c
SymbolRenderer	src/Renderer/SymbolRenderer.hpp	/^namespace SymbolRenderer$/;"	n
SymbolsConfigPanel	src/Dialogs/Settings/Panels/SymbolsConfigPanel.cpp	/^  SymbolsConfigPanel()$/;"	f	class:final
SymmetricSectorZone	src/Engine/Task/ObservationZones/SymmetricSectorZone.hpp	/^  SymmetricSectorZone(Shape _shape, bool _can_start_through_top,$/;"	f	class:SymmetricSectorZone
SymmetricSectorZone	src/Engine/Task/ObservationZones/SymmetricSectorZone.hpp	/^  SymmetricSectorZone(const GeoPoint &loc,$/;"	f	class:SymmetricSectorZone
SymmetricSectorZone	src/Engine/Task/ObservationZones/SymmetricSectorZone.hpp	/^  SymmetricSectorZone(const SymmetricSectorZone &other,$/;"	f	class:SymmetricSectorZone
SymmetricSectorZone	src/Engine/Task/ObservationZones/SymmetricSectorZone.hpp	/^class SymmetricSectorZone: public SectorZone$/;"	c
SyncFromDevice	src/Dialogs/Device/DeviceEditWidget.cpp	/^  SyncFromDevice, SyncToDevice,$/;"	e	enum:ControlIndex	file:
SyncPoints	src/Engine/Trace/Trace.cpp	/^Trace::SyncPoints(TracePointerVector &v) const$/;"	f	class:Trace
SyncToDevice	src/Dialogs/Device/DeviceEditWidget.cpp	/^  SyncFromDevice, SyncToDevice,$/;"	e	enum:ControlIndex	file:
Synchronise	src/Engine/Route/AirspaceRoute.cpp	/^AirspaceRoute::Synchronise(const Airspaces &master,$/;"	f	class:AirspaceRoute
Synchronise	src/Task/RoutePlannerGlue.cpp	/^RoutePlannerGlue::Synchronise(const Airspaces &master,$/;"	f	class:RoutePlannerGlue
SynchroniseInRange	src/Engine/Airspace/Airspaces.cpp	/^Airspaces::SynchroniseInRange(const Airspaces &master,$/;"	f	class:Airspaces
Synchronize	src/Plane/PlaneGlue.cpp	/^PlaneGlue::Synchronize(const Plane &plane, ComputerSettings &settings,$/;"	f	class:PlaneGlue
Synthesise	src/Audio/ToneSynthesiser.cpp	/^ToneSynthesiser::Synthesise(int16_t *buffer, size_t n)$/;"	f	class:ToneSynthesiser
Synthesise	src/Audio/VarioSynthesiser.cpp	/^VarioSynthesiser::Synthesise(int16_t *buffer, size_t n)$/;"	f	class:VarioSynthesiser
SystemClockTimer	src/ProcessTimer.cpp	/^SystemClockTimer()$/;"	f	file:
SystemConfiguration	src/UtilsSettings.cpp	/^SystemConfiguration()$/;"	f
SystemLoadCPU	src/system/SystemLoad.cpp	/^SystemLoadCPU()$/;"	f
SystemLoadCPU	src/system/SystemLoad.cpp	/^unsigned SystemLoadCPU()$/;"	f
SystemProcessTimer	src/ProcessTimer.cpp	/^SystemProcessTimer()$/;"	f	file:
SystemSettings	src/SystemSettings.hpp	/^struct SystemSettings {$/;"	s
SystemTimeFromGPS	src/Dialogs/Settings/Panels/TimeConfigPanel.cpp	/^  SystemTimeFromGPS$/;"	e	enum:ControlIndex	file:
SystemWidget	src/Kobo/SystemDialog.cpp	/^  SystemWidget(const DialogLook &look):RowFormWidget(look) {}$/;"	f	class:final
SystemWindowSize	src/UtilsSystem.cpp	/^SystemWindowSize()$/;"	f
TAB	src/InfoBoxes/InfoBoxSettings.hpp	/^    TAB,$/;"	m	class:InfoBoxSettings::BorderStyle
TAF	src/Weather/TAF.hpp	/^struct TAF$/;"	s
TAF_HPP	src/Weather/TAF.hpp	25;"	d
TAKEOFF_DISTANCE	src/InfoBoxes/Content/Type.hpp	/^    TAKEOFF_DISTANCE,$/;"	e	enum:InfoBoxFactory::Type
TAPosition	src/Dialogs/Settings/Panels/GaugesConfigPanel.cpp	/^  TAPosition,$/;"	e	enum:ControlIndex	file:
TAPosition	src/Profile/ProfileKeys.cpp	/^const char TAPosition[] = "TAPosition";$/;"	m	namespace:ProfileKeys	file:
TARGET	src/Version.cpp	33;"	d	file:
TARGET	src/Version.cpp	35;"	d	file:
TARGET	src/Version.cpp	37;"	d	file:
TARGET	src/Version.cpp	41;"	d	file:
TARGET	src/Version.cpp	43;"	d	file:
TARGET	src/Version.cpp	46;"	d	file:
TARGET	src/Version.cpp	48;"	d	file:
TARGET_UP	src/MapSettings.hpp	/^  TARGET_UP,$/;"	m	class:MapOrientation
TASK	src/Device/Driver/LX/LXN.hpp	/^    TASK = 0xf7,$/;"	e	enum:LXN::Command
TASK	src/Device/Driver/Volkslogger/vlapi2.h	/^    struct TASK {$/;"	s	struct:VLAPI_DATA::DECLARATION
TASK	src/Dialogs/dlgAnalysis.hpp	/^  TASK,$/;"	m	class:AnalysisPage
TASK	src/Engine/Route/Config.hpp	/^    TASK,$/;"	m	class:RoutePlannerConfig::Polar
TASK	src/Engine/Task/TaskBehaviour.hpp	/^  TASK,$/;"	m	class:AbortTaskMode
TASK	src/Renderer/WaypointRendererSettings.hpp	/^    TASK,$/;"	m	class:WaypointRendererSettings::LabelSelection
TASKADVANCE_HPP	src/Engine/Task/Ordered/TaskAdvance.hpp	24;"	d
TASKBESTMC_HPP	src/Engine/Task/Solvers/TaskBestMc.hpp	24;"	d
TASKDEFAULTSCONFIGPANEL_HPP	src/Dialogs/Settings/Panels/TaskDefaultsConfigPanel.hpp	25;"	d
TASKEVENTS_HPP	src/Engine/Task/TaskEvents.hpp	24;"	d
TASKGLIDEREQUIRED_HPP	src/Engine/Task/Solvers/TaskGlideRequired.hpp	23;"	d
TASKINTERFACE_H	src/Engine/Task/TaskInterface.hpp	24;"	d
TASKLEG_H	src/Engine/Task/Points/TaskLeg.hpp	24;"	d
TASKLEG_RENDERER_HPP	src/Renderer/TaskLegRenderer.hpp	25;"	d
TASKMACCREADYREMAINING_HPP	src/Engine/Task/Solvers/TaskMacCreadyRemaining.hpp	23;"	d
TASKMACCREADYTOTAL_HPP	src/Engine/Task/Solvers/TaskMacCreadyTotal.hpp	23;"	d
TASKMACCREADYTRAVELLED_HPP	src/Engine/Task/Solvers/TaskMacCreadyTravelled.hpp	23;"	d
TASKMANAGER_H	src/Engine/Task/TaskManager.hpp	24;"	d
TASKMINTARGET_HPP	src/Engine/Task/Solvers/TaskMinTarget.hpp	23;"	d
TASKOPTTARGET_HPP	src/Engine/Task/Solvers/TaskOptTarget.hpp	24;"	d
TASKPOINTVISITOR_HPP	src/Engine/Task/Visitors/TaskPointVisitor.hpp	23;"	d
TASKPOINT_HPP	src/Engine/Task/Points/TaskPoint.hpp	25;"	d
TASKPROJECTION_H	src/Geo/Flat/TaskProjection.hpp	24;"	d
TASKRULESCONFIGPANEL_HPP	src/Dialogs/Settings/Panels/TaskRulesConfigPanel.hpp	25;"	d
TASKSOLVETRAVELLED_HPP	src/Engine/Task/Solvers/TaskSolveTravelled.hpp	23;"	d
TASKSPEED_RENDERER_HPP	src/Renderer/TaskSpeedRenderer.hpp	25;"	d
TASKSTATS_HPP	src/Engine/Task/Stats/TaskStats.hpp	23;"	d
TASKWAYPOINT_HPP	src/Engine/Task/Points/TaskWaypoint.hpp	26;"	d
TASK_AND_AIRFIELD	src/Renderer/WaypointRendererSettings.hpp	/^    TASK_AND_AIRFIELD,$/;"	m	class:WaypointRendererSettings::LabelSelection
TASK_AND_LANDABLE	src/Renderer/WaypointRendererSettings.hpp	/^    TASK_AND_LANDABLE,$/;"	m	class:WaypointRendererSettings::LabelSelection
TASK_AUTOPILOT_HPP	src/Replay/TaskAutoPilot.hpp	23;"	d
TASK_BEHAVIOUR_HPP	src/Engine/Task/TaskBehaviour.hpp	24;"	d
TASK_CRUISE_EFFICIENCY_HPP	src/Engine/Task/Solvers/TaskCruiseEfficiency.hpp	23;"	d
TASK_DIJKSTRA_HPP	src/Engine/Task/PathSolvers/TaskDijkstra.hpp	24;"	d
TASK_DIJKSTRA_MAX_HPP	src/Engine/Task/PathSolvers/TaskDijkstraMax.hpp	24;"	d
TASK_DIJKSTRA_MIN_HPP	src/Engine/Task/PathSolvers/TaskDijkstraMin.hpp	24;"	d
TASK_LOAD_FILE_HPP	src/Task/LoadFile.hpp	24;"	d
TASK_MACCREADY_HPP	src/Engine/Task/Solvers/TaskMacCready.hpp	23;"	d
TASK_NOT_CLOSED	src/Engine/Task/Factory/ValidationError.hpp	/^  TASK_NOT_CLOSED,$/;"	m	class:TaskValidationErrorType
TASK_NOT_HOMOGENEOUS	src/Engine/Task/Factory/ValidationError.hpp	/^  TASK_NOT_HOMOGENEOUS,$/;"	m	class:TaskValidationErrorType
TASK_OZ	src/MapWindow/Items/MapItem.hpp	/^    TASK_OZ,$/;"	e	enum:TaskPointType::Type
TASK_PROGRESS_RENDERER_HPP	src/Renderer/TaskProgressRenderer.hpp	25;"	d
TASK_SAVE_FILE_HPP	src/Task/SaveFile.hpp	24;"	d
TASK_SOLUTION_HPP	src/Engine/Task/Solvers/TaskSolution.hpp	24;"	d
TASK_SOLVE_TRAVELLED_HPP	src/Engine/Task/Solvers/TaskEffectiveMacCready.hpp	23;"	d
TASK_SPEED	src/Dialogs/dlgAnalysis.hpp	/^  TASK_SPEED,$/;"	m	class:AnalysisPage
TASK_SPEED	src/Units/Group.hpp	/^  TASK_SPEED,$/;"	m	class:UnitGroup
TASK_SPEED_HOUR	src/InfoBoxes/Content/Type.hpp	/^    TASK_SPEED_HOUR,$/;"	e	enum:InfoBoxFactory::Type
TASK_STORE_HPP	src/Task/TaskStore.hpp	25;"	d
TASK_SUMMARY_HPP	src/Engine/Task/Stats/TaskSummary.hpp	23;"	d
TASK_TYPE	src/Dialogs/Task/Manager/TaskPropertiesPanel.cpp	/^  TASK_TYPE,$/;"	e	enum:Controls	file:
TASK_VARIO_HPP	src/Engine/Task/Stats/TaskVario.hpp	2;"	d
TASTER	src/Device/Driver/LX/LX1600.hpp	/^    TASTER = 2,$/;"	m	class:LX1600::SCControlMode
TCHAR	src/unix/tchar.h	/^typedef char TCHAR;$/;"	t
TCHAR_H	src/unix/tchar.h	25;"	d
TCPClientPort	src/Device/Port/TCPClientPort.cpp	/^TCPClientPort::TCPClientPort(EventLoop &event_loop, Cares::Channel &cares,$/;"	f	class:TCPClientPort
TCPPort	src/Device/Port/TCPPort.cpp	/^TCPPort::TCPPort(EventLoop &event_loop,$/;"	f	class:TCPPort
TCPPort	src/Dialogs/Device/DeviceEditWidget.cpp	/^  TCPPort,$/;"	e	enum:ControlIndex	file:
TCP_CLIENT	src/Device/Config.hpp	/^    TCP_CLIENT,$/;"	m	class:DeviceConfig::PortType
TCP_LISTENER	src/Device/Config.hpp	/^    TCP_LISTENER,$/;"	m	class:DeviceConfig::PortType
TDECL	src/Device/Driver/Volkslogger/vlconv.cpp	/^  BrokenDateTime TDECL;$/;"	m	class:C_RECORD	file:
TDeclaration	src/Device/Driver/IMI/Protocol/Types.hpp	/^  struct TDeclaration {$/;"	s	namespace:IMI
TDeclarationHeader	src/Device/Driver/IMI/Protocol/Types.hpp	/^  struct TDeclarationHeader {$/;"	s	namespace:IMI
TDeviceInfo	src/Device/Driver/IMI/Protocol/Types.hpp	/^  struct TDeviceInfo {$/;"	s	namespace:IMI
TEAMCODE_COMBINATIONS	src/TeamCode/TeamCode.cpp	/^static constexpr unsigned TEAMCODE_COMBINATIONS = BASE * BASE;$/;"	v	file:
TEK_PRESSURE	src/Device/Config.hpp	/^    TEK_PRESSURE,$/;"	m	class:DeviceConfig::PressureUse
TELNET	src/Kobo/NetworkDialog.cpp	/^    TELNET,$/;"	e	enum:final::Buttons	file:
TEMPERATURE	src/Units/Group.hpp	/^  TEMPERATURE,$/;"	m	class:UnitGroup
TEMPTRACE	src/Dialogs/dlgAnalysis.hpp	/^  TEMPTRACE,$/;"	m	class:AnalysisPage
TEMP_USE_AMBIENT	src/ui/canvas/fb/mxcfb.h	108;"	d
TERRAIN	src/Engine/Route/Config.hpp	/^    TERRAIN,$/;"	m	class:RoutePlannerConfig::Mode
TERRAIN	src/Renderer/WaypointRendererSettings.hpp	/^    TERRAIN,$/;"	m	class:WaypointRendererSettings::ArrivalHeightDisplay
TERRAINDISPLAYCONFIGPANEL_HPP	src/Dialogs/Settings/Panels/TerrainDisplayConfigPanel.hpp	25;"	d
TERRAIN_CROSS_SECTION_RENDERER_HPP	src/CrossSection/TerrainXSRenderer.hpp	25;"	d
TERRAIN_LINE	src/Computer/Settings.hpp	/^    TERRAIN_LINE,$/;"	m	class:FeaturesSettings::FinalGlideTerrain
TERRAIN_ROUTE_HPP	src/Engine/Route/TerrainRoute.hpp	23;"	d
TERRAIN_SHADE	src/Computer/Settings.hpp	/^    TERRAIN_SHADE,$/;"	m	class:FeaturesSettings::FinalGlideTerrain
TEXCOORD	src/ui/canvas/opengl/Attribute.hpp	/^static constexpr GLuint TEXCOORD = 2;$/;"	m	namespace:OpenGL::Attribute
TEXT	src/Device/Driver/FLARM/Device.hpp	/^    TEXT,$/;"	m	class:FlarmDevice::Mode
TEXT_BALLAST	src/Gauge/GaugeVario.cpp	36;"	d	file:
TEXT_BUG	src/Gauge/GaugeVario.cpp	35;"	d	file:
TEXT_FILE_HXX	src/util/TextFile.hxx	31;"	d
TE_altitude	src/NMEA/MoreData.hpp	/^  double TE_altitude;$/;"	m	struct:MoreData
THERMAL	src/MapWindow/Items/MapItem.hpp	/^    THERMAL,$/;"	e	enum:TaskPointType::Type
THERMALBASE_HPP	src/Computer/ThermalBase.hpp	25;"	d
THERMALLOCATOR_H	src/Computer/ThermalLocator.hpp	25;"	d
THERMAL_ASSISTANT	src/InfoBoxes/Content/Type.hpp	/^    THERMAL_ASSISTANT,$/;"	e	enum:InfoBoxFactory::Type
THERMAL_ASSISTANT	src/PageSettings.hpp	/^    THERMAL_ASSISTANT,$/;"	m	class:PageLayout::Main
THERMAL_ASSISTANT_WINDOW_LOOK_HPP	src/Look/ThermalAssistantLook.hpp	25;"	d
THERMAL_ASSISTENT_RENDERER_HPP	src/Gauge/ThermalAssistantRenderer.hpp	25;"	d
THERMAL_ASSISTENT_WINDOW_HPP	src/Gauge/ThermalAssistantWindow.hpp	25;"	d
THERMAL_BAND	src/Dialogs/dlgAnalysis.hpp	/^  THERMAL_BAND,$/;"	m	class:AnalysisPage
THERMAL_BAND_HPP	src/Engine/ThermalBand/ThermalBand.hpp	23;"	d
THERMAL_BAND_LOOK_HPP	src/Look/ThermalBandLook.hpp	25;"	d
THERMAL_BAND_RENDERER_HPP	src/Renderer/ThermalBandRenderer.hpp	25;"	d
THERMAL_ENCOUNTER_BAND_HPP	src/Engine/ThermalBand/ThermalEncounterBand.hpp	24;"	d
THERMAL_ENCOUNTER_COLLECTION	src/Engine/ThermalBand/ThermalEncounterCollection.hpp	23;"	d
THERMAL_HOTSPOT	src/Engine/Waypoint/Waypoint.hpp	/^    THERMAL_HOTSPOT,$/;"	m	class:Waypoint::Type
THERMAL_RANGE	src/Cloud/Main.cpp	/^static constexpr double THERMAL_RANGE = 50000;$/;"	v	file:
THERMAL_REQUEST	src/Tracking/SkyLines/Protocol.hpp	/^  THERMAL_REQUEST = 12,$/;"	e	enum:SkyLinesTracking::Type
THERMAL_RESPONSE	src/Tracking/SkyLines/Protocol.hpp	/^  THERMAL_RESPONSE = 13,$/;"	e	enum:SkyLinesTracking::Type
THERMAL_SHEAR_RATIO_MAX	src/Computer/GlideComputerAirData.cpp	/^static constexpr double THERMAL_SHEAR_RATIO_MAX = 10;$/;"	v	file:
THERMAL_SLICE_HPP	src/Engine/ThermalBand/ThermalSlice.hpp	23;"	d
THERMAL_SUBMIT	src/Tracking/SkyLines/Protocol.hpp	/^  THERMAL_SUBMIT = 11,$/;"	e	enum:SkyLinesTracking::Type
THERMAL_TIME_MIN	src/Computer/GlideComputerAirData.cpp	/^static constexpr double THERMAL_TIME_MIN = 45;$/;"	v	file:
THINNING_LEVELS	src/Topography/XShape.hpp	/^  static constexpr unsigned THINNING_LEVELS = 4;$/;"	m	class:XShape
THREAD_COND_HXX	src/thread/Cond.hxx	31;"	d
THREAD_CRITICAL_SECTION_HXX	src/thread/CriticalSection.hxx	31;"	d
THREAD_ID_HXX	src/thread/Id.hxx	31;"	d
THREAD_MUTEX_HXX	src/thread/Mutex.hxx	31;"	d
THREAD_UTIL_HXX	src/thread/Util.hpp	31;"	d
THREAD_WINDOWS_COND_HXX	src/thread/WindowsCond.hxx	31;"	d
THREAD_WINDOWS_SHARED_MUTEX_HXX	src/thread/WindowsSharedMutex.hxx	31;"	d
TID	src/Device/Driver/Volkslogger/vlconv.cpp	/^  unsigned TID;$/;"	m	class:C_RECORD	file:
TIME	src/Dialogs/Weather/RASPDialog.cpp	/^    TIME,$/;"	e	enum:final::Controls	file:
TIME	src/Form/DataField/Base.hpp	/^    TIME,$/;"	m	class:DataField::Type
TIME	src/Renderer/ChartRenderer.hpp	/^    TIME$/;"	e	enum:ChartRenderer::UnitFormat
TIMECONFIGPANEL_HPP	src/Dialogs/Settings/Panels/TimeConfigPanel.hpp	25;"	d
TIMEOUT	src/Device/Port/Port.hpp	/^    TIMEOUT,$/;"	m	class:Port::WaitResult
TIMEOUT	src/system/OverlappedEvent.hpp	/^    TIMEOUT,$/;"	e	enum:OverlappedEvent::WaitResult
TIME_CAST_HXX	src/time/Cast.hxx	31;"	d
TIME_CONVERT_HXX	src/time/Convert.hxx	34;"	d
TINY	src/Engine/Task/Solvers/TaskBestMc.cpp	39;"	d	file:
TITHRESHOLD	src/Atmosphere/CuSonde.cpp	43;"	d	file:
TKF	src/Device/Driver/Volkslogger/vlconv.cpp	/^  C2 TKF;$/;"	m	class:C_RECORD	file:
TLOCATOR_NMAX	src/Computer/ThermalLocator.hpp	/^  static constexpr unsigned TLOCATOR_NMAX = 60;$/;"	m	class:ThermalLocator
TLOCATOR_NMIN	src/Computer/ThermalLocator.hpp	/^  static constexpr unsigned TLOCATOR_NMIN = 5;$/;"	m	class:ThermalLocator
TLineReader	src/io/LineReader.hpp	/^class TLineReader : public LineReader<TCHAR> {};$/;"	c
TMZ	src/Engine/Airspace/AirspaceClass.hpp	/^  TMZ,$/;"	e	enum:uint8_t
TMsg	src/Device/Driver/IMI/Protocol/Types.hpp	/^  struct TMsg {$/;"	s	namespace:IMI
TMsgType	src/Device/Driver/IMI/Protocol/Types.hpp	/^  enum TMsgType {$/;"	g	namespace:IMI
TNP	src/Airspace/AirspaceParser.cpp	/^  TNP,$/;"	m	class:AirspaceFileType	file:
TOGGLE_WIFI	src/Kobo/NetworkDialog.cpp	/^    TOGGLE_WIFI,$/;"	e	enum:final::Buttons	file:
TOLERANCE	src/Engine/Task/Solvers/TaskBestMc.hpp	/^  static constexpr double TOLERANCE = 0.0001;$/;"	m	class:final
TOLERANCE	src/Engine/Task/Solvers/TaskGlideRequired.hpp	/^  static constexpr double TOLERANCE = 0.001;$/;"	m	class:final
TOLERANCE	src/Engine/Task/Solvers/TaskMinTarget.hpp	/^  static constexpr double TOLERANCE = 0.002;$/;"	m	class:final
TOLERANCE	src/Engine/Task/Solvers/TaskOptTarget.hpp	/^  static constexpr double TOLERANCE = 0.01;$/;"	m	class:final
TOLERANCES_HPP	src/Engine/Util/Tolerances.hpp	23;"	d
TOLERANCE_BEST_LD	src/Engine/GlideSolvers/GlidePolar.hpp	/^  static constexpr double TOLERANCE_BEST_LD = 0.000001;$/;"	m	class:GlidePolar
TOLERANCE_CRUISE_EFFICIENCY	src/Engine/Task/Solvers/TaskSolveTravelled.hpp	/^  static constexpr double TOLERANCE_CRUISE_EFFICIENCY = 0.001;$/;"	m	class:TaskSolveTravelled
TOLERANCE_DOLPHIN	src/Engine/GlideSolvers/GlidePolar.cpp	/^  static constexpr double TOLERANCE_DOLPHIN = 0.0001;$/;"	m	class:final	file:
TOLERANCE_ISOLINE_CROSSING	src/Engine/Util/Tolerances.hpp	25;"	d
TOLERANCE_MC_OPT_GLIDE	src/Engine/GlideSolvers/MacCready.cpp	/^  static constexpr double TOLERANCE_MC_OPT_GLIDE = 0.001;$/;"	m	class:MacCreadyVopt	file:
TOLERANCE_MIN_SINK	src/Engine/GlideSolvers/GlidePolar.hpp	/^  static constexpr double TOLERANCE_MIN_SINK = 0.01;$/;"	m	class:GlidePolar
TOOLS	src/Kobo/KoboMenu.cpp	/^  TOOLS,$/;"	e	enum:Buttons	file:
TOPOGRAPHY_CONVERT_HPP	src/Topography/Convert.hpp	25;"	d
TOPOGRAPHY_FILE_RENDERER_HPP	src/Topography/TopographyFileRenderer.hpp	25;"	d
TOPOGRAPHY_GLUE_H	src/Topography/TopographyGlue.hpp	25;"	d
TOPOGRAPHY_HPP	src/Topography/TopographyFile.hpp	26;"	d
TOPOGRAPHY_RENDERER_HPP	src/Topography/TopographyRenderer.hpp	25;"	d
TOPOGRAPHY_STORE_HPP	src/Topography/TopographyStore.hpp	25;"	d
TOPOGRAPHY_XSHAPE_HPP	src/Topography/XShape.hpp	26;"	d
TOPOGRAPHY_XSHAPE_POINT_HPP	src/Topography/XShapePoint.hpp	26;"	d
TOP_8_VARIO	src/InfoBoxes/InfoBoxSettings.hpp	/^    TOP_8_VARIO = 18,$/;"	m	class:InfoBoxSettings::Geometry
TOP_LEFT	src/UISettings.hpp	/^    TOP_LEFT,$/;"	m	class:UISettings::PopupMessagePosition
TOP_LEFT_10	src/InfoBoxes/InfoBoxSettings.hpp	/^    TOP_LEFT_10 = 21,$/;"	m	class:InfoBoxSettings::Geometry
TOP_LEFT_12	src/InfoBoxes/InfoBoxSettings.hpp	/^    TOP_LEFT_12 = 11,$/;"	m	class:InfoBoxSettings::Geometry
TOP_LEFT_4	src/InfoBoxes/InfoBoxSettings.hpp	/^    TOP_LEFT_4 = 14,$/;"	m	class:InfoBoxSettings::Geometry
TOP_LEFT_8	src/InfoBoxes/InfoBoxSettings.hpp	/^    TOP_LEFT_8 = 2,$/;"	m	class:InfoBoxSettings::Geometry
TORR	src/Units/Unit.hpp	/^  TORR,$/;"	m	class:Unit
TOUCH	src/Kobo/Model.hpp	/^  TOUCH,$/;"	m	class:KoboModel
TOUCH2	src/Kobo/Model.hpp	/^  TOUCH2,$/;"	m	class:KoboModel
TOURING	src/Engine/Task/Factory/TaskFactoryType.hpp	/^  TOURING,$/;"	m	class:TaskFactoryType
TOURING_TASK_FACTORY_HPP	src/Engine/Task/Factory/TouringTaskFactory.hpp	23;"	d
TOWER	src/Engine/Waypoint/Waypoint.hpp	/^    TOWER,$/;"	m	class:Waypoint::Type
TOW_PLANE	src/FLARM/Traffic.hpp	/^    TOW_PLANE = 2,        \/\/!< tow \/ tug plane$/;"	m	class:FlarmTraffic::AircraftType
TO_NEXT_POINT	src/Task/TaskFileSeeYou.cpp	/^    TO_NEXT_POINT,$/;"	e	enum:SeeYouTurnpointInformation::Style	file:
TO_PREVIOUS_POINT	src/Task/TaskFileSeeYou.cpp	/^    TO_PREVIOUS_POINT,$/;"	e	enum:SeeYouTurnpointInformation::Style	file:
TO_START_POINT	src/Task/TaskFileSeeYou.cpp	/^    TO_START_POINT,$/;"	e	enum:SeeYouTurnpointInformation::Style	file:
TObservationZone	src/Device/Driver/IMI/Protocol/Types.hpp	/^  struct TObservationZone {$/;"	s	namespace:IMI
TP	src/Device/Driver/Volkslogger/vlconv.cpp	/^  C2 TP[12];$/;"	m	class:C_RECORD	file:
TPTypeItemHelp	src/Dialogs/Task/MutateTaskPointDialog.cpp	/^TPTypeItemHelp(unsigned i)$/;"	f	file:
TRACEHISTORY_HPP	src/Engine/Navigation/TraceHistory.hpp	24;"	d
TRACE_HISTORY_LOOK_HPP	src/Look/TraceHistoryLook.hpp	25;"	d
TRACE_HISTORY_RENDERER_HPP	src/Renderer/TraceHistoryRenderer.hpp	25;"	d
TRACE_HPP	src/Engine/Trace/Trace.hpp	25;"	d
TRACE_MANAGER_HPP	src/Engine/Contest/Solvers/TraceManager.hpp	25;"	d
TRACE_POINT_HPP	src/Engine/Trace/Point.hpp	25;"	d
TRACK	src/MapSettings.hpp	/^  TRACK,$/;"	m	class:MapShiftBias
TRACKING_CONFIGPANEL_HPP	src/Dialogs/Settings/Panels/TrackingConfigPanel.hpp	25;"	d
TRACKING_GESTURE_MANAGER_HPP	src/UIUtil/TrackingGestureManager.hpp	31;"	d
TRACK_UP	src/MapSettings.hpp	/^  TRACK_UP,$/;"	m	class:MapOrientation
TRAFFIC	src/MapWindow/Items/MapItem.hpp	/^    TRAFFIC,$/;"	e	enum:TaskPointType::Type
TRAFFIC_LIGHTS	src/Renderer/WaypointRendererSettings.hpp	/^    TRAFFIC_LIGHTS,$/;"	m	class:WaypointRendererSettings::LandableStyle
TRAFFIC_RANGE	src/Cloud/Main.cpp	/^static constexpr double TRAFFIC_RANGE = 50000;$/;"	v	file:
TRAFFIC_REQUEST	src/Tracking/SkyLines/Protocol.hpp	/^  TRAFFIC_REQUEST = 4,$/;"	e	enum:SkyLinesTracking::Type
TRAFFIC_RESPONSE	src/Tracking/SkyLines/Protocol.hpp	/^  TRAFFIC_RESPONSE = 5,$/;"	e	enum:SkyLinesTracking::Type
TRAIL_DRIFT	src/Dialogs/Settings/Panels/SymbolsConfigPanel.cpp	/^  TRAIL_DRIFT,$/;"	e	enum:ControlIndex	file:
TRAIL_LENGTH	src/Dialogs/Settings/Panels/SymbolsConfigPanel.cpp	/^  TRAIL_LENGTH,$/;"	e	enum:ControlIndex	file:
TRAIL_TYPE	src/Dialogs/Settings/Panels/SymbolsConfigPanel.cpp	/^  TRAIL_TYPE,$/;"	e	enum:ControlIndex	file:
TRAIL_WIDTH	src/Dialogs/Settings/Panels/SymbolsConfigPanel.cpp	/^  TRAIL_WIDTH,$/;"	e	enum:ControlIndex	file:
TRANSLATE	src/ui/canvas/opengl/Attribute.hpp	/^static constexpr GLuint TRANSLATE = 0;$/;"	m	namespace:OpenGL::Attribute
TRANSPARENT	src/ui/canvas/memory/Canvas.hpp	/^    OPAQUE, TRANSPARENT$/;"	e	enum:Canvas::__anon172
TRANSPARENT	src/ui/canvas/memory/Canvas.hpp	45;"	d
TRANSPARENT	src/ui/canvas/memory/Color.hpp	/^  static constexpr uint8_t TRANSPARENT = 0x00;$/;"	m	class:Color
TRANSPARENT	src/ui/canvas/memory/Color.hpp	40;"	d
TRANSPARENT	src/ui/canvas/opengl/Canvas.hpp	/^    OPAQUE, TRANSPARENT$/;"	e	enum:Canvas::__anon174
TRANSPARENT	src/ui/canvas/opengl/Canvas.hpp	48;"	d
TRANSPONDER_RECEIVER	src/FLARM/Error.hpp	/^    TRANSPONDER_RECEIVER = 0xa1,$/;"	e	enum:uint8_t
TRIANGLE_CONTEST_HPP	src/Engine/Contest/Solvers/TriangleContest.hpp	24;"	d
TRIKE	src/Tracking/LiveTrack24.hpp	/^  TRIKE = 32,$/;"	m	class:LiveTrack24::VehicleType
TRIVIAL_ARRAY_HXX	src/util/TrivialArray.hxx	31;"	d
TRI_STATE_HPP	src/util/TriState.hpp	31;"	d
TRUE	src/util/TriState.hpp	/^  FALSE, TRUE, UNKNOWN$/;"	m	class:TriState
TRUE	src/util/TriState.hpp	44;"	d
TSTRING_HPP	src/util/tstring.hpp	2;"	d
TSTRING_VIEW_HXX	src/util/TStringView.hxx	31;"	d
TState	src/Device/Driver/IMI/Protocol/MessageParser.cpp	/^  enum TState {$/;"	g	namespace:IMI::MessageParser	file:
TStringView	src/util/TStringView.hxx	/^struct TStringView : StringView {$/;"	s	struct:TStringView
TStringView	src/util/TStringView.hxx	/^struct TStringView : WStringView {$/;"	s
TTYDescriptor	src/system/TTYDescriptor.hxx	/^class TTYDescriptor : public FileDescriptor {$/;"	c
TTYEnumerator	src/Device/Port/TTYEnumerator.hpp	/^  TTYEnumerator()$/;"	f	class:TTYEnumerator
TTYEnumerator	src/Device/Port/TTYEnumerator.hpp	/^class TTYEnumerator {$/;"	c
TTYPort	src/Device/Port/TTYPort.cpp	/^TTYPort::TTYPort(EventLoop &event_loop,$/;"	f	class:TTYPort
TTYPort	src/Device/Port/TTYPort.hpp	/^class TTYPort : public BufferedPort$/;"	c
TTY_DESCRIPTOR_HXX	src/system/TTYDescriptor.hxx	31;"	d
TUNNEL	src/Engine/Waypoint/Waypoint.hpp	/^    TUNNEL,$/;"	m	class:Waypoint::Type
TURNING	src/Engine/Route/Config.hpp	/^    TURNING,$/;"	m	class:RoutePlannerConfig::ReachMode
TURNPOINT	src/Waypoint/WaypointFilter.hpp	/^  TURNPOINT,$/;"	m	class:TypeFilter
TURNPOINTS_NOT_UNIQUE	src/Engine/Task/Factory/ValidationError.hpp	/^  TURNPOINTS_NOT_UNIQUE,$/;"	m	class:TaskValidationErrorType
TURN_ARMED	src/Engine/Task/Ordered/TaskAdvance.hpp	/^    TURN_ARMED,$/;"	e	enum:TaskAdvance::State
TURN_DISARMED	src/Engine/Task/Ordered/TaskAdvance.hpp	/^    TURN_DISARMED$/;"	e	enum:TaskAdvance::State
TWaypoint	src/Device/Driver/IMI/Protocol/Types.hpp	/^  struct TWaypoint {$/;"	s	namespace:IMI
TYPE	src/Dialogs/Airspace/AirspaceList.cpp	/^  TYPE,$/;"	e	enum:Controls	file:
TYPE	src/Dialogs/Plane/PlaneDetailsDialog.cpp	/^    TYPE,$/;"	e	enum:final::Controls	file:
TYPE	src/Dialogs/Waypoint/WaypointList.cpp	/^  TYPE,$/;"	e	enum:Controls	file:
TYPE	src/Dialogs/Waypoint/dlgWaypointEdit.cpp	/^    TYPE,$/;"	e	enum:final::Rows	file:
TYPE	src/ui/canvas/opengl/Color.hpp	/^  static constexpr GLenum TYPE = GL_FIXED;$/;"	m	class:Color
TYPE	src/ui/canvas/opengl/Color.hpp	/^  static constexpr GLenum TYPE = GL_UNSIGNED_BYTE;$/;"	m	class:Color
TYPE_ACCELEROMETER	src/Android/InternalSensors.hpp	/^  static constexpr int TYPE_ACCELEROMETER = 0x1;$/;"	m	class:InternalSensors
TYPE_GYROSCOPE	src/Android/InternalSensors.hpp	/^  static constexpr int TYPE_GYROSCOPE = 0x4;$/;"	m	class:InternalSensors
TYPE_MAGNETIC_FIELD	src/Android/InternalSensors.hpp	/^  static constexpr int TYPE_MAGNETIC_FIELD = 0x2;$/;"	m	class:InternalSensors
TYPE_PRESSURE	src/Android/InternalSensors.hpp	/^  static constexpr int TYPE_PRESSURE = 0x6;$/;"	m	class:InternalSensors
TYPE_TRAITS_HPP	src/util/TypeTraits.hpp	31;"	d
TZN	src/Device/Driver/Volkslogger/vlconv.cpp	/^       FTY[50], DTM[10], CID[50], CCL[50], TZN[20];$/;"	m	struct:IGCHEADER	file:
T_FDT	src/Device/Driver/Volkslogger/vlconv.cpp	/^  BrokenDateTime T_FDT;$/;"	m	class:C_RECORD	file:
T_slCreateEngine	src/Audio/SLES/Init.cpp	/^typedef SLresult (*T_slCreateEngine)(SLObjectItf *pEngine,$/;"	t	file:
TabButton	src/Form/TabDisplay.hpp	/^  TabButton(const TCHAR *_caption, const MaskedIcon *_icon)$/;"	f	class:TabButton
TabButton	src/Form/TabDisplay.hpp	/^class TabButton {$/;"	c
TabDialogStyle	src/Dialogs/Settings/Panels/LayoutConfigPanel.cpp	/^  TabDialogStyle,$/;"	e	enum:ControlIndex	file:
TabDisplay	src/Form/TabDisplay.cpp	/^TabDisplay::TabDisplay(TabWidget &_pager, const DialogLook &_look,$/;"	f	class:TabDisplay
TabMenuDisplay	src/Form/TabMenuDisplay.cpp	/^TabMenuDisplay::TabMenuDisplay(PagerWidget &_pager,$/;"	f	class:TabMenuDisplay
TabMenuGroup	src/Form/TabMenuData.hpp	/^struct TabMenuGroup {$/;"	s
TabMenuPage	src/Form/TabMenuData.hpp	/^struct TabMenuPage {$/;"	s
TabRenderer	src/Renderer/TabRenderer.hpp	/^  TabRenderer() {$/;"	f	class:TabRenderer
TabRenderer	src/Renderer/TabRenderer.hpp	/^class TabRenderer {$/;"	c
TabStyle	src/Dialogs/DialogSettings.hpp	/^  enum class TabStyle : uint8_t {$/;"	c	struct:DialogSettings
TabWidget	src/Widget/TabWidget.hpp	/^class TabWidget : public PagerWidget {$/;"	c
TableHeader	src/Device/Driver/Volkslogger/Database.hpp	/^  struct TableHeader {$/;"	s	namespace:Volkslogger
Tabs	src/Dialogs/Task/Manager/Internal.hpp	/^  enum Tabs {$/;"	g	class:final
TakeoffAutotask	src/Engine/Task/TaskManager.cpp	/^TaskManager::TakeoffAutotask(const GeoPoint &loc, const double terrain_alt)$/;"	f	class:TaskManager
TakeoffAutotask	src/Engine/Task/Unordered/GotoTask.cpp	/^GotoTask::TakeoffAutotask(const GeoPoint& location, const double terrain_alt)$/;"	f	class:GotoTask
TakeoffLanding	src/Computer/GlideComputer.cpp	/^GlideComputer::TakeoffLanding(bool last_flying)$/;"	f	class:GlideComputer
TakeoffTime	src/Dialogs/StatusPanels/TimesStatusPanel.cpp	/^  TakeoffTime,$/;"	e	enum:Controls	file:
TargetDialogMapWindow	src/Dialogs/Task/TargetDialog.cpp	/^  TargetDialogMapWindow(TargetWidget &_widget,$/;"	f	class:TargetDialogMapWindow
TargetDialogMapWindow	src/Dialogs/Task/TargetDialog.cpp	/^class TargetDialogMapWindow : public TargetMapWindow {$/;"	c	file:
TargetDragged	src/MapWindow/TargetMapWindowDrag.cpp	/^TargetMapWindow::TargetDragged(PixelPoint p)$/;"	f	class:TargetMapWindow
TargetIsLocked	src/Engine/Task/TaskManager.cpp	/^TaskManager::TargetIsLocked(const unsigned index) const$/;"	f	class:TaskManager
TargetLock	src/Engine/Task/TaskManager.cpp	/^TaskManager::TargetLock(const unsigned index, bool do_lock)$/;"	f	class:TaskManager
TargetLock	src/Task/ProtectedTaskManager.cpp	/^ProtectedTaskManager::TargetLock(const unsigned index, bool do_lock)$/;"	f	class:ProtectedTaskManager
TargetMapWindow	src/MapWindow/TargetMapWindow.cpp	/^TargetMapWindow::TargetMapWindow(const WaypointLook &waypoint_look,$/;"	f	class:TargetMapWindow
TargetMapWindow	src/MapWindow/TargetMapWindow.hpp	/^class TargetMapWindow : public BufferWindow {$/;"	c
TargetPaintDrag	src/MapWindow/TargetMapWindowDrag.cpp	/^TargetMapWindow::TargetPaintDrag(Canvas &canvas, const PixelPoint drag_last)$/;"	f	class:TargetMapWindow
TargetVisibility	src/Renderer/TaskPointRenderer.hpp	/^  enum TargetVisibility {$/;"	g	class:TaskPointRenderer
TargetWidget	src/Dialogs/Task/TargetDialog.cpp	/^  TargetWidget(WndForm &_dialog,$/;"	f	class:TargetWidget
TargetWidget	src/Dialogs/Task/TargetDialog.cpp	/^class TargetWidget$/;"	c	file:
Task	src/Device/Driver/LX/LXN.hpp	/^  struct Task {$/;"	s	namespace:LXN
TaskAccessor	src/Replay/TaskAccessor.hpp	/^  TaskAccessor(TaskManager &_task_manager, double _floor_alt)$/;"	f	class:TaskAccessor
TaskAccessor	src/Replay/TaskAccessor.hpp	/^class TaskAccessor {$/;"	c
TaskActionsPanel	src/Dialogs/Task/Manager/TaskActionsPanel.hpp	/^class TaskActionsPanel : public RowFormWidget {$/;"	c
TaskAdvance	src/Engine/Task/Ordered/TaskAdvance.hpp	/^class TaskAdvance$/;"	c
TaskAdvanceMonitor	src/Monitor/TaskAdvanceMonitor.hpp	/^  TaskAdvanceMonitor():widget(nullptr) {}$/;"	f	class:TaskAdvanceMonitor
TaskAdvanceMonitor	src/Monitor/TaskAdvanceMonitor.hpp	/^class TaskAdvanceMonitor {$/;"	c
TaskAdvanceWidget	src/Monitor/TaskAdvanceMonitor.cpp	/^  TaskAdvanceWidget(TaskAdvanceMonitor &_monitor)$/;"	f	class:final
TaskAutoPilot	src/Replay/TaskAutoPilot.cpp	/^TaskAutoPilot::TaskAutoPilot(const AutopilotParameters &_parms)$/;"	f	class:TaskAutoPilot
TaskAutoPilot	src/Replay/TaskAutoPilot.hpp	/^class TaskAutoPilot: public AbstractAutoPilot {$/;"	c
TaskBehaviour	src/Engine/Task/TaskBehaviour.hpp	/^struct TaskBehaviour {$/;"	s
TaskBestMc	src/Engine/Task/Solvers/TaskBestMc.cpp	/^TaskBestMc::TaskBestMc(TaskPoint &tp,$/;"	f	class:TaskBestMc
TaskCommit	src/Task/ProtectedTaskManager.cpp	/^ProtectedTaskManager::TaskCommit(const OrderedTask& that)$/;"	f	class:ProtectedTaskManager
TaskComputer	src/Computer/TaskComputer.cpp	/^TaskComputer::TaskComputer(ProtectedTaskManager &_task,$/;"	f	class:TaskComputer
TaskComputer	src/Computer/TaskComputer.hpp	/^class TaskComputer$/;"	c
TaskConstraintsMonitor	src/Monitor/TaskConstraintsMonitor.hpp	/^class TaskConstraintsMonitor {$/;"	c
TaskDefaultsConfigPanel	src/Dialogs/Settings/Panels/TaskDefaultsConfigPanel.cpp	/^  TaskDefaultsConfigPanel()$/;"	f	class:final
TaskDijkstra	src/Engine/Task/PathSolvers/TaskDijkstra.hpp	/^class TaskDijkstra : protected NavDijkstra$/;"	c
TaskDijkstra	src/Engine/Task/PathSolvers/TaskDijkstraMax.hpp	/^    :TaskDijkstra(false) {}$/;"	f	class:final
TaskDijkstra	src/Engine/Task/PathSolvers/TaskDijkstraMin.hpp	/^    :TaskDijkstra(true) {}$/;"	f	class:final
TaskDistance	src/Dialogs/StatusPanels/TaskStatusPanel.cpp	/^  TaskDistance,$/;"	e	enum:Controls	file:
TaskEditPanel	src/Dialogs/Task/Manager/TaskEditPanel.cpp	/^class TaskEditPanel$/;"	c	file:
TaskEditResult	src/Task/MapTaskManager.hpp	/^  enum TaskEditResult {$/;"	g	namespace:MapTaskManager
TaskEventObserver	src/Input/TaskEventObserver.hpp	/^  constexpr TaskEventObserver()$/;"	f	class:final
TaskEvents	src/Engine/Task/TaskEvents.hpp	/^class TaskEvents$/;"	c
TaskFactoryConstraints	src/Engine/Task/Factory/Constraints.hpp	/^struct TaskFactoryConstraints {$/;"	s
TaskFactoryType	src/Engine/Task/Factory/TaskFactoryType.hpp	/^enum class TaskFactoryType: uint8_t {$/;"	c
TaskFile	src/Task/TaskFile.hpp	/^  TaskFile(Path _path)$/;"	f	class:TaskFile
TaskFile	src/Task/TaskFile.hpp	/^class TaskFile$/;"	c
TaskFileIGC	src/Task/TaskFileIGC.hpp	/^  explicit TaskFileIGC(Path _path):TaskFile(_path) {}$/;"	f	class:TaskFileIGC
TaskFileIGC	src/Task/TaskFileIGC.hpp	/^class TaskFileIGC: public TaskFile$/;"	c
TaskFileSeeYou	src/Task/TaskFileSeeYou.hpp	/^  explicit TaskFileSeeYou(Path _path):TaskFile(_path) {}$/;"	f	class:TaskFileSeeYou
TaskFileSeeYou	src/Task/TaskFileSeeYou.hpp	/^class TaskFileSeeYou: public TaskFile$/;"	c
TaskFileVisitor	src/Task/TaskStore.cpp	/^  TaskFileVisitor(TaskStore::ItemVector &_store):$/;"	f	class:TaskFileVisitor
TaskFileVisitor	src/Task/TaskStore.cpp	/^class TaskFileVisitor: public File::Visitor$/;"	c	file:
TaskFileXCSoar	src/Task/TaskFileXCSoar.hpp	/^  explicit TaskFileXCSoar(Path _path):TaskFile(_path) {}$/;"	f	class:TaskFileXCSoar
TaskFileXCSoar	src/Task/TaskFileXCSoar.hpp	/^class TaskFileXCSoar: public TaskFile$/;"	c
TaskGlideRequired	src/Engine/Task/Solvers/TaskGlideRequired.cpp	/^TaskGlideRequired::TaskGlideRequired(TaskPoint &tp,$/;"	f	class:TaskGlideRequired
TaskInterface	src/Engine/Task/TaskInterface.hpp	/^class TaskInterface$/;"	c
TaskLeg	src/Engine/Task/Points/TaskLeg.hpp	/^  TaskLeg(OrderedTaskPoint &_destination)$/;"	f	class:TaskLeg
TaskLeg	src/Engine/Task/Points/TaskLeg.hpp	/^class TaskLeg {$/;"	c
TaskListPanel	src/Dialogs/Task/Manager/TaskListPanel.cpp	/^  TaskListPanel(TaskManagerDialog &_dialog,$/;"	f	class:final
TaskLook	src/Look/TaskLook.hpp	/^struct TaskLook {$/;"	s
TaskMacCready	src/Engine/Task/Solvers/TaskMacCready.hpp	/^  TaskMacCready(TaskPoint &tp,$/;"	f	class:TaskMacCready
TaskMacCready	src/Engine/Task/Solvers/TaskMacCready.hpp	/^  TaskMacCready(const I tps_begin, const I tps_end,$/;"	f	class:TaskMacCready
TaskMacCready	src/Engine/Task/Solvers/TaskMacCready.hpp	/^class TaskMacCready : private NonCopyable$/;"	c
TaskMacCreadyRemaining	src/Engine/Task/Solvers/TaskMacCreadyRemaining.hpp	/^  TaskMacCreadyRemaining(TaskPoint &tp,$/;"	f	class:final
TaskMacCreadyRemaining	src/Engine/Task/Solvers/TaskMacCreadyRemaining.hpp	/^  TaskMacCreadyRemaining(const I tps_begin, const I tps_end,$/;"	f	class:final
TaskMacCreadyTotal	src/Engine/Task/Solvers/TaskMacCreadyTotal.hpp	/^  TaskMacCreadyTotal(const I tps_begin, const I tps_end,$/;"	f	class:final
TaskMacCreadyTravelled	src/Engine/Task/Solvers/TaskMacCreadyTravelled.hpp	/^  TaskMacCreadyTravelled(const I tps_begin,$/;"	f	class:final
TaskManager	src/Engine/Task/TaskManager.cpp	/^TaskManager::TaskManager(const TaskBehaviour &_task_behaviour,$/;"	f	class:TaskManager
TaskManager	src/Engine/Task/TaskManager.hpp	/^class TaskManager: $/;"	c
TaskMapButtonRenderer	src/Dialogs/Task/Manager/TaskMapButtonRenderer.hpp	/^  explicit TaskMapButtonRenderer(const MapLook &_look)$/;"	f	class:TaskMapButtonRenderer
TaskMapButtonRenderer	src/Dialogs/Task/Manager/TaskMapButtonRenderer.hpp	/^class TaskMapButtonRenderer : public ButtonRenderer {$/;"	c
TaskOZMapItem	src/MapWindow/Items/MapItem.cpp	/^TaskOZMapItem::TaskOZMapItem(int _index, const ObservationZonePoint &_oz,$/;"	f	class:TaskOZMapItem
TaskOZMapItem	src/MapWindow/Items/MapItem.hpp	/^struct TaskOZMapItem: public MapItem$/;"	s
TaskPoint	src/Engine/Task/Points/TaskPoint.hpp	/^  TaskPoint(TaskPointType _type, const GeoPoint &_location)$/;"	f	class:TaskPoint
TaskPoint	src/Engine/Task/Points/TaskPoint.hpp	/^class TaskPoint$/;"	c
TaskPointConstVisitor	src/Engine/Task/Visitors/TaskPointVisitor.hpp	/^class TaskPointConstVisitor {$/;"	c
TaskPointFactoryType	src/Engine/Task/Factory/TaskPointFactoryType.hpp	/^enum class TaskPointFactoryType : uint8_t {$/;"	c
TaskPointRenderer	src/Renderer/TaskPointRenderer.cpp	/^TaskPointRenderer::TaskPointRenderer(Canvas &_canvas,$/;"	f	class:TaskPointRenderer
TaskPointRenderer	src/Renderer/TaskPointRenderer.hpp	/^class TaskPointRenderer$/;"	c
TaskPointType	src/Engine/Task/Points/Type.hpp	/^enum class TaskPointType : uint8_t {$/;"	c
TaskPointType	src/MapWindow/Items/MapItem.hpp	/^enum class TaskPointType : uint8_t;$/;"	c
TaskPointWidget	src/Dialogs/Task/TaskPointDialog.cpp	/^  TaskPointWidget(WidgetDialog &_dialog,$/;"	f	class:final
TaskProgressRenderer	src/Renderer/TaskProgressRenderer.hpp	/^  TaskProgressRenderer(const TaskLook &_look):look(_look) {}$/;"	f	class:TaskProgressRenderer
TaskProgressRenderer	src/Renderer/TaskProgressRenderer.hpp	/^class TaskProgressRenderer {$/;"	c
TaskProjection	src/Geo/Flat/TaskProjection.cpp	/^TaskProjection::TaskProjection(const GeoBounds &_bounds)$/;"	f	class:TaskProjection
TaskProjection	src/Geo/Flat/TaskProjection.hpp	/^  TaskProjection():bounds(GeoBounds::Invalid()) {}$/;"	f	class:TaskProjection
TaskProjection	src/Geo/Flat/TaskProjection.hpp	/^class TaskProjection : public FlatProjection {$/;"	c
TaskRenderer	src/Renderer/TaskRenderer.cpp	/^TaskRenderer::TaskRenderer(TaskPointRenderer &_tpv, GeoBounds _screen_bounds)$/;"	f	class:TaskRenderer
TaskRenderer	src/Renderer/TaskRenderer.hpp	/^class TaskRenderer$/;"	c
TaskRulesConfigPanel	src/Dialogs/Settings/Panels/TaskRulesConfigPanel.cpp	/^  TaskRulesConfigPanel()$/;"	f	class:final
TaskSave	src/Task/FileProtectedTaskManager.cpp	/^ProtectedTaskManager::TaskSave(Path path)$/;"	f	class:ProtectedTaskManager
TaskSaveDefault	src/Task/FileProtectedTaskManager.cpp	/^ProtectedTaskManager::TaskSaveDefault()$/;"	f	class:ProtectedTaskManager
TaskSize	src/Engine/Task/TaskManager.cpp	/^TaskManager::TaskSize() const$/;"	f	class:TaskManager
TaskSolution	src/Engine/Task/Solvers/TaskSolution.hpp	/^namespace TaskSolution$/;"	n
TaskSolveTravelled	src/Engine/Task/Solvers/TaskCruiseEfficiency.hpp	/^    :TaskSolveTravelled(tps, activeTaskPoint, _aircraft,$/;"	f	class:final
TaskSolveTravelled	src/Engine/Task/Solvers/TaskEffectiveMacCready.hpp	/^    :TaskSolveTravelled(tps, activeTaskPoint, _aircraft,$/;"	f	class:final
TaskSolveTravelled	src/Engine/Task/Solvers/TaskSolveTravelled.hpp	/^class TaskSolveTravelled : protected ZeroFinder {$/;"	c
TaskSpeedCaption	src/Renderer/TaskSpeedRenderer.cpp	/^TaskSpeedCaption(TCHAR *sTmp,$/;"	f
TaskSpeedUnitsValue	src/Profile/ProfileKeys.cpp	/^const char TaskSpeedUnitsValue[] = "TaskSpeedUnit";$/;"	m	namespace:ProfileKeys	file:
TaskStartMargins	src/Engine/Task/TaskBehaviour.hpp	/^struct TaskStartMargins {$/;"	s
TaskStats	src/Engine/Task/Stats/TaskStats.hpp	/^class TaskStats $/;"	c
TaskStatsComputer	src/Engine/Task/Computer/TaskStatsComputer.hpp	/^class TaskStatsComputer {$/;"	c
TaskStatusPanel	src/Dialogs/StatusPanels/TaskStatusPanel.hpp	/^class TaskStatusPanel : public StatusPanel, DataFieldListener {$/;"	c
TaskStore	src/Task/TaskStore.hpp	/^class TaskStore $/;"	c
TaskSummary	src/Engine/Task/Stats/TaskSummary.hpp	/^struct TaskSummary {$/;"	s
TaskSummaryPoint	src/Engine/Task/Stats/TaskSummary.hpp	/^struct TaskSummaryPoint {$/;"	s
TaskSummaryShape	src/Dialogs/Task/dlgTaskHelpers.cpp	/^TaskSummaryShape(const OrderedTask *task, TCHAR *text)$/;"	f	file:
TaskTime	src/Dialogs/StatusPanels/TaskStatusPanel.cpp	/^  TaskTime,$/;"	e	enum:Controls	file:
TaskType	src/Dialogs/Settings/Panels/TaskDefaultsConfigPanel.cpp	/^  TaskType,$/;"	e	enum:ControlIndex	file:
TaskType	src/Engine/Task/TaskType.hpp	/^enum class TaskType : uint8_t {$/;"	c
TaskType	src/Profile/ProfileKeys.cpp	/^const char TaskType[] = "TaskType";$/;"	m	namespace:ProfileKeys	file:
TaskValidationErrorType	src/Engine/Task/Factory/ValidationError.hpp	/^enum class TaskValidationErrorType : uint8_t {$/;"	c
TaskVario	src/Engine/Task/Stats/TaskVario.hpp	/^class TaskVario$/;"	c
TaskVarioComputer	src/Engine/Task/Computer/TaskVarioComputer.cpp	/^TaskVarioComputer::TaskVarioComputer()$/;"	f	class:TaskVarioComputer
TaskVarioComputer	src/Engine/Task/Computer/TaskVarioComputer.hpp	/^class TaskVarioComputer$/;"	c
TaskViewClicked	src/Dialogs/Task/Manager/Internal.hpp	/^  void TaskViewClicked() {$/;"	f	class:final
TaskWaypoint	src/Engine/Task/Points/TaskWaypoint.hpp	/^  TaskWaypoint(TaskPointType _type, WaypointPtr &&wp)$/;"	f	class:TaskWaypoint
TaskWaypoint	src/Engine/Task/Points/TaskWaypoint.hpp	/^class TaskWaypoint :$/;"	c
TeamActions	src/TeamActions.hpp	/^namespace TeamActions {$/;"	n
TeamCode	src/TeamCode/TeamCode.hpp	/^class TeamCode$/;"	c
TeamCodeSettings	src/TeamCode/Settings.hpp	/^struct TeamCodeSettings {$/;"	s
TeamCodeWidget	src/Dialogs/Traffic/TeamCodeDialog.cpp	/^  TeamCodeWidget(const DialogLook &look)$/;"	f	class:final
TeamInfo	src/NMEA/Derived.hpp	/^struct TeamInfo$/;"	s
TeamcodeRefWaypoint	src/Profile/ProfileKeys.cpp	/^const char TeamcodeRefWaypoint[] = "TeamcodeRefWaypoint";$/;"	m	namespace:ProfileKeys	file:
Tell	src/io/ConvertLineReader.cpp	/^ConvertLineReader::Tell() const$/;"	f	class:ConvertLineReader
Tell	src/io/FileHandle.hpp	/^  long Tell() {$/;"	f	class:FileHandle
Tell	src/io/FileLineReader.cpp	/^FileLineReaderA::Tell() const$/;"	f	class:FileLineReaderA
Tell	src/io/LineReader.hpp	/^  virtual long Tell() const {$/;"	f	class:LineReader
Tell	src/io/ZipLineReader.cpp	/^ZipLineReaderA::Tell() const$/;"	f	class:ZipLineReaderA
TempAirspaceType	src/Airspace/AirspaceParser.cpp	/^  TempAirspaceType() {$/;"	f	struct:TempAirspaceType
TempAirspaceType	src/Airspace/AirspaceParser.cpp	/^struct TempAirspaceType$/;"	s	file:
Temperature	src/Atmosphere/Temperature.hpp	/^  explicit constexpr Temperature(double kelvin_value):value(kelvin_value) {}$/;"	f	class:Temperature
Temperature	src/Atmosphere/Temperature.hpp	/^class Temperature {$/;"	c
Temperature	src/Dialogs/Settings/dlgBasicSettings.cpp	/^  Temperature,$/;"	e	enum:ControlIndex	file:
Temperature	src/Hardware/Battery.cpp	/^    unsigned Temperature = 0;$/;"	m	namespace:Power::Battery	file:
TemperatureChartCaption	src/Renderer/CuRenderer.cpp	/^TemperatureChartCaption(TCHAR *sTmp, const CuSonde &cu_sonde)$/;"	f
TemperatureUnit	src/Dialogs/Device/CAI302/UnitsEditor.hpp	/^    TemperatureUnit,$/;"	e	enum:final::Controls
TemperatureUnitsValue	src/Profile/ProfileKeys.cpp	/^const char TemperatureUnitsValue[] = "TemperatureUnit";$/;"	m	namespace:ProfileKeys	file:
TemplateCopyASCII	src/util/WASCII.cxx	/^TemplateCopyASCII(D *dest, size_t dest_size, const S *src, const S *src_end)$/;"	f	file:
TerminalLook	src/Look/TerminalLook.hpp	/^struct TerminalLook {$/;"	s
TerminalWindow	src/Screen/TerminalWindow.hpp	/^  TerminalWindow(const TerminalLook &_look):look(_look) {}$/;"	f	class:TerminalWindow
TerminalWindow	src/Screen/TerminalWindow.hpp	/^class TerminalWindow : public PaintWindow {$/;"	c
TerrainBrightness	src/Dialogs/Settings/Panels/TerrainDisplayConfigPanel.cpp	/^  TerrainBrightness,$/;"	e	enum:ControlIndex	file:
TerrainBrightness	src/Profile/ProfileKeys.cpp	/^const char TerrainBrightness[] = "TerrainBrightness";$/;"	m	namespace:ProfileKeys	file:
TerrainCollision	src/InfoBoxes/Content/Type.hpp	/^    TerrainCollision,$/;"	e	enum:InfoBoxFactory::Type
TerrainColors	src/Dialogs/Settings/Panels/TerrainDisplayConfigPanel.cpp	/^  TerrainColors,$/;"	e	enum:ControlIndex	file:
TerrainContours	src/Dialogs/Settings/Panels/TerrainDisplayConfigPanel.cpp	/^  TerrainContours,$/;"	e	enum:ControlIndex	file:
TerrainContours	src/Profile/ProfileKeys.cpp	/^const char TerrainContours[] = "TerrainContours";$/;"	m	namespace:ProfileKeys	file:
TerrainContrast	src/Dialogs/Settings/Panels/TerrainDisplayConfigPanel.cpp	/^  TerrainContrast,$/;"	e	enum:ControlIndex	file:
TerrainContrast	src/Profile/ProfileKeys.cpp	/^const char TerrainContrast[] = "TerrainContrast";$/;"	m	namespace:ProfileKeys	file:
TerrainDisplayConfigPanel	src/Dialogs/Settings/Panels/TerrainDisplayConfigPanel.cpp	/^  TerrainDisplayConfigPanel()$/;"	f	class:final
TerrainHeight	src/Computer/GlideComputerAirData.cpp	/^GlideComputerAirData::TerrainHeight(const MoreData &basic,$/;"	f	class:GlideComputerAirData
TerrainHeight	src/Dialogs/Settings/Panels/SafetyFactorsConfigPanel.cpp	/^  TerrainHeight,$/;"	e	enum:ControlIndex	file:
TerrainHeight	src/Terrain/Height.hpp	/^  explicit constexpr TerrainHeight(int16_t _value):value(_value) {}$/;"	f	class:TerrainHeight
TerrainHeight	src/Terrain/Height.hpp	/^class TerrainHeight {$/;"	c
TerrainInfo	src/NMEA/Derived.hpp	/^struct TerrainInfo$/;"	s
TerrainLoader	src/Terrain/Loader.hpp	/^  TerrainLoader(SharedMutex &_mutex, RasterTileCache &_rtc,$/;"	f	class:TerrainLoader
TerrainLoader	src/Terrain/Loader.hpp	/^class TerrainLoader {$/;"	c
TerrainPreview	src/Dialogs/Settings/Panels/TerrainDisplayConfigPanel.cpp	/^  TerrainPreview,$/;"	e	enum:ControlIndex	file:
TerrainPreviewWindow	src/Dialogs/Settings/Panels/TerrainDisplayConfigPanel.cpp	/^  TerrainPreviewWindow(const RasterTerrain &terrain)$/;"	f	class:TerrainPreviewWindow
TerrainPreviewWindow	src/Dialogs/Settings/Panels/TerrainDisplayConfigPanel.cpp	/^class TerrainPreviewWindow : public PaintWindow {$/;"	c	file:
TerrainRamp	src/Profile/ProfileKeys.cpp	/^const char TerrainRamp[] = "TerrainRamp";$/;"	m	namespace:ProfileKeys	file:
TerrainRenderer	src/Terrain/TerrainRenderer.cpp	/^TerrainRenderer::TerrainRenderer(const RasterTerrain &_terrain)$/;"	f	class:TerrainRenderer
TerrainRenderer	src/Terrain/TerrainRenderer.hpp	/^class TerrainRenderer {$/;"	c
TerrainRendererSettings	src/Terrain/TerrainSettings.hpp	/^struct TerrainRendererSettings {$/;"	s
TerrainRoute	src/Engine/Route/TerrainRoute.cpp	/^TerrainRoute::TerrainRoute():$/;"	f	class:TerrainRoute
TerrainRoute	src/Engine/Route/TerrainRoute.hpp	/^class TerrainRoute: public RoutePlanner$/;"	c
TerrainShading	src/Terrain/RasterRenderer.cpp	/^TerrainShading(const int illum, RGB8Color color)$/;"	f
TerrainSlopeShading	src/Dialogs/Settings/Panels/TerrainDisplayConfigPanel.cpp	/^  TerrainSlopeShading,$/;"	e	enum:ControlIndex	file:
TerrainThread	src/Terrain/Thread.cpp	/^TerrainThread::TerrainThread(RasterTerrain &_terrain,$/;"	f	class:TerrainThread
TerrainType	src/Terrain/Height.hpp	/^enum class TerrainType : uint8_t {$/;"	c
TerrainWarning	src/Computer/RouteComputer.cpp	/^RouteComputer::TerrainWarning(const MoreData &basic,$/;"	f	class:RouteComputer
TerrainXSRenderer	src/CrossSection/TerrainXSRenderer.hpp	/^  TerrainXSRenderer(const CrossSectionLook &_look): look(_look) {}$/;"	f	class:TerrainXSRenderer
TerrainXSRenderer	src/CrossSection/TerrainXSRenderer.hpp	/^class TerrainXSRenderer$/;"	c
Test	src/thread/Trigger.hpp	/^  bool Test() const {$/;"	f	class:Trigger
TestFAITriangle	src/Engine/Task/Shapes/FAITrianglePointValidator.cpp	/^FAITrianglePointValidator::TestFAITriangle(const double d1, const double d2,$/;"	f	class:FAITrianglePointValidator
Text	src/Dialogs/DialogSettings.hpp	/^    Text,$/;"	m	class:DialogSettings::TabStyle
Text2Event	src/Input/InputLookup.cpp	/^static constexpr Text2EventSTRUCT Text2Event[] = {$/;"	v	file:
Text2EventSTRUCT	src/Input/InputLookup.cpp	/^struct Text2EventSTRUCT {$/;"	s	file:
Text2GCE	src/Input/InputLookup.cpp	/^static const TCHAR *const Text2GCE[] = {$/;"	v	file:
Text2NE	src/Input/InputLookup.cpp	/^static const TCHAR *const Text2NE[] = {$/;"	v	file:
TextButtonRenderer	src/Renderer/TextButtonRenderer.hpp	/^  TextButtonRenderer(const ButtonLook &_look,$/;"	f	class:TextButtonRenderer
TextButtonRenderer	src/Renderer/TextButtonRenderer.hpp	/^  explicit TextButtonRenderer(const ButtonLook &_look)$/;"	f	class:TextButtonRenderer
TextButtonRenderer	src/Renderer/TextButtonRenderer.hpp	/^class TextButtonRenderer : public ButtonRenderer {$/;"	c
TextCache	src/ui/canvas/custom/Cache.hpp	/^namespace TextCache {$/;"	n
TextCacheKey	src/ui/canvas/custom/Cache.cpp	/^  TextCacheKey(TextCacheKey &&other)$/;"	f	struct:TextCacheKey
TextCacheKey	src/ui/canvas/custom/Cache.cpp	/^struct TextCacheKey {$/;"	s	file:
TextEntryDialog	src/Dialogs/TextEntry.cpp	/^TextEntryDialog(TCHAR *text, size_t width,$/;"	f
TextEntryDialog	src/Dialogs/TextEntry.hpp	/^TextEntryDialog(BasicStringBuffer<TCHAR, N> &text,$/;"	f
TextInBox	src/Renderer/TextInBox.cpp	/^TextInBox(Canvas &canvas, const TCHAR *text, PixelPoint p,$/;"	f
TextInBoxMode	src/Renderer/TextInBox.hpp	/^struct TextInBoxMode {$/;"	s
TextInBoxMoveInView	src/Renderer/TextInBox.cpp	/^TextInBoxMoveInView(PixelRect &rc, const PixelRect &map_rc)$/;"	f	file:
TextInput	src/Dialogs/Settings/Panels/InterfaceConfigPanel.cpp	/^  TextInput,$/;"	e	enum:ControlIndex	file:
TextInputStyle	src/Dialogs/DialogSettings.hpp	/^  enum class TextInputStyle : uint8_t {$/;"	c	struct:DialogSettings
TextListWidget	src/Widget/TextListWidget.hpp	/^class TextListWidget : public ListWidget {$/;"	c
TextMode	src/Device/Driver/FLARM/TextProtocol.cpp	/^FlarmDevice::TextMode(OperationEnvironment &env)$/;"	f	class:FlarmDevice
TextRenderer	src/Renderer/TextRenderer.hpp	/^class TextRenderer {$/;"	c
TextRowRenderer	src/Renderer/TextRowRenderer.hpp	/^class TextRowRenderer {$/;"	c
TextUtil	src/Android/TextUtil.cpp	/^TextUtil::TextUtil(jobject _obj)$/;"	f	class:TextUtil
TextUtil	src/Android/TextUtil.hpp	/^class TextUtil : protected Java::GlobalObject {$/;"	c
TextWidget	src/Widget/TextWidget.hpp	/^class TextWidget : public WindowWidget {$/;"	c
TextWriter	src/io/TextWriter.cpp	/^TextWriter::TextWriter(Path path, bool append)$/;"	f	class:TextWriter
TextWriter	src/io/TextWriter.hpp	/^  TextWriter(TextWriter &&other)$/;"	f	class:TextWriter
TextWriter	src/io/TextWriter.hpp	/^class TextWriter {$/;"	c
Texture	src/Android/TextUtil.hpp	/^    Texture(unsigned _id, unsigned _width, unsigned _height,$/;"	f	struct:TextUtil::Texture
Texture	src/Android/TextUtil.hpp	/^  struct Texture {$/;"	s	class:TextUtil
Thermal	src/Tracking/SkyLines/Data.hpp	/^    Thermal(const AGeoPoint &_bottom, const AGeoPoint &_top, double _lift)$/;"	f	struct:SkyLinesTracking::Data::Thermal
Thermal	src/Tracking/SkyLines/Data.hpp	/^  struct Thermal {$/;"	s	struct:SkyLinesTracking::Data
Thermal	src/Tracking/SkyLines/Protocol.hpp	/^struct Thermal {$/;"	s	namespace:SkyLinesTracking
ThermalAssistantLook	src/Look/ThermalAssistantLook.hpp	/^struct ThermalAssistantLook {$/;"	s
ThermalAssistantPosition	src/UISettings.hpp	/^  enum class ThermalAssistantPosition: uint8_t {$/;"	c	struct:UISettings
ThermalAssistantRenderer	src/Gauge/ThermalAssistantRenderer.cpp	/^ThermalAssistantRenderer::ThermalAssistantRenderer(const ThermalAssistantLook &_look,$/;"	f	class:ThermalAssistantRenderer
ThermalAssistantRenderer	src/Gauge/ThermalAssistantRenderer.hpp	/^class ThermalAssistantRenderer$/;"	c
ThermalAssistantWindow	src/Gauge/ThermalAssistantWindow.cpp	/^ThermalAssistantWindow::ThermalAssistantWindow(const ThermalAssistantLook &_look,$/;"	f	class:ThermalAssistantWindow
ThermalAssistantWindow	src/Gauge/ThermalAssistantWindow.hpp	/^class ThermalAssistantWindow : public AntiFlickerWindow$/;"	c
ThermalBand	src/Engine/ThermalBand/ThermalBand.hpp	/^class ThermalBand {$/;"	c
ThermalBandComputer	src/Computer/ThermalBandComputer.hpp	/^class ThermalBandComputer {$/;"	c
ThermalBandLook	src/Look/ThermalBandLook.hpp	/^struct ThermalBandLook {$/;"	s
ThermalBandRenderer	src/Renderer/ThermalBandRenderer.hpp	/^  ThermalBandRenderer(const ThermalBandLook &_look,$/;"	f	class:ThermalBandRenderer
ThermalBandRenderer	src/Renderer/ThermalBandRenderer.hpp	/^class ThermalBandRenderer {$/;"	c
ThermalEncounterBand	src/Engine/ThermalBand/ThermalEncounterBand.hpp	/^class ThermalEncounterBand : public ThermalBand$/;"	c
ThermalEncounterCollection	src/Engine/ThermalBand/ThermalEncounterCollection.hpp	/^class ThermalEncounterCollection : public ThermalBand {$/;"	c
ThermalExpressCreateOnPort	src/Device/Driver/ThermalExpress/Driver.cpp	/^ThermalExpressCreateOnPort(const DeviceConfig &config, Port &com_port)$/;"	f	file:
ThermalExpressDevice	src/Device/Driver/ThermalExpress/Driver.hpp	/^class ThermalExpressDevice : public AbstractDevice {$/;"	c
ThermalLocator	src/Computer/ThermalLocator.hpp	/^class ThermalLocator {$/;"	c
ThermalLocatorInfo	src/NMEA/ThermalLocator.hpp	/^struct ThermalLocatorInfo$/;"	s
ThermalMapItem	src/MapWindow/Items/MapItem.hpp	/^  ThermalMapItem(const ThermalSource &_thermal)$/;"	f	struct:ThermalMapItem
ThermalMapItem	src/MapWindow/Items/MapItem.hpp	/^struct ThermalMapItem: public MapItem$/;"	s
ThermalRequestPacket	src/Tracking/SkyLines/Protocol.hpp	/^struct ThermalRequestPacket {$/;"	s	namespace:SkyLinesTracking
ThermalResponsePacket	src/Tracking/SkyLines/Protocol.hpp	/^struct ThermalResponsePacket {$/;"	s	namespace:SkyLinesTracking
ThermalResponseSender	src/Cloud/Sender.hpp	/^class ThermalResponseSender {$/;"	c
ThermalSlice	src/Engine/ThermalBand/ThermalSlice.hpp	/^struct ThermalSlice {$/;"	s
ThermalSource	src/NMEA/ThermalLocator.hpp	/^struct ThermalSource$/;"	s
ThermalSources	src/Computer/GlideComputerAirData.cpp	/^GlideComputerAirData::ThermalSources(const MoreData &basic,$/;"	f	class:GlideComputerAirData
ThermalSubmitPacket	src/Tracking/SkyLines/Protocol.hpp	/^struct ThermalSubmitPacket {$/;"	s	namespace:SkyLinesTracking
Thin	src/Engine/Trace/Trace.cpp	/^Trace::Thin()$/;"	f	class:Trace
Thin2	src/Engine/Trace/Trace.cpp	/^Trace::Thin2()$/;"	f	class:Trace
ThinToSize	src/Geo/SearchPointVector.cpp	/^SearchPointVector::ThinToSize(const unsigned max_size)$/;"	f	class:SearchPointVector
Thre	src/Dialogs/Device/FLARM/ConfigWidget.hpp	/^    Thre,$/;"	e	enum:final::Controls
Thread	src/thread/SuspensibleThread.hpp	/^  SuspensibleThread(const char *_name) noexcept:Thread(_name) {}$/;"	f	class:SuspensibleThread
Thread	src/thread/Thread.hpp	/^class Thread {$/;"	c
ThreadHandle	src/thread/Handle.hpp	/^class ThreadHandle {$/;"	c
ThreadId	src/thread/Id.hxx	/^class ThreadId {$/;"	c
ThreadedOperationEnvironment	src/Operation/ThreadedOperationEnvironment.hpp	/^class ThreadedOperationEnvironment$/;"	c
Threshold	src/Engine/Task/Shapes/FAITriangleSettings.hpp	/^  enum class Threshold : uint8_t {$/;"	c	struct:FAITriangleSettings
ThrowError	src/lua/Catch.cpp	/^Lua::ThrowError(lua_State *L, Error &&error)$/;"	f	class:Lua
ThrowException	src/util/Exception.hxx	/^ThrowException(T &&t)$/;"	f
ThrowException	src/util/Exception.hxx	/^ThrowException(std::exception_ptr ep)$/;"	f
Tick	src/Device/MultipleDevices.cpp	/^MultipleDevices::Tick()$/;"	f	class:MultipleDevices
Tick	src/Logger/FlightLogger.cpp	/^FlightLogger::Tick(const MoreData &basic, const DerivedInfo &calculated)$/;"	f	class:FlightLogger
Tick	src/Tracking/SkyLines/Glue.cpp	/^SkyLinesTracking::Glue::Tick(const NMEAInfo &basic,$/;"	f	class:SkyLinesTracking::Glue
TickInternal	src/Logger/FlightLogger.cpp	/^FlightLogger::TickInternal(const MoreData &basic,$/;"	f	class:FlightLogger
TiffLoader	src/ui/canvas/custom/LibTiff.cpp	/^  explicit TiffLoader(Path path)$/;"	f	class:TiffLoader
TiffLoader	src/ui/canvas/custom/LibTiff.cpp	/^class TiffLoader {$/;"	c	file:
TiffOpen	src/ui/canvas/custom/LibTiff.cpp	/^TiffOpen(Path path, const char *mode)$/;"	f	file:
TiffPixelToGeoPoint	src/ui/canvas/custom/LibTiff.cpp	/^TiffPixelToGeoPoint(GTIF &gtif, GTIFDefn &defn, double x, double y)$/;"	f	file:
TimeConfigPanel	src/Dialogs/Settings/Panels/TimeConfigPanel.cpp	/^  TimeConfigPanel()$/;"	f	class:final
TimeEntryDialog	src/Dialogs/TimeEntry.cpp	/^TimeEntryDialog(const TCHAR *caption, RoughTime &value,$/;"	f
TimeHasAdvanced	src/Device/Parser.cpp	/^NMEAParser::TimeHasAdvanced(double this_time, NMEAInfo &info)$/;"	f	class:NMEAParser
TimeHasAdvanced	src/Device/Parser.cpp	/^NMEAParser::TimeHasAdvanced(double this_time, double &last_time, NMEAInfo &info)$/;"	f	class:NMEAParser
TimeHasAdvanced	src/Device/Parser.cpp	/^TimeHasAdvanced(double this_time, double last_time)$/;"	f	file:
TimeLocal	src/time/LocalTime.cpp	/^TimeLocal(int localtime, RoughTimeDelta utc_offset)$/;"	f
TimeMetric	src/Engine/Trace/Trace.hpp	/^    static unsigned TimeMetric(const TracePoint &last, const TracePoint &node,$/;"	f	struct:Trace::TraceDelta
TimeUnderStartMaxHeight	src/Engine/Task/Stats/CommonStats.hpp	/^  double TimeUnderStartMaxHeight;$/;"	m	class:CommonStats
TimeoutClock	src/time/TimeoutClock.hpp	/^class TimeoutClock : private PeriodClock {$/;"	c
TimerQueue	src/ui/event/shared/TimerQueue.hpp	/^class TimerQueue {$/;"	c	namespace:UI
TimerRecord	src/ui/event/shared/TimerQueue.hpp	/^  struct TimerRecord {$/;"	s	class:UI::TimerQueue
TimesStatusPanel	src/Dialogs/StatusPanels/TimesStatusPanel.hpp	/^class TimesStatusPanel : public StatusPanel {$/;"	c
ToASCII	src/Device/Driver/CAI302/Manage.cpp	/^ToASCII(char *dest, size_t dest_size, const TCHAR *src)$/;"	f	file:
ToAbsoluteFloat	src/Math/Angle.hpp	/^    constexpr double ToAbsoluteFloat() const {$/;"	f	struct:Angle::DMS
ToAircraftState	src/NMEA/Aircraft.cpp	/^ToAircraftState(const MoreData &info, const DerivedInfo &calculated)$/;"	f
ToAngle	src/lua/Geo.cpp	/^Angle ToAngle(lua_State *L, int idx) {$/;"	f	namespace:Lua
ToArrayQuadrilateral	src/MapWindow/OverlayBitmap.cpp	/^ToArrayQuadrilateral(const GeoQuadrilateral q)$/;"	f	file:
ToBox	src/MapWindow/OverlayBitmap.cpp	/^ToBox(const GeoBounds b)$/;"	f	file:
ToBrokenDateTime	src/time/BrokenDateTime.cpp	/^ToBrokenDateTime(const FILETIME &ft)$/;"	f	file:
ToBrokenDateTime	src/time/BrokenDateTime.cpp	/^ToBrokenDateTime(const SYSTEMTIME st)$/;"	f	file:
ToBrokenDateTime	src/time/BrokenDateTime.cpp	/^ToBrokenDateTime(const struct tm &tm)$/;"	f	file:
ToCelsius	src/Atmosphere/Temperature.hpp	/^  constexpr double ToCelsius() const {$/;"	f	class:Temperature
ToDMM	src/Math/Angle.cpp	/^Angle::ToDMM(unsigned &dd, unsigned &mm, unsigned &mmm,$/;"	f	class:Angle
ToDMS	src/Math/Angle.cpp	/^Angle::ToDMS() const$/;"	f	class:Angle
ToDouble	src/Terrain/Height.hpp	/^  constexpr double ToDouble(double invalid_value,$/;"	f	class:TerrainHeight
ToFileTime	src/time/BrokenDateTime.cpp	/^ToFileTime(const BrokenDateTime &dt)$/;"	f	file:
ToFilter	src/Dialogs/Waypoint/WaypointList.cpp	/^  void ToFilter(WaypointFilter &filter, Angle heading) const {$/;"	f	struct:WaypointListDialogState
ToFix	src/Tracking/SkyLines/Assemble.cpp	/^SkyLinesTracking::ToFix(uint64_t key, const NMEAInfo &basic)$/;"	f	class:SkyLinesTracking
ToFloat	src/Math/Angle.hpp	/^    constexpr double ToFloat() const {$/;"	f	struct:Angle::DMS
ToGLM	src/ui/canvas/opengl/Geo.cpp	/^ToGLM(const WindowProjection &projection, const GeoPoint &reference)$/;"	f
ToGLexact	src/ui/opengl/Types.hpp	/^ToGLexact(GLvalue value)$/;"	f
ToGeoBounds	src/Terrain/WorldFile.cpp	/^  GeoBounds ToGeoBounds(unsigned width, unsigned height) const {$/;"	f	struct:WorldFileData
ToGeoPoint	src/Geo/UTM.cpp	/^UTM::ToGeoPoint() const$/;"	f	class:UTM
ToGeoPoint	src/Topography/TopographyFile.hpp	/^  GeoPoint ToGeoPoint(const ShapePoint &p) const {$/;"	f	class:TopographyFile
ToGeoPoint	src/lua/Geo.cpp	/^GeoPoint ToGeoPoint(lua_State *L, int idx) {$/;"	f	namespace:Lua
ToHalfHours	src/Weather/Rasp/RaspCache.cpp	/^ToHalfHours(BrokenTime t)$/;"	f	file:
ToInteger	src/ui/canvas/memory/PixelTraits.hpp	/^  static constexpr integer_type ToInteger(color_type c) {$/;"	f	struct:BGRAPixelTraits
ToKML	src/Cloud/ToKML.cpp	/^ToKML(BufferedOutputStream &os, const AGeoPoint p)$/;"	f	file:
ToKML	src/Cloud/ToKML.cpp	/^ToKML(BufferedOutputStream &os, const CloudClient &client)$/;"	f	file:
ToKML	src/Cloud/ToKML.cpp	/^ToKML(BufferedOutputStream &os, const CloudClientContainer &clients)$/;"	f	file:
ToKML	src/Cloud/ToKML.cpp	/^ToKML(BufferedOutputStream &os, const CloudData &data)$/;"	f	file:
ToKML	src/Cloud/ToKML.cpp	/^ToKML(BufferedOutputStream &os, const CloudThermal &thermal)$/;"	f	file:
ToKML	src/Cloud/ToKML.cpp	/^ToKML(BufferedOutputStream &os, const CloudThermalContainer &thermals)$/;"	f	file:
ToKML	src/Cloud/ToKML.cpp	/^ToKML(BufferedOutputStream &os, const GeoPoint p)$/;"	f	file:
ToKelvin	src/Atmosphere/Temperature.hpp	/^  constexpr double ToKelvin() const {$/;"	f	class:Temperature
ToNative	src/Atmosphere/Temperature.hpp	/^  constexpr double ToNative() const {$/;"	f	class:Temperature
ToOrigin	src/Form/ScrollBar.cpp	/^ScrollBar::ToOrigin(unsigned size, unsigned view_size, int y) const$/;"	f	class:ScrollBar
ToOverview	src/Terrain/RasterTraits.hpp	/^  constexpr unsigned ToOverview(unsigned x) {$/;"	f	namespace:RasterTraits
ToOverviewCeil	src/Terrain/RasterTraits.hpp	/^  constexpr unsigned ToOverviewCeil(unsigned x) {$/;"	f	namespace:RasterTraits
ToPolarInfo	src/Polar/PolarStore.cpp	/^PolarStore::Item::ToPolarInfo() const$/;"	f	class:PolarStore::Item
ToPolarShape	src/Polar/PolarStore.cpp	/^PolarStore::Item::ToPolarShape() const$/;"	f	class:PolarStore::Item
ToRGB565	src/ui/canvas/memory/Export.hpp	/^ToRGB565(BGRA8Color c)$/;"	f
ToString	src/FLARM/Error.cpp	/^FlarmError::ToString(Code code)$/;"	f	class:FlarmError
ToString	src/FLARM/Error.cpp	/^FlarmError::ToString(Severity severity)$/;"	f	class:FlarmError
ToString	src/java/Exception.cxx	/^	:std::runtime_error(Java::String(env, Object::toString(env, e)).ToString())$/;"	f
ToSysAltitude	src/Units/Units.hpp	/^  ToSysAltitude(double value)$/;"	f	namespace:Units
ToSysDistance	src/Units/Units.hpp	/^  ToSysDistance(double value)$/;"	f	namespace:Units
ToSysPressure	src/Units/Units.hpp	/^  ToSysPressure(double Value)$/;"	f	namespace:Units
ToSysSpeed	src/Units/Units.hpp	/^  ToSysSpeed(double value)$/;"	f	namespace:Units
ToSysTaskSpeed	src/Units/Units.hpp	/^  ToSysTaskSpeed(double value)$/;"	f	namespace:Units
ToSysUnit	src/Units/System.cpp	/^Units::ToSysUnit(double value, Unit unit)$/;"	f	class:Units
ToSysVSpeed	src/Units/Units.hpp	/^  ToSysVSpeed(double value)$/;"	f	namespace:Units
ToSysWindSpeed	src/Units/Units.hpp	/^  ToSysWindSpeed(double value)$/;"	f	namespace:Units
ToSystemTime	src/time/BrokenDateTime.cpp	/^ToSystemTime(const BrokenDateTime &dt)$/;"	f	file:
ToUTF8	src/system/Path.cpp	/^Path::ToUTF8() const$/;"	f	class:Path
ToUTF8	src/system/Path.hpp	/^  std::string ToUTF8() const {$/;"	f	class:AllocatedPath
ToUnixTimeUTC	src/time/BrokenDateTime.cpp	/^BrokenDateTime::ToUnixTimeUTC() const$/;"	f	class:BrokenDateTime
ToUser	src/Units/Temperature.cpp	/^Temperature::ToUser() const$/;"	f	class:Temperature
ToUserAltitude	src/Units/Units.hpp	/^  ToUserAltitude(double value)$/;"	f	namespace:Units
ToUserDistance	src/Units/Units.hpp	/^  ToUserDistance(double value)$/;"	f	namespace:Units
ToUserPressure	src/Units/Units.cpp	/^Units::ToUserPressure(AtmosphericPressure value)$/;"	f	class:Units
ToUserPressure	src/Units/Units.hpp	/^  ToUserPressure(double Value)$/;"	f	namespace:Units
ToUserSpeed	src/Units/Units.hpp	/^  ToUserSpeed(double value)$/;"	f	namespace:Units
ToUserTaskSpeed	src/Units/Units.hpp	/^  ToUserTaskSpeed(double value)$/;"	f	namespace:Units
ToUserUnit	src/Units/System.cpp	/^Units::ToUserUnit(double value, Unit unit)$/;"	f	class:Units
ToUserVSpeed	src/Units/Units.hpp	/^  ToUserVSpeed(double value)$/;"	f	namespace:Units
ToUserWindSpeed	src/Units/Units.hpp	/^  ToUserWindSpeed(double value)$/;"	f	namespace:Units
ToViewport	src/ui/canvas/opengl/Rotate.cpp	/^OpenGL::ToViewport(PixelRect &rc)$/;"	f	class:OpenGL
ToZero	src/Audio/ToneSynthesiser.cpp	/^ToneSynthesiser::ToZero() const$/;"	f	class:ToneSynthesiser
TodayUTC	src/time/BrokenDate.cpp	/^BrokenDate::TodayUTC()$/;"	f	class:BrokenDate
ToggleArmed	src/Engine/Task/Ordered/TaskAdvance.cpp	/^TaskAdvance::ToggleArmed()$/;"	f	class:TaskAdvance
ToggleAutoZoom	src/Gauge/BigTrafficWidget.cpp	/^  void ToggleAutoZoom() {$/;"	f	class:FlarmTrafficControl
ToggleForceFLARMRadar	src/MainWindow.cpp	/^MainWindow::ToggleForceFLARMRadar()$/;"	f	class:MainWindow
ToggleLargeExtra	src/Widget/TabWidget.hpp	/^  void ToggleLargeExtra() {$/;"	f	class:TabWidget
ToggleNorthUp	src/Gauge/BigTrafficWidget.cpp	/^  void ToggleNorthUp() {$/;"	f	class:FlarmTrafficControl
TogglePan	src/MapWindow/GlueMapWindowDisplayMode.cpp	/^GlueMapWindow::TogglePan()$/;"	f	class:GlueMapWindow
TogglePan	src/Pan.cpp	/^TogglePan()$/;"	f
TogglePause	src/Dialogs/Device/PortMonitor.cpp	/^PortMonitorWidget::TogglePause()$/;"	f	class:PortMonitorWidget
ToggleSuppressFLARMRadar	src/MainWindow.cpp	/^MainWindow::ToggleSuppressFLARMRadar()$/;"	f	class:MainWindow
ToggleWifi	src/Kobo/NetworkDialog.cpp	/^NetworkWidget::ToggleWifi()$/;"	f	class:NetworkWidget
TokenTypeTag	src/XML/Parser.cpp	/^  enum TokenTypeTag {$/;"	g	namespace:XML	file:
ToneClimbComparisonType	src/Dialogs/Device/Vega/Schemes.hpp	/^  int ToneClimbComparisonType;$/;"	m	struct:VEGA_SCHEME
ToneLiftComparisonType	src/Dialogs/Device/Vega/Schemes.hpp	/^  int ToneLiftComparisonType;$/;"	m	struct:VEGA_SCHEME
ToneSynthesiser	src/Audio/ToneSynthesiser.hpp	/^  explicit ToneSynthesiser(unsigned _sample_rate) : sample_rate(_sample_rate) {$/;"	f	class:ToneSynthesiser
ToneSynthesiser	src/Audio/ToneSynthesiser.hpp	/^class ToneSynthesiser : public PCMSynthesiser {$/;"	c
ToolsWidget	src/Kobo/ToolsDialog.cpp	/^  ToolsWidget(const DialogLook &look):RowFormWidget(look) {}$/;"	f	class:final
TopCanvas	src/ui/canvas/custom/TopCanvas.hpp	/^  TopCanvas()$/;"	f	class:DisplayOrientation
TopCanvas	src/ui/canvas/custom/TopCanvas.hpp	/^  TopCanvas():tty_fd(-1) {}$/;"	f	class:DisplayOrientation
TopLeft	src/Gauge/TrafficSettings.hpp	/^    TopLeft,$/;"	m	class:TrafficSettings::GaugeLocation
TopRight	src/Gauge/TrafficSettings.hpp	/^    TopRight,$/;"	m	class:TrafficSettings::GaugeLocation
TopWindow	src/ui/window/TopWindow.hpp	/^class TopWindow : public ContainerWindow {$/;"	c	namespace:UI
TopWindowStyle	src/ui/window/TopWindow.hpp	/^  TopWindowStyle()$/;"	f	class:UI::TopWindowStyle
TopWindowStyle	src/ui/window/TopWindow.hpp	/^  TopWindowStyle(const WindowStyle other)$/;"	f	class:UI::TopWindowStyle
TopWindowStyle	src/ui/window/TopWindow.hpp	/^class TopWindowStyle : public WindowStyle {$/;"	c	namespace:UI
TopographyFile	src/Topography/TopographyFile.cpp	/^TopographyFile::TopographyFile(zzip_dir *_dir, const char *filename,$/;"	f	class:TopographyFile
TopographyFile	src/Topography/TopographyFile.hpp	/^class TopographyFile {$/;"	c
TopographyFileRenderer	src/Topography/TopographyFileRenderer.cpp	/^TopographyFileRenderer::TopographyFileRenderer(const TopographyFile &_file,$/;"	f	class:TopographyFileRenderer
TopographyLook	src/Look/TopographyLook.hpp	/^struct TopographyLook {$/;"	s
TopographyRenderer	src/Topography/TopographyRenderer.cpp	/^TopographyRenderer::TopographyRenderer(const TopographyStore &_store,$/;"	f	class:TopographyRenderer
TopographyRenderer	src/Topography/TopographyRenderer.hpp	/^class TopographyRenderer : private NonCopyable {$/;"	c
TopographyStore	src/Topography/TopographyStore.hpp	/^  TopographyStore():serial(0) {}$/;"	f	class:TopographyStore
TopographyStore	src/Topography/TopographyStore.hpp	/^class TopographyStore : private NonCopyable {$/;"	c
TopographyThread	src/Topography/Thread.cpp	/^TopographyThread::TopographyThread(TopographyStore &_store,$/;"	f	class:TopographyThread
Touch	src/Device/Simulator.cpp	/^Simulator::Touch(NMEAInfo &basic)$/;"	f	class:Simulator
Touch	src/system/FileUtil.cpp	/^File::Touch(Path path)$/;"	f	class:File
TouchTextEntry	src/Dialogs/TouchTextEntry.cpp	/^TouchTextEntry(TCHAR *text, size_t width,$/;"	f
TouringTaskFactory	src/Engine/Task/Factory/TouringTaskFactory.cpp	/^TouringTaskFactory::TouringTaskFactory(OrderedTask& _task,$/;"	f	class:TouringTaskFactory
TouringTaskFactory	src/Engine/Task/Factory/TouringTaskFactory.hpp	/^class TouringTaskFactory: $/;"	c
Trace	src/Engine/Trace/Trace.cpp	/^Trace::Trace(const unsigned _no_thin_time, const unsigned max_time,$/;"	f	class:Trace
Trace	src/Engine/Trace/Trace.hpp	/^class Trace : private NonCopyable$/;"	c
TraceComputer	src/Computer/TraceComputer.cpp	/^TraceComputer::TraceComputer()$/;"	f	class:TraceComputer
TraceComputer	src/Computer/TraceComputer.hpp	/^class TraceComputer {$/;"	c
TraceDelta	src/Engine/Trace/Trace.hpp	/^    TraceDelta(const TracePoint &p_last, const TracePoint &p,$/;"	f	struct:Trace::TraceDelta
TraceDelta	src/Engine/Trace/Trace.hpp	/^    explicit TraceDelta(const TracePoint &p)$/;"	f	struct:Trace::TraceDelta
TraceDelta	src/Engine/Trace/Trace.hpp	/^  struct TraceDelta$/;"	s	class:Trace
TraceHistory	src/Engine/Navigation/TraceHistory.hpp	/^class TraceHistory {$/;"	c
TraceHistoryLook	src/Look/TraceHistoryLook.hpp	/^struct TraceHistoryLook {$/;"	s
TraceHistoryRenderer	src/Renderer/TraceHistoryRenderer.hpp	/^  TraceHistoryRenderer(const TraceHistoryLook &_look,$/;"	f	class:TraceHistoryRenderer
TraceHistoryRenderer	src/Renderer/TraceHistoryRenderer.hpp	/^class TraceHistoryRenderer {$/;"	c
TraceManager	src/Engine/Contest/Solvers/TraceManager.hpp	/^class TraceManager {$/;"	c
TracePoint	src/Engine/Trace/Point.cpp	/^TracePoint::TracePoint(const AircraftState &state):$/;"	f	class:TracePoint
TracePoint	src/Engine/Trace/Point.cpp	/^TracePoint::TracePoint(const MoreData &basic)$/;"	f	class:TracePoint
TracePoint	src/Engine/Trace/Point.hpp	/^  TracePoint(const GeoPoint &location, unsigned _time,$/;"	f	class:TracePoint
TracePoint	src/Engine/Trace/Point.hpp	/^class TracePoint : public SearchPoint$/;"	c
TracePointVector	src/Engine/Trace/Vector.hpp	/^class TracePointVector : public std::vector<TracePoint> {$/;"	c
TracePointerVector	src/Engine/Trace/Vector.hpp	/^class TracePointerVector : public std::vector<const TracePoint *> {$/;"	c
TraceVariableHistory	src/Engine/Navigation/TraceHistory.hpp	/^class TraceVariableHistory: public TrivialOverwritingRingBuffer<double, 30> {};$/;"	c
TrackFlarm	src/TeamActions.cpp	/^TeamActions::TrackFlarm(FlarmId id, const TCHAR *callsign)$/;"	f	class:TeamActions
TrackFlarm	src/TeamCode/Settings.cpp	/^TeamCodeSettings::TrackFlarm(FlarmId id, const TCHAR *name)$/;"	f	class:TeamCodeSettings
TrackLineRenderer	src/Renderer/TrackLineRenderer.hpp	/^  TrackLineRenderer(const MapLook &_look):look(_look) {}$/;"	f	class:TrackLineRenderer
TrackLineRenderer	src/Renderer/TrackLineRenderer.hpp	/^class TrackLineRenderer {$/;"	c
TrackingConfigPanel	src/Dialogs/Settings/Panels/TrackingConfigPanel.cpp	/^  TrackingConfigPanel()$/;"	f	class:final
TrackingGestureManager	src/UIUtil/TrackingGestureManager.hpp	/^class TrackingGestureManager: public GestureManager$/;"	c
TrackingSettings	src/Tracking/TrackingSettings.hpp	/^struct TrackingSettings {$/;"	s
Traffic	src/Tracking/SkyLines/Data.hpp	/^    constexpr Traffic(uint32_t _time, GeoPoint _location,$/;"	f	struct:SkyLinesTracking::Data::Traffic
Traffic	src/Tracking/SkyLines/Data.hpp	/^  struct Traffic {$/;"	s	struct:SkyLinesTracking::Data
Traffic	src/Tracking/SkyLines/Protocol.hpp	/^  struct Traffic {$/;"	s	struct:SkyLinesTracking::TrafficResponsePacket
TrafficDatabases	src/FLARM/TrafficDatabases.hpp	/^  TrafficDatabases()$/;"	f	struct:TrafficDatabases
TrafficDatabases	src/FLARM/TrafficDatabases.hpp	/^struct TrafficDatabases {$/;"	s
TrafficFilterWidget	src/Dialogs/Traffic/TrafficList.cpp	/^  TrafficFilterWidget(const DialogLook &look)$/;"	f	class:TrafficFilterWidget
TrafficFilterWidget	src/Dialogs/Traffic/TrafficList.cpp	/^class TrafficFilterWidget : public RowFormWidget {$/;"	c	file:
TrafficIndex	src/FLARM/List.hpp	/^  unsigned TrafficIndex(const FlarmTraffic *t) const {$/;"	f	struct:TrafficList
TrafficList	src/FLARM/List.hpp	/^struct TrafficList {$/;"	s
TrafficListButtons	src/Dialogs/Traffic/TrafficList.cpp	/^  TrafficListButtons(const DialogLook &look, WndForm &_dialog)$/;"	f	class:TrafficListButtons
TrafficListButtons	src/Dialogs/Traffic/TrafficList.cpp	/^class TrafficListButtons : public RowFormWidget {$/;"	c	file:
TrafficListDialog	src/Dialogs/Traffic/TrafficList.cpp	/^TrafficListDialog()$/;"	f
TrafficListWidget	src/Dialogs/Traffic/TrafficList.cpp	/^  TrafficListWidget(WndForm &_dialog,$/;"	f	class:TrafficListWidget
TrafficListWidget	src/Dialogs/Traffic/TrafficList.cpp	/^class TrafficListWidget : public ListWidget, public DataFieldListener,$/;"	c	file:
TrafficLook	src/Look/TrafficLook.hpp	/^struct TrafficLook {$/;"	s
TrafficMapItem	src/MapWindow/Items/MapItem.hpp	/^  TrafficMapItem(FlarmId _id, FlarmColor _color)$/;"	f	struct:TrafficMapItem
TrafficMapItem	src/MapWindow/Items/MapItem.hpp	/^struct TrafficMapItem: public MapItem$/;"	s
TrafficRenderer	src/Renderer/TrafficRenderer.hpp	/^namespace TrafficRenderer$/;"	n
TrafficRequestPacket	src/Tracking/SkyLines/Protocol.hpp	/^struct TrafficRequestPacket {$/;"	s	namespace:SkyLinesTracking
TrafficResponsePacket	src/Tracking/SkyLines/Protocol.hpp	/^struct TrafficResponsePacket {$/;"	s	namespace:SkyLinesTracking
TrafficResponseSender	src/Cloud/Sender.hpp	/^  TrafficResponseSender(SkyLinesTracking::Server &_server,$/;"	f	class:TrafficResponseSender
TrafficResponseSender	src/Cloud/Sender.hpp	/^class TrafficResponseSender {$/;"	c
TrafficSettings	src/Gauge/TrafficSettings.hpp	/^struct TrafficSettings {$/;"	s
TrafficWidget	src/Gauge/BigTrafficWidget.hpp	/^class TrafficWidget : public ContainerWidget,$/;"	c
TrailDrift	src/Dialogs/Settings/WindSettingsPanel.hpp	/^    TrailDrift,$/;"	e	enum:final::ControlIndex
TrailDrift	src/Profile/ProfileKeys.cpp	/^const char TrailDrift[] = "TrailDrift";$/;"	m	namespace:ProfileKeys	file:
TrailLook	src/Look/TrailLook.hpp	/^struct TrailLook {$/;"	s
TrailRenderer	src/Renderer/TrailRenderer.hpp	/^  TrailRenderer(const TrailLook &_look):look(_look) {}$/;"	f	class:TrailRenderer
TrailRenderer	src/Renderer/TrailRenderer.hpp	/^class TrailRenderer {$/;"	c
TrailSettings	src/MapSettings.hpp	/^struct TrailSettings {$/;"	s
TransformChannels	src/ui/canvas/memory/PixelTraits.hpp	/^  static color_type TransformChannels(color_type a, color_type b, F f) {$/;"	f	struct:BGRAPixelTraits
TransformChannels	src/ui/canvas/memory/PixelTraits.hpp	/^  static color_type TransformChannels(color_type a, color_type b, F f) {$/;"	f	struct:GreyscalePixelTraits
TransformChannels	src/ui/canvas/memory/PixelTraits.hpp	/^  static color_type TransformChannels(color_type c, F f) {$/;"	f	struct:BGRAPixelTraits
TransformChannels	src/ui/canvas/memory/PixelTraits.hpp	/^  static color_type TransformChannels(color_type c, F f) {$/;"	f	struct:GreyscalePixelTraits
TransformInteger	src/ui/canvas/memory/PixelTraits.hpp	/^  static color_type TransformInteger(color_type a, color_type b, F f) {$/;"	f	struct:BGRAPixelTraits
TransformInteger	src/ui/canvas/memory/PixelTraits.hpp	/^  static color_type TransformInteger(color_type a, color_type b, F f) {$/;"	f	struct:GreyscalePixelTraits
TransformInteger	src/ui/canvas/memory/PixelTraits.hpp	/^  static color_type TransformInteger(color_type c, F f) {$/;"	f	struct:BGRAPixelTraits
TransformInteger	src/ui/canvas/memory/PixelTraits.hpp	/^  static color_type TransformInteger(color_type c, F f) {$/;"	f	struct:GreyscalePixelTraits
TransitionConstraint	src/Engine/Task/ObservationZones/ObservationZoneClient.cpp	/^ObservationZoneClient::TransitionConstraint(const GeoPoint &location,$/;"	f	class:ObservationZoneClient
TransitionEnter	src/Engine/Task/Points/ScoredTaskPoint.cpp	/^ScoredTaskPoint::TransitionEnter(const AircraftState &ref_now,$/;"	f	class:ScoredTaskPoint
TransitionExit	src/Engine/Task/Points/ScoredTaskPoint.cpp	/^ScoredTaskPoint::TransitionExit(const AircraftState &ref_now,$/;"	f	class:ScoredTaskPoint
TranslateDefaultDisplayOrientation	src/DisplayOrientation.hpp	/^TranslateDefaultDisplayOrientation(DisplayOrientation orientation)$/;"	f
TranslateDimension	src/ui/canvas/fb/TopCanvas.cpp	/^TranslateDimension(unsigned value)$/;"	f	file:
TranslateKeyCode	src/Android/EventBridge.cpp	/^TranslateKeyCode(unsigned key_code)$/;"	f	file:
TranslateKeyCode	src/ui/event/poll/linux/Translate.hpp	/^TranslateKeyCode(unsigned key_code, bool &is_char)$/;"	f
Transparent	src/ui/canvas/memory/Color.hpp	/^  static constexpr Color Transparent() {$/;"	f	class:Color
Transparent	src/ui/canvas/opengl/Color.hpp	/^  static constexpr Color Transparent() {$/;"	f	class:Color
TransparentInvertPixelOperations	src/ui/canvas/memory/PixelOperations.hpp	/^  constexpr TransparentInvertPixelOperations(color_type _key):key(_key) {}$/;"	f	class:TransparentInvertPixelOperations
TransparentInvertPixelOperations	src/ui/canvas/memory/PixelOperations.hpp	/^class TransparentInvertPixelOperations$/;"	c
TransparentPixelOperations	src/ui/canvas/memory/Optimised.hpp	/^  explicit constexpr TransparentPixelOperations(const color_type key)$/;"	f	struct:TransparentPixelOperations
TransparentPixelOperations	src/ui/canvas/memory/Optimised.hpp	/^struct TransparentPixelOperations$/;"	s
TransparentPixelOperations	src/ui/canvas/memory/Optimised.hpp	/^struct TransparentPixelOperations<GreyscalePixelTraits>$/;"	s
TransparentRendererCache	src/Renderer/TransparentRendererCache.hpp	/^class TransparentRendererCache {$/;"	c
Tree	src/Cloud/Client.hpp	/^                                        CloudClientIndexable> Tree;$/;"	t	class:CloudClientContainer
Tree	src/Cloud/Thermal.hpp	/^                                        CloudThermalIndexable> Tree;$/;"	t	class:CloudThermalContainer
TriState	src/util/TriState.hpp	/^enum class TriState : uint8_t {$/;"	c
TriStateJob	src/Job/TriStateJob.hpp	/^  explicit TriStateJob(Args&&... args)$/;"	f	class:final
TriStateJobResult	src/Job/TriStateJob.hpp	/^enum class TriStateJobResult {$/;"	c
TriangleCompound	src/MapWindow/MapWindowGlideRange.cpp	/^  TriangleCompound(const FlatProjection &_flat_projection,$/;"	f	class:final
TriangleContest	src/Engine/Contest/Solvers/OLCFAI.cpp	/^  :TriangleContest(_trace, predict, 1000)$/;"	f
TriangleContest	src/Engine/Contest/Solvers/TriangleContest.hpp	/^class TriangleContest : public AbstractContest, public TraceManager {$/;"	c
Trigger	src/RateLimiter.cpp	/^RateLimiter::Trigger()$/;"	f	class:RateLimiter
Trigger	src/Terrain/Thread.cpp	/^TerrainThread::Trigger(const WindowProjection &projection)$/;"	f	class:TerrainThread
Trigger	src/Topography/Thread.cpp	/^TopographyThread::Trigger(const WindowProjection &_projection)$/;"	f	class:TopographyThread
Trigger	src/thread/StandbyThread.cpp	/^StandbyThread::Trigger()$/;"	f	class:StandbyThread
Trigger	src/thread/Trigger.hpp	/^  Trigger():handle(::CreateEvent(nullptr, true, false, nullptr)) {}$/;"	f	class:Trigger
Trigger	src/thread/Trigger.hpp	/^class Trigger {$/;"	c
Trigger	src/thread/WorkerThread.hpp	/^  void Trigger() {$/;"	f	class:WorkerThread
TriggerCalculatedUpdate	src/Protection.cpp	/^TriggerCalculatedUpdate()$/;"	f
TriggerCommand	src/thread/StandbyThread.hpp	/^  void TriggerCommand() {$/;"	f	class:StandbyThread
TriggerDone	src/thread/StandbyThread.hpp	/^  void TriggerDone() {$/;"	f	class:StandbyThread
TriggerGPSUpdate	src/Protection.cpp	/^TriggerGPSUpdate()$/;"	f
TriggerMapUpdate	src/Protection.cpp	/^TriggerMapUpdate()$/;"	f
TriggerMergeThread	src/Protection.cpp	/^TriggerMergeThread()$/;"	f
TriggerRedraw	src/DrawThread.hpp	/^  void TriggerRedraw() {$/;"	f	class:final
TriggerVarioUpdate	src/Protection.cpp	/^TriggerVarioUpdate()$/;"	f
TrivialArray	src/util/TrivialArray.hxx	/^	TrivialArray(I _begin, I _end):the_size(0) {$/;"	f	class:TrivialArray
TrivialArray	src/util/TrivialArray.hxx	/^	TrivialArray(size_type _size, const_reference value):the_size(_size) {$/;"	f	class:TrivialArray
TrivialArray	src/util/TrivialArray.hxx	/^	TrivialArray(std::initializer_list<U> init)$/;"	f	class:TrivialArray
TrivialArray	src/util/TrivialArray.hxx	/^class TrivialArray {$/;"	c
TrivialClass	src/java/Class.hxx	/^class TrivialClass : public TrivialRef<jclass> {$/;"	c	namespace:Java
TrivialOverwritingRingBuffer	src/util/OverwritingRingBuffer.hpp	/^  TrivialOverwritingRingBuffer(unsigned _head, unsigned _tail)$/;"	f	class:TrivialOverwritingRingBuffer
TrivialOverwritingRingBuffer	src/util/OverwritingRingBuffer.hpp	/^class TrivialOverwritingRingBuffer$/;"	c
TrivialRef	src/java/Ref.hxx	/^class TrivialRef {$/;"	c	namespace:Java
Truncate	src/util/StaticString.hxx	/^	void Truncate(size_type new_length) {$/;"	f	class:StaticStringBase
TryConnect	src/Device/Driver/EW.cpp	/^EWDevice::TryConnect(OperationEnvironment &env)$/;"	f	class:EWDevice
TryConnect	src/Device/Driver/EWMicroRecorder.cpp	/^TryConnect(Port &port, char *user_data, size_t max_user_data,$/;"	f	file:
TryConnectRetry	src/Device/Driver/EWMicroRecorder.cpp	/^TryConnectRetry(Port &port, char *user_data, size_t max_user_data,$/;"	f	file:
TryMountPoint	src/LocalPath.cpp	/^TryMountPoint(const TCHAR *mnt)$/;"	f	file:
TryRecoverFromError	src/Audio/ALSAPCMPlayer.cpp	/^ALSAPCMPlayer::TryRecoverFromError(snd_pcm_t &alsa_handle, int error)$/;"	f	class:ALSAPCMPlayer
TryRecoverFromError	src/Audio/ALSAPCMPlayer.hpp	/^  bool TryRecoverFromError(int error) {$/;"	f	class:ALSAPCMPlayer
TurnPoint	src/Device/Declaration.cpp	/^Declaration::TurnPoint::TurnPoint(const OrderedTaskPoint &tp)$/;"	f	class:Declaration::TurnPoint
TurnPoint	src/Device/Declaration.hpp	/^    TurnPoint(const Waypoint &_waypoint)$/;"	f	struct:Declaration::TurnPoint
TurnPoint	src/Device/Declaration.hpp	/^  struct TurnPoint {$/;"	s	struct:Declaration
TurnPointRange	src/Engine/Contest/Solvers/TriangleContest.hpp	/^  struct TurnPointRange {$/;"	s	class:TriangleContest
TurnRate	src/Computer/CirclingComputer.cpp	/^CirclingComputer::TurnRate(CirclingInfo &circling_info,$/;"	f	class:CirclingComputer
Turning	src/Computer/CirclingComputer.cpp	/^CirclingComputer::Turning(CirclingInfo &circling_info,$/;"	f	class:CirclingComputer
Turning	src/Computer/GlideComputerAirData.cpp	/^GlideComputerAirData::Turning(const MoreData &basic,$/;"	f	class:GlideComputerAirData
TurningLeft	src/NMEA/CirclingInfo.hpp	/^  bool TurningLeft() const {$/;"	f	struct:CirclingInfo
TurningReach	src/Dialogs/Settings/Panels/RouteConfigPanel.cpp	/^  TurningReach,$/;"	e	enum:ControlIndex	file:
TurningReach	src/Profile/ProfileKeys.cpp	/^const char TurningReach[] = "TurningReach";$/;"	m	namespace:ProfileKeys	file:
TurnpointRadius	src/Dialogs/Settings/Panels/TaskDefaultsConfigPanel.cpp	/^  TurnpointRadius,$/;"	e	enum:ControlIndex	file:
TurnpointRadius	src/Profile/ProfileKeys.cpp	/^const char TurnpointRadius[] = "TurnpointRadius";$/;"	m	namespace:ProfileKeys	file:
TurnpointTab	src/Dialogs/Task/Manager/Internal.hpp	/^    TurnpointTab,$/;"	e	enum:final::Tabs
TurnpointType	src/Dialogs/Settings/Panels/TaskDefaultsConfigPanel.cpp	/^  TurnpointType,$/;"	e	enum:ControlIndex	file:
TurnpointType	src/Profile/ProfileKeys.cpp	/^const char TurnpointType[] = "TurnpointType";$/;"	m	namespace:ProfileKeys	file:
TwoTextRowsRenderer	src/Renderer/TwoTextRowsRenderer.hpp	/^class TwoTextRowsRenderer {$/;"	c
TwoWidgets	src/Widget/TwoWidgets.hpp	/^class TwoWidgets : public NullWidget {$/;"	c
Type	src/Engine/Waypoint/Waypoint.hpp	/^  enum class Type: uint8_t {$/;"	c	struct:Waypoint
Type	src/Form/DataField/Base.hpp	/^  enum class Type : uint8_t {$/;"	c	class:DataField
Type	src/Form/DigitEntry.hpp	/^    enum class Type : uint8_t {$/;"	c	struct:CoordinateFormat::Column
Type	src/InfoBoxes/Content/Type.hpp	/^  enum Type {$/;"	g	namespace:InfoBoxFactory
Type	src/MapSettings.hpp	/^  enum class Type: uint8_t {$/;"	c	struct:TrailSettings
Type	src/MapWindow/Items/MapItem.hpp	/^  enum Type {$/;"	g	class:TaskPointType
Type	src/PopupMessage.hpp	/^  enum Type {$/;"	g	class:PopupMessage
Type	src/Tracking/SkyLines/Protocol.hpp	/^enum Type {$/;"	g	namespace:SkyLinesTracking
Type	src/Weather/PCMet/Overlays.hpp	/^  enum class Type {$/;"	c	struct:PCMet::OverlayInfo
Type	src/Widget/RowFormWidget.hpp	/^    enum class Type : uint8_t {$/;"	c	struct:RowFormWidget::Row
Type	src/ui/canvas/Bitmap.hpp	/^  enum class Type {$/;"	c	class:final
Type	src/ui/event/shared/Event.hpp	/^  enum Type {$/;"	g	struct:UI::Event
TypeFilter	src/Waypoint/WaypointFilter.hpp	/^enum class TypeFilter: uint8_t {$/;"	c
U	src/ui/canvas/memory/PixelTraits.hpp	/^    constexpr U(color_type _c):c(_c) {}$/;"	f	union:BGRAPixelTraits::U
U	src/ui/canvas/memory/PixelTraits.hpp	/^    constexpr U(integer_type _i):i(_i) {}$/;"	f	union:BGRAPixelTraits::U
U	src/ui/canvas/memory/PixelTraits.hpp	/^  union U {$/;"	u	struct:BGRAPixelTraits
UAV	src/FLARM/Traffic.hpp	/^    UAV = 13,             \/\/!< unmanned aerial vehicle$/;"	m	class:FlarmTraffic::AircraftType
UDEV_DEFAULT_SEAT	src/ui/event/poll/libinput/UdevContext.hpp	/^static constexpr const char *UDEV_DEFAULT_SEAT = "seat0";$/;"	v
UDPPort	src/Device/Port/UDPPort.cpp	/^UDPPort::UDPPort(EventLoop &event_loop,$/;"	f	class:UDPPort
UDP_LISTENER	src/Device/Config.hpp	/^    UDP_LISTENER,$/;"	m	class:DeviceConfig::PortType
UI	src/Dialogs/Device/ManageCAI302Dialog.hpp	/^namespace UI { class SingleWindow; }$/;"	n
UI	src/Dialogs/Dialogs.h	/^namespace UI { class SingleWindow; }$/;"	n
UI	src/Dialogs/JobDialog.hpp	/^namespace UI { class SingleWindow; }$/;"	n
UI	src/Dialogs/Settings/dlgConfigInfoboxes.hpp	/^namespace UI { class SingleWindow; }$/;"	n
UI	src/Dialogs/dlgAnalysis.hpp	/^namespace UI { class SingleWindow; }$/;"	n
UI	src/Form/Form.hpp	/^namespace UI { class SingleWindow; }$/;"	n
UI	src/Job/Async.hpp	/^namespace UI { class Notify; }$/;"	n
UI	src/PopupMessage.hpp	/^namespace UI { class SingleWindow; }$/;"	n
UI	src/UIGlobals.hpp	/^namespace UI { class SingleWindow; }$/;"	n
UI	src/ui/event/DelayedNotify.hpp	/^namespace UI {$/;"	n
UI	src/ui/event/Globals.cpp	/^namespace UI {$/;"	n	file:
UI	src/ui/event/Globals.hpp	/^namespace UI {$/;"	n
UI	src/ui/event/Notify.cpp	/^namespace UI {$/;"	n	file:
UI	src/ui/event/Notify.hpp	/^namespace UI {$/;"	n
UI	src/ui/event/PeriodicTimer.hpp	/^namespace UI {$/;"	n
UI	src/ui/event/Timer.hpp	/^namespace UI {$/;"	n
UI	src/ui/event/android/Loop.cpp	/^namespace UI {$/;"	n	file:
UI	src/ui/event/android/Loop.hpp	/^namespace UI {$/;"	n
UI	src/ui/event/android/Queue.cpp	/^namespace UI {$/;"	n	file:
UI	src/ui/event/android/Queue.hpp	/^namespace UI {$/;"	n
UI	src/ui/event/poll/InputQueue.cpp	/^namespace UI {$/;"	n	file:
UI	src/ui/event/poll/Loop.cpp	/^namespace UI {$/;"	n	file:
UI	src/ui/event/poll/Loop.hpp	/^namespace UI {$/;"	n
UI	src/ui/event/poll/Queue.cpp	/^namespace UI {$/;"	n	file:
UI	src/ui/event/poll/Timer.cpp	/^namespace UI {$/;"	n	file:
UI	src/ui/event/poll/WaylandQueue.cpp	/^namespace UI {$/;"	n	file:
UI	src/ui/event/poll/WaylandQueue.hpp	/^namespace UI {$/;"	n
UI	src/ui/event/poll/X11Queue.cpp	/^namespace UI {$/;"	n	file:
UI	src/ui/event/poll/X11Queue.hpp	/^namespace UI {$/;"	n
UI	src/ui/event/poll/libinput/LibInputHandler.cpp	/^namespace UI {$/;"	n	file:
UI	src/ui/event/poll/libinput/LibInputHandler.hpp	/^namespace UI {$/;"	n
UI	src/ui/event/poll/linux/Input.cpp	/^namespace UI {$/;"	n	file:
UI	src/ui/event/poll/linux/Input.hpp	/^namespace UI {$/;"	n
UI	src/ui/event/poll/linux/MergeMouse.cpp	/^namespace UI {$/;"	n	file:
UI	src/ui/event/poll/linux/MergeMouse.hpp	/^namespace UI {$/;"	n
UI	src/ui/event/sdl/Event.hpp	/^namespace UI {$/;"	n
UI	src/ui/event/sdl/Loop.cpp	/^namespace UI {$/;"	n	file:
UI	src/ui/event/sdl/Loop.hpp	/^namespace UI {$/;"	n
UI	src/ui/event/sdl/Queue.cpp	/^namespace UI {$/;"	n	file:
UI	src/ui/event/sdl/Queue.hpp	/^namespace UI {$/;"	n
UI	src/ui/event/shared/Event.hpp	/^namespace UI {$/;"	n
UI	src/ui/event/shared/RotatePointer.hpp	/^namespace UI {$/;"	n
UI	src/ui/event/shared/Timer.cpp	/^namespace UI {$/;"	n	file:
UI	src/ui/event/shared/TimerQueue.cpp	/^namespace UI {$/;"	n	file:
UI	src/ui/event/shared/TimerQueue.hpp	/^namespace UI {$/;"	n
UI	src/ui/event/windows/Event.hpp	/^namespace UI {$/;"	n
UI	src/ui/event/windows/Loop.cpp	/^namespace UI {$/;"	n	file:
UI	src/ui/event/windows/Loop.hpp	/^namespace UI {$/;"	n
UI	src/ui/event/windows/Queue.cpp	/^namespace UI {$/;"	n	file:
UI	src/ui/event/windows/Queue.hpp	/^namespace UI {$/;"	n
UI	src/ui/window/SingleWindow.cpp	/^namespace UI {$/;"	n	file:
UI	src/ui/window/SingleWindow.hpp	/^namespace UI {$/;"	n
UI	src/ui/window/TopWindow.hpp	/^namespace UI { struct Event; }$/;"	n
UI	src/ui/window/TopWindow.hpp	/^namespace UI {$/;"	n
UI	src/ui/window/android/SingleWindow.cpp	/^namespace UI {$/;"	n	file:
UI	src/ui/window/android/TopWindow.cpp	/^namespace UI {$/;"	n	file:
UI	src/ui/window/custom/SingleWindow.cpp	/^namespace UI {$/;"	n	file:
UI	src/ui/window/custom/TopWindow.cpp	/^namespace UI {$/;"	n	file:
UI	src/ui/window/fb/SingleWindow.cpp	/^namespace UI {$/;"	n	file:
UI	src/ui/window/fb/TopWindow.cpp	/^namespace UI {$/;"	n	file:
UI	src/ui/window/gdi/SingleWindow.cpp	/^namespace UI {$/;"	n	file:
UI	src/ui/window/gdi/TopWindow.cpp	/^namespace UI {$/;"	n	file:
UI	src/ui/window/sdl/SingleWindow.cpp	/^namespace UI {$/;"	n	file:
UI	src/ui/window/sdl/TopWindow.cpp	/^namespace UI {$/;"	n	file:
UI	src/ui/window/wayland/TopWindow.cpp	/^namespace UI {$/;"	n	file:
UI	src/ui/window/x11/TopWindow.cpp	/^namespace UI {$/;"	n	file:
UIActions	src/UIActions.hpp	/^namespace UIActions {$/;"	n
UIGlobals	src/UIGlobals.hpp	/^namespace UIGlobals {$/;"	n
UIReceiveCalculatedData	src/UIReceiveBlackboard.cpp	/^UIReceiveCalculatedData()$/;"	f
UIReceiveSensorData	src/UIReceiveBlackboard.cpp	/^UIReceiveSensorData()$/;"	f
UIScale	src/Dialogs/Settings/Panels/InterfaceConfigPanel.cpp	/^  UIScale,$/;"	e	enum:ControlIndex	file:
UIScale	src/Profile/ProfileKeys.cpp	/^const char UIScale[] = "UIScale";$/;"	m	namespace:ProfileKeys	file:
UISettings	src/UISettings.hpp	/^struct UISettings {$/;"	s
UIState	src/UIState.hpp	/^struct UIState {$/;"	s
UNDEFINED	src/Units/Unit.hpp	/^  UNDEFINED,$/;"	m	class:Unit
UNDEFINED_VALUE	src/FLARM/FlarmId.hpp	/^  static constexpr uint32_t UNDEFINED_VALUE = 0;$/;"	m	class:FlarmId
UNDER_MIN_TURNPOINTS	src/Engine/Task/Factory/ValidationError.hpp	/^  UNDER_MIN_TURNPOINTS,$/;"	m	class:TaskValidationErrorType
UNIQUE_FILE_DESCRIPTOR_HXX	src/io/UniqueFileDescriptor.hxx	31;"	d
UNIQUE_SOCKET_DESCRIPTOR_SOCKET_HXX	src/net/UniqueSocketDescriptor.hxx	31;"	d
UNIT	src/Form/DigitEntry.hpp	/^      UNIT,$/;"	m	class:CoordinateFormat::Column::Type
UNITSCONFIGPANEL_HPP	src/Dialogs/Settings/Panels/UnitsConfigPanel.hpp	25;"	d
UNKNOWN	src/Airspace/AirspaceParser.cpp	/^  UNKNOWN,$/;"	m	class:AirspaceFileType	file:
UNKNOWN	src/Device/Driver/CAI302/Internal.hpp	/^    UNKNOWN,$/;"	m	class:CAI302Device::Mode
UNKNOWN	src/Device/Driver/FLARM/Device.hpp	/^    UNKNOWN,$/;"	m	class:FlarmDevice::Mode
UNKNOWN	src/Device/Driver/IMI/Protocol/IGC.cpp	/^static const IMI::IMICHAR *const UNKNOWN = "Unknown";$/;"	m	class:IMI	file:
UNKNOWN	src/Device/Driver/LX/Internal.hpp	/^    UNKNOWN,$/;"	m	class:LXDevice::Mode
UNKNOWN	src/FLARM/Traffic.hpp	/^    UNKNOWN = 0,          \/\/!< unknown$/;"	m	class:FlarmTraffic::AircraftType
UNKNOWN	src/Hardware/Battery.hpp	/^      UNKNOWN$/;"	e	enum:Power::Battery::batterystatus
UNKNOWN	src/Hardware/Battery.hpp	/^      UNKNOWN$/;"	e	enum:Power::External::externalstatus
UNKNOWN	src/Kobo/Model.hpp	/^  UNKNOWN,$/;"	m	class:KoboModel
UNKNOWN	src/NMEA/SwitchState.hpp	/^    UNKNOWN,$/;"	m	class:SwitchState::AirbrakeState
UNKNOWN	src/NMEA/SwitchState.hpp	/^    UNKNOWN,$/;"	m	class:SwitchState::FlapPosition
UNKNOWN	src/NMEA/SwitchState.hpp	/^    UNKNOWN,$/;"	m	class:SwitchState::FlightMode
UNKNOWN	src/NMEA/SwitchState.hpp	/^    UNKNOWN,$/;"	m	class:SwitchState::UserSwitch
UNKNOWN	src/Repository/FileType.hpp	/^  UNKNOWN,$/;"	m	class:FileType
UNKNOWN	src/Terrain/Height.hpp	/^  UNKNOWN, GROUND, WATER$/;"	m	class:TerrainType
UNKNOWN	src/Waypoint/WaypointFileType.hpp	/^  UNKNOWN,$/;"	m	class:WaypointFileType
UNKNOWN	src/net/State.hpp	/^  UNKNOWN,$/;"	m	class:NetState
UNKNOWN_ELEVATION	src/MapWindow/Items/MapItem.hpp	/^  static constexpr double UNKNOWN_ELEVATION = -1e5;$/;"	m	struct:ArrivalAltitudeMapItem
UNKNOWN_ELEVATION	src/MapWindow/Items/MapItem.hpp	/^  static constexpr double UNKNOWN_ELEVATION = -1e5;$/;"	m	struct:LocationMapItem
UNKNOWN_ELEVATION_THRESHOLD	src/MapWindow/Items/MapItem.hpp	/^  static constexpr double UNKNOWN_ELEVATION_THRESHOLD = -1e4;$/;"	m	struct:ArrivalAltitudeMapItem
UNKNOWN_ELEVATION_THRESHOLD	src/MapWindow/Items/MapItem.hpp	/^  static constexpr double UNKNOWN_ELEVATION_THRESHOLD = -1e4;$/;"	m	struct:LocationMapItem
UNLIKELY	src/Topography/shapelib/mapserver.h	76;"	d
UNLIKELY	src/Topography/shapelib/mapserver.h	80;"	d
UNMODIFIED	src/Task/MapTaskManager.hpp	/^    UNMODIFIED,$/;"	e	enum:MapTaskManager::TaskEditResult
UNORDERED	src/Engine/Task/Points/Type.hpp	/^  UNORDERED,$/;"	m	class:TaskPointType
UNORDEREDTASKPOINT_HPP	src/Engine/Task/Unordered/UnorderedTaskPoint.hpp	26;"	d
UNORDEREDTASK_H	src/Engine/Task/Unordered/UnorderedTask.hpp	23;"	d
UNPROTECTED	src/Dialogs/ProfilePasswordDialog.hpp	/^  UNPROTECTED,$/;"	m	class:ProfilePasswordResult
UNREACHABLE	src/Engine/Route/ReachResult.hpp	/^    UNREACHABLE,$/;"	m	class:ReachResult::Validity
UNSPECIFIED	src/Android/NativeView.hpp	/^    UNSPECIFIED = -1,$/;"	m	class:NativeView::ScreenOrientation
UP	src/Dialogs/KnobTextEntry.cpp	/^  UP,$/;"	e	enum:Buttons	file:
UP	src/Form/GridView.hpp	/^    UP,$/;"	m	class:GridView::Direction
UP	src/NMEA/SwitchState.hpp	/^    UP,$/;"	m	class:SwitchState::UserSwitch
UP	src/Renderer/SymbolRenderer.hpp	/^    UP,$/;"	e	enum:SymbolRenderer::Direction
UPDATE	src/Dialogs/Weather/MapOverlayWidget.cpp	/^    UPDATE,$/;"	e	enum:final::Buttons	file:
UPDATE	src/Dialogs/Weather/NOAAList.cpp	/^    UPDATE,$/;"	e	enum:final::Buttons	file:
UPDATE_MODE_FULL	src/ui/canvas/fb/mxcfb.h	83;"	d
UPDATE_MODE_PARTIAL	src/ui/canvas/fb/mxcfb.h	82;"	d
UPDATE_SCHEME_QUEUE	src/ui/canvas/fb/mxcfb.h	79;"	d
UPDATE_SCHEME_QUEUE_AND_MERGE	src/ui/canvas/fb/mxcfb.h	80;"	d
UPDATE_SCHEME_SNAPSHOT	src/ui/canvas/fb/mxcfb.h	78;"	d
UPLOAD	src/Device/Driver/CAI302/Internal.hpp	/^    UPLOAD,$/;"	m	class:CAI302Device::Mode
URGENT	src/FLARM/Traffic.hpp	/^    URGENT = 3,$/;"	m	class:FlarmTraffic::AlarmType
URL	src/java/URL.hxx	/^class URL {$/;"	c	namespace:Java
URLConnection	src/java/URL.hxx	/^class URLConnection {$/;"	c	namespace:Java
USB_STORAGE	src/Kobo/SystemDialog.cpp	/^    USB_STORAGE,$/;"	e	enum:final::Buttons	file:
USE	src/Dialogs/Weather/MapOverlayWidget.cpp	/^    USE,$/;"	e	enum:final::Buttons	file:
USER	src/Android/NativeView.hpp	/^    USER = 2,$/;"	m	class:NativeView::ScreenOrientation
USER	src/Engine/Waypoint/Origin.hpp	/^  USER,$/;"	m	class:WaypointOrigin
USER	src/Waypoint/WaypointFilter.hpp	/^  USER,$/;"	m	class:TypeFilter
USER_NAME_REQUEST	src/Tracking/SkyLines/Protocol.hpp	/^  USER_NAME_REQUEST = 6,$/;"	e	enum:SkyLinesTracking::Type
USER_NAME_RESPONSE	src/Tracking/SkyLines/Protocol.hpp	/^  USER_NAME_RESPONSE = 7,$/;"	e	enum:SkyLinesTracking::Type
USER_SWITCH	src/Dialogs/Device/Vega/SwitchesDialog.cpp	/^    USER_SWITCH,$/;"	e	enum:SwitchesRight::Controls	file:
USE_EPOLL	src/event/Features.h	6;"	d
USE_EVENTFD	src/event/Features.h	4;"	d
USE_LIBINTL	src/Language/Language.hpp	28;"	d
USE_MMAP	src/zzip/__mmap.h	30;"	d
USE_MMAP	src/zzip/__mmap.h	43;"	d
USE_MMAP	src/zzip/__mmap.h	84;"	d
USE_MSFREE	src/Topography/shapelib/mapserver.h	66;"	d
USE_POSIX_MMAP	src/zzip/__mmap.h	18;"	d
USE_SIGNALFD	src/event/Features.h	5;"	d
USE_TTY	src/ui/canvas/custom/TopCanvas.hpp	88;"	d
USE_WIN32_MMAP	src/zzip/__mmap.h	21;"	d
UTCDate	src/Dialogs/StatusPanels/TimesStatusPanel.cpp	/^  UTCDate,$/;"	e	enum:Controls	file:
UTCOffset	src/Dialogs/Settings/Panels/TimeConfigPanel.cpp	/^  UTCOffset,$/;"	e	enum:ControlIndex	file:
UTCOffset	src/Profile/ProfileKeys.cpp	/^const char UTCOffset[] = "UTCOffset";$/;"	m	namespace:ProfileKeys	file:
UTCOffsetSigned	src/Profile/ProfileKeys.cpp	/^const char UTCOffsetSigned[] = "UTCOffsetSigned";$/;"	m	namespace:ProfileKeys	file:
UTCTime	src/Dialogs/StatusPanels/TimesStatusPanel.cpp	/^  UTCTime,$/;"	e	enum:Controls	file:
UTF8	src/io/Charset.hpp	/^  UTF8,$/;"	m	class:Charset
UTF8ToWideConverter	src/util/ConvertString.hpp	/^class UTF8ToWideConverter {$/;"	c
UTM	src/Geo/CoordinateFormat.hpp	/^  UTM,$/;"	m	class:CoordinateFormat
UTM	src/Geo/UTM.hpp	/^  constexpr UTM(unsigned char _zone_number, char _zone_letter,$/;"	f	struct:UTM
UTM	src/Geo/UTM.hpp	/^struct UTM {$/;"	s
UTM_HPP	src/Geo/UTM.hpp	25;"	d
UdevContext	src/ui/event/poll/libinput/UdevContext.cpp	/^UdevContext::UdevContext(const UdevContext &other)$/;"	f	class:UdevContext
UdevContext	src/ui/event/poll/libinput/UdevContext.hpp	/^  UdevContext():ud(nullptr) {}$/;"	f	class:UdevContext
UdevContext	src/ui/event/poll/libinput/UdevContext.hpp	/^  UdevContext(UdevContext &&other)$/;"	f	class:UdevContext
UdevContext	src/ui/event/poll/libinput/UdevContext.hpp	/^  explicit UdevContext(struct udev *_ud):ud(_ud) {}$/;"	f	class:UdevContext
UdevContext	src/ui/event/poll/libinput/UdevContext.hpp	/^class UdevContext {$/;"	c
UnaryWritePixel	src/ui/canvas/memory/PixelOperations.hpp	/^  explicit constexpr UnaryWritePixel(Args&&... args)$/;"	f	struct:UnaryWritePixel
UnaryWritePixel	src/ui/canvas/memory/PixelOperations.hpp	/^struct UnaryWritePixel : private Operation {$/;"	s
Unbind	src/ui/canvas/Pen.hpp	/^  void Unbind() const {$/;"	f	class:Pen
Unbind	src/ui/canvas/opengl/RenderBuffer.hpp	/^  static void Unbind() {$/;"	f	class:GLRenderBuffer
UnblockAllSignals	src/system/Process.cpp	/^UnblockAllSignals()$/;"	f	file:
UncompressedImage	src/ui/canvas/custom/UncompressedImage.hpp	/^  UncompressedImage(Format _format, unsigned _pitch,$/;"	f	class:UncompressedImage
UncompressedImage	src/ui/canvas/custom/UncompressedImage.hpp	/^class UncompressedImage {$/;"	c
Undefined	src/Computer/WaveResult.hpp	/^  static WaveInfo Undefined() {$/;"	f	struct:WaveInfo
Undefined	src/FLARM/FlarmId.hpp	/^  static FlarmId Undefined() {$/;"	f	class:FlarmId
Undefined	src/PageSettings.hpp	/^  static PageLayout Undefined() {$/;"	f	struct:PageLayout
Undefined	src/io/UniqueFileDescriptor.hxx	/^		:FileDescriptor(FileDescriptor::Undefined()) {}$/;"	f	class:UniqueFileDescriptor
Undefined	src/net/UniqueSocketDescriptor.hxx	/^		:SocketDescriptor(SocketDescriptor::Undefined()) {}$/;"	f	class:UniqueSocketDescriptor
UnescapeBackslash	src/util/EscapeBackslash.cpp	/^UnescapeBackslash(const TCHAR* old_string)$/;"	f
Uniform	src/ui/canvas/opengl/Color.hpp	/^  void Uniform(GLint location) const {$/;"	f	class:Color
UniqueFileDescriptor	src/io/UniqueFileDescriptor.hxx	/^class UniqueFileDescriptor : public FileDescriptor {$/;"	c
UniqueSocketDescriptor	src/net/UniqueSocketDescriptor.hxx	/^class UniqueSocketDescriptor : public SocketDescriptor {$/;"	c
Unit	src/Units/Unit.hpp	/^enum class Unit: uint8_t {$/;"	c
UnitDescriptor	src/Units/Descriptor.hpp	/^struct UnitDescriptor$/;"	s
UnitFormat	src/Renderer/ChartRenderer.hpp	/^  enum UnitFormat {$/;"	g	class:ChartRenderer
UnitGroup	src/Units/Group.hpp	/^enum class UnitGroup: uint8_t$/;"	c
UnitSetting	src/Units/Settings.hpp	/^struct UnitSetting$/;"	s
UnitStoreItem	src/Units/UnitsStore.cpp	/^struct UnitStoreItem$/;"	s	file:
UnitSymbolRenderer	src/Renderer/UnitSymbolRenderer.hpp	/^namespace UnitSymbolRenderer$/;"	n
UnitSymbolStrings	src/Renderer/UnitSymbolRenderer.cpp	/^struct UnitSymbolStrings {$/;"	s	file:
Units	src/Units/Descriptor.hpp	/^namespace Units$/;"	n
Units	src/Units/System.hpp	/^namespace Units$/;"	n
Units	src/Units/Units.hpp	/^namespace Units$/;"	n
Units	src/Units/UnitsGlue.hpp	/^namespace Units$/;"	n
Units	src/Units/UnitsStore.cpp	/^  UnitSetting Units;$/;"	m	struct:UnitStoreItem	file:
Units	src/Units/UnitsStore.hpp	/^namespace Units$/;"	n
UnitsAltitude	src/Dialogs/Settings/Panels/UnitsConfigPanel.cpp	/^  UnitsAltitude,$/;"	e	enum:ControlIndex	file:
UnitsConfigPanel	src/Dialogs/Settings/Panels/UnitsConfigPanel.cpp	/^  UnitsConfigPanel()$/;"	f	class:final
UnitsDistance	src/Dialogs/Settings/Panels/UnitsConfigPanel.cpp	/^  UnitsDistance,$/;"	e	enum:ControlIndex	file:
UnitsLatLon	src/Dialogs/Settings/Panels/UnitsConfigPanel.cpp	/^  UnitsLatLon$/;"	e	enum:ControlIndex	file:
UnitsLift	src/Dialogs/Settings/Panels/UnitsConfigPanel.cpp	/^  UnitsLift,$/;"	e	enum:ControlIndex	file:
UnitsMass	src/Dialogs/Settings/Panels/UnitsConfigPanel.cpp	/^  UnitsMass,$/;"	e	enum:ControlIndex	file:
UnitsPreset	src/Dialogs/Settings/Panels/UnitsConfigPanel.cpp	/^  UnitsPreset,$/;"	e	enum:ControlIndex	file:
UnitsPressure	src/Dialogs/Settings/Panels/UnitsConfigPanel.cpp	/^  UnitsPressure,$/;"	e	enum:ControlIndex	file:
UnitsSpeed	src/Dialogs/Settings/Panels/UnitsConfigPanel.cpp	/^  UnitsSpeed,$/;"	e	enum:ControlIndex	file:
UnitsTaskSpeed	src/Dialogs/Settings/Panels/UnitsConfigPanel.cpp	/^  UnitsTaskSpeed,$/;"	e	enum:ControlIndex	file:
UnitsTemperature	src/Dialogs/Settings/Panels/UnitsConfigPanel.cpp	/^  UnitsTemperature,$/;"	e	enum:ControlIndex	file:
UnitsWingLoading	src/Dialogs/Settings/Panels/UnitsConfigPanel.cpp	/^  UnitsWingLoading,$/;"	e	enum:ControlIndex	file:
Unlock	src/ui/canvas/fb/TopCanvas.cpp	/^TopCanvas::Unlock()$/;"	f	class:TopCanvas
Unlock	src/ui/canvas/sdl/TopCanvas.cpp	/^TopCanvas::Unlock()$/;"	f	class:TopCanvas
UnlockCPU	src/Hardware/CPU.cpp	/^UnlockCPU()$/;"	f
UnorderedTask	src/Engine/Task/Unordered/UnorderedTask.cpp	/^UnorderedTask::UnorderedTask(const TaskType _type,$/;"	f	class:UnorderedTask
UnorderedTask	src/Engine/Task/Unordered/UnorderedTask.hpp	/^class UnorderedTask : public AbstractTask {$/;"	c
UnorderedTaskPoint	src/Engine/Task/Unordered/UnorderedTaskPoint.cpp	/^UnorderedTaskPoint::UnorderedTaskPoint(WaypointPtr wp,$/;"	f	class:UnorderedTaskPoint
UnprepareFill	src/Renderer/AirspacePreviewRenderer.cpp	/^AirspacePreviewRenderer::UnprepareFill(Canvas &canvas)$/;"	f	class:AirspacePreviewRenderer
Unproject	src/Geo/Flat/FlatProjection.cpp	/^FlatProjection::Unproject(const FlatBoundingBox &bb) const$/;"	f	class:FlatProjection
Unproject	src/Geo/Flat/FlatProjection.cpp	/^FlatProjection::Unproject(const FlatGeoPoint &fp) const$/;"	f	class:FlatProjection
Unproject	src/Geo/Flat/FlatProjection.cpp	/^FlatProjection::Unproject(const FlatPoint &fp) const$/;"	f	class:FlatProjection
UnprojectCoarse	src/Terrain/RasterProjection.hpp	/^  constexpr GeoPoint UnprojectCoarse(SignedRasterLocation coords) const {$/;"	f	class:RasterProjection
UnprojectFine	src/Terrain/RasterProjection.hpp	/^  constexpr GeoPoint UnprojectFine(SignedRasterLocation coords) const {$/;"	f	class:RasterProjection
UnprotectedLease	src/thread/Guard.hpp	/^  class UnprotectedLease {$/;"	c	class:Guard
Unreachable	src/Renderer/WaypointIconRenderer.hpp	/^    Unreachable,$/;"	e	enum:WaypointIconRenderer::Reachability
Unreachable	src/Renderer/WaypointRenderer.hpp	/^    Unreachable,$/;"	e	enum:WaypointRenderer::Reachability
UnsafeAppendASCII	src/util/StaticString.hxx	/^	void UnsafeAppendASCII(const char *p) {$/;"	f	class:StaticStringBase
UnsafeBuildString	src/util/StringBuilder.hxx	/^UnsafeBuildString(T *buffer, Args&&... args)$/;"	f
UnsafeFormatComment	src/InfoBoxes/Data.hpp	/^  void UnsafeFormatComment(const TCHAR *fmt, Args&&... args) {$/;"	f	struct:InfoBoxData
UnsafeFormatValue	src/InfoBoxes/Data.hpp	/^  void UnsafeFormatValue(const TCHAR *fmt, Args&&... args) {$/;"	f	struct:InfoBoxData
UnsafeSetSilence	src/Audio/VarioSynthesiser.cpp	/^VarioSynthesiser::UnsafeSetSilence()$/;"	f	class:VarioSynthesiser
UnsignedPoint2D	src/Math/Point2D.hpp	/^struct UnsignedPoint2D : Point2D<unsigned> {$/;"	s
Update	src/Computer/ConditionMonitor/ConditionMonitor.cpp	/^ConditionMonitor::Update(const NMEAInfo &basic, const DerivedInfo &calculated,$/;"	f	class:ConditionMonitor
Update	src/Computer/ThermalLocator.cpp	/^ThermalLocator::Update(const double t_0,$/;"	f	class:ThermalLocator
Update	src/Computer/TraceComputer.cpp	/^TraceComputer::Update(const ComputerSettings &settings_computer,$/;"	f	class:TraceComputer
Update	src/Computer/WarningComputer.cpp	/^WarningComputer::Update(const ComputerSettings &settings_computer,$/;"	f	class:WarningComputer
Update	src/Computer/Wind/WindEKF.cpp	/^WindEKF::Update(const double airspeed, const float gps_vel[2])$/;"	f	class:WindEKF
Update	src/Computer/Wind/WindEKFGlue.cpp	/^WindEKFGlue::Update(const NMEAInfo &basic, const DerivedInfo &derived)$/;"	f	class:WindEKFGlue
Update	src/Dialogs/Airspace/AirspaceList.cpp	/^AirspaceFilterWidget::Update()$/;"	f	class:AirspaceFilterWidget
Update	src/Dialogs/Device/Vega/SwitchesDialog.cpp	/^  void Update(const SwitchState &switches) {$/;"	f	class:SwitchesDialog
Update	src/Dialogs/Device/Vega/SwitchesDialog.cpp	/^  void Update(const SwitchState &switches) {$/;"	f	class:SwitchesLeft
Update	src/Dialogs/Device/Vega/SwitchesDialog.cpp	/^  void Update(const SwitchState &switches) {$/;"	f	class:SwitchesRight
Update	src/Dialogs/Plane/PlanePolarDialog.cpp	/^PlanePolarWidget::Update()$/;"	f	class:PlanePolarWidget
Update	src/Dialogs/Task/AlternatesListDialog.cpp	/^  bool Update() {$/;"	f	class:final
Update	src/Dialogs/Traffic/FlarmTrafficDetails.cpp	/^FlarmTrafficDetailsWidget::Update()$/;"	f	class:FlarmTrafficDetailsWidget
Update	src/Dialogs/Traffic/TeamCodeDialog.cpp	/^TeamCodeWidget::Update(const MoreData &basic, const DerivedInfo &calculated)$/;"	f	class:TeamCodeWidget
Update	src/Dialogs/Waypoint/WaypointList.cpp	/^WaypointFilterWidget::Update(Angle _last_heading)$/;"	f	class:WaypointFilterWidget
Update	src/Dialogs/Weather/NOAADetails.cpp	/^NOAADetailsWidget::Update()$/;"	f	class:NOAADetailsWidget
Update	src/Dialogs/dlgAnalysis.cpp	/^AnalysisWidget::Update()$/;"	f	class:AnalysisWidget
Update	src/Engine/Airspace/AirspaceWarningManager.cpp	/^AirspaceWarningManager::Update(const AircraftState& state,$/;"	f	class:AirspaceWarningManager
Update	src/Engine/GlideSolvers/GlidePolar.cpp	/^GlidePolar::Update()$/;"	f	class:GlidePolar
Update	src/Engine/Task/TaskManager.cpp	/^TaskManager::Update(const AircraftState &state,$/;"	f	class:TaskManager
Update	src/Engine/ThermalBand/ThermalBand.cpp	/^ThermalBand::Update(const unsigned index)$/;"	f	class:ThermalBand
Update	src/Engine/ThermalBand/ThermalSlice.cpp	/^ThermalSlice::Update(const ThermalSlice &o, const double dh)$/;"	f	class:ThermalSlice
Update	src/Engine/Trace/Trace.hpp	/^    void Update(const TracePoint &p_last, const TracePoint &p_next) {$/;"	f	struct:Trace::TraceDelta
Update	src/Engine/Util/AircraftStateFilter.cpp	/^AircraftStateFilter::Update(const AircraftState &state)$/;"	f	class:AircraftStateFilter
Update	src/FLARM/Traffic.cpp	/^FlarmTraffic::Update(const FlarmTraffic &other)$/;"	f	class:FlarmTraffic
Update	src/Gauge/BigTrafficWidget.cpp	/^FlarmTrafficControl::Update(Angle new_direction, const TrafficList &new_data,$/;"	f	class:FlarmTrafficControl
Update	src/Gauge/FlarmTrafficWindow.cpp	/^FlarmTrafficWindow::Update(Angle new_direction, const TrafficList &new_data,$/;"	f	class:FlarmTrafficWindow
Update	src/Gauge/ThermalAssistantRenderer.cpp	/^ThermalAssistantRenderer::Update(const AttitudeState &attitude,$/;"	f	class:ThermalAssistantRenderer
Update	src/Gauge/ThermalAssistantWindow.cpp	/^ThermalAssistantWindow::Update(const AttitudeState &attitude,$/;"	f	class:ThermalAssistantWindow
Update	src/Geo/Flat/TaskProjection.cpp	/^TaskProjection::Update()$/;"	f	class:TaskProjection
Update	src/InfoBoxes/Content/Alternate.cpp	/^InfoBoxContentAlternateGR::Update(InfoBoxData &data)$/;"	f	class:InfoBoxContentAlternateGR
Update	src/InfoBoxes/Content/Alternate.cpp	/^InfoBoxContentAlternateName::Update(InfoBoxData &data)$/;"	f	class:InfoBoxContentAlternateName
Update	src/InfoBoxes/Content/Altitude.cpp	/^InfoBoxContentAltitudeGPS::Update(InfoBoxData &data)$/;"	f	class:InfoBoxContentAltitudeGPS
Update	src/InfoBoxes/Content/Contest.cpp	/^InfoBoxContentOLC::Update(InfoBoxData &data)$/;"	f	class:InfoBoxContentOLC
Update	src/InfoBoxes/Content/Contest.cpp	/^InfoBoxContentOLCSpeed::Update(InfoBoxData &data)$/;"	f	class:InfoBoxContentOLCSpeed
Update	src/InfoBoxes/Content/Direction.cpp	/^InfoBoxContentTrack::Update(InfoBoxData &data)$/;"	f	class:InfoBoxContentTrack
Update	src/InfoBoxes/Content/MacCready.cpp	/^InfoBoxContentMacCready::Update(InfoBoxData &data)$/;"	f	class:InfoBoxContentMacCready
Update	src/InfoBoxes/Content/Other.cpp	/^InfoBoxContentHorizon::Update(InfoBoxData &data)$/;"	f	class:InfoBoxContentHorizon
Update	src/InfoBoxes/Content/Radio.cpp	/^InfoBoxContentActiveRadioFrequency::Update(InfoBoxData &data)$/;"	f	class:InfoBoxContentActiveRadioFrequency
Update	src/InfoBoxes/Content/Radio.cpp	/^InfoBoxContentStandbyRadioFrequency::Update(InfoBoxData &data)$/;"	f	class:InfoBoxContentStandbyRadioFrequency
Update	src/InfoBoxes/Content/Speed.cpp	/^InfoBoxContentSpeedGround::Update(InfoBoxData &data)$/;"	f	class:InfoBoxContentSpeedGround
Update	src/InfoBoxes/Content/Task.cpp	/^InfoBoxContentNextArrow::Update(InfoBoxData &data)$/;"	f	class:InfoBoxContentNextArrow
Update	src/InfoBoxes/Content/Task.cpp	/^InfoBoxContentNextWaypoint::Update(InfoBoxData &data)$/;"	f	class:InfoBoxContentNextWaypoint
Update	src/InfoBoxes/Content/Team.cpp	/^InfoBoxContentTeamCode::Update(InfoBoxData &data)$/;"	f	class:InfoBoxContentTeamCode
Update	src/InfoBoxes/Content/Thermal.cpp	/^InfoBoxContentClimbPercent::Update(InfoBoxData &data)$/;"	f	class:InfoBoxContentClimbPercent
Update	src/InfoBoxes/Content/Thermal.cpp	/^InfoBoxContentThermalAssistant::Update(InfoBoxData &data)$/;"	f	class:InfoBoxContentThermalAssistant
Update	src/InfoBoxes/Content/Trace.cpp	/^InfoBoxContentBarogram::Update(InfoBoxData &data)$/;"	f	class:InfoBoxContentBarogram
Update	src/InfoBoxes/Content/Trace.cpp	/^InfoBoxContentCirclingAverageSpark::Update(InfoBoxData &data)$/;"	f	class:InfoBoxContentCirclingAverageSpark
Update	src/InfoBoxes/Content/Trace.cpp	/^InfoBoxContentNettoVarioSpark::Update(InfoBoxData &data)$/;"	f	class:InfoBoxContentNettoVarioSpark
Update	src/InfoBoxes/Content/Trace.cpp	/^InfoBoxContentTaskProgress::Update(InfoBoxData &data)$/;"	f	class:InfoBoxContentTaskProgress
Update	src/InfoBoxes/Content/Trace.cpp	/^InfoBoxContentThermalBand::Update(InfoBoxData &data)$/;"	f	class:InfoBoxContentThermalBand
Update	src/InfoBoxes/Content/Trace.cpp	/^InfoBoxContentVarioSpark::Update(InfoBoxData &data)$/;"	f	class:InfoBoxContentVarioSpark
Update	src/InfoBoxes/Content/Weather.cpp	/^InfoBoxContentTemperatureForecast::Update(InfoBoxData &data)$/;"	f	class:InfoBoxContentTemperatureForecast
Update	src/InfoBoxes/Content/Weather.cpp	/^InfoBoxContentWindArrow::Update(InfoBoxData &data)$/;"	f	class:InfoBoxContentWindArrow
Update	src/Logger/LoggerFRecord.cpp	/^LoggerFRecord::Update(const GPSState &gps, double time, bool nav_warning)$/;"	f	class:LoggerFRecord
Update	src/Math/AvFilter.hpp	/^  bool Update(const double x0) {$/;"	f	class:AvFilter
Update	src/Math/KalmanFilter1d.cpp	/^KalmanFilter1d::Update(const double z_abs, const double var_z_abs,$/;"	f	class:KalmanFilter1d
Update	src/Math/SelfTimingKalmanFilter1d.cpp	/^SelfTimingKalmanFilter1d::Update(const double z_abs, const double var_z_abs)$/;"	f	class:SelfTimingKalmanFilter1d
Update	src/Math/WindowFilter.hpp	/^  bool Update(const double x0) {$/;"	f	class:WindowFilter
Update	src/Monitor/AirspaceWarningMonitor.cpp	/^  bool Update(const AbstractAirspace &_airspace,$/;"	f	class:final
Update	src/NMEA/Validity.hpp	/^  void Update(double now) {$/;"	f	class:Validity
Update	src/PageActions.cpp	/^PageActions::Update()$/;"	f	class:PageActions
Update	src/Replay/AircraftSim.cpp	/^AircraftSim::Update(const Angle heading, const double timestep)$/;"	f	class:AircraftSim
Update	src/Replay/CatmullRomInterpolator.hpp	/^  Update(double t, GeoPoint location, double alt, double palt)$/;"	f	class:CatmullRomInterpolator
Update	src/Replay/DemoReplay.cpp	/^DemoReplay::Update(double time_scale, TaskAccessor& task)$/;"	f	class:DemoReplay
Update	src/Replay/DemoReplayGlue.cpp	/^DemoReplayGlue::Update(NMEAInfo &data)$/;"	f	class:DemoReplayGlue
Update	src/Replay/IgcReplay.cpp	/^IgcReplay::Update(NMEAInfo &basic)$/;"	f	class:IgcReplay
Update	src/Replay/NmeaReplay.cpp	/^NmeaReplay::Update(NMEAInfo &data)$/;"	f	class:NmeaReplay
Update	src/Replay/Replay.cpp	/^Replay::Update()$/;"	f	class:Replay
Update	src/TeamCode/TeamCode.cpp	/^TeamCode::Update(Angle bearing, double range)$/;"	f	class:TeamCode
Update	src/TeamCode/TeamCode.cpp	/^TeamCode::Update(const TCHAR* _code)$/;"	f	class:TeamCode
Update	src/Topography/TopographyFile.cpp	/^TopographyFile::Update(const WindowProjection &map_projection)$/;"	f	class:TopographyFile
Update	src/UIUtil/GestureManager.cpp	/^GestureManager::Update(PixelPoint p)$/;"	f	class:GestureManager
Update	src/UIUtil/TrackingGestureManager.cpp	/^TrackingGestureManager::Update(PixelPoint p)$/;"	f	class:TrackingGestureManager
Update	src/Weather/NOAAUpdater.cpp	/^NOAAUpdater::Update(NOAAStore &store, CurlGlobal &curl, JobRunner &runner)$/;"	f	class:NOAAUpdater
Update	src/Weather/NOAAUpdater.cpp	/^NOAAUpdater::Update(NOAAStore::Item &item,$/;"	f	class:NOAAUpdater
Update	src/Weather/Rasp/RaspRenderer.hpp	/^  void Update(BrokenTime time_local, OperationEnvironment &operation) {$/;"	f	class:RaspRenderer
Update	src/time/DeltaTime.cpp	/^DeltaTime::Update(double current_time, double min_delta, double warp_tolerance)$/;"	f	class:DeltaTime
Update	src/time/GPSClock.hpp	/^  void Update(double now) {$/;"	f	class:GPSClock
Update	src/time/PeriodClock.hpp	/^  void Update() {$/;"	f	class:PeriodClock
Update	src/time/PeriodClock.hpp	/^  void Update(Stamp now) {$/;"	f	class:PeriodClock
UpdateActiveIndex	src/Dialogs/Weather/MapOverlayWidget.cpp	/^  void UpdateActiveIndex() {$/;"	f	class:final	file:
UpdateAll	src/MapWindow/MapWindow.hpp	/^  void UpdateAll() {$/;"	f	class:MapWindow
UpdateAllowedCharacters	src/Dialogs/TouchTextEntry.cpp	/^UpdateAllowedCharacters()$/;"	f	file:
UpdateArrayBuffer	src/Topography/TopographyFileRenderer.cpp	/^TopographyFileRenderer::UpdateArrayBuffer()$/;"	f	class:TopographyFileRenderer
UpdateAutoMC	src/Engine/Task/TaskManager.cpp	/^TaskManager::UpdateAutoMC(const AircraftState &state_now,$/;"	f	class:TaskManager
UpdateAutopilot	src/Replay/TaskAutoPilot.cpp	/^TaskAutoPilot::UpdateAutopilot(TaskAccessor &task, const AircraftState &state)$/;"	f	class:TaskAutoPilot
UpdateAvailable	src/Dialogs/FileManager.cpp	/^UpdateAvailable(const FileRepository &repository, const TCHAR *name)$/;"	f	file:
UpdateBatteryInfo	src/Hardware/Battery.cpp	/^UpdateBatteryInfo()$/;"	f
UpdateBatteryInfo	src/Hardware/Battery.hpp	/^UpdateBatteryInfo()$/;"	f
UpdateBestLD	src/Engine/GlideSolvers/GlidePolar.cpp	/^GlidePolar::UpdateBestLD()$/;"	f	class:GlidePolar
UpdateBoundingBox	src/Engine/Task/Ordered/Points/OrderedTaskPoint.cpp	/^OrderedTaskPoint::UpdateBoundingBox(const FlatProjection &projection)$/;"	f	class:OrderedTaskPoint
UpdateButtons	src/Dialogs/Airspace/dlgAirspaceWarnings.cpp	/^AirspaceWarningListWidget::UpdateButtons()$/;"	f	class:AirspaceWarningListWidget
UpdateButtons	src/Dialogs/Device/DeviceListDialog.cpp	/^DeviceListWidget::UpdateButtons()$/;"	f	class:DeviceListWidget
UpdateButtons	src/Dialogs/Device/ScanBluetoothLeDialog.cpp	/^  void UpdateButtons() {$/;"	f	class:final
UpdateButtons	src/Dialogs/DownloadFilePicker.cpp	/^  void UpdateButtons() {$/;"	f	class:final
UpdateButtons	src/Dialogs/FileManager.cpp	/^ManagedFileListWidget::UpdateButtons()$/;"	f	class:ManagedFileListWidget
UpdateButtons	src/Dialogs/MapItemListDialog.cpp	/^  void UpdateButtons() {$/;"	f	class:final
UpdateButtons	src/Dialogs/Settings/Panels/PagesConfigPanel.cpp	/^  void UpdateButtons() {$/;"	f	class:PageListWidget
UpdateButtons	src/Dialogs/Task/Manager/TaskEditPanel.cpp	/^TaskEditPanel::UpdateButtons()$/;"	f	class:TaskEditPanel
UpdateButtons	src/Dialogs/Task/OptionalStartsDialog.cpp	/^  void UpdateButtons() {$/;"	f	class:OptionStartsWidget
UpdateButtons	src/Dialogs/Traffic/TrafficList.cpp	/^TrafficListWidget::UpdateButtons()$/;"	f	class:TrafficListWidget
UpdateButtons	src/Dialogs/Waypoint/Manager.cpp	/^WaypointManagerWidget::UpdateButtons()$/;"	f	class:WaypointManagerWidget
UpdateButtons	src/Kobo/NetworkDialog.cpp	/^NetworkWidget::UpdateButtons()$/;"	f	class:NetworkWidget
UpdateButtons	src/Kobo/WifiDialog.cpp	/^WifiListWidget::UpdateButtons()$/;"	f	class:WifiListWidget
UpdateCRC16CCITT	src/util/CRC.hpp	/^UpdateCRC16CCITT(const uint8_t *data, const uint8_t *end, uint16_t crc)$/;"	f
UpdateCRC16CCITT	src/util/CRC.hpp	/^UpdateCRC16CCITT(const void *data, size_t length, uint16_t crc)$/;"	f
UpdateCRC16CCITT	src/util/CRC.hpp	/^UpdateCRC16CCITT(uint8_t octet, uint16_t crc)$/;"	f
UpdateCaption	src/Dialogs/Device/Vega/VegaConfigurationDialog.cpp	/^UpdateCaption(WndForm &form, unsigned page)$/;"	f	file:
UpdateCaption	src/Dialogs/Plane/PlaneDetailsDialog.cpp	/^PlaneEditWidget::UpdateCaption()$/;"	f	class:PlaneEditWidget
UpdateCaption	src/Dialogs/Task/Manager/TaskManagerDialog.cpp	/^TaskManagerDialog::UpdateCaption()$/;"	f	class:TaskManagerDialog
UpdateCaption	src/Dialogs/Waypoint/dlgWaypointDetails.cpp	/^UpdateCaption(WndForm *form, const Waypoint &waypoint)$/;"	f	file:
UpdateCaption	src/Dialogs/dlgChecklist.cpp	/^UpdateCaption(WndForm &form, unsigned page)$/;"	f	file:
UpdateCaption	src/Dialogs/dlgQuickMenu.cpp	/^QuickMenu::UpdateCaption()$/;"	f	class:QuickMenu
UpdateChanging	src/Dialogs/Traffic/FlarmTrafficDetails.cpp	/^FlarmTrafficDetailsWidget::UpdateChanging(const MoreData &basic)$/;"	f	class:FlarmTrafficDetailsWidget
UpdateClicked	src/Dialogs/Weather/MapOverlayWidget.cpp	/^WeatherMapOverlayListWidget::UpdateClicked()$/;"	f	class:WeatherMapOverlayListWidget
UpdateClicked	src/Dialogs/Weather/NOAADetails.cpp	/^NOAADetailsWidget::UpdateClicked()$/;"	f	class:NOAADetailsWidget
UpdateClicked	src/Dialogs/Weather/NOAAList.cpp	/^NOAAListWidget::UpdateClicked()$/;"	f	class:NOAAListWidget
UpdateClock	src/NMEA/Info.cpp	/^NMEAInfo::UpdateClock()$/;"	f	class:NMEAInfo
UpdateCommonStats	src/Engine/Task/TaskManager.cpp	/^TaskManager::UpdateCommonStats(const AircraftState &state)$/;"	f	class:TaskManager
UpdateCommonStatsPolar	src/Engine/Task/TaskManager.cpp	/^TaskManager::UpdateCommonStatsPolar(const AircraftState &state)$/;"	f	class:TaskManager
UpdateCommonStatsTask	src/Engine/Task/TaskManager.cpp	/^TaskManager::UpdateCommonStatsTask()$/;"	f	class:TaskManager
UpdateCommonStatsTimes	src/Engine/Task/TaskManager.cpp	/^TaskManager::UpdateCommonStatsTimes(const AircraftState &state)$/;"	f	class:TaskManager
UpdateCommonStatsWaypoints	src/Engine/Task/TaskManager.cpp	/^TaskManager::UpdateCommonStatsWaypoints(const AircraftState &state)$/;"	f	class:TaskManager
UpdateComputer	src/Replay/TaskAutoPilot.cpp	/^TaskAutoPilot::UpdateComputer(TaskAccessor& task, const AircraftState& state)$/;"	f	class:TaskAutoPilot
UpdateConfigured	src/Kobo/WifiDialog.cpp	/^WifiListWidget::UpdateConfigured()$/;"	f	class:WifiListWidget
UpdateContent	src/InfoBoxes/InfoBoxWindow.cpp	/^InfoBoxWindow::UpdateContent()$/;"	f	class:InfoBoxWindow
UpdateCrossSection	src/Dialogs/dlgAnalysis.cpp	/^ChartControl::UpdateCrossSection(const MoreData &basic,$/;"	f	class:ChartControl
UpdateCruiseBearing	src/Replay/TaskAutoPilot.cpp	/^TaskAutoPilot::UpdateCruiseBearing(const TaskAccessor& task,$/;"	f	class:TaskAutoPilot
UpdateCursor	src/Dialogs/KnobTextEntry.cpp	/^  void UpdateCursor() {$/;"	f	class:final	file:
UpdateDelta	src/Engine/Trace/Trace.cpp	/^Trace::UpdateDelta(TraceDelta &td)$/;"	f	class:Trace
UpdateDisplayMode	src/ActionInterface.cpp	/^ActionInterface::UpdateDisplayMode()$/;"	f	class:ActionInterface
UpdateDisplayMode	src/MapWindow/GlueMapWindowDisplayMode.cpp	/^GlueMapWindow::UpdateDisplayMode()$/;"	f	class:GlueMapWindow
UpdateFiles	src/Dialogs/FileManager.cpp	/^ManagedFileListWidget::UpdateFiles() {$/;"	f	class:ManagedFileListWidget
UpdateFilter	src/Engine/Airspace/AirspaceWarningManager.cpp	/^AirspaceWarningManager::UpdateFilter(const AircraftState& state, const bool circling)$/;"	f	class:AirspaceWarningManager
UpdateGR	src/Computer/GlideRatioCalculator.cpp	/^UpdateGR(double gr, double leg_distance, double height_above_leg,$/;"	f
UpdateGaugeVisibility	src/MainWindow.cpp	/^MainWindow::UpdateGaugeVisibility()$/;"	f	class:MainWindow
UpdateGeometry	src/Engine/Task/Factory/AbstractTaskFactory.cpp	/^AbstractTaskFactory::UpdateGeometry()$/;"	f	class:AbstractTaskFactory
UpdateGeometry	src/Engine/Task/Ordered/OrderedTask.cpp	/^OrderedTask::UpdateGeometry()$/;"	f	class:OrderedTask
UpdateGeometry	src/Engine/Task/Ordered/Points/OrderedTaskPoint.cpp	/^OrderedTaskPoint::UpdateGeometry()$/;"	f	class:OrderedTaskPoint
UpdateGlide	src/Engine/Airspace/AirspaceWarningManager.cpp	/^AirspaceWarningManager::UpdateGlide(const AircraftState &state,$/;"	f	class:AirspaceWarningManager
UpdateIdle	src/Engine/Contest/ContestManager.cpp	/^ContestManager::UpdateIdle(bool exhaustive)$/;"	f	class:ContestManager
UpdateIdle	src/Engine/Task/TaskManager.cpp	/^TaskManager::UpdateIdle(const AircraftState &state)$/;"	f	class:TaskManager
UpdateInfoBoxATCRadial	src/InfoBoxes/Content/Places.cpp	/^UpdateInfoBoxATCRadial(InfoBoxData &data)$/;"	f
UpdateInfoBoxAltitudeAGL	src/InfoBoxes/Content/Altitude.cpp	/^UpdateInfoBoxAltitudeAGL(InfoBoxData &data)$/;"	f
UpdateInfoBoxAltitudeBaro	src/InfoBoxes/Content/Altitude.cpp	/^UpdateInfoBoxAltitudeBaro(InfoBoxData &data)$/;"	f
UpdateInfoBoxAltitudeFlightLevel	src/InfoBoxes/Content/Altitude.cpp	/^UpdateInfoBoxAltitudeFlightLevel(InfoBoxData &data)$/;"	f
UpdateInfoBoxAltitudeNav	src/InfoBoxes/Content/Altitude.cpp	/^UpdateInfoBoxAltitudeNav(InfoBoxData &data)$/;"	f
UpdateInfoBoxAltitudeQFE	src/InfoBoxes/Content/Altitude.cpp	/^UpdateInfoBoxAltitudeQFE(InfoBoxData &data)$/;"	f
UpdateInfoBoxBattery	src/InfoBoxes/Content/Other.cpp	/^UpdateInfoBoxBattery(InfoBoxData &data)$/;"	f
UpdateInfoBoxBearing	src/InfoBoxes/Content/Task.cpp	/^UpdateInfoBoxBearing(InfoBoxData &data)$/;"	f
UpdateInfoBoxBearingDiff	src/InfoBoxes/Content/Task.cpp	/^UpdateInfoBoxBearingDiff(InfoBoxData &data)$/;"	f
UpdateInfoBoxCPULoad	src/InfoBoxes/Content/Other.cpp	/^UpdateInfoBoxCPULoad(InfoBoxData &data)$/;"	f
UpdateInfoBoxCircleDiameter	src/InfoBoxes/Content/Thermal.cpp	/^UpdateInfoBoxCircleDiameter(InfoBoxData &data)$/;"	f
UpdateInfoBoxCruiseEfficiency	src/InfoBoxes/Content/Task.cpp	/^UpdateInfoBoxCruiseEfficiency(InfoBoxData &data)$/;"	f
UpdateInfoBoxExperimental1	src/InfoBoxes/Content/Other.cpp	/^UpdateInfoBoxExperimental1(InfoBoxData &data)$/;"	f
UpdateInfoBoxExperimental2	src/InfoBoxes/Content/Other.cpp	/^UpdateInfoBoxExperimental2(InfoBoxData &data)$/;"	f
UpdateInfoBoxFinalAltitudeDiff	src/InfoBoxes/Content/Task.cpp	/^UpdateInfoBoxFinalAltitudeDiff(InfoBoxData &data)$/;"	f
UpdateInfoBoxFinalAltitudeRequire	src/InfoBoxes/Content/Task.cpp	/^UpdateInfoBoxFinalAltitudeRequire(InfoBoxData &data)$/;"	f
UpdateInfoBoxFinalDistance	src/InfoBoxes/Content/Task.cpp	/^UpdateInfoBoxFinalDistance(InfoBoxData &data)$/;"	f
UpdateInfoBoxFinalETA	src/InfoBoxes/Content/Task.cpp	/^UpdateInfoBoxFinalETA(InfoBoxData &data)$/;"	f
UpdateInfoBoxFinalETE	src/InfoBoxes/Content/Task.cpp	/^UpdateInfoBoxFinalETE(InfoBoxData &data)$/;"	f
UpdateInfoBoxFinalETEVMG	src/InfoBoxes/Content/Task.cpp	/^UpdateInfoBoxFinalETEVMG(InfoBoxData &data)$/;"	f
UpdateInfoBoxFinalGR	src/InfoBoxes/Content/Task.cpp	/^UpdateInfoBoxFinalGR(InfoBoxData &data)$/;"	f
UpdateInfoBoxFinalMC0AltitudeDiff	src/InfoBoxes/Content/Task.cpp	/^UpdateInfoBoxFinalMC0AltitudeDiff(InfoBoxData &data)$/;"	f
UpdateInfoBoxFreeRAM	src/InfoBoxes/Content/Other.cpp	/^UpdateInfoBoxFreeRAM(InfoBoxData &data)$/;"	f
UpdateInfoBoxFrequency	src/InfoBoxes/Content/Radio.cpp	/^UpdateInfoBoxFrequency(InfoBoxData & data, const RadioFrequency & freq, const TCHAR * freq_name)$/;"	f	file:
UpdateInfoBoxGLoad	src/InfoBoxes/Content/Other.cpp	/^UpdateInfoBoxGLoad(InfoBoxData &data)$/;"	f
UpdateInfoBoxGRAvg	src/InfoBoxes/Content/Glide.cpp	/^UpdateInfoBoxGRAvg(InfoBoxData &data)$/;"	f
UpdateInfoBoxGRCruise	src/InfoBoxes/Content/Glide.cpp	/^UpdateInfoBoxGRCruise(InfoBoxData &data)$/;"	f
UpdateInfoBoxGRInstant	src/InfoBoxes/Content/Glide.cpp	/^UpdateInfoBoxGRInstant(InfoBoxData &data)$/;"	f
UpdateInfoBoxHeadWind	src/InfoBoxes/Content/Weather.cpp	/^UpdateInfoBoxHeadWind(InfoBoxData &data)$/;"	f
UpdateInfoBoxHeadWindSimplified	src/InfoBoxes/Content/Weather.cpp	/^UpdateInfoBoxHeadWindSimplified(InfoBoxData &data)$/;"	f
UpdateInfoBoxHomeDistance	src/InfoBoxes/Content/Places.cpp	/^UpdateInfoBoxHomeDistance(InfoBoxData &data)$/;"	f
UpdateInfoBoxHumidity	src/InfoBoxes/Content/Weather.cpp	/^UpdateInfoBoxHumidity(InfoBoxData &data)$/;"	f
UpdateInfoBoxLDVario	src/InfoBoxes/Content/Glide.cpp	/^UpdateInfoBoxLDVario(InfoBoxData &data)$/;"	f
UpdateInfoBoxNbrSat	src/InfoBoxes/Content/Other.cpp	/^UpdateInfoBoxNbrSat(InfoBoxData &data)$/;"	f
UpdateInfoBoxNearestAirspaceHorizontal	src/InfoBoxes/Content/Airspace.cpp	/^UpdateInfoBoxNearestAirspaceHorizontal(InfoBoxData &data)$/;"	f
UpdateInfoBoxNearestAirspaceVertical	src/InfoBoxes/Content/Airspace.cpp	/^UpdateInfoBoxNearestAirspaceVertical(InfoBoxData &data)$/;"	f
UpdateInfoBoxNextAltitudeArrival	src/InfoBoxes/Content/Task.cpp	/^UpdateInfoBoxNextAltitudeArrival(InfoBoxData &data)$/;"	f
UpdateInfoBoxNextAltitudeDiff	src/InfoBoxes/Content/Task.cpp	/^UpdateInfoBoxNextAltitudeDiff(InfoBoxData &data)$/;"	f
UpdateInfoBoxNextAltitudeRequire	src/InfoBoxes/Content/Task.cpp	/^UpdateInfoBoxNextAltitudeRequire(InfoBoxData &data)$/;"	f
UpdateInfoBoxNextDistance	src/InfoBoxes/Content/Task.cpp	/^UpdateInfoBoxNextDistance(InfoBoxData &data)$/;"	f
UpdateInfoBoxNextDistanceNominal	src/InfoBoxes/Content/Task.cpp	/^UpdateInfoBoxNextDistanceNominal(InfoBoxData &data)$/;"	f
UpdateInfoBoxNextETA	src/InfoBoxes/Content/Task.cpp	/^UpdateInfoBoxNextETA(InfoBoxData &data)$/;"	f
UpdateInfoBoxNextETAVMG	src/InfoBoxes/Content/Task.cpp	/^UpdateInfoBoxNextETAVMG(InfoBoxData &data)$/;"	f
UpdateInfoBoxNextETE	src/InfoBoxes/Content/Task.cpp	/^UpdateInfoBoxNextETE(InfoBoxData &data)$/;"	f
UpdateInfoBoxNextETEVMG	src/InfoBoxes/Content/Task.cpp	/^UpdateInfoBoxNextETEVMG(InfoBoxData &data)$/;"	f
UpdateInfoBoxNextGR	src/InfoBoxes/Content/Task.cpp	/^UpdateInfoBoxNextGR(InfoBoxData &data)$/;"	f
UpdateInfoBoxNextLegEqThermal	src/InfoBoxes/Content/Thermal.cpp	/^UpdateInfoBoxNextLegEqThermal(InfoBoxData &data)$/;"	f
UpdateInfoBoxNextMC0AltitudeDiff	src/InfoBoxes/Content/Task.cpp	/^UpdateInfoBoxNextMC0AltitudeDiff(InfoBoxData &data)$/;"	f
UpdateInfoBoxNonCirclingClimbRatio	src/InfoBoxes/Content/Thermal.cpp	/^UpdateInfoBoxNonCirclingClimbRatio(InfoBoxData &data)$/;"	f
UpdateInfoBoxRadial	src/InfoBoxes/Content/Task.cpp	/^UpdateInfoBoxRadial(InfoBoxData &data)$/;"	f
UpdateInfoBoxSpeed	src/InfoBoxes/Content/Speed.cpp	/^UpdateInfoBoxSpeed(InfoBoxData &data)$/;"	f
UpdateInfoBoxSpeedDolphin	src/InfoBoxes/Content/Speed.cpp	/^UpdateInfoBoxSpeedDolphin(InfoBoxData &data)$/;"	f
UpdateInfoBoxSpeedIndicated	src/InfoBoxes/Content/Speed.cpp	/^UpdateInfoBoxSpeedIndicated(InfoBoxData &data)$/;"	f
UpdateInfoBoxSpeedMacCready	src/InfoBoxes/Content/Speed.cpp	/^UpdateInfoBoxSpeedMacCready(InfoBoxData &data)$/;"	f
UpdateInfoBoxStartOpen	src/InfoBoxes/Content/Task.cpp	/^UpdateInfoBoxStartOpen(InfoBoxData &data)$/;"	f
UpdateInfoBoxStartOpenArrival	src/InfoBoxes/Content/Task.cpp	/^UpdateInfoBoxStartOpenArrival(InfoBoxData &data)$/;"	f
UpdateInfoBoxTakeoffDistance	src/InfoBoxes/Content/Places.cpp	/^UpdateInfoBoxTakeoffDistance(InfoBoxData &data)$/;"	f
UpdateInfoBoxTaskAADistance	src/InfoBoxes/Content/Task.cpp	/^UpdateInfoBoxTaskAADistance(InfoBoxData &data)$/;"	f
UpdateInfoBoxTaskAADistanceMax	src/InfoBoxes/Content/Task.cpp	/^UpdateInfoBoxTaskAADistanceMax(InfoBoxData &data)$/;"	f
UpdateInfoBoxTaskAADistanceMin	src/InfoBoxes/Content/Task.cpp	/^UpdateInfoBoxTaskAADistanceMin(InfoBoxData &data)$/;"	f
UpdateInfoBoxTaskAASpeed	src/InfoBoxes/Content/Task.cpp	/^UpdateInfoBoxTaskAASpeed(InfoBoxData &data)$/;"	f
UpdateInfoBoxTaskAASpeedMax	src/InfoBoxes/Content/Task.cpp	/^UpdateInfoBoxTaskAASpeedMax(InfoBoxData &data)$/;"	f
UpdateInfoBoxTaskAASpeedMin	src/InfoBoxes/Content/Task.cpp	/^UpdateInfoBoxTaskAASpeedMin(InfoBoxData &data)$/;"	f
UpdateInfoBoxTaskAATime	src/InfoBoxes/Content/Task.cpp	/^UpdateInfoBoxTaskAATime(InfoBoxData &data)$/;"	f
UpdateInfoBoxTaskAATimeDelta	src/InfoBoxes/Content/Task.cpp	/^UpdateInfoBoxTaskAATimeDelta(InfoBoxData &data)$/;"	f
UpdateInfoBoxTaskSpeed	src/InfoBoxes/Content/Task.cpp	/^UpdateInfoBoxTaskSpeed(InfoBoxData &data)$/;"	f
UpdateInfoBoxTaskSpeedAchieved	src/InfoBoxes/Content/Task.cpp	/^UpdateInfoBoxTaskSpeedAchieved(InfoBoxData &data)$/;"	f
UpdateInfoBoxTaskSpeedHour	src/InfoBoxes/Content/Task.cpp	/^UpdateInfoBoxTaskSpeedHour(InfoBoxData &data)$/;"	f
UpdateInfoBoxTaskSpeedInstant	src/InfoBoxes/Content/Task.cpp	/^UpdateInfoBoxTaskSpeedInstant(InfoBoxData &data)$/;"	f
UpdateInfoBoxTaskTimeUnderMaxHeight	src/InfoBoxes/Content/Task.cpp	/^UpdateInfoBoxTaskTimeUnderMaxHeight(InfoBoxData &data)$/;"	f
UpdateInfoBoxTeamBearing	src/InfoBoxes/Content/Team.cpp	/^UpdateInfoBoxTeamBearing(InfoBoxData &data)$/;"	f
UpdateInfoBoxTeamBearingDiff	src/InfoBoxes/Content/Team.cpp	/^UpdateInfoBoxTeamBearingDiff(InfoBoxData &data)$/;"	f
UpdateInfoBoxTeamDistance	src/InfoBoxes/Content/Team.cpp	/^UpdateInfoBoxTeamDistance(InfoBoxData &data)$/;"	f
UpdateInfoBoxTemperature	src/InfoBoxes/Content/Weather.cpp	/^UpdateInfoBoxTemperature(InfoBoxData &data)$/;"	f
UpdateInfoBoxTerrainCollision	src/InfoBoxes/Content/Terrain.cpp	/^UpdateInfoBoxTerrainCollision(InfoBoxData &data)$/;"	f
UpdateInfoBoxTerrainHeight	src/InfoBoxes/Content/Terrain.cpp	/^UpdateInfoBoxTerrainHeight(InfoBoxData &data)$/;"	f
UpdateInfoBoxThermal30s	src/InfoBoxes/Content/Thermal.cpp	/^UpdateInfoBoxThermal30s(InfoBoxData &data)$/;"	f
UpdateInfoBoxThermalAllAvg	src/InfoBoxes/Content/Thermal.cpp	/^UpdateInfoBoxThermalAllAvg(InfoBoxData &data)$/;"	f
UpdateInfoBoxThermalAvg	src/InfoBoxes/Content/Thermal.cpp	/^UpdateInfoBoxThermalAvg(InfoBoxData &data)$/;"	f
UpdateInfoBoxThermalGain	src/InfoBoxes/Content/Thermal.cpp	/^UpdateInfoBoxThermalGain(InfoBoxData &data)$/;"	f
UpdateInfoBoxThermalLastAvg	src/InfoBoxes/Content/Thermal.cpp	/^UpdateInfoBoxThermalLastAvg(InfoBoxData &data)$/;"	f
UpdateInfoBoxThermalLastGain	src/InfoBoxes/Content/Thermal.cpp	/^UpdateInfoBoxThermalLastGain(InfoBoxData &data)$/;"	f
UpdateInfoBoxThermalLastTime	src/InfoBoxes/Content/Thermal.cpp	/^UpdateInfoBoxThermalLastTime(InfoBoxData &data)$/;"	f
UpdateInfoBoxThermalRatio	src/InfoBoxes/Content/Thermal.cpp	/^UpdateInfoBoxThermalRatio(InfoBoxData &data)$/;"	f
UpdateInfoBoxThermalTime	src/InfoBoxes/Content/Thermal.cpp	/^UpdateInfoBoxThermalTime(InfoBoxData& data)$/;"	f
UpdateInfoBoxTimeFlight	src/InfoBoxes/Content/Time.cpp	/^UpdateInfoBoxTimeFlight(InfoBoxData &data)$/;"	f
UpdateInfoBoxTimeLocal	src/InfoBoxes/Content/Time.cpp	/^UpdateInfoBoxTimeLocal(InfoBoxData &data)$/;"	f
UpdateInfoBoxTimeUTC	src/InfoBoxes/Content/Time.cpp	/^UpdateInfoBoxTimeUTC(InfoBoxData &data)$/;"	f
UpdateInfoBoxVario	src/InfoBoxes/Content/Thermal.cpp	/^UpdateInfoBoxVario(InfoBoxData &data)$/;"	f
UpdateInfoBoxVarioDistance	src/InfoBoxes/Content/Thermal.cpp	/^UpdateInfoBoxVarioDistance(InfoBoxData &data)$/;"	f
UpdateInfoBoxVarioNetto	src/InfoBoxes/Content/Thermal.cpp	/^UpdateInfoBoxVarioNetto(InfoBoxData &data)$/;"	f
UpdateInfoBoxWindBearing	src/InfoBoxes/Content/Weather.cpp	/^UpdateInfoBoxWindBearing(InfoBoxData &data)$/;"	f
UpdateInfoBoxWindSpeed	src/InfoBoxes/Content/Weather.cpp	/^UpdateInfoBoxWindSpeed(InfoBoxData &data)$/;"	f
UpdateInside	src/Engine/Airspace/AirspaceWarningManager.cpp	/^AirspaceWarningManager::UpdateInside(const AircraftState& state,$/;"	f	class:AirspaceWarningManager
UpdateInvalidLabel	src/Dialogs/Plane/PlanePolarDialog.cpp	/^PlanePolarWidget::UpdateInvalidLabel()$/;"	f	class:PlanePolarWidget
UpdateLayout	src/Form/ButtonPanel.cpp	/^ButtonPanel::UpdateLayout()$/;"	f	class:ButtonPanel
UpdateLayout	src/Form/ButtonPanel.cpp	/^ButtonPanel::UpdateLayout(const PixelRect rc)$/;"	f	class:ButtonPanel
UpdateLayout	src/Form/Form.cpp	/^WndForm::UpdateLayout()$/;"	f	class:WndForm
UpdateLayout	src/Form/TabDisplay.cpp	/^TabDisplay::UpdateLayout(const PixelRect &rc, bool _vertical)$/;"	f	class:TabDisplay
UpdateLayout	src/Form/TabMenuDisplay.cpp	/^TabMenuDisplay::UpdateLayout()$/;"	f	class:TabMenuDisplay
UpdateLayout	src/Gauge/ThermalAssistantRenderer.cpp	/^ThermalAssistantRenderer::UpdateLayout(const PixelRect &rc)$/;"	f	class:ThermalAssistantRenderer
UpdateLayout	src/PopupMessage.cpp	/^PopupMessage::UpdateLayout(PixelRect _rc)$/;"	f	class:PopupMessage
UpdateLayout	src/ProgressWindow.cpp	/^ProgressWindow::UpdateLayout(PixelRect rc)$/;"	f	class:ProgressWindow
UpdateList	src/Dialogs/Airspace/AirspaceList.cpp	/^AirspaceListWidget::UpdateList()$/;"	f	class:AirspaceListWidget
UpdateList	src/Dialogs/Airspace/dlgAirspaceWarnings.cpp	/^AirspaceWarningListWidget::UpdateList()$/;"	f	class:AirspaceWarningListWidget
UpdateList	src/Dialogs/Plane/PlaneListDialog.cpp	/^PlaneListWidget::UpdateList()$/;"	f	class:PlaneListWidget
UpdateList	src/Dialogs/ProfileListDialog.cpp	/^ProfileListWidget::UpdateList()$/;"	f	class:ProfileListWidget
UpdateList	src/Dialogs/Task/OptionalStartsDialog.cpp	/^  void UpdateList() {$/;"	f	class:OptionStartsWidget
UpdateList	src/Dialogs/Traffic/TrafficList.cpp	/^TrafficListWidget::UpdateList()$/;"	f	class:TrafficListWidget
UpdateList	src/Dialogs/Waypoint/Manager.cpp	/^WaypointManagerWidget::UpdateList()$/;"	f	class:WaypointManagerWidget
UpdateList	src/Dialogs/Waypoint/WaypointList.cpp	/^WaypointListWidget::UpdateList()$/;"	f	class:WaypointListWidget
UpdateList	src/Dialogs/Weather/MapOverlayWidget.cpp	/^WeatherMapOverlayListWidget::UpdateList()$/;"	f	class:WeatherMapOverlayListWidget
UpdateList	src/Dialogs/Weather/NOAAList.cpp	/^NOAAListWidget::UpdateList()$/;"	f	class:NOAAListWidget
UpdateList	src/Kobo/WifiDialog.cpp	/^WifiListWidget::UpdateList()$/;"	f	class:WifiListWidget
UpdateMapScale	src/MapWindow/GlueMapWindowDisplayMode.cpp	/^GlueMapWindow::UpdateMapScale()$/;"	f	class:GlueMapWindow
UpdateMeasurements	src/Atmosphere/CuSonde.cpp	/^CuSonde::UpdateMeasurements(const NMEAInfo &basic,$/;"	f	class:CuSonde
UpdateMode	src/Replay/TaskAutoPilot.cpp	/^TaskAutoPilot::UpdateMode(const TaskAccessor& task, const AircraftState& state)$/;"	f	class:TaskAutoPilot
UpdateNameButton	src/Dialogs/Task/TargetDialog.cpp	/^TargetWidget::UpdateNameButton()$/;"	f	class:TargetWidget
UpdateOZ	src/Engine/Task/Ordered/Points/OrderedTaskPoint.cpp	/^OrderedTaskPoint::UpdateOZ(const FlatProjection &projection)$/;"	f	class:OrderedTaskPoint
UpdateOZ	src/Engine/Task/Points/SampledTaskPoint.cpp	/^SampledTaskPoint::UpdateOZ(const FlatProjection &projection,$/;"	f	class:SampledTaskPoint
UpdateObservationZones	src/Engine/Task/Ordered/OrderedTask.cpp	/^UpdateObservationZones(OrderedTask::OrderedTaskPointVector &points,$/;"	f	file:
UpdateOrderedTaskSettings	src/Engine/Task/Factory/AbstractTaskFactory.cpp	/^AbstractTaskFactory::UpdateOrderedTaskSettings(OrderedTaskSettings &to)$/;"	f	class:AbstractTaskFactory
UpdateOrderedTaskSettings	src/Engine/Task/Factory/FAITaskFactory.cpp	/^FAITaskFactory::UpdateOrderedTaskSettings(OrderedTaskSettings& to)$/;"	f	class:FAITaskFactory
UpdateOrderedTaskSettings	src/Engine/Task/Factory/TouringTaskFactory.cpp	/^TouringTaskFactory::UpdateOrderedTaskSettings(OrderedTaskSettings& to)$/;"	f	class:TouringTaskFactory
UpdateOverlayMode	src/Input/InputEvents.cpp	/^InputEvents::UpdateOverlayMode()$/;"	f	class:InputEvents
UpdatePan	src/Input/InputEvents.cpp	/^InputEvents::UpdatePan()$/;"	f	class:InputEvents
UpdatePolar	src/Engine/Route/RoutePlanner.cpp	/^RoutePlanner::UpdatePolar(const GlideSettings &settings,$/;"	f	class:RoutePlanner
UpdatePolar	src/Task/RoutePlannerGlue.hpp	/^  void UpdatePolar(const GlideSettings &settings,$/;"	f	class:RoutePlannerGlue
UpdatePolarButton	src/Dialogs/Plane/PlaneDetailsDialog.cpp	/^PlaneEditWidget::UpdatePolarButton()$/;"	f	class:PlaneEditWidget
UpdatePolarLabel	src/Dialogs/Plane/PlanePolarDialog.cpp	/^  void UpdatePolarLabel() {$/;"	f	class:final	file:
UpdatePredicted	src/Engine/Airspace/AirspaceWarningManager.cpp	/^AirspaceWarningManager::UpdatePredicted(const AircraftState& state, $/;"	f	class:AirspaceWarningManager
UpdatePreview	src/Dialogs/Weather/MapOverlayWidget.cpp	/^  void UpdatePreview() {$/;"	f	class:final	file:
UpdatePreview	src/Dialogs/Weather/MapOverlayWidget.cpp	/^  void UpdatePreview(Path path) {$/;"	f	class:final	file:
UpdateProjection	src/Engine/Task/Points/SampledTaskPoint.cpp	/^SampledTaskPoint::UpdateProjection(const FlatProjection &projection)$/;"	f	class:SampledTaskPoint
UpdateProjection	src/MapWindow/GlueMapWindowDisplayMode.cpp	/^GlueMapWindow::UpdateProjection()$/;"	f	class:GlueMapWindow
UpdateProjection	src/Terrain/RasterMap.cpp	/^RasterMap::UpdateProjection()$/;"	f	class:RasterMap
UpdateQuantisation	src/Terrain/RasterRenderer.cpp	/^RasterRenderer::UpdateQuantisation()$/;"	f	class:RasterRenderer
UpdateSMax	src/Engine/GlideSolvers/GlidePolar.cpp	/^GlidePolar::UpdateSMax()$/;"	f	class:GlidePolar
UpdateSMin	src/Engine/GlideSolvers/GlidePolar.cpp	/^GlidePolar::UpdateSMin()$/;"	f	class:GlidePolar
UpdateSampleFar	src/Engine/Task/Ordered/Points/AATPoint.cpp	/^AATPoint::UpdateSampleFar(const AircraftState& state,$/;"	f	class:AATPoint
UpdateSampleFar	src/Engine/Task/Ordered/Points/OrderedTaskPoint.hpp	/^  virtual bool UpdateSampleFar([[maybe_unused]] const AircraftState &state,$/;"	f	class:OrderedTaskPoint
UpdateSampleNear	src/Engine/Task/Ordered/Points/AATPoint.cpp	/^AATPoint::UpdateSampleNear(const AircraftState& state,$/;"	f	class:AATPoint
UpdateSampleNear	src/Engine/Task/Ordered/Points/OrderedTaskPoint.cpp	/^OrderedTaskPoint::UpdateSampleNear(const AircraftState &state,$/;"	f	class:OrderedTaskPoint
UpdateScanResults	src/Kobo/WifiDialog.cpp	/^WifiListWidget::UpdateScanResults()$/;"	f	class:WifiListWidget
UpdateScreenAngle	src/MapWindow/GlueMapWindowDisplayMode.cpp	/^GlueMapWindow::UpdateScreenAngle()$/;"	f	class:GlueMapWindow
UpdateScreenBounds	src/MapWindow/GlueMapWindowDisplayMode.cpp	/^GlueMapWindow::UpdateScreenBounds()$/;"	f	class:GlueMapWindow
UpdateScreenBounds	src/MapWindow/MapWindow.hpp	/^  void UpdateScreenBounds() {$/;"	f	class:MapWindow
UpdateSector	src/Engine/Task/ObservationZones/SectorZone.cpp	/^SectorZone::UpdateSector() $/;"	f	class:SectorZone
UpdateSelector	src/Gauge/FlarmTrafficWindow.cpp	/^FlarmTrafficWindow::UpdateSelector(const FlarmId id, const PixelPoint pt)$/;"	f	class:FlarmTrafficWindow
UpdateShiftState	src/Widget/KeyboardWidget.cpp	/^KeyboardWidget::UpdateShiftState()$/;"	f	class:KeyboardWidget
UpdateSolution	src/Engine/Airspace/AirspaceWarning.cpp	/^AirspaceWarning::UpdateSolution(const State _state,$/;"	f	class:AirspaceWarning
UpdateStartTransition	src/Engine/Task/Ordered/OrderedTask.cpp	/^OrderedTask::UpdateStartTransition(const AircraftState &state,$/;"	f	class:OrderedTask
UpdateState	src/Engine/Task/Ordered/SmartTaskAdvance.cpp	/^SmartTaskAdvance::UpdateState()$/;"	f	class:SmartTaskAdvance
UpdateState	src/Replay/TaskAutoPilot.cpp	/^TaskAutoPilot::UpdateState(const TaskAccessor& task, AircraftState& state,$/;"	f	class:TaskAutoPilot
UpdateStatsGeometry	src/Engine/Task/Factory/AbstractTaskFactory.cpp	/^AbstractTaskFactory::UpdateStatsGeometry()$/;"	f	class:AbstractTaskFactory
UpdateStatsGeometry	src/Engine/Task/Ordered/OrderedTask.cpp	/^OrderedTask::UpdateStatsGeometry()$/;"	f	class:OrderedTask
UpdateSummary	src/Engine/Task/Ordered/OrderedTask.cpp	/^OrderedTask::UpdateSummary(TaskSummary& ordered_summary) const$/;"	f	class:OrderedTask
UpdateTask	src/Engine/Airspace/AirspaceWarningManager.cpp	/^AirspaceWarningManager::UpdateTask(const AircraftState &state,$/;"	f	class:AirspaceWarningManager
UpdateTaskDirection	src/Gauge/BigTrafficWidget.cpp	/^FlarmTrafficControl::UpdateTaskDirection(bool show_task_direction, Angle bearing)$/;"	f	class:FlarmTrafficControl
UpdateTemps	src/Atmosphere/CuSonde.cpp	/^CuSonde::Level::UpdateTemps(bool humidity_valid, double humidity, Temperature temperature)$/;"	f	class:CuSonde::Level
UpdateTerrain	src/CrossSection/CrossSectionRenderer.cpp	/^CrossSectionRenderer::UpdateTerrain(TerrainHeight *elevations) const$/;"	f	class:CrossSectionRenderer
UpdateTerrain	src/MapWindow/MapWindow.cpp	/^MapWindow::UpdateTerrain()$/;"	f	class:MapWindow
UpdateTerrainPreview	src/Dialogs/Settings/Panels/TerrainDisplayConfigPanel.cpp	/^TerrainDisplayConfigPanel::UpdateTerrainPreview()$/;"	f	class:TerrainDisplayConfigPanel
UpdateTerrainTiles	src/Terrain/Loader.cpp	/^UpdateTerrainTiles(struct zzip_dir *dir, const char *path,$/;"	f
UpdateTerrainTiles	src/Terrain/Loader.hpp	/^UpdateTerrainTiles(struct zzip_dir *dir,$/;"	f
UpdateTextAndLayout	src/PopupMessage.cpp	/^PopupMessage::UpdateTextAndLayout()$/;"	f	class:PopupMessage
UpdateTextboxProp	src/Dialogs/TouchTextEntry.cpp	/^UpdateTextboxProp()$/;"	f	file:
UpdateThermalIndex	src/Atmosphere/CuSonde.cpp	/^CuSonde::Level::UpdateThermalIndex(double h_agl,$/;"	f	class:CuSonde::Level
UpdateTiles	src/Terrain/Loader.cpp	/^TerrainLoader::UpdateTiles(struct zzip_dir *dir, const char *path,$/;"	f	class:TerrainLoader
UpdateTiles	src/Terrain/RasterTerrain.cpp	/^RasterTerrain::UpdateTiles(const GeoPoint &location, double radius)$/;"	f	class:RasterTerrain
UpdateTimes	src/Engine/ThermalBand/ThermalEncounterCollection.cpp	/^ThermalEncounterCollection::UpdateTimes()$/;"	f	class:ThermalEncounterCollection
UpdateTopography	src/MapWindow/MapWindow.cpp	/^MapWindow::UpdateTopography(unsigned max_update)$/;"	f	class:MapWindow
UpdateTrafficGaugeVisibility	src/MainWindow.cpp	/^MainWindow::UpdateTrafficGaugeVisibility()$/;"	f	class:MainWindow
UpdateUI	src/Dialogs/Device/Vega/VegaParametersWidget.cpp	/^VegaParametersWidget::UpdateUI()$/;"	f	class:VegaParametersWidget
UpdateUnitFields	src/Dialogs/Settings/Panels/UnitsConfigPanel.cpp	/^UnitsConfigPanel::UpdateUnitFields(const UnitSetting &units)$/;"	f	class:UnitsConfigPanel
UpdateVarioGaugeVisibility	src/MainWindow.cpp	/^MainWindow::UpdateVarioGaugeVisibility()$/;"	f	class:MainWindow
UpdateVisibilities	src/Dialogs/Settings/Panels/MapDisplayConfigPanel.cpp	/^MapDisplayConfigPanel::UpdateVisibilities()$/;"	f	class:MapDisplayConfigPanel
UpdateVisibilities	src/Dialogs/Settings/Panels/WaypointDisplayConfigPanel.cpp	/^WaypointDisplayConfigPanel::UpdateVisibilities()$/;"	f	class:WaypointDisplayConfigPanel
UpdateVisibleShapes	src/Topography/TopographyFileRenderer.cpp	/^TopographyFileRenderer::UpdateVisibleShapes(const WindowProjection &projection)$/;"	f	class:TopographyFileRenderer
UpdateVolatile	src/Dialogs/Traffic/TrafficList.cpp	/^TrafficListWidget::UpdateVolatile()$/;"	f	class:TrafficListWidget
UpdateWarnings	src/Gauge/FlarmTrafficWindow.cpp	/^FlarmTrafficWindow::UpdateWarnings()$/;"	f	class:FlarmTrafficWindow
UpdateZoomControls	src/Dialogs/Waypoint/dlgWaypointDetails.cpp	/^WaypointDetailsWidget::UpdateZoomControls()$/;"	f	class:WaypointDetailsWidget
UploadFileASCII	src/Device/Driver/CAI302/Protocol.cpp	/^CAI302::UploadFileASCII(Port &port, unsigned i, FileASCII &data,$/;"	f	class:CAI302
UploadFileBinary	src/Device/Driver/CAI302/Protocol.cpp	/^CAI302::UploadFileBinary(Port &port, unsigned i, FileBinary &data,$/;"	f	class:CAI302
UploadFileData	src/Device/Driver/CAI302/Protocol.cpp	/^CAI302::UploadFileData(Port &port, bool next, void *data, unsigned length,$/;"	f	class:CAI302
UploadFileList	src/Device/Driver/CAI302/Protocol.cpp	/^CAI302::UploadFileList(Port &port, unsigned i, FileList &data,$/;"	f	class:CAI302
UploadFileSignatureASCII	src/Device/Driver/CAI302/Protocol.cpp	/^CAI302::UploadFileSignatureASCII(Port &port, FileSignatureASCII &data,$/;"	f	class:CAI302
UploadGeneralInfo	src/Device/Driver/CAI302/Protocol.cpp	/^CAI302::UploadGeneralInfo(Port &port, GeneralInfo &data,$/;"	f	class:CAI302
UploadLarge	src/Device/Driver/CAI302/Protocol.cpp	/^CAI302::UploadLarge(Port &port, const char *command,$/;"	f	class:CAI302
UploadMode	src/Device/Driver/CAI302/Mode.cpp	/^CAI302Device::UploadMode(OperationEnvironment &env)$/;"	f	class:CAI302Device
UploadMode	src/Device/Driver/CAI302/Protocol.cpp	/^CAI302::UploadMode(Port &port, OperationEnvironment &env)$/;"	f	class:CAI302
UploadNavpoint	src/Device/Driver/CAI302/Protocol.cpp	/^CAI302::UploadNavpoint(Port &port, unsigned i, Navpoint &data,$/;"	f	class:CAI302
UploadNavpointMeta	src/Device/Driver/CAI302/Protocol.cpp	/^CAI302::UploadNavpointMeta(Port &port, NavpointMeta &data,$/;"	f	class:CAI302
UploadPilot	src/Device/Driver/CAI302/Protocol.cpp	/^CAI302::UploadPilot(Port &port, unsigned i, Pilot &data,$/;"	f	class:CAI302
UploadPilotBlock	src/Device/Driver/CAI302/Protocol.cpp	/^CAI302::UploadPilotBlock(Port &port, unsigned start, unsigned count,$/;"	f	class:CAI302
UploadPilotMeta	src/Device/Driver/CAI302/Protocol.cpp	/^CAI302::UploadPilotMeta(Port &port, PilotMeta &data, OperationEnvironment &env)$/;"	f	class:CAI302
UploadPilotMetaActive	src/Device/Driver/CAI302/Protocol.cpp	/^CAI302::UploadPilotMetaActive(Port &port, PilotMetaActive &data,$/;"	f	class:CAI302
UploadPolar	src/Device/Driver/CAI302/Protocol.cpp	/^CAI302::UploadPolar(Port &port, Polar &data, OperationEnvironment &env)$/;"	f	class:CAI302
UploadPolarMeta	src/Device/Driver/CAI302/Protocol.cpp	/^CAI302::UploadPolarMeta(Port &port, PolarMeta &data, OperationEnvironment &env)$/;"	f	class:CAI302
UploadShort	src/Device/Driver/CAI302/Protocol.cpp	/^CAI302::UploadShort(Port &port, const char *command,$/;"	f	class:CAI302
UploadWaypoints	src/Dialogs/Device/ManageCAI302Dialog.cpp	/^UploadWaypoints(const DialogLook &look, CAI302Device &device)$/;"	f	file:
UpmixMonoPCM	src/Audio/AudioAlgorithms.hpp	/^inline void UpmixMonoPCM(T *pcm_stream_buffer, size_t num_mono_frames,$/;"	f
Uring	src/event/Loop.hxx	/^namespace Uring { class Queue; class Manager; }$/;"	n
Usage	src/XCSoar.cpp	/^static const char *const Usage = "\\n"$/;"	v	file:
UsageError	src/system/Args.hpp	/^  void UsageError() {$/;"	f	class:Args
Use	src/Profile/Settings.cpp	/^Profile::Use(const ProfileMap &map)$/;"	f	class:Profile
UseBlackOutline	src/Dialogs/Settings/Panels/AirspaceConfigPanel.cpp	/^  UseBlackOutline,$/;"	e	enum:ControlIndex	file:
UseClicked	src/Dialogs/Weather/MapOverlayWidget.cpp	/^WeatherMapOverlayListWidget::UseClicked(unsigned i)$/;"	f	class:WeatherMapOverlayListWidget
UseFinalGlideDisplayMode	src/Profile/ProfileKeys.cpp	/^const char UseFinalGlideDisplayMode[] = "UseFinalGlideDisplayMode";$/;"	m	namespace:ProfileKeys	file:
UseRecommendedCaptionWidths	src/Dialogs/Task/TargetDialog.cpp	/^UseRecommendedCaptionWidths(Args&&... args)$/;"	f	file:
UseSecondDriver	src/Dialogs/Device/DeviceEditWidget.cpp	/^  I2CBus, I2CAddr, PressureUsage, Driver, UseSecondDriver, SecondDriver,$/;"	e	enum:ControlIndex	file:
UserID	src/Tracking/LiveTrack24.hpp	/^typedef uint32_t UserID;$/;"	t	namespace:LiveTrack24
UserLevel	src/Profile/ProfileKeys.cpp	/^const char UserLevel[] = "UserLevel";$/;"	m	namespace:ProfileKeys	file:
UserNameRequestPacket	src/Tracking/SkyLines/Protocol.hpp	/^struct UserNameRequestPacket {$/;"	s	namespace:SkyLinesTracking
UserNameResponsePacket	src/Tracking/SkyLines/Protocol.hpp	/^struct UserNameResponsePacket {$/;"	s	namespace:SkyLinesTracking
UserSwitch	src/NMEA/SwitchState.hpp	/^  enum class UserSwitch : uint8_t {$/;"	c	struct:SwitchState
UsesCalibration	src/Device/Config.hpp	/^  bool UsesCalibration() const {$/;"	f	struct:DeviceConfig
UsesCalibration	src/Device/Config.hpp	/^  static bool UsesCalibration(PortType port_type) {$/;"	f	struct:DeviceConfig
UsesDriver	src/Device/Config.hpp	/^  bool UsesDriver() const {$/;"	f	struct:DeviceConfig
UsesDriver	src/Device/Config.hpp	/^  static bool UsesDriver(PortType port_type) {$/;"	f	struct:DeviceConfig
UsesI2C	src/Device/Config.hpp	/^  bool UsesI2C() const {$/;"	f	struct:DeviceConfig
UsesI2C	src/Device/Config.hpp	/^  static bool UsesI2C(PortType port_type) {$/;"	f	struct:DeviceConfig
UsesIPAddress	src/Device/Config.hpp	/^  bool UsesIPAddress() const {$/;"	f	struct:DeviceConfig
UsesIPAddress	src/Device/Config.hpp	/^  static bool UsesIPAddress(PortType port_type) {$/;"	f	struct:DeviceConfig
UsesPort	src/Device/Config.hpp	/^  bool UsesPort() const {$/;"	f	struct:DeviceConfig
UsesPort	src/Device/Config.hpp	/^  static bool UsesPort(PortType port_type) {$/;"	f	struct:DeviceConfig
UsesRawData	src/Device/Driver.hpp	/^  bool UsesRawData() const {$/;"	f	struct:DeviceRegister
UsesSpeed	src/Device/Config.hpp	/^  bool UsesSpeed() const {$/;"	f	struct:DeviceConfig
UsesSpeed	src/Device/Config.hpp	/^  static bool UsesSpeed(PortType port_type) {$/;"	f	struct:DeviceConfig
UsesTCPPort	src/Device/Config.hpp	/^  bool UsesTCPPort() const {$/;"	f	struct:DeviceConfig
UsesTCPPort	src/Device/Config.hpp	/^  static bool UsesTCPPort(PortType port_type) {$/;"	f	struct:DeviceConfig
V7	src/Device/Driver/LX/V7.hpp	/^namespace V7 {$/;"	n
V7ConfigWidget	src/Dialogs/Device/LX/V7ConfigWidget.hpp	/^  V7ConfigWidget(const DialogLook &look, LXDevice &_device)$/;"	f	class:final
VALID	src/Engine/PathSolvers/SolverResult.hpp	/^  VALID,$/;"	m	class:SolverResult
VALID	src/Engine/Route/ReachResult.hpp	/^    VALID,$/;"	m	class:ReachResult::Validity
VARIO	src/Device/Driver/FlymasterF1.cpp	/^VARIO(NMEAInputLine &line, NMEAInfo &info)$/;"	f	file:
VARIO	src/Dialogs/Device/Vega/VegaDemoDialog.cpp	/^    VARIO,$/;"	e	enum:final::Controls	file:
VARIO	src/Dialogs/Traffic/FlarmTrafficDetails.cpp	/^    VARIO,$/;"	e	enum:final::Controls	file:
VARIOCONFIGPANEL_HPP	src/Dialogs/Settings/Panels/VarioConfigPanel.hpp	25;"	d
VARIO_1	src/MapSettings.hpp	/^    VARIO_1,$/;"	m	class:TrailSettings::Type
VARIO_1_DOTS	src/MapSettings.hpp	/^    VARIO_1_DOTS,$/;"	m	class:TrailSettings::Type
VARIO_2	src/MapSettings.hpp	/^    VARIO_2,$/;"	m	class:TrailSettings::Type
VARIO_2_DOTS	src/MapSettings.hpp	/^    VARIO_2_DOTS,$/;"	m	class:TrailSettings::Type
VARIO_DOTS_AND_LINES	src/MapSettings.hpp	/^    VARIO_DOTS_AND_LINES,$/;"	m	class:TrailSettings::Type
VARIO_HISTOGRAM	src/Dialogs/dlgAnalysis.hpp	/^  VARIO_HISTOGRAM,$/;"	m	class:AnalysisPage
VARIO_HISTOGRAM_RENDERER_HPP	src/Renderer/VarioHistogramRenderer.hpp	25;"	d
VECTOR_HPP	src/Math/Vector.hpp	25;"	d
VEGA_SCHEME	src/Dialogs/Device/Vega/Schemes.hpp	/^struct VEGA_SCHEME$/;"	s
VERSION	src/Device/Driver/LX/LXN.hpp	/^    VERSION = 0x7f,$/;"	e	enum:LXN::Command
VERSION	src/Terrain/RasterTileCache.hpp	/^    static constexpr unsigned VERSION = 0xb;$/;"	m	struct:RasterTileCache::CacheHeader
VERSION	src/Version.cpp	30;"	d	file:
VERSION_SUFFIX	src/Version.cpp	51;"	d	file:
VERTICAL	src/Weather/PCMet/Overlays.hpp	/^    VERTICAL,$/;"	m	class:PCMet::OverlayInfo::Type
VERTICAL	src/Widget/TabWidget.hpp	/^    VERTICAL,$/;"	m	class:TabWidget::Orientation
VERTICAL_SPEED	src/Units/Group.hpp	/^  VERTICAL_SPEED,$/;"	m	class:UnitGroup
VIDEO_POWER_MANAGEMENT	src/Hardware/VideoPower.h	/^struct VIDEO_POWER_MANAGEMENT {$/;"	s
VIDEO_POWER_STATE	src/Hardware/VideoPower.h	/^enum VIDEO_POWER_STATE {$/;"	g
VISIBLE	src/Widget/ManagedWidget.hpp	/^    VISIBLE,$/;"	m	class:ManagedWidget::State
VLAPI2_H	src/Device/Driver/Volkslogger/vlapi2.h	19;"	d
VLAPIHLP_H	src/Device/Driver/Volkslogger/vlapihlp.h	19;"	d
VLAPI_DATA	src/Device/Driver/Volkslogger/vlapi2.h	/^class VLAPI_DATA {$/;"	c
VLAPI_LOG_MEMSIZE	src/Device/Driver/Volkslogger/Logger.cpp	/^static constexpr size_t VLAPI_LOG_MEMSIZE = 81920L;$/;"	v	file:
VLCONV_H	src/Device/Driver/Volkslogger/vlconv.h	19;"	d
VOLT	src/Units/Unit.hpp	/^  VOLT,$/;"	m	class:Unit
VOLUME	src/Dialogs/Device/BlueFly/BlueFlyConfigurationDialog.cpp	/^    VOLUME,$/;"	e	enum:final::BlueFlyWidgets	file:
VOLUME_MAX	src/Device/Driver/BlueFly/Internal.hpp	/^    static constexpr unsigned VOLUME_MAX = 1000;$/;"	m	struct:BlueFlyDevice::BlueFlySettings
VOLUME_MULTIPLIER	src/Device/Driver/BlueFly/Internal.hpp	/^    static constexpr unsigned VOLUME_MULTIPLIER = 1000;$/;"	m	struct:BlueFlyDevice::BlueFlySettings
VOLUME_NAME	src/Device/Driver/BlueFly/Internal.hpp	/^    static const char VOLUME_NAME[];$/;"	m	struct:BlueFlyDevice::BlueFlySettings
VOLUME_NAME	src/Device/Driver/BlueFly/Settings.cpp	/^const char BlueFlyDevice::BlueFlySettings::VOLUME_NAME[] = "BVL";$/;"	m	class:BlueFlyDevice::BlueFlySettings	file:
V_block	src/Engine/Task/Stats/CommonStats.hpp	/^  double V_block;$/;"	m	class:CommonStats
V_dolphin	src/Engine/Task/Stats/CommonStats.hpp	/^  double V_dolphin;$/;"	m	class:CommonStats
V_stf	src/NMEA/Derived.hpp	/^  double V_stf;$/;"	m	struct:DerivedInfo
ValidAbstractType	src/Engine/Task/Factory/AbstractTaskFactory.cpp	/^AbstractTaskFactory::ValidAbstractType(LegalAbstractPointType type, $/;"	f	class:AbstractTaskFactory
ValidDistanceUnit	src/Profile/UnitsConfig.cpp	/^ValidDistanceUnit(Unit unit)$/;"	f	file:
ValidFinish	src/Dialogs/StatusPanels/RulesStatusPanel.cpp	/^  ValidFinish,$/;"	e	enum:Controls	file:
ValidMassUnit	src/Profile/UnitsConfig.cpp	/^ValidMassUnit(Unit unit)$/;"	f	file:
ValidPressureUnit	src/Profile/UnitsConfig.cpp	/^ValidPressureUnit(Unit unit)$/;"	f	file:
ValidSpeedUnit	src/Profile/UnitsConfig.cpp	/^ValidSpeedUnit(Unit unit)$/;"	f	file:
ValidStart	src/Dialogs/StatusPanels/RulesStatusPanel.cpp	/^  ValidStart,$/;"	e	enum:Controls	file:
ValidString	src/Device/Driver/LX/Convert.cpp	/^ValidString(const char *p, size_t size)$/;"	f	file:
ValidTemperatureUnit	src/Profile/UnitsConfig.cpp	/^ValidTemperatureUnit(Unit unit)$/;"	f	file:
ValidWingLoadingUnit	src/Profile/UnitsConfig.cpp	/^ValidWingLoadingUnit(Unit unit)$/;"	f	file:
Validate	src/Engine/Task/Shapes/FAITriangleTask.cpp	/^FAITriangleValidator::Validate(const OrderedTask &task)$/;"	f	class:FAITriangleValidator
ValidateGeometry	src/InfoBoxes/InfoBoxLayout.cpp	/^InfoBoxLayout::ValidateGeometry(InfoBoxSettings::Geometry geometry,$/;"	f	class:InfoBoxLayout
ValidateXCS	src/VALI-XCS.cpp	/^ValidateXCS(Path path, GRecord &oGRecord)$/;"	f	file:
Validity	src/Engine/GlideSolvers/GlideResult.hpp	/^  enum class Validity : uint8_t {$/;"	c	struct:GlideResult
Validity	src/Engine/Route/ReachResult.hpp	/^  enum class Validity : uint8_t {$/;"	c	struct:ReachResult
Validity	src/NMEA/Validity.hpp	/^class Validity {$/;"	c
Value	src/Engine/PathSolvers/Dijkstra.hpp	/^  struct Value$/;"	s	class:Dijkstra
Value	src/lua/Value.hxx	/^	Value(lua_State *_L, V &&value):L(_L) {$/;"	f	class:Lua::Value
Value	src/lua/Value.hxx	/^	explicit Value(lua_State *_L):L(_L) {}$/;"	f	class:Lua::Value
Value	src/lua/Value.hxx	/^Value::Value(const Value &src)$/;"	f	class:Lua::Value
Value	src/lua/Value.hxx	/^class Value {$/;"	c	namespace:Lua
Value	src/system/ConvertPathName.hpp	/^  typedef LightString<char> Value;$/;"	t	class:NarrowPathName
Value	src/system/ConvertPathName.hpp	/^  typedef LightString<wchar_t> Value;$/;"	t	class:PathName
Value	src/util/ConvertString.hpp	/^  typedef AllocatedString Value;$/;"	t	class:WideToACPConverter
Value	src/util/ConvertString.hpp	/^  typedef AllocatedString Value;$/;"	t	class:WideToUTF8Converter
Value	src/util/ConvertString.hpp	/^  typedef BasicAllocatedString<wchar_t> Value;$/;"	t	class:UTF8ToWideConverter
Vario	src/Dialogs/StatusPanels/SystemStatusPanel.cpp	/^  Vario,$/;"	e	enum:Controls	file:
VarioBarLook	src/Look/VarioBarLook.hpp	/^struct VarioBarLook {$/;"	s
VarioBarRenderer	src/Renderer/VarioBarRenderer.hpp	/^  VarioBarRenderer(const VarioBarLook &_look)$/;"	f	class:VarioBarRenderer
VarioBarRenderer	src/Renderer/VarioBarRenderer.hpp	/^class VarioBarRenderer {$/;"	c
VarioConfigPanel	src/Dialogs/Settings/Panels/VarioConfigPanel.cpp	/^  VarioConfigPanel()$/;"	f	class:final
VarioDeadBandEnabled	src/Profile/ProfileKeys.cpp	/^const char VarioDeadBandEnabled[] = "VarioDeadBandEnabled";$/;"	m	namespace:ProfileKeys	file:
VarioDeadBandMax	src/Profile/ProfileKeys.cpp	/^const char VarioDeadBandMax[] = "VarioDeadBandMax";$/;"	m	namespace:ProfileKeys	file:
VarioDeadBandMin	src/Profile/ProfileKeys.cpp	/^const char VarioDeadBandMin[] = "VarioDeadBandMin";$/;"	m	namespace:ProfileKeys	file:
VarioGauge	src/Profile/ProfileKeys.cpp	/^const char VarioGauge[] = "VarioGauge";$/;"	m	namespace:ProfileKeys	file:
VarioInfo	src/NMEA/VarioInfo.hpp	/^struct VarioInfo$/;"	s
VarioLook	src/Look/VarioLook.hpp	/^struct VarioLook {$/;"	s
VarioMaxFrequency	src/Profile/ProfileKeys.cpp	/^const char VarioMaxFrequency[] = "VarioMaxFrequency";$/;"	m	namespace:ProfileKeys	file:
VarioMaxPeriod	src/Profile/ProfileKeys.cpp	/^const char VarioMaxPeriod[] = "VarioMaxPeriod";$/;"	m	namespace:ProfileKeys	file:
VarioMinFrequency	src/Profile/ProfileKeys.cpp	/^const char VarioMinFrequency[] = "VarioMinFrequency";$/;"	m	namespace:ProfileKeys	file:
VarioMinPeriod	src/Profile/ProfileKeys.cpp	/^const char VarioMinPeriod[] = "VarioMinPeriod";$/;"	m	namespace:ProfileKeys	file:
VarioSettings	src/Gauge/VarioSettings.hpp	/^struct VarioSettings {$/;"	s
VarioSoundSettings	src/Audio/VarioSettings.hpp	/^struct VarioSoundSettings {$/;"	s
VarioState	src/Engine/Navigation/Aircraft.hpp	/^struct VarioState$/;"	s
VarioSynthesiser	src/Audio/VarioSynthesiser.hpp	/^  explicit VarioSynthesiser(unsigned sample_rate)$/;"	f	class:final
VarioToFrequency	src/Audio/VarioSynthesiser.cpp	/^VarioSynthesiser::VarioToFrequency(int ivario)$/;"	f	class:VarioSynthesiser
VarioUnit	src/Dialogs/Device/CAI302/UnitsEditor.hpp	/^    VarioUnit,$/;"	e	enum:final::Controls
VarioWriteNMEA	src/Device/device.cpp	/^VarioWriteNMEA(const TCHAR *text, OperationEnvironment &env)$/;"	f
VarioZeroFrequency	src/Profile/ProfileKeys.cpp	/^const char VarioZeroFrequency[] = "VarioZeroFrequency";$/;"	m	namespace:ProfileKeys	file:
VaulterCreateOnPort	src/Device/Driver/Vaulter.cpp	/^VaulterCreateOnPort(const DeviceConfig &config, Port &com_port)$/;"	f	file:
VaulterDevice	src/Device/Driver/Vaulter.cpp	/^  VaulterDevice(Port &_port):port(_port) {}$/;"	f	class:VaulterDevice
VaulterDevice	src/Device/Driver/Vaulter.cpp	/^class VaulterDevice : public AbstractDevice {$/;"	c	file:
VbestLD	src/Engine/GlideSolvers/GlidePolar.hpp	/^  double VbestLD;$/;"	m	class:GlidePolar
Vector	src/Math/Vector.hpp	/^  Vector(Angle bearing, double norm) {$/;"	f	struct:Vector
Vector	src/Math/Vector.hpp	/^  Vector(const SpeedVector speed) {$/;"	f	struct:Vector
Vector	src/Math/Vector.hpp	/^struct Vector : DoublePoint2D {$/;"	s
Vega	src/Device/Driver/Vega/Volatile.hpp	/^namespace Vega {$/;"	n
VegaAudioParametersWidget	src/Dialogs/Device/Vega/AudioParameters.hpp	/^  VegaAudioParametersWidget(const DialogLook &look, VegaDevice &device,$/;"	f	class:VegaAudioParametersWidget
VegaAudioParametersWidget	src/Dialogs/Device/Vega/AudioParameters.hpp	/^class VegaAudioParametersWidget : public VegaParametersWidget {$/;"	c
VegaConfigurationExtraButtons	src/Dialogs/Device/Vega/VegaConfigurationDialog.cpp	/^  VegaConfigurationExtraButtons(WidgetDialog &_dialog)$/;"	f	class:final
VegaCreateOnPort	src/Device/Driver/Vega/Register.cpp	/^VegaCreateOnPort(const DeviceConfig &config, Port &com_port)$/;"	f	file:
VegaDemoAudioClimb	src/Dialogs/Device/Vega/VegaDemoDialog.cpp	/^static bool VegaDemoAudioClimb = true;$/;"	v	file:
VegaDemoV	src/Dialogs/Device/Vega/VegaDemoDialog.cpp	/^static double VegaDemoV = 0;$/;"	v	file:
VegaDemoW	src/Dialogs/Device/Vega/VegaDemoDialog.cpp	/^static double VegaDemoW = 0;$/;"	v	file:
VegaDemoWidget	src/Dialogs/Device/Vega/VegaDemoDialog.cpp	/^  VegaDemoWidget(const DialogLook &_look)$/;"	f	class:final
VegaDevice	src/Device/Driver/Vega/Internal.hpp	/^  VegaDevice(Port &_port)$/;"	f	class:VegaDevice
VegaDevice	src/Device/Driver/Vega/Internal.hpp	/^class VegaDevice : public AbstractDevice {$/;"	c
VegaParametersWidget	src/Dialogs/Device/Vega/VegaParametersWidget.hpp	/^  VegaParametersWidget(const DialogLook &look, VegaDevice &_device,$/;"	f	class:VegaParametersWidget
VegaParametersWidget	src/Dialogs/Device/Vega/VegaParametersWidget.hpp	/^class VegaParametersWidget : public RowFormWidget {$/;"	c
VegaSchemeButtonsPage	src/Dialogs/Device/Vega/VegaConfigurationDialog.cpp	/^  VegaSchemeButtonsPage(PagerWidget &_pager, const DialogLook &look)$/;"	f	class:VegaSchemeButtonsPage
VegaSchemeButtonsPage	src/Dialogs/Device/Vega/VegaConfigurationDialog.cpp	/^class VegaSchemeButtonsPage : public RowFormWidget {$/;"	c	file:
VegaSchemes	src/Dialogs/Device/Vega/Schemes.hpp	/^static constexpr VEGA_SCHEME VegaSchemes[4]= {$/;"	v
VegaSwitchState	src/NMEA/VegaSwitchState.hpp	/^struct VegaSwitchState {$/;"	s
VegaWriteDemo	src/Dialogs/Device/Vega/VegaDemoDialog.cpp	/^VegaWriteDemo()$/;"	f	file:
VehicleType	src/Tracking/LiveTrack24.hpp	/^enum class VehicleType {$/;"	c	namespace:LiveTrack24
VehicleType	src/Tracking/LiveTrack24/Settings.hpp	/^  enum class VehicleType {$/;"	c	struct:LiveTrack24::Settings
VerboseOperationEnvironment	src/Operation/VerboseOperationEnvironment.hpp	/^class VerboseOperationEnvironment : public MessageOperationEnvironment {$/;"	c
VerifyFormat	src/Waypoint/WaypointFileType.cpp	/^VerifyFormat(Path path)$/;"	f	file:
VerifyFormat	src/Waypoint/WaypointReaderCompeGPS.cpp	/^WaypointReaderCompeGPS::VerifyFormat(TLineReader &reader)$/;"	f	class:WaypointReaderCompeGPS
VerifyFormat	src/Waypoint/WaypointReaderFS.cpp	/^WaypointReaderFS::VerifyFormat(TLineReader &reader)$/;"	f	class:WaypointReaderFS
VerifyFormat	src/Waypoint/WaypointReaderOzi.cpp	/^WaypointReaderOzi::VerifyFormat(TLineReader &reader)$/;"	f	class:WaypointReaderOzi
VerifyGRecordInFile	src/Logger/GRecord.cpp	/^GRecord::VerifyGRecordInFile(Path path)$/;"	f	class:GRecord
VerifyNMEAChecksum	src/NMEA/Checksum.cpp	/^VerifyNMEAChecksum(const char *p)$/;"	f
Version	src/Device/Driver/LX/LXN.hpp	/^  struct Version {$/;"	s	namespace:LXN
VertexAttrib	src/ui/canvas/opengl/Color.hpp	/^  void VertexAttrib(GLint index) const {$/;"	f	class:Color
VertexVector	src/Engine/Route/FlatTriangleFan.hpp	/^  typedef std::vector<FlatGeoPoint> VertexVector;$/;"	t	class:FlatTriangleFan
VerticalRange	src/Form/ButtonPanel.cpp	/^ButtonPanel::VerticalRange(PixelRect rc, unsigned start, unsigned end)$/;"	f	class:ButtonPanel
Vibrate	src/Android/Vibrator.cpp	/^Vibrator::Vibrate(JNIEnv *env, unsigned duration_ms)$/;"	f	class:Vibrator
VibrateShort	src/Hardware/Vibrator.cpp	/^VibrateShort()$/;"	f
Vibrator	src/Android/Vibrator.hpp	/^  Vibrator(JNIEnv *env, jobject obj):object(env, obj) {}$/;"	f	class:Vibrator
Vibrator	src/Android/Vibrator.hpp	/^class Vibrator {$/;"	c
VideoPowerOff	src/Hardware/VideoPower.h	/^  VideoPowerOff$/;"	e	enum:VIDEO_POWER_STATE
VideoPowerOn	src/Hardware/VideoPower.h	/^  VideoPowerOn = 1,$/;"	e	enum:VIDEO_POWER_STATE
VideoPowerStandBy	src/Hardware/VideoPower.h	/^  VideoPowerStandBy,$/;"	e	enum:VIDEO_POWER_STATE
VideoPowerSuspend	src/Hardware/VideoPower.h	/^  VideoPowerSuspend,$/;"	e	enum:VIDEO_POWER_STATE
ViewImageWidget	src/Widget/ViewImageWidget.hpp	/^  explicit ViewImageWidget(const Bitmap &_bitmap)$/;"	f	class:ViewImageWidget
ViewImageWidget	src/Widget/ViewImageWidget.hpp	/^  explicit ViewImageWidget(const Bitmap *_bitmap=nullptr)$/;"	f	class:ViewImageWidget
ViewImageWidget	src/Widget/ViewImageWidget.hpp	/^class ViewImageWidget : public WindowWidget {$/;"	c
ViewImageWindow	src/Widget/ViewImageWidget.cpp	/^  explicit ViewImageWindow(const Bitmap *_bitmap):bitmap(_bitmap) {}$/;"	f	class:final
VirtualCanvas	src/ui/canvas/VirtualCanvas.hpp	/^class VirtualCanvas : public Canvas {$/;"	c
VirtualCanvas	src/ui/canvas/gdi/VirtualCanvas.cpp	/^VirtualCanvas::VirtualCanvas(PixelSize new_size)$/;"	f	class:VirtualCanvas
VirtualCanvas	src/ui/canvas/gdi/VirtualCanvas.cpp	/^VirtualCanvas::VirtualCanvas(const Canvas &canvas, PixelSize new_size)$/;"	f	class:VirtualCanvas
VirtualCanvas	src/ui/canvas/memory/VirtualCanvas.cpp	/^VirtualCanvas::VirtualCanvas(PixelSize new_size)$/;"	f	class:VirtualCanvas
VirtualCanvas	src/ui/canvas/memory/VirtualCanvas.cpp	/^VirtualCanvas::VirtualCanvas(const Canvas &canvas, PixelSize new_size)$/;"	f	class:VirtualCanvas
VisibilityChanged	src/Terrain/RasterTile.cpp	/^RasterTile::VisibilityChanged(int view_x, int view_y, unsigned view_radius)$/;"	f	class:RasterTile
VisibleProjection	src/MapWindow/MapWindow.hpp	/^  const MapWindowProjection &VisibleProjection() const {$/;"	f	class:MapWindow
VisibleWaypoint	src/Renderer/WaypointRenderer.cpp	/^struct VisibleWaypoint {$/;"	s	file:
Visit	src/Engine/Task/Ordered/OrderedTask.cpp	/^Visit(const OrderedTask::OrderedTaskPointVector &points,$/;"	f	file:
Visit	src/Renderer/AirspaceRendererGL.cpp	/^  void Visit(const AbstractAirspace &airspace) {$/;"	f	class:final
Visit	src/Renderer/AirspaceRendererOther.cpp	/^  void Visit(const AbstractAirspace &airspace) {$/;"	f	class:final
Visit	src/Task/Serialiser.cpp	/^Visit(WritableDataNode &node, const AnnularSectorZone &data)$/;"	f	file:
Visit	src/Task/Serialiser.cpp	/^Visit(WritableDataNode &node, const CylinderZone &data)$/;"	f	file:
Visit	src/Task/Serialiser.cpp	/^Visit(WritableDataNode &node, const LineSectorZone &data)$/;"	f	file:
Visit	src/Task/Serialiser.cpp	/^Visit(WritableDataNode &node, const SectorZone &data)$/;"	f	file:
Visit	src/Task/Serialiser.cpp	/^Visit(WritableDataNode &node, const SymmetricSectorZone &data)$/;"	f	file:
Visit	src/Waypoint/WaypointListBuilder.cpp	/^void WaypointListBuilder::Visit(const Waypoints &waypoints) {$/;"	f	class:WaypointListBuilder
Visit	src/util/RadixTree.hpp	/^    void Visit(const TCHAR *key, V &visitor) const {$/;"	f	struct:RadixTree::Node
Visit	src/util/RadixTree.hpp	/^    void Visit(const TCHAR *key, V &visitor) {$/;"	f	struct:RadixTree::Node
Visit	src/util/RadixTree.hpp	/^  void Visit(const TCHAR *key, V &visitor) const {$/;"	f	class:RadixTree
Visit	src/util/RadixTree.hpp	/^  void Visit(const TCHAR *key, V &visitor) {$/;"	f	class:RadixTree
VisitAll	src/util/RadixTree.hpp	/^    void VisitAll(V &visitor) const {$/;"	f	struct:RadixTree::LeafList
VisitAll	src/util/RadixTree.hpp	/^    void VisitAll(V &visitor) {$/;"	f	struct:RadixTree::LeafList
VisitAll	src/util/RadixTree.hpp	/^  void VisitAll(V &visitor) const {$/;"	f	class:RadixTree
VisitAll	src/util/RadixTree.hpp	/^  void VisitAll(V &visitor) {$/;"	f	class:RadixTree
VisitAllChildren	src/util/RadixTree.hpp	/^    void VisitAllChildren(V &visitor) const {$/;"	f	struct:RadixTree::Node
VisitAllChildren	src/util/RadixTree.hpp	/^    void VisitAllChildren(V &visitor) {$/;"	f	struct:RadixTree::Node
VisitAllChildren	src/util/RadixTree.hpp	/^    void VisitAllChildren(const TCHAR *prefix, V &visitor) const {$/;"	f	struct:RadixTree::Node
VisitAllPairs	src/util/RadixTree.hpp	/^  void VisitAllPairs(V &visitor) const {$/;"	f	class:RadixTree
VisitChildren	src/util/RadixTree.hpp	/^    void VisitChildren(const TCHAR *key, V &visitor) const {$/;"	f	struct:RadixTree::Node
VisitChildren	src/util/RadixTree.hpp	/^    void VisitChildren(const TCHAR *key, V &visitor) {$/;"	f	struct:RadixTree::Node
VisitCircle	src/Renderer/AirspaceRendererGL.cpp	/^  void VisitCircle(const AirspaceCircle &airspace) {$/;"	f	class:final	file:
VisitCircle	src/Renderer/AirspaceRendererOther.cpp	/^  void VisitCircle(const AirspaceCircle &airspace) {$/;"	f	class:final	file:
VisitDataFiles	src/LocalPath.cpp	/^VisitDataFiles(const TCHAR* filter, File::Visitor &visitor)$/;"	f
VisitFiles	src/system/FileUtil.cpp	/^Directory::VisitFiles(Path path, File::Visitor &visitor, bool recursive)$/;"	f	class:Directory
VisitIntersecting	src/Engine/Airspace/Airspaces.cpp	/^Airspaces::VisitIntersecting(const GeoPoint &loc, const GeoPoint &end,$/;"	f	class:Airspaces
VisitIntersecting	src/Engine/Airspace/Airspaces.hpp	/^  void VisitIntersecting(const GeoPoint &location, const GeoPoint &end,$/;"	f	class:Airspaces
VisitNamePrefix	src/Engine/Waypoint/Waypoints.cpp	/^Waypoints::VisitNamePrefix(const TCHAR *prefix,$/;"	f	class:Waypoints
VisitNormalisedPrefix	src/Engine/Waypoint/Waypoints.cpp	/^Waypoints::WaypointNameTree::VisitNormalisedPrefix(const TCHAR *prefix,$/;"	f	class:Waypoints::WaypointNameTree
VisitPolygon	src/Renderer/AirspaceRendererGL.cpp	/^  void VisitPolygon(const AirspacePolygon &airspace) {$/;"	f	class:final	file:
VisitPolygon	src/Renderer/AirspaceRendererOther.cpp	/^  void VisitPolygon(const AirspacePolygon &airspace) {$/;"	f	class:final	file:
VisitPrefix	src/util/RadixTree.hpp	/^    void VisitPrefix(const TCHAR *prefix, V &visitor) const {$/;"	f	struct:RadixTree::Node
VisitPrefix	src/util/RadixTree.hpp	/^    void VisitPrefix(const TCHAR *prefix, V &visitor) {$/;"	f	struct:RadixTree::Node
VisitPrefix	src/util/RadixTree.hpp	/^  void VisitPrefix(const TCHAR *prefix, V &visitor) const {$/;"	f	class:RadixTree
VisitPrefix	src/util/RadixTree.hpp	/^  void VisitPrefix(const TCHAR *prefix, V &visitor) {$/;"	f	class:RadixTree
VisitPrefixChildren	src/util/RadixTree.hpp	/^    void VisitPrefixChildren(const TCHAR *prefix, V &visitor) const {$/;"	f	struct:RadixTree::Node
VisitPrefixChildren	src/util/RadixTree.hpp	/^    void VisitPrefixChildren(const TCHAR *prefix, V &visitor) {$/;"	f	struct:RadixTree::Node
VisitSpecificFiles	src/system/FileUtil.cpp	/^Directory::VisitSpecificFiles(Path path, const TCHAR* filter,$/;"	f	class:Directory
VisitValues	src/util/RadixTree.hpp	/^    void VisitValues(V &visitor) const {$/;"	f	struct:RadixTree::Node
VisitValues	src/util/RadixTree.hpp	/^    void VisitValues(V &visitor) {$/;"	f	struct:RadixTree::Node
VisitValues	src/util/RadixTree.hpp	/^    void VisitValues(const TCHAR *prefix, V &visitor) const {$/;"	f	struct:RadixTree::Node
VisitWithinRange	src/Engine/Waypoint/Waypoints.cpp	/^Waypoints::VisitWithinRange(const GeoPoint &loc, const double range,$/;"	f	class:Waypoints
VisitWithinRange	src/util/QuadTree.hxx	/^		void VisitWithinRange(const Point location, distance_type square_range,$/;"	f	struct:LeafList
VisitWithinRange	src/util/QuadTree.hxx	/^		void VisitWithinRange(const Rectangle &bounds,$/;"	f	struct:Bucket
VisitWithinRange	src/util/QuadTree.hxx	/^		void VisitWithinRange(const Rectangle &bounds,$/;"	f	struct:QuadBucket
VisitWithinRange	src/util/QuadTree.hxx	/^	void VisitWithinRange(const Point location, distance_type range,$/;"	f
VisitWithinRange	src/util/QuadTree.hxx	/^	void VisitWithinRange(const T &value, distance_type range,$/;"	f
Visitor	src/system/FileUtil.hpp	/^  class Visitor$/;"	c	namespace:File
Vmax	src/Engine/GlideSolvers/GlidePolar.hpp	/^  double Vmax;$/;"	m	class:GlidePolar
Vmin	src/Engine/GlideSolvers/GlidePolar.hpp	/^  double Vmin;$/;"	m	class:GlidePolar
VolatileData	src/Device/Driver/Vega/Volatile.hpp	/^    constexpr VolatileData()$/;"	f	struct:Vega::VolatileData
VolatileData	src/Device/Driver/Vega/Volatile.hpp	/^  struct VolatileData {$/;"	s	namespace:Vega
Volkslogger	src/Device/Driver/Volkslogger/Database.hpp	/^namespace Volkslogger {$/;"	n
Volkslogger	src/Device/Driver/Volkslogger/Protocol.hpp	/^namespace Volkslogger {$/;"	n
VolksloggerCreateOnPort	src/Device/Driver/Volkslogger/Register.cpp	/^VolksloggerCreateOnPort(const DeviceConfig &config, Port &com_port)$/;"	f	file:
VolksloggerDevice	src/Device/Driver/Volkslogger/Internal.hpp	/^  VolksloggerDevice(Port &_port, unsigned const _bulkrate)$/;"	f	class:VolksloggerDevice
VolksloggerDevice	src/Device/Driver/Volkslogger/Internal.hpp	/^class VolksloggerDevice : public AbstractDevice {$/;"	c
VoltageDevice	src/Android/VoltageDevice.cpp	/^VoltageDevice::VoltageDevice(unsigned _index,$/;"	f	class:VoltageDevice
VoltageListener	src/Android/VoltageListener.hpp	/^class VoltageListener {$/;"	c
Volume	src/Dialogs/Settings/Panels/AudioVarioConfigPanel.cpp	/^  Volume,$/;"	e	enum:ControlIndex	file:
WALK	src/Tracking/LiveTrack24.hpp	/^  WALK = 16385,$/;"	m	class:LiveTrack24::VehicleType
WARN1	src/zzip/__debug.h	60;"	d
WARN2	src/zzip/__debug.h	61;"	d
WARN3	src/zzip/__debug.h	62;"	d
WARN4	src/zzip/__debug.h	63;"	d
WARN5	src/zzip/__debug.h	64;"	d
WARN6	src/zzip/__debug.h	65;"	d
WARN_UNUSED	src/Topography/shapelib/mapserver.h	74;"	d
WARN_UNUSED	src/Topography/shapelib/mapserver.h	78;"	d
WASCII_HXX	src/util/WASCII.hxx	31;"	d
WATCHED	src/Engine/Waypoint/Origin.hpp	/^  WATCHED,$/;"	m	class:WaypointOrigin
WATER_THRESHOLD	src/Terrain/Height.hpp	/^  static constexpr int16_t WATER_THRESHOLD = -30000;$/;"	m	class:TerrainHeight
WAVE	src/Engine/Airspace/AirspaceClass.hpp	/^  WAVE,$/;"	e	enum:uint8_t
WAVEFORM_MODE_A2	src/ui/canvas/fb/mxcfb.h	91;"	d
WAVEFORM_MODE_AUTO	src/ui/canvas/fb/mxcfb.h	106;"	d
WAVEFORM_MODE_DU	src/ui/canvas/fb/mxcfb.h	87;"	d
WAVEFORM_MODE_DU4	src/ui/canvas/fb/mxcfb.h	96;"	d
WAVEFORM_MODE_GC16	src/ui/canvas/fb/mxcfb.h	88;"	d
WAVEFORM_MODE_GC16_FAST	src/ui/canvas/fb/mxcfb.h	90;"	d
WAVEFORM_MODE_GC4	src/ui/canvas/fb/mxcfb.h	89;"	d
WAVEFORM_MODE_GL16	src/ui/canvas/fb/mxcfb.h	92;"	d
WAVEFORM_MODE_GL16_FAST	src/ui/canvas/fb/mxcfb.h	93;"	d
WAVEFORM_MODE_GL16_INV	src/ui/canvas/fb/mxcfb.h	104;"	d
WAVEFORM_MODE_GL4	src/ui/canvas/fb/mxcfb.h	103;"	d
WAVEFORM_MODE_INIT	src/ui/canvas/fb/mxcfb.h	86;"	d
WAVEFORM_MODE_REAGL	src/ui/canvas/fb/mxcfb.h	99;"	d
WAVEFORM_MODE_REAGLD	src/ui/canvas/fb/mxcfb.h	100;"	d
WAVE_REQUEST	src/Tracking/SkyLines/Protocol.hpp	/^  WAVE_REQUEST = 9,$/;"	e	enum:SkyLinesTracking::Type
WAVE_RESPONSE	src/Tracking/SkyLines/Protocol.hpp	/^  WAVE_RESPONSE = 10,$/;"	e	enum:SkyLinesTracking::Type
WAVE_SUBMIT	src/Tracking/SkyLines/Protocol.hpp	/^  WAVE_SUBMIT = 8,$/;"	e	enum:SkyLinesTracking::Type
WAYPOINT	src/InfoBoxes/Panel/ATCReference.cpp	/^  WAYPOINT,$/;"	e	enum:Controls	file:
WAYPOINT	src/MapWindow/Items/MapItem.hpp	/^    WAYPOINT,$/;"	e	enum:TaskPointType::Type
WAYPOINT	src/Repository/FileType.hpp	/^  WAYPOINT,$/;"	m	class:FileType
WAYPOINTDETAILS	src/Repository/FileType.hpp	/^  WAYPOINTDETAILS,$/;"	m	class:FileType
WAYPOINTDISPLAYCONFIGPANEL_HPP	src/Dialogs/Settings/Panels/WaypointDisplayConfigPanel.hpp	25;"	d
WAYPOINTFILEFS_HPP	src/Waypoint/WaypointReaderFS.hpp	25;"	d
WAYPOINTFILESEEYOU_HPP	src/Waypoint/WaypointReaderSeeYou.hpp	26;"	d
WAYPOINTFILEWINPILOT_HPP	src/Waypoint/WaypointReaderWinPilot.hpp	26;"	d
WAYPOINTFILEZANDER_HPP	src/Waypoint/WaypointReaderZander.hpp	25;"	d
WAYPOINTFILE_COMPEGPS_HPP	src/Waypoint/WaypointReaderCompeGPS.hpp	25;"	d
WAYPOINTFILE_HPP	src/Waypoint/WaypointReaderBase.hpp	26;"	d
WAYPOINTFILE_OZI_HPP	src/Waypoint/WaypointReaderOzi.hpp	25;"	d
WAYPOINTS_HPP	src/Engine/Waypoint/Waypoints.hpp	23;"	d
WAYPOINT_DETAILS_READER_HPP	src/Waypoint/WaypointDetailsReader.hpp	25;"	d
WAYPOINT_EDITOR	src/Dialogs/Settings/Panels/SiteConfigPanel.cpp	/^    WAYPOINT_EDITOR,$/;"	e	enum:final::Buttons	file:
WAYPOINT_FACTORY_HPP	src/Waypoint/Factory.hpp	24;"	d
WAYPOINT_FILE_ID_HPP	src/Engine/Waypoint/Origin.hpp	24;"	d
WAYPOINT_FILE_PATTERNS	src/Waypoint/Patterns.hpp	29;"	d
WAYPOINT_FILE_TYPE_HPP	src/Waypoint/WaypointFileType.hpp	25;"	d
WAYPOINT_HPP	src/Engine/Waypoint/Waypoint.hpp	24;"	d
WAYPOINT_LOOK_HPP	src/Look/WaypointLook.hpp	25;"	d
WAYPOINT_PTR_HPP	src/Engine/Waypoint/Ptr.hpp	24;"	d
WAYPOINT_READER_HPP	src/Waypoint/WaypointReader.hpp	26;"	d
WAYPOINT_WRITER_HPP	src/Waypoint/CupWriter.hpp	25;"	d
WCHAR_UTIL_HXX	src/util/WCharUtil.hxx	31;"	d
WEATHER	src/MapWindow/Items/MapItem.hpp	/^    WEATHER,$/;"	e	enum:TaskPointType::Type
WEATHER_CONFIGPANEL_HPP	src/Dialogs/Settings/Panels/WeatherConfigPanel.hpp	25;"	d
WEATHER_FEATURES_HPP	src/Weather/Features.hpp	25;"	d
WEP_SECURITY	src/Kobo/WPASupplicant.hpp	/^  WEP_SECURITY,$/;"	e	enum:WifiSecurity
WGS84	src/Geo/WGS84.hpp	/^namespace WGS84 {$/;"	n
WHITESPACE	src/util/tstring.cpp	5;"	d	file:
WIDGET	src/Widget/RowFormWidget.hpp	/^      WIDGET,$/;"	m	class:RowFormWidget::Row::Type
WIFI	src/Kobo/NetworkDialog.cpp	/^    WIFI,$/;"	e	enum:final::Buttons	file:
WILDCARD	src/Dialogs/Airspace/AirspaceList.cpp	/^static constexpr unsigned WILDCARD = 0x7fff;$/;"	v	file:
WIND	src/Dialogs/dlgAnalysis.hpp	/^  WIND,$/;"	m	class:AnalysisPage
WIND	src/Terrain/TerrainSettings.hpp	/^  WIND,$/;"	m	class:SlopeShading
WINDCONFIGPANEL_HPP	src/Dialogs/Settings/Panels/WindConfigPanel.hpp	25;"	d
WINDEF_H	src/unix/windef.h	25;"	d
WINDEKF_GLUE_HPP	src/Computer/Wind/WindEKFGlue.hpp	25;"	d
WINDEKF_HPP	src/Computer/Wind/WindEKF.hpp	25;"	d
WINDOW_FILTER_HPP	src/Math/WindowFilter.hpp	24;"	d
WINDSURF	src/Tracking/LiveTrack24.hpp	/^  WINDSURF = 16500,$/;"	m	class:LiveTrack24::VehicleType
WINDVECTORMAG	src/Renderer/WindChartRenderer.cpp	98;"	d	file:
WIND_ARROW	src/InfoBoxes/Content/Type.hpp	/^    WIND_ARROW,$/;"	e	enum:InfoBoxFactory::Type
WIND_ARROW_STYLE	src/Dialogs/Settings/Panels/SymbolsConfigPanel.cpp	/^  WIND_ARROW_STYLE,$/;"	e	enum:ControlIndex	file:
WIND_EXCESSIVE	src/Engine/GlideSolvers/GlideResult.hpp	/^    WIND_EXCESSIVE,$/;"	m	class:GlideResult::Validity
WIND_K0	src/Computer/Wind/WindEKF.cpp	30;"	d	file:
WIND_K1	src/Computer/Wind/WindEKF.cpp	31;"	d	file:
WIND_SPEED	src/Units/Group.hpp	/^  WIND_SPEED,$/;"	m	class:UnitGroup
WIND_UP	src/MapSettings.hpp	/^  WIND_UP,$/;"	m	class:MapOrientation
WING_AREA	src/Dialogs/Plane/PlaneDetailsDialog.cpp	/^    WING_AREA,$/;"	e	enum:final::Controls	file:
WING_LOADING	src/Units/Group.hpp	/^  WING_LOADING,$/;"	m	class:UnitGroup
WINPILOT	src/Waypoint/WaypointFileType.hpp	/^  WINPILOT,$/;"	m	class:WaypointFileType
WINUSER_H	src/unix/winuser.h	25;"	d
WORDS_BIGENDIAN	src/zzip/_config.h	210;"	d
WORKING	src/Computer/Settings.hpp	/^    WORKING,$/;"	m	class:FeaturesSettings::FinalGlideTerrain
WORKING_TERRAIN_LINE	src/Computer/Settings.hpp	/^    WORKING_TERRAIN_LINE,$/;"	m	class:FeaturesSettings::FinalGlideTerrain
WORKING_TERRAIN_SHADE	src/Computer/Settings.hpp	/^    WORKING_TERRAIN_SHADE,$/;"	m	class:FeaturesSettings::FinalGlideTerrain
WPASupplicant	src/Kobo/WPASupplicant.hpp	/^  WPASupplicant():fd(SocketDescriptor::Undefined()) {}$/;"	f	class:WPASupplicant
WPASupplicant	src/Kobo/WPASupplicant.hpp	/^class WPASupplicant {$/;"	c
WPA_SECURITY	src/Kobo/WPASupplicant.hpp	/^  WPA_SECURITY,$/;"	e	enum:WifiSecurity
WPCIRCLESIZE	src/Renderer/WaypointLabelList.cpp	/^static constexpr int WPCIRCLESIZE = 2;$/;"	v	file:
WPT	src/Device/Driver/Volkslogger/vlapi2.h	/^  struct WPT {$/;"	s	class:VLAPI_DATA
WPTTYP	src/Device/Driver/Volkslogger/vlapi2.h	/^    enum WPTTYP {$/;"	g	struct:VLAPI_DATA::WPT
WPTTYP_A	src/Device/Driver/Volkslogger/vlapi2.h	/^      WPTTYP_A = 4,$/;"	e	enum:VLAPI_DATA::WPT::WPTTYP
WPTTYP_C	src/Device/Driver/Volkslogger/vlapi2.h	/^      WPTTYP_C = 8$/;"	e	enum:VLAPI_DATA::WPT::WPTTYP
WPTTYP_H	src/Device/Driver/Volkslogger/vlapi2.h	/^      WPTTYP_H = 2,$/;"	e	enum:VLAPI_DATA::WPT::WPTTYP
WPTTYP_L	src/Device/Driver/Volkslogger/vlapi2.h	/^      WPTTYP_L = 1,$/;"	e	enum:VLAPI_DATA::WPT::WPTTYP
WP_NOMINAL_DIST	src/InfoBoxes/Content/Type.hpp	/^    WP_NOMINAL_DIST, \/* The nominal distance to the currently selected waypoint. For AAT tasks, this is the distance to the origin of the AAT sector *\/$/;"	e	enum:InfoBoxFactory::Type
WRITABLE_BUFFER_HXX	src/util/WritableBuffer.hxx	31;"	d
WRITE	src/event/EpollEvents.hxx	/^	static constexpr unsigned WRITE = EPOLLOUT;$/;"	m	struct:EpollEvents
WRITE	src/event/PollEvents.hxx	/^	static constexpr unsigned WRITE = POLLOUT;$/;"	m	struct:PollEvents
WRITE	src/event/WinSelectEvents.hxx	/^	static constexpr unsigned WRITE = 2;$/;"	m	struct:WinSelectEvents
WRITE_CONTEST_CLASS	src/Device/Driver/LX/Protocol.hpp	/^    WRITE_CONTEST_CLASS = 0xD0,$/;"	e	enum:LX::Command
WRITE_FLIGHT_INFO	src/Device/Driver/LX/Protocol.hpp	/^    WRITE_FLIGHT_INFO = 0xCA,$/;"	e	enum:LX::Command
WRONG_SHAPE	src/Engine/Task/Factory/ValidationError.hpp	/^  WRONG_SHAPE,$/;"	m	class:TaskValidationErrorType
WSTRING_API_HXX	src/util/WStringAPI.hxx	31;"	d
WSTRING_COMPARE_HXX	src/util/WStringCompare.hxx	31;"	d
WSTRING_FORMAT_HPP	src/util/WStringFormat.hpp	31;"	d
WSTRING_STRIP_HXX	src/util/WStringStrip.hxx	31;"	d
WSTRING_UTIL_HPP	src/util/WStringUtil.hpp	25;"	d
WSTRING_VIEW_HXX	src/util/WStringView.hxx	31;"	d
WStringView	src/util/WStringView.hxx	/^struct WStringView : BasicStringView<wchar_t> {$/;"	s
WT_DOSCALE	src/Terrain/jasper/jpc/jpc_qmfb.c	75;"	d	file:
WT_LENONE	src/Terrain/jasper/jpc/jpc_qmfb.c	74;"	d	file:
Wait	src/Device/SettingsMap.hpp	/^  const_iterator Wait(std::unique_lock<Mutex> &lock,$/;"	f	class:DeviceSettingsMap
Wait	src/Job/Async.cpp	/^AsyncJobRunner::Wait()$/;"	f	class:AsyncJobRunner
Wait	src/system/OverlappedEvent.hpp	/^  WaitResult Wait(unsigned timeout_ms=INFINITE) {$/;"	f	class:OverlappedEvent
Wait	src/system/Process.cpp	/^Wait(pid_t pid)$/;"	f	file:
Wait	src/thread/Trigger.hpp	/^  bool Wait(unsigned timeout_ms) {$/;"	f	class:Trigger
Wait	src/thread/Trigger.hpp	/^  void Wait() {$/;"	f	class:Trigger
Wait	src/ui/canvas/fb/TopCanvas.cpp	/^TopCanvas::Wait()$/;"	f	class:TopCanvas
Wait	src/ui/event/android/Queue.cpp	/^EventQueue::Wait(Event &event)$/;"	f	class:UI::EventQueue
Wait	src/ui/event/poll/Queue.cpp	/^EventQueue::Wait(Event &event)$/;"	f	class:UI::EventQueue
Wait	src/ui/event/sdl/Queue.cpp	/^EventQueue::Wait(Event &event)$/;"	f	class:UI::EventQueue
Wait	src/ui/event/windows/Queue.cpp	/^EventQueue::Wait(Event &event)$/;"	f	class:UI::EventQueue
WaitAndRead	src/Device/Port/Port.cpp	/^Port::WaitAndRead(void *buffer, size_t length,$/;"	f	class:Port
WaitBoolValue	src/Dialogs/Device/LX/NanoConfigWidget.cpp	/^WaitBoolValue(LXDevice &device, const char *name,$/;"	f	file:
WaitCommandPrompt	src/Device/Driver/CAI302/Protocol.cpp	/^WaitCommandPrompt(Port &port, OperationEnvironment &env,$/;"	f	file:
WaitConnected	src/Device/Port/DumpPort.cpp	/^DumpPort::WaitConnected(OperationEnvironment &env)$/;"	f	class:DumpPort
WaitConnected	src/Device/Port/K6BtPort.cpp	/^K6BtPort::WaitConnected(OperationEnvironment &env)$/;"	f	class:K6BtPort
WaitConnected	src/Device/Port/Port.cpp	/^Port::WaitConnected(OperationEnvironment &env)$/;"	f	class:Port
WaitDataPending	src/Device/Port/SerialPort.cpp	/^SerialPort::WaitDataPending(OverlappedEvent &overlapped,$/;"	f	class:SerialPort
WaitDownloadPrompt	src/Device/Driver/CAI302/Protocol.cpp	/^WaitDownloadPrompt(Port &port, OperationEnvironment &env,$/;"	f	file:
WaitForACK	src/Device/Driver/FLARM/BinaryProtocol.cpp	/^FlarmDevice::WaitForACK(uint16_t sequence_number,$/;"	f	class:FlarmDevice
WaitForACK	src/Device/Driver/Volkslogger/Protocol.cpp	/^Volkslogger::WaitForACK(Port &port, OperationEnvironment &env)$/;"	f	class:Volkslogger
WaitForACKOrNACK	src/Device/Driver/FLARM/BinaryProtocol.cpp	/^FlarmDevice::WaitForACKOrNACK(uint16_t sequence_number,$/;"	f	class:FlarmDevice
WaitForChar	src/Device/Port/Port.cpp	/^Port::WaitForChar(const char token, OperationEnvironment &env,$/;"	f	class:Port
WaitForSetting	src/Dialogs/Device/FLARM/ConfigWidget.cpp	/^WaitForSetting(FlarmDevice &device, const char *name, unsigned timeout_ms)$/;"	f	file:
WaitForSetting	src/Dialogs/Device/Vega/VegaParametersWidget.cpp	/^WaitForSetting(VegaDevice &device, const char *name, unsigned timeout_ms)$/;"	f	file:
WaitForSettings	src/Device/Driver/BlueFly/Settings.cpp	/^BlueFlyDevice::WaitForSettings(unsigned int timeout)$/;"	f	class:BlueFlyDevice
WaitForStartByte	src/Device/Driver/FLARM/BinaryProtocol.cpp	/^FlarmDevice::WaitForStartByte(OperationEnvironment &env,$/;"	f	class:FlarmDevice
WaitForStopped	src/thread/StoppableThread.hpp	/^  bool WaitForStopped(unsigned timeout_ms) {$/;"	f	class:StoppableThread
WaitNanoSetting	src/Device/Driver/LX/Settings.cpp	/^LXDevice::WaitNanoSetting(const char *name, OperationEnvironment &env,$/;"	f	class:LXDevice
WaitRead	src/Device/Port/BufferedPort.cpp	/^BufferedPort::WaitRead(std::chrono::steady_clock::duration _timeout)$/;"	f	class:BufferedPort
WaitRead	src/Device/Port/DumpPort.cpp	/^DumpPort::WaitRead(std::chrono::steady_clock::duration timeout)$/;"	f	class:DumpPort
WaitRead	src/Device/Port/K6BtPort.cpp	/^K6BtPort::WaitRead(std::chrono::steady_clock::duration timeout)$/;"	f	class:K6BtPort
WaitRead	src/Device/Port/NullPort.cpp	/^NullPort::WaitRead(std::chrono::steady_clock::duration timeout)$/;"	f	class:NullPort
WaitRead	src/Device/Port/Port.cpp	/^Port::WaitRead(OperationEnvironment &env,$/;"	f	class:Port
WaitResult	src/Device/Port/Port.hpp	/^  enum class WaitResult {$/;"	c	class:Port
WaitResult	src/system/OverlappedEvent.hpp	/^  enum WaitResult {$/;"	g	class:OverlappedEvent
WaitStopped	src/Tracking/TrackingGlue.cpp	/^TrackingGlue::WaitStopped()$/;"	f	class:TrackingGlue
WaitStopped	src/thread/StandbyThread.cpp	/^StandbyThread::WaitStopped()$/;"	f	class:StandbyThread
WaitUnsignedValue	src/Dialogs/Device/LX/NanoConfigWidget.cpp	/^WaitUnsignedValue(LXDevice &device, const char *name,$/;"	f	file:
WaitUnsignedValue	src/Dialogs/Device/LX/V7ConfigWidget.cpp	/^WaitUnsignedValue(LXDevice &device, const char *name,$/;"	f	file:
WaitUploadPrompt	src/Device/Driver/CAI302/Protocol.cpp	/^WaitUploadPrompt(Port &port, OperationEnvironment &env,$/;"	f	file:
WaitV7Setting	src/Device/Driver/LX/Settings.cpp	/^LXDevice::WaitV7Setting(const char *name, OperationEnvironment &env,$/;"	f	class:LXDevice
WaitWrite	src/Device/Port/TTYPort.cpp	/^TTYPort::WaitWrite(unsigned timeout_ms)$/;"	f	class:TTYPort
WakeFD	src/event/WakeFD.hxx	/^class WakeFD {$/;"	c
WakeUp	src/ui/event/poll/Queue.hpp	/^  void WakeUp() {$/;"	f	class:DisplayOrientation::final
WakeUp	src/ui/event/windows/Queue.hpp	/^  void WakeUp() {$/;"	f	class:UI::EventQueue
WarningComputer	src/Computer/WarningComputer.cpp	/^WarningComputer::WarningComputer(const AirspaceWarningConfig &_config,$/;"	f	class:WarningComputer
WarningComputer	src/Computer/WarningComputer.hpp	/^class WarningComputer {$/;"	c
WarningDialog	src/Dialogs/Settings/Panels/AirspaceConfigPanel.cpp	/^  WarningDialog,$/;"	e	enum:ControlIndex	file:
WarningItem	src/Dialogs/Airspace/dlgAirspaceWarnings.cpp	/^  WarningItem(const AirspaceWarning &warning)$/;"	f	struct:WarningItem
WarningItem	src/Dialogs/Airspace/dlgAirspaceWarnings.cpp	/^struct WarningItem$/;"	s	file:
WarningLive	src/Engine/Airspace/AirspaceWarning.cpp	/^AirspaceWarning::WarningLive(const unsigned ack_time, const unsigned dt)$/;"	f	class:AirspaceWarning
WarningMode	src/Gauge/FlarmTrafficWindow.cpp	/^FlarmTrafficWindow::WarningMode() const$/;"	f	class:FlarmTrafficWindow
WarningTime	src/Dialogs/Settings/Panels/AirspaceConfigPanel.cpp	/^  WarningTime,$/;"	e	enum:ControlIndex	file:
WarningTime	src/Profile/ProfileKeys.cpp	/^const char WarningTime[] = "WarnTime";$/;"	m	namespace:ProfileKeys	file:
WasCtrlClick	src/ui/event/poll/Queue.hpp	/^  bool WasCtrlClick() const {$/;"	f	class:DisplayOrientation::final
WasCtrlClick	src/ui/event/poll/X11Queue.hpp	/^  bool WasCtrlClick() const {$/;"	f	class:UI::X11EventQueue
WatchedWaypointFile	src/Dialogs/Settings/Panels/SiteConfigPanel.cpp	/^  WatchedWaypointFile,$/;"	e	enum:ControlIndex	file:
WatchedWaypointFile	src/Profile/ProfileKeys.cpp	/^const char WatchedWaypointFile[] = "WatchedWPFile"; \/\/ pL$/;"	m	namespace:ProfileKeys	file:
Wave	src/Tracking/SkyLines/Data.hpp	/^    constexpr Wave(uint32_t _time, GeoPoint _a, GeoPoint _b)$/;"	f	struct:SkyLinesTracking::Data::Wave
Wave	src/Tracking/SkyLines/Data.hpp	/^  struct Wave {$/;"	s	struct:SkyLinesTracking::Data
Wave	src/Tracking/SkyLines/Protocol.hpp	/^struct Wave {$/;"	s	namespace:SkyLinesTracking
WaveAssistant	src/Dialogs/Settings/Panels/GlideComputerConfigPanel.cpp	/^  WaveAssistant,$/;"	e	enum:ControlIndex	file:
WaveAssistant	src/Profile/ProfileKeys.cpp	/^const char WaveAssistant[] = "WaveAssistant";$/;"	m	namespace:ProfileKeys	file:
WaveComputer	src/Computer/WaveComputer.hpp	/^class WaveComputer {$/;"	c
WaveInfo	src/Computer/WaveResult.hpp	/^struct WaveInfo {$/;"	s
WaveLook	src/Look/WaveLook.hpp	/^struct WaveLook {$/;"	s
WaveRenderer	src/Renderer/WaveRenderer.hpp	/^  WaveRenderer(const WaveLook &_look):look(_look) {}$/;"	f	class:WaveRenderer
WaveRenderer	src/Renderer/WaveRenderer.hpp	/^class WaveRenderer {$/;"	c
WaveRequestPacket	src/Tracking/SkyLines/Protocol.hpp	/^struct WaveRequestPacket {$/;"	s	namespace:SkyLinesTracking
WaveResponsePacket	src/Tracking/SkyLines/Protocol.hpp	/^struct WaveResponsePacket {$/;"	s	namespace:SkyLinesTracking
WaveResult	src/Computer/WaveResult.hpp	/^struct WaveResult {$/;"	s
WaveSettings	src/Computer/WaveSettings.hpp	/^struct WaveSettings {$/;"	s
WaveSubmitPacket	src/Tracking/SkyLines/Protocol.hpp	/^struct WaveSubmitPacket {$/;"	s	namespace:SkyLinesTracking
WaylandEventQueue	src/ui/event/poll/WaylandQueue.cpp	/^WaylandEventQueue::WaylandEventQueue(EventQueue &_queue)$/;"	f	class:UI::WaylandEventQueue
WaylandPointerAxis	src/ui/event/poll/WaylandQueue.cpp	/^WaylandPointerAxis(void *data, struct wl_pointer *wl_pointer,$/;"	f	namespace:UI
WaylandPointerButton	src/ui/event/poll/WaylandQueue.cpp	/^WaylandPointerButton(void *data, struct wl_pointer *wl_pointer,$/;"	f	namespace:UI
WaylandPointerEnter	src/ui/event/poll/WaylandQueue.cpp	/^WaylandPointerEnter(void *data, struct wl_pointer *wl_pointer, uint32_t serial,$/;"	f	namespace:UI
WaylandPointerLeave	src/ui/event/poll/WaylandQueue.cpp	/^WaylandPointerLeave(void *data, struct wl_pointer *wl_pointer, uint32_t serial,$/;"	f	namespace:UI
WaylandPointerMotion	src/ui/event/poll/WaylandQueue.cpp	/^WaylandPointerMotion(void *data, struct wl_pointer *wl_pointer, uint32_t time,$/;"	f	namespace:UI
WaylandRegistryGlobal	src/ui/event/poll/WaylandQueue.cpp	/^WaylandRegistryGlobal(void *data, struct wl_registry *registry, uint32_t id,$/;"	f	namespace:UI
WaylandRegistryGlobalRemove	src/ui/event/poll/WaylandQueue.cpp	/^WaylandRegistryGlobalRemove(void *data, struct wl_registry *registry,$/;"	f	namespace:UI
WaylandSeatHandleCapabilities	src/ui/event/poll/WaylandQueue.cpp	/^WaylandSeatHandleCapabilities(void *data, struct wl_seat *seat, uint32_t caps)$/;"	f	namespace:UI
Waypoint	src/Device/Driver/Volkslogger/Database.hpp	/^  struct Waypoint {$/;"	s	namespace:Volkslogger
Waypoint	src/Engine/Waypoint/Waypoint.cpp	/^Waypoint::Waypoint(const GeoPoint &_location)$/;"	f	class:Waypoint
Waypoint	src/Engine/Waypoint/Waypoint.hpp	/^  Waypoint()$/;"	f	struct:Waypoint
Waypoint	src/Engine/Waypoint/Waypoint.hpp	/^struct Waypoint {$/;"	s
WaypointAccessor	src/Engine/Waypoint/Waypoints.hpp	/^  struct WaypointAccessor {$/;"	s	class:Waypoints
WaypointArrivalHeightDisplay	src/Dialogs/Settings/Panels/WaypointDisplayConfigPanel.cpp	/^  WaypointArrivalHeightDisplay,$/;"	e	enum:ControlIndex	file:
WaypointArrivalHeightDisplay	src/Profile/ProfileKeys.cpp	/^const char WaypointArrivalHeightDisplay[] = "WaypointArrivalHeightDisplay";$/;"	m	namespace:ProfileKeys	file:
WaypointDetails	src/Waypoint/WaypointDetailsReader.hpp	/^namespace WaypointDetails$/;"	n
WaypointDisplayConfigPanel	src/Dialogs/Settings/Panels/WaypointDisplayConfigPanel.cpp	/^  WaypointDisplayConfigPanel()$/;"	f	class:final
WaypointDistanceCompare	src/Waypoint/WaypointList.cpp	/^  WaypointDistanceCompare(const GeoPoint &_location):location(_location) {}$/;"	f	class:WaypointDistanceCompare
WaypointDistanceCompare	src/Waypoint/WaypointList.cpp	/^class WaypointDistanceCompare$/;"	c	file:
WaypointEditWidget	src/Dialogs/Waypoint/dlgWaypointEdit.cpp	/^  WaypointEditWidget(const DialogLook &look, Waypoint _value)$/;"	f	class:final
WaypointExternalFileListHandler	src/Dialogs/Waypoint/dlgWaypointDetails.cpp	/^  explicit WaypointExternalFileListHandler(WaypointPtr _waypoint)$/;"	f	class:final
WaypointFactory	src/Waypoint/Factory.hpp	/^  explicit WaypointFactory(WaypointOrigin _origin,$/;"	f	class:WaypointFactory
WaypointFactory	src/Waypoint/Factory.hpp	/^class WaypointFactory {$/;"	c
WaypointFile	src/Dialogs/Settings/Panels/SiteConfigPanel.cpp	/^  WaypointFile,$/;"	e	enum:ControlIndex	file:
WaypointFile	src/Profile/ProfileKeys.cpp	/^const char WaypointFile[] = "WPFile"; \/\/ pL$/;"	m	namespace:ProfileKeys	file:
WaypointFileChanged	src/UtilsSettings.cpp	/^bool WaypointFileChanged = false;$/;"	v
WaypointFileType	src/Waypoint/WaypointFileType.hpp	/^enum class WaypointFileType: uint8_t {$/;"	c
WaypointFilter	src/Waypoint/WaypointFilter.hpp	/^struct WaypointFilter$/;"	s
WaypointFilterWidget	src/Dialogs/Waypoint/WaypointList.cpp	/^  WaypointFilterWidget(const DialogLook &look, Angle _heading)$/;"	f	class:WaypointFilterWidget
WaypointFilterWidget	src/Dialogs/Waypoint/WaypointList.cpp	/^class WaypointFilterWidget : public RowFormWidget {$/;"	c	file:
WaypointGlue	src/Waypoint/WaypointGlue.hpp	/^namespace WaypointGlue {$/;"	n
WaypointIDList	src/Waypoint/LastUsed.hpp	/^class WaypointIDList: public std::list<unsigned> {};$/;"	c
WaypointIconRenderer	src/Renderer/WaypointIconRenderer.hpp	/^  WaypointIconRenderer(const WaypointRendererSettings &_settings,$/;"	f	class:WaypointIconRenderer
WaypointIconRenderer	src/Renderer/WaypointIconRenderer.hpp	/^class WaypointIconRenderer$/;"	c
WaypointInfoWidget	src/Dialogs/Waypoint/WaypointInfoWidget.hpp	/^struct WaypointInfoWidget : public RowFormWidget {$/;"	s
WaypointLabelList	src/Renderer/WaypointLabelList.hpp	/^class WaypointLabelList : private NonCopyable {$/;"	c
WaypointLabelSelection	src/Dialogs/Settings/Panels/WaypointDisplayConfigPanel.cpp	/^  WaypointLabelSelection,$/;"	e	enum:ControlIndex	file:
WaypointLabelSelection	src/Profile/ProfileKeys.cpp	/^const char WaypointLabelSelection[] = "WayPointLabelSelection";$/;"	m	namespace:ProfileKeys	file:
WaypointLabelStyle	src/Dialogs/Settings/Panels/WaypointDisplayConfigPanel.cpp	/^  WaypointLabelStyle,$/;"	e	enum:ControlIndex	file:
WaypointLabelStyle	src/Profile/ProfileKeys.cpp	/^const char WaypointLabelStyle[] = "WayPointLabelStyle";$/;"	m	namespace:ProfileKeys	file:
WaypointLabels	src/Dialogs/Settings/Panels/WaypointDisplayConfigPanel.cpp	/^  WaypointLabels,$/;"	e	enum:ControlIndex	file:
WaypointList	src/Waypoint/WaypointList.hpp	/^class WaypointList: public std::vector<WaypointListItem>$/;"	c
WaypointListBuilder	src/Waypoint/WaypointListBuilder.hpp	/^  WaypointListBuilder(const WaypointFilter &_filter,$/;"	f	class:final
WaypointListButtons	src/Dialogs/Waypoint/WaypointList.cpp	/^  WaypointListButtons(const DialogLook &look, WndForm &_dialog)$/;"	f	class:WaypointListButtons
WaypointListButtons	src/Dialogs/Waypoint/WaypointList.cpp	/^class WaypointListButtons : public RowFormWidget {$/;"	c	file:
WaypointListDialogState	src/Dialogs/Waypoint/WaypointList.cpp	/^struct WaypointListDialogState$/;"	s	file:
WaypointListItem	src/Waypoint/WaypointList.hpp	/^  explicit WaypointListItem(W &&_waypoint):$/;"	f	struct:WaypointListItem
WaypointListItem	src/Waypoint/WaypointList.hpp	/^struct WaypointListItem$/;"	s
WaypointListRenderer	src/Renderer/WaypointListRenderer.hpp	/^namespace WaypointListRenderer$/;"	n
WaypointListWidget	src/Dialogs/Waypoint/WaypointList.cpp	/^  WaypointListWidget(WndForm &_dialog,$/;"	f	class:final
WaypointLook	src/Look/WaypointLook.hpp	/^struct WaypointLook {$/;"	s
WaypointManagerWidget	src/Dialogs/Waypoint/Manager.cpp	/^  WaypointManagerWidget():modified(false) {}$/;"	f	class:final
WaypointMapItem	src/MapWindow/Items/MapItem.hpp	/^  WaypointMapItem(const WaypointPtr &_waypoint)$/;"	f	struct:WaypointMapItem
WaypointMapItem	src/MapWindow/Items/MapItem.hpp	/^struct WaypointMapItem: public MapItem$/;"	s
WaypointNameAllowedCharacters	src/Dialogs/Waypoint/WaypointList.cpp	/^WaypointNameAllowedCharacters(const TCHAR *prefix)$/;"	f	file:
WaypointNameTree	src/Engine/Waypoint/Waypoints.hpp	/^  class WaypointNameTree : public RadixTree<WaypointPtr> {$/;"	c	class:Waypoints
WaypointNames	src/Device/Driver/LX/Protocol.hpp	/^    char WaypointNames[NUMTPS][9];$/;"	m	struct:LX::Declaration
WaypointOrigin	src/Engine/Waypoint/Origin.hpp	/^enum class WaypointOrigin : uint8_t {$/;"	c
WaypointPtr	src/Engine/Waypoint/Ptr.hpp	/^typedef std::shared_ptr<const Waypoint> WaypointPtr;$/;"	t
WaypointReaderBase	src/Waypoint/WaypointReaderBase.hpp	/^  explicit WaypointReaderBase(WaypointFactory _factory)$/;"	f	class:WaypointReaderBase
WaypointReaderBase	src/Waypoint/WaypointReaderBase.hpp	/^class WaypointReaderBase $/;"	c
WaypointReaderCompeGPS	src/Waypoint/WaypointReaderCompeGPS.hpp	/^  explicit WaypointReaderCompeGPS(WaypointFactory _factory)$/;"	f	class:final
WaypointReaderFS	src/Waypoint/WaypointReaderFS.hpp	/^  explicit WaypointReaderFS(WaypointFactory _factory)$/;"	f	class:final
WaypointReaderOzi	src/Waypoint/WaypointReaderOzi.hpp	/^  explicit WaypointReaderOzi(WaypointFactory _factory)$/;"	f	class:final
WaypointReaderSeeYou	src/Waypoint/WaypointReaderSeeYou.hpp	/^  explicit WaypointReaderSeeYou(WaypointFactory _factory)$/;"	f	class:final
WaypointReaderWinPilot	src/Waypoint/WaypointReaderWinPilot.hpp	/^  explicit WaypointReaderWinPilot(WaypointFactory _factory)$/;"	f	class:final
WaypointReaderZander	src/Waypoint/WaypointReaderZander.hpp	/^  explicit WaypointReaderZander(WaypointFactory _factory)$/;"	f	class:final
WaypointRenderer	src/Renderer/WaypointRenderer.hpp	/^  WaypointRenderer(const Waypoints *_way_points,$/;"	f	class:WaypointRenderer
WaypointRenderer	src/Renderer/WaypointRenderer.hpp	/^class WaypointRenderer : private NonCopyable {$/;"	c
WaypointRendererSettings	src/Renderer/WaypointRendererSettings.hpp	/^struct WaypointRendererSettings {$/;"	s
WaypointTree	src/Engine/Waypoint/Waypoints.hpp	/^  typedef QuadTree<WaypointPtr, WaypointAccessor> WaypointTree;$/;"	t	class:Waypoints
WaypointVisitorMap	src/Renderer/WaypointRenderer.cpp	/^  WaypointVisitorMap(const MapWindowProjection &_projection,$/;"	f	class:final
Waypoints	src/Engine/Waypoint/Waypoints.cpp	/^Waypoints::Waypoints()$/;"	f	class:Waypoints
Waypoints	src/Engine/Waypoint/Waypoints.hpp	/^class Waypoints {$/;"	c
WeatherConfigPanel	src/Dialogs/Settings/Panels/WeatherConfigPanel.cpp	/^  WeatherConfigPanel()$/;"	f	class:final
WeatherDescriptors	src/Weather/Rasp/RaspStore.cpp	/^static constexpr RaspStore::MapInfo WeatherDescriptors[] = {$/;"	v	file:
WeatherSettings	src/Weather/Settings.hpp	/^struct WeatherSettings {$/;"	s
WeatherStationMapItem	src/MapWindow/Items/MapItem.hpp	/^  WeatherStationMapItem(const NOAAStore::iterator &_station)$/;"	f	struct:WeatherStationMapItem
WeatherStationMapItem	src/MapWindow/Items/MapItem.hpp	/^struct WeatherStationMapItem: public MapItem$/;"	s
WeatherStations	src/Profile/ProfileKeys.cpp	/^const char WeatherStations[] = "WeatherStations";$/;"	m	namespace:ProfileKeys	file:
WeatherUIState	src/Weather/WeatherUIState.hpp	/^struct WeatherUIState {$/;"	s
WesterboerCreateOnPort	src/Device/Driver/Westerboer.cpp	/^WesterboerCreateOnPort(const DeviceConfig &config, Port &com_port)$/;"	f	file:
WesterboerDevice	src/Device/Driver/Westerboer.cpp	/^  WesterboerDevice(Port &_port):port(_port) {}$/;"	f	class:WesterboerDevice
WesterboerDevice	src/Device/Driver/Westerboer.cpp	/^class WesterboerDevice : public AbstractDevice {$/;"	c	file:
WideToACPConverter	src/util/ConvertString.hpp	/^class WideToACPConverter {$/;"	c
WideToUTF8Converter	src/util/ConvertString.hpp	/^class WideToUTF8Converter {$/;"	c
Wideline	src/ui/canvas/memory/Murphy.hpp	/^  void Wideline(int x1, int y1, int x2, int y2, uint8_t width, uint8_t miter) {$/;"	f	struct:MurphyIterator
Widget	src/Widget/Widget.hpp	/^class Widget {$/;"	c
WidgetDialog	src/Dialogs/WidgetDialog.cpp	/^  :WidgetDialog(tag, parent, look, caption)$/;"	f
WidgetDialog	src/Dialogs/WidgetDialog.cpp	/^WidgetDialog::WidgetDialog(const DialogLook &look)$/;"	f	class:WidgetDialog
WidgetDialog	src/Dialogs/WidgetDialog.hpp	/^class WidgetDialog : public WndForm {$/;"	c
Width	src/Form/ButtonPanel.cpp	/^ButtonPanel::Width(unsigned i) const$/;"	f	class:ButtonPanel
WidthToAngle	src/Terrain/RasterProjection.hpp	/^  constexpr Angle WidthToAngle(double pixels) const {$/;"	f	class:RasterProjection
WifiConfiguredNetworkInfo	src/Kobo/WPASupplicant.hpp	/^struct WifiConfiguredNetworkInfo {$/;"	s
WifiConnect	src/Kobo/WifiDialog.cpp	/^WifiConnect(enum WifiSecurity security, WPASupplicant &wpa_supplicant, const char *ssid, const char *psk)$/;"	f	file:
WifiSecurity	src/Kobo/WPASupplicant.hpp	/^enum WifiSecurity {$/;"	g
WifiStatus	src/Kobo/WPASupplicant.hpp	/^struct WifiStatus {$/;"	s
WifiVisibleNetwork	src/Kobo/WPASupplicant.hpp	/^struct WifiVisibleNetwork {$/;"	s
WinSelectBackend	src/event/WinSelectBackend.hxx	/^class WinSelectBackend$/;"	c
WinSelectEvents	src/event/WinSelectEvents.hxx	/^struct WinSelectEvents {$/;"	s
WindArrowLook	src/Look/WindArrowLook.hpp	/^struct WindArrowLook$/;"	s
WindArrowRenderer	src/Renderer/WindArrowRenderer.hpp	/^  WindArrowRenderer(const WindArrowLook &_look):look(_look) {}$/;"	f	class:WindArrowRenderer
WindArrowRenderer	src/Renderer/WindArrowRenderer.hpp	/^class WindArrowRenderer {$/;"	c
WindArrowStyle	src/MapSettings.hpp	/^enum class WindArrowStyle: uint8_t {$/;"	c
WindArrowStyle	src/Profile/ProfileKeys.cpp	/^const char WindArrowStyle[] = "WindArrowStyle";$/;"	m	namespace:ProfileKeys	file:
WindComputer	src/Computer/Wind/Computer.hpp	/^class WindComputer {$/;"	c
WindEKF	src/Computer/Wind/WindEKF.hpp	/^class WindEKF {$/;"	c
WindEKFGlue	src/Computer/Wind/WindEKFGlue.hpp	/^class WindEKFGlue$/;"	c
WindMeasurement	src/Computer/Wind/MeasurementList.hpp	/^struct WindMeasurement$/;"	s
WindMeasurementList	src/Computer/Wind/MeasurementList.hpp	/^class WindMeasurementList$/;"	c
WindMonitor	src/Monitor/WindMonitor.hpp	/^class WindMonitor {$/;"	c
WindSettings	src/Computer/Wind/Settings.hpp	/^struct WindSettings {$/;"	s
WindSource	src/NMEA/Derived.hpp	/^  enum class WindSource : uint8_t {$/;"	c	struct:DerivedInfo
WindStore	src/Computer/Wind/Store.hpp	/^class WindStore$/;"	c
Window	src/Hardware/DisplayDPI.cpp	37;"	d	file:
Window	src/Hardware/DisplayDPI.cpp	41;"	d	file:
Window	src/Hardware/DisplaySize.cpp	34;"	d	file:
Window	src/Hardware/DisplaySize.cpp	38;"	d	file:
Window	src/ui/canvas/custom/TopCanvas.hpp	56;"	d
Window	src/ui/canvas/custom/TopCanvas.hpp	60;"	d
Window	src/ui/canvas/opengl/Function.hpp	36;"	d
Window	src/ui/canvas/opengl/Function.hpp	42;"	d
Window	src/ui/egl/System.hpp	34;"	d
Window	src/ui/egl/System.hpp	46;"	d
Window	src/ui/event/poll/X11Queue.cpp	31;"	d	file:
Window	src/ui/event/poll/X11Queue.cpp	38;"	d	file:
Window	src/ui/event/poll/X11Queue.hpp	32;"	d
Window	src/ui/event/poll/X11Queue.hpp	38;"	d
Window	src/ui/glx/System.hpp	29;"	d
Window	src/ui/glx/System.hpp	35;"	d
Window	src/ui/window/TopWindow.hpp	62;"	d
Window	src/ui/window/TopWindow.hpp	70;"	d
Window	src/ui/window/Window.hpp	/^class Window {$/;"	c
WindowCanvas	src/ui/canvas/WindowCanvas.hpp	/^  explicit WindowCanvas(Window &window) {$/;"	f	class:WindowCanvas
WindowCanvas	src/ui/canvas/WindowCanvas.hpp	/^class WindowCanvas : public Canvas {$/;"	c
WindowCanvas	src/ui/canvas/gdi/WindowCanvas.cpp	/^WindowCanvas::WindowCanvas(PaintWindow &window)$/;"	f	class:WindowCanvas
WindowControl	src/Form/Control.hpp	/^class WindowControl : public PaintWindow {$/;"	c
WindowFilter	src/Math/WindowFilter.hpp	/^class WindowFilter : public AvFilter<max>$/;"	c
WindowList	src/ui/window/custom/WList.hpp	/^class WindowList {$/;"	c
WindowProjection	src/Projection/WindowProjection.hpp	/^class WindowProjection:$/;"	c
WindowReference	src/ui/window/custom/Reference.hpp	/^  WindowReference():window(nullptr) {}$/;"	f	class:WindowReference
WindowReference	src/ui/window/custom/Reference.hpp	/^  WindowReference(const ContainerWindow &root, Window &_window)$/;"	f	class:WindowReference
WindowReference	src/ui/window/custom/Reference.hpp	/^class WindowReference {$/;"	c
WindowStats	src/Engine/Task/Stats/WindowStats.hpp	/^struct WindowStats {$/;"	s
WindowStatsComputer	src/Engine/Task/Computer/WindowStatsComputer.hpp	/^class WindowStatsComputer {$/;"	c
WindowStyle	src/ui/window/Window.hpp	/^class WindowStyle {$/;"	c
WindowWidget	src/Widget/WindowWidget.hpp	/^class WindowWidget : public NullWidget {$/;"	c
Windows	src/Gauge/BigTrafficWidget.cpp	/^  Windows(TrafficWidget &widget, ContainerWindow &parent, const PixelRect &r,$/;"	f	struct:TrafficWidget::Windows
Windows	src/Gauge/BigTrafficWidget.cpp	/^struct TrafficWidget::Windows {$/;"	s	class:TrafficWidget	file:
WindowsCond	src/thread/WindowsCond.hxx	/^class WindowsCond {$/;"	c
WindowsSharedMutex	src/thread/WindowsSharedMutex.hxx	/^class WindowsSharedMutex {$/;"	c
WingLoading	src/Dialogs/Settings/dlgBasicSettings.cpp	/^  WingLoading,$/;"	e	enum:ControlIndex	file:
WingLoadingUnitValue	src/Profile/ProfileKeys.cpp	/^const char WingLoadingUnitValue[] = "WingLoadingUnit";$/;"	m	namespace:ProfileKeys	file:
WithAlpha	src/ui/canvas/memory/Color.hpp	/^  WithAlpha(uint8_t alpha) const {$/;"	f	class:Color
WithAlpha	src/ui/canvas/opengl/Color.hpp	/^  WithAlpha(uint8_t alpha) const {$/;"	f	class:Color
WithBold	src/Look/FontDescription.hpp	/^  FontDescription WithBold(bool bold=true) const {$/;"	f	class:FontDescription
WithBold	src/Look/FontDescription.hpp	/^  constexpr FontDescription WithBold(bool _bold=true) const {$/;"	f	class:FontDescription
WithBufferedOutputStream	src/io/BufferedOutputStream.hxx	/^WithBufferedOutputStream(OutputStream &os, F &&f)$/;"	f
WithExtension	src/system/Path.cpp	/^Path::WithExtension(const_pointer new_extension) const$/;"	f	class:Path
WithExtension	src/system/Path.hpp	/^  AllocatedPath WithExtension(const_pointer new_extension) const {$/;"	f	class:AllocatedPath
WithHeight	src/Look/FontDescription.hpp	/^  FontDescription WithHeight(unsigned _height) const {$/;"	f	class:FontDescription
WithHeight	src/Look/FontDescription.hpp	/^  constexpr FontDescription WithHeight(unsigned _height) const {$/;"	f	class:FontDescription
WndForm	src/Form/Form.cpp	/^  :WndForm(main_window, _look, main_window.GetClientRect(), caption, style)$/;"	f
WndForm	src/Form/Form.cpp	/^WndForm::WndForm(SingleWindow &main_window, const DialogLook &_look,$/;"	f	class:WndForm
WndForm	src/Form/Form.cpp	/^WndForm::WndForm(const DialogLook &_look)$/;"	f	class:WndForm
WndForm	src/Form/Form.hpp	/^class WndForm : public ContainerWindow$/;"	c
WndFrame	src/Form/Frame.hpp	/^class WndFrame : public PaintWindow {$/;"	c
WndOwnerDrawFrame	src/Form/Draw.hpp	/^class WndOwnerDrawFrame : public PaintWindow {$/;"	c
WndProperty	src/Form/Edit.hpp	/^class WndProperty : public WindowControl {$/;"	c
WorkerThread	src/thread/WorkerThread.cpp	/^WorkerThread::WorkerThread(const char *_name,$/;"	f	class:WorkerThread
WorkerThread	src/thread/WorkerThread.hpp	/^class WorkerThread : public SuspensibleThread {$/;"	c
WorldFileData	src/Terrain/WorldFile.cpp	/^struct WorldFileData {$/;"	s	file:
WrapAirspacePredicate	src/Engine/Airspace/Predicate/AirspacePredicate.hpp	/^WrapAirspacePredicate(P &&p)$/;"	f
WrapClock	src/time/WrapClock.hpp	/^class WrapClock {$/;"	c
WritableBuffer	src/util/WritableBuffer.hxx	/^struct WritableBuffer {$/;"	s
WritableBuffer	src/util/WritableBuffer.hxx	/^struct WritableBuffer<void> {$/;"	s
WritableDataNode	src/XML/DataNode.hpp	/^class WritableDataNode {$/;"	c
WritableImageBuffer	src/ui/canvas/memory/Buffer.hpp	/^struct WritableImageBuffer {$/;"	s
Write	src/Device/Driver/LX/Protocol.hpp	/^    bool Write(const void *data, size_t length,$/;"	f	class:LX::CRCWriter
Write	src/Device/Driver/LX/Protocol.hpp	/^    bool Write(uint8_t value) {$/;"	f	class:LX::CRCWriter
Write	src/Device/Port/AndroidPort.cpp	/^AndroidPort::Write(const void *data, size_t length)$/;"	f	class:AndroidPort
Write	src/Device/Port/DumpPort.cpp	/^DumpPort::Write(const void *data, size_t length)$/;"	f	class:DumpPort
Write	src/Device/Port/K6BtPort.cpp	/^K6BtPort::Write(const void *_data, size_t length)$/;"	f	class:K6BtPort
Write	src/Device/Port/NullPort.cpp	/^NullPort::Write(const void *data, size_t length)$/;"	f	class:NullPort
Write	src/Device/Port/Port.cpp	/^Port::Write(const char *s)$/;"	f	class:Port
Write	src/Device/Port/Port.hpp	/^  bool Write(char ch) {$/;"	f	class:Port
Write	src/Device/Port/SerialPort.cpp	/^SerialPort::Write(const void *data, size_t length)$/;"	f	class:SerialPort
Write	src/Device/Port/TCPClientPort.cpp	/^TCPClientPort::Write(const void *data, size_t length)$/;"	f	class:TCPClientPort
Write	src/Device/Port/TCPPort.cpp	/^TCPPort::Write(const void *data, size_t length)$/;"	f	class:TCPPort
Write	src/Device/Port/TTYPort.cpp	/^TTYPort::Write(const void *data, size_t length)$/;"	f	class:TTYPort
Write	src/Device/Port/UDPPort.cpp	/^UDPPort::Write(const void *data, size_t length)$/;"	f	class:UDPPort
Write	src/Plane/PlaneFileGlue.cpp	/^PlaneGlue::Write(const Plane &plane, KeyValueFileWriter &writer)$/;"	f	class:PlaneGlue
Write	src/Screen/TerminalWindow.cpp	/^TerminalWindow::Write(const char *p, size_t length)$/;"	f	class:TerminalWindow
Write	src/io/BufferedOutputStream.cxx	/^BufferedOutputStream::Write(const char *p)$/;"	f	class:BufferedOutputStream
Write	src/io/BufferedOutputStream.cxx	/^BufferedOutputStream::Write(const void *data, size_t size)$/;"	f	class:BufferedOutputStream
Write	src/io/BufferedOutputStream.cxx	/^BufferedOutputStream::Write(const wchar_t *p)$/;"	f	class:BufferedOutputStream
Write	src/io/BufferedOutputStream.hxx	/^	void Write(const char &ch) {$/;"	f	class:BufferedOutputStream
Write	src/io/BufferedOutputStream.hxx	/^	void Write(const wchar_t &ch) {$/;"	f	class:BufferedOutputStream
Write	src/io/FileHandle.hpp	/^  int Write(const char *s) {$/;"	f	class:FileHandle
Write	src/io/FileHandle.hpp	/^  int Write(int ch) {$/;"	f	class:FileHandle
Write	src/io/FileHandle.hpp	/^  size_t Write(const void *s, size_t size, size_t length) {$/;"	f	class:FileHandle
Write	src/io/FileOutputStream.cxx	/^FileOutputStream::Write(const void *data, size_t size)$/;"	f	class:FileOutputStream
Write	src/io/KeyValueFileWriter.cpp	/^KeyValueFileWriter::Write(const char *key, const TCHAR *value)$/;"	f	class:KeyValueFileWriter
Write	src/io/KeyValueFileWriter.cpp	/^KeyValueFileWriter::Write(const char *key, const char *value)$/;"	f	class:KeyValueFileWriter
Write	src/io/TextWriter.cpp	/^TextWriter::Write(const TCHAR *s)$/;"	f	class:TextWriter
Write	src/io/TextWriter.cpp	/^TextWriter::Write(const TCHAR *s, size_t src_length)$/;"	f	class:TextWriter
Write	src/io/TextWriter.hpp	/^  bool Write(const char *s) {$/;"	f	class:TextWriter
Write	src/io/TextWriter.hpp	/^  bool Write(const char *s, size_t length) {$/;"	f	class:TextWriter
Write	src/io/TextWriter.hpp	/^  void Write(char ch) {$/;"	f	class:TextWriter
Write16	src/Cloud/Serialiser.hpp	/^  void Write16(uint16_t value) {$/;"	f	class:Serialiser
Write32	src/Cloud/Serialiser.hpp	/^  void Write32(uint32_t value) {$/;"	f	class:Serialiser
Write64	src/Cloud/Serialiser.hpp	/^  void Write64(uint64_t value) {$/;"	f	class:Serialiser
Write8	src/Cloud/Serialiser.hpp	/^  void Write8(uint8_t value) {$/;"	f	class:Serialiser
WriteActivePilot	src/Device/Driver/CAI302/Manage.cpp	/^CAI302Device::WriteActivePilot(const CAI302::Pilot &pilot,$/;"	f	class:CAI302Device
WriteAltitude	src/Waypoint/CupWriter.cpp	/^WriteAltitude(BufferedOutputStream &writer, double altitude)$/;"	f	file:
WriteAngle	src/JSON/GeoWriter.hpp	/^  static inline void WriteAngle(BufferedOutputStream &writer, Angle value) {$/;"	f	namespace:JSON
WriteAngleDMM	src/Waypoint/CupWriter.cpp	/^WriteAngleDMM(BufferedOutputStream &writer, const Angle angle, bool is_latitude)$/;"	f	file:
WriteBulk	src/Device/Driver/Volkslogger/Protocol.cpp	/^Volkslogger::WriteBulk(Port &port, OperationEnvironment &env,$/;"	f	class:Volkslogger
WriteCleanString	src/Device/Driver/EWMicroRecorder.cpp	/^WriteCleanString(Port &port, const TCHAR *p,$/;"	f	file:
WriteCup	src/Waypoint/CupWriter.cpp	/^WriteCup(BufferedOutputStream &writer, const Waypoint &wp)$/;"	f
WriteCup	src/Waypoint/CupWriter.cpp	/^WriteCup(BufferedOutputStream &writer, const Waypoints &waypoints,$/;"	f
WriteDatabase	src/Device/Driver/Volkslogger/Protocol.hpp	/^  WriteDatabase(Port &port, OperationEnvironment &env,$/;"	f	namespace:Volkslogger
WriteDeviceSetting	src/Device/Driver/BlueFly/Settings.cpp	/^BlueFlyDevice::WriteDeviceSetting(const char *name, int value,$/;"	f	class:BlueFlyDevice
WriteDeviceSettings	src/Device/Driver/BlueFly/Settings.cpp	/^BlueFlyDevice::WriteDeviceSettings(const BlueFlySettings &new_settings,$/;"	f	class:BlueFlyDevice
WriteDouble	src/Cloud/Serialiser.hpp	/^  void WriteDouble(double value) {$/;"	f	class:Serialiser
WriteDouble	src/JSON/GeoWriter.hpp	/^  static inline void WriteDouble(BufferedOutputStream &writer, double value) {$/;"	f	namespace:JSON
WriteElement	src/JSON/Writer.hpp	/^    void WriteElement(T callback, Args... args) {$/;"	f	class:JSON::ArrayWriter
WriteElement	src/JSON/Writer.hpp	/^    void WriteElement(const char *name, T callback, Args... args) {$/;"	f	class:JSON::ObjectWriter
WriteExisting	src/system/FileUtil.cpp	/^File::WriteExisting(Path path, const char *value)$/;"	f	class:File
WriteFile	src/Plane/PlaneFileGlue.cpp	/^PlaneGlue::WriteFile(const Plane &plane, Path path)$/;"	f	class:PlaneGlue
WriteFix	src/Device/Driver/IMI/Protocol/IGC.cpp	/^IMI::WriteFix(BufferedOutputStream &os, const Fix &fix, bool fromB2, int no_enl)$/;"	f	class:IMI
WriteFloat	src/Cloud/Serialiser.hpp	/^  void WriteFloat(float value) {$/;"	f	class:Serialiser
WriteFormatted	src/io/FileHandle.hpp	/^  void WriteFormatted(const char *format, Args&&... args) {$/;"	f	class:FileHandle
WriteFrames	src/Audio/ALSAPCMPlayer.cpp	/^ALSAPCMPlayer::WriteFrames(snd_pcm_t &alsa_handle, int16_t *buffer,$/;"	f	class:ALSAPCMPlayer
WriteFrames	src/Audio/ALSAPCMPlayer.hpp	/^  bool WriteFrames(size_t n, bool try_recover_on_error = true) {$/;"	f	class:ALSAPCMPlayer
WriteGeoPoint	src/Device/Driver/EWMicroRecorder.cpp	/^WriteGeoPoint(Port &port, const GeoPoint &value, OperationEnvironment &env)$/;"	f	file:
WriteGeoPoint	src/JSON/GeoWriter.hpp	/^  static inline void WriteGeoPoint(BufferedOutputStream &writer,$/;"	f	namespace:JSON
WriteGeoPointAttributes	src/JSON/GeoWriter.hpp	/^  static inline void WriteGeoPointAttributes(JSON::ObjectWriter &object,$/;"	f	namespace:JSON
WriteHeader	src/Device/Driver/IMI/Protocol/IGC.cpp	/^IMI::WriteHeader(BufferedOutputStream &os, const TDeclaration &decl, IMIBYTE tampered)$/;"	f	class:IMI
WriteHeader	src/IGC/IGCWriter.cpp	/^IGCWriter::WriteHeader(const BrokenDateTime &date_time,$/;"	f	class:IGCWriter
WriteIndent	src/XML/Writer.cpp	/^WriteIndent(BufferedOutputStream &os, unsigned n)$/;"	f	file:
WriteInteger	src/JSON/Writer.hpp	/^  static inline void WriteInteger(BufferedOutputStream &writer, int value) {$/;"	f	namespace:JSON
WriteLE64	src/util/MD5.cpp	/^WriteLE64(void *p, uint64_t value)$/;"	f	file:
WriteLabel	src/Device/Driver/EWMicroRecorder.cpp	/^WriteLabel(Port &port, const char *name, OperationEnvironment &env)$/;"	f	file:
WriteLine	src/IGC/IGCWriter.cpp	/^IGCWriter::WriteLine(const char *a, const TCHAR *b)$/;"	f	class:IGCWriter
WriteLine	src/IGC/IGCWriter.cpp	/^IGCWriter::WriteLine(const char *line)$/;"	f	class:IGCWriter
WriteLine	src/io/TextWriter.hpp	/^  bool WriteLine(const TCHAR *s) {$/;"	f	class:TextWriter
WriteLine	src/io/TextWriter.hpp	/^  bool WriteLine(const char *s) {$/;"	f	class:TextWriter
WriteLong	src/JSON/Writer.hpp	/^  static inline void WriteLong(BufferedOutputStream &writer, long value) {$/;"	f	namespace:JSON
WriteNMEA	src/Device/Descriptor.cpp	/^DeviceDescriptor::WriteNMEA(const TCHAR *line, OperationEnvironment &env)$/;"	f	class:DeviceDescriptor
WriteNMEA	src/Device/Descriptor.cpp	/^DeviceDescriptor::WriteNMEA(const char *line, OperationEnvironment &env)$/;"	f	class:DeviceDescriptor
WriteNavpoint	src/Device/Driver/CAI302/Manage.cpp	/^CAI302Device::WriteNavpoint(unsigned id, const Waypoint &wp,$/;"	f	class:CAI302Device
WriteNull	src/JSON/Writer.hpp	/^  static inline void WriteNull(BufferedOutputStream &writer) {$/;"	f	namespace:JSON
WritePair	src/Device/Driver/EWMicroRecorder.cpp	/^WritePair(Port &port, const char *name, const TCHAR *value,$/;"	f	file:
WritePilot	src/Device/Driver/CAI302/Manage.cpp	/^CAI302Device::WritePilot(unsigned index, const CAI302::Pilot &pilot,$/;"	f	class:CAI302Device
WritePixel	src/ui/canvas/memory/PixelOperations.hpp	/^  inline void WritePixel(pointer p, source_color_type c) const {$/;"	f	struct:BinaryWritePixel
WritePixel	src/ui/canvas/memory/PixelOperations.hpp	/^  inline void WritePixel(pointer p, source_color_type c) const {$/;"	f	struct:PerPixelOperations
WritePixel	src/ui/canvas/memory/PixelOperations.hpp	/^  inline void WritePixel(pointer p, source_color_type c) const {$/;"	f	struct:UnaryWritePixel
WritePixel	src/ui/canvas/memory/PixelOperations.hpp	/^  void WritePixel(pointer p, color_type c) const {$/;"	f	class:TransparentInvertPixelOperations
WritePixel	src/ui/canvas/memory/PixelOperations.hpp	/^  void WritePixel(rpointer p, color_type c) const {$/;"	f	struct:ConditionalWritePixel
WritePixel	src/ui/canvas/memory/PixelTraits.hpp	/^  static void WritePixel(pointer p, color_type c) {$/;"	f	struct:BGRAPixelTraits
WritePixel	src/ui/canvas/memory/PixelTraits.hpp	/^  static void WritePixel(pointer p, color_type c) {$/;"	f	struct:GreyscalePixelTraits
WritePoint	src/Logger/LoggerImpl.cpp	/^LoggerImpl::WritePoint(const NMEAInfo &gps_info)$/;"	f	class:LoggerImpl
WritePortType	src/Profile/DeviceConfig.cpp	/^WritePortType(ProfileMap &map, unsigned n, DeviceConfig::PortType type)$/;"	f	file:
WriteSeeYouFlags	src/Waypoint/CupWriter.cpp	/^WriteSeeYouFlags(BufferedOutputStream &writer, const Waypoint &wp)$/;"	f	file:
WriteSerialNumber	src/Device/Driver/IMI/Protocol/IGC.cpp	/^IMI::WriteSerialNumber(BufferedOutputStream &os, IMIWORD sn)$/;"	f	class:IMI
WriteSignature	src/Device/Driver/IMI/Protocol/IGC.cpp	/^IMI::WriteSignature(BufferedOutputStream &os, const Signature &sig, IMIWORD sn)$/;"	f	class:IMI
WriteString	src/Cloud/Serialiser.cpp	/^Serialiser::WriteString(const char *s)$/;"	f	class:Serialiser
WriteString	src/Cloud/Serialiser.hpp	/^  void WriteString(const std::string &s) {$/;"	f	class:Serialiser
WriteString	src/Device/Driver/CAI302/Protocol.cpp	/^CAI302::WriteString(Port &port, const char *p, OperationEnvironment &env)$/;"	f	class:CAI302
WriteString	src/Device/Driver/IMI/Protocol/IGC.cpp	/^IMI::WriteString(BufferedOutputStream &os, const char *buffer, size_t max_length)$/;"	f	class:IMI
WriteString	src/JSON/Writer.cpp	/^JSON::WriteString(BufferedOutputStream &writer, const char *value)$/;"	f	class:JSON
WriteT	src/Cloud/Serialiser.hpp	/^  void WriteT(const T &value) {$/;"	f	class:Serialiser
WriteTo	src/Logger/GRecord.cpp	/^GRecord::WriteTo(BufferedOutputStream &writer) const$/;"	f	class:GRecord
WriteUnsigned	src/JSON/Writer.hpp	/^  static inline void WriteUnsigned(BufferedOutputStream &writer, unsigned value) {$/;"	f	namespace:JSON
WriteWideToUTF8	src/io/BufferedOutputStream.cxx	/^BufferedOutputStream::WriteWideToUTF8(const wchar_t *src, size_t src_length)$/;"	f	class:BufferedOutputStream
WriteWithChecksum	src/Device/Driver/EW.cpp	/^WriteWithChecksum(Port &port, const char *String)$/;"	f	file:
WriteXMLChar	src/XML/Writer.cpp	/^WriteXMLChar(BufferedOutputStream &os, TCHAR ch)$/;"	f	file:
WriteXMLString	src/XML/Writer.cpp	/^WriteXMLString(BufferedOutputStream &os, const tstring &source)$/;"	f	file:
X	src/Computer/Wind/WindEKF.hpp	/^  float X[3];$/;"	m	class:WindEKF
X11EventQueue	src/ui/event/poll/X11Queue.cpp	/^X11EventQueue::X11EventQueue(EventQueue &_queue)$/;"	f	class:UI::X11EventQueue
X11EventQueue	src/ui/event/poll/X11Queue.hpp	/^class X11EventQueue {$/;"	c	namespace:UI
XAtY	src/Terrain/ScanLine.cpp	/^XAtY(const GridRay &ray, int y)$/;"	f	file:
XCOM760CreateOnPort	src/Device/Driver/XCOM760.cpp	/^XCOM760CreateOnPort(const DeviceConfig &config, Port &com_port)$/;"	f	file:
XCOM760Device	src/Device/Driver/XCOM760.cpp	/^  XCOM760Device(Port &_port):port(_port) {}$/;"	f	class:XCOM760Device
XCOM760Device	src/Device/Driver/XCOM760.cpp	/^class XCOM760Device : public AbstractDevice {$/;"	c	file:
XCONTEST	src/Engine/Contest/Settings.hpp	/^  XCONTEST,$/;"	m	class:Contest
XCONTEST_FREE_HPP	src/Engine/Contest/Solvers/XContestFree.hpp	24;"	d
XCONTEST_TRIANGLE_HPP	src/Engine/Contest/Solvers/XContestTriangle.hpp	24;"	d
XCSCHKLIST	src/Dialogs/dlgChecklist.cpp	36;"	d	file:
XCSDATADIR	src/LocalPath.cpp	64;"	d	file:
XCSOAR_ABORT_INTERSECTION_TEST_HPP	src/Engine/Task/Unordered/AbortIntersectionTest.hpp	25;"	d
XCSOAR_ACCELERATION_HPP	src/NMEA/Acceleration.hpp	25;"	d
XCSOAR_ACTION_INTERFACE_HPP	src/ActionInterface.hpp	25;"	d
XCSOAR_ACTION_WIDGET_HPP	src/Widget/ActionWidget.hpp	25;"	d
XCSOAR_ACTIVE_AIRSPACE_PREDICATE_HPP	src/Airspace/ActivePredicate.hpp	24;"	d
XCSOAR_AIRCRAFT_RENDERER_HPP	src/Renderer/AircraftRenderer.hpp	25;"	d
XCSOAR_AIRSPACES_HPP	src/Engine/Airspace/Airspaces.hpp	24;"	d
XCSOAR_AIRSPACE_AT_POINT_DIALOG_HPP	src/Dialogs/MapItemListDialog.hpp	25;"	d
XCSOAR_AIRSPACE_CLASS_RENDERER_SETTINGS_PANEL_HPP	src/Dialogs/Airspace/AirspaceCRendererSettingsPanel.hpp	25;"	d
XCSOAR_AIRSPACE_COMPUTER_SETTINGS_HPP	src/Airspace/AirspaceComputerSettings.hpp	25;"	d
XCSOAR_AIRSPACE_FORMATTER_HPP	src/Formatter/AirspaceFormatter.hpp	25;"	d
XCSOAR_AIRSPACE_GLUE_HPP	src/Airspace/AirspaceGlue.hpp	25;"	d
XCSOAR_AIRSPACE_LABEL_LIST_HPP	src/Renderer/AirspaceLabelList.hpp	25;"	d
XCSOAR_AIRSPACE_LABEL_RENDERER_HPP	src/Renderer/AirspaceLabelRenderer.hpp	25;"	d
XCSOAR_AIRSPACE_LIST_RENDERER_HPP	src/Renderer/AirspaceListRenderer.hpp	25;"	d
XCSOAR_AIRSPACE_LOOK_HPP	src/Look/AirspaceLook.hpp	25;"	d
XCSOAR_AIRSPACE_PARSER_HPP	src/Airspace/AirspaceParser.hpp	25;"	d
XCSOAR_AIRSPACE_PREVIEW_RENDERER_HPP	src/Renderer/AirspacePreviewRenderer.hpp	25;"	d
XCSOAR_AIRSPACE_RENDERER_HPP	src/Renderer/AirspaceRenderer.hpp	25;"	d
XCSOAR_AIRSPACE_RENDERER_SETTINGS_HPP	src/Renderer/AirspaceRendererSettings.hpp	25;"	d
XCSOAR_AIRSPACE_ROUTE_HPP	src/Engine/Route/AirspaceRoute.hpp	24;"	d
XCSOAR_AIRSPACE_WARNING_COPY_HPP	src/Airspace/AirspaceWarningCopy.hpp	25;"	d
XCSOAR_AIRSPACE_WARNING_DIALOG_HPP	src/Dialogs/Airspace/AirspaceWarningDialog.hpp	25;"	d
XCSOAR_AIRSPACE_WARNING_MONITOR_HPP	src/Monitor/AirspaceWarningMonitor.hpp	25;"	d
XCSOAR_ALL_MONITORS_HPP	src/Monitor/AllMonitors.hpp	25;"	d
XCSOAR_ALTERNATE_LIST_HPP	src/Engine/Task/Unordered/AlternateList.hpp	24;"	d
XCSOAR_ALTERNATE_POINT_HPP	src/Engine/Task/Unordered/AlternatePoint.hpp	24;"	d
XCSOAR_ALTITUDE_INFO_PANEL_HPP	src/InfoBoxes/Panel/AltitudeInfo.hpp	25;"	d
XCSOAR_ALTITUDE_REFERENCE_HPP	src/Geo/AltitudeReference.hpp	24;"	d
XCSOAR_ALTITUDE_SETUP_PANEL_HPP	src/InfoBoxes/Panel/AltitudeSetup.hpp	25;"	d
XCSOAR_ALTITUDE_SIMULATOR_PANEL_HPP	src/InfoBoxes/Panel/AltitudeSimulator.hpp	25;"	d
XCSOAR_ANALYSIS_DIALOG_HPP	src/Dialogs/dlgAnalysis.hpp	25;"	d
XCSOAR_ANDROID_BITMAP_HPP	src/Android/Bitmap.hpp	25;"	d
XCSOAR_ANDROID_BLUETOOTH_HELPER_HPP	src/Android/BluetoothHelper.hpp	25;"	d
XCSOAR_ANDROID_BMP085_DEVICE_HPP	src/Android/BMP085Device.hpp	25;"	d
XCSOAR_ANDROID_BMP085_LISTENER_HPP	src/Android/BMP085Listener.hpp	25;"	d
XCSOAR_ANDROID_CONTEXT_HPP	src/Android/Context.hpp	25;"	d
XCSOAR_ANDROID_DOWNLOAD_MANAGER_HPP	src/Android/DownloadManager.hpp	25;"	d
XCSOAR_ANDROID_ENVIRONMENT_HPP	src/Android/Environment.hpp	25;"	d
XCSOAR_ANDROID_GLIDER_LINK_HPP	src/Android/GliderLink.hpp	27;"	d
XCSOAR_ANDROID_I2CBARO_DEVICE_HPP	src/Android/I2CbaroDevice.hpp	25;"	d
XCSOAR_ANDROID_I2CBARO_LISTENER_HPP	src/Android/I2CbaroListener.hpp	25;"	d
XCSOAR_ANDROID_INTERNAL_SENSORS_HPP	src/Android/InternalSensors.hpp	25;"	d
XCSOAR_ANDROID_IOIOHELPER_HPP	src/Android/IOIOHelper.hpp	25;"	d
XCSOAR_ANDROID_LE_SCAN_CALLBACK_HPP	src/Android/LeScanCallback.hpp	25;"	d
XCSOAR_ANDROID_MAIN_HPP	src/Android/Main.hpp	25;"	d
XCSOAR_ANDROID_NATIVE_BMP085_LISTENER_HPP	src/Android/NativeBMP085Listener.hpp	25;"	d
XCSOAR_ANDROID_NATIVE_I2CBARO_LISTENER_HPP	src/Android/NativeI2CbaroListener.hpp	25;"	d
XCSOAR_ANDROID_NATIVE_INPUT_LISTENER_HPP	src/Android/NativeInputListener.hpp	25;"	d
XCSOAR_ANDROID_NATIVE_LE_SCAN_CALLBACK_HPP	src/Android/NativeLeScanCallback.hpp	25;"	d
XCSOAR_ANDROID_NATIVE_NUNCHUCK_LISTENER_HPP	src/Android/NativeNunchuckListener.hpp	25;"	d
XCSOAR_ANDROID_NATIVE_PORT_LISTENER_HPP	src/Android/NativePortListener.hpp	25;"	d
XCSOAR_ANDROID_NATIVE_VIEW_HPP	src/Android/NativeView.hpp	25;"	d
XCSOAR_ANDROID_NATIVE_VOLTAGE_LISTENER_HPP	src/Android/NativeVoltageListener.hpp	25;"	d
XCSOAR_ANDROID_NOOK_HPP	src/Android/Nook.hpp	25;"	d
XCSOAR_ANDROID_NUNCHUCK_DEVICE_HPP	src/Android/NunchuckDevice.hpp	25;"	d
XCSOAR_ANDROID_NUNCHUCK_LISTENER_HPP	src/Android/NunchuckListener.hpp	25;"	d
XCSOAR_ANDROID_PORT_BRIDGE_HPP	src/Android/PortBridge.hpp	25;"	d
XCSOAR_ANDROID_PRODUCT_HPP	src/Android/Product.hpp	25;"	d
XCSOAR_ANDROID_SOUND_UTIL_HPP	src/Android/SoundUtil.hpp	25;"	d
XCSOAR_ANDROID_TEXT_UTIL_HPP	src/Android/TextUtil.hpp	25;"	d
XCSOAR_ANDROID_VIBRATOR_HPP	src/Android/Vibrator.hpp	25;"	d
XCSOAR_ANDROID_VOLTAGE_DEVICE_HPP	src/Android/VoltageDevice.hpp	25;"	d
XCSOAR_ANDROID_VOLTAGE_LISTENER_HPP	src/Android/VoltageListener.hpp	25;"	d
XCSOAR_ANGLE_FORMATTER_HPP	src/Formatter/AngleFormatter.hpp	25;"	d
XCSOAR_ANGLE_RANGE_HPP	src/Math/ARange.hpp	25;"	d
XCSOAR_APPLE_INTERNAL_SENSORS_HPP	src/Apple/InternalSensors.hpp	25;"	d
XCSOAR_APPLY_EXTERNAL_SETTINGS_HPP	src/ApplyExternalSettings.hpp	25;"	d
XCSOAR_APPLY_VEGA_SWITCHES_HPP	src/ApplyVegaSwitches.hpp	25;"	d
XCSOAR_ARROW_PAGER_WIDGET_HPP	src/Widget/ArrowPagerWidget.hpp	25;"	d
XCSOAR_ASIO_THREAD_HPP	src/io/async/AsioThread.hpp	25;"	d
XCSOAR_ASYNC_JOB_RUNNER_HPP	src/Job/Async.hpp	25;"	d
XCSOAR_ATC_REFERENCE_PANEL_HPP	src/InfoBoxes/Panel/ATCReference.hpp	25;"	d
XCSOAR_ATMOSPHERE_AIRDENSITY_H	src/Atmosphere/AirDensity.hpp	25;"	d
XCSOAR_ATMOSPHERE_CUSONDE_HPP	src/Atmosphere/CuSonde.hpp	25;"	d
XCSOAR_ATMOSPHERE_PRESSURE_H	src/Atmosphere/Pressure.hpp	25;"	d
XCSOAR_ATMOSPHERE_TEMPERATURE_HPP	src/Atmosphere/Temperature.hpp	25;"	d
XCSOAR_ATTITUDE_HPP	src/NMEA/Attitude.hpp	25;"	d
XCSOAR_AUDIO_ALGORITHMS_HPP	src/Audio/AudioAlgorithms.hpp	25;"	d
XCSOAR_AUDIO_ALSA_ENV_HPP	src/Audio/ALSAEnv.hpp	25;"	d
XCSOAR_AUDIO_ALSA_PCM_PLAYER_HPP	src/Audio/ALSAPCMPlayer.hpp	25;"	d
XCSOAR_AUDIO_ANDROID_PCM_PLAYER_HPP	src/Audio/AndroidPCMPlayer.hpp	25;"	d
XCSOAR_AUDIO_FEATURES_HPP	src/Audio/Features.hpp	31;"	d
XCSOAR_AUDIO_GLOBAL_PCM_MIXER_HPP	src/Audio/GlobalPCMMixer.hpp	25;"	d
XCSOAR_AUDIO_GLOBAL_PCM_RESOURCE_PLAYER_HPP	src/Audio/GlobalPCMResourcePlayer.hpp	25;"	d
XCSOAR_AUDIO_GLOBAL_VOLUME_CONTROLLER_HPP	src/Audio/GlobalVolumeController.hpp	25;"	d
XCSOAR_AUDIO_MIXER_PCM_PLAYER_HPP	src/Audio/MixerPCMPlayer.hpp	25;"	d
XCSOAR_AUDIO_PCM_BUFFER_DATA_SOURCE_HPP	src/Audio/PCMBufferDataSource.hpp	25;"	d
XCSOAR_AUDIO_PCM_DATA_SOURCE_HPP	src/Audio/PCMDataSource.hpp	25;"	d
XCSOAR_AUDIO_PCM_MIXER_DATA_SOURCE_HPP	src/Audio/PCMMixerDataSource.hpp	25;"	d
XCSOAR_AUDIO_PCM_MIXER_HPP	src/Audio/PCMMixer.hpp	25;"	d
XCSOAR_AUDIO_PCM_PLAYER_FACTORY_HPP	src/Audio/PCMPlayerFactory.hpp	25;"	d
XCSOAR_AUDIO_PCM_PLAYER_HPP	src/Audio/PCMPlayer.hpp	25;"	d
XCSOAR_AUDIO_PCM_RESOURCE_PLAYER_HPP	src/Audio/PCMResourcePlayer.hpp	25;"	d
XCSOAR_AUDIO_PCM_SYNTHESISER_HPP	src/Audio/PCMSynthesiser.hpp	25;"	d
XCSOAR_AUDIO_SDL_PCM_PLAYER_HPP	src/Audio/SDLPCMPlayer.hpp	25;"	d
XCSOAR_AUDIO_SLES_INIT_HPP	src/Audio/SLES/Init.hpp	33;"	d
XCSOAR_AUDIO_SOUND_HPP	src/Audio/Sound.hpp	25;"	d
XCSOAR_AUDIO_TONE_SYNTHESISER_HPP	src/Audio/ToneSynthesiser.hpp	25;"	d
XCSOAR_AUDIO_VARIO_GLUE_HPP	src/Audio/VarioGlue.hpp	25;"	d
XCSOAR_AUDIO_VARIO_SYNTHESISER_HPP	src/Audio/VarioSynthesiser.hpp	25;"	d
XCSOAR_AUDIO_VOLUME_CONTROLLER_HPP	src/Audio/VolumeController.hpp	25;"	d
XCSOAR_AUTO_FONT_HPP	src/Look/AutoFont.hpp	25;"	d
XCSOAR_AUTO_QNH_HPP	src/Computer/AutoQNH.hpp	25;"	d
XCSOAR_AVAILABLE_FILE_HPP	src/Repository/AvailableFile.hpp	25;"	d
XCSOAR_AVERAGE_VARIO_COMPUTER_HPP	src/Computer/AverageVarioComputer.hpp	25;"	d
XCSOAR_BACKGROUND_RENDERER_HPP	src/Renderer/BackgroundRenderer.hpp	25;"	d
XCSOAR_BAROGRAPH_RENDERER_HPP	src/Renderer/BarographRenderer.hpp	25;"	d
XCSOAR_BASE_BLACKBOARD_HPP	src/Blackboard/BaseBlackboard.hpp	25;"	d
XCSOAR_BATTERY_TIMER_HPP	src/BatteryTimer.hpp	25;"	d
XCSOAR_BEST_CRUISE_ARROW_RENDERER_HPP	src/Renderer/BestCruiseArrowRenderer.hpp	25;"	d
XCSOAR_BIG_THERMAL_ASSISTANT_WIDGET_HPP	src/Gauge/BigThermalAssistantWidget.hpp	25;"	d
XCSOAR_BIG_THERMAL_ASSISTENT_WINDOW_HPP	src/Gauge/BigThermalAssistantWindow.hpp	25;"	d
XCSOAR_BITMAP_BUTTON_RENDERER_HPP	src/Renderer/BitmapButtonRenderer.hpp	25;"	d
XCSOAR_BLACKBOARD_LISTENER_HPP	src/Blackboard/BlackboardListener.hpp	25;"	d
XCSOAR_BLUEFLYVARIO_INTERNAL_HPP	src/Device/Driver/BlueFly/Internal.hpp	25;"	d
XCSOAR_BOOST_FLAT_BOUNDING_BOX_HPP	src/Geo/Flat/BoostFlatBoundingBox.hpp	24;"	d
XCSOAR_BOOST_FLAT_GEO_POINT_HPP	src/Geo/Flat/BoostFlatGeoPoint.hpp	24;"	d
XCSOAR_BOOST_FLAT_POINT_HPP	src/Geo/Flat/BoostFlatPoint.hpp	24;"	d
XCSOAR_BOOST_GEO_POINT_HPP	src/Geo/Boost/GeoPoint.hpp	24;"	d
XCSOAR_BOOST_RANGE_BOX_HPP	src/Geo/Boost/RangeBox.hpp	25;"	d
XCSOAR_BRESENHAM_HPP	src/ui/canvas/memory/Bresenham.hpp	25;"	d
XCSOAR_BROKEN_DATE_HPP	src/time/BrokenDate.hpp	25;"	d
XCSOAR_BROKEN_DATE_TIME_HPP	src/time/BrokenDateTime.hpp	25;"	d
XCSOAR_BROKEN_TIME_HPP	src/time/BrokenTime.hpp	25;"	d
XCSOAR_BUTTON_LOOK_HPP	src/Look/ButtonLook.hpp	25;"	d
XCSOAR_BUTTON_PANEL_WIDGET_HPP	src/Widget/ButtonPanelWidget.hpp	25;"	d
XCSOAR_BUTTON_RENDERER_HPP	src/Renderer/ButtonRenderer.hpp	25;"	d
XCSOAR_BUTTON_WIDGET_HPP	src/Widget/ButtonWidget.hpp	25;"	d
XCSOAR_BYTE_SIZE_FORMATTER_HPP	src/Formatter/ByteSizeFormatter.hpp	25;"	d
XCSOAR_CACHED_RENDERER_HPP	src/Renderer/TransparentRendererCache.hpp	25;"	d
XCSOAR_CACHED_TOPOGRAPHY_RENDERER_HPP	src/Topography/CachedTopographyRenderer.hpp	25;"	d
XCSOAR_CAI302_INTERNAL_HPP	src/Device/Driver/CAI302/Internal.hpp	25;"	d
XCSOAR_CAI302_POCKET_NAV_HPP	src/Device/Driver/CAI302/PocketNav.hpp	25;"	d
XCSOAR_CAI302_PROTOCOL_HPP	src/Device/Driver/CAI302/Protocol.hpp	25;"	d
XCSOAR_CAI302_UNITS_EDITOR_HPP	src/Dialogs/Device/CAI302/UnitsEditor.hpp	25;"	d
XCSOAR_CAI302_WAYPOINT_UPLOADER_HPP	src/Dialogs/Device/CAI302/WaypointUploader.hpp	25;"	d
XCSOAR_CALCULATION_THREAD_HPP	src/CalculationThread.hpp	25;"	d
XCSOAR_CALLBACK_WIDGET_HPP	src/Widget/CallbackWidget.hpp	25;"	d
XCSOAR_CATMULL_ROM_INTERPOLATOR_HPP	src/Replay/CatmullRomInterpolator.hpp	25;"	d
XCSOAR_CHARACTER_BUTTON_HPP	src/Form/CharacterButton.hpp	25;"	d
XCSOAR_CHART_RENDERER_HPP	src/Renderer/ChartRenderer.hpp	25;"	d
XCSOAR_CHECK_BOX_LOOK_HPP	src/Look/CheckBoxLook.hpp	25;"	d
XCSOAR_CIRCLING_COMPUTER_HPP	src/Computer/CirclingComputer.hpp	25;"	d
XCSOAR_CIRCLING_INFO_HPP	src/NMEA/CirclingInfo.hpp	25;"	d
XCSOAR_CIRCLING_WIND_HPP	src/Computer/Wind/CirclingWind.hpp	25;"	d
XCSOAR_CLIMB_CHART_RENDERER_HPP	src/Renderer/ClimbChartRenderer.hpp	25;"	d
XCSOAR_CLIMB_HISTORY_HPP	src/NMEA/ClimbHistory.hpp	25;"	d
XCSOAR_CLIMB_INFO_HPP	src/NMEA/ClimbInfo.hpp	25;"	d
XCSOAR_CLIMB_PERCENT_LOOK_HPP	src/Look/ClimbPercentLook.hpp	25;"	d
XCSOAR_CLOUD_CLIENT_HPP	src/Cloud/Client.hpp	25;"	d
XCSOAR_CLOUD_DATA_HPP	src/Cloud/Data.hpp	25;"	d
XCSOAR_CLOUD_DUMP_HPP	src/Cloud/Dump.hpp	25;"	d
XCSOAR_CLOUD_SENDER_HPP	src/Cloud/Sender.hpp	25;"	d
XCSOAR_CLOUD_THERMAL_HPP	src/Cloud/Thermal.hpp	25;"	d
XCSOAR_COLOR_BUTTON_RENDERER_HPP	src/Renderer/ColorButtonRenderer.hpp	25;"	d
XCSOAR_COLOR_LIST_DIALOG_HPP	src/Dialogs/ColorListDialog.hpp	25;"	d
XCSOAR_COMPARE_PROJECTION_HPP	src/Projection/CompareProjection.hpp	25;"	d
XCSOAR_COMPASS_RENDERER_HPP	src/Renderer/CompassRenderer.hpp	25;"	d
XCSOAR_COMPATIBILITY_PATH_H	src/Compatibility/path.h	25;"	d
XCSOAR_COMPAT_GDI_H	src/Compatibility/gdi.h	32;"	d
XCSOAR_COMPONENTS_HPP	src/Components.hpp	25;"	d
XCSOAR_COMPUTER_PROFILE_HPP	src/Profile/ComputerProfile.hpp	25;"	d
XCSOAR_COMPUTER_SETTINGS_HPP	src/Computer/Settings.hpp	25;"	d
XCSOAR_CONDITION_MONITORS_HPP	src/Computer/ConditionMonitor/ConditionMonitors.hpp	25;"	d
XCSOAR_CONDITION_MONITOR_AAT_TIME_HPP	src/Computer/ConditionMonitor/ConditionMonitorAATTime.hpp	25;"	d
XCSOAR_CONDITION_MONITOR_FINAL_GLIDE_HPP	src/Computer/ConditionMonitor/ConditionMonitorFinalGlide.hpp	25;"	d
XCSOAR_CONDITION_MONITOR_GLIDE_TERRAIN_HPP	src/Computer/ConditionMonitor/ConditionMonitorGlideTerrain.hpp	25;"	d
XCSOAR_CONDITION_MONITOR_HPP	src/Computer/ConditionMonitor/ConditionMonitor.hpp	25;"	d
XCSOAR_CONDITION_MONITOR_LANDABLE_REACHABLE_HPP	src/Computer/ConditionMonitor/ConditionMonitorLandableReachable.hpp	25;"	d
XCSOAR_CONDITION_MONITOR_SUNSET_HPP	src/Computer/ConditionMonitor/ConditionMonitorSunset.hpp	25;"	d
XCSOAR_CONDITION_MONITOR_WIND_HPP	src/Computer/ConditionMonitor/ConditionMonitorWind.hpp	25;"	d
XCSOAR_CONFIG_REGISTRY_HPP	src/Config/Registry.hpp	25;"	d
XCSOAR_CONSOLE_OPERATION_ENVIRONMENT_HPP	src/Operation/ConsoleOperationEnvironment.hpp	25;"	d
XCSOAR_CONTAINER_WIDGET_HPP	src/Widget/ContainerWidget.hpp	25;"	d
XCSOAR_CONTEST_CAST_HPP	src/Engine/Contest/Solvers/Cast.hpp	24;"	d
XCSOAR_CONTEST_COMPUTER_HPP	src/Computer/ContestComputer.hpp	25;"	d
XCSOAR_CONTEST_DMST_QUAD_HPP	src/Engine/Contest/Solvers/DMStQuad.hpp	24;"	d
XCSOAR_CONTEST_PROFILE_HPP	src/Profile/ContestProfile.hpp	25;"	d
XCSOAR_CONTEST_SETTINGS_HPP	src/Engine/Contest/Settings.hpp	24;"	d
XCSOAR_CONTEST_TRACE_HPP	src/Engine/Contest/ContestTrace.hpp	24;"	d
XCSOAR_CONVERT_STRING_HPP	src/util/ConvertString.hpp	25;"	d
XCSOAR_CRC_HPP	src/util/CRC.hpp	25;"	d
XCSOAR_CREATE_WINDOW_WIDGET_HPP	src/Widget/CreateWindowWidget.hpp	25;"	d
XCSOAR_CROSS_SECTION_WIDGET_HPP	src/CrossSection/CrossSectionWidget.hpp	25;"	d
XCSOAR_CSV_LINE_HPP	src/io/CSVLine.hpp	25;"	d
XCSOAR_CU_COMPUTER_HPP	src/Computer/CuComputer.hpp	25;"	d
XCSOAR_CU_RENDERER_HPP	src/Renderer/CuRenderer.hpp	25;"	d
XCSOAR_CYLINDER_ZONE_EDIT_WIDGET_HPP	src/Dialogs/Task/Widgets/CylinderZoneEditWidget.hpp	25;"	d
XCSOAR_DATA_FIELD_ANGLE_HPP	src/Form/DataField/Angle.hpp	25;"	d
XCSOAR_DATA_FIELD_BASE_HPP	src/Form/DataField/Base.hpp	25;"	d
XCSOAR_DATA_FIELD_BOOLEAN_HPP	src/Form/DataField/Boolean.hpp	25;"	d
XCSOAR_DATA_FIELD_COMBO_LIST_HPP	src/Form/DataField/ComboList.hpp	25;"	d
XCSOAR_DATA_FIELD_DIALOG_HPP	src/Dialogs/DataField.hpp	25;"	d
XCSOAR_DATA_FIELD_ENUM_HPP	src/Form/DataField/Enum.hpp	25;"	d
XCSOAR_DATA_FIELD_FLOAT_HPP	src/Form/DataField/Float.hpp	25;"	d
XCSOAR_DATA_FIELD_GEO_POINT_HPP	src/Form/DataField/GeoPoint.hpp	25;"	d
XCSOAR_DATA_FIELD_INTEGER_HPP	src/Form/DataField/Integer.hpp	25;"	d
XCSOAR_DATA_FIELD_LISTENER_HPP	src/Form/DataField/Listener.hpp	25;"	d
XCSOAR_DATA_FIELD_NUMBER_HPP	src/Form/DataField/Number.hpp	25;"	d
XCSOAR_DATA_FIELD_PREFIX_HPP	src/Form/DataField/Prefix.hpp	25;"	d
XCSOAR_DATA_FIELD_ROUGH_TIME_HPP	src/Form/DataField/RoughTime.hpp	25;"	d
XCSOAR_DATA_FIELD_STRING_HPP	src/Form/DataField/String.hpp	25;"	d
XCSOAR_DATA_FIELD_TIME_HPP	src/Form/DataField/Time.hpp	25;"	d
XCSOAR_DATA_GLOBALS_HPP	src/DataGlobals.hpp	25;"	d
XCSOAR_DEFAULT_FONTS_HPP	src/Look/DefaultFonts.hpp	25;"	d
XCSOAR_DELTA_TIME_HPP	src/time/DeltaTime.hpp	25;"	d
XCSOAR_DERIVE_WINDOW_FILTER_HPP	src/Math/DifferentialWindowFilter.hpp	24;"	d
XCSOAR_DEVICE_ANDROID_BLUETOOTH_PORT_HPP	src/Device/Port/AndroidBluetoothPort.hpp	25;"	d
XCSOAR_DEVICE_ANDROID_IOIO_UART_PORT_HPP	src/Device/Port/AndroidIOIOUartPort.hpp	25;"	d
XCSOAR_DEVICE_ANDROID_PORT_HPP	src/Device/Port/AndroidPort.hpp	25;"	d
XCSOAR_DEVICE_BUFFERED_PORT_HPP	src/Device/Port/BufferedPort.hpp	25;"	d
XCSOAR_DEVICE_CONFIGURED_PORT_HPP	src/Device/Port/ConfiguredPort.hpp	25;"	d
XCSOAR_DEVICE_CONFIG_HPP	src/Device/Config.hpp	25;"	d
XCSOAR_DEVICE_DECLARATION_HPP	src/Device/Declaration.hpp	25;"	d
XCSOAR_DEVICE_DESCRIPTOR_HPP	src/Device/Descriptor.hpp	25;"	d
XCSOAR_DEVICE_DEVICE_HPP	src/Device/device.hpp	25;"	d
XCSOAR_DEVICE_DISPATCHER_HPP	src/Device/Dispatcher.hpp	25;"	d
XCSOAR_DEVICE_DRIVER_AIRCONTROLDISPLAY_HPP	src/Device/Driver/AirControlDisplay.hpp	25;"	d
XCSOAR_DEVICE_DRIVER_ALTAIRPRO_HPP	src/Device/Driver/AltairPro.hpp	25;"	d
XCSOAR_DEVICE_DRIVER_ATR833_HPP	src/Device/Driver/ATR833.hpp	25;"	d
XCSOAR_DEVICE_DRIVER_BLUEFLY_HPP	src/Device/Driver/BlueFlyVario.hpp	25;"	d
XCSOAR_DEVICE_DRIVER_BORGELTB50_HPP	src/Device/Driver/BorgeltB50.hpp	25;"	d
XCSOAR_DEVICE_DRIVER_CAI302_HPP	src/Device/Driver/CAI302.hpp	25;"	d
XCSOAR_DEVICE_DRIVER_CAIGPSNAV_HPP	src/Device/Driver/CaiGpsNav.hpp	25;"	d
XCSOAR_DEVICE_DRIVER_CAILNAV_HPP	src/Device/Driver/CaiLNav.hpp	25;"	d
XCSOAR_DEVICE_DRIVER_CONDOR_HPP	src/Device/Driver/Condor.hpp	25;"	d
XCSOAR_DEVICE_DRIVER_CPROBE_HPP	src/Device/Driver/CProbe.hpp	25;"	d
XCSOAR_DEVICE_DRIVER_EWMICRORECORDER_HPP	src/Device/Driver/EWMicroRecorder.hpp	25;"	d
XCSOAR_DEVICE_DRIVER_EW_HPP	src/Device/Driver/EW.hpp	25;"	d
XCSOAR_DEVICE_DRIVER_EYE_HPP	src/Device/Driver/Eye.hpp	25;"	d
XCSOAR_DEVICE_DRIVER_FLARM_HPP	src/Device/Driver/FLARM.hpp	25;"	d
XCSOAR_DEVICE_DRIVER_FLYMASTERF1_HPP	src/Device/Driver/FlymasterF1.hpp	25;"	d
XCSOAR_DEVICE_DRIVER_FLYNET_HPP	src/Device/Driver/FlyNet.hpp	25;"	d
XCSOAR_DEVICE_DRIVER_FLYTEC_HPP	src/Device/Driver/Flytec.hpp	25;"	d
XCSOAR_DEVICE_DRIVER_GENERIC_HPP	src/Device/Driver/Generic.hpp	25;"	d
XCSOAR_DEVICE_DRIVER_HPP	src/Device/Driver.hpp	25;"	d
XCSOAR_DEVICE_DRIVER_ILEC_HPP	src/Device/Driver/ILEC.hpp	25;"	d
XCSOAR_DEVICE_DRIVER_KRT2_HPP	src/Device/Driver/KRT2.hpp	25;"	d
XCSOAR_DEVICE_DRIVER_LEONARDO_HPP	src/Device/Driver/Leonardo.hpp	25;"	d
XCSOAR_DEVICE_DRIVER_LEVIL_HPP	src/Device/Driver/LevilAHRS_G.hpp	25;"	d
XCSOAR_DEVICE_DRIVER_LX_CONVERT_HPP	src/Device/Driver/LX/Convert.hpp	25;"	d
XCSOAR_DEVICE_DRIVER_LX_HPP	src/Device/Driver/LX.hpp	25;"	d
XCSOAR_DEVICE_DRIVER_LX_INTERNAL_HPP	src/Device/Driver/LX/Internal.hpp	25;"	d
XCSOAR_DEVICE_DRIVER_LX_LX1600_HPP	src/Device/Driver/LX/LX1600.hpp	25;"	d
XCSOAR_DEVICE_DRIVER_LX_LXN_HPP	src/Device/Driver/LX/LXN.hpp	25;"	d
XCSOAR_DEVICE_DRIVER_LX_NANO_DECLARE_HPP	src/Device/Driver/LX/NanoDeclare.hpp	25;"	d
XCSOAR_DEVICE_DRIVER_LX_NANO_HPP	src/Device/Driver/LX/NanoProtocol.hpp	25;"	d
XCSOAR_DEVICE_DRIVER_LX_NANO_LOGGER_HPP	src/Device/Driver/LX/NanoLogger.hpp	25;"	d
XCSOAR_DEVICE_DRIVER_LX_PROTOCOL_HPP	src/Device/Driver/LX/Protocol.hpp	25;"	d
XCSOAR_DEVICE_DRIVER_LX_V7_HPP	src/Device/Driver/LX/V7.hpp	25;"	d
XCSOAR_DEVICE_DRIVER_NMEAOUT_HPP	src/Device/Driver/NmeaOut.hpp	25;"	d
XCSOAR_DEVICE_DRIVER_OPENVARIO_HPP	src/Device/Driver/OpenVario.hpp	25;"	d
XCSOAR_DEVICE_DRIVER_POSIGRAPH_HPP	src/Device/Driver/PosiGraph.hpp	25;"	d
XCSOAR_DEVICE_DRIVER_THERMALEXPRESS_HPP	src/Device/Driver/ThermalExpress.hpp	22;"	d
XCSOAR_DEVICE_DRIVER_VAULTER_HPP	src/Device/Driver/Vaulter.hpp	25;"	d
XCSOAR_DEVICE_DRIVER_VEGA_HPP	src/Device/Driver/Vega.hpp	25;"	d
XCSOAR_DEVICE_DRIVER_VOLKSLOGGER_DATABASE_HPP	src/Device/Driver/Volkslogger/Database.hpp	25;"	d
XCSOAR_DEVICE_DRIVER_VOLKSLOGGER_HPP	src/Device/Driver/Volkslogger.hpp	25;"	d
XCSOAR_DEVICE_DRIVER_VOLKSLOGGER_INTERNAL_HPP	src/Device/Driver/Volkslogger/Internal.hpp	25;"	d
XCSOAR_DEVICE_DRIVER_VOLKSLOGGER_PROTOCOL_HPP	src/Device/Driver/Volkslogger/Protocol.hpp	25;"	d
XCSOAR_DEVICE_DRIVER_WESTERBOER_HPP	src/Device/Driver/Westerboer.hpp	25;"	d
XCSOAR_DEVICE_DRIVER_XCOM760_HPP	src/Device/Driver/XCOM760.hpp	25;"	d
XCSOAR_DEVICE_DRIVER_XCTRACER_HPP	src/Device/Driver/XCTracer.hpp	25;"	d
XCSOAR_DEVICE_DRIVER_XCVARIOS21_HPP	src/Device/Driver/XCVario.hpp	25;"	d
XCSOAR_DEVICE_DRIVER_ZANDER_HPP	src/Device/Driver/Zander.hpp	25;"	d
XCSOAR_DEVICE_DUMP_PORT_HPP	src/Device/Port/DumpPort.hpp	25;"	d
XCSOAR_DEVICE_EDIT_WIDGET_HPP	src/Dialogs/Device/DeviceEditWidget.hpp	25;"	d
XCSOAR_DEVICE_EDIT_WIDGET_HPP	src/Dialogs/Plane/PolarShapeEditWidget.hpp	25;"	d
XCSOAR_DEVICE_ENUMERATOR_HPP	src/Device/Port/TTYEnumerator.hpp	25;"	d
XCSOAR_DEVICE_FEATURES_HPP	src/Device/Features.hpp	25;"	d
XCSOAR_DEVICE_INTERNAL_HPP	src/Device/Util/NMEAWriter.hpp	30;"	d
XCSOAR_DEVICE_K6BT_PORT_HPP	src/Device/Port/K6BtPort.hpp	25;"	d
XCSOAR_DEVICE_LINE_HANDLER_HPP	src/Device/Util/LineHandler.hpp	25;"	d
XCSOAR_DEVICE_LINE_SPLITTER_HPP	src/Device/Util/LineSplitter.hpp	25;"	d
XCSOAR_DEVICE_LIST_DIALOG_HPP	src/Dialogs/Device/DeviceListDialog.hpp	25;"	d
XCSOAR_DEVICE_LIST_HPP	src/Device/MultipleDevices.hpp	30;"	d
XCSOAR_DEVICE_NULL_PORT_HPP	src/Device/Port/NullPort.hpp	25;"	d
XCSOAR_DEVICE_PARSER_HPP	src/Device/Parser.hpp	25;"	d
XCSOAR_DEVICE_PORT_HPP	src/Device/Port/Port.hpp	25;"	d
XCSOAR_DEVICE_PORT_LISTENER_HPP	src/Device/Port/Listener.hpp	25;"	d
XCSOAR_DEVICE_PORT_NMEA_READER_HPP	src/Device/Util/NMEAReader.hpp	25;"	d
XCSOAR_DEVICE_PORT_STATE_HPP	src/Device/Port/State.hpp	25;"	d
XCSOAR_DEVICE_RECORDED_FLIGHT_HPP	src/Device/RecordedFlight.hpp	25;"	d
XCSOAR_DEVICE_REGISTRY_HPP	src/Device/Register.hpp	30;"	d
XCSOAR_DEVICE_SERIAL_PORT_HPP	src/Device/Port/SerialPort.hpp	25;"	d
XCSOAR_DEVICE_SETTINGS_MAP_HPP	src/Device/SettingsMap.hpp	25;"	d
XCSOAR_DEVICE_SIMULATOR_HPP	src/Device/Simulator.hpp	25;"	d
XCSOAR_DEVICE_TCP_CLIENT_PORT_HPP	src/Device/Port/TCPClientPort.hpp	25;"	d
XCSOAR_DEVICE_TCP_PORT_HPP	src/Device/Port/TCPPort.hpp	25;"	d
XCSOAR_DEVICE_TTY_PORT_HPP	src/Device/Port/TTYPort.hpp	25;"	d
XCSOAR_DEVICE_UDP_PORT_HPP	src/Device/Port/UDPPort.hpp	25;"	d
XCSOAR_DIALOGS_AIRSPACE_HPP	src/Dialogs/Airspace/Airspace.hpp	25;"	d
XCSOAR_DIALOGS_BLUEFLY_HPP	src/Dialogs/Device/BlueFly/BlueFlyDialogs.hpp	25;"	d
XCSOAR_DIALOGS_COMBO_PICKER_HPP	src/Dialogs/ComboPicker.hpp	25;"	d
XCSOAR_DIALOGS_ERROR_MESSAGE_HPP	src/Dialogs/Error.hpp	25;"	d
XCSOAR_DIALOGS_FILE_MANAGER_HPP	src/Dialogs/FileManager.hpp	25;"	d
XCSOAR_DIALOGS_FILE_PICKER_HPP	src/Dialogs/FilePicker.hpp	25;"	d
XCSOAR_DIALOGS_GEOPOINT_ENTRY_HPP	src/Dialogs/GeoPointEntry.hpp	25;"	d
XCSOAR_DIALOGS_H	src/Dialogs/Dialogs.h	25;"	d
XCSOAR_DIALOGS_LIST_PICKER_HPP	src/Dialogs/ListPicker.hpp	25;"	d
XCSOAR_DIALOGS_LOCKSCREEN_HPP	src/Dialogs/LockScreen.hpp	25;"	d
XCSOAR_DIALOGS_MAP_OVERLAY_WIDGET_HPP	src/Dialogs/Weather/MapOverlayWidget.hpp	25;"	d
XCSOAR_DIALOGS_MESSAGE_HPP	src/Dialogs/Message.hpp	25;"	d
XCSOAR_DIALOGS_NUMBER_ENTRY_HPP	src/Dialogs/NumberEntry.hpp	25;"	d
XCSOAR_DIALOGS_PLANES_HPP	src/Dialogs/Plane/PlaneDialogs.hpp	25;"	d
XCSOAR_DIALOGS_TASK_HPP	src/Dialogs/Task/TaskDialogs.hpp	25;"	d
XCSOAR_DIALOGS_TIME_ENTRY_HPP	src/Dialogs/TimeEntry.hpp	25;"	d
XCSOAR_DIALOGS_TRAFFIC_HPP	src/Dialogs/Traffic/TrafficDialogs.hpp	25;"	d
XCSOAR_DIALOGS_VEGA_HPP	src/Dialogs/Device/Vega/VegaDialogs.hpp	25;"	d
XCSOAR_DIALOGS_WAYPOINT_HPP	src/Dialogs/Waypoint/WaypointDialogs.hpp	25;"	d
XCSOAR_DIALOGS_WEATHER_HPP	src/Dialogs/Weather/WeatherDialog.hpp	25;"	d
XCSOAR_DIALOGS_WEATHER_NOAA_DETAILS_HPP	src/Dialogs/Weather/NOAADetails.hpp	25;"	d
XCSOAR_DIALOGS_WEATHER_NOAA_LIST_HPP	src/Dialogs/Weather/NOAAList.hpp	25;"	d
XCSOAR_DIALOGS_WEATHER_PCMET_HPP	src/Dialogs/Weather/PCMetDialog.hpp	25;"	d
XCSOAR_DIALOGS_WEATHER_RASP_HPP	src/Dialogs/Weather/RASPDialog.hpp	25;"	d
XCSOAR_DIALOG_LOOK_HPP	src/Look/DialogLook.hpp	25;"	d
XCSOAR_DIALOG_SETTINGS_HPP	src/Dialogs/DialogSettings.hpp	25;"	d
XCSOAR_DISPLAY_MODE_HPP	src/DisplayMode.hpp	25;"	d
XCSOAR_DISPLAY_ORIENTATION_HPP	src/DisplayOrientation.hpp	25;"	d
XCSOAR_DISPLAY_SETTINGS_HPP	src/DisplaySettings.hpp	25;"	d
XCSOAR_DISTANCE_STAT_COMPUTER_HPP	src/Engine/Task/Computer/DistanceStatComputer.hpp	24;"	d
XCSOAR_DOWNLOAD_FILE_PICKER_HPP	src/Dialogs/DownloadFilePicker.hpp	25;"	d
XCSOAR_DRAW_THREAD_HPP	src/DrawThread.hpp	25;"	d
XCSOAR_DYNAMIC_LIBRARY_HPP	src/system/DynamicLibrary.hpp	25;"	d
XCSOAR_ELEMENT_STAT_COMPUTER_HPP	src/Engine/Task/Computer/ElementStatComputer.hpp	24;"	d
XCSOAR_EVENT_ANDROID_KEY_CODE_HPP	src/ui/event/android/KeyCode.hpp	25;"	d
XCSOAR_EVENT_ANDROID_LOOP_HPP	src/ui/event/android/Loop.hpp	25;"	d
XCSOAR_EVENT_ANDROID_QUEUE_HPP	src/ui/event/android/Queue.hpp	25;"	d
XCSOAR_EVENT_DELAYED_NOTIFY_HPP	src/ui/event/DelayedNotify.hpp	25;"	d
XCSOAR_EVENT_GLOBALS_HPP	src/ui/event/Globals.hpp	25;"	d
XCSOAR_EVENT_IDLE_HPP	src/ui/event/Idle.hpp	25;"	d
XCSOAR_EVENT_KEY_CODE_HPP	src/ui/event/KeyCode.hpp	25;"	d
XCSOAR_EVENT_LIBINPUT_LIBINPUT_HPP	src/ui/event/poll/libinput/LibInputHandler.hpp	25;"	d
XCSOAR_EVENT_LINUX_INPUT_HPP	src/ui/event/poll/linux/Input.hpp	25;"	d
XCSOAR_EVENT_LINUX_KEY_CODE_HPP	src/ui/event/poll/linux/KeyCode.hpp	25;"	d
XCSOAR_EVENT_LINUX_TRANSLATE_HPP	src/ui/event/poll/linux/Translate.hpp	25;"	d
XCSOAR_EVENT_MERGE_MOUSE_HPP	src/ui/event/poll/linux/MergeMouse.hpp	25;"	d
XCSOAR_EVENT_NOTIFY_HPP	src/ui/event/Notify.hpp	25;"	d
XCSOAR_EVENT_PERIODIC_TIMER_HPP	src/ui/event/PeriodicTimer.hpp	25;"	d
XCSOAR_EVENT_POLL_INPUT_QUEUE_HPP	src/ui/event/poll/InputQueue.hpp	25;"	d
XCSOAR_EVENT_POLL_KEY_CODE_HPP	src/ui/event/poll/KeyCode.hpp	25;"	d
XCSOAR_EVENT_POLL_LOOP_HPP	src/ui/event/poll/Loop.hpp	25;"	d
XCSOAR_EVENT_POLL_QUEUE_HPP	src/ui/event/poll/Queue.hpp	25;"	d
XCSOAR_EVENT_QUEUE_HPP	src/ui/event/Queue.hpp	25;"	d
XCSOAR_EVENT_ROTATE_POINTER_HPP	src/ui/event/shared/RotatePointer.hpp	25;"	d
XCSOAR_EVENT_SDL_HPP	src/ui/event/sdl/Event.hpp	25;"	d
XCSOAR_EVENT_SDL_KEY_CODE_HPP	src/ui/event/sdl/KeyCode.hpp	25;"	d
XCSOAR_EVENT_SDL_LOOP_HPP	src/ui/event/sdl/Loop.hpp	25;"	d
XCSOAR_EVENT_SDL_QUEUE_HPP	src/ui/event/sdl/Queue.hpp	25;"	d
XCSOAR_EVENT_SHARED_EVENT_HPP	src/ui/event/shared/Event.hpp	25;"	d
XCSOAR_EVENT_TIMER_HPP	src/ui/event/Timer.hpp	25;"	d
XCSOAR_EVENT_TIMER_QUEUE_HPP	src/ui/event/shared/TimerQueue.hpp	25;"	d
XCSOAR_EVENT_UDEVCONTEXT_HPP	src/ui/event/poll/libinput/UdevContext.hpp	25;"	d
XCSOAR_EVENT_WINDOWS_EVENT_HPP	src/ui/event/windows/Event.hpp	25;"	d
XCSOAR_EVENT_WINDOWS_KEY_CODE_HPP	src/ui/event/windows/KeyCode.hpp	25;"	d
XCSOAR_EVENT_WINDOWS_LOOP_HPP	src/ui/event/windows/Loop.hpp	25;"	d
XCSOAR_EVENT_WINDOWS_QUEUE_HPP	src/ui/event/windows/Queue.hpp	25;"	d
XCSOAR_EVENT_X11_EVENT_QUEUE_HPP	src/ui/event/poll/WaylandQueue.hpp	25;"	d
XCSOAR_EVENT_X11_EVENT_QUEUE_HPP	src/ui/event/poll/X11Queue.hpp	25;"	d
XCSOAR_EVENT_X11_KEY_CODE_HPP	src/ui/event/poll/X11KeyCode.hpp	25;"	d
XCSOAR_EXTERNAL_LOGGER_HPP	src/Logger/ExternalLogger.hpp	25;"	d
XCSOAR_EXTERNAL_SETTINGS_HPP	src/NMEA/ExternalSettings.hpp	25;"	d
XCSOAR_FAI_TRIANGLE_AREA_HPP	src/Engine/Task/Shapes/FAITriangleArea.hpp	25;"	d
XCSOAR_FAI_TRIANGLE_AREA_RENDERER_HPP	src/Renderer/FAITriangleAreaRenderer.hpp	25;"	d
XCSOAR_FAI_TRIANGLE_POINT_VALIDATOR_HPP	src/Engine/Task/Shapes/FAITrianglePointValidator.hpp	25;"	d
XCSOAR_FAI_TRIANGLE_RULES_HPP	src/Engine/Task/Shapes/FAITriangleRules.hpp	25;"	d
XCSOAR_FAI_TRIANGLE_SETTINGS_HPP	src/Engine/Task/Shapes/FAITriangleSettings.hpp	25;"	d
XCSOAR_FAI_TRIANGLE_TASK_HPP	src/Engine/Task/Shapes/FAITriangleTask.hpp	25;"	d
XCSOAR_FILE_CACHE_HPP	src/io/FileCache.hpp	25;"	d
XCSOAR_FILE_DATA_FIELD_HPP	src/Form/DataField/File.hpp	25;"	d
XCSOAR_FILE_REPOSITORY_HPP	src/Repository/FileRepository.hpp	25;"	d
XCSOAR_FILE_TRANSACTION_HPP	src/io/FileTransaction.hpp	25;"	d
XCSOAR_FILE_TYPE_HPP	src/Repository/FileType.hpp	25;"	d
XCSOAR_FINAL_GLIDE_BAR_LOOK_HPP	src/Look/FinalGlideBarLook.hpp	25;"	d
XCSOAR_FINAL_GLIDE_BAR_RENDERER_HPP	src/Renderer/FinalGlideBarRenderer.hpp	25;"	d
XCSOAR_FINISH_CONSTRAINTS_HPP	src/Engine/Task/Ordered/FinishConstraints.hpp	24;"	d
XCSOAR_FIXED_WINDOW_WIDGET_HPP	src/Widget/FixedWindowWidget.hpp	25;"	d
XCSOAR_FLARM_BINARY_PROTOCOL_HPP	src/Device/Driver/FLARM/BinaryProtocol.hpp	25;"	d
XCSOAR_FLARM_CALCULATIONS_HPP	src/FLARM/FlarmCalculations.hpp	25;"	d
XCSOAR_FLARM_COLOR_DATABASE_HPP	src/FLARM/ColorDatabase.hpp	25;"	d
XCSOAR_FLARM_COLOR_HPP	src/FLARM/Color.hpp	25;"	d
XCSOAR_FLARM_COMPUTER_HPP	src/FLARM/FlarmComputer.hpp	25;"	d
XCSOAR_FLARM_CONFIG_WIDGET_HPP	src/Dialogs/Device/FLARM/ConfigWidget.hpp	25;"	d
XCSOAR_FLARM_CRC16_HPP	src/Device/Driver/FLARM/CRC16.hpp	25;"	d
XCSOAR_FLARM_DATA_HPP	src/FLARM/Data.hpp	25;"	d
XCSOAR_FLARM_DEVICE_HPP	src/Device/Driver/FLARM/Device.hpp	25;"	d
XCSOAR_FLARM_ERROR_HPP	src/FLARM/Error.hpp	25;"	d
XCSOAR_FLARM_FRIENDS_HPP	src/FLARM/Friends.hpp	25;"	d
XCSOAR_FLARM_GLOBAL_HPP	src/FLARM/Global.hpp	25;"	d
XCSOAR_FLARM_GLUE_HPP	src/FLARM/Glue.hpp	25;"	d
XCSOAR_FLARM_ID_HPP	src/FLARM/FlarmId.hpp	25;"	d
XCSOAR_FLARM_NAME_DATABASE_HPP	src/FLARM/NameDatabase.hpp	25;"	d
XCSOAR_FLARM_NAME_FILE_HPP	src/FLARM/NameFile.hpp	25;"	d
XCSOAR_FLARM_NET_DATABASE_HPP	src/FLARM/FlarmNetDatabase.hpp	25;"	d
XCSOAR_FLARM_NET_READER_HPP	src/FLARM/FlarmNetReader.hpp	25;"	d
XCSOAR_FLARM_NET_RECORD_HPP	src/FLARM/FlarmNetRecord.hpp	25;"	d
XCSOAR_FLARM_PROFILE_HPP	src/Profile/FlarmProfile.hpp	25;"	d
XCSOAR_FLARM_STATIC_PARSER_HPP	src/Device/Driver/FLARM/StaticParser.hpp	25;"	d
XCSOAR_FLARM_STATUS_HPP	src/FLARM/Status.hpp	25;"	d
XCSOAR_FLARM_TEXT_PROTOCOL_HPP	src/Device/Driver/FLARM/TextProtocol.hpp	25;"	d
XCSOAR_FLARM_TRAFFIC_HPP	src/FLARM/Traffic.hpp	25;"	d
XCSOAR_FLARM_TRAFFIC_LIST_HPP	src/FLARM/List.hpp	25;"	d
XCSOAR_FLARM_VERSION_HPP	src/FLARM/Version.hpp	25;"	d
XCSOAR_FLAT_PROJECTION_HPP	src/Geo/Flat/FlatProjection.hpp	24;"	d
XCSOAR_FLIGHT_INFO_HPP	src/FlightInfo.hpp	25;"	d
XCSOAR_FLIGHT_LIST_RENDERER_HPP	src/Renderer/FlightListRenderer.hpp	25;"	d
XCSOAR_FLIGHT_LOGGER_HPP	src/Logger/FlightLogger.hpp	25;"	d
XCSOAR_FLIGHT_PARSER_HPP	src/Logger/FlightParser.hpp	25;"	d
XCSOAR_FLIGHT_STATUS_PANEL_HPP	src/Dialogs/StatusPanels/FlightStatusPanel.hpp	25;"	d
XCSOAR_FLYING_COMPUTER_HPP	src/Computer/FlyingComputer.hpp	25;"	d
XCSOAR_FLYING_STATE_HPP	src/NMEA/FlyingState.hpp	25;"	d
XCSOAR_FLYTEC_DEVICE_HPP	src/Device/Driver/Flytec/Device.hpp	25;"	d
XCSOAR_FONT_DESCRIPTION_HPP	src/Look/FontDescription.hpp	25;"	d
XCSOAR_FONT_SETTINGS_HPP	src/Look/FontSettings.hpp	25;"	d
XCSOAR_FORMAT_SETTINGS_HPP	src/FormatSettings.hpp	25;"	d
XCSOAR_FORM_BUTTON_HPP	src/Form/Button.hpp	25;"	d
XCSOAR_FORM_BUTTON_PANEL_HPP	src/Form/ButtonPanel.hpp	25;"	d
XCSOAR_FORM_CHECK_BOX_HPP	src/Form/CheckBox.hpp	25;"	d
XCSOAR_FORM_CONTROL_HPP	src/Form/Control.hpp	25;"	d
XCSOAR_FORM_DIGIT_ENTRY_HPP	src/Form/DigitEntry.hpp	25;"	d
XCSOAR_FORM_DRAW_HPP	src/Form/Draw.hpp	25;"	d
XCSOAR_FORM_EDIT_HPP	src/Form/Edit.hpp	25;"	d
XCSOAR_FORM_FORM_HPP	src/Form/Form.hpp	25;"	d
XCSOAR_FORM_FRAME_HPP	src/Form/Frame.hpp	25;"	d
XCSOAR_FORM_GRIDVIEW_HPP	src/Form/GridView.hpp	25;"	d
XCSOAR_FORM_HLINE_HPP	src/Form/HLine.hpp	25;"	d
XCSOAR_FORM_LIST_HPP	src/Form/List.hpp	25;"	d
XCSOAR_FORM_PANEL_HPP	src/Form/Panel.hpp	25;"	d
XCSOAR_FORM_SCROLL_BAR_HPP	src/Form/ScrollBar.hpp	25;"	d
XCSOAR_FORM_TABMENU_DISPLAY_HPP	src/Form/TabMenuDisplay.hpp	25;"	d
XCSOAR_FORM_TAB_DISPLAY_HPP	src/Form/TabDisplay.hpp	25;"	d
XCSOAR_FORM_TAB_MENU_DATA_HPP	src/Form/TabMenuData.hpp	25;"	d
XCSOAR_FULL_BLACKBOARD_HPP	src/Blackboard/FullBlackboard.hpp	25;"	d
XCSOAR_GBM_FORMAT	src/ui/canvas/egl/TopCanvas.cpp	/^static constexpr uint32_t XCSOAR_GBM_FORMAT = GBM_FORMAT_XRGB8888;$/;"	v	file:
XCSOAR_GBM_FORMAT_FALLBACK	src/ui/canvas/egl/TopCanvas.cpp	/^static constexpr uint32_t XCSOAR_GBM_FORMAT_FALLBACK = GBM_FORMAT_ARGB8888;$/;"	v	file:
XCSOAR_GEOPOINT_FORMATTER_HPP	src/Formatter/GeoPointFormatter.hpp	25;"	d
XCSOAR_GEO_BITMAP_RENDERER_HPP	src/Renderer/GeoBitmapRenderer.hpp	25;"	d
XCSOAR_GEO_CLIP_HPP	src/Geo/GeoClip.hpp	25;"	d
XCSOAR_GEO_FAI_SPHERE_HPP	src/Geo/FAISphere.hpp	29;"	d
XCSOAR_GEO_GRAVITY_HPP	src/Geo/Gravity.hpp	25;"	d
XCSOAR_GEO_MATH_HPP	src/Geo/Math.hpp	32;"	d
XCSOAR_GEO_QUADRILATERAL_HPP	src/Geo/Quadrilateral.hpp	25;"	d
XCSOAR_GEO_RECT_HPP	src/Geo/GeoBounds.hpp	25;"	d
XCSOAR_GEO_SIMPLIFIED_MATH_HPP	src/Geo/SimplifiedMath.hpp	34;"	d
XCSOAR_GEO_WGS84_HPP	src/Geo/WGS84.hpp	25;"	d
XCSOAR_GESTURE_LOOK_HPP	src/Look/GestureLook.hpp	25;"	d
XCSOAR_GLASS_RENDERER_HPP	src/Renderer/GlassRenderer.hpp	25;"	d
XCSOAR_GLIDECOMPUTER_AIRDATA_HPP	src/Computer/GlideComputerAirData.hpp	25;"	d
XCSOAR_GLIDECOMPUTER_HPP	src/Computer/GlideComputer.hpp	25;"	d
XCSOAR_GLIDECOMPUTER_TASK_HPP	src/Computer/TaskComputer.hpp	25;"	d
XCSOAR_GLIDER_LINK_DATA_H	src/GliderLink/GliderLinkData.hpp	24;"	d
XCSOAR_GLIDER_LINK_ID_HPP	src/GliderLink/GliderLinkId.hpp	25;"	d
XCSOAR_GLIDER_LINK_TRAFFIC_HPP	src/GliderLink/Traffic.hpp	25;"	d
XCSOAR_GLIDER_LINK_TRAFFIC_LIST_HPP	src/GliderLink/List.hpp	25;"	d
XCSOAR_GLIDE_COMPUTER_EVENTS_HPP	src/Computer/Events.hpp	25;"	d
XCSOAR_GLIDE_POLAR_INFO_RENDERER_HPP	src/Renderer/GlidePolarInfoRenderer.hpp	25;"	d
XCSOAR_GLIDE_POLAR_RENDERER_HPP	src/Renderer/GlidePolarRenderer.hpp	25;"	d
XCSOAR_GLIDE_RATIO_COMPUTER_HPP	src/Computer/GlideRatioComputer.hpp	25;"	d
XCSOAR_GLIDE_RATIO_FORMATTER_HPP	src/Formatter/GlideRatioFormatter.hpp	25;"	d
XCSOAR_GLIDE_RATIO_HPP	src/Computer/GlideRatioCalculator.hpp	25;"	d
XCSOAR_GLIDE_SETTINGS_HPP	src/Engine/GlideSolvers/GlideSettings.hpp	24;"	d
XCSOAR_GLOBAL_ASIO_THREAD_HPP	src/io/async/GlobalAsioThread.hpp	25;"	d
XCSOAR_GLOBAL_FONTS_HPP	src/Look/GlobalFonts.hpp	25;"	d
XCSOAR_GLUE_FLIGHT_LOGGER_HPP	src/Logger/GlueFlightLogger.hpp	25;"	d
XCSOAR_GLUE_MAP_WINDOW_HPP	src/MapWindow/GlueMapWindow.hpp	25;"	d
XCSOAR_GPS_CLOCK_HPP	src/time/GPSClock.hpp	25;"	d
XCSOAR_GPS_STATE_HPP	src/NMEA/GPSState.hpp	25;"	d
XCSOAR_GRADIENT_RENDERER_HPP	src/Renderer/GradientRenderer.hpp	25;"	d
XCSOAR_GROUND_SPEED_COMPUTER_HPP	src/Computer/GroundSpeedComputer.hpp	25;"	d
XCSOAR_GeoPoint_HPP	src/Geo/GeoPoint.hpp	26;"	d
XCSOAR_HARDWARE_BATTERY_H	src/Hardware/Battery.hpp	25;"	d
XCSOAR_HARDWARE_CPU_FREQUENCY_HPP	src/Hardware/CPU.hpp	25;"	d
XCSOAR_HARDWARE_DISPLAY_DPI_HPP	src/Hardware/DisplayDPI.hpp	25;"	d
XCSOAR_HARDWARE_DISPLAY_GLUE_H	src/Hardware/DisplayGlue.hpp	25;"	d
XCSOAR_HARDWARE_DISPLAY_SIZE_HPP	src/Hardware/DisplaySize.hpp	25;"	d
XCSOAR_HARDWARE_ROTATE_DISPLAY_HPP	src/Hardware/RotateDisplay.hpp	25;"	d
XCSOAR_HARDWARE_VIBRATOR_HPP	src/Hardware/Vibrator.hpp	25;"	d
XCSOAR_HARDWARE_VIDEO_POWER_H	src/Hardware/VideoPower.h	25;"	d
XCSOAR_HELP_DIALOG_HPP	src/Dialogs/HelpDialog.hpp	25;"	d
XCSOAR_HEX_COLOR_FORMATTER_HPP	src/Formatter/HexColor.hpp	25;"	d
XCSOAR_HEX_DUMP_HPP	src/HexDump.hpp	25;"	d
XCSOAR_HORIZON_WIDGET_HPP	src/HorizonWidget.hpp	25;"	d
XCSOAR_ICON_LOOK_HPP	src/Look/IconLook.hpp	25;"	d
XCSOAR_IGC_CLEANUP_HPP	src/Logger/IGCFileCleanup.hpp	25;"	d
XCSOAR_IGC_CODE	src/Logger/GRecord.hpp	28;"	d
XCSOAR_IGC_DECLARATION_HPP	src/IGC/IGCDeclaration.hpp	25;"	d
XCSOAR_IGC_EXTENSION_HPP	src/IGC/IGCExtensions.hpp	25;"	d
XCSOAR_IGC_FILENAME_FORMATTER_HPP	src/Formatter/IGCFilenameFormatter.hpp	25;"	d
XCSOAR_IGC_FIX_HPP	src/IGC/IGCFix.hpp	25;"	d
XCSOAR_IGC_GENERATOR_HPP	src/IGC/Generator.hpp	25;"	d
XCSOAR_IGC_HEADER_HPP	src/IGC/IGCHeader.hpp	25;"	d
XCSOAR_IGC_PARSER_HPP	src/IGC/IGCParser.hpp	25;"	d
XCSOAR_IGC_STRING_HPP	src/IGC/IGCString.hpp	25;"	d
XCSOAR_IGC_WRITER_HPP	src/IGC/IGCWriter.hpp	25;"	d
XCSOAR_IMI_CHECKCUM_HPP	src/Device/Driver/IMI/Protocol/Checksum.hpp	25;"	d
XCSOAR_IMI_COMMUNICATION_HPP	src/Device/Driver/IMI/Protocol/Communication.hpp	25;"	d
XCSOAR_IMI_CONVERSION_HPP	src/Device/Driver/IMI/Protocol/Conversion.hpp	25;"	d
XCSOAR_IMI_DEVIMI_HPP	src/Device/Driver/IMI/Protocol/Protocol.hpp	25;"	d
XCSOAR_IMI_IGC_HPP	src/Device/Driver/IMI/Protocol/IGC.hpp	25;"	d
XCSOAR_IMI_INTERNAL_HPP	src/Device/Driver/IMI/Internal.hpp	25;"	d
XCSOAR_IMI_MSGPARSER_HPP	src/Device/Driver/IMI/Protocol/MessageParser.hpp	25;"	d
XCSOAR_IMI_TYPES_HPP	src/Device/Driver/IMI/Protocol/Types.hpp	25;"	d
XCSOAR_INCREMENTAL_SPEED_COMPUTER_HPP	src/Engine/Task/Computer/IncrementalSpeedComputer.hpp	24;"	d
XCSOAR_INFOBOX_CONTENT_AIRSPACE_HPP	src/InfoBoxes/Content/Airspace.hpp	25;"	d
XCSOAR_INFOBOX_CONTENT_ALTERNATE_HPP	src/InfoBoxes/Content/Alternate.hpp	25;"	d
XCSOAR_INFOBOX_CONTENT_ALTITUDE_HPP	src/InfoBoxes/Content/Altitude.hpp	25;"	d
XCSOAR_INFOBOX_CONTENT_CONTEST_HPP	src/InfoBoxes/Content/Contest.hpp	25;"	d
XCSOAR_INFOBOX_CONTENT_DIRECTION_HPP	src/InfoBoxes/Content/Direction.hpp	25;"	d
XCSOAR_INFOBOX_CONTENT_GLIDE_HPP	src/InfoBoxes/Content/Glide.hpp	25;"	d
XCSOAR_INFOBOX_CONTENT_HPP	src/InfoBoxes/Content/Base.hpp	25;"	d
XCSOAR_INFOBOX_CONTENT_MACCREADY_HPP	src/InfoBoxes/Content/MacCready.hpp	25;"	d
XCSOAR_INFOBOX_CONTENT_OTHER_HPP	src/InfoBoxes/Content/Other.hpp	25;"	d
XCSOAR_INFOBOX_CONTENT_PLACES_HPP	src/InfoBoxes/Content/Places.hpp	25;"	d
XCSOAR_INFOBOX_CONTENT_RADIO_HPP	src/InfoBoxes/Content/Radio.hpp	25;"	d
XCSOAR_INFOBOX_CONTENT_SPEED_HPP	src/InfoBoxes/Content/Speed.hpp	25;"	d
XCSOAR_INFOBOX_CONTENT_TASK_HPP	src/InfoBoxes/Content/Task.hpp	25;"	d
XCSOAR_INFOBOX_CONTENT_TEAM_HPP	src/InfoBoxes/Content/Team.hpp	25;"	d
XCSOAR_INFOBOX_CONTENT_TERRAIN_HPP	src/InfoBoxes/Content/Terrain.hpp	25;"	d
XCSOAR_INFOBOX_CONTENT_THERMAL_HPP	src/InfoBoxes/Content/Thermal.hpp	25;"	d
XCSOAR_INFOBOX_CONTENT_TIME_HPP	src/InfoBoxes/Content/Time.hpp	25;"	d
XCSOAR_INFOBOX_CONTENT_TRACE_HPP	src/InfoBoxes/Content/Trace.hpp	25;"	d
XCSOAR_INFOBOX_CONTENT_WEATHER_HPP	src/InfoBoxes/Content/Weather.hpp	25;"	d
XCSOAR_INFOBOX_FACTORY_HPP	src/InfoBoxes/Content/Factory.hpp	25;"	d
XCSOAR_INFOBOX_PANEL_HPP	src/InfoBoxes/Panel/Panel.hpp	25;"	d
XCSOAR_INFOBOX_TYPE_HPP	src/InfoBoxes/Content/Type.hpp	25;"	d
XCSOAR_INFO_BOX_BORDER_HPP	src/InfoBoxes/Border.hpp	25;"	d
XCSOAR_INFO_BOX_DATA_HPP	src/InfoBoxes/Data.hpp	25;"	d
XCSOAR_INFO_BOX_HPP	src/InfoBoxes/InfoBoxWindow.hpp	25;"	d
XCSOAR_INFO_BOX_LAYOUT_HPP	src/InfoBoxes/InfoBoxLayout.hpp	25;"	d
XCSOAR_INFO_BOX_LOOK_HPP	src/Look/InfoBoxLook.hpp	25;"	d
XCSOAR_INFO_BOX_MANAGER_HPP	src/InfoBoxes/InfoBoxManager.hpp	25;"	d
XCSOAR_INFO_BOX_SETTINGS_HPP	src/InfoBoxes/InfoBoxSettings.hpp	25;"	d
XCSOAR_INPUT_CONFIG_HPP	src/Input/InputConfig.hpp	25;"	d
XCSOAR_INPUT_EVENTS_HPP	src/Input/InputEvents.hpp	25;"	d
XCSOAR_INPUT_KEYS_HPP	src/Input/InputKeys.hpp	25;"	d
XCSOAR_INPUT_LOOKUP_HPP	src/Input/InputLookup.hpp	25;"	d
XCSOAR_INPUT_PARSER_HPP	src/Input/InputParser.hpp	25;"	d
XCSOAR_INPUT_QUEUE_HPP	src/Input/InputQueue.hpp	25;"	d
XCSOAR_INTERFACE_HPP	src/Interface.hpp	25;"	d
XCSOAR_IO_CHARSET_HPP	src/io/Charset.hpp	25;"	d
XCSOAR_IO_CONFIGURED_FILE_HPP	src/io/ConfiguredFile.hpp	25;"	d
XCSOAR_IO_CONVERT_LINE_READER_HPP	src/io/ConvertLineReader.hpp	25;"	d
XCSOAR_IO_DATA_FILE_HPP	src/io/DataFile.hpp	25;"	d
XCSOAR_IO_DATA_HANDLER_HPP	src/io/DataHandler.hpp	25;"	d
XCSOAR_IO_FILE_HANDLE_HPP	src/io/FileHandle.hpp	25;"	d
XCSOAR_IO_FILE_LINE_READER_HPP	src/io/FileLineReader.hpp	25;"	d
XCSOAR_IO_KEY_VALUE_FILE_READER_HPP	src/io/KeyValueFileReader.hpp	25;"	d
XCSOAR_IO_LINE_READER_HPP	src/io/LineReader.hpp	25;"	d
XCSOAR_IO_MAP_FILE_HPP	src/io/MapFile.hpp	25;"	d
XCSOAR_IO_NULL_DATA_HANDLER_HPP	src/io/NullDataHandler.hpp	25;"	d
XCSOAR_IO_STRING_CONVERTER_HPP	src/io/StringConverter.hpp	25;"	d
XCSOAR_IO_TEXT_WRITER_HPP	src/io/TextWriter.hpp	25;"	d
XCSOAR_IO_ZIP_ARCHIVE_HPP	src/io/ZipArchive.hpp	25;"	d
XCSOAR_IO_ZIP_LINE_READER_HPP	src/io/ZipLineReader.hpp	25;"	d
XCSOAR_IO_ZIP_READER_HPP	src/io/ZipReader.hpp	25;"	d
XCSOAR_JOB_DIALOG_HPP	src/Dialogs/JobDialog.hpp	25;"	d
XCSOAR_JOB_HPP	src/Job/Job.hpp	25;"	d
XCSOAR_JOB_RUNNER_HPP	src/Job/Runner.hpp	25;"	d
XCSOAR_JOB_THREAD_HPP	src/Job/Thread.hpp	25;"	d
XCSOAR_JSON_GEO_WRITER_HPP	src/JSON/GeoWriter.hpp	25;"	d
XCSOAR_JSON_WRITER_HPP	src/JSON/Writer.hpp	25;"	d
XCSOAR_KALMAN_FILTER_1D_HPP	src/Math/KalmanFilter1d.hpp	24;"	d
XCSOAR_KEYBOARD_CONTROL_HPP	src/Widget/KeyboardWidget.hpp	25;"	d
XCSOAR_KEYHOLE_ZONE_EDIT_WIDGET_HPP	src/Dialogs/Task/Widgets/KeyholeZoneEditWidget.hpp	25;"	d
XCSOAR_KEY_VALUE_FILE_WRITER_HPP	src/io/KeyValueFileWriter.hpp	25;"	d
XCSOAR_KOBO_KERNEL_HPP	src/Kobo/Kernel.hpp	25;"	d
XCSOAR_KOBO_MODEL_HPP	src/Kobo/Model.hpp	25;"	d
XCSOAR_KOBO_NETWORK_DIALOG_HPP	src/Kobo/NetworkDialog.hpp	25;"	d
XCSOAR_KOBO_SYSTEM_DIALOG_HPP	src/Kobo/SystemDialog.hpp	25;"	d
XCSOAR_KOBO_SYSTEM_HPP	src/Kobo/System.hpp	25;"	d
XCSOAR_KOBO_TOOLS_DIALOG_HPP	src/Kobo/ToolsDialog.hpp	25;"	d
XCSOAR_KOBO_WIFI_DIALOG_HPP	src/Kobo/WifiDialog.hpp	25;"	d
XCSOAR_KOBO_WIFI_HPP	src/Kobo/WPASupplicant.hpp	25;"	d
XCSOAR_LABEL_SHAPE_HPP	src/Renderer/LabelShape.hpp	25;"	d
XCSOAR_LANGUAGE_GLUE_HPP	src/Language/LanguageGlue.hpp	25;"	d
XCSOAR_LANGUAGE_HPP	src/Language/Language.hpp	25;"	d
XCSOAR_LARGE_TEXT_WIDGET_HPP	src/Widget/LargeTextWidget.hpp	25;"	d
XCSOAR_LAST_USED_WAYPOINTS_HPP	src/Waypoint/LastUsed.hpp	25;"	d
XCSOAR_LEGAL_POINT_SET_HPP	src/Engine/Task/Factory/LegalPointSet.hpp	25;"	d
XCSOAR_LIBJPEG_HPP	src/ui/canvas/custom/LibJPEG.hpp	25;"	d
XCSOAR_LIBPNG_HPP	src/ui/canvas/custom/LibPNG.hpp	25;"	d
XCSOAR_LIBTIFF_HPP	src/ui/canvas/custom/LibTiff.hpp	25;"	d
XCSOAR_LIFT_DATABASE_COMPUTER_HPP	src/Computer/LiftDatabaseComputer.hpp	25;"	d
XCSOAR_LIFT_DATABASE_HPP	src/NMEA/LiftDatabase.hpp	25;"	d
XCSOAR_LINE2D_HPP	src/Math/Line2D.hpp	25;"	d
XCSOAR_LINE_ZONE_EDIT_WIDGET_HPP	src/Dialogs/Task/Widgets/LineSectorZoneEditWidget.hpp	25;"	d
XCSOAR_LIST_WIDGET_HPP	src/Widget/ListWidget.hpp	25;"	d
XCSOAR_LIVE_BLACKBOARD_HPP	src/Blackboard/LiveBlackboard.hpp	25;"	d
XCSOAR_LOCAL_PATH_HPP	src/LocalPath.hpp	25;"	d
XCSOAR_LOCAL_TIME_FORMATTER_HPP	src/Formatter/LocalTimeFormatter.hpp	25;"	d
XCSOAR_LOGGER_FRECORD_HPP	src/Logger/LoggerFRecord.hpp	25;"	d
XCSOAR_LOGGER_HPP	src/Logger/Logger.hpp	25;"	d
XCSOAR_LOGGER_IMPL_HPP	src/Logger/LoggerImpl.hpp	25;"	d
XCSOAR_LOGGER_SETTINGS_HPP	src/Logger/Settings.hpp	25;"	d
XCSOAR_LOGO_VIEW_HPP	src/Gauge/LogoView.hpp	25;"	d
XCSOAR_LOG_COMPUTER_HPP	src/Computer/LogComputer.hpp	25;"	d
XCSOAR_LOG_FILE_HPP	src/LogFile.hpp	25;"	d
XCSOAR_LOOK_COLORS_HPP	src/Look/Colors.hpp	25;"	d
XCSOAR_LOOK_HPP	src/Look/Look.hpp	25;"	d
XCSOAR_LUA_AIRSPACE_HPP	src/lua/Airspace.hpp	25;"	d
XCSOAR_LUA_ASSOCIATE_HPP	src/lua/Associate.hpp	25;"	d
XCSOAR_LUA_BACKGROUND_HPP	src/lua/Background.hpp	25;"	d
XCSOAR_LUA_BASIC_HPP	src/lua/Basic.hpp	25;"	d
XCSOAR_LUA_BLACKBOARD_HPP	src/lua/Blackboard.hpp	25;"	d
XCSOAR_LUA_CATCH_HPP	src/lua/Catch.hpp	25;"	d
XCSOAR_LUA_DIALOGS_HPP	src/lua/Dialogs.hpp	25;"	d
XCSOAR_LUA_FULL_HPP	src/lua/Full.hpp	25;"	d
XCSOAR_LUA_GEO_HPP	src/lua/Geo.hpp	25;"	d
XCSOAR_LUA_INPUT_EVENT_HPP	src/lua/InputEvent.hpp	25;"	d
XCSOAR_LUA_LEGACY_HPP	src/lua/Legacy.hpp	25;"	d
XCSOAR_LUA_LOGGER_HPP	src/lua/Logger.hpp	25;"	d
XCSOAR_LUA_LOG_HPP	src/lua/Log.hpp	25;"	d
XCSOAR_LUA_MAP_HPP	src/lua/Map.hpp	25;"	d
XCSOAR_LUA_PERSISTENT_HPP	src/lua/Persistent.hpp	25;"	d
XCSOAR_LUA_PTR_HPP	src/lua/Ptr.hpp	25;"	d
XCSOAR_LUA_REPLAY_HPP	src/lua/Replay.hpp	25;"	d
XCSOAR_LUA_SETTINGS_HPP	src/lua/Settings.hpp	25;"	d
XCSOAR_LUA_START_FILE_HPP	src/lua/StartFile.hpp	25;"	d
XCSOAR_LUA_TASK_HPP	src/lua/Task.hpp	25;"	d
XCSOAR_LUA_TIMER_HPP	src/lua/Timer.hpp	25;"	d
XCSOAR_LUA_TRACKING_HPP	src/lua/Tracking.hpp	25;"	d
XCSOAR_LUA_WIND_HPP	src/lua/Wind.hpp	25;"	d
XCSOAR_MACCREADY_RENDERER_HPP	src/Renderer/MacCreadyRenderer.hpp	25;"	d
XCSOAR_MAIN_WINDOW_HXX	src/MainWindow.hpp	25;"	d
XCSOAR_MANAGED_WIDGET_HPP	src/Widget/ManagedWidget.hpp	25;"	d
XCSOAR_MANAGE_CAI302_DIALOG_HPP	src/Dialogs/Device/ManageCAI302Dialog.hpp	25;"	d
XCSOAR_MANAGE_FLARM_DIALOG_HPP	src/Dialogs/Device/ManageFlarmDialog.hpp	25;"	d
XCSOAR_MANAGE_LX16XX_DIALOG_HPP	src/Dialogs/Device/LX/ManageLX16xxDialog.hpp	25;"	d
XCSOAR_MANAGE_NANO_DIALOG_HPP	src/Dialogs/Device/LX/ManageNanoDialog.hpp	25;"	d
XCSOAR_MANAGE_V7_DIALOG_HPP	src/Dialogs/Device/LX/ManageV7Dialog.hpp	25;"	d
XCSOAR_MAPWINDOW_PROJECTION_HPP	src/Projection/MapWindowProjection.hpp	25;"	d
XCSOAR_MAP_CANVAS_HPP	src/MapWindow/MapCanvas.hpp	25;"	d
XCSOAR_MAP_ITEM_HPP	src/MapWindow/Items/MapItem.hpp	25;"	d
XCSOAR_MAP_ITEM_LIST_BUILDER_HPP	src/MapWindow/Items/Builder.hpp	25;"	d
XCSOAR_MAP_ITEM_LIST_HPP	src/MapWindow/Items/List.hpp	25;"	d
XCSOAR_MAP_ITEM_LIST_RENDERER_HPP	src/Renderer/MapItemListRenderer.hpp	25;"	d
XCSOAR_MAP_ITEM_LIST_SETTINGS_PANEL_HPP	src/Dialogs/MapItemListSettingsPanel.hpp	25;"	d
XCSOAR_MAP_LOOK_HPP	src/Look/MapLook.hpp	25;"	d
XCSOAR_MAP_OVERLAY_BITMAP_HPP	src/MapWindow/OverlayBitmap.hpp	25;"	d
XCSOAR_MAP_OVERLAY_HPP	src/MapWindow/Overlay.hpp	25;"	d
XCSOAR_MAP_PROFILE_HPP	src/Profile/MapProfile.hpp	25;"	d
XCSOAR_MAP_SETTINGS_HPP	src/MapSettings.hpp	25;"	d
XCSOAR_MAP_WINDOW_HPP	src/MapWindow/MapWindow.hpp	25;"	d
XCSOAR_MARKS_HPP	src/Markers/Markers.hpp	25;"	d
XCSOAR_MATH_BOOST_POINT_ARRAY_HPP	src/Math/Boost/Point.hpp	25;"	d
XCSOAR_MATH_CONSTANTS_HPP	src/Math/Constants.hpp	25;"	d
XCSOAR_MATH_FASTMATH_HPP	src/Math/FastMath.hpp	25;"	d
XCSOAR_MATH_FASTROTATION_HPP	src/Math/FastRotation.hpp	25;"	d
XCSOAR_MATH_FAST_TRIG_HPP	src/Math/FastTrig.hpp	25;"	d
XCSOAR_MATH_SCREEN_HPP	src/Math/Screen.hpp	27;"	d
XCSOAR_MATH_SHIFT_HPP	src/Math/Shift.hpp	24;"	d
XCSOAR_MATH_TRIG_HPP	src/Math/Trig.hpp	25;"	d
XCSOAR_MATH_UTIL_HPP	src/Math/Util.hpp	24;"	d
XCSOAR_MAT_TASK_FACTORY_HPP	src/Engine/Task/Factory/MatTaskFactory.hpp	25;"	d
XCSOAR_MAT_TASK_MONITOR_HPP	src/Monitor/MatTaskMonitor.hpp	25;"	d
XCSOAR_MC_EDIT_PANEL_HPP	src/InfoBoxes/Panel/MacCreadyEdit.hpp	25;"	d
XCSOAR_MC_SETUP_PANEL_HPP	src/InfoBoxes/Panel/MacCreadySetup.hpp	25;"	d
XCSOAR_MENU_BAR_HPP	src/Menu/MenuBar.hpp	25;"	d
XCSOAR_MENU_DATA_HPP	src/Menu/MenuData.hpp	25;"	d
XCSOAR_MERGE_THREAD_HPP	src/MergeThread.hpp	25;"	d
XCSOAR_MESSAGE_HPP	src/Message.hpp	25;"	d
XCSOAR_MESSAGE_OPERATION_HPP	src/Operation/MessageOperationEnvironment.hpp	25;"	d
XCSOAR_MORE_DATA_HPP	src/NMEA/MoreData.hpp	25;"	d
XCSOAR_MO_FILE_HPP	src/Language/MOFile.hpp	25;"	d
XCSOAR_MO_LOADER_HPP	src/Language/MOLoader.hpp	25;"	d
XCSOAR_MURPHY_HPP	src/ui/canvas/memory/Murphy.hpp	25;"	d
XCSOAR_NET_DOWNLOAD_MANAGER_HPP	src/net/http/DownloadManager.hpp	25;"	d
XCSOAR_NET_FEATURES_HPP	src/net/http/Features.hpp	25;"	d
XCSOAR_NET_FEATURES_HXX	src/net/Features.hxx	25;"	d
XCSOAR_NET_INIT_HPP	src/net/http/Init.hpp	25;"	d
XCSOAR_NET_STATE_HPP	src/net/State.hpp	25;"	d
XCSOAR_NEXT_ARROW_RENDERER_HPP	src/Renderer/NextArrowRenderer.hpp	25;"	d
XCSOAR_NMEA_AIRCRAFT_HPP	src/NMEA/Aircraft.hpp	25;"	d
XCSOAR_NMEA_CHECKSUM_HPP	src/NMEA/Checksum.hpp	25;"	d
XCSOAR_NMEA_DERIVED_H	src/NMEA/Derived.hpp	25;"	d
XCSOAR_NMEA_INFO_H	src/NMEA/Info.hpp	25;"	d
XCSOAR_NMEA_INPUT_LINE_HPP	src/NMEA/InputLine.hpp	25;"	d
XCSOAR_NMEA_LOGGER_HPP	src/Logger/NMEALogger.hpp	25;"	d
XCSOAR_NMEA_THERMAL_LOCATOR_HPP	src/NMEA/ThermalLocator.hpp	25;"	d
XCSOAR_NOAA_LIST_RENDERER_HPP	src/Renderer/NOAAListRenderer.hpp	25;"	d
XCSOAR_NOAA_LOOK_HPP	src/Look/NOAALook.hpp	25;"	d
XCSOAR_NO_CANCEL_OPERATION_HPP	src/Operation/NoCancelOperationEnvironment.hpp	25;"	d
XCSOAR_NUMBER_PARSER_HPP	src/util/NumberParser.hpp	25;"	d
XCSOAR_Nano_CONFIG_WIDGET_HPP	src/Dialogs/Device/LX/NanoConfigWidget.hpp	25;"	d
XCSOAR_OBSERVATION_ZONE_BOUNDARY_HPP	src/Engine/Task/ObservationZones/Boundary.hpp	25;"	d
XCSOAR_OBSERVATION_ZONE_EDIT_WIDGET_HPP	src/Dialogs/Task/Widgets/ObservationZoneEditWidget.hpp	25;"	d
XCSOAR_OFFSET_BUTTONS_WIDGET_HPP	src/Widget/OffsetButtonsWidget.hpp	25;"	d
XCSOAR_OPENGL_FBO_HPP	src/ui/canvas/opengl/FBO.hpp	25;"	d
XCSOAR_OPENGL_FRAME_BUFFER_HPP	src/ui/canvas/opengl/FrameBuffer.hpp	25;"	d
XCSOAR_OPENGL_RENDER_BUFFER_HPP	src/ui/canvas/opengl/RenderBuffer.hpp	25;"	d
XCSOAR_OPENGL_UNCOMPRESSED_IMAGE_HPP	src/ui/canvas/opengl/UncompressedImage.hpp	25;"	d
XCSOAR_OPERATION_HPP	src/Operation/Operation.hpp	25;"	d
XCSOAR_ORDERED_TASK_SETTINGS_HPP	src/Engine/Task/Ordered/Settings.hpp	24;"	d
XCSOAR_OS_CLOCK_HPP	src/system/Clock.hpp	25;"	d
XCSOAR_OS_COMMAND_LINE_HPP	src/CommandLine.hpp	25;"	d
XCSOAR_OS_FILEUTIL_HPP	src/system/FileUtil.hpp	25;"	d
XCSOAR_OS_FILE_MAPPING_HPP	src/system/FileMapping.hpp	25;"	d
XCSOAR_OS_PROCESS_HPP	src/system/Process.hpp	25;"	d
XCSOAR_OS_RUN_FILE_HPP	src/system/RunFile.hpp	25;"	d
XCSOAR_OUTSIDE_AIRSPACE_PREDICATE_HPP	src/Engine/Airspace/Predicate/OutsideAirspacePredicate.hpp	24;"	d
XCSOAR_OVERLAPPED_EVENT_HPP	src/system/OverlappedEvent.hpp	25;"	d
XCSOAR_OVERLAPPED_WIDGET_HPP	src/Widget/OverlappedWidget.hpp	25;"	d
XCSOAR_OVERLAY_LOOK_HPP	src/Look/OverlayLook.hpp	25;"	d
XCSOAR_OVERLAY_MAP_ITEM_HPP	src/MapWindow/Items/OverlayMapItem.hpp	25;"	d
XCSOAR_OZ_PREVIEW_RENDERER_HPP	src/Renderer/OZPreviewRenderer.hpp	25;"	d
XCSOAR_PAGER_WIDGET_HPP	src/Widget/PagerWidget.hpp	25;"	d
XCSOAR_PAGES_HPP	src/PageActions.hpp	25;"	d
XCSOAR_PAGE_PROFILE_HPP	src/Profile/PageProfile.hpp	25;"	d
XCSOAR_PAGE_SETTINGS_HPP	src/PageSettings.hpp	25;"	d
XCSOAR_PAGE_STATE_HPP	src/PageState.hpp	25;"	d
XCSOAR_PANEL_WIDGET_HPP	src/Widget/PanelWidget.hpp	25;"	d
XCSOAR_PAN_HPP	src/Pan.hpp	25;"	d
XCSOAR_PASSWORD_DATA_FIELD_HPP	src/Form/DataField/Password.hpp	25;"	d
XCSOAR_PCMET_IMAGES_HPP	src/Weather/PCMet/Images.hpp	25;"	d
XCSOAR_PCMET_OVERLAYS_HPP	src/Weather/PCMet/Overlays.hpp	25;"	d
XCSOAR_PERIOD_CLOCK_HPP	src/time/PeriodClock.hpp	25;"	d
XCSOAR_POINT2D_HPP	src/Math/Point2D.hpp	25;"	d
XCSOAR_POLAR_BUILTIN_HPP	src/Polar/PolarStore.hpp	25;"	d
XCSOAR_POLAR_COEFF_HPP	src/Engine/GlideSolvers/PolarCoefficients.hpp	25;"	d
XCSOAR_POLAR_FILE_GLUE_HPP	src/Polar/PolarFileGlue.hpp	25;"	d
XCSOAR_POLAR_INFO_HPP	src/Polar/Polar.hpp	25;"	d
XCSOAR_POLAR_LOADER_HPP	src/Polar/PolarGlue.hpp	25;"	d
XCSOAR_POLAR_PARSER_HPP	src/Polar/Parser.hpp	25;"	d
XCSOAR_POLAR_SHAPE_HPP	src/Polar/Shape.hpp	25;"	d
XCSOAR_POPUP_MESSAGE_H	src/PopupMessage.hpp	25;"	d
XCSOAR_POPUP_OPERATION_HPP	src/Operation/PopupOperationEnvironment.hpp	25;"	d
XCSOAR_PORT_MONITOR_DIALOG_HPP	src/Dialogs/Device/PortMonitor.hpp	25;"	d
XCSOAR_PROCESS_TIMER_H	src/ProcessTimer.hpp	24;"	d
XCSOAR_PROFILE_AIRSPACE_CONFIG_HPP	src/Profile/AirspaceConfig.hpp	25;"	d
XCSOAR_PROFILE_CURRENT_HPP	src/Profile/Current.hpp	25;"	d
XCSOAR_PROFILE_DEVICE_CONFIG_HPP	src/Profile/DeviceConfig.hpp	25;"	d
XCSOAR_PROFILE_FILE_HPP	src/Profile/File.hpp	25;"	d
XCSOAR_PROFILE_HPP	src/Profile/Profile.hpp	25;"	d
XCSOAR_PROFILE_INFOBOX_CONFIG_HPP	src/Profile/InfoBoxConfig.hpp	25;"	d
XCSOAR_PROFILE_MAP2_HPP	src/Profile/Map.hpp	25;"	d
XCSOAR_PROFILE_MAP_HPP	src/Profile/ProfileMap.hpp	25;"	d
XCSOAR_PROFILE_PASSWORD_DIALOG_HPP	src/Dialogs/ProfilePasswordDialog.hpp	25;"	d
XCSOAR_PROFILE_SETTINGS_HPP	src/Profile/Settings.hpp	25;"	d
XCSOAR_PROFILE_TERRAIN_CONFIG_HPP	src/Profile/TerrainConfig.hpp	25;"	d
XCSOAR_PROFILE_UNITS_CONFIG_HPP	src/Profile/UnitsConfig.hpp	25;"	d
XCSOAR_PROGRESS_DIALOG_HPP	src/Dialogs/ProgressDialog.hpp	25;"	d
XCSOAR_PROGRESS_GLUE_HPP	src/ProgressGlue.hpp	25;"	d
XCSOAR_PROJECTION_HPP	src/Projection/Projection.hpp	25;"	d
XCSOAR_PROTECTED_AIRSPACE_WARNING_MANAGER_HPP	src/Airspace/ProtectedAirspaceWarningManager.hpp	24;"	d
XCSOAR_PROTECTED_ROUTE_PLANNER_HPP	src/Task/ProtectedRoutePlanner.hpp	24;"	d
XCSOAR_PROTECTED_TASK_MANAGER_HPP	src/Task/ProtectedTaskManager.hpp	24;"	d
XCSOAR_PROTECTION_HPP	src/Protection.hpp	25;"	d
XCSOAR_PROXY_BLACKBOARD_LISTENER_HPP	src/Blackboard/ProxyBlackboardListener.hpp	25;"	d
XCSOAR_PROXY_OPERATION_HPP	src/Operation/ProxyOperationEnvironment.hpp	25;"	d
XCSOAR_QUESTION_WIDGET_HPP	src/Widget/QuestionWidget.hpp	25;"	d
XCSOAR_RADIO_EDIT_PANEL_HPP	src/InfoBoxes/Panel/RadioEdit.hpp	25;"	d
XCSOAR_RADIO_FREQUENCY_HPP	src/RadioFrequency.hpp	25;"	d
XCSOAR_RASP_MAP_ITEM_HPP	src/MapWindow/Items/RaspMapItem.hpp	25;"	d
XCSOAR_RASTERTILE_CACHE_HPP	src/Terrain/RasterTileCache.hpp	25;"	d
XCSOAR_RASTERTILE_HPP	src/Terrain/RasterTile.hpp	25;"	d
XCSOAR_RASTER_BUFFER_HPP	src/Terrain/RasterBuffer.hpp	25;"	d
XCSOAR_RASTER_RENDERER_HPP	src/Terrain/RasterRenderer.hpp	25;"	d
XCSOAR_RATE_LIMITED_BLACKBOARD_LISTENER_HPP	src/Blackboard/RateLimitedBlackboardListener.hpp	25;"	d
XCSOAR_RATE_LIMITER_HPP	src/RateLimiter.hpp	25;"	d
XCSOAR_REACH_RESULT_HPP	src/Engine/Route/ReachResult.hpp	25;"	d
XCSOAR_RENDER_OBSERVATION_ZONE_HPP	src/Renderer/OZRenderer.hpp	25;"	d
XCSOAR_RENDER_TASK_POINT_HPP	src/Renderer/TaskPointRenderer.hpp	25;"	d
XCSOAR_REPLAY_CLOCK_HPP	src/time/ReplayClock.hpp	25;"	d
XCSOAR_REPLAY_DIALOG_HPP	src/Dialogs/ReplayDialog.hpp	25;"	d
XCSOAR_REPOSITORY_GLUE_HPP	src/Repository/Glue.hpp	25;"	d
XCSOAR_REPOSITORY_PARSER_HPP	src/Repository/Parser.hpp	25;"	d
XCSOAR_RESOURCE_ID_HPP	src/ResourceId.hpp	25;"	d
XCSOAR_RESOURCE_LOADER_HPP	src/ResourceLoader.hpp	25;"	d
XCSOAR_ROUGH_ALTITUDE_HPP	src/Rough/RoughAltitude.hpp	25;"	d
XCSOAR_ROUGH_ANGLE_HPP	src/Rough/RoughAngle.hpp	25;"	d
XCSOAR_ROUGH_DISTANCE_HPP	src/Rough/RoughDistance.hpp	25;"	d
XCSOAR_ROUGH_SPEED_HPP	src/Rough/RoughSpeed.hpp	25;"	d
XCSOAR_ROUGH_TIME_SPAN_HPP	src/time/RoughTime.hpp	25;"	d
XCSOAR_ROUGH_VSPEED_HPP	src/Rough/RoughVSpeed.hpp	25;"	d
XCSOAR_ROUTE_COMPUTER_HPP	src/Computer/RouteComputer.hpp	25;"	d
XCSOAR_ROUTE_HPP	src/Engine/Route/Route.hpp	24;"	d
XCSOAR_ROUTE_PLANNER_CONFIG_HPP	src/Engine/Route/Config.hpp	24;"	d
XCSOAR_ROUTE_POINT_HPP	src/Engine/Route/Point.hpp	24;"	d
XCSOAR_ROUTE_PROFILE_HPP	src/Profile/RouteProfile.hpp	25;"	d
XCSOAR_ROW_FORM_WIDGET_HPP	src/Widget/RowFormWidget.hpp	25;"	d
XCSOAR_ROW_TWO_WIDGETS_HPP	src/Widget/TwoWidgets.hpp	25;"	d
XCSOAR_RULES_STATUS_PANEL_HPP	src/Dialogs/StatusPanels/RulesStatusPanel.hpp	25;"	d
XCSOAR_RUNWAY_HPP	src/Engine/Waypoint/Runway.hpp	24;"	d
XCSOAR_SCAN_BLUETOOTH_LE_DIALOG_HPP	src/Dialogs/Device/ScanBluetoothLeDialog.hpp	25;"	d
XCSOAR_SCOPE_CALCULATED_LISTENER_HPP	src/Blackboard/ScopeCalculatedListener.hpp	25;"	d
XCSOAR_SCOPE_GPS_LISTENER_HPP	src/Blackboard/ScopeGPSListener.hpp	25;"	d
XCSOAR_SCORING_CONFIG_PANEL_HPP	src/Dialogs/Settings/Panels/ScoringConfigPanel.hpp	25;"	d
XCSOAR_SCREEN_ACTIVE_PIXEL_TRAITS_HPP	src/ui/canvas/memory/ActivePixelTraits.hpp	25;"	d
XCSOAR_SCREEN_ANDROID_FEATURES_HPP	src/ui/window/android/Features.hpp	25;"	d
XCSOAR_SCREEN_ANTI_FLICKER_WINDOW_HXX	src/ui/window/AntiFlickerWindow.hpp	25;"	d
XCSOAR_SCREEN_ANY_CANVAS_HPP	src/ui/canvas/AnyCanvas.hpp	25;"	d
XCSOAR_SCREEN_APPLE_IMAGEDECODER_HPP	src/ui/canvas/apple/ImageDecoder.hpp	25;"	d
XCSOAR_SCREEN_BITMAP_HPP	src/ui/canvas/Bitmap.hpp	25;"	d
XCSOAR_SCREEN_BRUSH_HPP	src/ui/canvas/Brush.hpp	25;"	d
XCSOAR_SCREEN_BUFFER_CANVAS_HPP	src/ui/canvas/BufferCanvas.hpp	25;"	d
XCSOAR_SCREEN_BUFFER_HPP	src/ui/canvas/memory/Buffer.hpp	25;"	d
XCSOAR_SCREEN_BUFFER_WINDOW_HXX	src/ui/window/BufferWindow.hpp	25;"	d
XCSOAR_SCREEN_BULK_POINT_HPP	src/ui/dim/BulkPoint.hpp	25;"	d
XCSOAR_SCREEN_CANVAS_HPP	src/ui/canvas/Canvas.hpp	25;"	d
XCSOAR_SCREEN_COLOR_HPP	src/ui/canvas/Color.hpp	25;"	d
XCSOAR_SCREEN_CONTAINER_WINDOW_HXX	src/ui/window/ContainerWindow.hpp	25;"	d
XCSOAR_SCREEN_CUSTOM_FILES_HPP	src/ui/canvas/custom/Files.hpp	25;"	d
XCSOAR_SCREEN_DEBUG_HPP	src/Screen/Debug.hpp	25;"	d
XCSOAR_SCREEN_DITHER_HPP	src/ui/canvas/memory/Dither.hpp	25;"	d
XCSOAR_SCREEN_DOUBLE_BUFFER_WINDOW_HXX	src/ui/window/DoubleBufferWindow.hpp	25;"	d
XCSOAR_SCREEN_DOUBLE_CLICK_HPP	src/ui/window/custom/DoubleClick.hpp	25;"	d
XCSOAR_SCREEN_EGL_SYSTEM_HPP	src/ui/egl/System.hpp	25;"	d
XCSOAR_SCREEN_FAKE_BUFFER_WINDOW_HXX	src/ui/window/FakeBufferWindow.hpp	25;"	d
XCSOAR_SCREEN_FEATURES_HPP	src/Screen/Features.hpp	25;"	d
XCSOAR_SCREEN_FONT_HPP	src/ui/canvas/Font.hpp	25;"	d
XCSOAR_SCREEN_FREETYPE_INIT_HPP	src/ui/canvas/freetype/Init.hpp	25;"	d
XCSOAR_SCREEN_GDI_ALPHA_BLEND_HPP	src/ui/canvas/gdi/AlphaBlend.hpp	25;"	d
XCSOAR_SCREEN_GDI_BUFFER_CANVAS_HPP	src/ui/canvas/gdi/BufferCanvas.hpp	25;"	d
XCSOAR_SCREEN_GDI_BULK_POINT_HPP	src/ui/dim/gdi/BulkPoint.hpp	25;"	d
XCSOAR_SCREEN_GDI_CANVAS_HPP	src/ui/canvas/gdi/Canvas.hpp	25;"	d
XCSOAR_SCREEN_GDI_COLOR_HPP	src/ui/canvas/gdi/Color.hpp	25;"	d
XCSOAR_SCREEN_GDI_FEATURES_HPP	src/ui/canvas/gdi/Features.hpp	25;"	d
XCSOAR_SCREEN_GDI_PAINT_CANVAS_HPP	src/ui/canvas/gdi/PaintCanvas.hpp	25;"	d
XCSOAR_SCREEN_GLX_SYSTEM_HPP	src/ui/glx/System.hpp	25;"	d
XCSOAR_SCREEN_ICON_HPP	src/ui/canvas/Icon.hpp	25;"	d
XCSOAR_SCREEN_INIT_HPP	src/ui/window/Init.hpp	25;"	d
XCSOAR_SCREEN_LARGE_TEXT_WINDOW_HPP	src/Screen/LargeTextWindow.hpp	25;"	d
XCSOAR_SCREEN_LAYOUT_HPP	src/Screen/Layout.hpp	25;"	d
XCSOAR_SCREEN_LAZY_PAINT_WINDOW_HXX	src/ui/window/LazyPaintWindow.hpp	25;"	d
XCSOAR_SCREEN_MEMORY_CANVAS_HPP	src/ui/canvas/memory/Canvas.hpp	25;"	d
XCSOAR_SCREEN_MEMORY_COLOR_HPP	src/ui/canvas/memory/Color.hpp	25;"	d
XCSOAR_SCREEN_MEMORY_EXPORT_HPP	src/ui/canvas/memory/Export.hpp	25;"	d
XCSOAR_SCREEN_MEMORY_FEATURES_HPP	src/ui/canvas/memory/Features.hpp	25;"	d
XCSOAR_SCREEN_MEMORY_OPTIMISED_HPP	src/ui/canvas/memory/Optimised.hpp	25;"	d
XCSOAR_SCREEN_MEMORY_UNCOMPRESSED_IMAGE_HPP	src/ui/canvas/memory/UncompressedImage.hpp	25;"	d
XCSOAR_SCREEN_MMX_HPP	src/ui/canvas/memory/MMX.hpp	25;"	d
XCSOAR_SCREEN_NATIVE_WINDOW_HXX	src/ui/window/NativeWindow.hpp	25;"	d
XCSOAR_SCREEN_NEON_HPP	src/ui/canvas/memory/NEON.hpp	25;"	d
XCSOAR_SCREEN_OPENGL_ATTRIBUTE_HPP	src/ui/canvas/opengl/Attribute.hpp	25;"	d
XCSOAR_SCREEN_OPENGL_BUFFER_CANVAS_HPP	src/ui/canvas/opengl/BufferCanvas.hpp	25;"	d
XCSOAR_SCREEN_OPENGL_BUFFER_HPP	src/ui/canvas/opengl/Buffer.hpp	25;"	d
XCSOAR_SCREEN_OPENGL_BULK_POINT_HPP	src/ui/dim/memory/BulkPoint.hpp	25;"	d
XCSOAR_SCREEN_OPENGL_BULK_POINT_HPP	src/ui/dim/opengl/BulkPoint.hpp	25;"	d
XCSOAR_SCREEN_OPENGL_CACHE_HPP	src/ui/canvas/custom/Cache.hpp	25;"	d
XCSOAR_SCREEN_OPENGL_CANVAS_HPP	src/ui/canvas/opengl/Canvas.hpp	25;"	d
XCSOAR_SCREEN_OPENGL_CANVAS_ROTATE_SHIFT_HPP	src/ui/canvas/opengl/CanvasRotateShift.hpp	25;"	d
XCSOAR_SCREEN_OPENGL_COLOR_HPP	src/ui/canvas/opengl/Color.hpp	25;"	d
XCSOAR_SCREEN_OPENGL_CONSTANT_ALPHA_HPP	src/ui/canvas/opengl/ConstantAlpha.hpp	25;"	d
XCSOAR_SCREEN_OPENGL_DEBUG_HPP	src/ui/canvas/opengl/Debug.hpp	25;"	d
XCSOAR_SCREEN_OPENGL_DYNAMIC_HPP	src/ui/canvas/opengl/Dynamic.hpp	25;"	d
XCSOAR_SCREEN_OPENGL_EXACT_PIXEL_POINT_HPP	src/ui/canvas/opengl/ExactPixelPoint.hpp	25;"	d
XCSOAR_SCREEN_OPENGL_EXTENSION_HPP	src/ui/canvas/opengl/Extension.hpp	25;"	d
XCSOAR_SCREEN_OPENGL_FEATURES_HPP	src/ui/opengl/Features.hpp	25;"	d
XCSOAR_SCREEN_OPENGL_FUNCTION_HPP	src/ui/canvas/opengl/Function.hpp	25;"	d
XCSOAR_SCREEN_OPENGL_GEO_HPP	src/ui/canvas/opengl/Geo.hpp	25;"	d
XCSOAR_SCREEN_OPENGL_GLOBALS_HPP	src/ui/canvas/opengl/Globals.hpp	32;"	d
XCSOAR_SCREEN_OPENGL_INIT_HPP	src/ui/canvas/opengl/Init.hpp	25;"	d
XCSOAR_SCREEN_OPENGL_PROGRAM_HPP	src/ui/canvas/opengl/Program.hpp	25;"	d
XCSOAR_SCREEN_OPENGL_ROTATE_HPP	src/ui/canvas/opengl/Rotate.hpp	25;"	d
XCSOAR_SCREEN_OPENGL_SCISSOR_HPP	src/ui/canvas/opengl/Scissor.hpp	25;"	d
XCSOAR_SCREEN_OPENGL_SCOPE_HPP	src/ui/canvas/opengl/Scope.hpp	25;"	d
XCSOAR_SCREEN_OPENGL_SHADERS_HPP	src/ui/canvas/opengl/Shaders.hpp	25;"	d
XCSOAR_SCREEN_OPENGL_SHAPES_HPP	src/ui/canvas/opengl/Shapes.hpp	25;"	d
XCSOAR_SCREEN_OPENGL_SURFACE_HPP	src/ui/canvas/opengl/Surface.hpp	25;"	d
XCSOAR_SCREEN_OPENGL_SYSTEM_EXT_HPP	src/ui/opengl/SystemExt.hpp	25;"	d
XCSOAR_SCREEN_OPENGL_SYSTEM_HPP	src/ui/opengl/System.hpp	25;"	d
XCSOAR_SCREEN_OPENGL_TEXTURE_HPP	src/ui/canvas/opengl/Texture.hpp	25;"	d
XCSOAR_SCREEN_OPENGL_TRIANGULATE_HPP	src/ui/canvas/opengl/Triangulate.hpp	25;"	d
XCSOAR_SCREEN_OPENGL_TYPES_HPP	src/ui/opengl/Types.hpp	25;"	d
XCSOAR_SCREEN_OPENGL_VERTEX_ARRAY_HPP	src/ui/canvas/opengl/VertexArray.hpp	25;"	d
XCSOAR_SCREEN_OPENGL_VERTEX_POINTER_HPP	src/ui/canvas/opengl/VertexPointer.hpp	25;"	d
XCSOAR_SCREEN_PAINT_WINDOW_HXX	src/ui/window/PaintWindow.hpp	25;"	d
XCSOAR_SCREEN_PEN_HPP	src/ui/canvas/Pen.hpp	25;"	d
XCSOAR_SCREEN_PIXEL_OPERATIONS_HPP	src/ui/canvas/memory/PixelOperations.hpp	25;"	d
XCSOAR_SCREEN_PIXEL_TRAITS_HPP	src/ui/canvas/memory/PixelTraits.hpp	25;"	d
XCSOAR_SCREEN_PORTABLE_COLOR_HPP	src/ui/canvas/PortableColor.hpp	25;"	d
XCSOAR_SCREEN_PROGRESS_BAR_HXX	src/Screen/ProgressBar.hpp	25;"	d
XCSOAR_SCREEN_PROGRESS_WINDOW_HXX	src/ProgressWindow.hpp	25;"	d
XCSOAR_SCREEN_RAMP_HPP	src/ui/canvas/Ramp.hpp	25;"	d
XCSOAR_SCREEN_RASTER_CANVAS_HPP	src/ui/canvas/memory/RasterCanvas.hpp	25;"	d
XCSOAR_SCREEN_RAW_BITMAP_HPP	src/ui/canvas/RawBitmap.hpp	12;"	d
XCSOAR_SCREEN_ROOT_DC_HXX	src/ui/canvas/gdi/RootDC.hpp	25;"	d
XCSOAR_SCREEN_ROTATED_POLYGON_RENDERER_HPP	src/Renderer/RotatedPolygonRenderer.hpp	25;"	d
XCSOAR_SCREEN_SDL_FEATURES_HPP	src/ui/window/sdl/Features.hpp	25;"	d
XCSOAR_SCREEN_SDL_REFERENCE_HPP	src/ui/window/custom/Reference.hpp	25;"	d
XCSOAR_SCREEN_SINGLE_WINDOW_HXX	src/ui/window/SingleWindow.hpp	25;"	d
XCSOAR_SCREEN_STOP_WATCH_HPP	src/Screen/StopWatch.hpp	25;"	d
XCSOAR_SCREEN_SUB_CANVAS_HPP	src/ui/canvas/SubCanvas.hpp	25;"	d
XCSOAR_SCREEN_TERMINAL_WINDOW_HPP	src/Screen/TerminalWindow.hpp	25;"	d
XCSOAR_SCREEN_TEXT_IN_BOX_HPP	src/Renderer/TextInBox.hpp	25;"	d
XCSOAR_SCREEN_TOP_CANVAS_HPP	src/ui/canvas/custom/TopCanvas.hpp	25;"	d
XCSOAR_SCREEN_TOP_WINDOW_HXX	src/ui/window/TopWindow.hpp	25;"	d
XCSOAR_SCREEN_UTIL_HPP	src/ui/canvas/Util.hpp	30;"	d
XCSOAR_SCREEN_VIRTUAL_CANVAS_HPP	src/ui/canvas/VirtualCanvas.hpp	25;"	d
XCSOAR_SCREEN_WINDOW_CANVAS_HXX	src/ui/canvas/WindowCanvas.hpp	25;"	d
XCSOAR_SCREEN_WINDOW_HPP	src/ui/window/Window.hpp	25;"	d
XCSOAR_SCREEN_WINDOW_LIST_HPP	src/ui/window/custom/WList.hpp	25;"	d
XCSOAR_SECTOR_ZONE_EDIT_WIDGET_HPP	src/Dialogs/Task/Widgets/SectorZoneEditWidget.hpp	25;"	d
XCSOAR_SELF_TIMING_KALMAN_FILTER_1D_HPP	src/Math/SelfTimingKalmanFilter1d.hpp	24;"	d
XCSOAR_SERIALISER_HPP	src/Cloud/Serialiser.hpp	25;"	d
XCSOAR_SERIAL_HPP	src/util/Serial.hpp	25;"	d
XCSOAR_SETTINGS_BLACKBOARD_HPP	src/Blackboard/SettingsBlackboard.hpp	25;"	d
XCSOAR_SHOW_MENU_BUTTON_HPP	src/Menu/ShowMenuButton.hpp	25;"	d
XCSOAR_SIMULATOR_H	src/Simulator.hpp	25;"	d
XCSOAR_SIMULATOR_PROMPT_HPP	src/Dialogs/dlgSimulatorPrompt.hpp	25;"	d
XCSOAR_SIMULATOR_PROMPT_WINDOW_HPP	src/Dialogs/SimulatorPromptWindow.hpp	25;"	d
XCSOAR_SIZES_H	src/Sizes.h	2;"	d
XCSOAR_SMART_TASK_ADVANCE_HPP	src/Engine/Task/Ordered/SmartTaskAdvance.hpp	24;"	d
XCSOAR_SOLID_CONTAINER_WINDOW_HPP	src/ui/window/SolidContainerWindow.hpp	25;"	d
XCSOAR_SOLID_WIDGET_HPP	src/Widget/SolidWidget.hpp	25;"	d
XCSOAR_SOLVER_RESULT_HPP	src/Engine/PathSolvers/SolverResult.hpp	25;"	d
XCSOAR_SOUND_SETTINGS_HPP	src/Audio/Settings.hpp	25;"	d
XCSOAR_SPEED_VECTOR_HPP	src/Geo/SpeedVector.hpp	26;"	d
XCSOAR_STANDARD_FONTS_HPP	src/Look/StandardFonts.hpp	25;"	d
XCSOAR_STARTUP_DIALOG_HPP	src/Dialogs/StartupDialog.hpp	25;"	d
XCSOAR_STARTUP_HPP	src/Startup.hpp	25;"	d
XCSOAR_START_CONSTRAINTS_HPP	src/Engine/Task/Ordered/StartConstraints.hpp	24;"	d
XCSOAR_START_STATS_HPP	src/Engine/Task/Stats/StartStats.hpp	24;"	d
XCSOAR_STATE_CLOCK_HPP	src/Computer/StateClock.hpp	25;"	d
XCSOAR_STATS_COMPUTER_HPP	src/Computer/StatsComputer.hpp	25;"	d
XCSOAR_STATUS_MESSAGE_H	src/StatusMessage.hpp	25;"	d
XCSOAR_STATUS_PANEL_HPP	src/Dialogs/StatusPanels/StatusPanel.hpp	25;"	d
XCSOAR_STRING_UTIL_HPP	src/util/StringUtil.hpp	25;"	d
XCSOAR_SWITCH_STATE_HPP	src/NMEA/SwitchState.hpp	25;"	d
XCSOAR_SYMBOL_BUTTON_RENDERER_HPP	src/Renderer/SymbolButtonRenderer.hpp	25;"	d
XCSOAR_SYMBOL_RENDERER_HPP	src/Renderer/SymbolRenderer.hpp	25;"	d
XCSOAR_SYSTEM_PROFILE_HPP	src/Profile/SystemProfile.hpp	25;"	d
XCSOAR_SYSTEM_SETTINGS_HPP	src/SystemSettings.hpp	25;"	d
XCSOAR_SYSTEM_STATUS_PANEL_HPP	src/Dialogs/StatusPanels/SystemStatusPanel.hpp	25;"	d
XCSOAR_TAB_RENDERER_HPP	src/Renderer/TabRenderer.hpp	25;"	d
XCSOAR_TAB_WIDGET_HPP	src/Widget/TabWidget.hpp	25;"	d
XCSOAR_TARGET_MAP_WINDOW_HPP	src/MapWindow/TargetMapWindow.hpp	25;"	d
XCSOAR_TASK_ACCESSOR_HPP	src/Replay/TaskAccessor.hpp	24;"	d
XCSOAR_TASK_ACTIONS_PANEL_HPP	src/Dialogs/Task/Manager/TaskActionsPanel.hpp	25;"	d
XCSOAR_TASK_ADVANCE_MONITOR_HPP	src/Monitor/TaskAdvanceMonitor.hpp	25;"	d
XCSOAR_TASK_CLOSE_PANEL_HPP	src/Dialogs/Task/Manager/TaskClosePanel.hpp	25;"	d
XCSOAR_TASK_CONSTRAINTS_MONITOR_HPP	src/Monitor/TaskConstraintsMonitor.hpp	25;"	d
XCSOAR_TASK_EDIT_PANEL_HPP	src/Dialogs/Task/Manager/TaskEditPanel.hpp	25;"	d
XCSOAR_TASK_EVENT_OBSERVER_HPP	src/Input/TaskEventObserver.hpp	26;"	d
XCSOAR_TASK_FACTORY_CONSTRAINTS_HPP	src/Engine/Task/Factory/Constraints.hpp	25;"	d
XCSOAR_TASK_FACTORY_CREATE_HPP	src/Engine/Task/Factory/Create.hpp	25;"	d
XCSOAR_TASK_FILE_HPP	src/Task/TaskFile.hpp	24;"	d
XCSOAR_TASK_FILE_IGC_HPP	src/Task/TaskFileIGC.hpp	24;"	d
XCSOAR_TASK_FILE_SEEYOU_HPP	src/Task/TaskFileSeeYou.hpp	24;"	d
XCSOAR_TASK_FILE_XCSOAR_HPP	src/Task/TaskFileXCSoar.hpp	24;"	d
XCSOAR_TASK_LIST_PANEL_HPP	src/Dialogs/Task/Manager/TaskListPanel.hpp	25;"	d
XCSOAR_TASK_LOOK_HPP	src/Look/TaskLook.hpp	25;"	d
XCSOAR_TASK_MANAGER_INTERNAL_HPP	src/Dialogs/Task/Manager/Internal.hpp	25;"	d
XCSOAR_TASK_MAP_BUTTON_RENDERER_HPP	src/Dialogs/Task/Manager/TaskMapButtonRenderer.hpp	25;"	d
XCSOAR_TASK_MISC_PANEL_HPP	src/Dialogs/Task/Manager/TaskMiscPanel.hpp	25;"	d
XCSOAR_TASK_POINT_FACTORY_TYPE_HPP	src/Engine/Task/Factory/TaskPointFactoryType.hpp	24;"	d
XCSOAR_TASK_POINT_TYPE_HPP	src/Engine/Task/Points/Type.hpp	25;"	d
XCSOAR_TASK_PROFILE_HPP	src/Profile/TaskProfile.hpp	25;"	d
XCSOAR_TASK_PROPERTIES_PANEL_HPP	src/Dialogs/Task/Manager/TaskPropertiesPanel.hpp	25;"	d
XCSOAR_TASK_RENDERER_HPP	src/Renderer/TaskRenderer.hpp	25;"	d
XCSOAR_TASK_STATS_COMPUTER_HPP	src/Engine/Task/Computer/TaskStatsComputer.hpp	24;"	d
XCSOAR_TASK_STATUS_PANEL_HPP	src/Dialogs/StatusPanels/TaskStatusPanel.hpp	25;"	d
XCSOAR_TASK_TYPE_HPP	src/Engine/Task/TaskType.hpp	24;"	d
XCSOAR_TASK_TYPE_STRINGS_HPP	src/Task/TypeStrings.hpp	25;"	d
XCSOAR_TASK_VALIDATION_ERROR_HPP	src/Engine/Task/Factory/ValidationError.hpp	25;"	d
XCSOAR_TASK_VALIDATION_ERROR_STRINGS_HPP	src/Task/ValidationErrorStrings.hpp	25;"	d
XCSOAR_TASK_VARIO_COMPUTER_HPP	src/Engine/Task/Computer/TaskVarioComputer.hpp	24;"	d
XCSOAR_TASK_VIEW_HPP	src/Gauge/TaskView.hpp	25;"	d
XCSOAR_TEAM_ACTIONS_HPP	src/TeamActions.hpp	25;"	d
XCSOAR_TEAM_CODE_CALCULATION_HPP	src/TeamCode/TeamCode.hpp	25;"	d
XCSOAR_TEAM_CODE_SETTINGS_HPP	src/TeamCode/Settings.hpp	25;"	d
XCSOAR_TERMINAL_LOOK_HPP	src/Look/TerminalLook.hpp	25;"	d
XCSOAR_TERRAIN_HEIGHT_HPP	src/Terrain/Height.hpp	25;"	d
XCSOAR_TERRAIN_HEIGHT_MATRIX_HPP	src/Terrain/HeightMatrix.hpp	25;"	d
XCSOAR_TERRAIN_LOADER_HPP	src/Terrain/Loader.hpp	25;"	d
XCSOAR_TERRAIN_RASTER_LOCATION_HPP	src/Terrain/RasterLocation.hpp	25;"	d
XCSOAR_TERRAIN_RASTER_MAP_HPP	src/Terrain/RasterMap.hpp	25;"	d
XCSOAR_TERRAIN_RASTER_PROJECTION_HPP	src/Terrain/RasterProjection.hpp	25;"	d
XCSOAR_TERRAIN_RASTER_TERRAIN_HPP	src/Terrain/RasterTerrain.hpp	25;"	d
XCSOAR_TERRAIN_RASTER_TRAITS_HPP	src/Terrain/RasterTraits.hpp	25;"	d
XCSOAR_TERRAIN_RENDERER_HPP	src/Terrain/TerrainRenderer.hpp	25;"	d
XCSOAR_TERRAIN_SETTINGS_HPP	src/Terrain/TerrainSettings.hpp	25;"	d
XCSOAR_TERRAIN_THREAD_HPP	src/Terrain/Thread.hpp	25;"	d
XCSOAR_TERRAIN_WORLD_FILE_HPP	src/Terrain/WorldFile.hpp	25;"	d
XCSOAR_TERRAIN_ZZIP_STREAM_HPP	src/Terrain/ZzipStream.hpp	25;"	d
XCSOAR_TEXT_BUTTON_RENDERER_HPP	src/Renderer/TextButtonRenderer.hpp	25;"	d
XCSOAR_TEXT_LIST_WIDGET_HPP	src/Widget/TextListWidget.hpp	25;"	d
XCSOAR_TEXT_RENDERER_HPP	src/Renderer/TextRenderer.hpp	25;"	d
XCSOAR_TEXT_ROW_RENDERER_HPP	src/Renderer/TextRowRenderer.hpp	25;"	d
XCSOAR_TEXT_WIDGET_HPP	src/Widget/TextWidget.hpp	25;"	d
XCSOAR_THERMALEXPRESS_DRIVER_HPP	src/Device/Driver/ThermalExpress/Driver.hpp	20;"	d
XCSOAR_THERMAL_BAND_COMPUTER_HPP	src/Computer/ThermalBandComputer.hpp	25;"	d
XCSOAR_THREAD_DEBUG_HXX	src/thread/Debug.hpp	25;"	d
XCSOAR_THREAD_GUARD_HPP	src/thread/Guard.hpp	24;"	d
XCSOAR_THREAD_HANDLE_HPP	src/thread/Handle.hpp	25;"	d
XCSOAR_THREAD_NAME_HPP	src/thread/Name.hpp	25;"	d
XCSOAR_THREAD_OPERATION_HPP	src/Operation/ThreadedOperationEnvironment.hpp	25;"	d
XCSOAR_THREAD_RECURSIVELY_SUSPENSIBLE_THREAD_HPP	src/thread/RecursivelySuspensibleThread.hpp	25;"	d
XCSOAR_THREAD_SHARED_MUTEX_HXX	src/thread/SharedMutex.hpp	25;"	d
XCSOAR_THREAD_STANDBY_THREAD_HPP	src/thread/StandbyThread.hpp	25;"	d
XCSOAR_THREAD_STOPPABLE_THREAD_HPP	src/thread/StoppableThread.hpp	25;"	d
XCSOAR_THREAD_SUSPENSIBLE_THREAD_HPP	src/thread/SuspensibleThread.hpp	25;"	d
XCSOAR_THREAD_THREAD_HPP	src/thread/Thread.hpp	25;"	d
XCSOAR_THREAD_TRIGGER_HXX	src/thread/Trigger.hpp	25;"	d
XCSOAR_THREAD_WORKER_THREAD_HPP	src/thread/WorkerThread.hpp	25;"	d
XCSOAR_TIMEOUT_CLOCK_HPP	src/time/TimeoutClock.hpp	25;"	d
XCSOAR_TIMES_STATUS_PANEL_HPP	src/Dialogs/StatusPanels/TimesStatusPanel.hpp	25;"	d
XCSOAR_TIME_FORMATTER_HPP	src/Formatter/TimeFormatter.hpp	25;"	d
XCSOAR_TOPOGRAPHY_LOOK_HPP	src/Look/TopographyLook.hpp	25;"	d
XCSOAR_TOPOGRAPHY_THREAD_HPP	src/Topography/Thread.hpp	25;"	d
XCSOAR_TRACE_COMPUTER_HPP	src/Computer/TraceComputer.hpp	25;"	d
XCSOAR_TRACE_VECTOR_HPP	src/Engine/Trace/Vector.hpp	25;"	d
XCSOAR_TRACKING_CLOUD_SETTINGS_HPP	src/Tracking/SkyLines/CloudSettings.hpp	25;"	d
XCSOAR_TRACKING_FEATURES_HPP	src/Tracking/Features.hpp	25;"	d
XCSOAR_TRACKING_LIVETRACK24_SETTINGS_HPP	src/Tracking/LiveTrack24/Settings.hpp	25;"	d
XCSOAR_TRACKING_PROFILE_HPP	src/Profile/TrackingProfile.hpp	25;"	d
XCSOAR_TRACKING_SETTINGS_HPP	src/Tracking/TrackingSettings.hpp	25;"	d
XCSOAR_TRACKING_SKYLINES_ASSEMBLE_HPP	src/Tracking/SkyLines/Assemble.hpp	25;"	d
XCSOAR_TRACKING_SKYLINES_CLIENT_HPP	src/Tracking/SkyLines/Client.hpp	25;"	d
XCSOAR_TRACKING_SKYLINES_EXPORT_HPP	src/Tracking/SkyLines/Export.hpp	25;"	d
XCSOAR_TRACKING_SKYLINES_FEATURES_HPP	src/Tracking/SkyLines/Features.hpp	25;"	d
XCSOAR_TRACKING_SKYLINES_GLUE_HPP	src/Tracking/SkyLines/Glue.hpp	25;"	d
XCSOAR_TRACKING_SKYLINES_HANDLER_HPP	src/Tracking/SkyLines/Handler.hpp	25;"	d
XCSOAR_TRACKING_SKYLINES_IMPORT_HPP	src/Tracking/SkyLines/Import.hpp	25;"	d
XCSOAR_TRACKING_SKYLINES_KEY_HPP	src/Tracking/SkyLines/Key.hpp	25;"	d
XCSOAR_TRACKING_SKYLINES_PROTOCOL_HPP	src/Tracking/SkyLines/Protocol.hpp	33;"	d
XCSOAR_TRACKING_SKYLINES_QUEUE_HPP	src/Tracking/SkyLines/Queue.hpp	25;"	d
XCSOAR_TRACKING_SKYLINES_SERVER_HPP	src/Tracking/SkyLines/Server.hpp	25;"	d
XCSOAR_TRACKING_SKYLINES_SETTINGS_HPP	src/Tracking/SkyLines/Settings.hpp	25;"	d
XCSOAR_TRACKING_SKYLINES_TRAFFIC_HPP	src/Tracking/SkyLines/Data.hpp	25;"	d
XCSOAR_TRACK_LINE_RENDERER_HPP	src/Renderer/TrackLineRenderer.hpp	25;"	d
XCSOAR_TRACK_THREAD_HPP	src/Tracking/TrackingGlue.hpp	25;"	d
XCSOAR_TRAFFIC_DATABASES_HPP	src/FLARM/TrafficDatabases.hpp	25;"	d
XCSOAR_TRAFFIC_LOOK_HPP	src/Look/TrafficLook.hpp	25;"	d
XCSOAR_TRAFFIC_RENDERER_HPP	src/Renderer/TrafficRenderer.hpp	25;"	d
XCSOAR_TRAFFIC_SETTINGS_HPP	src/Gauge/TrafficSettings.hpp	25;"	d
XCSOAR_TRAFFIC_WIDGET_HPP	src/Gauge/BigTrafficWidget.hpp	25;"	d
XCSOAR_TRAIL_LOOK_HPP	src/Look/TrailLook.hpp	25;"	d
XCSOAR_TRAIL_RENDERER_HPP	src/Renderer/TrailRenderer.hpp	25;"	d
XCSOAR_TRI_STATE_JOB_HPP	src/Job/TriStateJob.hpp	25;"	d
XCSOAR_TRUNCATE_STRING_HPP	src/util/TruncateString.hpp	25;"	d
XCSOAR_TWO_TEXT_ROWS_RENDERER_HPP	src/Renderer/TwoTextRowsRenderer.hpp	25;"	d
XCSOAR_UI_ACTIONS_HPP	src/UIActions.hpp	25;"	d
XCSOAR_UI_CANVAS_GDI_GDIBITMAP_HPP	src/ui/canvas/gdi/GdiPlusBitmap.hpp	25;"	d
XCSOAR_UI_GLOBALS_HPP	src/UIGlobals.hpp	25;"	d
XCSOAR_UI_POINT_HPP	src/ui/dim/Point.hpp	25;"	d
XCSOAR_UI_PROFILE_HPP	src/Profile/UIProfile.hpp	25;"	d
XCSOAR_UI_RECEIVE_BLACKBOARD_HPP	src/UIReceiveBlackboard.hpp	25;"	d
XCSOAR_UI_RECT_HPP	src/ui/dim/Rect.hpp	25;"	d
XCSOAR_UI_SETTINGS_HPP	src/UISettings.hpp	25;"	d
XCSOAR_UI_SIZE_HPP	src/ui/dim/Size.hpp	25;"	d
XCSOAR_UI_STATE_HPP	src/UIState.hpp	25;"	d
XCSOAR_UNCOMPRESSED_IMAGE_HPP	src/ui/canvas/custom/UncompressedImage.hpp	25;"	d
XCSOAR_UNITS_DESCRIPTOR_HPP	src/Units/Descriptor.hpp	25;"	d
XCSOAR_UNITS_FORMATTER_HPP	src/Formatter/Units.hpp	25;"	d
XCSOAR_UNITS_GLUE_HPP	src/Units/UnitsGlue.hpp	25;"	d
XCSOAR_UNITS_GROUP_HPP	src/Units/Group.hpp	25;"	d
XCSOAR_UNITS_HPP	src/Units/Units.hpp	25;"	d
XCSOAR_UNITS_SETTINGS_HPP	src/Units/Settings.hpp	25;"	d
XCSOAR_UNITS_STORE_HPP	src/Units/UnitsStore.hpp	25;"	d
XCSOAR_UNITS_SYSTEM_HPP	src/Units/System.hpp	25;"	d
XCSOAR_UNITS_UNIT_HPP	src/Units/Unit.hpp	25;"	d
XCSOAR_UNIT_SYMBOL_RENDERER_HPP	src/Renderer/UnitSymbolRenderer.hpp	25;"	d
XCSOAR_USER_GEOPOINT_FORMATTER_HPP	src/Formatter/UserGeoPointFormatter.hpp	25;"	d
XCSOAR_USER_UNITS_FORMATTER_HPP	src/Formatter/UserUnits.hpp	25;"	d
XCSOAR_UTILS_FLARM_HPP	src/FLARM/FlarmDetails.hpp	24;"	d
XCSOAR_UTILS_PROFILE_HPP	src/Profile/ProfileKeys.hpp	25;"	d
XCSOAR_UTILS_SETTINGS_HPP	src/UtilsSettings.hpp	25;"	d
XCSOAR_UTILS_SYSTEM_H	src/UtilsSystem.hpp	24;"	d
XCSOAR_UTIL_ESCAPE_BACKSLASH_HPP	src/util/EscapeBackslash.hpp	25;"	d
XCSOAR_UTIL_UTF8_HPP	src/util/UTF8.hpp	25;"	d
XCSOAR_V7_CONFIG_WIDGET_HPP	src/Dialogs/Device/LX/V7ConfigWidget.hpp	25;"	d
XCSOAR_VALIDITY_HPP	src/NMEA/Validity.hpp	25;"	d
XCSOAR_VARIO_BAR_LOOK_HPP	src/Look/VarioBarLook.hpp	25;"	d
XCSOAR_VARIO_BAR_RENDERER_HPP	src/Renderer/VarioBarRenderer.hpp	25;"	d
XCSOAR_VARIO_INFO_HPP	src/NMEA/VarioInfo.hpp	25;"	d
XCSOAR_VARIO_LOOK_HPP	src/Look/VarioLook.hpp	25;"	d
XCSOAR_VARIO_SETTINGS_HPP	src/Gauge/VarioSettings.hpp	25;"	d
XCSOAR_VARIO_SOUND_SETTINGS_HPP	src/Audio/VarioSettings.hpp	25;"	d
XCSOAR_VEGA_ALERT_PARAMETERS_HPP	src/Dialogs/Device/Vega/AlertParameters.hpp	25;"	d
XCSOAR_VEGA_AUDIO_DEADBAND_PARAMETERS	src/Dialogs/Device/Vega/AudioDeadbandParameters.hpp	25;"	d
XCSOAR_VEGA_AUDIO_MODE_PARAMETERS	src/Dialogs/Device/Vega/AudioModeParameters.hpp	25;"	d
XCSOAR_VEGA_AUDIO_PARAMETERS	src/Dialogs/Device/Vega/AudioParameters.hpp	25;"	d
XCSOAR_VEGA_CALIBRATION_PARAMETERS	src/Dialogs/Device/Vega/CalibrationParameters.hpp	25;"	d
XCSOAR_VEGA_DISPLAY_PARAMETERS_HPP	src/Dialogs/Device/Vega/DisplayParameters.hpp	25;"	d
XCSOAR_VEGA_FLARM_ALERT_PARAMETERS_HPP	src/Dialogs/Device/Vega/FlarmAlertParameters.hpp	25;"	d
XCSOAR_VEGA_FLARM_ID_PARAMETERS_HPP	src/Dialogs/Device/Vega/FlarmIdentificationParameters.hpp	25;"	d
XCSOAR_VEGA_FLARM_REPEAT_PARAMETERS_HPP	src/Dialogs/Device/Vega/FlarmRepeatParameters.hpp	25;"	d
XCSOAR_VEGA_HARDWARE_PARAMETERS_HPP	src/Dialogs/Device/Vega/HardwareParameters.hpp	25;"	d
XCSOAR_VEGA_INTERNAL_HPP	src/Device/Driver/Vega/Internal.hpp	25;"	d
XCSOAR_VEGA_LIMIT_PARAMETERS_HPP	src/Dialogs/Device/Vega/LimitParameters.hpp	25;"	d
XCSOAR_VEGA_LOGGER_PARAMETERS_HPP	src/Dialogs/Device/Vega/LoggerParameters.hpp	25;"	d
XCSOAR_VEGA_MIXER_PARAMETERS_HPP	src/Dialogs/Device/Vega/MixerParameters.hpp	25;"	d
XCSOAR_VEGA_PARAMETERS_WIDGET_HPP	src/Dialogs/Device/Vega/VegaParametersWidget.hpp	25;"	d
XCSOAR_VEGA_SCHEMES_HPP	src/Dialogs/Device/Vega/Schemes.hpp	25;"	d
XCSOAR_VEGA_SWITCHES_DIALOG_HPP	src/Dialogs/Device/Vega/SwitchesDialog.hpp	25;"	d
XCSOAR_VEGA_SWITCH_STATE_HPP	src/NMEA/VegaSwitchState.hpp	25;"	d
XCSOAR_VEGA_TYPES_HPP	src/Dialogs/Device/Vega/Types.hpp	25;"	d
XCSOAR_VEGA_VOLATILE_HPP	src/Device/Driver/Vega/Volatile.hpp	25;"	d
XCSOAR_VERBOSE_OPERATION_HPP	src/Operation/VerboseOperationEnvironment.hpp	25;"	d
XCSOAR_VERSION_HPP	src/Version.hpp	25;"	d
XCSOAR_VERSION_INFO_H	src/NMEA/DeviceInfo.hpp	25;"	d
XCSOAR_VIEW_IMAGE_WIDGET_HPP	src/Widget/ViewImageWidget.hpp	25;"	d
XCSOAR_VOLKSLOGGER_UTIL_HPP	src/Device/Driver/Volkslogger/Util.hpp	25;"	d
XCSOAR_WARNING_COMPUTER_HPP	src/Computer/WarningComputer.hpp	25;"	d
XCSOAR_WAVE_COMPUTER_HPP	src/Computer/WaveComputer.hpp	25;"	d
XCSOAR_WAVE_LOOK_HPP	src/Look/WaveLook.hpp	25;"	d
XCSOAR_WAVE_RENDERER_HPP	src/Renderer/WaveRenderer.hpp	25;"	d
XCSOAR_WAVE_RESULT_HPP	src/Computer/WaveResult.hpp	25;"	d
XCSOAR_WAVE_SETTINGS_HPP	src/Computer/WaveSettings.hpp	25;"	d
XCSOAR_WAYPOINT_COMMANDS_WIDGET_HPP	src/Dialogs/Waypoint/WaypointCommandsWidget.hpp	25;"	d
XCSOAR_WAYPOINT_ICON_RENDERER_HPP	src/Renderer/WaypointIconRenderer.hpp	25;"	d
XCSOAR_WAYPOINT_INFO_WIDGET_HPP	src/Dialogs/Waypoint/WaypointInfoWidget.hpp	25;"	d
XCSOAR_WAYPOINT_LABEL_LIST_HPP	src/Renderer/WaypointLabelList.hpp	25;"	d
XCSOAR_WAYPOINT_LIST_BUILDER_HPP	src/Waypoint/WaypointListBuilder.hpp	25;"	d
XCSOAR_WAYPOINT_LIST_FILTER_HPP	src/Waypoint/WaypointFilter.hpp	25;"	d
XCSOAR_WAYPOINT_LIST_HPP	src/Waypoint/WaypointList.hpp	25;"	d
XCSOAR_WAYPOINT_LIST_RENDERER_HPP	src/Renderer/WaypointListRenderer.hpp	25;"	d
XCSOAR_WAYPOINT_PATTERNS_HPP	src/Waypoint/Patterns.hpp	25;"	d
XCSOAR_WAYPOINT_RENDERER_SETTINGS_HPP	src/Renderer/WaypointRendererSettings.hpp	25;"	d
XCSOAR_WAY_POINT_GLUE_HPP	src/Waypoint/WaypointGlue.hpp	25;"	d
XCSOAR_WAY_POINT_RENDERER_HPP	src/Renderer/WaypointRenderer.hpp	25;"	d
XCSOAR_WEATHER_PCMET_SETTINGS_HPP	src/Weather/PCMet/Settings.hpp	25;"	d
XCSOAR_WEATHER_PROFILE_HPP	src/Profile/WeatherProfile.hpp	25;"	d
XCSOAR_WEATHER_RASP_CACHE_HPP	src/Weather/Rasp/RaspCache.hpp	25;"	d
XCSOAR_WEATHER_RASP_PROVIDERS_HPP	src/Weather/Rasp/Providers.hpp	25;"	d
XCSOAR_WEATHER_RASP_RENDERER_HPP	src/Weather/Rasp/RaspRenderer.hpp	25;"	d
XCSOAR_WEATHER_RASP_STORE_HPP	src/Weather/Rasp/RaspStore.hpp	25;"	d
XCSOAR_WEATHER_RASP_STYLE_HPP	src/Weather/Rasp/RaspStyle.hpp	25;"	d
XCSOAR_WEATHER_SETTINGS_HPP	src/Weather/Settings.hpp	25;"	d
XCSOAR_WEATHER_UI_STATE_HPP	src/Weather/WeatherUIState.hpp	25;"	d
XCSOAR_WIDGET_DIALOG_HPP	src/Dialogs/WidgetDialog.hpp	25;"	d
XCSOAR_WIDGET_HPP	src/Widget/Widget.hpp	25;"	d
XCSOAR_WINDOW_PROJECTION_HPP	src/Projection/WindowProjection.hpp	25;"	d
XCSOAR_WINDOW_STATS_COMPUTER_HPP	src/Engine/Task/Computer/WindowStatsComputer.hpp	24;"	d
XCSOAR_WINDOW_STATS_HPP	src/Engine/Task/Stats/WindowStats.hpp	24;"	d
XCSOAR_WINDOW_WIDGET_HPP	src/Widget/WindowWidget.hpp	25;"	d
XCSOAR_WIND_ARROW_LOOK_HPP	src/Look/WindArrowLook.hpp	25;"	d
XCSOAR_WIND_ARROW_RENDERER_HPP	src/Renderer/WindArrowRenderer.hpp	25;"	d
XCSOAR_WIND_CHART_RENDERER_HPP	src/Renderer/WindChartRenderer.hpp	25;"	d
XCSOAR_WIND_COMPUTER_HPP	src/Computer/Wind/Computer.hpp	25;"	d
XCSOAR_WIND_EDIT_PANEL_HPP	src/InfoBoxes/Panel/WindEdit.hpp	25;"	d
XCSOAR_WIND_MEASUREMENT_LIST_HPP	src/Computer/Wind/MeasurementList.hpp	25;"	d
XCSOAR_WIND_MONITOR_HPP	src/Monitor/WindMonitor.hpp	25;"	d
XCSOAR_WIND_SETTINGS_HPP	src/Computer/Wind/Settings.hpp	25;"	d
XCSOAR_WIND_SETTINGS_PANEL_HPP	src/Dialogs/Settings/WindSettingsPanel.hpp	25;"	d
XCSOAR_WIND_STORE_HPP	src/Computer/Wind/Store.hpp	25;"	d
XCSOAR_WRAP_CLOCK_HPP	src/time/WrapClock.hpp	25;"	d
XCSOAR_XCTRACERVARIO_INTERNAL_HPP	src/Device/Driver/XCTracer/Internal.hpp	25;"	d
XCSOAR_XML_NODE_HPP	src/XML/Node.hpp	30;"	d
XCSOAR_XML_PARSER_HPP	src/XML/Parser.hpp	30;"	d
XCSPROFILE	src/Profile/Profile.cpp	41;"	d	file:
XCSoarInterface	src/ActionInterface.hpp	/^namespace XCSoarInterface {$/;"	n
XCSoar_ProductToken	src/Version.cpp	/^const TCHAR XCSoar_ProductToken[] = _T("XCSoar v" VERSION VERSION_SUFFIX "-" TARGET GIT_SUFFIX);$/;"	v
XCSoar_Version	src/Version.cpp	/^const TCHAR XCSoar_Version[] = _T(VERSION);$/;"	v
XCSoar_VersionLong	src/Version.cpp	/^const TCHAR XCSoar_VersionLong[] = _T(VERSION VERSION_SUFFIX);$/;"	v
XCSoar_VersionString	src/Version.cpp	/^const TCHAR XCSoar_VersionString[] = _T(VERSION VERSION_SUFFIX "-" TARGET);$/;"	v
XCSoar_VersionStringOld	src/Version.cpp	/^const TCHAR XCSoar_VersionStringOld[] = _T(TARGET " " VERSION VERSION_SUFFIX " " __DATE__);$/;"	v
XCTRC	src/Device/Driver/XCTracer/Parser.cpp	/^XCTracerDevice::XCTRC(NMEAInputLine &line, NMEAInfo &info)$/;"	f	class:XCTracerDevice
XCTracerCreateOnPort	src/Device/Driver/XCTracer/Register.cpp	/^XCTracerCreateOnPort(const DeviceConfig &config, Port &com_port)$/;"	f	file:
XContestFree	src/Engine/Contest/Solvers/XContestFree.hpp	/^class XContestFree : public ContestDijkstra {$/;"	c
XContestTriangle	src/Engine/Contest/Solvers/XContestTriangle.hpp	/^class XContestTriangle : public TriangleContest {$/;"	c
XML	src/XML/Parser.cpp	/^namespace XML {$/;"	n	file:
XML	src/XML/Parser.hpp	/^namespace XML {$/;"	n
XMLNode	src/XML/Node.cpp	/^XMLNode::XMLNode(const TCHAR *name, bool is_declaration)$/;"	f	class:XMLNode
XMLNode	src/XML/Node.cpp	/^XMLNode::XMLNode(const TCHAR *name, size_t name_length, bool is_declaration)$/;"	f	class:XMLNode
XMLNode	src/XML/Node.hpp	/^  XMLNode(): d(nullptr) {}$/;"	f	class:XMLNode
XMLNode	src/XML/Node.hpp	/^  XMLNode(XMLNode &&other)$/;"	f	class:XMLNode
XMLNode	src/XML/Node.hpp	/^class XMLNode {$/;"	c
XShape	src/Topography/XShape.cpp	/^XShape::XShape(shapefileObj *shpfile, const GeoPoint &file_center, int i,$/;"	f	class:XShape
XShape	src/Topography/XShape.hpp	/^class XShape {$/;"	c
XVCCreateOnPort	src/Device/Driver/XCVario.cpp	/^XVCCreateOnPort(const DeviceConfig &config, Port &com_port)$/;"	f	file:
XVCDevice	src/Device/Driver/XCVario.cpp	/^  XVCDevice(Port &_port):port(_port) {}$/;"	f	class:XVCDevice
XVCDevice	src/Device/Driver/XCVario.cpp	/^class XVCDevice : public AbstractDevice {$/;"	c	file:
XYDataStore	src/Math/XYDataStore.hpp	/^class XYDataStore$/;"	c
X_AVERAGE	src/Dialogs/Device/Vega/Types.hpp	30;"	d
X_MACCREADY	src/Dialogs/Device/Vega/Types.hpp	29;"	d
X_NONE	src/Dialogs/Device/Vega/Types.hpp	28;"	d
YAtX	src/Terrain/ScanLine.cpp	/^YAtX(const GridRay &ray, int x)$/;"	f	file:
YELLOW	src/FLARM/Color.hpp	/^  YELLOW,$/;"	m	class:FlarmColor
YOFFSET	src/Gauge/GaugeVario.hpp	/^  static constexpr int YOFFSET = 36;$/;"	m	class:GaugeVario
Y_GROSS_ZERO	src/Dialogs/Device/Vega/Types.hpp	36;"	d
Y_NET_MACCREADY	src/Dialogs/Device/Vega/Types.hpp	39;"	d
Y_NET_MACCREADY_HALF	src/Dialogs/Device/Vega/Types.hpp	37;"	d
Y_NONE	src/Dialogs/Device/Vega/Types.hpp	33;"	d
Y_RELATIVE_MACCREADY	src/Dialogs/Device/Vega/Types.hpp	38;"	d
Y_RELATIVE_MACCREADY_HALF	src/Dialogs/Device/Vega/Types.hpp	35;"	d
Y_RELATIVE_ZERO	src/Dialogs/Device/Vega/Types.hpp	34;"	d
ZANDER	src/Waypoint/WaypointFileType.hpp	/^  ZANDER,$/;"	m	class:WaypointFileType
ZERO_FINDER_HPP	src/Math/ZeroFinder.hpp	24;"	d
ZERO_FREQUENCY	src/Dialogs/Settings/Panels/AudioVarioConfigPanel.cpp	/^  ZERO_FREQUENCY,$/;"	e	enum:ControlIndex	file:
ZEXPORT	src/zzip/conf.h	246;"	d
ZEXTERN	src/zzip/conf.h	247;"	d
ZLIB_ERROR_HXX	src/io/ZlibError.hxx	31;"	d
ZZIP_32K	src/zzip/lib.h	67;"	d
ZZIP_ALLOWREAL	src/zzip/zzip.h	57;"	d
ZZIP_BACKSLASH_DIRSEP	src/zzip/file.c	107;"	d	file:
ZZIP_BACKSLASH_DIRSEP	src/zzip/file.c	109;"	d	file:
ZZIP_BACKSLASH_DIRSEP	src/zzip/file.c	111;"	d	file:
ZZIP_BRANCH_OVER	src/zzip/__hints.h	189;"	d
ZZIP_BRANCH_OVER	src/zzip/__hints.h	191;"	d
ZZIP_BUFSIZ	src/zzip/zip.c	163;"	d	file:
ZZIP_BUFSIZ	src/zzip/zip.c	168;"	d	file:
ZZIP_BYTE_ORDER	src/zzip/autoconf.h	20;"	d
ZZIP_BYTE_ORDER	src/zzip/autoconf.h	22;"	d
ZZIP_BYTE_ORDER	src/zzip/autoconf.h	24;"	d
ZZIP_BYTE_ORDER	src/zzip/autoconf.h	26;"	d
ZZIP_BYTE_ORDER	src/zzip/autoconf.h	28;"	d
ZZIP_BYTE_ORDER	src/zzip/autoconf.h	30;"	d
ZZIP_BYTE_ORDER	src/zzip/autoconf.h	32;"	d
ZZIP_CASEINSENSITIVE	src/zzip/zzip.h	47;"	d
ZZIP_CASELESS	src/zzip/zzip.h	52;"	d
ZZIP_CHECK	src/zzip/format.h	55;"	d
ZZIP_CHECKMAGIC	src/zzip/format.h	50;"	d
ZZIP_CORRECT_ROOTSEEK	src/zzip/zip.c	32;"	d	file:
ZZIP_CORRUPTED	src/zzip/zzip.h	/^    ZZIP_CORRUPTED =     ZZIP_ERROR-31,$/;"	e	enum:__anon186
ZZIP_DEFLATED_LOW_COMPR	src/zzip/format.h	246;"	d
ZZIP_DEFLATED_MAX_COMPR	src/zzip/format.h	245;"	d
ZZIP_DEFLATED_MIN_COMPR	src/zzip/format.h	247;"	d
ZZIP_DEFLATED_STD_COMPR	src/zzip/format.h	244;"	d
ZZIP_DIM	src/zzip/__hints.h	174;"	d
ZZIP_DIR	src/zzip/zzip.h	/^typedef struct zzip_dir		ZZIP_DIR;$/;"	t	typeref:struct:zzip_dir
ZZIP_DIRENT	src/zzip/zzip.h	/^typedef struct zzip_dirent 	ZZIP_DIRENT;$/;"	t	typeref:struct:zzip_dirent
ZZIP_DIRSIZE	src/zzip/zzip.h	/^    ZZIP_DIRSIZE =       ZZIP_ERROR-27,$/;"	e	enum:__anon186
ZZIP_DIR_EDH_MISSING	src/zzip/zzip.h	/^    ZZIP_DIR_EDH_MISSING = ZZIP_ERROR-26,$/;"	e	enum:__anon186
ZZIP_DIR_LARGEFILE	src/zzip/zzip.h	/^    ZZIP_DIR_LARGEFILE = ZZIP_ERROR-33$/;"	e	enum:__anon186
ZZIP_DIR_OPEN	src/zzip/zzip.h	/^    ZZIP_DIR_OPEN =      ZZIP_ERROR-21, \/* failed to open zipfile, see errno for details *\/$/;"	e	enum:__anon186
ZZIP_DIR_READ	src/zzip/zzip.h	/^    ZZIP_DIR_READ =      ZZIP_ERROR-24, \/* failed to read zipfile, see errno for details *\/$/;"	e	enum:__anon186
ZZIP_DIR_SEEK	src/zzip/zzip.h	/^    ZZIP_DIR_SEEK =      ZZIP_ERROR-23, \/* failed to lseek zipfile, see errno for details *\/$/;"	e	enum:__anon186
ZZIP_DIR_STAT	src/zzip/zzip.h	/^    ZZIP_DIR_STAT =      ZZIP_ERROR-22, \/* failed to fstat zipfile, see errno for details *\/$/;"	e	enum:__anon186
ZZIP_DIR_TOO_SHORT	src/zzip/zzip.h	/^    ZZIP_DIR_TOO_SHORT = ZZIP_ERROR-25,$/;"	e	enum:__anon186
ZZIP_DISK64_LOCATOR_CHECKMAGIC	src/zzip/format.h	196;"	d
ZZIP_DISK64_LOCATOR_MAGIC	src/zzip/format.h	195;"	d
ZZIP_DISK64_TRAILER	src/zzip/types.h	/^typedef struct zzip_disk64_trailer ZZIP_DISK64_TRAILER;$/;"	t	typeref:struct:zzip_disk64_trailer
ZZIP_DISK64_TRAILER	src/zzip/zip.c	44;"	d	file:
ZZIP_DISK64_TRAILER_CHECKMAGIC	src/zzip/format.h	208;"	d
ZZIP_DISK64_TRAILER_MAGIC	src/zzip/format.h	207;"	d
ZZIP_DISK_ENTRY	src/zzip/types.h	/^typedef struct zzip_disk_entry  ZZIP_DISK_ENTRY;$/;"	t	typeref:struct:zzip_disk_entry
ZZIP_DISK_ENTRY_CHECKMAGIC	src/zzip/format.h	106;"	d
ZZIP_DISK_ENTRY_MAGIC	src/zzip/format.h	105;"	d
ZZIP_DISK_TRAILER	src/zzip/types.h	/^typedef struct zzip_disk_trailer ZZIP_DISK_TRAILER;$/;"	t	typeref:struct:zzip_disk_trailer
ZZIP_DISK_TRAILER_CHECKMAGIC	src/zzip/format.h	157;"	d
ZZIP_DISK_TRAILER_MAGIC	src/zzip/format.h	156;"	d
ZZIP_DLL	src/zzip/conf.h	211;"	d
ZZIP_DLL	src/zzip/conf.h	212;"	d
ZZIP_END1	src/zzip/__hints.h	180;"	d
ZZIP_END1	src/zzip/__hints.h	183;"	d
ZZIP_ENOENT	src/zzip/zzip.h	/^    ZZIP_ENOENT =        ZZIP_ERROR-28,$/;"	e	enum:__anon186
ZZIP_ERROR	src/zzip/zzip.h	24;"	d
ZZIP_EXCL	src/zzip/file.c	550;"	d	file:
ZZIP_EXTRAFLAGS	src/zzip/zzip.h	49;"	d
ZZIP_EXTRA_BLOCK	src/zzip/types.h	/^typedef struct zzip_extra_block ZZIP_EXTRA_BLOCK;$/;"	t	typeref:struct:zzip_extra_block
ZZIP_EXTRA_ZIP64_CHECK	src/zzip/format.h	183;"	d
ZZIP_EXTRA_ZIP64_MAGIC	src/zzip/format.h	182;"	d
ZZIP_FACTORY	src/zzip/zzip.h	56;"	d
ZZIP_FILE	src/zzip/zzip.h	/^typedef struct zzip_file	ZZIP_FILE;$/;"	t	typeref:struct:zzip_file
ZZIP_FILE_HEADER	src/zzip/types.h	/^typedef struct zzip_file_header ZZIP_FILE_HEADER;$/;"	t	typeref:struct:zzip_file_header
ZZIP_FILE_HEADER_CHECKMAGIC	src/zzip/format.h	63;"	d
ZZIP_FILE_HEADER_MAGIC	src/zzip/format.h	62;"	d
ZZIP_FILE_TRAILER	src/zzip/types.h	/^typedef struct zzip_file_trailer ZZIP_FILE_TRAILER;$/;"	t	typeref:struct:zzip_file_trailer
ZZIP_FILE_TRAILER_CHECKMAGIC	src/zzip/format.h	87;"	d
ZZIP_FILE_TRAILER_MAGIC	src/zzip/format.h	86;"	d
ZZIP_FOR1	src/zzip/__hints.h	179;"	d
ZZIP_FOR1	src/zzip/__hints.h	182;"	d
ZZIP_FUNC	src/zzip/__hints.h	157;"	d
ZZIP_FUNC	src/zzip/__hints.h	160;"	d
ZZIP_FUNC	src/zzip/__hints.h	163;"	d
ZZIP_FUNCTION	src/zzip/__hints.h	158;"	d
ZZIP_FUNCTION	src/zzip/__hints.h	161;"	d
ZZIP_FUNCTION	src/zzip/__hints.h	164;"	d
ZZIP_GET16	src/zzip/fetch.h	53;"	d
ZZIP_GET16	src/zzip/fetch.h	60;"	d
ZZIP_GET16	src/zzip/fetch.h	69;"	d
ZZIP_GET32	src/zzip/fetch.h	54;"	d
ZZIP_GET32	src/zzip/fetch.h	61;"	d
ZZIP_GET32	src/zzip/fetch.h	68;"	d
ZZIP_GET64	src/zzip/fetch.h	55;"	d
ZZIP_GET64	src/zzip/fetch.h	62;"	d
ZZIP_GET64	src/zzip/fetch.h	67;"	d
ZZIP_GNUC_ATLEAST	src/zzip/__hints.h	10;"	d
ZZIP_GNUC_ATLEAST	src/zzip/__hints.h	13;"	d
ZZIP_GNUC_ATLEAST	src/zzip/__hints.h	7;"	d
ZZIP_GNUC_CONST	src/zzip/__hints.h	37;"	d
ZZIP_GNUC_CONST	src/zzip/__hints.h	39;"	d
ZZIP_GNUC_DEPRECATED	src/zzip/__hints.h	91;"	d
ZZIP_GNUC_DEPRECATED	src/zzip/__hints.h	93;"	d
ZZIP_GNUC_EXTENSION	src/zzip/__hints.h	19;"	d
ZZIP_GNUC_EXTENSION	src/zzip/__hints.h	21;"	d
ZZIP_GNUC_FORMAT	src/zzip/__hints.h	127;"	d
ZZIP_GNUC_FORMAT	src/zzip/__hints.h	129;"	d
ZZIP_GNUC_LIB_INTERNAL	src/zzip/__hints.h	118;"	d
ZZIP_GNUC_LIB_INTERNAL	src/zzip/__hints.h	120;"	d
ZZIP_GNUC_LIB_PRIVATE	src/zzip/__hints.h	109;"	d
ZZIP_GNUC_LIB_PRIVATE	src/zzip/__hints.h	111;"	d
ZZIP_GNUC_LIB_PROTECTED	src/zzip/__hints.h	100;"	d
ZZIP_GNUC_LIB_PROTECTED	src/zzip/__hints.h	102;"	d
ZZIP_GNUC_NONNULL	src/zzip/__hints.h	73;"	d
ZZIP_GNUC_NONNULL	src/zzip/__hints.h	75;"	d
ZZIP_GNUC_NORETURN	src/zzip/__hints.h	55;"	d
ZZIP_GNUC_NORETURN	src/zzip/__hints.h	57;"	d
ZZIP_GNUC_NOTHROW	src/zzip/__hints.h	82;"	d
ZZIP_GNUC_NOTHROW	src/zzip/__hints.h	84;"	d
ZZIP_GNUC_NO_INSTRUMENT	src/zzip/__hints.h	64;"	d
ZZIP_GNUC_NO_INSTRUMENT	src/zzip/__hints.h	66;"	d
ZZIP_GNUC_PACKED	src/zzip/__hints.h	150;"	d
ZZIP_GNUC_PACKED	src/zzip/__hints.h	152;"	d
ZZIP_GNUC_PACKED	src/zzip/format.h	/^} ZZIP_GNUC_PACKED;$/;"	v	typeref:struct:zzip_disk64_locator
ZZIP_GNUC_PACKED	src/zzip/format.h	/^} ZZIP_GNUC_PACKED;$/;"	v	typeref:struct:zzip_disk64_trailer
ZZIP_GNUC_PACKED	src/zzip/format.h	/^} ZZIP_GNUC_PACKED;$/;"	v	typeref:struct:zzip_disk_entry
ZZIP_GNUC_PACKED	src/zzip/format.h	/^} ZZIP_GNUC_PACKED;$/;"	v	typeref:struct:zzip_disk_trailer
ZZIP_GNUC_PACKED	src/zzip/format.h	/^} ZZIP_GNUC_PACKED;$/;"	v	typeref:struct:zzip_dostime
ZZIP_GNUC_PACKED	src/zzip/format.h	/^} ZZIP_GNUC_PACKED;$/;"	v	typeref:struct:zzip_extra_block
ZZIP_GNUC_PACKED	src/zzip/format.h	/^} ZZIP_GNUC_PACKED;$/;"	v	typeref:struct:zzip_extra_zip64
ZZIP_GNUC_PACKED	src/zzip/format.h	/^} ZZIP_GNUC_PACKED;$/;"	v	typeref:struct:zzip_file_header
ZZIP_GNUC_PACKED	src/zzip/format.h	/^} ZZIP_GNUC_PACKED;$/;"	v	typeref:struct:zzip_file_trailer
ZZIP_GNUC_PACKED	src/zzip/format.h	/^} ZZIP_GNUC_PACKED;$/;"	v	typeref:struct:zzip_root_dirent
ZZIP_GNUC_PACKED	src/zzip/format.h	/^} ZZIP_GNUC_PACKED;$/;"	v	typeref:struct:zzip_version
ZZIP_GNUC_PRINTF	src/zzip/__hints.h	143;"	d
ZZIP_GNUC_PRINTF	src/zzip/__hints.h	145;"	d
ZZIP_GNUC_PURE	src/zzip/__hints.h	28;"	d
ZZIP_GNUC_PURE	src/zzip/__hints.h	30;"	d
ZZIP_GNUC_SCANF	src/zzip/__hints.h	135;"	d
ZZIP_GNUC_SCANF	src/zzip/__hints.h	137;"	d
ZZIP_GNUC_UNUSED	src/zzip/__hints.h	46;"	d
ZZIP_GNUC_UNUSED	src/zzip/__hints.h	48;"	d
ZZIP_HAVE_ALIGNED_ACCESS_REQUIRED	src/zzip/fetch.h	30;"	d
ZZIP_HAVE_BYTESWAP_H	src/zzip/_config.h	17;"	d
ZZIP_HAVE_DIRENT_H	src/zzip/_config.h	27;"	d
ZZIP_HAVE_DLFCN_H	src/zzip/_config.h	32;"	d
ZZIP_HAVE_FNMATCH_H	src/zzip/_config.h	37;"	d
ZZIP_HAVE_INTTYPES_H	src/zzip/_config.h	42;"	d
ZZIP_HAVE_MEMORY_H	src/zzip/_config.h	50;"	d
ZZIP_HAVE_PREAD	src/zzip/file.c	513;"	d	file:
ZZIP_HAVE_STDINT_H	src/zzip/_config.h	58;"	d
ZZIP_HAVE_STDLIB_H	src/zzip/_config.h	63;"	d
ZZIP_HAVE_STRCASECMP	src/zzip/_config.h	68;"	d
ZZIP_HAVE_STRINGS_H	src/zzip/_config.h	73;"	d
ZZIP_HAVE_STRING_H	src/zzip/_config.h	78;"	d
ZZIP_HAVE_STRNDUP	src/zzip/_config.h	83;"	d
ZZIP_HAVE_SYS_MMAN_H	src/zzip/_config.h	95;"	d
ZZIP_HAVE_SYS_PARAM_H	src/zzip/_config.h	104;"	d
ZZIP_HAVE_SYS_STAT_H	src/zzip/_config.h	109;"	d
ZZIP_HAVE_SYS_TYPES_H	src/zzip/_config.h	114;"	d
ZZIP_HAVE_UNISTD_H	src/zzip/_config.h	119;"	d
ZZIP_HAVE_ZLIB_H	src/zzip/_config.h	133;"	d
ZZIP_IGNOREPATH	src/zzip/zzip.h	48;"	d
ZZIP_IO_USE_MMAP	src/zzip/plugin.h	88;"	d
ZZIP_IS_COMPRLEVEL	src/zzip/format.h	226;"	d
ZZIP_IS_DEFLATED	src/zzip/format.h	239;"	d
ZZIP_IS_DEFLATED_BETTER	src/zzip/format.h	240;"	d
ZZIP_IS_ENCRYPTED	src/zzip/format.h	225;"	d
ZZIP_IS_IMPLODED	src/zzip/format.h	237;"	d
ZZIP_IS_IMPLODED_BETTER	src/zzip/format.h	241;"	d
ZZIP_IS_PATCHED	src/zzip/format.h	228;"	d
ZZIP_IS_REDUCEDx1	src/zzip/format.h	233;"	d
ZZIP_IS_REDUCEDx2	src/zzip/format.h	234;"	d
ZZIP_IS_REDUCEDx3	src/zzip/format.h	235;"	d
ZZIP_IS_REDUCEDx4	src/zzip/format.h	236;"	d
ZZIP_IS_SHRUNK	src/zzip/format.h	232;"	d
ZZIP_IS_STORED	src/zzip/format.h	231;"	d
ZZIP_IS_STREAMED	src/zzip/format.h	227;"	d
ZZIP_IS_TOKENIZED	src/zzip/format.h	238;"	d
ZZIP_LARGEFILE_RENAME	src/zzip/conf.h	110;"	d
ZZIP_LARGEFILE_RENAME	src/zzip/conf.h	112;"	d
ZZIP_LARGEFILE_RENAME	src/zzip/conf.h	114;"	d
ZZIP_LT_OBJDIR	src/zzip/_config.h	143;"	d
ZZIP_NOCTTY	src/zzip/file.c	561;"	d	file:
ZZIP_NOCTTY	src/zzip/file.c	563;"	d	file:
ZZIP_NONBLOCK	src/zzip/file.c	559;"	d	file:
ZZIP_NOPATHS	src/zzip/zzip.h	53;"	d
ZZIP_NO_ERROR	src/zzip/zzip.h	/^    ZZIP_NO_ERROR = 0,	\/* no error, may be used if user sets it. *\/$/;"	e	enum:__anon186
ZZIP_ONLYZIP	src/zzip/file.c	749;"	d	file:
ZZIP_ONLYZIP	src/zzip/zzip.h	55;"	d
ZZIP_OUTOFMEM	src/zzip/zzip.h	/^    ZZIP_OUTOFMEM =      ZZIP_ERROR-20, \/* out of memory *\/$/;"	e	enum:__anon186
ZZIP_PACKAGE	src/zzip/_config.h	148;"	d
ZZIP_PACKAGE_BUGREPORT	src/zzip/_config.h	153;"	d
ZZIP_PACKAGE_NAME	src/zzip/_config.h	158;"	d
ZZIP_PACKAGE_STRING	src/zzip/_config.h	163;"	d
ZZIP_PACKAGE_TARNAME	src/zzip/_config.h	168;"	d
ZZIP_PACKAGE_URL	src/zzip/_config.h	173;"	d
ZZIP_PACKAGE_VERSION	src/zzip/_config.h	178;"	d
ZZIP_PLUGIN_IO_SYS	src/zzip/plugin.h	37;"	d
ZZIP_PREFERZIP	src/zzip/zzip.h	54;"	d
ZZIP_ROOT_DIRENT	src/zzip/types.h	/^typedef struct zzip_root_dirent  ZZIP_ROOT_DIRENT;$/;"	t	typeref:struct:zzip_root_dirent
ZZIP_ROOT_DIRENT_CHECKMAGIC	src/zzip/format.h	133;"	d
ZZIP_ROOT_DIRENT_MAGIC	src/zzip/format.h	132;"	d
ZZIP_SET16	src/zzip/fetch.h	56;"	d
ZZIP_SET16	src/zzip/fetch.h	63;"	d
ZZIP_SET16	src/zzip/fetch.h	72;"	d
ZZIP_SET32	src/zzip/fetch.h	57;"	d
ZZIP_SET32	src/zzip/fetch.h	64;"	d
ZZIP_SET32	src/zzip/fetch.h	71;"	d
ZZIP_SET64	src/zzip/fetch.h	58;"	d
ZZIP_SET64	src/zzip/fetch.h	65;"	d
ZZIP_SET64	src/zzip/fetch.h	70;"	d
ZZIP_SIZEOF_INT	src/zzip/_config.h	183;"	d
ZZIP_SIZEOF_LONG	src/zzip/_config.h	188;"	d
ZZIP_SIZEOF_SHORT	src/zzip/_config.h	193;"	d
ZZIP_STAT	src/zzip/zzip.h	/^typedef struct zzip_dirent 	ZZIP_STAT;$/;"	t	typeref:struct:zzip_dirent
ZZIP_STDC_HEADERS	src/zzip/_config.h	198;"	d
ZZIP_STRING	src/zzip/__hints.h	169;"	d
ZZIP_STRING_	src/zzip/__hints.h	170;"	d
ZZIP_SYNC	src/zzip/file.c	553;"	d	file:
ZZIP_SYNC	src/zzip/file.c	555;"	d	file:
ZZIP_THREADED	src/zzip/zzip.h	58;"	d
ZZIP_UNDEF	src/zzip/zzip.h	/^    ZZIP_UNDEF =         ZZIP_ERROR-32,$/;"	e	enum:__anon186
ZZIP_UNSUPP_COMPR	src/zzip/zzip.h	/^    ZZIP_UNSUPP_COMPR =  ZZIP_ERROR-29,$/;"	e	enum:__anon186
ZZIP_USE_INTERNAL	src/zzip/stat.c	24;"	d	file:
ZZIP_UTIL_H	src/zzip/util.h	2;"	d
ZZIP_VERSION	src/zzip/_config.h	203;"	d
ZZIP_WORDS_BIGENDIAN	src/zzip/autoconf.h	37;"	d
ZZIP_WORDS_BIGENDIAN	src/zzip/autoconf.h	41;"	d
ZZIP_WRONLY	src/zzip/file.c	549;"	d	file:
ZZIP___int64	src/zzip/_config.h	226;"	d
ZZIP_dir_real	src/zzip/info.h	15;"	d
ZZIP_dirfd	src/zzip/info.h	14;"	d
ZZIP_dirhandle	src/zzip/info.h	13;"	d
ZZIP_error	src/zzip/info.h	11;"	d
ZZIP_file_real	src/zzip/info.h	16;"	d
ZZIP_reafd	src/zzip/info.h	18;"	d
ZZIP_realdir	src/zzip/info.h	17;"	d
ZZIP_seterror	src/zzip/info.h	12;"	d
ZZIP_ssize_t	src/zzip/_config.h	260;"	d
ZanderCreateOnPort	src/Device/Driver/Zander.cpp	/^ZanderCreateOnPort(const DeviceConfig &config, Port &com_port)$/;"	f	file:
ZanderDevice	src/Device/Driver/Zander.cpp	/^class ZanderDevice : public AbstractDevice {$/;"	c	file:
Zero	src/Atmosphere/Pressure.hpp	/^  AtmosphericPressure Zero() {$/;"	f	class:AtmosphericPressure
Zero	src/Engine/Task/Ordered/Points/AATPoint.hpp	/^  static constexpr RangeAndRadial Zero() {$/;"	f	struct:RangeAndRadial
Zero	src/Geo/GeoPoint.hpp	/^  static GeoPoint Zero() {$/;"	f	struct:GeoPoint
Zero	src/Geo/GeoVector.hpp	/^  constexpr static GeoVector Zero() {$/;"	f	struct:GeoVector
Zero	src/Geo/SpeedVector.hpp	/^  static constexpr SpeedVector Zero() {$/;"	f	struct:SpeedVector
Zero	src/Math/Angle.hpp	/^  static Angle Zero() {$/;"	f	class:Angle
ZeroFinder	src/Math/ZeroFinder.hpp	/^class ZeroFinder {$/;"	c
ZigZagWindEnabled	src/Computer/Wind/Settings.hpp	/^  bool ZigZagWindEnabled() const {$/;"	f	struct:WindSettings
ZipArchive	src/io/ZipArchive.cpp	/^ZipArchive::ZipArchive(Path path)$/;"	f	class:ZipArchive
ZipArchive	src/io/ZipArchive.hpp	/^  ZipArchive(ZipArchive &&src):dir(src.dir) {$/;"	f	class:ZipArchive
ZipArchive	src/io/ZipArchive.hpp	/^class ZipArchive {$/;"	c
ZipLineReader	src/io/ZipLineReader.hpp	/^  ZipLineReader(struct zzip_dir *dir, const char *path,$/;"	f	class:ZipLineReader
ZipLineReader	src/io/ZipLineReader.hpp	/^class ZipLineReader : public ConvertLineReader {$/;"	c
ZipLineReaderA	src/io/ZipLineReader.hpp	/^  ZipLineReaderA(struct zzip_dir *dir, const char *path)$/;"	f	class:ZipLineReaderA
ZipLineReaderA	src/io/ZipLineReader.hpp	/^class ZipLineReaderA : public NLineReader {$/;"	c
ZipReader	src/io/ZipReader.cpp	/^ZipReader::ZipReader(struct zzip_dir *dir, const char *path)$/;"	f	class:ZipReader
ZoomIn	src/Gauge/BigTrafficWidget.cpp	/^FlarmTrafficControl::ZoomIn()$/;"	f	class:FlarmTrafficControl
ZoomOut	src/Gauge/BigTrafficWidget.cpp	/^FlarmTrafficControl::ZoomOut()$/;"	f	class:FlarmTrafficControl
_	src/Language/Language.hpp	32;"	d
_	src/Language/Language.hpp	66;"	d
_255	src/zzip/zip.c	39;"	d	file:
_255	src/zzip/zip.c	41;"	d	file:
_BeginSuspend	src/thread/WorkerThread.hpp	/^  void _BeginSuspend() {$/;"	f	class:WorkerThread
_CONVEXFILTER_H	src/Math/ConvexFilter.hpp	29;"	d
_CompositingFilter	src/Topography/shapelib/mapserver.h	/^  typedef struct _CompositingFilter{$/;"	s
_DrawThermalBand	src/Renderer/ThermalBandRenderer.cpp	/^ThermalBandRenderer::_DrawThermalBand(const MoreData &basic,$/;"	f	class:ThermalBandRenderer
_FILE_OFFSET_BITS	src/zzip/conf.h	122;"	d
_FilterNode	src/Topography/shapelib/mapserver.h	/^  typedef struct _FilterNode {$/;"	s
_GNU_SOURCE	src/Topography/shapelib/mapserver.h	43;"	d
_HISTOGRAM_H	src/Math/Histogram.hpp	25;"	d
_HUGE_ENUF	src/Terrain/jasper/jas_types.h	106;"	d
_LARGEFILE_SOURCE	src/zzip/conf.h	132;"	d
_LARGE_FILES	src/zzip/conf.h	127;"	d
_LEASTSQS_H	src/Math/LeastSquares.hpp	49;"	d
_Lambda	src/lua/Util.hxx	/^	_Lambda(U &&u):T(std::forward<U>(u)) {}$/;"	f	struct:Lua::StackIndex::LightUserData::_Lambda
_Lambda	src/lua/Util.hxx	/^struct _Lambda : T {$/;"	s	struct:Lua::StackIndex::LightUserData
_LayerCompositer	src/Topography/shapelib/mapserver.h	/^  typedef struct _LayerCompositer{$/;"	s
_MAPSERVER_CONFIG_H	src/Topography/shapelib/mapserver-config.h	2;"	d
_PushTuple	src/lua/Util.hxx	/^struct _PushTuple {$/;"	s	struct:Lua::StackIndex::LightUserData
_PushTuple	src/lua/Util.hxx	/^struct _PushTuple<0> {$/;"	s	struct:Lua::StackIndex::LightUserData
_T	src/unix/tchar.h	50;"	d
_TEOF	src/unix/tchar.h	53;"	d
_USE_MMAP	src/zzip/__mmap.h	23;"	d
_UnsafeAppendAll	src/util/StringBuilder.hxx	/^_UnsafeAppendAll(T *dest)$/;"	f
_UnsafeAppendAll	src/util/StringBuilder.hxx	/^_UnsafeAppendAll(T *dest, T ch, Args&&... args)$/;"	f
_UnsafeAppendAll	src/util/StringBuilder.hxx	/^_UnsafeAppendAll(T *dest, const T *first, Args&&... args)$/;"	f
_UnsafeAppendAll	src/util/StringBuilder.hxx	/^_UnsafeAppendAll(T *dest, const T *first, size_t first_length, Args&&... args)$/;"	f
_XYDATASTORE_H	src/Math/XYDataStore.hpp	29;"	d
_ZZIP_AUTOCONF_H_	src/zzip/autoconf.h	2;"	d
_ZZIP_CONF_H	src/zzip/conf.h	17;"	d
_ZZIP_DIRENT_HAVE_D_NAMLEN	src/zzip/lib.h	38;"	d
_ZZIP_DIRENT_HAVE_D_OFF	src/zzip/lib.h	39;"	d
_ZZIP_DIRENT_HAVE_D_RECLEN	src/zzip/lib.h	40;"	d
_ZZIP_FILE_H	src/zzip/file.h	19;"	d
_ZZIP_FORMATS_H	src/zzip/fetch.h	2;"	d
_ZZIP_FORMAT_H	src/zzip/format.h	13;"	d
_ZZIP_LIB_H	src/zzip/lib.h	14;"	d
_ZZIP_PLUGIN_H	src/zzip/plugin.h	28;"	d
_ZZIP_TYPES_H_	src/zzip/types.h	23;"	d
_ZZIP_USE_BSWAP	src/zzip/fetch.h	38;"	d
_ZZIP_USE_DEREF	src/zzip/fetch.h	47;"	d
_ZZIP_ZZIP32_H	src/zzip/zzip32.h	16;"	d
_ZZIP_ZZIP_H	src/zzip/zzip.h	15;"	d
_ZZIP__CONFIG_H	src/zzip/_config.h	2;"	d
_ZZIP__STDINT_H	src/zzip/stdint.h	2;"	d
__ASM_ARCH_MXCFB_H__	src/ui/canvas/fb/mxcfb.h	22;"	d
__FUNCTION__	src/Topography/shapelib/mapserver.h	197;"	d
__O_TMPFILE	src/io/FileOutputStream.cxx	168;"	d	file:
__USE_ANSI	src/zzip/stdint.h	10;"	d
__USE_ISOC9X	src/zzip/stdint.h	11;"	d
__ZZIP_INTERNAL_DEBUG_H	src/zzip/__debug.h	2;"	d
__ZZIP_INTERNAL_HINTS_H	src/zzip/__hints.h	2;"	d
__ZZIP_INTERNAL_MMAP_H	src/zzip/__mmap.h	2;"	d
__assert2	src/Android/Assert.cpp	/^__assert2(const char *file, int line, const char *func, const char *failedexpr)$/;"	f
__correct_rootseek	src/zzip/zip.c	115;"	d	file:
__correct_rootseek	src/zzip/zip.c	125;"	d	file:
__correct_rootseek	src/zzip/zip.c	130;"	d	file:
__cxa_pure_virtual	src/LibCXX.cpp	/^extern "C" __attribute__((noreturn)) void __cxa_pure_virtual() { abort(); }$/;"	f
__debug_dir_hdr	src/zzip/zip.c	/^__debug_dir_hdr(struct zzip_dir_hdr *hdr)$/;"	f	file:
__debug_dir_hdr	src/zzip/zip.c	156;"	d	file:
__fixup_rootseek	src/zzip/zip.c	/^__fixup_rootseek(zzip_off_t offset_of_trailer, struct _disk_trailer *trailer)$/;"	f	file:
__fixup_rootseek	src/zzip/zip.c	123;"	d	file:
__fixup_rootseek	src/zzip/zip.c	129;"	d	file:
__has_feature	src/util/Compiler.h	183;"	d
__sizeof	src/zzip/zip.c	28;"	d	file:
__zzip_aligned4	src/zzip/zip.c	/^__zzip_aligned4(char *p)$/;"	f	file:
__zzip_dir_parse	src/zzip/zip.c	/^__zzip_dir_parse(ZZIP_DIR * dir)$/;"	f	file:
__zzip_fetch_disk_trailer	src/zzip/zip.c	/^__zzip_fetch_disk_trailer(int fd, zzip_off_t filesize,$/;"	f	file:
__zzip_fetch_disk_trailer	src/zzip/zip.c	71;"	d	file:
__zzip_get16	src/zzip/fetch.c	/^__zzip_get16(unsigned char *s)$/;"	f
__zzip_get32	src/zzip/fetch.c	/^__zzip_get32(unsigned char *s)$/;"	f
__zzip_get64	src/zzip/fetch.c	/^__zzip_get64(unsigned char *s)$/;"	f
__zzip_parse_root_directory	src/zzip/zip.c	/^__zzip_parse_root_directory(int fd,$/;"	f	file:
__zzip_set16	src/zzip/fetch.c	/^__zzip_set16(unsigned char *s, uint16_t v)$/;"	f
__zzip_set32	src/zzip/fetch.c	/^__zzip_set32(unsigned char *s, uint32_t v)$/;"	f
__zzip_set64	src/zzip/fetch.c	/^__zzip_set64(unsigned char *s, uint64_t v)$/;"	f
__zzip_try_open	src/zzip/zip.c	/^__zzip_try_open(zzip_char_t * filename, int filemode,$/;"	f
_autobuffer	src/Topography/shapelib/mapserver.h	/^  typedef struct _autobuffer {$/;"	s
_bugs	src/Device/Driver/OpenVario.cpp	/^  double _bugs = 1;$/;"	m	class:OpenVarioDevice	file:
_bugs_valid	src/Device/Driver/OpenVario.cpp	/^  bool   _bugs_valid = false;$/;"	m	class:OpenVarioDevice	file:
_class	src/Topography/shapelib/mapserver.h	/^    classObj **_class;$/;"	m	struct:layerObj
_config	src/Dialogs/Device/DeviceEditWidget.cpp	/^   config(_config), listener(NULL) {}$/;"	v
_connected	src/Device/Driver/IMI/Protocol/Protocol.cpp	/^  bool _connected = false;$/;"	m	namespace:IMI	file:
_disk_trailer	src/zzip/zip.c	/^struct _disk_trailer$/;"	s	file:
_disk_trailer	src/zzip/zip.c	64;"	d	file:
_disk_trailer_entries	src/zzip/zip.c	56;"	d	file:
_disk_trailer_entries	src/zzip/zip.c	65;"	d	file:
_disk_trailer_finalentries	src/zzip/zip.c	58;"	d	file:
_disk_trailer_finalentries	src/zzip/zip.c	67;"	d	file:
_disk_trailer_localentries	src/zzip/zip.c	57;"	d	file:
_disk_trailer_localentries	src/zzip/zip.c	66;"	d	file:
_disk_trailer_rootseek	src/zzip/zip.c	59;"	d	file:
_disk_trailer_rootseek	src/zzip/zip.c	68;"	d	file:
_disk_trailer_rootsize	src/zzip/zip.c	60;"	d	file:
_disk_trailer_rootsize	src/zzip/zip.c	69;"	d	file:
_disk_trailer_set_rootseek	src/zzip/zip.c	61;"	d	file:
_disk_trailer_set_rootseek	src/zzip/zip.c	70;"	d	file:
_edit_manual_wind	src/Dialogs/Settings/WindSettingsPanel.cpp	/^   edit_manual_wind(_edit_manual_wind),$/;"	v
_fmode	src/Compatibility/fmode.c	/^int _fmode = _O_BINARY;$/;"	v
_fputts	src/unix/tchar.h	41;"	d
_ftprintf	src/unix/tchar.h	39;"	d
_geomtransform	src/Topography/shapelib/mapserver.h	/^    expressionObj _geomtransform;$/;"	m	struct:layerObj
_geomtransform	src/Topography/shapelib/mapserver.h	/^    expressionObj _geomtransform;$/;"	m	struct:styleObj
_glBindFramebuffer	src/ui/canvas/opengl/FBO.cpp	/^static PFNGLBINDFRAMEBUFFEROESPROC _glBindFramebuffer;$/;"	v	file:
_glBindRenderbuffer	src/ui/canvas/opengl/FBO.cpp	/^static PFNGLBINDRENDERBUFFEROESPROC _glBindRenderbuffer;$/;"	v	file:
_glDeleteFramebuffers	src/ui/canvas/opengl/FBO.cpp	/^static PFNGLDELETEFRAMEBUFFERSOESPROC _glDeleteFramebuffers;$/;"	v	file:
_glDeleteRenderbuffers	src/ui/canvas/opengl/FBO.cpp	/^static PFNGLDELETERENDERBUFFERSOESPROC _glDeleteRenderbuffers;$/;"	v	file:
_glFramebufferRenderbuffer	src/ui/canvas/opengl/FBO.cpp	/^static PFNGLFRAMEBUFFERRENDERBUFFEROESPROC _glFramebufferRenderbuffer;$/;"	v	file:
_glFramebufferTexture2D	src/ui/canvas/opengl/FBO.cpp	/^static PFNGLFRAMEBUFFERTEXTURE2DOESPROC _glFramebufferTexture2D;$/;"	v	file:
_glGenFramebuffers	src/ui/canvas/opengl/FBO.cpp	/^static PFNGLGENFRAMEBUFFERSOESPROC _glGenFramebuffers;$/;"	v	file:
_glGenRenderbuffers	src/ui/canvas/opengl/FBO.cpp	/^static PFNGLGENRENDERBUFFERSOESPROC _glGenRenderbuffers;$/;"	v	file:
_glRenderbufferStorage	src/ui/canvas/opengl/FBO.cpp	/^static PFNGLRENDERBUFFERSTORAGEOESPROC _glRenderbufferStorage;$/;"	v	file:
_ideal_polar	src/Device/Driver/OpenVario.cpp	/^  PolarCoefficients _ideal_polar; $/;"	m	class:OpenVarioDevice	file:
_ideal_polar_valid	src/Device/Driver/OpenVario.cpp	/^  bool _ideal_polar_valid = false;$/;"	m	class:OpenVarioDevice	file:
_info	src/Device/Driver/IMI/Protocol/Protocol.cpp	/^  TDeviceInfo _info;$/;"	m	namespace:IMI	file:
_lastAltitude	src/Computer/Wind/Store.hpp	/^  double _lastAltitude;$/;"	m	class:WindStore
_mc	src/Device/Driver/OpenVario.cpp	/^  double _mc = 1;$/;"	m	class:OpenVarioDevice	file:
_mc_valid	src/Device/Driver/OpenVario.cpp	/^  bool   _mc_valid = false;$/;"	m	class:OpenVarioDevice	file:
_next_allocation_size	src/Topography/shapelib/mapserver.h	/^    size_t _next_allocation_size;$/;"	m	struct:_autobuffer
_overload	src/Device/Driver/OpenVario.cpp	/^  double _overload = 1;$/;"	m	class:OpenVarioDevice	file:
_overload_valid	src/Device/Driver/OpenVario.cpp	/^  bool   _overload_valid = false;$/;"	m	class:OpenVarioDevice	file:
_parent	src/Widget/ManagedWidget.hpp	/^    :parent(&_parent), widget(_widget), state(State::NONE) {}$/;"	m	class:ManagedWidget
_putts	src/unix/tchar.h	54;"	d
_real_polar	src/Device/Driver/OpenVario.cpp	/^  PolarCoefficients _real_polar; $/;"	m	class:OpenVarioDevice	file:
_real_polar_valid	src/Device/Driver/OpenVario.cpp	/^  bool _real_polar_valid = false;$/;"	m	class:OpenVarioDevice	file:
_serialNumber	src/Device/Driver/IMI/Protocol/Protocol.cpp	/^  IMIWORD _serialNumber;$/;"	m	namespace:IMI	file:
_slCreateEngine	src/Audio/SLES/Init.cpp	/^static T_slCreateEngine _slCreateEngine;$/;"	v	file:
_solution	src/Engine/Task/Unordered/AlternateTask.hpp	/^      :AlternatePoint(std::move(_waypoint), _solution), delta(_delta) {}$/;"	m	struct:final::Divert
_stprintf	src/unix/tchar.h	35;"	d
_stscanf	src/unix/tchar.h	55;"	d
_tcscat	src/unix/tchar.h	49;"	d
_tcsclen	src/unix/tchar.h	46;"	d
_tcscmp	src/unix/tchar.h	44;"	d
_tcscpy	src/unix/tchar.h	43;"	d
_tcsdup	src/unix/tchar.h	42;"	d
_tcslen	src/unix/tchar.h	45;"	d
_tcspbrk	src/unix/tchar.h	48;"	d
_tcsstr	src/unix/tchar.h	47;"	d
_tcstod	src/unix/tchar.h	58;"	d
_tcstol	src/unix/tchar.h	57;"	d
_template	src/Topography/shapelib/mapserver.h	/^    char *_template;$/;"	m	struct:__anon31
_template	src/Topography/shapelib/mapserver.h	/^    char *_template;$/;"	m	struct:__anon35
_template	src/Topography/shapelib/mapserver.h	/^    char *_template;$/;"	m	struct:__anon48
_template	src/Topography/shapelib/mapserver.h	/^    char *_template;$/;"	m	struct:classObj
_template	src/Topography/shapelib/mapserver.h	/^    char *_template;$/;"	m	struct:layerObj
_tfopen	src/unix/tchar.h	52;"	d
_topen	src/unix/tchar.h	51;"	d
_tprintf	src/unix/tchar.h	38;"	d
_trace	src/Engine/Contest/Solvers/ContestDijkstra.cpp	/^   TraceManager(_trace),$/;"	v
_vftprintf	src/unix/tchar.h	40;"	d
_vsntprintf	src/unix/tchar.h	37;"	d
_vstprintf	src/unix/tchar.h	36;"	d
_zzip___int64	src/zzip/conf.h	100;"	d
_zzip___int64	src/zzip/conf.h	102;"	d
_zzip_const	src/zzip/conf.h	57;"	d
_zzip_const	src/zzip/conf.h	59;"	d
_zzip_export	src/zzip/conf.h	222;"	d
_zzip_export	src/zzip/conf.h	227;"	d
_zzip_export	src/zzip/conf.h	230;"	d
_zzip_export	src/zzip/conf.h	236;"	d
_zzip_export	src/zzip/conf.h	238;"	d
_zzip_export	src/zzip/conf.h	242;"	d
_zzip_export	src/zzip/conf.h	245;"	d
_zzip_export	src/zzip/conf.h	253;"	d
_zzip_export	src/zzip/conf.h	255;"	d
_zzip_export	src/zzip/conf.h	257;"	d
_zzip_getpagesize	src/zzip/__mmap.h	36;"	d
_zzip_getpagesize	src/zzip/__mmap.h	81;"	d
_zzip_getpagesize	src/zzip/__mmap.h	95;"	d
_zzip_inline	src/zzip/conf.h	157;"	d
_zzip_inline	src/zzip/conf.h	158;"	d
_zzip_inline	src/zzip/conf.h	64;"	d
_zzip_inline	src/zzip/conf.h	66;"	d
_zzip_lseek	src/zzip/conf.h	168;"	d
_zzip_lseek	src/zzip/conf.h	192;"	d
_zzip_mmap	src/zzip/__mmap.h	32;"	d
_zzip_mmap	src/zzip/__mmap.h	77;"	d
_zzip_mmap	src/zzip/__mmap.h	93;"	d
_zzip_munmap	src/zzip/__mmap.h	34;"	d
_zzip_munmap	src/zzip/__mmap.h	79;"	d
_zzip_munmap	src/zzip/__mmap.h	94;"	d
_zzip_off64_t	src/zzip/_config.h	240;"	d
_zzip_off64_t	src/zzip/conf.h	48;"	d
_zzip_off64_t	src/zzip/conf.h	50;"	d
_zzip_off_t	src/zzip/conf.h	40;"	d
_zzip_off_t	src/zzip/conf.h	42;"	d
_zzip_plugin_io	src/zzip/plugin.h	/^typedef union _zzip_plugin_io$/;"	u
_zzip_plugin_io_handlers	src/zzip/plugin.h	56;"	d
_zzip_read	src/zzip/conf.h	171;"	d
_zzip_read	src/zzip/conf.h	196;"	d
_zzip_restrict	src/zzip/_config.h	249;"	d
_zzip_restrict	src/zzip/conf.h	71;"	d
_zzip_restrict	src/zzip/conf.h	73;"	d
_zzip_size_t	src/zzip/conf.h	86;"	d
_zzip_size_t	src/zzip/conf.h	88;"	d
_zzip_ssize_t	src/zzip/conf.h	93;"	d
_zzip_ssize_t	src/zzip/conf.h	95;"	d
_zzip_write	src/zzip/conf.h	174;"	d
_zzip_write	src/zzip/conf.h	200;"	d
a	src/Computer/WaveResult.hpp	/^  GeoPoint a, b;$/;"	m	struct:WaveInfo
a	src/Engine/GlideSolvers/PolarCoefficients.hpp	/^  double a, b, c;$/;"	m	struct:PolarCoefficients
a	src/Geo/Flat/FlatEllipse.hpp	/^  double a;$/;"	m	class:FlatEllipse
a	src/Math/Filter.hpp	/^  double a[3];$/;"	m	class:Filter
a	src/Math/Line2D.hpp	/^  Point a, b;$/;"	m	struct:Line2D
a	src/Tracking/SkyLines/Data.hpp	/^    GeoPoint a, b;$/;"	m	struct:SkyLinesTracking::Data::Wave
a	src/Tracking/SkyLines/Protocol.hpp	/^  GeoPoint a, b;$/;"	m	struct:SkyLinesTracking::Wave
a	src/ui/canvas/PortableColor.hpp	/^  uint8_t a;$/;"	m	class:BGRA8Color
a	src/ui/canvas/memory/PixelOperations.hpp	/^  const color_type a, b;$/;"	m	struct:PixelOpaqueAlpha
a	src/ui/canvas/opengl/Color.hpp	/^  Component r, g, b, a;$/;"	m	class:Color
a	src/util/ByteOrder.hxx	/^	uint8_t a, b, c, d;$/;"	m	class:PackedLE32
a	src/util/MD5.hpp	/^    uint32_t a, b, c, d;$/;"	m	struct:MD5::State
aalt	src/Device/Driver/LX/LXN.hpp	/^    uint16_t time, latitude, longitude, aalt, galt;$/;"	m	struct:LXN::Position
aap	src/Engine/Task/PathSolvers/IsolineCrossingFinder.hpp	/^  const AATPoint &aap;$/;"	m	class:final
aat_constraints	src/Engine/Task/Factory/AATTaskFactory.cpp	/^static constexpr TaskFactoryConstraints aat_constraints = {$/;"	v	file:
aat_min_time	src/Engine/Task/Ordered/Settings.hpp	/^  double aat_min_time;$/;"	m	struct:OrderedTaskSettings
aat_speed_max	src/Engine/Task/Stats/CommonStats.hpp	/^  double aat_speed_max;$/;"	m	class:CommonStats
aat_speed_min	src/Engine/Task/Stats/CommonStats.hpp	/^  double aat_speed_min;$/;"	m	class:CommonStats
aat_speed_target	src/Engine/Task/Stats/CommonStats.hpp	/^  double aat_speed_target;$/;"	m	class:CommonStats
aat_time_remaining	src/Engine/Task/Stats/CommonStats.hpp	/^  double aat_time_remaining;$/;"	m	class:CommonStats
ab	src/Geo/Flat/FlatEllipse.hpp	/^  double ab() const {$/;"	f	class:FlatEllipse
abort_mode_icon	src/Look/MapLook.hpp	/^  MaskedIcon cruise_mode_icon, climb_mode_icon, final_glide_mode_icon, abort_mode_icon;$/;"	m	struct:MapLook
abort_task	src/Engine/Task/TaskManager.hpp	/^  const std::unique_ptr<AlternateTask> abort_task;$/;"	m	class:TaskManager
abort_task_mode	src/Engine/Task/TaskBehaviour.hpp	/^  AbortTaskMode abort_task_mode;$/;"	m	struct:TaskBehaviour
above_terrain_bitmap	src/Look/MapLook.hpp	/^  Bitmap above_terrain_bitmap;$/;"	m	struct:MapLook
above_terrain_brush	src/Look/MapLook.hpp	/^  Brush above_terrain_brush;$/;"	m	struct:MapLook
absolute	src/Topography/shapelib/mapserver.h	/^  int absolute; \/* are the glyph positions absolutely placed, or relative to the origin *\/$/;"	m	struct:textPathObj
absstepsize	src/Terrain/jasper/jpc/jpc_dec.h	/^	jpc_fix_t absstepsize;$/;"	m	struct:__anon124
acTypes	src/FLARM/Traffic.cpp	/^static constexpr const TCHAR* acTypes[16] = {$/;"	v	file:
acceleration	src/NMEA/Info.hpp	/^  AccelerationState acceleration;$/;"	m	struct:NMEAInfo
access	src/Geo/Boost/GeoPoint.hpp	/^template<> struct access<GeoPoint, 0> {$/;"	s	namespace:boost::geometry::traits
access	src/Geo/Boost/GeoPoint.hpp	/^template<> struct access<GeoPoint, 1> {$/;"	s	namespace:boost::geometry::traits
accurate_half_sin	src/Math/Angle.hpp	/^  inline double accurate_half_sin() const {$/;"	f	class:Angle
acd_driver	src/Device/Driver/AirControlDisplay.cpp	/^const struct DeviceRegister acd_driver = {$/;"	v	typeref:struct:DeviceRegister
acft	src/Dialogs/Device/FLARM/ConfigWidget.hpp	/^  unsigned baud, priv, thre, range, acft, log_int, notrack;$/;"	m	class:final
achieved	src/Engine/Task/Stats/TaskSummary.hpp	/^  bool achieved;$/;"	m	struct:TaskSummaryPoint
ack_button	src/Dialogs/Airspace/dlgAirspaceWarnings.cpp	/^  Button *ack_button;$/;"	m	class:final	file:
ack_button	src/Dialogs/MapItemListDialog.cpp	/^  Button *ack_button;$/;"	m	class:final	file:
ack_day	src/Dialogs/Airspace/dlgAirspaceWarnings.cpp	/^  bool ack_expired, ack_day;$/;"	m	struct:WarningItem	file:
ack_day	src/Engine/Airspace/AirspaceWarning.hpp	/^  bool ack_day;$/;"	m	class:AirspaceWarning
ack_day_button	src/Dialogs/Airspace/dlgAirspaceWarnings.cpp	/^  Button *ack_day_button;$/;"	m	class:final	file:
ack_expired	src/Dialogs/Airspace/dlgAirspaceWarnings.cpp	/^  bool ack_expired, ack_day;$/;"	m	struct:WarningItem	file:
acknowledgement_time	src/Engine/Airspace/AirspaceWarningConfig.hpp	/^  unsigned acknowledgement_time;$/;"	m	struct:AirspaceWarningConfig
acktime_inside	src/Engine/Airspace/AirspaceWarning.hpp	/^  unsigned acktime_inside;$/;"	m	class:AirspaceWarning
acktime_warning	src/Engine/Airspace/AirspaceWarning.hpp	/^  unsigned acktime_warning;$/;"	m	class:AirspaceWarning
acos	src/Math/Angle.hpp	/^  static Angle acos(double x) {$/;"	f	class:Angle
acstate	src/Replay/TaskAutoPilot.hpp	/^  AcState acstate;$/;"	m	class:TaskAutoPilot
action	src/Terrain/jasper/jpc/jpc_dec.c	/^	int (*action)(jpc_dec_t *dec, jpc_ms_t *ms);$/;"	m	struct:__anon131	file:
active	src/Computer/Wind/CirclingWind.hpp	/^  bool active;$/;"	m	class:CirclingWind
active	src/Engine/Airspace/AbstractAirspace.hpp	/^  mutable bool active;$/;"	m	class:AbstractAirspace
active	src/Engine/Task/Stats/TaskSummary.hpp	/^  unsigned active;$/;"	m	struct:TaskSummary
active	src/ui/canvas/opengl/BufferCanvas.hpp	/^  bool active = false;$/;"	m	class:DisplayOrientation
active_child	src/ui/window/ContainerWindow.hpp	/^  Window *active_child = nullptr;$/;"	m	class:ContainerWindow
active_factory	src/Engine/Task/Ordered/OrderedTask.hpp	/^  std::unique_ptr<AbstractTaskFactory> active_factory;$/;"	m	class:final
active_freq_name	src/NMEA/ExternalSettings.hpp	/^  StaticString<32> active_freq_name;$/;"	m	struct:ExternalSettings
active_frequency	src/Computer/Settings.hpp	/^  RadioFrequency active_frequency;$/;"	m	struct:RadioSettings
active_frequency	src/NMEA/ExternalSettings.hpp	/^  RadioFrequency active_frequency;$/;"	m	struct:ExternalSettings
active_frequency_panels	src/InfoBoxes/Content/Radio.cpp	/^static constexpr InfoBoxPanel active_frequency_panels[] = {$/;"	v	file:
active_has_next	src/Engine/Task/Stats/CommonStats.hpp	/^  bool active_has_next;$/;"	m	class:CommonStats
active_has_previous	src/Engine/Task/Stats/CommonStats.hpp	/^  bool active_has_previous;$/;"	m	class:CommonStats
active_index	src/Device/Driver/CAI302/Protocol.hpp	/^    uint8_t active_index;$/;"	m	struct:CAI302::PilotMetaActive
active_index	src/Dialogs/Task/TaskPointDialog.cpp	/^  unsigned active_index;$/;"	m	class:final	file:
active_index	src/Dialogs/Weather/MapOverlayWidget.cpp	/^  int active_index = -1;$/;"	m	class:final	file:
active_index	src/Engine/Task/Solvers/TaskMacCready.hpp	/^  const unsigned active_index;$/;"	m	class:TaskMacCready
active_index	src/Engine/Task/Stats/TaskStats.hpp	/^  unsigned active_index;$/;"	m	class:TaskStats
active_index	src/Renderer/TaskPointRenderer.hpp	/^  unsigned active_index;$/;"	m	class:TaskPointRenderer
active_name	src/Computer/Settings.hpp	/^  StaticString<32> active_name;$/;"	m	struct:RadioSettings
active_state	src/Engine/Task/Ordered/Points/OrderedTaskPoint.hpp	/^  ActiveState active_state;$/;"	m	class:OrderedTaskPoint
active_task	src/Dialogs/Task/Manager/TaskActionsPanel.hpp	/^  std::unique_ptr<OrderedTask> &active_task;$/;"	m	class:TaskActionsPanel
active_task	src/Dialogs/Task/Manager/TaskListPanel.cpp	/^  std::unique_ptr<OrderedTask> &active_task;$/;"	m	class:final	file:
active_task	src/Engine/Task/TaskManager.hpp	/^  AbstractTask* active_task;$/;"	m	class:TaskManager
active_task_point	src/Engine/Task/AbstractTask.hpp	/^  unsigned active_task_point = 0;$/;"	m	class:AbstractTask
active_waypoint	src/Engine/Task/Unordered/AbortTask.hpp	/^  unsigned active_waypoint;$/;"	m	class:AbortTask
activity_mask	src/Engine/Airspace/Airspaces.hpp	/^  AirspaceActivity activity_mask;$/;"	m	class:Airspaces
actual_in	src/Engine/Contest/Solvers/Retrospective.hpp	/^    double actual_in;$/;"	m	struct:Retrospective::NearWaypoint
adBoundsMax	src/Topography/shapelib/mapshape.h	/^    double  adBoundsMax[4];$/;"	m	struct:__anon75
adBoundsMin	src/Topography/shapelib/mapshape.h	/^    double  adBoundsMin[4];$/;"	m	struct:__anon75
add	src/Engine/Airspace/AirspaceIntersectSort.cpp	/^AirspaceIntersectSort::add(const double t, const GeoPoint &p)$/;"	f	class:AirspaceIntersectSort
addChecklist	src/Dialogs/dlgChecklist.cpp	/^addChecklist(const TCHAR *name, const TCHAR *details)$/;"	f	file:
addEnumText	src/Form/DataField/Enum.cpp	/^DataFieldEnum::addEnumText(const TCHAR *Text, const TCHAR *display_string,$/;"	f	class:DataFieldEnum
addEnumText	src/Form/DataField/Enum.hpp	/^  bool addEnumText(const TCHAR *text, unsigned id, const TCHAR *help=nullptr) {$/;"	f	class:final
addEnumTexts	src/Form/DataField/Enum.cpp	/^DataFieldEnum::addEnumTexts(const TCHAR *const*list)$/;"	f	class:DataFieldEnum
addMeasurement	src/Computer/Wind/MeasurementList.cpp	/^WindMeasurementList::addMeasurement(unsigned time, const SpeedVector &vector,$/;"	f	class:WindMeasurementList
addRequestProperty	src/java/URL.hxx	/^	static void addRequestProperty(JNIEnv *env, jobject connection,$/;"	f	class:Java::URLConnection
addRequestProperty_method	src/java/URL.cxx	/^jmethodID Java::URLConnection::addRequestProperty_method;$/;"	m	class:Java::URLConnection	file:
addRequestProperty_method	src/java/URL.hxx	/^	static jmethodID addRequestProperty_method;$/;"	m	class:Java::URLConnection
add_arrival_altitude	src/MapSettings.hpp	/^  bool add_arrival_altitude;$/;"	m	struct:MapItemListSettings
add_button	src/Dialogs/FileManager.cpp	/^  Button *download_button, *add_button, *cancel_button, *update_button;$/;"	m	class:ManagedFileListWidget	file:
add_button	src/Dialogs/Settings/Panels/PagesConfigPanel.cpp	/^  Button *add_button, *delete_button;$/;"	m	class:PageListWidget	file:
add_button	src/Dialogs/Weather/NOAAList.cpp	/^  Button *details_button, *add_button, *update_button, *remove_button;$/;"	m	class:final	file:
add_ds	src/Device/Driver/Volkslogger/dbbconv.cpp	/^DBB::add_ds(int kennung, const void *quelle)$/;"	f	class:DBB
add_fdf	src/Device/Driver/Volkslogger/dbbconv.cpp	/^DBB::add_fdf(int feldkennung, size_t feldlaenge, const void *quelle)$/;"	f	class:DBB
add_location	src/MapSettings.hpp	/^  bool add_location;$/;"	m	struct:MapItemListSettings
address	src/Cloud/Client.hpp	/^  AllocatedSocketAddress address;$/;"	m	struct:CloudClient
address	src/Cloud/Sender.hpp	/^    :server(_server), address(client_address) {$/;"	f	class:ThermalResponseSender
address	src/Cloud/Sender.hpp	/^  const SocketAddress address;$/;"	m	class:ThermalResponseSender
address	src/Cloud/Sender.hpp	/^  const SocketAddress address;$/;"	m	class:TrafficResponseSender
address	src/Device/Driver/IMI/Protocol/Types.hpp	/^    IMIDWORD address;$/;"	m	struct:IMI::FlightInfo
address	src/Device/Driver/LX/Protocol.hpp	/^    uint8_t address[3];$/;"	m	struct:LX::MemoryAddress24
address	src/Dialogs/Device/ScanBluetoothLeDialog.cpp	/^    std::string address;$/;"	m	struct:final::Item	file:
address	src/Tracking/SkyLines/Client.hpp	/^  AllocatedSocketAddress address;$/;"	m	class:SkyLinesTracking::final
address	src/Tracking/SkyLines/Server.hpp	/^    StaticSocketAddress address;$/;"	m	struct:SkyLinesTracking::Server::Client
address	src/net/AllocatedSocketAddress.hxx	/^	struct sockaddr *address = nullptr;$/;"	m	class:AllocatedSocketAddress	typeref:struct:AllocatedSocketAddress::sockaddr
address	src/net/IPv4Address.cxx	/^	:address(src.CastTo<struct sockaddr_in>())$/;"	f
address	src/net/IPv4Address.hxx	/^		:address(_address) {}$/;"	f	class:IPv4Address
address	src/net/IPv4Address.hxx	/^	struct sockaddr_in address;$/;"	m	class:IPv4Address	typeref:struct:IPv4Address::sockaddr_in
address	src/net/IPv6Address.cxx	/^	:address(src.CastTo<struct sockaddr_in6>())$/;"	f
address	src/net/IPv6Address.hxx	/^	struct sockaddr_in6 address;$/;"	m	class:IPv6Address	typeref:struct:IPv6Address::sockaddr_in6
address	src/net/SocketAddress.hxx	/^	const struct sockaddr *address;$/;"	m	class:SocketAddress	typeref:struct:SocketAddress::sockaddr
address	src/net/StaticSocketAddress.hxx	/^	struct sockaddr_storage address;$/;"	m	class:StaticSocketAddress	typeref:struct:StaticSocketAddress::sockaddr_storage
address0	src/Device/Driver/LX/Protocol.hpp	/^    uint8_t address0;$/;"	m	struct:LX::MemoryAddress32
address1	src/Device/Driver/LX/Protocol.hpp	/^    uint8_t address1;$/;"	m	struct:LX::MemoryAddress32
address2	src/Device/Driver/LX/Protocol.hpp	/^    uint8_t address2;$/;"	m	struct:LX::MemoryAddress32
address3	src/Device/Driver/LX/Protocol.hpp	/^    uint8_t address3;$/;"	m	struct:LX::MemoryAddress32
address_family_ranking	src/net/AddressInfo.cxx	/^static constexpr int address_family_ranking[] = {$/;"	v	file:
address_to_name	src/Android/BluetoothHelper.cpp	/^static std::map<std::string, std::string> address_to_name;$/;"	m	namespace:BluetoothHelper	file:
addresses	src/Dialogs/Device/ScanBluetoothLeDialog.cpp	/^  std::set<std::string> addresses;$/;"	m	class:final	file:
addresses	src/event/net/cares/SimpleResolver.hxx	/^	std::forward_list<AllocatedSocketAddress> addresses;$/;"	m	class:Cares::final
advance	src/Topography/shapelib/mapserver.h	/^  double minx,miny,maxx,maxy,advance;$/;"	m	struct:__anon58
ae15seconds	src/Computer/Settings.hpp	/^  ae15seconds,$/;"	e	enum:AverageEffTime
ae2minutes	src/Computer/Settings.hpp	/^  ae2minutes,$/;"	e	enum:AverageEffTime
ae30seconds	src/Computer/Settings.hpp	/^  ae30seconds,$/;"	e	enum:AverageEffTime
ae3minutes	src/Computer/Settings.hpp	/^  ae3minutes,$/;"	e	enum:AverageEffTime
ae60seconds	src/Computer/Settings.hpp	/^  ae60seconds,$/;"	e	enum:AverageEffTime
ae90seconds	src/Computer/Settings.hpp	/^  ae90seconds,$/;"	e	enum:AverageEffTime
again	src/event/Loop.hxx	/^	bool again;$/;"	m	class:final
ai_is_passive	src/net/Resolver.cxx	/^ai_is_passive(const struct addrinfo *ai)$/;"	f	file:
air_data_computer	src/Computer/GlideComputer.hpp	/^  GlideComputerAirData air_data_computer;$/;"	m	class:GlideComputer
air_temperature	src/Atmosphere/CuSonde.hpp	/^    Temperature air_temperature;$/;"	m	struct:CuSonde::Level
airbrake_state	src/NMEA/SwitchState.hpp	/^  AirbrakeState airbrake_state;$/;"	m	struct:SwitchState
airbrake_state_list	src/Dialogs/Device/Vega/SwitchesDialog.cpp	/^static constexpr StaticEnumChoice airbrake_state_list[] = {$/;"	v	file:
aircraft	src/Engine/Task/Solvers/TaskBestMc.hpp	/^     aircraft(_aircraft)$/;"	f	class:final
aircraft	src/Engine/Task/Solvers/TaskBestMc.hpp	/^  const AircraftState &aircraft;$/;"	m	class:final
aircraft	src/Engine/Task/Solvers/TaskGlideRequired.hpp	/^     aircraft(_aircraft)$/;"	f	class:final
aircraft	src/Engine/Task/Solvers/TaskGlideRequired.hpp	/^  const AircraftState &aircraft;$/;"	m	class:final
aircraft	src/Engine/Task/Solvers/TaskMinTarget.hpp	/^  const AircraftState &aircraft;$/;"	m	class:final
aircraft	src/Engine/Task/Solvers/TaskOptTarget.hpp	/^  const AircraftState &aircraft;$/;"	m	class:final
aircraft	src/Engine/Task/Solvers/TaskSolveTravelled.hpp	/^  const AircraftState &aircraft;$/;"	m	class:TaskSolveTravelled
aircraft	src/Look/MapLook.hpp	/^  AircraftLook aircraft;$/;"	m	struct:MapLook
aircraft	src/Replay/DemoReplay.hpp	/^  AircraftSim aircraft;$/;"	m	class:DemoReplay
aircraft_brush	src/Look/CrossSectionLook.hpp	/^  Brush aircraft_brush;$/;"	m	struct:CrossSectionLook
aircraft_look	src/MapWindow/TargetMapWindow.hpp	/^  const AircraftLook &aircraft_look;$/;"	m	class:TargetMapWindow
aircraft_pen	src/Look/AircraftLook.hpp	/^  Pen aircraft_pen;$/;"	m	struct:AircraftLook
aircraft_pen	src/Look/HorizonLook.hpp	/^  Pen aircraft_pen;$/;"	m	struct:HorizonLook
aircraft_registration	src/Device/Declaration.hpp	/^  StaticString<32> aircraft_registration;$/;"	m	struct:Declaration
aircraft_simple1_pen	src/Look/AircraftLook.hpp	/^  Pen aircraft_simple1_pen;$/;"	m	struct:AircraftLook
aircraft_simple2_pen	src/Look/AircraftLook.hpp	/^  Pen aircraft_simple2_pen;$/;"	m	struct:AircraftLook
aircraft_symbol	src/MapSettings.hpp	/^  AircraftSymbol aircraft_symbol;$/;"	m	struct:MapSettings
aircraft_symbol_list	src/Dialogs/Settings/Panels/SymbolsConfigPanel.cpp	/^static constexpr StaticEnumChoice  aircraft_symbol_list[] = {$/;"	v	file:
aircraft_type	src/Device/Declaration.hpp	/^  StaticString<32> aircraft_type;$/;"	m	struct:Declaration
airfield	src/FLARM/FlarmNetRecord.hpp	/^  StaticString<LatinBufferSize(22)> airfield;$/;"	m	struct:FlarmNetRecord
airport_marginal_icon	src/Look/WaypointLook.hpp	/^  MaskedIcon airport_marginal_icon;$/;"	m	struct:WaypointLook
airport_reachable_icon	src/Look/WaypointLook.hpp	/^  MaskedIcon airport_reachable_icon, airport_unreachable_icon;$/;"	m	struct:WaypointLook
airport_unreachable_icon	src/Look/WaypointLook.hpp	/^  MaskedIcon airport_reachable_icon, airport_unreachable_icon;$/;"	m	struct:WaypointLook
airspace	src/Airspace/NearestAirspace.hpp	/^  const AbstractAirspace *airspace;$/;"	m	class:NearestAirspace
airspace	src/Computer/Settings.hpp	/^  AirspaceComputerSettings airspace;$/;"	m	struct:ComputerSettings
airspace	src/Dialogs/Airspace/dlgAirspaceDetails.cpp	/^  const AbstractAirspace &airspace;$/;"	m	class:final	file:
airspace	src/Dialogs/Airspace/dlgAirspaceWarnings.cpp	/^  const AbstractAirspace *airspace;$/;"	m	struct:WarningItem	file:
airspace	src/Engine/Airspace/Airspace.hpp	/^  AbstractAirspace *airspace;$/;"	m	class:final
airspace	src/Engine/Airspace/AirspaceSorter.hpp	/^  const AbstractAirspace *airspace;$/;"	m	class:AirspaceSelectInfo
airspace	src/Engine/Airspace/AirspaceWarning.hpp	/^  const AbstractAirspace &airspace;$/;"	m	class:AirspaceWarning
airspace	src/Engine/Airspace/SoonestAirspace.cpp	/^  const AbstractAirspace *airspace = nullptr;$/;"	m	struct:SoonestAirspace	file:
airspace	src/Engine/Route/AirspaceRoute.hpp	/^    const AbstractAirspace *airspace;$/;"	m	struct:AirspaceRoute::RouteAirspaceIntersection
airspace	src/Look/MapLook.hpp	/^  AirspaceLook airspace;$/;"	m	struct:MapLook
airspace	src/MapSettings.hpp	/^  AirspaceRendererSettings airspace;$/;"	m	struct:MapSettings
airspace	src/MapWindow/Items/MapItem.hpp	/^  const AbstractAirspace *airspace;$/;"	m	struct:AirspaceMapItem
airspace	src/Monitor/AirspaceWarningMonitor.cpp	/^  const AbstractAirspace &airspace;$/;"	m	class:final	file:
airspace_class_names	src/Formatter/AirspaceFormatter.cpp	/^static const TCHAR *const airspace_class_names[] = {$/;"	v	file:
airspace_class_short_names	src/Formatter/AirspaceFormatter.cpp	/^static const TCHAR *const airspace_class_short_names[] = {$/;"	v	file:
airspace_class_strings	src/Airspace/AirspaceParser.cpp	/^static constexpr AirspaceClassStringCouple airspace_class_strings[] = {$/;"	v	file:
airspace_database	src/Components.cpp	/^Airspaces airspace_database;$/;"	v
airspace_database	src/CrossSection/CrossSectionRenderer.hpp	/^  const Airspaces *airspace_database = nullptr;$/;"	m	class:CrossSectionRenderer
airspace_label_renderer	src/MapWindow/MapWindow.hpp	/^  AirspaceLabelRenderer airspace_label_renderer;$/;"	m	class:MapWindow
airspace_look	src/CrossSection/AirspaceXSRenderer.cpp	/^  const AirspaceLook &airspace_look;$/;"	m	class:final	file:
airspace_look	src/Dialogs/Task/Manager/TaskEditPanel.cpp	/^  const AirspaceLook &airspace_look;$/;"	m	class:TaskEditPanel	file:
airspace_look	src/Renderer/OZRenderer.hpp	/^  const AirspaceLook &airspace_look;$/;"	m	class:OZRenderer
airspace_renderer	src/CrossSection/CrossSectionRenderer.hpp	/^  AirspaceXSRenderer airspace_renderer;$/;"	m	class:CrossSectionRenderer
airspace_renderer	src/MapWindow/MapWindow.hpp	/^  AirspaceRenderer airspace_renderer;$/;"	m	class:MapWindow
airspace_renderer	src/MapWindow/TargetMapWindow.hpp	/^  AirspaceRenderer airspace_renderer;$/;"	m	class:TargetMapWindow
airspace_tnp_class_chars	src/Airspace/AirspaceParser.cpp	/^static constexpr AirspaceClassCharCouple airspace_tnp_class_chars[] = {$/;"	v	file:
airspace_tnp_type_strings	src/Airspace/AirspaceParser.cpp	/^static constexpr AirspaceClassStringCouple airspace_tnp_type_strings[] = {$/;"	v	file:
airspace_tree	src/Engine/Airspace/Airspaces.hpp	/^  AirspaceTree airspace_tree;$/;"	m	class:Airspaces
airspace_warnings	src/Dialogs/Airspace/AirspaceList.cpp	/^static ProtectedAirspaceWarningManager *airspace_warnings;$/;"	v	file:
airspace_warnings	src/Dialogs/Airspace/dlgAirspaceWarnings.cpp	/^  ProtectedAirspaceWarningManager &airspace_warnings;$/;"	m	class:final	file:
airspace_warnings	src/Monitor/AllMonitors.hpp	/^  AirspaceWarningMonitor airspace_warnings;$/;"	m	class:final
airspace_warnings	src/NMEA/Derived.hpp	/^  AirspaceWarningsInfo airspace_warnings;$/;"	m	struct:DerivedInfo
airspaces	src/Computer/WarningComputer.hpp	/^  Airspaces &airspaces;$/;"	m	class:WarningComputer
airspaces	src/Dialogs/Airspace/AirspaceList.cpp	/^static const Airspaces *airspaces;$/;"	v	file:
airspaces	src/Engine/Airspace/AirspaceWarningManager.hpp	/^  const Airspaces &airspaces;$/;"	m	class:AirspaceWarningManager
airspaces	src/Renderer/AirspaceLabelRenderer.hpp	/^  const Airspaces *airspaces;$/;"	m	class:AirspaceLabelRenderer
airspaces	src/Renderer/AirspaceRenderer.hpp	/^  const Airspaces *airspaces;$/;"	m	class:AirspaceRenderer
airspaces	src/Task/ProtectedRoutePlanner.hpp	/^  const Airspaces &airspaces;$/;"	m	class:ProtectedRoutePlanner
airspeed	src/Dialogs/Device/DeviceListDialog.cpp	/^    bool alive:1, location:1, gps:1, baro:1, airspeed:1, vario:1, traffic:1;$/;"	m	struct:final::Flags	file:
airspeed	src/Tracking/SkyLines/Protocol.hpp	/^  uint16_t airspeed;$/;"	m	struct:SkyLinesTracking::FixPacket
airspeed_available	src/NMEA/Info.hpp	/^  Validity airspeed_available;$/;"	m	struct:NMEAInfo
airspeed_real	src/NMEA/Info.hpp	/^  bool airspeed_real;$/;"	m	struct:NMEAInfo
alarm_brush	src/Look/FlarmTrafficLook.hpp	/^  Brush alarm_brush;$/;"	m	struct:FlarmTrafficLook
alarm_brush	src/Look/TrafficLook.hpp	/^  Brush alarm_brush;$/;"	m	struct:TrafficLook
alarm_color	src/Look/FlarmTrafficLook.hpp	/^  Color alarm_color;$/;"	m	struct:FlarmTrafficLook
alarm_color	src/Look/TrafficLook.hpp	/^  Color alarm_color;$/;"	m	struct:TrafficLook
alarm_level	src/FLARM/Status.hpp	/^  FlarmTraffic::AlarmType alarm_level;$/;"	m	struct:FlarmStatus
alarm_level	src/FLARM/Traffic.hpp	/^  AlarmType alarm_level;$/;"	m	class:FlarmTraffic::AircraftType
alarm_pen	src/Look/FlarmTrafficLook.hpp	/^  Pen alarm_pen;$/;"	m	struct:FlarmTrafficLook
alert_parameters	src/Dialogs/Device/Vega/AlertParameters.hpp	/^VegaParametersWidget::StaticParameter alert_parameters[] = {$/;"	v
align	src/Renderer/TextInBox.hpp	/^  Alignment align = Alignment::LEFT;$/;"	v
align	src/Topography/shapelib/mapserver.h	/^    int align;$/;"	m	struct:__anon47
align	src/Topography/shapelib/mapserver.h	/^    int align;$/;"	m	struct:labelObj
aligned4	src/zzip/zip.c	401;"	d	file:
alignment	src/Widget/ButtonPanelWidget.hpp	/^    :widget(std::move(_widget)), alignment(_alignment) {}$/;"	f	class:ButtonPanelWidget
alignment	src/Widget/ButtonPanelWidget.hpp	/^  Alignment alignment;$/;"	m	class:ButtonPanelWidget
alive	src/Dialogs/Device/DeviceListDialog.cpp	/^    bool alive:1, location:1, gps:1, baro:1, airspeed:1, vario:1, traffic:1;$/;"	m	struct:final::Flags	file:
alive	src/NMEA/Info.hpp	/^  Validity alive;$/;"	m	struct:NMEAInfo
alive	src/event/Loop.hxx	/^	bool alive;$/;"	m	class:final
alive	src/thread/StandbyThread.hpp	/^  bool alive = false;$/;"	m	class:StandbyThread
all	src/Engine/Airspace/AirspaceIntersectSort.cpp	/^AirspaceIntersectSort::all()$/;"	f	class:AirspaceIntersectSort
all_bold_font_paths	src/ui/canvas/custom/Files.cpp	/^static const char *const all_bold_font_paths[] = {$/;"	v	file:
all_bold_italic_font_paths	src/ui/canvas/custom/Files.cpp	/^static const char *const all_bold_italic_font_paths[] = {$/;"	v	file:
all_font_paths	src/ui/canvas/custom/Files.cpp	/^static const char *const all_font_paths[] = {$/;"	v	file:
all_italic_font_paths	src/ui/canvas/custom/Files.cpp	/^static const char *const all_italic_font_paths[] = {$/;"	v	file:
all_monitors	src/Startup.cpp	/^static AllMonitors *all_monitors;$/;"	v	file:
all_monospace_font_paths	src/ui/canvas/custom/Files.cpp	/^static const char *const all_monospace_font_paths[] = {$/;"	v	file:
alloc	src/Engine/Trace/Trace.hpp	/^    Alloc &alloc;$/;"	m	struct:Trace::Disposer
alloc_size	src/Topography/shapelib/mapstring.c	/^    size_t alloc_size;$/;"	m	struct:msStringBuffer	file:
allocate	src/util/SliceAllocator.hxx	/^		Item *allocate() {$/;"	f	struct:SliceAllocator::Area
allocate	src/util/SliceAllocator.hxx	/^	T *allocate(const size_type n) {$/;"	f	class:GlobalSliceAllocator
allocate	src/util/SliceAllocator.hxx	/^	T *allocate(const size_type n) {$/;"	f	class:SliceAllocator
allocated	src/ui/canvas/custom/Cache.cpp	/^    :font(&_font), text(_text), allocated(nullptr) {}$/;"	f	struct:TextCacheKey
allocated	src/ui/canvas/custom/Cache.cpp	/^  char *allocated;$/;"	m	struct:TextCacheKey	file:
allocated_error_dist_buffer	src/ui/canvas/memory/Dither.hpp	/^  AllocatedArray<ErrorDistType> allocated_error_dist_buffer;$/;"	m	class:Dither
allocated_height	src/Android/TextUtil.hpp	/^    unsigned allocated_width, allocated_height;$/;"	m	struct:TextUtil::Texture
allocated_size	src/ui/canvas/opengl/Texture.hpp	/^  PixelSize allocated_size;$/;"	m	class:GLTexture
allocated_width	src/Android/TextUtil.hpp	/^    unsigned allocated_width, allocated_height;$/;"	m	struct:TextUtil::Texture
allocation	src/util/LightString.hxx	/^		:StringPointer<T>(_value), allocation(nullptr) {}$/;"	f	class:LightString
allocation	src/util/LightString.hxx	/^		:StringPointer<T>(n), allocation(n) {}$/;"	f	class:LightString
allocation	src/util/LightString.hxx	/^	BasicAllocatedString<T> allocation;$/;"	m	class:LightString
allocator	src/Engine/Trace/Trace.hpp	/^  SliceAllocator<TraceDelta, 128u> allocator;$/;"	m	class:Trace
allocator	src/util/GlobalSliceAllocator.hxx	/^SliceAllocator<T, size> GlobalSliceAllocator<T, size>::allocator;$/;"	m	class:GlobalSliceAllocator
allocator	src/util/SliceAllocator.hxx	/^	static Allocator allocator;$/;"	m	class:GlobalSliceAllocator
allow_climb	src/Engine/Route/Config.hpp	/^  bool allow_climb;$/;"	m	struct:RoutePlannerConfig
allow_edit	src/Dialogs/Waypoint/WaypointCommandsWidget.hpp	/^     allow_edit(_allow_edit) {}$/;"	f	class:final
allow_edit	src/Dialogs/Waypoint/WaypointCommandsWidget.hpp	/^  const bool allow_edit;$/;"	m	class:final
allow_name_change	src/Dialogs/Settings/dlgConfigInfoboxes.cpp	/^  const bool allow_name_change;$/;"	m	class:final	file:
allow_partial	src/Engine/GlideSolvers/MacCready.cpp	/^  const bool allow_partial;$/;"	m	class:MacCreadyVopt	file:
allowed_characters	src/Form/DataField/Prefix.hpp	/^  AllowedCharactersFunction allowed_characters;$/;"	m	class:final
alpha	src/MapWindow/OverlayBitmap.hpp	/^  float alpha = 1;$/;"	m	class:final
alpha	src/ui/canvas/fb/mxcfb.h	/^	int alpha;$/;"	m	struct:mxcfb_gbl_alpha
alpha	src/ui/canvas/memory/Color.hpp	/^  uint8_t alpha;$/;"	m	class:Color
alpha	src/ui/canvas/memory/MMX.hpp	/^  uint8_t alpha;$/;"	m	class:MMXAlphaPixelOperations
alpha	src/ui/canvas/memory/NEON.hpp	/^  uint8_t alpha;$/;"	m	class:NEONAlphaPixelOperations
alpha	src/ui/canvas/memory/PixelOperations.hpp	/^  const int alpha;$/;"	m	class:PixelAlphaOperation
alpha_fragment_shader	src/ui/canvas/opengl/Shaders.cpp	/^static constexpr char alpha_fragment_shader[] =$/;"	v	file:
alpha_in_pixel	src/ui/canvas/fb/mxcfb.h	/^	int alpha_in_pixel;$/;"	m	struct:mxcfb_loc_alpha
alpha_phy_addr0	src/ui/canvas/fb/mxcfb.h	/^	unsigned long alpha_phy_addr0;$/;"	m	struct:mxcfb_loc_alpha
alpha_phy_addr1	src/ui/canvas/fb/mxcfb.h	/^	unsigned long alpha_phy_addr1;$/;"	m	struct:mxcfb_loc_alpha
alpha_projection	src/ui/canvas/opengl/Shaders.cpp	/^GLint alpha_projection, alpha_texture;$/;"	m	namespace:OpenGL	file:
alpha_shader	src/ui/canvas/opengl/Shaders.cpp	/^GLProgram *alpha_shader;$/;"	m	namespace:OpenGL	file:
alpha_texture	src/ui/canvas/opengl/Shaders.cpp	/^GLint alpha_projection, alpha_texture;$/;"	m	namespace:OpenGL	file:
alpha_vertex_shader	src/ui/canvas/opengl/Shaders.cpp	/^static const char *const alpha_vertex_shader = texture_vertex_shader;$/;"	v	file:
alsa_error_handler_stub	src/Audio/ALSAPCMPlayer.cpp	/^static void alsa_error_handler_stub(const char *, int, const char *,$/;"	f	file:
alsa_handle	src/Audio/ALSAPCMPlayer.hpp	/^  AlsaHandleUniquePtr alsa_handle = MakeAlsaHandleUniquePtr();$/;"	m	class:ALSAPCMPlayer
alsa_lock	src/Audio/VolumeController.hpp	/^  Mutex alsa_lock;$/;"	m	class:final
alsa_mixer_handle	src/Audio/VolumeController.hpp	/^  snd_mixer_t *alsa_mixer_handle = nullptr;$/;"	m	class:final
alsa_mixer_initialised	src/Audio/VolumeController.hpp	/^  bool alsa_mixer_initialised = false;$/;"	m	class:final
alt	src/Device/Driver/IMI/Protocol/Types.hpp	/^    IMIDWORD alt:14;$/;"	m	struct:IMI::FixB
alt1	src/Device/Driver/IMI/Protocol/Types.hpp	/^    IMISDWORD alt1:8;$/;"	m	struct:IMI::FixB2
alt2	src/Device/Driver/IMI/Protocol/Types.hpp	/^    IMISDWORD alt2:7;$/;"	m	struct:IMI::FixB2
alt_buffer_data	src/ui/canvas/fb/mxcfb.h	/^	struct mxcfb_alt_buffer_data alt_buffer_data;$/;"	m	struct:mxcfb_update_data	typeref:struct:mxcfb_update_data::mxcfb_alt_buffer_data
alt_diff_filter	src/Engine/Util/AircraftStateFilter.hpp	/^  DiffFilter x_diff_filter, y_diff_filter, alt_diff_filter;$/;"	m	class:AircraftStateFilter
alt_low_pass	src/Engine/Util/AircraftStateFilter.hpp	/^  Filter x_low_pass, y_low_pass, alt_low_pass;$/;"	m	class:AircraftStateFilter
alt_update_region	src/ui/canvas/fb/mxcfb.h	/^	struct mxcfb_rect alt_update_region;	\/* region within buffer to update *\/$/;"	m	struct:mxcfb_alt_buffer_data	typeref:struct:mxcfb_alt_buffer_data::mxcfb_rect
altair_pro_driver	src/Device/Driver/AltairPro.cpp	/^const struct DeviceRegister altair_pro_driver = {$/;"	v	typeref:struct:DeviceRegister
alternate_infobox_panels	src/InfoBoxes/Content/Alternate.cpp	/^InfoBoxPanel alternate_infobox_panels[] = {$/;"	v	file:
alternates	src/Dialogs/Task/AlternatesListDialog.cpp	/^  AlternateList alternates;$/;"	m	class:final	file:
alternates	src/Engine/Task/Unordered/AlternateTask.hpp	/^  AlternateList alternates;$/;"	m	class:final
altitude	src/Cloud/Client.hpp	/^  int altitude;$/;"	m	struct:CloudClient
altitude	src/Computer/ClimbAverageCalculator.hpp	/^    double altitude;$/;"	m	struct:ClimbAverageCalculator::HistoryItem
altitude	src/Computer/GlideRatioCalculator.hpp	/^    int altitude;$/;"	m	struct:GlideRatioCalculator::Record
altitude	src/Computer/Wind/MeasurementList.hpp	/^  double altitude;               \/**< Altitude of fix *\/$/;"	m	struct:WindMeasurement
altitude	src/Dialogs/Traffic/TrafficList.cpp	/^    int altitude;$/;"	m	struct:TrafficListWidget::Item	file:
altitude	src/Engine/Airspace/AirspaceAltitude.hpp	/^  double altitude;$/;"	m	struct:AirspaceAltitude
altitude	src/Engine/Airspace/AirspaceInterceptSolution.hpp	/^  double altitude;$/;"	m	struct:AirspaceInterceptSolution
altitude	src/Engine/Navigation/Aircraft.hpp	/^  double altitude;$/;"	m	struct:AltitudeState
altitude	src/Engine/Task/Stats/StartStats.hpp	/^  double altitude;$/;"	m	struct:StartStats
altitude	src/Engine/Trace/Point.hpp	/^  RoughAltitude altitude;$/;"	m	class:TracePoint
altitude	src/FLARM/Traffic.hpp	/^  RoughAltitude altitude;$/;"	m	class:FlarmTraffic::AircraftType
altitude	src/FlightStatistics.hpp	/^  LeastSquares altitude;$/;"	m	class:FlightStatistics
altitude	src/Geo/Flat/FlatGeoPoint.hpp	/^  int altitude;$/;"	m	struct:AFlatGeoPoint
altitude	src/Geo/GeoPoint.hpp	/^  double altitude;$/;"	m	struct:AGeoPoint
altitude	src/GliderLink/Traffic.hpp	/^  RoughAltitude altitude;$/;"	m	struct:GliderLinkTraffic
altitude	src/MapWindow/Items/MapItem.hpp	/^  int altitude;$/;"	m	struct:SkyLinesTrafficMapItem
altitude	src/Tracking/SkyLines/Data.hpp	/^    int altitude;$/;"	m	struct:SkyLinesTracking::Data::Traffic
altitude	src/Tracking/SkyLines/Protocol.hpp	/^    int16_t altitude;$/;"	m	struct:SkyLinesTracking::TrafficResponsePacket::Traffic
altitude	src/Tracking/SkyLines/Protocol.hpp	/^  int16_t altitude;$/;"	m	struct:SkyLinesTracking::FixPacket
altitude	src/Tracking/TrackingGlue.hpp	/^  unsigned altitude;$/;"	m	class:final
altitude_above_terrain	src/Engine/Airspace/AirspaceAltitude.hpp	/^  double altitude_above_terrain;$/;"	m	struct:AirspaceAltitude
altitude_agl	src/Engine/Navigation/Aircraft.hpp	/^  double altitude_agl;$/;"	m	struct:AltitudeState
altitude_agl	src/NMEA/Derived.hpp	/^  double altitude_agl;$/;"	m	struct:TerrainInfo
altitude_agl_valid	src/NMEA/Derived.hpp	/^  bool altitude_agl_valid;$/;"	m	struct:TerrainInfo
altitude_available	src/FLARM/Traffic.hpp	/^  bool altitude_available;$/;"	m	class:FlarmTraffic::AircraftType
altitude_base	src/Engine/Airspace/AbstractAirspace.hpp	/^  AirspaceAltitude altitude_base;$/;"	m	class:AbstractAirspace
altitude_base	src/FlightStatistics.hpp	/^  ConvexFilter altitude_base;$/;"	m	class:FlightStatistics
altitude_ceiling	src/FlightStatistics.hpp	/^  ConvexFilter altitude_ceiling;$/;"	m	class:FlightStatistics
altitude_difference	src/Engine/GlideSolvers/GlideResult.hpp	/^  double altitude_difference;$/;"	m	struct:GlideResult
altitude_difference	src/Engine/GlideSolvers/GlideState.hpp	/^  double altitude_difference;$/;"	m	struct:GlideState
altitude_gps	src/Logger/LoggerImpl.hpp	/^    double altitude_gps;$/;"	m	struct:LoggerImpl::PreTakeoffBuffer
altitude_infobox_panels	src/InfoBoxes/Content/Altitude.cpp	/^const InfoBoxPanel altitude_infobox_panels[] = {$/;"	v
altitude_mode	src/Renderer/AirspaceRendererSettings.hpp	/^  AirspaceDisplayMode altitude_mode;$/;"	m	struct:AirspaceRendererSettings
altitude_received	src/GliderLink/Traffic.hpp	/^  bool altitude_received;$/;"	m	struct:GliderLinkTraffic
altitude_terrain	src/FlightStatistics.hpp	/^  LeastSquares altitude_terrain;$/;"	m	class:FlightStatistics
altitude_top	src/Engine/Airspace/AbstractAirspace.hpp	/^  AirspaceAltitude altitude_top;$/;"	m	class:AbstractAirspace
altitude_unit	src/Renderer/WaypointRenderer.cpp	/^  TCHAR altitude_unit[4];$/;"	m	class:final	file:
altitude_unit	src/Units/Settings.hpp	/^  Unit altitude_unit;$/;"	m	struct:UnitSetting
altitude_warning_margin	src/Engine/Airspace/AirspaceWarningConfig.hpp	/^  unsigned altitude_warning_margin;$/;"	m	struct:AirspaceWarningConfig
analgain	src/Terrain/jasper/jpc/jpc_dec.h	/^	int analgain;$/;"	m	struct:__anon124
analysis8_infobox_panels	src/InfoBoxes/Content/Contest.cpp	/^InfoBoxPanel analysis8_infobox_panels[] = {$/;"	v	file:
analysis_barograph_infobox_panels	src/InfoBoxes/Content/Trace.cpp	/^InfoBoxPanel analysis_barograph_infobox_panels[] = {$/;"	v	file:
analysis_widget	src/Dialogs/dlgAnalysis.cpp	/^  AnalysisWidget &analysis_widget;$/;"	m	class:ChartControl	file:
analyze	src/Terrain/jasper/jpc/jpc_qmfb.h	/^	int (*analyze)(jpc_fix_t *, int, int, int, int, int);$/;"	m	struct:__anon105
android_api_level	src/Android/Main.cpp	/^unsigned android_api_level;$/;"	v
angle	src/Audio/ToneSynthesiser.hpp	/^  unsigned volume = 100, angle = 0, increment = 0;$/;"	m	class:ToneSynthesiser
angle	src/Math/LeastSquares.hpp	/^  Angle angle;$/;"	m	struct:ErrorEllipse
angle	src/Topography/shapelib/mapserver.h	/^    double angle;$/;"	m	struct:labelObj
angle	src/Topography/shapelib/mapserver.h	/^    double angle;$/;"	m	struct:styleObj
angle1	src/Task/TaskFileSeeYou.cpp	/^  Angle angle1, angle2, angle12;$/;"	m	struct:SeeYouTurnpointInformation	file:
angle12	src/Task/TaskFileSeeYou.cpp	/^  Angle angle1, angle2, angle12;$/;"	m	struct:SeeYouTurnpointInformation	file:
angle2	src/Task/TaskFileSeeYou.cpp	/^  Angle angle1, angle2, angle12;$/;"	m	struct:SeeYouTurnpointInformation	file:
angle_tolerance	src/Engine/Contest/Solvers/Retrospective.hpp	/^  Angle angle_tolerance;$/;"	m	class:Retrospective
anglemode	src/Topography/shapelib/mapserver.h	/^    enum MS_POSITIONS_ENUM anglemode;$/;"	m	struct:labelObj	typeref:enum:labelObj::MS_POSITIONS_ENUM
angles	src/Topography/shapelib/mapserver.h	/^    double *angles;$/;"	m	struct:__anon23
angles	src/Topography/shapelib/mapserver.h	/^    double *angles;$/;"	m	struct:label_auto_result
annopoint	src/Topography/shapelib/mapserver.h	/^    pointObj annopoint;$/;"	m	struct:__anon38
annotext	src/Topography/shapelib/mapserver.h	/^    char *annotext;$/;"	m	struct:__anon38
ap	src/Geo/Flat/FlatEllipse.hpp	/^  FlatPoint f1, f2, ap;$/;"	m	class:FlatEllipse
append	src/Engine/Navigation/TraceHistory.cpp	/^TraceHistory::append(const MoreData &basic)$/;"	f	class:TraceHistory
append	src/Engine/Task/Stats/TaskSummary.hpp	/^  void append(const TaskSummaryPoint& tsp) {$/;"	f	struct:TaskSummary
append	src/util/StaticString.hxx	/^	void append(const_pointer new_value) {$/;"	f	class:StaticStringBase
append	src/util/StaticString.hxx	/^	void append(const_pointer new_value, size_type _length) {$/;"	f	class:StaticStringBase
append	src/util/TrivialArray.hxx	/^	void append(const_reference value) {$/;"	f	class:TrivialArray
append_serial	src/Engine/Contest/Solvers/TraceManager.hpp	/^  Serial append_serial;$/;"	m	class:TraceManager
append_serial	src/Engine/Trace/Trace.hpp	/^  Serial append_serial, modify_serial;$/;"	m	class:Trace
apple_font_mutex	src/ui/canvas/apple/Font.cpp	/^static Mutex apple_font_mutex;$/;"	v	file:
apply_defaults	src/Input/InputDefaults.cpp	/^apply_defaults(InputConfig &input_config,$/;"	f	file:
approach_radius	src/Device/Driver/CAI302/Protocol.hpp	/^    uint16_t approach_radius;$/;"	m	struct:CAI302::Pilot
approx	src/Terrain/jasper/jp2/jp2_cod.h	/^	uint_fast8_t approx;$/;"	m	struct:__anon88
approx_scale	src/Geo/Flat/FlatProjection.hpp	/^  double approx_scale;$/;"	m	class:FlatProjection
approximation_scale	src/Topography/shapelib/mapserver.h	/^    double approximation_scale;$/;"	m	struct:rendererVTableObj
arc_boundary	src/Engine/Task/ObservationZones/SectorZone.hpp	/^  const bool arc_boundary;$/;"	m	class:SectorZone
archive	src/Terrain/RasterTerrain.hpp	/^  ZipArchive archive;$/;"	m	class:RasterTerrain
area	src/Repository/AvailableFile.hpp	/^  NarrowString<8> area;$/;"	m	struct:AvailableFile
area	src/Weather/PCMet/Overlays.hpp	/^  Area area;$/;"	m	struct:PCMet::OverlayInfo
area_labels	src/Weather/PCMet/Overlays.cpp	/^static constexpr const TCHAR *area_labels[] = {$/;"	v	file:
area_list	src/Dialogs/Weather/PCMetDialog.cpp	/^  ImageAreaListWidget &area_list;$/;"	m	class:final	file:
area_names	src/Weather/PCMet/Overlays.cpp	/^static constexpr const char *area_names[] = {$/;"	v	file:
areas	src/Dialogs/Weather/PCMetDialog.cpp	/^  const PCMet::ImageArea *areas = nullptr;$/;"	m	class:final	file:
areas	src/Weather/PCMet/Images.hpp	/^  const ImageArea *areas;$/;"	m	struct:PCMet::ImageType
areg	src/Terrain/jasper/jpc/jpc_mqdec.h	/^	uint_least32_t areg;$/;"	m	struct:__anon110
args	src/system/Args.hpp	/^  std::list<char *> args;$/;"	m	class:Args
argument_type	src/ui/canvas/memory/PixelOperations.hpp	/^  typedef color_type argument_type;$/;"	t	struct:ColorKey
argument_type	src/ui/canvas/memory/PixelOperations.hpp	/^  typedef color_type argument_type;$/;"	t	struct:PixelIntegerAdapter
arm_mapitem_list	src/MapWindow/GlueMapWindow.hpp	/^  bool arm_mapitem_list = false;$/;"	m	class:GlueMapWindow
armed	src/Engine/Task/Ordered/TaskAdvance.hpp	/^  bool armed = false;$/;"	m	class:TaskAdvance
array	src/util/AllocatedGrid.hxx	/^	AllocatedArray<T> array;$/;"	m	class:AllocatedGrid
array	src/util/ReusableArray.hpp	/^  AllocatedArray<T> array;$/;"	m	class:ReusableArray
array	src/util/TrivialArray.hxx	/^	Array array;$/;"	m	class:TrivialArray
array_buffer	src/Topography/TopographyFileRenderer.hpp	/^  GLArrayBuffer *array_buffer;$/;"	m	class:final
array_buffer_serial	src/Topography/TopographyFileRenderer.hpp	/^  Serial array_buffer_serial;$/;"	m	class:final
arrival_height_display	src/Renderer/WaypointRendererSettings.hpp	/^  } arrival_height_display;$/;"	m	struct:WaypointRendererSettings	typeref:class:WaypointRendererSettings::ArrivalHeightDisplay
arrival_radius	src/Device/Driver/CAI302/Protocol.hpp	/^    uint16_t arrival_radius;$/;"	m	struct:CAI302::Pilot
arrow_active_pen	src/Look/TaskLook.hpp	/^  Pen arrow_active_pen;$/;"	m	struct:TaskLook
arrow_brush	src/Look/WindArrowLook.hpp	/^  Brush arrow_brush;$/;"	m	struct:WindArrowLook
arrow_inactive_pen	src/Look/TaskLook.hpp	/^  Pen arrow_inactive_pen;$/;"	m	struct:TaskLook
arrow_pen	src/Look/WindArrowLook.hpp	/^  Pen arrow_pen, tail_pen;$/;"	m	struct:WindArrowLook
as_display_list	src/Dialogs/Settings/Panels/AirspaceConfigPanel.cpp	/^static constexpr StaticEnumChoice as_display_list[] = {$/;"	v	file:
as_fill_mode_list	src/Dialogs/Settings/Panels/AirspaceConfigPanel.cpp	/^static constexpr StaticEnumChoice as_fill_mode_list[] = {$/;"	v	file:
as_label_selection_list	src/Dialogs/Settings/Panels/AirspaceConfigPanel.cpp	/^static constexpr StaticEnumChoice as_label_selection_list[] = {$/;"	v	file:
ascent_height	src/Android/TextUtil.hpp	/^  unsigned height, ascent_height, capital_height;$/;"	m	class:TextUtil
ascent_height	src/ui/canvas/Font.hpp	/^  unsigned height, ascent_height, capital_height;$/;"	m	class:Font
asin	src/Math/Angle.hpp	/^  static Angle asin(double x) {$/;"	f	class:Angle
asio_thread	src/io/async/GlobalAsioThread.cpp	/^AsioThread *asio_thread;$/;"	v
asset_number	src/Asset.cpp	/^TCHAR asset_number[100] = _T(""); \/\/4G17DW31L0HY");$/;"	v
assign	src/util/StaticString.hxx	/^	void assign(const_pointer new_value) {$/;"	f	class:StaticStringBase
assign	src/util/StaticString.hxx	/^	void assign(const_pointer new_value, size_type length) {$/;"	f	class:StaticStringBase
assoc	src/Terrain/jasper/jp2/jp2_cod.h	/^	uint_fast16_t assoc;$/;"	m	struct:__anon90
astar_goal	src/Engine/Route/RoutePlanner.hpp	/^  RoutePoint astar_goal;$/;"	m	class:RoutePlanner
async	src/Device/Descriptor.hpp	/^  AsyncJobRunner async;$/;"	m	class:final
at	src/system/FileMapping.hpp	/^  const void *at(size_t offset) const {$/;"	f	class:FileMapping
atc_infobox_panels	src/InfoBoxes/Content/Places.cpp	/^const InfoBoxPanel atc_infobox_panels[] = {$/;"	v
atc_reference	src/Computer/Settings.hpp	/^  GeoPoint atc_reference;$/;"	m	struct:PlacesOfInterestSettings
atr833_driver	src/Device/Driver/ATR833.cpp	/^const DeviceRegister atr833_driver = {$/;"	v
attitude	src/HorizonWidget.cpp	/^  AttitudeState attitude;$/;"	m	class:HorizonWindow	file:
attitude	src/NMEA/Info.hpp	/^  AttitudeState attitude;$/;"	m	struct:NMEAInfo
attribute	src/Device/Driver/CAI302/Protocol.hpp	/^    uint16_t attribute;$/;"	m	struct:CAI302::Navpoint
attributeBindingObj	src/Topography/shapelib/mapserver.h	/^  } attributeBindingObj;$/;"	t	typeref:struct:__anon22
attributes	src/XML/Node.hpp	/^    std::forward_list<Attribute> attributes;$/;"	m	struct:XMLNode::Data
audible_count	src/Audio/VarioSynthesiser.hpp	/^  size_t audible_count;$/;"	m	class:final
audible_remaining	src/Audio/VarioSynthesiser.hpp	/^  size_t audible_remaining, silence_remaining;$/;"	m	class:final
audio	src/Dialogs/Device/Vega/Schemes.hpp	/^  } audio[6];$/;"	m	struct:VEGA_SCHEME	typeref:struct:VEGA_SCHEME::Audio
audio_deadband_parameters	src/Dialogs/Device/Vega/AudioDeadbandParameters.hpp	/^VegaParametersWidget::StaticParameter audio_deadband_parameters[] = {$/;"	v
audio_mode_parameters	src/Dialogs/Device/Vega/AudioModeParameters.hpp	/^VegaParametersWidget::StaticParameter audio_mode_parameters[] = {$/;"	v
audio_pages	src/Dialogs/Device/Vega/VegaConfigurationDialog.cpp	/^static const char *const audio_pages[] = {$/;"	v	file:
ausgabe	src/Device/Driver/Volkslogger/grecord.h	/^  FILE *ausgabe;$/;"	m	class:GRECORD
auto_bugs	src/Computer/Settings.hpp	/^  bool auto_bugs;$/;"	m	struct:PolarSettings
auto_close	src/Dialogs/Airspace/dlgAirspaceWarnings.cpp	/^static bool auto_close = true;$/;"	v	file:
auto_close_dialog	src/Gauge/TrafficSettings.hpp	/^  bool auto_close_dialog;$/;"	m	struct:TrafficSettings
auto_logger	src/Logger/Settings.hpp	/^  } auto_logger;$/;"	m	struct:LoggerSettings	typeref:class:LoggerSettings::AutoLogger
auto_logger_list	src/Dialogs/Settings/Panels/LoggerConfigPanel.cpp	/^static constexpr StaticEnumChoice auto_logger_list[] = {$/;"	v	file:
auto_mac_cready	src/NMEA/Derived.hpp	/^  double auto_mac_cready;$/;"	m	struct:DerivedInfo
auto_mac_cready_available	src/NMEA/Derived.hpp	/^  Validity auto_mac_cready_available;$/;"	m	struct:DerivedInfo
auto_mc	src/Engine/Task/TaskBehaviour.hpp	/^  bool auto_mc;$/;"	m	struct:TaskBehaviour
auto_mc_mode	src/Engine/Task/TaskBehaviour.hpp	/^  AutoMCMode auto_mc_mode;$/;"	m	struct:TaskBehaviour
auto_qnh	src/Computer/GlideComputerAirData.hpp	/^  AutoQNH auto_qnh;$/;"	m	class:GlideComputerAirData
auto_size	src/Dialogs/WidgetDialog.cpp	/^   full(false), auto_size(false)$/;"	f
auto_size	src/Dialogs/WidgetDialog.cpp	/^   full(false), auto_size(true)$/;"	f
auto_size	src/Dialogs/WidgetDialog.cpp	/^   full(true), auto_size(false)$/;"	f
auto_size	src/Dialogs/WidgetDialog.hpp	/^  bool auto_size;$/;"	m	class:WidgetDialog
auto_switch	src/PageSettings.hpp	/^    bool auto_switch;$/;"	m	struct:PageLayout::InfoBoxConfig
auto_zoom	src/Gauge/TrafficSettings.hpp	/^  bool auto_zoom;$/;"	m	struct:TrafficSettings
auto_zoom_distance	src/NMEA/Derived.hpp	/^  double auto_zoom_distance;$/;"	m	struct:DerivedInfo
auto_zoom_enabled	src/MapSettings.hpp	/^  bool auto_zoom_enabled;$/;"	m	struct:MapSettings
auto_zoom_enabled	src/PageState.hpp	/^  bool auto_zoom_enabled;$/;"	m	struct:PageState
autoangle	src/Topography/shapelib/mapserver.h	/^    int autoangle;$/;"	m	struct:styleObj
autominfeaturesize	src/Topography/shapelib/mapserver.h	/^    int autominfeaturesize; \/* true or false *\/$/;"	m	struct:labelObj
autopilot	src/Replay/DemoReplay.hpp	/^  TaskAutoPilot autopilot;$/;"	m	class:DemoReplay
auxiliary_enabled	src/UIState.hpp	/^  bool auxiliary_enabled;$/;"	m	struct:UIState
auxiliary_index	src/UIState.hpp	/^  unsigned auxiliary_index;$/;"	m	struct:UIState
av_dist	src/Engine/Task/Computer/IncrementalSpeedComputer.hpp	/^  AvFilter<N_AV> av_dist;$/;"	m	class:IncrementalSpeedComputer
available	src/FLARM/Error.hpp	/^  Validity available;$/;"	v
available	src/FLARM/Status.hpp	/^  Validity available;$/;"	m	struct:FlarmStatus
available	src/FLARM/Version.hpp	/^  Validity available;$/;"	m	struct:FlarmVersion
available	src/NMEA/Acceleration.hpp	/^  bool available;$/;"	m	struct:AccelerationState
available	src/Topography/shapelib/mapserver.h	/^    size_t available;$/;"	m	struct:_autobuffer
available	src/Widget/RowFormWidget.hpp	/^    bool available = true;$/;"	m	struct:RowFormWidget::Row
available	src/util/SliceAllocator.hxx	/^		Item *available;$/;"	m	struct:SliceAllocator::Area
average	src/Gauge/GaugeVario.hpp	/^    LabelValueGeometry average, gross, mc;$/;"	m	struct:GaugeVario::Geometry
average	src/NMEA/VarioInfo.hpp	/^  double average;$/;"	m	struct:VarioInfo
averageCalculatorMap	src/FLARM/FlarmCalculations.hpp	/^  AverageCalculatorMap averageCalculatorMap;$/;"	m	class:FlarmCalculations
average_delta_distance	src/Engine/Trace/Trace.hpp	/^  unsigned average_delta_distance;$/;"	m	class:Trace
average_delta_time	src/Engine/Trace/Trace.hpp	/^  unsigned average_delta_time;$/;"	m	class:Trace
average_di	src/Gauge/GaugeVario.hpp	/^  LabelValueDrawInfo average_di, mc_di, gross_di;$/;"	m	class:GaugeVario
average_eff_time	src/Computer/Settings.hpp	/^  AverageEffTime average_eff_time;$/;"	m	struct:ComputerSettings
average_gr	src/NMEA/VarioInfo.hpp	/^  double average_gr;$/;"	m	struct:VarioInfo
average_vario	src/Computer/GlideComputerAirData.hpp	/^  AverageVarioComputer average_vario;$/;"	m	class:GlideComputerAirData
awp	src/Replay/TaskAutoPilot.hpp	/^  unsigned awp;$/;"	m	class:TaskAutoPilot
axis_label_font	src/Look/ChartLook.hpp	/^  Font axis_label_font;$/;"	m	struct:ChartLook
axis_pen	src/Look/TraceHistoryLook.hpp	/^  Pen axis_pen;$/;"	m	struct:TraceHistoryLook
axis_value_font	src/Look/ChartLook.hpp	/^  Font axis_value_font;$/;"	m	struct:ChartLook
azimuth	src/Math/SunEphemeris.hpp	/^    Angle azimuth;$/;"	m	struct:SunEphemeris::Result
b	src/Computer/WaveResult.hpp	/^  GeoPoint a, b;$/;"	m	struct:WaveInfo
b	src/Engine/GlideSolvers/PolarCoefficients.hpp	/^  double a, b, c;$/;"	m	struct:PolarCoefficients
b	src/Geo/Flat/FlatEllipse.hpp	/^  double b;$/;"	m	class:FlatEllipse
b	src/Math/Filter.hpp	/^  double b[2];$/;"	m	class:Filter
b	src/Math/Histogram.hpp	/^  double b;$/;"	m	class:Histogram
b	src/Math/LeastSquares.hpp	/^  double b;$/;"	m	class:LeastSquares
b	src/Math/Line2D.hpp	/^  Point a, b;$/;"	m	struct:Line2D
b	src/Math/Quadratic.hpp	/^  const double b;$/;"	m	class:Quadratic
b	src/Tracking/SkyLines/Data.hpp	/^    GeoPoint a, b;$/;"	m	struct:SkyLinesTracking::Data::Wave
b	src/Tracking/SkyLines/Protocol.hpp	/^  GeoPoint a, b;$/;"	m	struct:SkyLinesTracking::Wave
b	src/ui/canvas/PortableColor.hpp	/^  uint8_t b, g, r;$/;"	m	class:BGR8Color
b	src/ui/canvas/PortableColor.hpp	/^  uint8_t r, g, b;$/;"	m	class:RGB8Color
b	src/ui/canvas/memory/PixelOperations.hpp	/^  const color_type a, b;$/;"	m	struct:PixelOpaqueAlpha
b	src/ui/canvas/opengl/Color.hpp	/^  Component r, g, b, a;$/;"	m	class:Color
b	src/util/ByteOrder.hxx	/^	uint8_t a, b, c, d;$/;"	m	class:PackedLE32
b	src/util/MD5.hpp	/^    uint32_t a, b, c, d;$/;"	m	struct:MD5::State
b50_driver	src/Device/Driver/BorgeltB50.cpp	/^const struct DeviceRegister b50_driver = {$/;"	v	typeref:struct:DeviceRegister
bBigEndian	src/Topography/shapelib/mapshape.c	/^static const bool bBigEndian = BYTE_ORDER == BIG_ENDIAN;$/;"	v	file:
bBigEndian	src/Topography/shapelib/maptree.c	/^static const bool bBigEndian = BYTE_ORDER == BIG_ENDIAN;$/;"	v	file:
bCurrentRecordModified	src/Topography/shapelib/mapshape.h	/^    int   bCurrentRecordModified;$/;"	m	struct:__anon76
bNoHeader	src/Topography/shapelib/mapshape.h	/^    int   bNoHeader;$/;"	m	struct:__anon76
bUpdated	src/Topography/shapelib/mapshape.h	/^    int   bUpdated;$/;"	m	struct:__anon75
bUpdated	src/Topography/shapelib/mapshape.h	/^    int   bUpdated;$/;"	m	struct:__anon76
b_ext	src/Device/Driver/LX/Convert.cpp	/^  LXN::ExtensionConfig k_ext, b_ext;$/;"	m	struct:Context	file:
b_ext	src/Device/Driver/LX/LXN.hpp	/^    const struct BExt *b_ext;$/;"	m	union:LXN::Packet	typeref:struct:LXN::Packet::BExt
ba	src/Device/Driver/Volkslogger/grecord.h	/^  uint8_t ba[3];$/;"	m	class:GRECORD
ba	src/Geo/Flat/FlatEllipse.hpp	/^  double ba() const {$/;"	f	class:FlatEllipse
back	src/Engine/Trace/Trace.hpp	/^  const TracePoint &back() const {$/;"	f	class:Trace
back	src/util/StaticString.hxx	/^	value_type back() const {$/;"	f	class:StaticStringBase
background	src/MapWindow/MapWindow.hpp	/^  BackgroundRenderer background;$/;"	m	class:MapWindow
background	src/MapWindow/TargetMapWindow.hpp	/^  BackgroundRenderer background;$/;"	m	class:TargetMapWindow
background	src/lua/Background.cpp	/^                              boost::intrusive::constant_time_size<false>> background;$/;"	m	namespace:Lua	file:
background_bitmap	src/Look/DialogLook.hpp	/^    Bitmap background_bitmap;$/;"	m	struct:DialogLook::__anon11
background_bitmap	src/Look/VarioLook.hpp	/^  Bitmap background_bitmap;$/;"	m	struct:VarioLook
background_brush	src/Look/DialogLook.hpp	/^  Brush background_brush;$/;"	m	struct:DialogLook
background_color	src/Look/ButtonLook.hpp	/^    Color background_color;$/;"	m	struct:ButtonLook::StateLook
background_color	src/Look/CrossSectionLook.hpp	/^  Color background_color;$/;"	m	struct:CrossSectionLook
background_color	src/Look/DialogLook.hpp	/^      Color background_color, text_color;$/;"	m	struct:DialogLook::__anon13::__anon14
background_color	src/Look/DialogLook.hpp	/^      Color background_color, text_color;$/;"	m	struct:DialogLook::__anon13::__anon15
background_color	src/Look/DialogLook.hpp	/^      Color background_color, text_color;$/;"	m	struct:DialogLook::__anon13::__anon16
background_color	src/Look/DialogLook.hpp	/^    Color background_color, text_color;$/;"	m	struct:DialogLook::__anon12
background_color	src/Look/DialogLook.hpp	/^    Color background_color, text_color;$/;"	m	struct:DialogLook::__anon13
background_color	src/Look/DialogLook.hpp	/^    Color background_color;$/;"	m	struct:DialogLook::__anon11
background_color	src/Look/DialogLook.hpp	/^  Color background_color, text_color;$/;"	m	struct:DialogLook
background_color	src/Look/FlarmTrafficLook.hpp	/^  Color background_color;$/;"	m	struct:FlarmTrafficLook
background_color	src/Look/InfoBoxLook.hpp	/^  Color background_color, focused_background_color, pressed_background_color;$/;"	m	struct:InfoBoxLook
background_color	src/Look/TerminalLook.hpp	/^  Color background_color, text_color;$/;"	m	struct:TerminalLook
background_color	src/Look/ThermalAssistantLook.hpp	/^  Color background_color;$/;"	m	struct:ThermalAssistantLook
background_color	src/Look/VarioLook.hpp	/^  Color background_color, text_color, dimmed_text_color;$/;"	m	struct:VarioLook
background_color	src/ProgressWindow.hpp	/^  Color background_color;$/;"	m	class:ProgressWindow
background_color	src/ui/canvas/memory/Canvas.hpp	/^  Color text_color, background_color;$/;"	m	class:Canvas
background_color	src/ui/canvas/memory/PixelOperations.hpp	/^  const color_type background_color, text_color;$/;"	m	struct:PixelOpaqueText
background_color	src/ui/canvas/opengl/Canvas.hpp	/^  Color text_color, background_color;$/;"	m	class:Canvas
background_color	src/ui/window/SolidContainerWindow.hpp	/^  Color background_color;$/;"	m	class:SolidContainerWindow
background_dirty	src/Gauge/GaugeVario.hpp	/^  bool background_dirty = true;$/;"	m	class:GaugeVario
background_lua_key	src/lua/Background.cpp	/^static constexpr char background_lua_key[] = "xcsoar.background";$/;"	v	file:
background_mode	src/ui/canvas/memory/Canvas.hpp	/^  } background_mode = OPAQUE;$/;"	m	class:Canvas	typeref:enum:Canvas::__anon172
background_mode	src/ui/canvas/opengl/Canvas.hpp	/^  } background_mode = OPAQUE;$/;"	m	class:Canvas	typeref:enum:Canvas::__anon174
background_x	src/Look/VarioLook.hpp	/^  unsigned background_x;$/;"	m	struct:VarioLook
backgroundcolor	src/Topography/shapelib/mapserver.h	/^    colorObj *backgroundcolor;$/;"	m	struct:__anon63
backgroundcolor	src/Topography/shapelib/mapserver.h	/^    colorObj backgroundcolor;$/;"	m	struct:__anon47
backgroundcolor	src/Topography/shapelib/mapserver.h	/^    colorObj backgroundcolor;$/;"	m	struct:styleObj
backgroundcolor	src/Topography/shapelib/mapserver.h	/^    colorObj color, outlinecolor, backgroundcolor;$/;"	m	struct:tileCacheObj
ballast	src/Engine/GlideSolvers/GlidePolar.hpp	/^  double ballast;$/;"	m	class:GlidePolar
ballast	src/Gauge/GaugeVario.hpp	/^    BallastGeometry ballast;$/;"	m	struct:GaugeVario::Geometry
ballast_capacity	src/Device/Driver/CAI302/Protocol.hpp	/^    uint16_t ballast_capacity;$/;"	m	struct:CAI302::Polar
ballast_clock	src/BallastDumpManager.hpp	/^  PeriodClock ballast_clock;$/;"	m	class:BallastDumpManager
ballast_fraction	src/NMEA/ExternalSettings.hpp	/^  double ballast_fraction;$/;"	m	struct:ExternalSettings
ballast_fraction_available	src/NMEA/ExternalSettings.hpp	/^  Validity ballast_fraction_available;$/;"	m	struct:ExternalSettings
ballast_overload	src/NMEA/ExternalSettings.hpp	/^  double ballast_overload;$/;"	m	struct:ExternalSettings
ballast_overload_available	src/NMEA/ExternalSettings.hpp	/^  Validity ballast_overload_available;$/;"	m	struct:ExternalSettings
ballast_ratio	src/Engine/GlideSolvers/GlidePolar.hpp	/^  double ballast_ratio;$/;"	m	class:GlidePolar
ballast_timer_active	src/Computer/Settings.hpp	/^  bool ballast_timer_active;$/;"	m	struct:PolarSettings
bands	src/Terrain/jasper/jpc/jpc_dec.h	/^	jpc_dec_band_t *bands;$/;"	m	struct:__anon125
bands	src/Topography/shapelib/mapserver.h	/^    int  bands;$/;"	m	struct:__anon32
bandsitem	src/Topography/shapelib/mapserver.h	/^    char *bandsitem; \/* which item in a tile contains bands to use (tiled raster data only) *\/$/;"	m	struct:layerObj
bandsitemindex	src/Topography/shapelib/mapserver.h	/^    int bandsitemindex;$/;"	m	struct:layerObj
bank_angle	src/NMEA/Attitude.hpp	/^  Angle bank_angle;$/;"	m	struct:AttitudeState
bank_angle_available	src/NMEA/Attitude.hpp	/^  Validity bank_angle_available;$/;"	m	struct:AttitudeState
bank_angle_computed	src/NMEA/Attitude.hpp	/^  bool bank_angle_computed;$/;"	m	struct:AttitudeState
bar	src/Menu/ButtonLabel.cpp	/^static MenuBar *bar;$/;"	v	file:
bar_brush	src/Look/ChartLook.hpp	/^  Brush bar_brush;$/;"	m	struct:ChartLook
baro	src/Dialogs/Device/DeviceListDialog.cpp	/^    bool alive:1, location:1, gps:1, baro:1, airspeed:1, vario:1, traffic:1;$/;"	m	struct:final::Flags	file:
baro_altitude	src/NMEA/Info.hpp	/^  double baro_altitude;$/;"	m	struct:NMEAInfo
baro_altitude	src/Replay/CatmullRomInterpolator.hpp	/^    double baro_altitude;$/;"	m	struct:CatmullRomInterpolator::Record
baro_altitude_available	src/NMEA/Info.hpp	/^  Validity baro_altitude_available;$/;"	m	struct:NMEAInfo
baro_altitude_weak	src/NMEA/Info.hpp	/^  bool baro_altitude_weak;$/;"	m	struct:NMEAInfo
base	src/Airspace/AirspaceParser.cpp	/^  AirspaceAltitude base;$/;"	m	struct:TempAirspaceType	file:
base	src/Renderer/AirspaceLabelList.hpp	/^    AirspaceAltitude base;$/;"	m	struct:AirspaceLabelList::Label
base	src/ui/canvas/PortableColor.hpp	/^  BGR8Color base;$/;"	m	class:BGRA8Color
basic	src/Blackboard/RateLimitedBlackboardListener.hpp	/^  const MoreData *basic, *basic2;$/;"	m	class:RateLimitedBlackboardListener
basic	src/Renderer/WaypointRenderer.cpp	/^  const MoreData &basic;$/;"	m	class:final	file:
basic2	src/Blackboard/RateLimitedBlackboardListener.hpp	/^  const MoreData *basic, *basic2;$/;"	m	class:RateLimitedBlackboardListener
battery_level	src/NMEA/Info.hpp	/^  double battery_level;$/;"	m	struct:NMEAInfo
battery_level_available	src/NMEA/Info.hpp	/^  Validity battery_level_available;$/;"	m	struct:NMEAInfo
battery_timer	src/MainWindow.hpp	/^  BatteryTimer battery_timer;$/;"	m	class:MainWindow
batterystatus	src/Hardware/Battery.hpp	/^    enum batterystatus {$/;"	g	namespace:Power::Battery
baud	src/Dialogs/Device/FLARM/ConfigWidget.hpp	/^  unsigned baud, priv, thre, range, acft, log_int, notrack;$/;"	m	class:final
baud_rate	src/Device/Config.hpp	/^  unsigned baud_rate;$/;"	m	struct:DeviceConfig
baud_rate	src/Device/Port/K6BtPort.cpp	/^  :Port(_listener, _handler), port(std::move(_port)), baud_rate(_baud_rate)$/;"	f
baud_rate	src/Device/Port/K6BtPort.hpp	/^  unsigned baud_rate;$/;"	m	class:K6BtPort
baud_rate	src/Device/Port/SerialPort.hpp	/^  unsigned baud_rate;$/;"	m	class:SerialPort
baud_rates	src/Dialogs/Device/Vega/HardwareParameters.hpp	/^static constexpr StaticEnumChoice baud_rates[] = {$/;"	v
bb_children	src/Engine/Route/FlatTriangleFanTree.hpp	/^  FlatBoundingBox bb_children;$/;"	m	class:FlatTriangleFanTree
bb_screen	src/Renderer/TaskPointRenderer.hpp	/^  FlatBoundingBox bb_screen;$/;"	m	class:TaskPointRenderer
bbox	src/Topography/shapelib/mapserver.h	/^    rectObj bbox; \/* bounds of the whole cachePtr. Individual text and symbol sub bounds are found in the textsymbols *\/$/;"	m	struct:__anon39
bbox	src/Topography/shapelib/mapserver.h	/^    rectObj bbox;$/;"	m	struct:__anon37
bearing	src/Engine/Contest/Solvers/Retrospective.hpp	/^    Angle bearing;$/;"	m	struct:Retrospective::NearWaypoint
bearing	src/Geo/GeoVector.hpp	/^  Angle bearing;$/;"	m	struct:GeoVector
bearing	src/Geo/SpeedVector.hpp	/^  Angle bearing;$/;"	m	struct:SpeedVector
bearing	src/MapWindow/Items/MapItem.hpp	/^  Angle bearing;$/;"	m	struct:SelfMapItem
bearing_noise	src/Replay/TaskAutoPilot.hpp	/^  double bearing_noise;$/;"	m	struct:AutopilotParameters
bearing_pen	src/Look/TaskLook.hpp	/^  Pen bearing_pen;$/;"	m	struct:TaskLook
beep_type	src/Dialogs/Device/Vega/Schemes.hpp	/^    int beep_type, pitch_scheme, pitch_scale, period_scheme, period_scale;$/;"	m	struct:VEGA_SCHEME::Audio
beep_types	src/Dialogs/Device/Vega/AudioParameters.hpp	/^static constexpr StaticEnumChoice beep_types[] = {$/;"	v
begin	src/Cloud/Client.hpp	/^  List::const_iterator begin() const {$/;"	f	class:CloudClientContainer
begin	src/Cloud/Thermal.hpp	/^  List::const_iterator begin() const {$/;"	f	class:CloudThermalContainer
begin	src/Device/MultipleDevices.hpp	/^  const_iterator begin() {$/;"	f	class:final
begin	src/Engine/Airspace/AirspaceWarningManager.hpp	/^  const_iterator begin() const {$/;"	f	class:AirspaceWarningManager
begin	src/Engine/Trace/Trace.hpp	/^  const_iterator begin() const {$/;"	f	class:Trace
begin	src/Engine/Waypoint/Waypoints.hpp	/^  const_iterator begin() const {$/;"	f	class:Waypoints
begin	src/FLARM/ColorDatabase.hpp	/^  const_iterator begin() const {$/;"	f	class:FlarmColorDatabase
begin	src/FLARM/FlarmNetDatabase.hpp	/^  RecordMap::const_iterator begin() const {$/;"	f	class:FlarmNetDatabase
begin	src/FLARM/NameDatabase.hpp	/^  const_iterator begin() const {$/;"	f	class:FlarmNameDatabase
begin	src/Language/LanguageGlue.hpp	/^  const void * const begin;$/;"	m	struct:BuiltinLanguage
begin	src/Renderer/AirspaceLabelList.hpp	/^  const Label *begin() const {$/;"	f	class:AirspaceLabelList
begin	src/Renderer/WaypointLabelList.hpp	/^  const Label *begin() const {$/;"	f	class:WaypointLabelList
begin	src/Repository/FileRepository.hpp	/^  const_iterator begin() const {$/;"	f	struct:FileRepository
begin	src/Topography/TopographyFile.hpp	/^  const_iterator begin() const {$/;"	f	class:TopographyFile
begin	src/Weather/NOAAStore.hpp	/^  const_iterator begin() const {$/;"	f	class:NOAAStore
begin	src/Weather/NOAAStore.hpp	/^  iterator begin() {$/;"	f	class:NOAAStore
begin	src/XML/Node.hpp	/^    const_iterator begin() const {$/;"	f	struct:XMLNode::Data
begin	src/XML/Node.hpp	/^  const_iterator begin() const {$/;"	f	class:XMLNode
begin	src/net/AddressInfo.hxx	/^	const_iterator begin() const {$/;"	f	class:AddressInfoList
begin	src/util/AllocatedGrid.hxx	/^	constexpr const_iterator begin() const {$/;"	f	class:AllocatedGrid
begin	src/util/AllocatedGrid.hxx	/^	iterator begin() {$/;"	f	class:AllocatedGrid
begin	src/util/IterableSplitString.hxx	/^	const_iterator begin() const {$/;"	f	class:BasicIterableSplitString
begin	src/util/OverwritingRingBuffer.hpp	/^  const_iterator begin() const {$/;"	f	class:TrivialOverwritingRingBuffer
begin	src/util/Range.hpp	/^  I begin() const {$/;"	f	class:Range
begin_	src/util/Range.hpp	/^  I begin_, end_;$/;"	m	class:Range
behaviour	src/Engine/Task/Factory/AbstractTaskFactory.hpp	/^  const TaskBehaviour &behaviour;$/;"	m	class:AbstractTaskFactory
bestLD	src/Engine/GlideSolvers/GlidePolar.hpp	/^  double bestLD;$/;"	m	class:GlidePolar
best_alternate_id	src/Input/TaskEventObserver.hpp	/^  unsigned best_alternate_id;$/;"	m	class:final
best_cruise_track_brush	src/Look/TaskLook.hpp	/^  Brush best_cruise_track_brush;$/;"	m	struct:TaskLook
best_cruise_track_pen	src/Look/TaskLook.hpp	/^  Pen best_cruise_track_pen;$/;"	m	struct:TaskLook
best_d	src/Engine/Contest/Solvers/TriangleContest.hpp	/^  unsigned best_d;$/;"	m	class:TriangleContest
best_glide_speed	src/Device/Driver/CAI302/Protocol.hpp	/^    uint8_t best_glide_speed;$/;"	m	struct:CAI302::Polar
best_ld	src/Device/Driver/CAI302/Protocol.hpp	/^    uint8_t best_ld;$/;"	m	struct:CAI302::Polar
best_result	src/Engine/Contest/Solvers/AbstractContest.hpp	/^  ContestResult best_result;$/;"	m	class:AbstractContest
best_solution	src/Engine/Contest/Solvers/AbstractContest.hpp	/^  ContestTraceVector best_solution;$/;"	m	class:AbstractContest
bi	src/ui/canvas/RawBitmap.hpp	/^  BITMAPINFO bi;$/;"	m	class:final
big_icon	src/Topography/TopographyFile.hpp	/^  const ResourceId icon, big_icon;$/;"	m	class:TopographyFile
big_logo	src/Gauge/LogoView.hpp	/^  Bitmap logo, big_logo, title, big_title;$/;"	m	class:LogoView
big_resource_id	src/Topography/TopographyStore.cpp	/^  ResourceId resource_id, big_resource_id;$/;"	m	struct:__anon83	file:
big_title	src/Gauge/LogoView.hpp	/^  Bitmap logo, big_logo, title, big_title;$/;"	m	class:LogoView
bindings	src/Topography/shapelib/mapserver.h	/^    attributeBindingObj bindings[MS_LABEL_BINDING_LENGTH];$/;"	m	struct:labelObj
bindings	src/Topography/shapelib/mapserver.h	/^    attributeBindingObj bindings[MS_STYLE_BINDING_LENGTH];$/;"	m	struct:styleObj
bindval	src/Topography/shapelib/mapserver.h	/^    attributeBindingObj bindval;$/;"	m	union:__anon27
bindvals	src/Topography/shapelib/mapserver.h	/^    hashTableObj bindvals;$/;"	m	struct:layerObj
bitmap	src/MapWindow/OverlayBitmap.hpp	/^  Bitmap bitmap;$/;"	m	class:final
bitmap	src/Renderer/BitmapButtonRenderer.hpp	/^  const Bitmap &bitmap;$/;"	m	class:BitmapButtonRenderer
bitmap	src/Widget/ViewImageWidget.cpp	/^  const Bitmap *bitmap;$/;"	m	class:final	file:
bitmap	src/Widget/ViewImageWidget.hpp	/^  const Bitmap *bitmap;$/;"	m	class:ViewImageWidget
bitmap	src/ui/canvas/Bitmap.hpp	/^  HBITMAP bitmap = nullptr;$/;"	m	class:final
bitmap	src/ui/canvas/Icon.hpp	/^  Bitmap bitmap;$/;"	m	class:MaskedIcon
bitmap	src/ui/canvas/RawBitmap.hpp	/^  HBITMAP bitmap;$/;"	m	class:final
bitmap	src/ui/canvas/gdi/BufferCanvas.hpp	/^  HBITMAP bitmap;$/;"	m	class:BufferCanvas
bitmapConfigValueOf_method	src/Android/NativeView.cpp	/^jmethodID NativeView::bitmapConfigValueOf_method;$/;"	m	class:NativeView	file:
bitmapConfigValueOf_method	src/Android/NativeView.hpp	/^  static jmethodID bitmapConfigValueOf_method;$/;"	m	class:NativeView
bitmapToTexture	src/Android/NativeView.hpp	/^  bool bitmapToTexture(jobject bmp, bool alpha, jint *result) {$/;"	f	class:NativeView
bitmapToTexture_method	src/Android/NativeView.cpp	/^jmethodID NativeView::bitmapToTexture_method;$/;"	m	class:NativeView	file:
bitmapToTexture_method	src/Android/NativeView.hpp	/^  static jmethodID bitmapToTexture_method;$/;"	m	class:NativeView
bitmap_progress_border	src/ProgressWindow.hpp	/^  Bitmap bitmap_progress_border;$/;"	m	class:ProgressWindow
bitmaps	src/Look/AirspaceLook.hpp	/^  Bitmap bitmaps[NUMAIRSPACEBRUSHES];$/;"	m	struct:AirspaceLook
bkBottom	src/InfoBoxes/Border.hpp	/^  bkBottom,$/;"	e	enum:BorderKind_t
bkLeft	src/InfoBoxes/Border.hpp	/^  bkLeft$/;"	e	enum:BorderKind_t
bkNone	src/InfoBoxes/Border.hpp	/^  bkNone,$/;"	e	enum:BorderKind_t
bkRight	src/InfoBoxes/Border.hpp	/^  bkRight,$/;"	e	enum:BorderKind_t
bkTop	src/InfoBoxes/Border.hpp	/^  bkTop,$/;"	e	enum:BorderKind_t
blabelaxes	src/Topography/shapelib/mapserver.h	/^    int     blabelaxes;$/;"	m	struct:__anon49
black_brush	src/Look/ChartLook.hpp	/^  Brush black_brush;$/;"	m	struct:ChartLook
black_outline	src/Renderer/AirspaceRendererSettings.hpp	/^  bool black_outline;$/;"	m	struct:AirspaceRendererSettings
black_pen	src/Look/ThermalBandLook.hpp	/^  Pen white_pen, black_pen;$/;"	m	struct:ThermalBandLook
blackboard	src/Blackboard/ScopeCalculatedListener.hpp	/^  LiveBlackboard &blackboard;$/;"	m	class:ScopeCalculatedListener
blackboard	src/Blackboard/ScopeGPSListener.hpp	/^  LiveBlackboard &blackboard;$/;"	m	class:ScopeGPSListener
blackboard	src/Dialogs/dlgAnalysis.cpp	/^  const FullBlackboard &blackboard;$/;"	m	class:ChartControl	file:
blackboard	src/Dialogs/dlgAnalysis.cpp	/^  const FullBlackboard &blackboard;$/;"	m	class:final	file:
blackboard	src/Gauge/BigThermalAssistantWidget.hpp	/^  LiveBlackboard &blackboard;$/;"	m	class:BigThermalAssistantWidget
blackboard	src/Gauge/GaugeFLARM.hpp	/^  LiveBlackboard &blackboard;$/;"	m	class:final
blackboard	src/Gauge/GaugeThermalAssistant.hpp	/^  LiveBlackboard &blackboard;$/;"	m	class:final
blackboard	src/Gauge/GaugeVario.hpp	/^  const FullBlackboard &blackboard;$/;"	m	class:GaugeVario
blackboard	src/Gauge/GlueGaugeVario.hpp	/^  LiveBlackboard &blackboard;$/;"	m	class:final
blackboard	src/Interface.cpp	/^InterfaceBlackboard CommonInterface::Private::blackboard;$/;"	m	class:CommonInterface::Private	file:
blackboard	src/Logger/GlueFlightLogger.hpp	/^  LiveBlackboard &blackboard;$/;"	m	class:GlueFlightLogger
blank_brush	src/Look/ChartLook.hpp	/^  Brush blank_brush;$/;"	m	struct:ChartLook
block_stf_enabled	src/Computer/Settings.hpp	/^  bool block_stf_enabled;$/;"	m	struct:FeaturesSettings
blocks	src/Renderer/LabelBlock.hpp	/^    BlockArray blocks;$/;"	m	class:LabelBlock::Bucket
bluefly_driver	src/Device/Driver/BlueFly/Register.cpp	/^const struct DeviceRegister bluefly_driver = {$/;"	v	typeref:struct:DeviceRegister
bluetooth_mac	src/Device/Config.hpp	/^  StaticString<32> bluetooth_mac;$/;"	m	struct:DeviceConfig
bmp	src/ui/canvas/Bitmap.hpp	/^  jobject bmp = nullptr;$/;"	m	class:final
bmp085_class	src/Android/BMP085Device.cpp	/^static Java::TrivialClass bmp085_class;$/;"	v	file:
bmp085_ctor	src/Android/BMP085Device.cpp	/^static jmethodID bmp085_ctor, close_method;$/;"	v	file:
bo	src/ui/canvas/egl/TopCanvas.cpp	/^  struct gbm_bo *bo;$/;"	m	struct:drm_fb	typeref:struct:drm_fb::gbm_bo	file:
body	src/Device/Driver/IMI/Protocol/Types.hpp	/^    IMIBYTE body[11];$/;"	m	struct:IMI::Fix
bold	src/Look/FontDescription.hpp	/^  bool bold, italic;$/;"	m	class:FontDescription
bold	src/Renderer/WaypointLabelList.hpp	/^    bool bold;$/;"	m	struct:WaypointLabelList::Label
bold_font	src/Look/DialogLook.hpp	/^  Font text_font, bold_font, small_font;$/;"	m	struct:DialogLook
bold_font	src/Look/WaypointLook.hpp	/^  const Font *font, *bold_font;$/;"	m	struct:WaypointLook
bold_font_path	src/ui/canvas/freetype/Font.cpp	/^static AllocatedPath bold_font_path = nullptr;$/;"	v	file:
bold_italic_font_path	src/ui/canvas/freetype/Font.cpp	/^static AllocatedPath bold_italic_font_path = nullptr;$/;"	v	file:
bool	src/Terrain/jasper/jas_types.h	90;"	d
boost	src/Geo/Boost/GeoPoint.hpp	/^namespace boost {$/;"	n
border_color	src/Renderer/AirspaceRendererSettings.hpp	/^  RGB8Color border_color;$/;"	m	struct:AirspaceClassRendererSettings
border_color_changed	src/Dialogs/Airspace/AirspaceCRendererSettingsPanel.hpp	/^  bool border_color_changed;$/;"	m	class:AirspaceClassRendererSettingsPanel
border_kind	src/InfoBoxes/InfoBoxWindow.hpp	/^  const unsigned border_kind;$/;"	m	class:InfoBoxWindow
border_pen	src/Look/AirspaceLook.hpp	/^  Pen border_pen;$/;"	m	struct:AirspaceClassLook
border_pen	src/Look/DialogLook.hpp	/^    Pen border_pen;$/;"	m	struct:DialogLook::__anon12
border_pen	src/Look/InfoBoxLook.hpp	/^  Pen border_pen;$/;"	m	struct:InfoBoxLook
border_style	src/InfoBoxes/InfoBoxSettings.hpp	/^  } border_style;$/;"	m	struct:InfoBoxSettings	typeref:class:InfoBoxSettings::BorderStyle
border_width	src/Renderer/AirspaceRendererSettings.hpp	/^  unsigned border_width;$/;"	m	struct:AirspaceClassRendererSettings
borrowed	src/Device/Descriptor.hpp	/^  bool borrowed;$/;"	m	class:final
borrowed1	src/Dialogs/Settings/dlgConfiguration.cpp	/^  bool borrowed2, borrowed1;$/;"	m	class:final	file:
borrowed2	src/Dialogs/Settings/dlgConfiguration.cpp	/^  bool borrowed2, borrowed1;$/;"	m	class:final	file:
bottom	src/Form/DigitEntry.hpp	/^  unsigned top, bottom, max_width;$/;"	m	class:CoordinateFormat
bottom	src/PageSettings.hpp	/^  } bottom;$/;"	m	struct:PageLayout	typeref:class:PageLayout::Bottom
bottom	src/ui/dim/Rect.hpp	/^     right(origin.x + size.width), bottom(origin.y + size.height) {}$/;"	f	struct:PixelRect
bottom	src/ui/dim/Rect.hpp	/^    :left(0), top(0), right(size.width), bottom(size.height) {}$/;"	f	struct:PixelRect
bottom	src/ui/dim/Rect.hpp	/^    :left(_left), top(_top), right(_right), bottom(_bottom) {}$/;"	f	struct:PixelRect
bottom	src/ui/dim/Rect.hpp	/^    :left(origin.x), top(origin.y), right(origin.x), bottom(origin.y) {}$/;"	f	struct:PixelRect
bottom	src/ui/dim/Rect.hpp	/^    :left(src.left), top(src.top), right(src.right), bottom(src.bottom) {}$/;"	f	struct:PixelRect
bottom	src/ui/dim/Rect.hpp	/^  int left, top, right, bottom;$/;"	m	struct:PixelRect
bottom	src/util/QuadTree.hxx	/^			:left(_left), top(_top), right(_right), bottom(_bottom) {}$/;"	f	struct:QuadTree::Rectangle
bottom	src/util/QuadTree.hxx	/^		position_type left, top, right, bottom;$/;"	m	struct:QuadTree::Rectangle
bottom_altitude	src/Tracking/SkyLines/Protocol.hpp	/^  int16_t bottom_altitude;$/;"	m	struct:SkyLinesTracking::Thermal
bottom_altitude	src/Tracking/SkyLines/Protocol.hpp	/^  int16_t bottom_altitude;$/;"	m	struct:SkyLinesTracking::Wave
bottom_left	src/Geo/Quadrilateral.hpp	/^  GeoPoint top_left, top_right, bottom_left, bottom_right;$/;"	m	struct:GeoQuadrilateral
bottom_location	src/Cloud/Thermal.hpp	/^  AGeoPoint bottom_location, top_location;$/;"	m	struct:CloudThermal
bottom_location	src/Tracking/SkyLines/Data.hpp	/^    AGeoPoint bottom_location, top_location;$/;"	m	struct:SkyLinesTracking::Data::Thermal
bottom_location	src/Tracking/SkyLines/Protocol.hpp	/^  GeoPoint bottom_location;$/;"	m	struct:SkyLinesTracking::Thermal
bottom_margin	src/MapWindow/GlueMapWindow.hpp	/^  unsigned int bottom_margin = 0;$/;"	m	class:GlueMapWindow
bottom_position	src/ProgressWindow.hpp	/^  PixelRect bottom_position, progress_bar_position;$/;"	m	class:ProgressWindow
bottom_right	src/Geo/Quadrilateral.hpp	/^  GeoPoint top_left, top_right, bottom_left, bottom_right;$/;"	m	struct:GeoQuadrilateral
bottom_widget	src/MainWindow.hpp	/^  Widget *bottom_widget = nullptr;$/;"	m	class:MainWindow
boundaries	src/Engine/Task/PathSolvers/TaskDijkstra.hpp	/^  const SearchPointVector *boundaries[MAX_STAGES];$/;"	m	class:TaskDijkstra
boundary_points	src/Engine/Task/Points/SampledTaskPoint.hpp	/^  SearchPointVector boundary_points;$/;"	m	class:SampledTaskPoint
boundary_scored	src/Engine/Task/Points/SampledTaskPoint.hpp	/^  const bool boundary_scored;$/;"	m	class:SampledTaskPoint
bounding_box	src/Engine/Contest/Solvers/TriangleContest.hpp	/^    FlatBoundingBox bounding_box;$/;"	m	struct:TriangleContest::TurnPointRange
bounding_box	src/Engine/Route/FlatTriangleFan.hpp	/^  FlatBoundingBox bounding_box;$/;"	m	class:FlatTriangleFan
bounds	src/Geo/Flat/TaskProjection.hpp	/^  GeoBounds bounds;$/;"	m	class:TaskProjection
bounds	src/MapWindow/OverlayBitmap.hpp	/^  GeoQuadrilateral bounds;$/;"	m	class:final
bounds	src/Terrain/RasterRenderer.hpp	/^  GeoBounds bounds = GeoBounds::Invalid();$/;"	m	class:RasterRenderer
bounds	src/Terrain/RasterTileCache.hpp	/^    GeoBounds bounds;$/;"	m	struct:RasterTileCache::CacheHeader
bounds	src/Terrain/RasterTileCache.hpp	/^  GeoBounds bounds;$/;"	m	class:RasterTileCache
bounds	src/Topography/XShape.hpp	/^  GeoBounds bounds;$/;"	m	class:XShape
bounds	src/Topography/shapelib/mapprimitive.h	/^  rectObj bounds;$/;"	m	struct:__anon72
bounds	src/Topography/shapelib/mapserver.h	/^    rectObj bounds;$/;"	m	struct:__anon40
bounds	src/Topography/shapelib/mapserver.h	/^    rectObj bounds;$/;"	m	struct:__anon44
bounds	src/Topography/shapelib/mapserver.h	/^    shapeObj bounds;$/;"	m	struct:__anon23
bounds	src/Topography/shapelib/mapserver.h	/^  label_bounds bounds;$/;"	m	struct:textPathObj
bounds	src/Topography/shapelib/mapshape.h	/^    rectObj bounds; \/* shape extent *\/$/;"	m	struct:__anon78
bounds	src/util/QuadTree.hxx	/^	Rectangle bounds;$/;"	v
box_brush	src/Look/CheckBoxLook.hpp	/^    Brush box_brush;$/;"	m	struct:CheckBoxLook::StateLook
box_pen	src/Look/CheckBoxLook.hpp	/^    Pen box_pen;$/;"	m	struct:CheckBoxLook::StateLook
bpc	src/Terrain/jasper/jp2/jp2_cod.h	/^	uint_fast8_t *bpc;$/;"	m	struct:__anon89
bpc	src/Terrain/jasper/jp2/jp2_cod.h	/^	uint_fast8_t bpc;$/;"	m	struct:__anon86
bpcc	src/Terrain/jasper/jp2/jp2_cod.h	/^		jp2_bpcc_t bpcc;$/;"	m	union:__anon94::__anon95
bpcs	src/Terrain/jasper/jp2/jp2_cod.h	/^	uint_fast8_t *bpcs;$/;"	m	struct:__anon87
branch_and_bound	src/Engine/Contest/Solvers/TriangleContest.hpp	/^  std::multimap<unsigned, CandidateSet> branch_and_bound;$/;"	v
brgps	src/Dialogs/Device/LX/V7ConfigWidget.hpp	/^  unsigned brgps, brpda;$/;"	m	class:final
bridge	src/Device/Port/AndroidPort.hpp	/^  PortBridge *bridge;$/;"	m	class:AndroidPort
bridge	src/Dialogs/Device/PortMonitor.cpp	/^  std::unique_ptr<PortTerminalBridge> bridge;$/;"	m	class:final	file:
bridge_icon	src/Look/WaypointLook.hpp	/^  MaskedIcon mountain_top_icon, bridge_icon, obstacle_icon;$/;"	m	struct:WaypointLook
brightness	src/Terrain/TerrainSettings.hpp	/^  short brightness;$/;"	m	struct:TerrainRendererSettings
browseformat	src/Topography/shapelib/mapserver.h	/^    char *browseformat;$/;"	m	struct:__anon35
brpda	src/Dialogs/Device/LX/V7ConfigWidget.hpp	/^  unsigned brgps, brpda;$/;"	m	class:final
brush	src/Look/ButtonLook.hpp	/^    Brush brush;$/;"	m	struct:ButtonLook::__anon18
brush	src/Renderer/AirspaceRendererSettings.hpp	/^  uint8_t brush;$/;"	m	struct:AirspaceClassRendererSettings
brush	src/Topography/ShapeRenderer.hpp	/^  const Brush *brush;$/;"	m	class:ShapeRenderer
brush	src/Topography/TopographyFileRenderer.hpp	/^  Brush brush;$/;"	m	class:final
brush	src/ui/canvas/memory/Canvas.hpp	/^  Brush brush;$/;"	m	class:Canvas
brush	src/ui/canvas/opengl/Canvas.hpp	/^  Brush brush;$/;"	m	class:Canvas
brush_above	src/Look/FinalGlideBarLook.hpp	/^  Brush brush_above;$/;"	m	struct:FinalGlideBarLook
brush_above_mc0	src/Look/FinalGlideBarLook.hpp	/^  Brush brush_above_mc0;$/;"	m	struct:FinalGlideBarLook
brush_active	src/Look/ThermalBandLook.hpp	/^  Brush brush_active;$/;"	m	struct:ThermalBandLook
brush_below	src/Look/FinalGlideBarLook.hpp	/^  Brush brush_below;$/;"	m	struct:FinalGlideBarLook
brush_below_landable	src/Look/FinalGlideBarLook.hpp	/^  Brush brush_below_landable;$/;"	m	struct:FinalGlideBarLook
brush_below_landable_mc0	src/Look/FinalGlideBarLook.hpp	/^  Brush brush_below_landable_mc0;$/;"	m	struct:FinalGlideBarLook
brush_below_mc0	src/Look/FinalGlideBarLook.hpp	/^  Brush brush_below_mc0;$/;"	m	struct:FinalGlideBarLook
brush_circling_climb	src/Look/ClimbPercentLook.hpp	/^  Brush brush_circling_climb;$/;"	m	struct:ClimbPercentLook
brush_circling_descent	src/Look/ClimbPercentLook.hpp	/^  Brush brush_circling_descent;$/;"	m	struct:ClimbPercentLook
brush_climb	src/Look/VarioBarLook.hpp	/^  Brush brush_climb;$/;"	m	struct:VarioBarLook
brush_climb_avg	src/Look/VarioBarLook.hpp	/^  Brush brush_climb_avg;$/;"	m	struct:VarioBarLook
brush_inactive	src/Look/ThermalBandLook.hpp	/^  Brush brush_inactive;$/;"	m	struct:ThermalBandLook
brush_mc	src/Look/VarioBarLook.hpp	/^  Brush brush_mc;$/;"	m	struct:VarioBarLook
brush_noncircling_climb	src/Look/ClimbPercentLook.hpp	/^  Brush brush_noncircling_climb;$/;"	m	struct:ClimbPercentLook
brush_sink	src/Look/VarioBarLook.hpp	/^  Brush brush_sink;$/;"	m	struct:VarioBarLook
brush_sink_avg	src/Look/VarioBarLook.hpp	/^  Brush brush_sink_avg;$/;"	m	struct:VarioBarLook
brushes	src/Look/AirspaceLook.hpp	/^  Brush brushes[NUMAIRSPACEBRUSHES];$/;"	m	struct:AirspaceLook
brutto_vario	src/NMEA/MoreData.hpp	/^  double brutto_vario;$/;"	m	struct:MoreData
brutto_vario_available	src/NMEA/MoreData.hpp	/^  Validity brutto_vario_available;$/;"	m	struct:MoreData
brx_	src/Terrain/jasper/jas_image.h	/^	jas_image_coord_t brx_;$/;"	m	struct:__anon101
bry_	src/Terrain/jasper/jas_image.h	/^	jas_image_coord_t bry_;$/;"	m	struct:__anon101
bsgn	src/Engine/Task/PathSolvers/IsolineCrossingFinder.cpp	51;"	d	file:
bssid	src/Kobo/WPASupplicant.hpp	/^  StaticString<32> bssid;$/;"	m	struct:WifiConfiguredNetworkInfo
bssid	src/Kobo/WPASupplicant.hpp	/^  StaticString<32> bssid;$/;"	m	struct:WifiStatus
bssid	src/Kobo/WPASupplicant.hpp	/^  StaticString<32> bssid;$/;"	m	struct:WifiVisibleNetwork
bssid	src/Kobo/WifiDialog.cpp	/^    StaticString<32> bssid;$/;"	m	struct:final::NetworkInfo	file:
bucket	src/util/QuadTree.hxx	/^		Bucket *bucket;$/;"	m	class:iterator
bucket	src/util/QuadTree.hxx	/^		const Bucket *bucket;$/;"	m	class:const_iterator
bucket_allocator	src/util/QuadTree.hxx	/^	BucketAllocator bucket_allocator;$/;"	v
buckets	src/Renderer/LabelBlock.hpp	/^  Bucket buckets[BUCKET_COUNT];$/;"	m	class:LabelBlock
buckets	src/util/Cache.hxx	/^	std::array<typename KeyMap::bucket_type, table_size> buckets;$/;"	m	class:Cache
buckets	src/util/QuadTree.hxx	/^		Bucket buckets[N];$/;"	m	struct:QuadBucket
buf32k	src/zzip/file.h	/^    char* buf32k;$/;"	m	struct:zzip_file
buf32k	src/zzip/lib.h	/^        char * volatile buf32k; $/;"	m	struct:zzip_dir::__anon184
buf_	src/Terrain/jasper/jas_stream.h	/^	jas_uchar *buf_;$/;"	m	struct:__anon99
buf_	src/Terrain/jasper/jpc/jpc_bs.h	/^	uint_fast16_t buf_;$/;"	m	struct:__anon106
bufbase_	src/Terrain/jasper/jas_stream.h	/^	jas_uchar *bufbase_;$/;"	m	struct:__anon97
buff512bits	src/util/MD5.hpp	/^  uint8_t buff512bits[64];$/;"	m	class:MD5
buffer	src/Audio/ALSAPCMPlayer.hpp	/^  std::unique_ptr<int16_t[]> buffer;$/;"	m	class:ALSAPCMPlayer
buffer	src/Device/Driver/IMI/Protocol/MessageParser.cpp	/^    IMIBYTE buffer[IMICOMM_MAX_MSG_SIZE];$/;"	m	union:IMI::MessageParser::__anon163	file:
buffer	src/Device/Driver/Volkslogger/dbbconv.h	/^  uint8_t buffer[SIZE];$/;"	m	class:DBB
buffer	src/Device/Port/BufferedPort.hpp	/^  StaticFifoBuffer<uint8_t, 16384> buffer;$/;"	m	class:BufferedPort
buffer	src/Device/Util/LineSplitter.hpp	/^  Buffer buffer;$/;"	m	class:PortLineSplitter
buffer	src/Device/Util/NMEAReader.hpp	/^  StaticFifoBuffer<char, 256u> buffer;$/;"	m	class:PortNMEAReader
buffer	src/Dialogs/Device/PortMonitor.cpp	/^  StaticFifoBuffer<char, 1024> buffer;$/;"	m	class:final	file:
buffer	src/Dialogs/KnobTextEntry.cpp	/^  TCHAR buffer[MAX_TEXTENTRY];$/;"	m	class:final	file:
buffer	src/Dialogs/Task/Manager/TaskMapButtonRenderer.hpp	/^  mutable BufferCanvas buffer;$/;"	m	class:TaskMapButtonRenderer
buffer	src/Form/DataField/Angle.cpp	/^static TCHAR buffer[16];$/;"	v	file:
buffer	src/Form/DataField/RoughTime.cpp	/^static TCHAR buffer[6];$/;"	v	file:
buffer	src/IGC/IGCWriter.hpp	/^  char buffer[MAX_IGC_BUFF];$/;"	m	class:IGCWriter
buffer	src/MapWindow/StencilMapCanvas.hpp	/^  Canvas &buffer;$/;"	m	class:StencilMapCanvas
buffer	src/Math/DifferentialWindowFilter.hpp	/^  OverwritingRingBuffer<Sample, N> buffer;$/;"	m	class:DifferentialWindowFilter
buffer	src/Monitor/AirspaceWarningMonitor.cpp	/^  StaticString<256> buffer;$/;"	m	class:final	file:
buffer	src/Monitor/MatTaskMonitor.cpp	/^  StaticString<256> buffer;$/;"	m	class:final	file:
buffer	src/Terrain/RasterTile.hpp	/^  RasterBuffer buffer;$/;"	m	class:RasterTile
buffer	src/Topography/shapelib/mapserver.h	/^    double buffer;      \/* the buffer size around the selection area *\/$/;"	m	struct:__anon30
buffer	src/Topography/shapelib/mapserver.h	/^    double buffer;$/;"	m	struct:__anon33
buffer	src/Topography/shapelib/mapserver.h	/^    int buffer; \/* space to reserve around a label *\/$/;"	m	struct:labelObj
buffer	src/io/BufferedOutputStream.hxx	/^	DynamicFifoBuffer<char> buffer;$/;"	m	class:BufferedOutputStream
buffer	src/io/BufferedReader.hxx	/^	DynamicFifoBuffer<char> buffer;$/;"	m	class:BufferedReader
buffer	src/io/GunzipReader.hxx	/^	StaticFifoBuffer<Bytef, 65536> buffer;$/;"	m	class:final
buffer	src/net/http/ToBuffer.cpp	/^  uint8_t *buffer;$/;"	m	class:final	file:
buffer	src/net/http/ToBuffer.hpp	/^  void *buffer;$/;"	m	class:Net::DownloadToBufferJob
buffer	src/ui/canvas/Bitmap.hpp	/^  WritableImageBuffer<BitmapPixelTraits> buffer = WritableImageBuffer<BitmapPixelTraits>::Empty();$/;"	m	class:final
buffer	src/ui/canvas/RawBitmap.hpp	/^  RawColor *buffer;$/;"	m	class:final
buffer	src/ui/canvas/RawBitmap.hpp	/^  const std::unique_ptr<RawColor[]> buffer;$/;"	m	class:final
buffer	src/ui/canvas/custom/TopCanvas.hpp	/^  WritableImageBuffer<ActivePixelTraits> buffer;$/;"	m	class:DisplayOrientation
buffer	src/ui/canvas/custom/TopCanvas.hpp	/^  WritableImageBuffer<GreyscalePixelTraits> buffer;$/;"	m	class:DisplayOrientation
buffer	src/ui/canvas/memory/Canvas.hpp	/^  WritableImageBuffer<ActivePixelTraits> buffer;$/;"	m	class:Canvas
buffer	src/ui/canvas/memory/RasterCanvas.hpp	/^  WritableImageBuffer<PixelTraits> buffer;$/;"	m	class:RasterCanvas
buffer	src/ui/window/BufferWindow.hpp	/^  BufferCanvas buffer;$/;"	m	class:BufferWindow
buffer	src/util/AllocatedArray.hxx	/^		:buffer(n) {}$/;"	f	class:AllocatedArray
buffer	src/util/Cache.hxx	/^	std::array<Item, max_size> buffer;$/;"	m	class:Cache
buffer	src/util/OverwritingRingBuffer.hpp	/^    const TrivialOverwritingRingBuffer &buffer;$/;"	m	class:TrivialOverwritingRingBuffer::const_iterator
buffer	src/util/StaticString.hxx	/^	pointer buffer() {$/;"	f	class:StaticStringBase
bufferObj	src/Topography/shapelib/mapserver.h	/^  } bufferObj;$/;"	t	typeref:struct:_autobuffer
bufferPolyline	src/Topography/shapelib/mapprimitive.c	/^void bufferPolyline(shapeObj *p, shapeObj *op, int w)$/;"	f
buffer_canvas	src/MapWindow/MapWindow.hpp	/^  BufferCanvas buffer_canvas;$/;"	m	class:MapWindow
buffer_canvas	src/MapWindow/TargetMapWindow.hpp	/^  BufferCanvas buffer_canvas;$/;"	m	class:TargetMapWindow
buffer_data_source	src/Audio/PCMResourcePlayer.hpp	/^  PCMBufferDataSource buffer_data_source;$/;"	m	class:PCMResourcePlayer
buffer_drawn	src/MapWindow/StencilMapCanvas.hpp	/^  bool buffer_drawn;$/;"	m	class:StencilMapCanvas
buffer_generation	src/MapWindow/MapWindow.hpp	/^  unsigned ui_generation = 1, buffer_generation = 0;$/;"	m	class:MapWindow
buffer_pos	src/Device/Driver/IMI/Protocol/MessageParser.cpp	/^  unsigned buffer_pos;$/;"	m	namespace:IMI::MessageParser	file:
buffer_projection	src/MapWindow/MapWindow.hpp	/^  MapWindowProjection buffer_projection;$/;"	m	class:MapWindow
buffer_size	src/Audio/ALSAPCMPlayer.hpp	/^  snd_pcm_uframes_t buffer_size;$/;"	m	class:ALSAPCMPlayer
buffered	src/IGC/IGCWriter.hpp	/^  BufferedOutputStream buffered;$/;"	m	class:IGCWriter
buffered	src/io/FileLineReader.hpp	/^  BufferedReader buffered;$/;"	m	class:FileLineReaderA
buffered	src/io/ZipLineReader.hpp	/^  BufferedReader buffered;$/;"	m	class:ZipLineReaderA
buffers	src/Audio/AndroidPCMPlayer.hpp	/^  int16_t buffers[3][4096];$/;"	m	class:AndroidPCMPlayer
buffers	src/ui/window/DoubleBufferWindow.hpp	/^  BufferCanvas buffers[2];$/;"	m	class:DoubleBufferWindow
bufmode_	src/Terrain/jasper/jas_stream.h	/^	int bufmode_;$/;"	m	struct:__anon97
bufsize_	src/Terrain/jasper/jas_stream.h	/^	int bufsize_;$/;"	m	struct:__anon97
bufsize_	src/Terrain/jasper/jas_stream.h	/^	size_t bufsize_;$/;"	m	struct:__anon99
bufstart_	src/Terrain/jasper/jas_stream.h	/^	jas_uchar *bufstart_;$/;"	m	struct:__anon97
bugs	src/Computer/Settings.hpp	/^  double bugs;$/;"	m	struct:PolarSettings
bugs	src/Engine/GlideSolvers/GlidePolar.hpp	/^  double bugs;$/;"	m	class:GlidePolar
bugs	src/Gauge/GaugeVario.cpp	/^  :ballast(look, rc), bugs(look, rc)$/;"	f
bugs	src/Gauge/GaugeVario.hpp	/^    BugsGeometry bugs;$/;"	m	struct:GaugeVario::Geometry
bugs	src/NMEA/ExternalSettings.hpp	/^  double bugs;$/;"	m	struct:ExternalSettings
bugs_available	src/NMEA/ExternalSettings.hpp	/^  Validity bugs_available;$/;"	m	struct:ExternalSettings
buildNumber	src/Device/Driver/IMI/Protocol/Types.hpp	/^    IMIWORD buildNumber;$/;"	m	struct:IMI::TDeviceInfo
bulk	src/ui/event/android/Loop.hpp	/^  bool bulk;$/;"	m	class:UI::EventLoop
bulk	src/ui/event/poll/Loop.hpp	/^  bool bulk;$/;"	m	class:UI::EventLoop
bulk	src/ui/event/sdl/Loop.hpp	/^  bool bulk;$/;"	m	class:UI::EventLoop
bulk_baud_rate	src/Device/Config.hpp	/^  unsigned bulk_baud_rate;$/;"	m	struct:DeviceConfig
bulk_baud_rate	src/Device/Driver/LX/Internal.hpp	/^  unsigned bulk_baud_rate;$/;"	m	class:LXDevice
bulkrate	src/Device/Driver/Volkslogger/Internal.hpp	/^  unsigned const bulkrate;$/;"	m	class:VolksloggerDevice
busy	src/Device/Driver/LX/Internal.hpp	/^  std::atomic<bool> busy;$/;"	m	class:LXDevice
busy	src/event/Loop.hxx	/^	bool busy = true;$/;"	m	class:final
busy	src/system/SystemLoad.cpp	/^  long busy, idle;$/;"	m	struct:cpu	file:
busy	src/thread/StandbyThread.hpp	/^  bool busy = false;$/;"	m	class:StandbyThread
button	src/InfoBoxes/Panel/RadioEdit.cpp	/^    :OffsetButtonsWidget(UIGlobals::GetDialogLook().button, _T("%.0f KHz"), 5, 1000),set_active_freq(active_freq) {}$/;"	m	class:final	file:
button	src/Look/DialogLook.hpp	/^  ButtonLook button;$/;"	m	struct:DialogLook
button1	src/Dialogs/Settings/dlgConfiguration.cpp	/^    PixelRect expert, button2, button1;$/;"	m	struct:final::Layout	file:
button1	src/Dialogs/Settings/dlgConfiguration.cpp	/^  Button button2, button1;$/;"	m	class:final	file:
button2	src/Dialogs/Settings/dlgConfiguration.cpp	/^    PixelRect expert, button2, button1;$/;"	m	struct:final::Layout	file:
button2	src/Dialogs/Settings/dlgConfiguration.cpp	/^  Button button2, button1;$/;"	m	class:final	file:
button_height	src/Widget/KeyboardWidget.hpp	/^  unsigned button_height;$/;"	m	class:KeyboardWidget
button_renderer	src/Form/DigitEntry.hpp	/^  ButtonFrameRenderer button_renderer;$/;"	m	class:CoordinateFormat
button_renderer	src/Form/ScrollBar.hpp	/^  ButtonFrameRenderer button_renderer;$/;"	m	class:ScrollBar
button_width	src/Widget/KeyboardWidget.hpp	/^  unsigned button_width;$/;"	m	class:KeyboardWidget
buttons	src/Dialogs/Settings/Panels/PagesConfigPanel.cpp	/^  ButtonPanelWidget *buttons;$/;"	m	class:PageListWidget	file:
buttons	src/Dialogs/Task/Manager/TaskListPanel.cpp	/^  ButtonPanelWidget *buttons;$/;"	m	class:final	file:
buttons	src/Dialogs/Traffic/TrafficList.cpp	/^  TrafficListButtons *const buttons;$/;"	m	class:TrafficListWidget	file:
buttons	src/Dialogs/WidgetDialog.hpp	/^  ButtonPanel buttons;$/;"	m	class:WidgetDialog
buttons	src/Dialogs/dlgQuickMenu.cpp	/^  boost::container::static_vector<Button, GridView::MAX_ITEMS> buttons;$/;"	m	class:final	file:
buttons	src/Form/ButtonPanel.hpp	/^  StaticArray<Button *, 8u> buttons;$/;"	m	class:ButtonPanel
buttons	src/Form/TabDisplay.hpp	/^  StaticArray<TabButton *, 32> buttons;$/;"	m	class:final
buttons	src/Form/TabMenuDisplay.hpp	/^  StaticArray<SubMenuButton, 32> buttons;$/;"	m	class:final
buttons	src/Menu/MenuBar.hpp	/^  Button buttons[MAX_BUTTONS];$/;"	m	class:MenuBar
buttons	src/Widget/ButtonPanelWidget.hpp	/^  std::unique_ptr<ButtonPanel> buttons;$/;"	m	class:ButtonPanelWidget
buttons	src/Widget/KeyboardWidget.hpp	/^  CharacterButton buttons[MAX_BUTTONS];$/;"	m	class:KeyboardWidget
buttons	src/Widget/OffsetButtonsWidget.hpp	/^  std::unique_ptr<std::array<Button, 4>> buttons;$/;"	m	class:OffsetButtonsWidget
buttons	src/Widget/QuestionWidget.hpp	/^  StaticArray<Button, 8> buttons;$/;"	m	class:QuestionWidget
buttons_widget	src/Dialogs/Task/Manager/TaskEditPanel.cpp	/^  ButtonPanelWidget *buttons_widget;$/;"	m	class:TaskEditPanel	file:
buttons_widget	src/Dialogs/Weather/MapOverlayWidget.cpp	/^  ButtonPanelWidget *buttons_widget;$/;"	m	class:final	file:
buttons_widget	src/Dialogs/Weather/NOAAList.cpp	/^  ButtonPanelWidget *buttons_widget;$/;"	m	class:final	file:
bvertical	src/Topography/shapelib/mapserver.h	/^    int     bvertical;$/;"	m	struct:__anon49
byte_bas64	src/Device/Driver/Volkslogger/grecord.cpp	/^byte_bas64(const uint8_t *b)$/;"	f	file:
bytes_left	src/Device/Driver/IMI/Protocol/MessageParser.cpp	/^  unsigned bytes_left;$/;"	m	namespace:IMI::MessageParser	file:
bytes_per_block	src/Device/Driver/CAI302/Protocol.hpp	/^    PackedBE16 bytes_per_block;$/;"	m	struct:CAI302::FileASCII
bytes_per_block	src/Device/Driver/CAI302/Protocol.hpp	/^    PackedBE16 bytes_per_block;$/;"	m	struct:CAI302::FileBinary
c	src/Engine/GlideSolvers/PolarCoefficients.hpp	/^    :a(_a), b(_b), c(_c) {}$/;"	f	struct:PolarCoefficients
c	src/Engine/GlideSolvers/PolarCoefficients.hpp	/^  double a, b, c;$/;"	m	struct:PolarCoefficients
c	src/ui/canvas/memory/PixelTraits.hpp	/^    color_type c;$/;"	m	union:BGRAPixelTraits::U
c	src/util/ByteOrder.hxx	/^	uint8_t a, b, c, d;$/;"	m	class:PackedLE32
c	src/util/MD5.hpp	/^    uint32_t a, b, c, d;$/;"	m	struct:MD5::State
c36	src/IGC/IGCParser.cpp	/^static constexpr char c36[] = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ";$/;"	v	file:
cLXWP0	src/Device/Driver/Condor.cpp	/^cLXWP0(NMEAInputLine &line, NMEAInfo &info)$/;"	f	file:
c_probe_driver	src/Device/Driver/CProbe.cpp	/^const struct DeviceRegister c_probe_driver = {$/;"	v	typeref:struct:DeviceRegister
c_str	src/system/Path.hpp	/^  const_pointer c_str() const {$/;"	f	class:AllocatedPath
c_str	src/system/Path.hpp	/^  constexpr const_pointer c_str() const {$/;"	f	class:Path
c_str	src/util/StringParser.hxx	/^	constexpr const_pointer c_str() const {$/;"	f	class:StringParser
cache	src/Topography/CachedTopographyRenderer.hpp	/^  TransparentRendererCache cache;$/;"	m	class:CachedTopographyRenderer
cache	src/Weather/Rasp/RaspRenderer.hpp	/^  RaspCache cache;$/;"	m	class:RaspRenderer
cache	src/zzip/lib.h	/^    } cache;$/;"	m	struct:zzip_dir	typeref:struct:zzip_dir::__anon184
cache_bounds	src/Topography/TopographyFile.hpp	/^  GeoBounds cache_bounds;$/;"	m	class:TopographyFile
cache_index	src/Terrain/jasper/jpc/jpc_dec.h	/^	int cache_index;$/;"	m	struct:__anon127
cache_path	src/io/FileCache.hpp	/^  AllocatedPath cache_path;$/;"	m	class:FileCache
cache_shapes	src/Topography/shapelib/mapserver.h	/^    int cache_shapes; \/* whether to cache shapes in resultCacheObj *\/$/;"	m	struct:__anon33
cached_size	src/Engine/Trace/Trace.hpp	/^  unsigned cached_size;$/;"	m	class:Trace
cachesize	src/Topography/shapelib/mapserver.h	/^    int cachesize;$/;"	m	struct:__anon41
cachesize	src/Topography/shapelib/mapserver.h	/^    int cachesize;$/;"	m	struct:__anon44
cai302	src/Device/RecordedFlight.hpp	/^    uint8_t cai302;$/;"	m	union:RecordedFlightInfo::__anon159
cai302DeclAddWaypoint	src/Device/Driver/CAI302/Declare.cpp	/^cai302DeclAddWaypoint(Port &port, int DeclIndex, const Waypoint &way_point,$/;"	f	file:
cai302_driver	src/Device/Driver/CAI302/Register.cpp	/^const struct DeviceRegister cai302_driver = {$/;"	v	typeref:struct:DeviceRegister
cai302_id	src/Device/Driver/CAI302/Protocol.hpp	/^    uint8_t cai302_id;$/;"	m	struct:CAI302::GeneralInfo
cai_PCAIB	src/Device/Driver/CAI302/Parser.cpp	/^cai_PCAIB(gcc_unused NMEAInputLine &line, gcc_unused NMEAInfo &info)$/;"	f	file:
cai_PCAID	src/Device/Driver/CAI302/Parser.cpp	/^cai_PCAID(NMEAInputLine &line, NMEAInfo &data)$/;"	f	file:
cai_lnav_driver	src/Device/Driver/CaiLNav.cpp	/^const struct DeviceRegister cai_lnav_driver = {$/;"	v	typeref:struct:DeviceRegister
cai_w	src/Device/Driver/CAI302/Parser.cpp	/^cai_w(NMEAInputLine &line, NMEAInfo &info)$/;"	f	file:
calc	src/Geo/Memento/GeoVectorMemento.cpp	/^GeoVectorMemento::calc(const GeoPoint& _origin,$/;"	f	class:GeoVectorMemento
calc_crc	src/Device/Driver/LX/Protocol.cpp	/^LX::calc_crc(const void *p0, size_t len, uint8_t crc)$/;"	f	class:LX
calc_crc_char	src/Device/Driver/LX/Protocol.cpp	/^LX::calc_crc_char(uint8_t d, uint8_t crc)$/;"	f	class:LX
calc_cruise_efficiency	src/Engine/Task/TaskBehaviour.hpp	/^  bool calc_cruise_efficiency;$/;"	m	struct:TaskBehaviour
calc_effective_mc	src/Engine/Task/TaskBehaviour.hpp	/^  bool calc_effective_mc;$/;"	m	struct:TaskBehaviour
calc_flight_mode	src/Engine/Task/Stats/TaskStats.cpp	/^TaskStats::calc_flight_mode(const TaskBehaviour &settings)$/;"	f	class:TaskStats
calc_glide_required	src/Engine/Task/TaskBehaviour.hpp	/^  bool calc_glide_required;$/;"	m	struct:TaskBehaviour
calcstepsizes	src/Terrain/jasper/jpc/jpc_dec.c	/^static int calcstepsizes(uint_fast16_t refstepsize, unsigned numrlvls,$/;"	f	file:
calculated	src/Blackboard/RateLimitedBlackboardListener.hpp	/^     basic(nullptr), basic2(nullptr), calculated(nullptr) {}$/;"	f	class:RateLimitedBlackboardListener
calculated	src/Blackboard/RateLimitedBlackboardListener.hpp	/^  const DerivedInfo *calculated;$/;"	m	class:RateLimitedBlackboardListener
calculated_info	src/Blackboard/BaseBlackboard.hpp	/^  DerivedInfo calculated_info;$/;"	m	class:BaseBlackboard
calculation_thread	src/Components.cpp	/^CalculationThread *calculation_thread;$/;"	v
calibration_parameters	src/Dialogs/Device/Vega/CalibrationParameters.hpp	/^VegaParametersWidget::StaticParameter calibration_parameters[] = {$/;"	v
call_sign_font	src/Look/FlarmTrafficLook.hpp	/^  Font info_values_font, info_units_font, info_labels_font, call_sign_font;$/;"	m	struct:FlarmTrafficLook
callback	src/Dialogs/SimulatorPromptWindow.hpp	/^  const std::function<void(Result)> callback;$/;"	m	class:final
callback	src/Dialogs/dlgSimulatorPrompt.cpp	/^  std::function<void(SimulatorPromptWindow::Result)> callback;$/;"	m	class:final	file:
callback	src/Form/Button.hpp	/^  Callback callback;$/;"	m	class:Button
callback	src/Form/DigitEntry.hpp	/^  std::function<void()> callback;$/;"	m	class:CoordinateFormat
callback	src/Terrain/Thread.hpp	/^  const std::function<void()> callback;$/;"	m	class:final
callback	src/Topography/Thread.hpp	/^  const std::function<void()> callback;$/;"	m	class:final
callback	src/Widget/ActionWidget.hpp	/^  const std::function<void()> callback;$/;"	m	class:ActionWidget
callback	src/Widget/ButtonWidget.hpp	/^  const std::function<void()> callback;$/;"	m	class:ButtonWidget
callback	src/Widget/CallbackWidget.hpp	/^    :callback(_callback) {}$/;"	f	class:CallbackWidget
callback	src/Widget/CallbackWidget.hpp	/^  void (*const callback)();$/;"	m	class:CallbackWidget
callback	src/Widget/QuestionWidget.hpp	/^    std::function<void()> callback;$/;"	m	struct:QuestionWidget::Button
callback	src/event/CoarseTimerEvent.hxx	/^		:loop(_loop), callback(_callback) {}$/;"	f	class:final
callback	src/event/CoarseTimerEvent.hxx	/^	const Callback callback;$/;"	m	class:final
callback	src/event/DeferEvent.hxx	/^		:loop(_loop), callback(_callback) {}$/;"	f	class:final
callback	src/event/DeferEvent.hxx	/^	const Callback callback;$/;"	m	class:final
callback	src/event/FineTimerEvent.hxx	/^		:loop(_loop), callback(_callback) {}$/;"	f	class:final
callback	src/event/FineTimerEvent.hxx	/^	const Callback callback;$/;"	m	class:final
callback	src/event/InjectEvent.hxx	/^		:loop(_loop), callback(_callback) {}$/;"	f	class:final
callback	src/event/InjectEvent.hxx	/^	const Callback callback;$/;"	m	class:final
callback	src/event/SocketEvent.hxx	/^	const Callback callback;$/;"	m	class:final
callback	src/lua/InputEvent.cpp	/^  Lua::Value callback;$/;"	m	class:final	file:
callback	src/lua/Timer.cpp	/^  Lua::Value callback;$/;"	m	class:final	file:
callback	src/ui/event/DelayedNotify.hpp	/^  const Callback callback;$/;"	m	class:UI::final
callback	src/ui/event/Notify.hpp	/^  const CallbackFunction callback;$/;"	m	class:UI::final
callback	src/ui/event/PeriodicTimer.hpp	/^  const Callback callback;$/;"	m	class:UI::final
callback	src/ui/event/Timer.hpp	/^  const Callback callback;$/;"	m	class:UI::final
callback	src/ui/event/shared/Event.hpp	/^  Callback callback;$/;"	m	struct:UI::Event
calling_listeners	src/Blackboard/LiveBlackboard.hpp	/^  bool calling_listeners;$/;"	m	class:LiveBlackboard
callsign	src/Dialogs/Traffic/TrafficList.cpp	/^    const TCHAR *callsign;$/;"	m	struct:TrafficListWidget::Item	file:
callsign	src/FLARM/FlarmNetRecord.hpp	/^  StaticString<LatinBufferSize(4)> callsign;$/;"	m	struct:FlarmNetRecord
can_start_through_top	src/Engine/Task/ObservationZones/ObservationZone.hpp	/^  const bool can_start_through_top;$/;"	m	class:ObservationZone
cancelAllSensorSubscriptions	src/Android/InternalSensors.cpp	/^InternalSensors::cancelAllSensorSubscriptions()$/;"	f	class:InternalSensors
cancelSensorSubscription	src/Android/InternalSensors.cpp	/^InternalSensors::cancelSensorSubscription(int id)$/;"	f	class:InternalSensors
cancel_button	src/Dialogs/FileManager.cpp	/^  Button *download_button, *add_button, *cancel_button, *update_button;$/;"	m	class:ManagedFileListWidget	file:
cancel_button	src/Dialogs/MapItemListDialog.cpp	/^  Button *settings_button, *details_button, *cancel_button, *goto_button;$/;"	m	class:final	file:
cancel_button	src/Dialogs/ProgressDialog.hpp	/^  Button cancel_button;$/;"	m	class:ProgressDialog
cancel_button	src/Dialogs/Task/AlternatesListDialog.cpp	/^  Button *details_button, *cancel_button, *goto_button;$/;"	m	class:final	file:
cancel_callback	src/Dialogs/ProgressDialog.hpp	/^  std::function<void()> cancel_callback;$/;"	m	class:ProgressDialog
cancel_cond	src/Operation/ThreadedOperationEnvironment.hpp	/^  Cond cancel_cond;$/;"	m	class:ThreadedOperationEnvironment
cancel_flag	src/Operation/ThreadedOperationEnvironment.hpp	/^  bool cancel_flag = false;$/;"	m	class:ThreadedOperationEnvironment
cancel_handler	src/Operation/ThreadedOperationEnvironment.hpp	/^  std::function<void()> cancel_handler;$/;"	m	class:ThreadedOperationEnvironment
cancel_handler	src/net/http/DownloadManager.cpp	/^  std::function<void()> cancel_handler;$/;"	m	class:final	file:
cancel_method	src/Android/DownloadManager.cpp	/^static jmethodID enumerate_method, enqueue_method, cancel_method;$/;"	v	file:
cancel_method	src/Android/Vibrator.cpp	/^jmethodID Vibrator::cancel_method, Vibrator::vibrate_method;$/;"	m	class:Vibrator	file:
cancel_method	src/Android/Vibrator.hpp	/^  static jmethodID cancel_method, vibrate_method;$/;"	m	class:Vibrator
cancel_ptr	src/event/net/cares/SimpleResolver.hxx	/^	CancellablePointer cancel_ptr;$/;"	m	class:Cares::final
cancellable	src/Dialogs/JobDialog.hpp	/^  bool cancellable;$/;"	m	class:DialogJobRunner
cancellable	src/util/Cancellable.hxx	/^		:cancellable(n) {}$/;"	f	class:CancellablePointer
cancellable	src/util/Cancellable.hxx	/^	Cancellable *cancellable = nullptr;$/;"	m	class:CancellablePointer
candidate_list	src/Engine/Contest/Solvers/Retrospective.hpp	/^  NearWaypointList candidate_list;$/;"	m	class:Retrospective
canopy_brush	src/Look/AircraftLook.hpp	/^  Brush canopy_brush;$/;"	m	struct:AircraftLook
canopy_pen	src/Look/AircraftLook.hpp	/^  Pen canopy_pen;$/;"	m	struct:AircraftLook
canvas	src/CrossSection/AirspaceXSRenderer.cpp	/^  Canvas &canvas;$/;"	m	class:final	file:
canvas	src/MapWindow/MapCanvas.hpp	/^  Canvas &canvas;$/;"	m	class:MapCanvas
canvas	src/Renderer/ChartRenderer.hpp	/^  Canvas &canvas;$/;"	m	class:ChartRenderer
canvas	src/Renderer/TaskPointRenderer.hpp	/^  Canvas &canvas;$/;"	m	class:TaskPointRenderer
canvas	src/Renderer/WaypointIconRenderer.hpp	/^  Canvas &canvas;$/;"	m	class:WaypointIconRenderer
canvas	src/ui/canvas/memory/Murphy.hpp	/^  Canvas &canvas;$/;"	m	struct:MurphyIterator
capacity	src/Math/AvFilter.hpp	/^  unsigned capacity() const {$/;"	f	class:AvFilter
capacity	src/util/ForeignFifoBuffer.hxx	/^	size_type head = 0, tail = 0, capacity;$/;"	m	class:ForeignFifoBuffer
capacity	src/util/OverwritingRingBuffer.hpp	/^  unsigned capacity() const {$/;"	f	class:TrivialOverwritingRingBuffer
capacity	src/util/ReservablePriorityQueue.hpp	/^  size_type capacity() const {$/;"	f	class:reservable_priority_queue
capital_height	src/Android/TextUtil.hpp	/^  unsigned height, ascent_height, capital_height;$/;"	m	class:TextUtil
capital_height	src/ui/canvas/Font.hpp	/^  unsigned height, ascent_height, capital_height;$/;"	m	class:Font
caps	src/Terrain/jasper/jpc/jpc_cs.h	/^	uint_fast16_t caps;$/;"	m	struct:__anon137
caption	src/Dialogs/JobDialog.hpp	/^  const TCHAR *caption;$/;"	m	class:DialogJobRunner
caption	src/Dialogs/ListPicker.cpp	/^  const TCHAR *const caption, *const help_text;$/;"	m	class:ListPickerWidget	file:
caption	src/Dialogs/dlgQuickMenu.cpp	/^  const StaticString<64> caption;$/;"	m	class:final	file:
caption	src/Form/CheckBox.hpp	/^  tstring caption;$/;"	m	class:CheckBoxControl
caption	src/Form/Control.hpp	/^  StaticString<254> caption;$/;"	m	class:WindowControl
caption	src/Form/Form.hpp	/^  tstring caption;$/;"	m	class:WndForm
caption	src/Form/TabDisplay.hpp	/^  StaticString<32> caption;$/;"	m	class:TabButton
caption	src/Form/TabMenuData.hpp	/^  const TCHAR *caption;$/;"	m	struct:TabMenuGroup
caption	src/Form/TabMenuDisplay.hpp	/^    const TCHAR *caption;$/;"	m	struct:final::MainMenuButton
caption	src/Form/TabMenuDisplay.hpp	/^    const TCHAR *caption;$/;"	m	struct:final::SubMenuButton
caption	src/InfoBoxes/Content/Factory.cpp	/^  const TCHAR *caption;$/;"	m	struct:MetaData	file:
caption	src/Look/DialogLook.hpp	/^  } caption;$/;"	m	struct:DialogLook	typeref:struct:DialogLook::__anon11
caption	src/Renderer/SymbolButtonRenderer.hpp	/^  const StaticString<16> caption;$/;"	m	class:SymbolButtonRenderer
caption	src/Renderer/TextButtonRenderer.hpp	/^  StaticString<64> caption;$/;"	m	class:TextButtonRenderer
caption	src/Widget/QuestionWidget.hpp	/^    const TCHAR *caption;$/;"	m	struct:QuestionWidget::Button
caption_background_color	src/Look/InfoBoxLook.hpp	/^  Color caption_background_color;$/;"	m	struct:InfoBoxLook
caption_width	src/Form/Edit.hpp	/^  int caption_width;$/;"	m	class:WndProperty
captions	src/Dialogs/Device/Vega/VegaConfigurationDialog.cpp	/^static const TCHAR *const captions[] = {$/;"	v	file:
capture	src/ui/window/Window.hpp	/^  bool capture = false;$/;"	m	class:Window
capture_child	src/ui/window/ContainerWindow.hpp	/^  Window *capture_child = nullptr;$/;"	m	class:ContainerWindow
cares	src/Device/Descriptor.hpp	/^  Cares::Channel &cares;$/;"	m	class:final
catch_callback	src/lua/Catch.cpp	/^static constexpr char catch_callback[] = "xcsoar.catch_callback";$/;"	v	file:
cavok	src/Weather/ParsedMETAR.hpp	/^  bool cavok;$/;"	m	struct:ParsedMETAR
cbEndTag	src/XML/Parser.cpp	/^    size_t cbEndTag;$/;"	m	struct:XML::Parser	file:
cbgheightexpn	src/Terrain/jasper/jpc/jpc_dec.h	/^	unsigned cbgheightexpn;$/;"	m	struct:__anon125
cbgwidthexpn	src/Terrain/jasper/jpc/jpc_dec.h	/^	unsigned cbgwidthexpn;$/;"	m	struct:__anon125
cblkctx	src/Terrain/jasper/jpc/jpc_dec.h	/^	uint_fast8_t cblkctx;$/;"	m	struct:__anon119
cblkheightexpn	src/Terrain/jasper/jpc/jpc_dec.h	/^	uint_fast16_t cblkheightexpn;$/;"	m	struct:__anon125
cblkheightexpn	src/Terrain/jasper/jpc/jpc_dec.h	/^	uint_fast8_t cblkheightexpn;$/;"	m	struct:__anon119
cblkheightval	src/Terrain/jasper/jpc/jpc_cs.h	/^	uint_fast8_t cblkheightval;$/;"	m	struct:__anon139
cblks	src/Terrain/jasper/jpc/jpc_dec.h	/^	jpc_dec_cblk_t *cblks;$/;"	m	struct:__anon123
cblksty	src/Terrain/jasper/jpc/jpc_cs.h	/^	uint_fast8_t cblksty;$/;"	m	struct:__anon139
cblkwidthexpn	src/Terrain/jasper/jpc/jpc_dec.h	/^	uint_fast16_t cblkwidthexpn;$/;"	m	struct:__anon125
cblkwidthexpn	src/Terrain/jasper/jpc/jpc_dec.h	/^	uint_fast8_t cblkwidthexpn;$/;"	m	struct:__anon119
cblkwidthval	src/Terrain/jasper/jpc/jpc_cs.h	/^	uint_fast8_t cblkwidthval;$/;"	m	struct:__anon139
ccl	src/Device/Driver/IMI/Protocol/Types.hpp	/^    IMICHAR ccl[IMIDECL_CCL_LENGTH];$/;"	m	struct:IMI::TDeclarationHeader
ccps	src/Terrain/jasper/jpc/jpc_dec.h	/^	jpc_dec_ccp_t *ccps;$/;"	m	struct:__anon120
cdef	src/Terrain/jasper/jp2/jp2_cod.h	/^		jp2_cdef_t cdef;$/;"	m	union:__anon94::__anon95
cell_size	src/Screen/TerminalWindow.hpp	/^  PixelSize cell_size;$/;"	m	class:TerminalWindow
cellsize	src/Topography/shapelib/mapserver.h	/^    double cellsize; \/* in map units *\/$/;"	m	struct:mapObj
center	src/Airspace/AirspaceParser.cpp	/^  GeoPoint center;$/;"	m	struct:TempAirspaceType	file:
center	src/Geo/Flat/FlatProjection.hpp	/^  GeoPoint center;$/;"	m	class:FlatProjection
center	src/Renderer/TextRenderer.hpp	/^  bool center = false, vcenter = false;$/;"	m	class:TextRenderer
center	src/Topography/TopographyFile.hpp	/^  GeoPoint center;$/;"	m	class:TopographyFile
ch	src/ui/event/shared/Event.hpp	/^  unsigned ch;$/;"	m	struct:UI::Event
change_type	src/Dialogs/Task/TaskPointDialog.cpp	/^    PixelRect type_label, change_type;$/;"	m	struct:final::Layout	file:
change_type	src/Dialogs/Task/TaskPointDialog.cpp	/^  Button change_type;$/;"	m	class:final	file:
changed	src/Dialogs/Airspace/dlgAirspace.cpp	/^  bool changed;$/;"	m	class:AirspaceSettingsListWidget	file:
changed	src/Dialogs/Device/Vega/VegaConfigurationDialog.cpp	/^static bool changed, dirty;$/;"	v	file:
changed	src/Dialogs/Settings/dlgConfigInfoboxes.cpp	/^  bool changed;$/;"	m	class:final	file:
changed	src/Dialogs/WidgetDialog.hpp	/^  bool changed = false;$/;"	m	class:WidgetDialog
channel	src/event/net/cares/Channel.cxx	/^	Channel &channel;$/;"	m	class:Cares::Channel::Socket	file:
channel	src/event/net/cares/Channel.hxx	/^	ares_channel channel;$/;"	m	class:Cares::Channel
channel_type	src/ui/canvas/memory/PixelOperations.hpp	/^  typedef typename PixelTraits::channel_type channel_type;$/;"	t	struct:PixelColoredAlpha
channel_type	src/ui/canvas/memory/PixelOperations.hpp	/^  typedef typename PixelTraits::channel_type channel_type;$/;"	t	struct:PixelOpaqueAlpha
channel_type	src/ui/canvas/memory/PixelOperations.hpp	/^  typedef typename PixelTraits::channel_type channel_type;$/;"	t	struct:PixelPerChannelAdapter
channel_type	src/ui/canvas/memory/PixelTraits.hpp	/^  typedef uint8_t channel_type;$/;"	t	struct:BGRAPixelTraits
channel_type	src/ui/canvas/memory/PixelTraits.hpp	/^  typedef uint8_t channel_type;$/;"	t	struct:GreyscalePixelTraits
channels	src/Audio/PCMPlayer.hpp	/^  unsigned channels;$/;"	m	class:PCMPlayer
channo	src/Terrain/jasper/jp2/jp2_cod.h	/^	uint_fast16_t channo;$/;"	m	struct:__anon90
charHeight	src/Topography/shapelib/mapserver.h	/^    int charWidth, charHeight;$/;"	m	struct:__anon65
charWidth	src/Topography/shapelib/mapserver.h	/^    int charWidth, charHeight;$/;"	m	struct:__anon65
char_type	src/system/Path.hpp	/^  typedef Path::char_type char_type;$/;"	t	class:AllocatedPath
char_type	src/system/Path.hpp	/^  typedef wchar_t char_type;$/;"	t	class:Path
character	src/Airspace/AirspaceParser.cpp	/^  const TCHAR character;$/;"	m	struct:AirspaceClassCharCouple	file:
character	src/Form/CharacterButton.hpp	/^  unsigned character;$/;"	m	class:CharacterButton
character_function	src/Form/Form.hpp	/^  CharacterFunction character_function;$/;"	m	class:WndForm
charset	src/io/StringConverter.hpp	/^    :charset(cs) {}$/;"	f	class:StringConverter
charset	src/io/StringConverter.hpp	/^  Charset charset;$/;"	m	class:StringConverter
chart	src/CrossSection/AirspaceXSRenderer.cpp	/^  const ChartRenderer &chart;$/;"	m	class:final	file:
chart	src/Dialogs/dlgAnalysis.cpp	/^  ChartControl chart;$/;"	m	class:final	file:
chart	src/Look/Look.hpp	/^  ChartLook chart;$/;"	m	struct:Look
chart_look	src/CrossSection/CrossSectionRenderer.hpp	/^  const ChartLook &chart_look;$/;"	m	class:CrossSectionRenderer
chart_look	src/Dialogs/dlgAnalysis.cpp	/^  const ChartLook &chart_look;$/;"	m	class:ChartControl	file:
chart_look	src/Renderer/FlightStatisticsRenderer.hpp	/^  const ChartLook &chart_look;$/;"	m	class:FlightStatisticsRenderer
chart_look	src/Renderer/ThermalBandRenderer.hpp	/^  const ChartLook &chart_look;$/;"	m	class:ThermalBandRenderer
chart_look	src/Renderer/TraceHistoryRenderer.hpp	/^  const ChartLook &chart_look;$/;"	m	class:TraceHistoryRenderer
check	src/Renderer/LabelBlock.cpp	/^bool LabelBlock::check(const PixelRect rc)$/;"	f	class:LabelBlock
checkFilter	src/system/FileUtil.cpp	/^checkFilter(const TCHAR *filename, const TCHAR *filter)$/;"	f	file:
check_box	src/Look/DialogLook.hpp	/^  CheckBoxLook check_box;$/;"	m	struct:DialogLook
check_brush	src/Look/CheckBoxLook.hpp	/^    Brush check_brush;$/;"	m	struct:CheckBoxLook::StateLook
checked	src/Form/CheckBox.hpp	/^  bool checked, dragging, pressed;$/;"	m	class:CheckBoxControl
checked_append	src/util/TrivialArray.hxx	/^	bool checked_append(const_reference value) {$/;"	f	class:TrivialArray
checksum	src/Device/Driver/ATR833.cpp	/^  uint8_t checksum;$/;"	m	class:ATRBuffer	file:
checksum	src/Device/Driver/IMI/Protocol/Types.hpp	/^    IMIBYTE checksum;$/;"	m	struct:IMI::Fix
checksum	src/Device/Driver/IMI/Protocol/Types.hpp	/^    IMIBYTE checksum;$/;"	m	struct:IMI::FixE
checksum	src/Device/Driver/IMI/Protocol/Types.hpp	/^    IMIBYTE checksum;$/;"	m	struct:IMI::FixK
checksum	src/Device/Driver/IMI/Protocol/Types.hpp	/^    IMIDWORD checksum:8;$/;"	m	struct:IMI::FixB
checksum	src/Device/Driver/IMI/Protocol/Types.hpp	/^    IMIDWORD checksum:8;$/;"	m	struct:IMI::FixB2
checksum	src/Device/Driver/KRT2.cpp	/^    uint8_t checksum;$/;"	m	struct:final::stx_msg	file:
children	src/Engine/Route/FlatTriangleFanTree.hpp	/^  LeafVector children;$/;"	m	class:FlatTriangleFanTree
children	src/Widget/PagerWidget.hpp	/^  boost::container::static_vector<Child, 32u> children;$/;"	m	class:PagerWidget
children	src/XML/Node.hpp	/^    std::list<XMLNode> children;$/;"	m	struct:XMLNode::Data
children	src/ui/window/ContainerWindow.hpp	/^  WindowList children;$/;"	m	class:ContainerWindow
children	src/util/QuadTree.hxx	/^			:parent(nullptr), children(nullptr) {}$/;"	f	struct:Bucket
children	src/util/QuadTree.hxx	/^		QuadBucket *children;$/;"	m	struct:Bucket
children	src/util/RadixTree.hpp	/^    Node *next_sibling, *children;$/;"	m	struct:RadixTree::Node
choices	src/Dialogs/Device/Vega/VegaParametersWidget.hpp	/^    const StaticEnumChoice *choices;$/;"	m	struct:VegaParametersWidget::StaticParameter
chronological_list	src/Engine/Trace/Trace.hpp	/^  ChronologicalList chronological_list;$/;"	m	class:Trace
chronological_list	src/util/Cache.hxx	/^	ItemList chronological_list;$/;"	m	class:Cache
cid	src/Device/Driver/IMI/Protocol/Types.hpp	/^    IMICHAR cid[IMIDECL_CID_LENGTH];$/;"	m	struct:IMI::FlightInfo
cid	src/Device/Driver/IMI/Protocol/Types.hpp	/^    IMICHAR cid[IMIDECL_CID_LENGTH];$/;"	m	struct:IMI::TDeclarationHeader
circle_buffer	src/ui/canvas/opengl/Shapes.cpp	/^GLArrayBuffer *circle_buffer, *small_circle_buffer;$/;"	m	namespace:OpenGL	file:
circle_color	src/Look/ThermalAssistantLook.hpp	/^  Color circle_color;$/;"	m	struct:ThermalAssistantLook
circle_count	src/Computer/Wind/CirclingWind.hpp	/^  int circle_count;$/;"	m	class:CirclingWind
circle_label_font	src/Look/ThermalAssistantLook.hpp	/^  Font circle_label_font, overlay_font;$/;"	m	struct:ThermalAssistantLook
circle_zoom_enabled	src/MapSettings.hpp	/^  bool circle_zoom_enabled;$/;"	m	struct:MapSettings
circling	src/Computer/Settings.hpp	/^  CirclingSettings circling;$/;"	m	struct:ComputerSettings
circling	src/Device/Driver/Vega/Volatile.hpp	/^    bool circling;$/;"	m	struct:Vega::VolatileData
circling	src/Gauge/ThermalAssistantRenderer.hpp	/^  CirclingInfo circling;$/;"	m	class:ThermalAssistantRenderer
circling	src/NMEA/CirclingInfo.hpp	/^  bool circling;$/;"	m	struct:CirclingInfo
circling_climb_percentage	src/NMEA/CirclingInfo.hpp	/^  double circling_climb_percentage;$/;"	m	struct:CirclingInfo
circling_computer	src/Computer/GlideComputerAirData.hpp	/^  CirclingComputer circling_computer;$/;"	m	class:GlideComputerAirData
circling_filter	src/Engine/Airspace/AirspaceWarningManager.hpp	/^  AircraftStateFilter circling_filter;$/;"	m	class:AirspaceWarningManager
circling_orientation	src/MapSettings.hpp	/^  MapOrientation circling_orientation;$/;"	m	struct:MapSettings
circling_percent	src/Look/Look.hpp	/^  ClimbPercentLook circling_percent;$/;"	m	struct:Look
circling_percentage	src/NMEA/CirclingInfo.hpp	/^  double circling_percentage;$/;"	m	struct:CirclingInfo
circling_scale	src/MapSettings.hpp	/^  double circling_scale;$/;"	m	struct:MapSettings
circling_scale	src/PageState.hpp	/^  double circling_scale;$/;"	m	struct:PageState
circling_to_cruise_mode_switch_threshold	src/Computer/Settings.hpp	/^  double circling_to_cruise_mode_switch_threshold;$/;"	m	struct:CirclingSettings
circling_wind	src/Computer/Wind/Computer.hpp	/^  CirclingWind circling_wind;$/;"	m	class:WindComputer
circling_wind	src/Computer/Wind/Settings.hpp	/^  bool circling_wind;$/;"	m	struct:WindSettings
classObj	src/Topography/shapelib/mapserver.h	/^  struct classObj {$/;"	s
class_id	src/Device/Driver/LX/LXN.hpp	/^    char class_id[9];$/;"	m	struct:LXN::CompetitionClass
class_name	src/ui/window/SingleWindow.hpp	/^  static constexpr const TCHAR *class_name = _T("XCSoarMain");$/;"	m	class:UI::SingleWindow
class_type	src/util/BindMethod.hxx	/^	typedef T class_type;$/;"	t	struct:BindMethodDetail::MethodSignatureHelper
class_warnings	src/Engine/Airspace/AirspaceWarningConfig.hpp	/^  bool class_warnings[AIRSPACECLASSCOUNT];$/;"	m	struct:AirspaceWarningConfig
classes	src/Look/AirspaceLook.hpp	/^  AirspaceClassLook classes[AIRSPACECLASSCOUNT];$/;"	m	struct:AirspaceLook
classes	src/Renderer/AirspaceRendererSettings.hpp	/^  AirspaceClassRendererSettings classes[AIRSPACECLASSCOUNT];$/;"	m	struct:AirspaceRendererSettings
classgroup	src/Topography/shapelib/mapserver.h	/^    char *classgroup;$/;"	m	struct:layerObj
classindex	src/Topography/shapelib/mapprimitive.h	/^  int classindex;$/;"	m	struct:__anon72
classindex	src/Topography/shapelib/mapserver.h	/^    int classindex;$/;"	m	struct:__anon39
classindex	src/Topography/shapelib/mapserver.h	/^    int classindex;$/;"	m	struct:__anon43
classitem	src/Topography/shapelib/mapserver.h	/^    char *classitem; \/* .DBF item to be used for symbol lookup *\/$/;"	m	struct:layerObj
classitemindex	src/Topography/shapelib/mapserver.h	/^    int classitemindex;$/;"	m	struct:layerObj
clb	src/Device/Driver/IMI/Protocol/Types.hpp	/^    IMICHAR clb[IMIDECL_CLB_LENGTH];$/;"	m	struct:IMI::TDeclarationHeader
cleanup	src/Topography/shapelib/mapserver.h	/^    int (*cleanup)(void *renderer_data);$/;"	m	struct:rendererVTableObj
clear	src/Cloud/Client.cpp	/^CloudClientContainer::clear()$/;"	f	class:CloudClientContainer
clear	src/Cloud/Thermal.cpp	/^CloudThermalContainer::clear()$/;"	f	class:CloudThermalContainer
clear	src/Device/SettingsMap.hpp	/^  void clear() {$/;"	f	class:DeviceSettingsMap
clear	src/Engine/Airspace/AirspaceWarningManager.hpp	/^  void clear() {$/;"	f	class:AirspaceWarningManager
clear	src/Engine/Navigation/TraceHistory.cpp	/^TraceHistory::clear()$/;"	f	class:TraceHistory
clear	src/Engine/Task/Stats/TaskSummary.hpp	/^  void clear() {$/;"	f	struct:TaskSummary
clear	src/Engine/Trace/Trace.cpp	/^Trace::clear()$/;"	f	class:Trace
clear	src/Input/InputParser.cpp	/^  void clear() {$/;"	f	struct:EventBuilder
clear	src/Weather/TAF.hpp	/^  void clear() {$/;"	f	struct:TAF
clear	src/util/OverwritingRingBuffer.hpp	/^  void clear() {$/;"	f	class:TrivialOverwritingRingBuffer
clear	src/util/ReservablePriorityQueue.hpp	/^  void clear() {$/;"	f	class:reservable_priority_queue
clear_all_button	src/Dialogs/Task/Manager/TaskEditPanel.cpp	/^  Button *reverse_button, *clear_all_button;$/;"	m	class:TaskEditPanel	file:
clear_manual_button	src/Dialogs/Settings/WindSettingsPanel.hpp	/^  const bool edit_manual_wind, clear_manual_button, edit_trail_drift;$/;"	m	class:final
clear_manual_window	src/Dialogs/Settings/WindSettingsPanel.cpp	/^   clear_manual_window(nullptr) {}$/;"	f
clear_manual_window	src/Dialogs/Settings/WindSettingsPanel.hpp	/^  Button *clear_manual_window;$/;"	m	class:final
clear_resultcache	src/Topography/shapelib/mapserver.h	/^    int clear_resultcache;$/;"	m	struct:__anon33
cli	src/Replay/Replay.hpp	/^  CatmullRomInterpolator *cli;$/;"	m	class:final
clicked_event	src/Dialogs/dlgQuickMenu.cpp	/^  unsigned clicked_event;$/;"	m	class:final	file:
client	src/Tracking/SkyLines/Glue.hpp	/^  Client client;$/;"	m	class:SkyLinesTracking::Glue
client_area	src/Form/Form.hpp	/^  SolidContainerWindow client_area;$/;"	m	class:WndForm
client_key	src/Cloud/Thermal.hpp	/^  const uint64_t client_key;$/;"	m	struct:CloudThermal
client_rect	src/Form/Form.hpp	/^  PixelRect client_rect;$/;"	m	class:WndForm
client_trigger	src/thread/SuspensibleThread.hpp	/^  Cond command_trigger, client_trigger;$/;"	m	class:SuspensibleThread
clients	src/Cloud/Data.hpp	/^  CloudClientContainer clients;$/;"	m	struct:CloudData
climb_bitmap	src/Look/VarioLook.hpp	/^  Bitmap climb_bitmap;$/;"	m	struct:VarioLook
climb_ceiling	src/Engine/Route/RoutePolars.hpp	/^  int climb_ceiling;$/;"	m	class:RoutePolars
climb_factor	src/Replay/TaskAutoPilot.hpp	/^  double climb_factor;$/;"	m	struct:AutopilotParameters
climb_history	src/NMEA/Derived.hpp	/^  ClimbHistory climb_history;$/;"	m	struct:DerivedInfo
climb_mode_icon	src/Look/MapLook.hpp	/^  MaskedIcon cruise_mode_icon, climb_mode_icon, final_glide_mode_icon, abort_mode_icon;$/;"	m	struct:MapLook
climb_rate	src/Engine/Airspace/AirspaceAircraftPerformance.hpp	/^  double climb_rate;$/;"	m	class:AirspaceAircraftPerformance
climb_rate	src/FLARM/Traffic.hpp	/^  double climb_rate;$/;"	m	class:FlarmTraffic::AircraftType
climb_rate	src/GliderLink/Traffic.hpp	/^  double climb_rate;$/;"	m	struct:GliderLinkTraffic
climb_rate	src/Replay/TaskAutoPilot.hpp	/^  double climb_rate;$/;"	m	class:TaskAutoPilot
climb_rate_avg30s	src/FLARM/Traffic.hpp	/^  double climb_rate_avg30s;$/;"	m	class:FlarmTraffic::AircraftType
climb_rate_avg30s_available	src/FLARM/Traffic.hpp	/^  bool climb_rate_avg30s_available;$/;"	m	class:FlarmTraffic::AircraftType
climb_rate_received	src/FLARM/Traffic.hpp	/^  bool climb_rate_received;$/;"	m	class:FlarmTraffic::AircraftType
climb_rate_received	src/GliderLink/Traffic.hpp	/^  bool climb_rate_received;$/;"	m	struct:GliderLinkTraffic
climb_start_altitude	src/NMEA/CirclingInfo.hpp	/^  double climb_start_altitude;$/;"	m	struct:CirclingInfo
climb_start_altitude_te	src/NMEA/CirclingInfo.hpp	/^  double climb_start_altitude_te;$/;"	m	struct:CirclingInfo
climb_start_location	src/NMEA/CirclingInfo.hpp	/^  GeoPoint climb_start_location;$/;"	m	struct:CirclingInfo
climb_start_time	src/NMEA/CirclingInfo.hpp	/^  double climb_start_time;$/;"	m	struct:CirclingInfo
climbing_altitude	src/Computer/FlyingComputer.hpp	/^  double climbing_altitude;$/;"	m	class:FlyingComputer
climbing_clock	src/Computer/FlyingComputer.hpp	/^  StateClock<20, 5> climbing_clock;$/;"	m	class:FlyingComputer
clip	src/MapWindow/MapCanvas.hpp	/^    :canvas(_canvas), projection(_projection), clip(_clip) {}$/;"	f	class:MapCanvas
clip	src/MapWindow/MapCanvas.hpp	/^  const GeoClip clip;$/;"	m	class:MapCanvas
clip	src/MapWindow/MapWindowGlideRange.cpp	/^  const GeoClip clip;$/;"	m	class:final	file:
clip	src/MapWindow/StencilMapCanvas.hpp	/^  const GeoClip clip;$/;"	m	class:StencilMapCanvas
clipLine	src/Topography/shapelib/mapprimitive.c	/^static int clipLine(double *x1, double *y1, double *x2, double *y2, rectObj rect)$/;"	f	file:
clip_altitude	src/Renderer/AirspaceRendererSettings.hpp	/^  unsigned clip_altitude;$/;"	m	struct:AirspaceRendererSettings
clip_code	src/Geo/GeoClip.cpp	/^  unsigned clip_code;$/;"	m	class:ClipGeoPoint	file:
clip_latitude	src/Geo/GeoClip.cpp	/^clip_latitude(const GeoPoint origin, const GeoPoint pt, Angle at)$/;"	f	file:
clip_longitude	src/Geo/GeoClip.cpp	/^clip_longitude(const GeoPoint origin, const GeoPoint pt, Angle at)$/;"	f	file:
clipboard	src/Dialogs/Settings/dlgConfigInfoboxes.cpp	/^static InfoBoxSettings::Panel clipboard;$/;"	v	file:
clipboard_size	src/Dialogs/Settings/dlgConfigInfoboxes.cpp	/^static unsigned clipboard_size;$/;"	v	file:
clock	src/Logger/LoggerFRecord.hpp	/^  GPSClock clock;$/;"	m	class:LoggerFRecord
clock	src/NMEA/Info.hpp	/^  double clock;$/;"	m	struct:NMEAInfo
clock	src/RateLimiter.hpp	/^  PeriodClock clock;$/;"	m	class:RateLimiter
clock	src/Replay/NmeaReplay.hpp	/^  ReplayClock clock;$/;"	m	class:NmeaReplay
clock	src/Replay/Replay.hpp	/^  PeriodClock clock;$/;"	m	class:final
clock	src/Screen/StopWatch.hpp	/^    clock_stamp_t clock;$/;"	m	struct:ScreenStopWatch::Marker
clock	src/Tracking/SkyLines/Glue.hpp	/^  GPSClock clock;$/;"	m	class:SkyLinesTracking::Glue
clock	src/Tracking/TrackingGlue.hpp	/^  PeriodClock clock;$/;"	m	class:final
clock	src/UIUtil/KineticManager.hpp	/^  PeriodClock clock;$/;"	m	class:KineticManager
clock	src/time/ReplayClock.hpp	/^  double clock;$/;"	m	class:ReplayClock
clock	src/ui/window/custom/DoubleClick.hpp	/^  PeriodClock clock;$/;"	m	class:DoubleClick
clock_stamp_t	src/Screen/StopWatch.hpp	/^  typedef uint64_t clock_stamp_t;$/;"	t	class:ScreenStopWatch
close	src/Android/PortBridge.hpp	/^  void close(JNIEnv *env) {$/;"	f	class:PortBridge
close	src/java/InputStream.hxx	/^	static void close(JNIEnv *env, jobject is) {$/;"	f	class:Java::InputStream
close	src/zzip/plugin.h	/^    int          (*close)(int fd);$/;"	m	struct:zzip_plugin_io
close_	src/Terrain/jasper/jas_stream.h	/^	int (*close_)(jas_stream_obj_t *obj);$/;"	m	struct:__anon96
close_button	src/Dialogs/Settings/dlgConfigInfoboxes.cpp	/^    PixelRect copy_button, paste_button, close_button;$/;"	m	struct:final::Layout	file:
close_button	src/Dialogs/Settings/dlgConfigInfoboxes.cpp	/^  Button copy_button, paste_button, close_button;$/;"	m	class:final	file:
close_button	src/Dialogs/Task/Manager/TaskClosePanel.hpp	/^    PixelRect close_button, message, revert_button;$/;"	m	struct:final::Layout
close_button	src/Dialogs/Task/Manager/TaskClosePanel.hpp	/^  Button close_button;$/;"	m	class:final
close_button	src/Dialogs/Task/TargetDialog.cpp	/^    PixelRect close_button;$/;"	m	struct:TargetWidget::Layout	file:
close_button	src/Dialogs/Task/TargetDialog.cpp	/^  Button close_button;$/;"	m	class:TargetWidget	file:
close_button	src/Dialogs/Waypoint/dlgWaypointDetails.cpp	/^    PixelRect close_button;$/;"	m	struct:final::Layout	file:
close_button	src/Dialogs/Waypoint/dlgWaypointDetails.cpp	/^  Button close_button;$/;"	m	class:final	file:
close_button	src/Dialogs/dlgAnalysis.cpp	/^    PixelRect details_button, previous_button, next_button, close_button;$/;"	m	struct:final::Layout	file:
close_button	src/Dialogs/dlgAnalysis.cpp	/^  Button details_button, previous_button, next_button, close_button;$/;"	m	class:final	file:
close_button	src/Gauge/BigThermalAssistantWidget.hpp	/^  std::unique_ptr<Button> close_button;$/;"	m	class:BigThermalAssistantWidget
close_button	src/Gauge/BigTrafficWidget.cpp	/^  Button close_button;$/;"	m	struct:TrafficWidget::Windows	file:
close_button	src/Widget/ArrowPagerWidget.hpp	/^    PixelRect close_button;$/;"	m	struct:ArrowPagerWidget::Layout
close_button	src/Widget/ArrowPagerWidget.hpp	/^  Button close_button;$/;"	m	class:ArrowPagerWidget
close_callback	src/Widget/ArrowPagerWidget.hpp	/^  const std::function<void()> close_callback;$/;"	m	class:ArrowPagerWidget
close_db	src/Device/Driver/Volkslogger/dbbconv.cpp	/^void DBB::close_db(int kennung) {$/;"	f	class:DBB
close_logging_interval	src/Device/Driver/CAI302/Protocol.hpp	/^    uint16_t close_logging_interval;$/;"	m	struct:CAI302::Pilot
close_method	src/Android/BMP085Device.cpp	/^static jmethodID bmp085_ctor, close_method;$/;"	v	file:
close_method	src/Android/GliderLink.cpp	/^jmethodID GliderLink::gl_ctor_id, GliderLink::close_method;$/;"	m	class:GliderLink	file:
close_method	src/Android/GliderLink.hpp	/^  static jmethodID gl_ctor_id, close_method;$/;"	m	class:GliderLink
close_method	src/Android/I2CbaroDevice.cpp	/^static jmethodID i2cbaro_ctor, close_method;$/;"	v	file:
close_method	src/Android/InternalSensors.cpp	/^jmethodID InternalSensors::gps_ctor_id, InternalSensors::close_method;$/;"	m	class:InternalSensors	file:
close_method	src/Android/InternalSensors.hpp	/^  static jmethodID gps_ctor_id, close_method;$/;"	m	class:InternalSensors
close_method	src/Android/NunchuckDevice.cpp	/^static jmethodID nunchuck_ctor, close_method;$/;"	v	file:
close_method	src/Android/PortBridge.cpp	/^jmethodID PortBridge::close_method;$/;"	m	class:PortBridge	file:
close_method	src/Android/PortBridge.hpp	/^  static jmethodID close_method;$/;"	m	class:PortBridge
close_method	src/Android/VoltageDevice.cpp	/^static jmethodID voltage_ctor, close_method;$/;"	v	file:
close_method	src/java/InputStream.cxx	/^jmethodID Java::InputStream::close_method;$/;"	m	class:Java::InputStream	file:
close_method	src/java/InputStream.hxx	/^	static jmethodID close_method, read_method;$/;"	m	class:Java::InputStream
closing	src/Device/Port/BufferedPort.hpp	/^  bool closing;$/;"	m	class:BufferedPort
closing_pairs	src/Engine/Contest/Solvers/TriangleContest.hpp	/^    std::map<unsigned, unsigned> closing_pairs;$/;"	m	struct:TriangleContest::ClosingPairs
closing_pairs	src/Engine/Contest/Solvers/TriangleContest.hpp	/^  ClosingPairs closing_pairs;$/;"	m	class:TriangleContest
cloud	src/Tracking/SkyLines/Settings.hpp	/^  CloudSettings cloud;$/;"	m	struct:SkyLinesTracking::Settings
cloud_base	src/Atmosphere/CuSonde.hpp	/^    double cloud_base;$/;"	m	struct:CuSonde::Level
cloud_base	src/Atmosphere/CuSonde.hpp	/^  double cloud_base;$/;"	m	class:CuSonde
cloud_client	src/Tracking/SkyLines/Glue.hpp	/^  Client cloud_client;$/;"	m	class:SkyLinesTracking::Glue
cloud_clock	src/Tracking/SkyLines/Glue.hpp	/^  GPSClock cloud_clock;$/;"	m	class:SkyLinesTracking::Glue
clrspc_	src/Terrain/jasper/jas_image.h	/^	jas_clrspc_t clrspc_;$/;"	m	struct:__anon101
cls	src/Android/BluetoothHelper.cpp	/^static Java::TrivialClass cls;$/;"	m	namespace:BluetoothHelper	file:
cls	src/Android/Environment.cpp	/^static Java::TrivialClass cls;$/;"	m	namespace:Environment	file:
cls	src/Android/IOIOHelper.cpp	/^Java::TrivialClass IOIOHelper::cls;$/;"	m	class:IOIOHelper	file:
cls	src/Android/IOIOHelper.hpp	/^  static Java::TrivialClass cls;$/;"	m	class:IOIOHelper
cls	src/Android/NativeBMP085Listener.cpp	/^static Java::TrivialClass cls;$/;"	m	namespace:NativeBMP085Listener	file:
cls	src/Android/NativeI2CbaroListener.cpp	/^static Java::TrivialClass cls;$/;"	m	namespace:NativeI2CbaroListener	file:
cls	src/Android/NativeInputListener.cpp	/^static Java::TrivialClass cls;$/;"	m	namespace:NativeInputListener	file:
cls	src/Android/NativeLeScanCallback.cpp	/^static Java::TrivialClass cls;$/;"	m	namespace:NativeLeScanCallback	file:
cls	src/Android/NativeNunchuckListener.cpp	/^static Java::TrivialClass cls;$/;"	m	namespace:NativeNunchuckListener	file:
cls	src/Android/NativePortListener.cpp	/^static Java::TrivialClass cls;$/;"	m	namespace:NativePortListener	file:
cls	src/Android/NativeView.cpp	/^Java::TrivialClass NativeView::cls;$/;"	m	class:NativeView	file:
cls	src/Android/NativeView.hpp	/^  static Java::TrivialClass cls;$/;"	m	class:NativeView
cls	src/Android/NativeVoltageListener.cpp	/^static Java::TrivialClass cls;$/;"	m	namespace:NativeVoltageListener	file:
cls	src/Android/SoundUtil.cpp	/^static Java::TrivialClass cls;$/;"	m	namespace:SoundUtil	file:
cls	src/Android/TextUtil.cpp	/^static Java::TrivialClass cls;$/;"	v	file:
cls	src/Engine/Airspace/AirspaceSorter.hpp	/^  AirspaceClass cls;$/;"	m	struct:AirspaceFilterData
cls	src/Renderer/AirspaceLabelList.hpp	/^    AirspaceClass cls;$/;"	m	struct:AirspaceLabelList::Label
cls	src/java/URL.cxx	/^Java::TrivialClass Java::URL::cls;$/;"	m	class:Java::URL	file:
cls	src/java/URL.hxx	/^	static TrivialClass cls;$/;"	m	class:Java::URL
clsBitmap	src/Android/NativeView.cpp	/^Java::TrivialClass NativeView::clsBitmap;$/;"	m	class:NativeView	file:
clsBitmap	src/Android/NativeView.hpp	/^  static Java::TrivialClass clsBitmap;$/;"	m	class:NativeView
clsBitmapConfig	src/Android/NativeView.cpp	/^Java::TrivialClass NativeView::clsBitmapConfig;$/;"	m	class:NativeView	file:
clsBitmapConfig	src/Android/NativeView.hpp	/^  static Java::TrivialClass clsBitmapConfig;$/;"	m	class:NativeView
club_id	src/Tracking/SkyLines/Protocol.hpp	/^  uint32_t club_id;$/;"	m	struct:SkyLinesTracking::UserNameResponsePacket
cluster	src/Topography/shapelib/mapserver.h	/^    clusterObj cluster;$/;"	m	struct:layerObj
clusterObj	src/Topography/shapelib/mapserver.h	/^  } clusterObj;$/;"	t	typeref:struct:__anon30
cm2	src/Device/Driver/IMI/Protocol/Types.hpp	/^    IMICHAR cm2[IMIDECL_CM2_LENGTH];$/;"	m	struct:IMI::TDeclarationHeader
cm_aattime	src/Computer/ConditionMonitor/ConditionMonitors.cpp	/^static ConditionMonitorAATTime cm_aattime;$/;"	v	file:
cm_finalglide	src/Computer/ConditionMonitor/ConditionMonitors.cpp	/^static ConditionMonitorFinalGlide cm_finalglide;$/;"	v	file:
cm_glideterrain	src/Computer/ConditionMonitor/ConditionMonitors.cpp	/^static ConditionMonitorGlideTerrain cm_glideterrain;$/;"	v	file:
cm_landablereachable	src/Computer/ConditionMonitor/ConditionMonitors.cpp	/^static ConditionMonitorLandableReachable cm_landablereachable;$/;"	v	file:
cm_sunset	src/Computer/ConditionMonitor/ConditionMonitors.cpp	/^static ConditionMonitorSunset cm_sunset;$/;"	v	file:
cm_wind	src/Computer/ConditionMonitor/ConditionMonitors.cpp	/^static ConditionMonitorWind cm_wind;$/;"	v	file:
cmap	src/Terrain/jasper/jp2/jp2_cod.h	/^		jp2_cmap_t cmap;$/;"	m	union:__anon94::__anon95
cmd	src/Device/Driver/LX/LXN.hpp	/^    const uint8_t *cmd;$/;"	m	union:LXN::Packet
cmd	src/Device/Driver/LX/LXN.hpp	/^    uint8_t cmd;$/;"	m	struct:LXN::BExt
cmd	src/Device/Driver/LX/LXN.hpp	/^    uint8_t cmd;$/;"	m	struct:LXN::CompetitionClass
cmd	src/Device/Driver/LX/LXN.hpp	/^    uint8_t cmd;$/;"	m	struct:LXN::Date
cmd	src/Device/Driver/LX/LXN.hpp	/^    uint8_t cmd;$/;"	m	struct:LXN::End
cmd	src/Device/Driver/LX/LXN.hpp	/^    uint8_t cmd;$/;"	m	struct:LXN::Event
cmd	src/Device/Driver/LX/LXN.hpp	/^    uint8_t cmd;$/;"	m	struct:LXN::ExtConfig
cmd	src/Device/Driver/LX/LXN.hpp	/^    uint8_t cmd;$/;"	m	struct:LXN::FlightInfo
cmd	src/Device/Driver/LX/LXN.hpp	/^    uint8_t cmd;$/;"	m	struct:LXN::KExt
cmd	src/Device/Driver/LX/LXN.hpp	/^    uint8_t cmd;$/;"	m	struct:LXN::Origin
cmd	src/Device/Driver/LX/LXN.hpp	/^    uint8_t cmd;$/;"	m	struct:LXN::Position
cmd	src/Device/Driver/LX/LXN.hpp	/^    uint8_t cmd;$/;"	m	struct:LXN::Security
cmd	src/Device/Driver/LX/LXN.hpp	/^    uint8_t cmd;$/;"	m	struct:LXN::Security7000
cmd	src/Device/Driver/LX/LXN.hpp	/^    uint8_t cmd;$/;"	m	struct:LXN::SecurityOld
cmd	src/Device/Driver/LX/LXN.hpp	/^    uint8_t cmd;$/;"	m	struct:LXN::Serial
cmd	src/Device/Driver/LX/LXN.hpp	/^    uint8_t cmd;$/;"	m	struct:LXN::Start
cmd	src/Device/Driver/LX/LXN.hpp	/^    uint8_t cmd;$/;"	m	struct:LXN::Task
cmd	src/Device/Driver/LX/LXN.hpp	/^    uint8_t cmd;$/;"	m	struct:LXN::Version
cmd_CFL	src/Device/Driver/Volkslogger/Protocol.hpp	/^    cmd_CFL = 0x06,$/;"	e	enum:Volkslogger::Command
cmd_DIR	src/Device/Driver/Volkslogger/Protocol.hpp	/^    cmd_DIR = 0x01,$/;"	e	enum:Volkslogger::Command
cmd_ERO	src/Device/Driver/Volkslogger/Protocol.hpp	/^    cmd_ERO = 0x09,$/;"	e	enum:Volkslogger::Command
cmd_GFL	src/Device/Driver/Volkslogger/Protocol.hpp	/^    cmd_GFL = 0x02,$/;"	e	enum:Volkslogger::Command
cmd_GFS	src/Device/Driver/Volkslogger/Protocol.hpp	/^    cmd_GFS = 0x03,$/;"	e	enum:Volkslogger::Command
cmd_INF	src/Device/Driver/Volkslogger/Protocol.hpp	/^    cmd_INF = 0x00,$/;"	e	enum:Volkslogger::Command
cmd_PDB	src/Device/Driver/Volkslogger/Protocol.hpp	/^    cmd_PDB = 0x07,$/;"	e	enum:Volkslogger::Command
cmd_RDB	src/Device/Driver/Volkslogger/Protocol.hpp	/^    cmd_RDB = 0x04,$/;"	e	enum:Volkslogger::Command
cmd_RST	src/Device/Driver/Volkslogger/Protocol.hpp	/^    cmd_RST = 0x0c,$/;"	e	enum:Volkslogger::Command
cmd_SIG	src/Device/Driver/Volkslogger/Protocol.hpp	/^    cmd_SIG = 0x08,$/;"	e	enum:Volkslogger::Command
cmd_WPR	src/Device/Driver/Volkslogger/Protocol.hpp	/^    cmd_WPR = 0x05,$/;"	e	enum:Volkslogger::Command
cmd_host	src/Android/Nook.cpp	/^static char cmd_host[] = "su -c 'echo host > \/sys\/devices\/platform\/musb_hdrc\/mode'";$/;"	v	file:
cmd_set_charge_100	src/Android/Nook.cpp	/^static char cmd_set_charge_100[] = "su -c 'echo 100000 > \/sys\/class\/regulator\/regulator.5\/device\/force_current'";$/;"	v	file:
cmd_set_charge_500	src/Android/Nook.cpp	/^static char cmd_set_charge_500[] = "su -c 'echo 500000 > \/sys\/class\/regulator\/regulator.5\/device\/force_current'";$/;"	v	file:
cmdline	src/system/Args.hpp	/^  char *cmdline;$/;"	m	class:Args
cmp_entities	src/Topography/shapelib/mapstring.c	/^static int cmp_entities(const void *e1, const void *e2)$/;"	f	file:
cmprof_	src/Terrain/jasper/jas_image.h	/^	jas_cmprof_t *cmprof_;$/;"	m	struct:__anon101
cmptno	src/Terrain/jasper/jp2/jp2_cod.h	/^	uint_fast16_t cmptno;$/;"	m	struct:__anon92
cmpts	src/Terrain/jasper/jpc/jpc_dec.h	/^	jpc_dec_cmpt_t *cmpts;$/;"	m	struct:__anon129
cmpts_	src/Terrain/jasper/jas_image.h	/^	jas_image_cmpt_t **cmpts_;$/;"	m	struct:__anon101
cnt	src/Terrain/jasper/jpc/jpc_dec.h	/^	unsigned cnt;$/;"	m	struct:jpc_dec_seg_s
cnt_	src/Terrain/jasper/jas_stream.h	/^	int cnt_;$/;"	m	struct:__anon97
cnt_	src/Terrain/jasper/jpc/jpc_bs.h	/^	int cnt_;$/;"	m	struct:__anon106
coarse_timers	src/event/Loop.hxx	/^	TimerWheel coarse_timers;$/;"	m	class:final
coc	src/Terrain/jasper/jpc/jpc_cs.h	/^	jpc_coc_t coc;$/;"	m	union:__anon155
cod	src/Terrain/jasper/jpc/jpc_cs.h	/^	jpc_cod_t cod;$/;"	m	union:__anon155
code	src/Dialogs/Weather/NOAAList.cpp	/^    StaticString<5> code;$/;"	m	struct:final::ListItem	file:
code	src/FLARM/Error.cpp	/^  FlarmError::Code code;$/;"	m	struct:__anon1	file:
code	src/FLARM/Error.hpp	/^  Code code;$/;"	v
code	src/IGC/IGCExtensions.hpp	/^  char code[4];$/;"	m	struct:IGCExtension
code	src/TeamCode/TeamCode.hpp	/^  StaticString<10> code;$/;"	m	class:TeamCode
code	src/Topography/shapelib/maperror.h	/^    int code;$/;"	m	struct:errorObj
code	src/Weather/NOAAStore.hpp	/^    char code[5];$/;"	m	struct:NOAAStore::Item
code	src/event/net/cares/Error.cxx	/^	 code(_code) {}$/;"	f	namespace:Cares
code	src/event/net/cares/Error.hxx	/^	int code;$/;"	m	class:Cares::Error
code	src/io/ZlibError.hxx	/^	explicit ZlibError(int _code) noexcept:code(_code) {}$/;"	f	class:final
code	src/io/ZlibError.hxx	/^	int code;$/;"	m	class:final
color	src/Dialogs/Traffic/TrafficList.cpp	/^    FlarmColor color = FlarmColor::COUNT;$/;"	m	struct:TrafficListWidget::Item	file:
color	src/Look/ButtonLook.hpp	/^    Color color;$/;"	m	struct:ButtonLook::__anon18
color	src/Look/GestureLook.hpp	/^  Color color, invalid_color;$/;"	m	struct:GestureLook
color	src/MapWindow/Items/MapItem.hpp	/^  FlarmColor color;$/;"	m	struct:TrafficMapItem
color	src/Renderer/ColorButtonRenderer.hpp	/^  const Color color;$/;"	m	class:ColorButtonRenderer
color	src/Topography/TopographyFile.hpp	/^  const Color color;$/;"	m	class:TopographyFile
color	src/Topography/shapelib/mapserver.h	/^    colorObj *color;$/;"	m	struct:__anon62
color	src/Topography/shapelib/mapserver.h	/^    colorObj *color;$/;"	m	struct:__anon63
color	src/Topography/shapelib/mapserver.h	/^    colorObj *color;$/;"	m	struct:__anon64
color	src/Topography/shapelib/mapserver.h	/^    colorObj color, outlinecolor, backgroundcolor;$/;"	m	struct:tileCacheObj
color	src/Topography/shapelib/mapserver.h	/^    colorObj color;$/;"	m	struct:__anon34
color	src/Topography/shapelib/mapserver.h	/^    colorObj color;$/;"	m	struct:__anon46
color	src/Topography/shapelib/mapserver.h	/^    colorObj color;$/;"	m	struct:__anon47
color	src/Topography/shapelib/mapserver.h	/^    colorObj color;$/;"	m	struct:labelObj
color	src/Topography/shapelib/mapserver.h	/^    colorObj color;$/;"	m	struct:styleObj
color	src/ui/canvas/Brush.hpp	/^  Color color = Color::Transparent();$/;"	m	class:Brush
color	src/ui/canvas/Pen.hpp	/^  Color color;$/;"	m	class:Pen
color	src/ui/canvas/Ramp.hpp	/^  RGB8Color color;$/;"	m	struct:ColorRamp
color	src/ui/canvas/memory/Murphy.hpp	/^  const typename Canvas::color_type color;$/;"	m	struct:MurphyIterator
color	src/ui/canvas/memory/PixelOperations.hpp	/^  color_type color;$/;"	m	struct:PixelColoredAlpha
color_key	src/ui/canvas/fb/mxcfb.h	/^	__u32 color_key;$/;"	m	struct:mxcfb_color_key
color_mode	src/Dialogs/Airspace/dlgAirspace.cpp	/^  const bool color_mode;$/;"	m	class:AirspaceSettingsListWidget	file:
color_negative	src/Look/ChartLook.hpp	/^  Color color_negative;$/;"	m	struct:ChartLook
color_positive	src/Look/ChartLook.hpp	/^  Color color_positive;$/;"	m	struct:ChartLook
color_ramp	src/Weather/Rasp/RaspStyle.hpp	/^  const ColorRamp *color_ramp;$/;"	m	struct:RaspStyle
color_table	src/Terrain/RasterRenderer.hpp	/^  RawColor *color_table = nullptr;$/;"	m	class:RasterRenderer
color_type	src/ui/canvas/memory/Optimised.hpp	/^  typedef typename PixelTraits::color_type color_type;$/;"	t	class:SelectOptimisedPixelOperations
color_type	src/ui/canvas/memory/Optimised.hpp	/^  typedef typename PixelTraits::color_type color_type;$/;"	t	struct:TransparentPixelOperations
color_type	src/ui/canvas/memory/PixelOperations.hpp	/^  typedef typename PT::color_type color_type;$/;"	t	struct:NotWhiteCondition
color_type	src/ui/canvas/memory/PixelOperations.hpp	/^  typedef typename PixelTraits::color_type color_type;$/;"	t	class:TransparentInvertPixelOperations
color_type	src/ui/canvas/memory/PixelOperations.hpp	/^  typedef typename PixelTraits::color_type color_type;$/;"	t	struct:ColorKey
color_type	src/ui/canvas/memory/PixelOperations.hpp	/^  typedef typename PixelTraits::color_type color_type;$/;"	t	struct:ConditionalWritePixel
color_type	src/ui/canvas/memory/PixelOperations.hpp	/^  typedef typename PixelTraits::color_type color_type;$/;"	t	struct:PerPixelOperations
color_type	src/ui/canvas/memory/PixelOperations.hpp	/^  typedef typename PixelTraits::color_type color_type;$/;"	t	struct:PixelColoredAlpha
color_type	src/ui/canvas/memory/PixelOperations.hpp	/^  typedef typename PixelTraits::color_type color_type;$/;"	t	struct:PixelIntegerAdapter
color_type	src/ui/canvas/memory/PixelOperations.hpp	/^  typedef typename PixelTraits::color_type color_type;$/;"	t	struct:PixelOpaqueAlpha
color_type	src/ui/canvas/memory/PixelOperations.hpp	/^  typedef typename PixelTraits::color_type color_type;$/;"	t	struct:PixelOpaqueText
color_type	src/ui/canvas/memory/PixelOperations.hpp	/^  typedef typename PixelTraits::color_type color_type;$/;"	t	struct:PixelPerChannelAdapter
color_type	src/ui/canvas/memory/PixelTraits.hpp	/^  typedef BGRA8Color color_type;$/;"	t	struct:BGRAPixelTraits
color_type	src/ui/canvas/memory/PixelTraits.hpp	/^  typedef Luminosity8 color_type;$/;"	t	struct:GreyscalePixelTraits
colors	src/Look/InfoBoxLook.hpp	/^  Color colors[6];$/;"	m	struct:InfoBoxLook
colors	src/Look/VarioLook.hpp	/^  bool inverse, colors;$/;"	m	struct:VarioLook
colors	src/Topography/shapelib/mapserver.h	/^    colorObj colors[MS_MAXCOLORS-1];$/;"	m	struct:__anon25
colorspace	src/Topography/shapelib/mapserver.h	/^  } colorspace;$/;"	t	typeref:enum:__anon61
colorvalue	src/Topography/shapelib/mapserver.h	/^    int      colorvalue[MS_MAXCOLORS-1];$/;"	m	struct:__anon25
colr	src/Terrain/jasper/jp2/jp2_cod.h	/^		jp2_colr_t colr;$/;"	m	union:__anon94::__anon95
column_width	src/Form/GridView.hpp	/^  unsigned column_width;$/;"	m	class:GridView
columns	src/Form/DigitEntry.hpp	/^  Column columns[MAX_LENGTH];$/;"	m	class:CoordinateFormat
com	src/Terrain/jasper/jpc/jpc_cs.h	/^	jpc_com_t com;$/;"	m	union:__anon155
combine_texture_fragment_shader	src/ui/canvas/opengl/Shaders.cpp	/^static constexpr char combine_texture_fragment_shader[] =$/;"	v	file:
combine_texture_projection	src/ui/canvas/opengl/Shaders.cpp	/^GLint combine_texture_projection, combine_texture_texture;$/;"	m	namespace:OpenGL	file:
combine_texture_shader	src/ui/canvas/opengl/Shaders.cpp	/^GLProgram *combine_texture_shader;$/;"	m	namespace:OpenGL	file:
combine_texture_texture	src/ui/canvas/opengl/Shaders.cpp	/^GLint combine_texture_projection, combine_texture_texture;$/;"	m	namespace:OpenGL	file:
combine_texture_vertex_shader	src/ui/canvas/opengl/Shaders.cpp	/^static const char *const combine_texture_vertex_shader = texture_vertex_shader;$/;"	v	file:
combo_list	src/Dialogs/ComboPicker.cpp	/^  const ComboList &combo_list;$/;"	m	class:ComboPickerSupport	file:
combo_list	src/Input/InputEventsLua.cpp	/^  ComboList combo_list;$/;"	m	class:final	file:
command	src/Device/Driver/KRT2.cpp	/^    uint8_t command;$/;"	m	struct:final::stx_msg	file:
command_trigger	src/thread/SuspensibleThread.hpp	/^  Cond command_trigger, client_trigger;$/;"	m	class:SuspensibleThread
commands_widget	src/Dialogs/Waypoint/dlgWaypointDetails.cpp	/^     commands_widget(new WaypointCommandsWidget(look, &dialog, waypoint,$/;"	f	class:final
commands_widget	src/Dialogs/Waypoint/dlgWaypointDetails.cpp	/^  ManagedWidget commands_widget;$/;"	m	class:final	file:
comment	src/Engine/Waypoint/Waypoint.hpp	/^  tstring comment;$/;"	m	struct:Waypoint
comment	src/InfoBoxes/Data.hpp	/^  StaticString<32> comment;$/;"	m	struct:InfoBoxData
comment	src/Look/InfoBoxLook.hpp	/^  } title, value, comment;$/;"	m	struct:InfoBoxLook	typeref:struct:InfoBoxLook::__anon17
comment_color	src/InfoBoxes/Data.hpp	/^  uint8_t title_color, value_color, comment_color;$/;"	m	struct:InfoBoxData
comment_rect	src/InfoBoxes/InfoBoxWindow.hpp	/^  PixelRect comment_rect;$/;"	m	class:InfoBoxWindow
commit	src/Input/InputParser.cpp	/^  void commit(InputConfig &config, unsigned line) {$/;"	f	struct:EventBuilder
common_stats	src/Engine/Task/TaskManager.hpp	/^  CommonStats common_stats;$/;"	m	class:TaskManager
common_stats	src/NMEA/Derived.hpp	/^  CommonStats common_stats;$/;"	m	struct:DerivedInfo
comp_op	src/Topography/shapelib/mapserver.h	/^    CompositingOperation comp_op;$/;"	m	struct:_LayerCompositer
compare_projection	src/Terrain/TerrainRenderer.hpp	/^  CompareProjection compare_projection;$/;"	m	class:TerrainRenderer
compare_projection	src/Weather/Rasp/RaspRenderer.hpp	/^  CompareProjection compare_projection;$/;"	m	class:RaspRenderer
compass_brush	src/Look/MapLook.hpp	/^  Brush compass_brush;$/;"	m	struct:MapLook
compass_pen	src/Look/MapLook.hpp	/^  Pen compass_pen;$/;"	m	struct:MapLook
compass_triangle_brush	src/Look/MapLook.hpp	/^  Brush compass_triangle_brush;$/;"	m	struct:MapLook
compass_triangle_pen	src/Look/MapLook.hpp	/^  Pen compass_triangle_pen;$/;"	m	struct:MapLook
compass_visible	src/MapWindow/MapWindow.hpp	/^  bool compass_visible = true;$/;"	m	class:MapWindow
compatcodes	src/Terrain/jasper/jp2/jp2_cod.h	/^	uint_fast32_t compatcodes[JP2_FTYP_MAXCOMPATCODES];$/;"	m	struct:__anon85
compatible_dc	src/ui/canvas/gdi/Canvas.hpp	/^  HDC dc = nullptr, compatible_dc = nullptr;$/;"	m	class:Canvas
competition_class	src/Device/Driver/LX/LXN.hpp	/^    char competition_class[4];$/;"	m	struct:LXN::FlightInfo
competition_class	src/Device/Driver/LX/LXN.hpp	/^    const struct CompetitionClass *competition_class;$/;"	m	union:LXN::Packet	typeref:struct:LXN::Packet::CompetitionClass
competition_class_id	src/Device/Driver/LX/LXN.hpp	/^    uint8_t competition_class_id;$/;"	m	struct:LXN::FlightInfo
competition_id	src/Device/Declaration.hpp	/^  StaticString<8> competition_id;$/;"	m	struct:Declaration
competition_id	src/Plane/Plane.hpp	/^  StaticString<6> competition_id;$/;"	m	struct:Plane
competitionclass	src/Device/Driver/Volkslogger/vlapi2.h	/^      char competitionclass[13];$/;"	m	struct:VLAPI_DATA::DECLARATION::FLIGHTINFO
competitionid	src/Device/Driver/Volkslogger/vlapi2.h	/^      char competitionid[4];$/;"	m	struct:VLAPI_DATA::DECLARATION::FLIGHTINFO
competitionid	src/Device/Driver/Volkslogger/vlconv.h	/^	char competitionid[4];	\/\/ headerfields, but these here might be$/;"	m	struct:DIRENTRY
compiled	src/Topography/shapelib/mapserver.h	/^    int compiled;$/;"	m	struct:__anon28
complete	src/Dialogs/DownloadFilePicker.cpp	/^  bool got_size = false, complete = false, success;$/;"	m	class:final	file:
complete	src/Terrain/jasper/jpc/jpc_dec.h	/^	int complete;$/;"	m	struct:jpc_dec_seg_s
compno	src/Terrain/jasper/jpc/jpc_cs.h	/^	uint_fast16_t compno;$/;"	m	struct:__anon141
compno	src/Terrain/jasper/jpc/jpc_cs.h	/^	uint_fast16_t compno;$/;"	m	struct:__anon142
compno	src/Terrain/jasper/jpc/jpc_cs.h	/^	uint_fast16_t compno;$/;"	m	struct:__anon144
compno	src/Terrain/jasper/jpc/jpc_t2cod.h	/^	unsigned compno;$/;"	m	struct:__anon115
compnoend	src/Terrain/jasper/jpc/jpc_cs.h	/^	uint_fast16_t compnoend;$/;"	m	struct:__anon146
compnostart	src/Terrain/jasper/jpc/jpc_cs.h	/^	uint_fast16_t compnostart;$/;"	m	struct:__anon146
compositeRasterBuffer	src/Topography/shapelib/mapserver.h	/^    int WARN_UNUSED (*compositeRasterBuffer)(imageObj *dest, rasterBufferObj *overlay, CompositingOperation comp_op, int opacity);$/;"	m	struct:rendererVTableObj
compositer	src/Topography/shapelib/mapserver.h	/^    LayerCompositer *compositer;$/;"	m	struct:layerObj
compositor	src/ui/event/poll/WaylandQueue.hpp	/^  struct wl_compositor *compositor = nullptr;$/;"	m	class:UI::final	typeref:struct:UI::final::wl_compositor
compparms	src/Terrain/jasper/jpc/jpc_cs.h	/^	jpc_coxcp_t compparms;$/;"	m	struct:__anon140
compparms	src/Terrain/jasper/jpc/jpc_cs.h	/^	jpc_coxcp_t compparms;$/;"	m	struct:__anon141
compparms	src/Terrain/jasper/jpc/jpc_cs.h	/^	jpc_qcxcp_t compparms;$/;"	m	struct:__anon144
compparms	src/Terrain/jasper/jpc/jpc_cs.h	/^	jpc_qcxcp_t compparms;$/;"	m	struct:__anon145
comps	src/Terrain/jasper/jpc/jpc_cs.h	/^	jpc_crgcomp_t *comps;$/;"	m	struct:__anon153
comps	src/Terrain/jasper/jpc/jpc_cs.h	/^	jpc_sizcomp_t *comps;$/;"	m	struct:__anon137
comptype	src/Terrain/jasper/jp2/jp2_cod.h	/^	uint_fast8_t comptype;$/;"	m	struct:__anon86
compute_retry_offset	src/Topography/shapelib/mapprimitive.c	/^static double compute_retry_offset(textSymbolObj *ts, int fail_idx, double retried_offset, double max_dec_offset, double max_inc_offset) {$/;"	f	file:
computer	src/Computer/GlideComputerInterface.hpp	/^  GlideComputer* computer;$/;"	m	class:final
computer	src/MergeThread.hpp	/^  BasicComputer computer;$/;"	m	class:final
computer_pages	src/Dialogs/Settings/dlgConfiguration.cpp	/^static constexpr TabMenuPage computer_pages[] = {$/;"	v	file:
computer_settings	src/Airspace/AirspaceVisibility.hpp	/^  const AirspaceComputerSettings &computer_settings;$/;"	m	class:AirspaceVisibility
computer_settings	src/Blackboard/ComputerSettingsBlackboard.hpp	/^  ComputerSettings computer_settings;$/;"	m	class:ComputerSettingsBlackboard
cond	src/Device/Port/BufferedPort.hpp	/^  Cond cond;$/;"	m	class:BufferedPort
cond	src/Device/SettingsMap.hpp	/^  Cond cond;$/;"	m	class:DeviceSettingsMap
cond	src/event/Call.cxx	/^	Cond cond;$/;"	m	class:final	file:
cond	src/net/http/ToBuffer.cpp	/^  Cond cond;$/;"	m	class:final	file:
cond	src/net/http/ToFile.cpp	/^  Cond cond;$/;"	m	class:final	file:
cond	src/thread/StandbyThread.hpp	/^  Cond cond;$/;"	m	class:StandbyThread
cond	src/thread/WindowsCond.hxx	/^	CONDITION_VARIABLE cond;$/;"	m	class:WindowsCond
cond	src/ui/event/android/Queue.hpp	/^  Cond cond;$/;"	m	class:UI::EventQueue
condor_driver	src/Device/Driver/Condor.cpp	/^const struct DeviceRegister condor_driver = {$/;"	v	typeref:struct:DeviceRegister
config	src/Device/Descriptor.hpp	/^  DeviceConfig config;$/;"	m	class:final
config	src/Device/Driver/CAI302/Internal.hpp	/^  const DeviceConfig &config;$/;"	m	class:CAI302Device
config	src/Dialogs/Device/DeviceEditWidget.hpp	/^  DeviceConfig config;$/;"	m	class:DeviceEditWidget
config	src/Engine/Airspace/AirspaceWarningManager.hpp	/^  AirspaceWarningConfig config;$/;"	m	class:AirspaceWarningManager
config	src/Engine/Route/RoutePolars.hpp	/^  RoutePlannerConfig config;$/;"	m	class:RoutePolars
config	src/Renderer/AirspaceLabelList.cpp	/^  const AirspaceWarningConfig &config;$/;"	m	class:AirspaceLabelListCompare	file:
config_word	src/Device/Driver/CAI302/Protocol.hpp	/^    uint16_t config_word; \/\/ locked(1) = FF FE.  unlocked(0) = FF FF$/;"	m	struct:CAI302::Polar
configoptions	src/Topography/shapelib/mapserver.h	/^    hashTableObj configoptions;$/;"	m	struct:mapObj
connect	src/Android/BluetoothHelper.cpp	/^BluetoothHelper::connect(JNIEnv *env, const char *address)$/;"	f	class:BluetoothHelper
connect	src/Device/Port/TCPClientPort.hpp	/^  std::optional<ConnectSocket> connect;$/;"	m	class:final
connect_button	src/Kobo/WifiDialog.cpp	/^  Button *connect_button;$/;"	m	class:final	file:
connect_method	src/Android/BluetoothHelper.cpp	/^static jmethodID list_method, connect_method, createServer_method;$/;"	m	namespace:BluetoothHelper	file:
connection	src/Device/Port/TCPPort.hpp	/^  SocketEvent listener, connection;$/;"	m	class:final
connection	src/Topography/shapelib/mapserver.h	/^    char *connection;$/;"	m	struct:__anon31
connection	src/Topography/shapelib/mapserver.h	/^    char *connection;$/;"	m	struct:layerObj
connectionoptions	src/Topography/shapelib/mapserver.h	/^    hashTableObj connectionoptions;$/;"	m	struct:layerObj
connectiontype	src/Topography/shapelib/mapserver.h	/^    enum MS_CONNECTION_TYPE connectiontype;$/;"	m	struct:layerObj	typeref:enum:layerObj::MS_CONNECTION_TYPE
connectiontype	src/Topography/shapelib/mapserver.h	/^    enum MS_JOIN_CONNECTION_TYPE connectiontype;$/;"	m	struct:__anon31	typeref:enum:__anon31::MS_JOIN_CONNECTION_TYPE
const_iterator	src/Device/MultipleDevices.hpp	/^  typedef typename std::array<DeviceDescriptor *, NUMDEV>::const_iterator const_iterator;$/;"	t	class:final
const_iterator	src/Device/SettingsMap.hpp	/^    explicit const_iterator(typename Map::const_iterator _i):i(_i) {}$/;"	f	class:DeviceSettingsMap::const_iterator
const_iterator	src/Device/SettingsMap.hpp	/^  class const_iterator {$/;"	c	class:DeviceSettingsMap
const_iterator	src/Engine/Airspace/AirspaceWarningManager.hpp	/^  typedef AirspaceWarningList::const_iterator const_iterator;$/;"	t	class:AirspaceWarningManager
const_iterator	src/Engine/Airspace/AirspacesInterface.hpp	/^  typedef AirspaceTree::const_query_iterator const_iterator;$/;"	t	class:AirspacesInterface
const_iterator	src/Engine/Trace/Trace.hpp	/^    const_iterator(ChronologicalList::const_iterator &&_iterator)$/;"	f	class:Trace::const_iterator
const_iterator	src/Engine/Trace/Trace.hpp	/^  class const_iterator : public ChronologicalList::const_iterator {$/;"	c	class:Trace
const_iterator	src/Engine/Waypoint/Waypoints.hpp	/^  typedef WaypointTree::const_iterator const_iterator;$/;"	t	class:Waypoints
const_iterator	src/FLARM/ColorDatabase.hpp	/^  typedef Map::const_iterator const_iterator;$/;"	t	class:FlarmColorDatabase
const_iterator	src/FLARM/NameDatabase.hpp	/^  typedef Array::const_iterator const_iterator;$/;"	t	class:FlarmNameDatabase
const_iterator	src/Repository/FileRepository.hpp	/^  typedef FileList::const_iterator const_iterator;$/;"	t	struct:FileRepository
const_iterator	src/Topography/TopographyFile.hpp	/^    const_iterator(const ShapeList *p):current(p) {}$/;"	f	class:TopographyFile::const_iterator
const_iterator	src/Topography/TopographyFile.hpp	/^  class const_iterator {$/;"	c	class:TopographyFile
const_iterator	src/Weather/NOAAStore.hpp	/^  typedef StationContainer::const_iterator const_iterator;$/;"	t	class:NOAAStore
const_iterator	src/XML/Node.hpp	/^    typedef std::list<XMLNode>::const_iterator const_iterator;$/;"	t	struct:XMLNode::Data
const_iterator	src/XML/Node.hpp	/^  typedef Data::const_iterator const_iterator;$/;"	t	class:XMLNode
const_iterator	src/net/AddressInfo.hxx	/^		explicit constexpr const_iterator(struct addrinfo *_cursor)$/;"	f	class:AddressInfoList::const_iterator
const_iterator	src/net/AddressInfo.hxx	/^	class const_iterator {$/;"	c	class:AddressInfoList
const_iterator	src/util/AllocatedGrid.hxx	/^	typedef typename AllocatedArray<T>::const_iterator const_iterator;$/;"	t	class:AllocatedGrid
const_iterator	src/util/IterableSplitString.hxx	/^	typedef Iterator const_iterator;$/;"	t	class:BasicIterableSplitString
const_iterator	src/util/OverwritingRingBuffer.hpp	/^    const_iterator(const TrivialOverwritingRingBuffer<T, size> &_buffer, unsigned _i)$/;"	f	class:TrivialOverwritingRingBuffer::const_iterator
const_iterator	src/util/OverwritingRingBuffer.hpp	/^  class const_iterator {$/;"	c	class:TrivialOverwritingRingBuffer
const_iterator	src/util/QuadTree.hxx	/^	class const_iterator {$/;"	c
const_iterator_range	src/Engine/Airspace/AirspacesInterface.hpp	/^  typedef boost::iterator_range<const_iterator> const_iterator_range;$/;"	t	class:AirspacesInterface
const_pointer	src/system/Path.hpp	/^  typedef Path::const_pointer const_pointer;$/;"	t	class:AllocatedPath
const_pointer	src/system/Path.hpp	/^  typedef value_type::const_pointer const_pointer;$/;"	t	class:Path
const_pointer	src/ui/canvas/memory/Buffer.hpp	/^  typedef typename PixelTraits::const_pointer const_pointer;$/;"	t	struct:WritableImageBuffer
const_pointer	src/ui/canvas/memory/PixelOperations.hpp	/^  typedef typename PixelTraits::const_pointer const_pointer;$/;"	t	struct:PerPixelOperations
const_pointer	src/ui/canvas/memory/PixelTraits.hpp	/^  typedef const color_type *const_pointer;$/;"	t	struct:BGRAPixelTraits
const_pointer	src/ui/canvas/memory/PixelTraits.hpp	/^  typedef const color_type *const_pointer;$/;"	t	struct:GreyscalePixelTraits
const_pointer	src/util/ConvertString.hpp	/^  typedef typename Value::const_pointer const_pointer;$/;"	t	class:UTF8ToWideConverter
const_pointer	src/util/ConvertString.hpp	/^  typedef typename Value::const_pointer const_pointer;$/;"	t	class:WideToACPConverter
const_pointer	src/util/ConvertString.hpp	/^  typedef typename Value::const_pointer const_pointer;$/;"	t	class:WideToUTF8Converter
const_pointer	src/util/LightString.hxx	/^	typedef typename StringPointer<T>::const_pointer const_pointer;$/;"	t	class:LightString
const_pointer	src/util/SliceAllocator.hxx	/^	typedef const T *const_pointer;$/;"	t	class:GlobalSliceAllocator
const_pointer	src/util/SliceAllocator.hxx	/^	typedef const T *const_pointer;$/;"	t	class:SliceAllocator
const_pointer	src/util/StringBuilder.hxx	/^	typedef const T *const_pointer;$/;"	t	class:StringBuilder
const_pointer	src/util/StringParser.hxx	/^	typedef const T *const_pointer;$/;"	t	class:StringParser
const_reference	src/util/AllocatedGrid.hxx	/^	typedef typename AllocatedArray<T>::const_reference const_reference;$/;"	t	class:AllocatedGrid
const_reference	src/util/SliceAllocator.hxx	/^	typedef const T &const_reference;$/;"	t	class:GlobalSliceAllocator
const_reference	src/util/SliceAllocator.hxx	/^	typedef const T &const_reference;$/;"	t	class:SliceAllocator
const_rpointer	src/ui/canvas/memory/Optimised.hpp	/^  typedef typename PixelTraits::const_rpointer const_rpointer;$/;"	t	class:SelectOptimisedPixelOperations
const_rpointer	src/ui/canvas/memory/PixelOperations.hpp	/^  typedef typename PixelTraits::const_rpointer const_rpointer;$/;"	t	struct:ConditionalWritePixel
const_rpointer	src/ui/canvas/memory/PixelTraits.hpp	/^  typedef const color_type *gcc_restrict const_rpointer;$/;"	t	struct:BGRAPixelTraits
const_rpointer	src/ui/canvas/memory/PixelTraits.hpp	/^  typedef const color_type *gcc_restrict const_rpointer;$/;"	t	struct:GreyscalePixelTraits
constk	src/ui/canvas/fb/mxcfb.h	/^	int constk[16];$/;"	m	struct:mxcfb_gamma
constraints	src/Engine/Task/Factory/AbstractTaskFactory.hpp	/^  const TaskFactoryConstraints &constraints;$/;"	m	class:AbstractTaskFactory
constraints	src/Engine/Task/Ordered/Points/FinishPoint.hpp	/^  FinishConstraints constraints;$/;"	m	class:final
constraints	src/Engine/Task/Ordered/Points/StartPoint.hpp	/^  StartConstraints constraints;$/;"	m	class:final
construct	src/util/SliceAllocator.hxx	/^	void construct(U *p, Args&&... args) {$/;"	f	class:GlobalSliceAllocator
construct	src/util/SliceAllocator.hxx	/^	void construct(U *p, Args&&... args) {$/;"	f	class:SliceAllocator
content	src/InfoBoxes/InfoBoxWindow.hpp	/^  std::unique_ptr<InfoBoxContent> content;$/;"	m	class:InfoBoxWindow
content	src/Weather/METAR.hpp	/^  ContentString content;$/;"	m	struct:METAR
content	src/Weather/TAF.hpp	/^  ContentString content;$/;"	m	struct:TAF
contents	src/InfoBoxes/InfoBoxSettings.hpp	/^    InfoBoxFactory::Type contents[MAX_CONTENTS];$/;"	m	struct:InfoBoxSettings::Panel
contest	src/Computer/Settings.hpp	/^  ContestSettings contest;$/;"	m	struct:ComputerSettings
contest	src/Computer/TaskComputer.hpp	/^  ContestComputer contest;$/;"	m	class:TaskComputer
contest	src/Computer/TraceComputer.hpp	/^  Trace full, contest, sprint;$/;"	m	class:TraceComputer
contest	src/Engine/Contest/ContestManager.hpp	/^  Contest contest;$/;"	m	class:ContestManager
contest	src/Engine/Contest/Settings.hpp	/^  Contest contest;$/;"	m	struct:ContestSettings
contest_class	src/Device/Driver/LX/Protocol.hpp	/^    char contest_class[9];$/;"	m	struct:LX::ContestClass
contest_handicap	src/Polar/PolarStore.hpp	/^    unsigned contest_handicap;$/;"	m	struct:PolarStore::Item
contest_manager	src/Computer/ContestComputer.hpp	/^  ContestManager contest_manager;$/;"	m	class:ContestComputer
contest_pens	src/Look/MapLook.hpp	/^  Pen contest_pens[3];$/;"	m	struct:MapLook
contest_stats	src/NMEA/Derived.hpp	/^  ContestStatistics contest_stats;$/;"	m	struct:DerivedInfo
contest_to_string	src/Engine/Contest/Solvers/Contests.cpp	/^static const TCHAR *const contest_to_string[] = {$/;"	v	file:
contest_trace_size	src/Computer/TraceComputer.cpp	/^static constexpr unsigned contest_trace_size =$/;"	v	file:
context	src/Android/Main.cpp	/^Context *context;$/;"	v
context	src/ui/canvas/custom/TopCanvas.hpp	/^  EGLContext context;$/;"	m	class:DisplayOrientation
continuation	src/event/net/cares/CoLookup.hxx	/^	std::coroutine_handle<> continuation;$/;"	m	class:Cares::final
continuous	src/Engine/Contest/Solvers/ContestDijkstra.hpp	/^  const bool continuous;$/;"	m	class:ContestDijkstra
contour_column_base	src/Terrain/RasterRenderer.hpp	/^  unsigned char *contour_column_base = nullptr;$/;"	m	class:RasterRenderer
contours	src/Terrain/TerrainSettings.hpp	/^  Contours contours;$/;"	m	struct:TerrainRendererSettings
contrast	src/Terrain/TerrainSettings.hpp	/^  short contrast;$/;"	m	struct:TerrainRendererSettings
control	src/Renderer/TextRenderer.hpp	/^  bool control = false;$/;"	m	class:TextRenderer
control_parent	src/ui/window/Window.hpp	/^  bool tab_stop = false, control_parent = false;$/;"	m	class:WindowStyle
control_parent	src/ui/window/Window.hpp	/^  bool tab_stop, control_parent;$/;"	m	class:Window
control_size	src/InfoBoxes/InfoBoxLayout.hpp	/^    PixelSize control_size;$/;"	m	struct:InfoBoxLayout::Layout
conv_dir	src/Device/Driver/Volkslogger/vlconv.cpp	/^conv_dir(std::vector<DIRENTRY> &flights, const uint8_t *p, const size_t length)$/;"	f
convert_buffer	src/io/TextWriter.hpp	/^  ReusableArray<char> convert_buffer;$/;"	m	class:TextWriter
convert_gcs	src/Device/Driver/Volkslogger/vlconv.cpp	/^convert_gcs(FILE *Ausgabedatei,$/;"	f
convert_string	src/Device/Driver/CAI302/Declare.cpp	/^convert_string(char *dest, size_t size, const TCHAR *src)$/;"	f	file:
convert_string	src/Device/Driver/EW.cpp	/^convert_string(char *dest, size_t size, const TCHAR *src)$/;"	f	file:
converter	src/io/ConvertLineReader.hpp	/^  StringConverter converter;$/;"	m	class:ConvertLineReader
coordinate_format	src/FormatSettings.hpp	/^  CoordinateFormat coordinate_format;$/;"	m	struct:FormatSettings
copilot	src/Device/Driver/LX/LXN.hpp	/^    char copilot[19];$/;"	m	struct:LXN::FlightInfo
copilot_name	src/Device/Declaration.hpp	/^  StaticString<64> copilot_name;$/;"	m	struct:Declaration
copilot_name	src/Logger/Settings.hpp	/^  StaticString<64> copilot_name;$/;"	m	struct:LoggerSettings
copy_button	src/Dialogs/ProfileListDialog.cpp	/^  Button *copy_button, *delete_button;$/;"	m	class:final	file:
copy_button	src/Dialogs/Settings/dlgConfigInfoboxes.cpp	/^    PixelRect copy_button, paste_button, close_button;$/;"	m	struct:final::Layout	file:
copy_button	src/Dialogs/Settings/dlgConfigInfoboxes.cpp	/^  Button copy_button, paste_button, close_button;$/;"	m	class:final	file:
copy_padded	src/Device/Driver/Volkslogger/Util.cpp	/^copy_padded(char *dest, size_t size, const char *src)$/;"	f
copy_space_padded	src/Device/Driver/LX/Declare.cpp	/^copy_space_padded(char dest[], const TCHAR src[], unsigned int len)$/;"	f	file:
corners	src/Projection/CompareProjection.hpp	/^  FourCorners corners;$/;"	m	class:CompareProjection
corrected_width	src/ui/canvas/RawBitmap.hpp	/^  const unsigned corrected_width;$/;"	m	class:final
cos	src/Geo/Flat/FlatProjection.hpp	/^  double cos;$/;"	m	class:FlatProjection
cos	src/Math/Angle.hpp	/^  inline double cos() const {$/;"	f	class:Angle
cost	src/Math/FastRotation.hpp	/^  double cost = 1, sint = 0;$/;"	m	class:FastRotation
cost	src/Math/FastRotation.hpp	/^  int cost = ONE, sint = 0;$/;"	m	class:FastIntegerRotation
count	src/Device/Driver/CAI302/Protocol.hpp	/^    uint16_t count;$/;"	m	struct:CAI302::NavpointMeta
count	src/Device/Driver/CAI302/Protocol.hpp	/^    uint8_t count;$/;"	m	struct:CAI302::PilotMeta
count	src/Device/Driver/CAI302/Protocol.hpp	/^    uint8_t count;$/;"	m	struct:CAI302::PilotMetaActive
count	src/InfoBoxes/InfoBoxLayout.hpp	/^    unsigned count;$/;"	m	struct:InfoBoxLayout::Layout
count	src/Language/MOFile.hpp	/^  unsigned count;$/;"	m	class:MOFile
count	src/NMEA/ClimbHistory.hpp	/^  unsigned short count[SIZE];$/;"	m	class:ClimbHistory
count	src/Terrain/RasterTileCache.hpp	/^    uint16_t count;$/;"	m	struct:RasterTileCache::MarkerSegmentInfo
count	src/ui/canvas/memory/Bresenham.hpp	/^  unsigned count;$/;"	m	class:BresenhamIterator
count_airspace	src/Engine/Route/RoutePlanner.hpp	/^  mutable unsigned long count_airspace;$/;"	m	class:RoutePlanner
count_dij	src/Engine/Route/RoutePlanner.hpp	/^  mutable unsigned long count_dij;$/;"	m	class:RoutePlanner
count_supressed	src/Engine/Route/RoutePlanner.hpp	/^  mutable unsigned long count_supressed;$/;"	m	class:RoutePlanner
count_terrain	src/Engine/Route/RoutePlanner.hpp	/^  mutable unsigned long count_terrain;$/;"	m	class:RoutePlanner
count_unique	src/Engine/Route/RoutePlanner.hpp	/^  mutable unsigned long count_unique;$/;"	m	class:RoutePlanner
countdown_autoqnh	src/Computer/AutoQNH.hpp	/^  unsigned countdown_autoqnh;$/;"	m	class:AutoQNH
cp	src/Terrain/jasper/jpc/jpc_dec.h	/^	jpc_dec_cp_t *cp;$/;"	m	struct:__anon127
cp	src/Terrain/jasper/jpc/jpc_dec.h	/^	jpc_dec_cp_t *cp;$/;"	m	struct:__anon129
cps_	src/Terrain/jasper/jas_image.h	/^	unsigned cps_;$/;"	m	struct:__anon100
cpu	src/Screen/StopWatch.hpp	/^    cpu_stamp_t cpu;$/;"	m	struct:ScreenStopWatch::Marker
cpu	src/system/SystemLoad.cpp	/^struct cpu {$/;"	s	file:
cpu_lock	src/Hardware/CPU.cpp	/^static std::atomic_uint cpu_lock;$/;"	v	file:
cpu_stamp_t	src/Screen/StopWatch.hpp	/^  typedef uint64_t cpu_stamp_t;$/;"	t	class:ScreenStopWatch
crc	src/Device/Driver/FLARM/BinaryProtocol.hpp	/^    PackedLE16 crc;$/;"	m	struct:FLARM::FrameHeader
crc	src/Device/Driver/LX/Protocol.hpp	/^    uint8_t crc;$/;"	m	class:LX::CRCWriter
crc	src/Tracking/SkyLines/Protocol.hpp	/^  uint16_t crc;$/;"	m	struct:SkyLinesTracking::Header
crc16	src/Device/Driver/IMI/Protocol/Types.hpp	/^    IMIWORD crc16;$/;"	m	struct:IMI::FlightFinish
crc16	src/Device/Driver/IMI/Protocol/Types.hpp	/^    IMIWORD crc16;$/;"	m	struct:IMI::Signature
crc16	src/Device/Driver/IMI/Protocol/Types.hpp	/^    IMIWORD crc16;$/;"	m	struct:IMI::TDeclaration
crc16	src/Device/Driver/IMI/Protocol/Types.hpp	/^    IMIWORD crc16;$/;"	m	struct:IMI::TMsg
crc16ccitt_table	src/util/CRC.cpp	/^const uint16_t crc16ccitt_table[256] = {$/;"	v
create	src/Android/GliderLink.cpp	/^GliderLink* GliderLink::create(JNIEnv* env, Context* context,$/;"	f	class:GliderLink
create	src/Android/InternalSensors.cpp	/^InternalSensors::create(JNIEnv *env, Context *context, unsigned int index)$/;"	f	class:InternalSensors
create	src/Android/TextUtil.cpp	/^TextUtil::create(const FontDescription &d)$/;"	f	class:TextUtil
create	src/InfoBoxes/Content/Factory.cpp	/^  InfoBoxContent *(*create)();$/;"	m	struct:MetaData	file:
create	src/Widget/CreateWindowWidget.hpp	/^  CreateFunction create;$/;"	m	class:final
createBitmap_method	src/Android/NativeView.cpp	/^jmethodID NativeView::createBitmap_method;$/;"	m	class:NativeView	file:
createBitmap_method	src/Android/NativeView.hpp	/^  static jmethodID createBitmap_method;$/;"	m	class:NativeView
createImage	src/Topography/shapelib/mapserver.h	/^    imageObj* WARN_UNUSED (*createImage)(int width, int height, outputFormatObj *format, colorObj* bg);$/;"	m	struct:rendererVTableObj
createServer	src/Android/BluetoothHelper.cpp	/^BluetoothHelper::createServer(JNIEnv *env)$/;"	f	class:BluetoothHelper
createServer_method	src/Android/BluetoothHelper.cpp	/^static jmethodID list_method, connect_method, createServer_method;$/;"	m	namespace:BluetoothHelper	file:
creating	src/thread/Thread.hpp	/^  bool creating;$/;"	m	class:Thread
creg	src/Terrain/jasper/jpc/jpc_mqdec.h	/^	uint_least32_t creg;$/;"	m	struct:__anon110
crestlen	src/zzip/file.h	/^    zzip_size_t crestlen;$/;"	m	struct:zzip_file
crg	src/Terrain/jasper/jpc/jpc_cs.h	/^	jpc_crg_t crg;$/;"	m	union:__anon155
critical_section	src/thread/CriticalSection.hxx	/^	CRITICAL_SECTION critical_section;$/;"	m	class:CriticalSection
cross_section	src/Look/Look.hpp	/^  CrossSectionLook cross_section;$/;"	m	struct:Look
cross_section_look	src/Dialogs/dlgAnalysis.cpp	/^  const CrossSectionLook &cross_section_look;$/;"	m	class:ChartControl	file:
cross_section_renderer	src/Dialogs/dlgAnalysis.cpp	/^  CrossSectionRenderer cross_section_renderer;$/;"	m	class:ChartControl	file:
crosshair_pen	src/Look/OverlayLook.hpp	/^  Pen crosshair_pen;$/;"	m	struct:OverlayLook
cruise_altitude	src/Engine/Route/RoutePolars.hpp	/^  int cruise_altitude;$/;"	m	class:RoutePolars
cruise_descent	src/Engine/Airspace/AirspaceAircraftPerformance.hpp	/^  double cruise_descent;$/;"	m	class:AirspaceAircraftPerformance
cruise_efficiency	src/Engine/GlideSolvers/GlidePolar.hpp	/^  double cruise_efficiency;$/;"	m	class:GlidePolar
cruise_efficiency	src/Engine/GlideSolvers/MacCready.hpp	/^  const double cruise_efficiency;$/;"	m	class:MacCready
cruise_efficiency	src/Engine/Task/Stats/TaskStats.hpp	/^  double cruise_efficiency;$/;"	m	class:TaskStats
cruise_filter	src/Engine/Airspace/AirspaceWarningManager.hpp	/^  AircraftStateFilter cruise_filter;$/;"	m	class:AirspaceWarningManager
cruise_gr	src/NMEA/VarioInfo.hpp	/^  double cruise_gr;$/;"	m	struct:VarioInfo
cruise_mode_icon	src/Look/MapLook.hpp	/^  MaskedIcon cruise_mode_icon, climb_mode_icon, final_glide_mode_icon, abort_mode_icon;$/;"	m	struct:MapLook
cruise_orientation	src/MapSettings.hpp	/^  MapOrientation cruise_orientation;$/;"	m	struct:MapSettings
cruise_scale	src/MapSettings.hpp	/^  double cruise_scale;$/;"	m	struct:MapSettings
cruise_scale	src/PageState.hpp	/^  double cruise_scale;$/;"	m	struct:PageState
cruise_speed	src/Engine/Airspace/AirspaceAircraftPerformance.hpp	/^  double cruise_speed;$/;"	m	class:AirspaceAircraftPerformance
cruise_start_altitude	src/NMEA/CirclingInfo.hpp	/^  double cruise_start_altitude;$/;"	m	struct:CirclingInfo
cruise_start_altitude_te	src/NMEA/CirclingInfo.hpp	/^  double cruise_start_altitude_te;$/;"	m	struct:CirclingInfo
cruise_start_location	src/NMEA/CirclingInfo.hpp	/^  GeoPoint cruise_start_location;$/;"	m	struct:CirclingInfo
cruise_start_time	src/NMEA/CirclingInfo.hpp	/^  double cruise_start_time;$/;"	m	struct:CirclingInfo
cruise_to_circling_mode_switch_threshold	src/Computer/Settings.hpp	/^  double cruise_to_circling_mode_switch_threshold;$/;"	m	struct:CirclingSettings
cruise_track_bearing	src/Engine/GlideSolvers/GlideResult.hpp	/^  Angle cruise_track_bearing;$/;"	m	struct:GlideResult
csid	src/Terrain/jasper/jp2/jp2_cod.h	/^	uint_fast32_t csid;$/;"	m	struct:__anon88
csize	src/zzip/file.h	/^    zzip_size_t csize;$/;"	m	struct:zzip_file
cslevels	src/Atmosphere/CuSonde.hpp	/^  Level cslevels[NUM_LEVELS];$/;"	m	class:CuSonde
cstate	src/Terrain/jasper/jpc/jpc_dec.h	/^	jpc_cstate_t *cstate;$/;"	m	struct:__anon129
csty	src/Terrain/jasper/jpc/jpc_cs.h	/^	uint_fast8_t csty;$/;"	m	struct:__anon139
csty	src/Terrain/jasper/jpc/jpc_cs.h	/^	uint_fast8_t csty;$/;"	m	struct:__anon140
csty	src/Terrain/jasper/jpc/jpc_dec.h	/^	uint_fast8_t csty;$/;"	m	struct:__anon119
csty	src/Terrain/jasper/jpc/jpc_dec.h	/^	uint_fast8_t csty;$/;"	m	struct:__anon120
csunk	src/Terrain/jasper/jp2/jp2_cod.h	/^	uint_fast8_t csunk;$/;"	m	struct:__anon86
ctor	src/Android/IOIOHelper.cpp	/^jmethodID IOIOHelper::ctor,$/;"	m	class:IOIOHelper	file:
ctor	src/Android/IOIOHelper.hpp	/^  static jmethodID ctor;$/;"	m	class:IOIOHelper
ctor	src/Android/NativeBMP085Listener.cpp	/^static jmethodID ctor;$/;"	m	namespace:NativeBMP085Listener	file:
ctor	src/Android/NativeI2CbaroListener.cpp	/^static jmethodID ctor;$/;"	m	namespace:NativeI2CbaroListener	file:
ctor	src/Android/NativeInputListener.cpp	/^static jmethodID ctor;$/;"	m	namespace:NativeInputListener	file:
ctor	src/Android/NativeLeScanCallback.cpp	/^static jmethodID ctor;$/;"	m	namespace:NativeLeScanCallback	file:
ctor	src/Android/NativeNunchuckListener.cpp	/^static jmethodID ctor;$/;"	m	namespace:NativeNunchuckListener	file:
ctor	src/Android/NativePortListener.cpp	/^static jmethodID ctor;$/;"	m	namespace:NativePortListener	file:
ctor	src/Android/NativeVoltageListener.cpp	/^static jmethodID ctor;$/;"	m	namespace:NativeVoltageListener	file:
ctor	src/java/URL.cxx	/^jmethodID Java::URL::ctor;$/;"	m	class:Java::URL	file:
ctor	src/java/URL.hxx	/^	static jmethodID ctor, openConnection_method;$/;"	m	class:Java::URL
ctreg	src/Terrain/jasper/jpc/jpc_mqdec.h	/^	uint_least32_t ctreg;$/;"	m	struct:__anon110
ctrl_click	src/ui/event/poll/X11Queue.hpp	/^  bool ctrl_click;$/;"	m	class:UI::X11EventQueue
ctxs	src/Terrain/jasper/jpc/jpc_mqdec.h	/^	const jpc_mqstate_t **ctxs;$/;"	m	struct:__anon110
cu_computer	src/Computer/GlideComputer.hpp	/^  CuComputer cu_computer;$/;"	m	class:GlideComputer
cu_sonde	src/Computer/CuComputer.hpp	/^  CuSonde cu_sonde;$/;"	m	class:CuComputer
cur	src/Engine/Route/AStar.hpp	/^  node_value_iterator cur;$/;"	m	class:AStar
curctx	src/Terrain/jasper/jpc/jpc_mqdec.h	/^	const jpc_mqstate_t **curctx;$/;"	m	struct:__anon110
curl	src/Tracking/TrackingGlue.cpp	/^   curl(curl),$/;"	v
curl	src/Tracking/TrackingGlue.hpp	/^  CurlGlobal &curl;$/;"	m	class:final
curl	src/net/http/Init.cpp	/^CurlGlobal *Net::curl;$/;"	m	class:Net	file:
curl	src/net/http/ToBuffer.hpp	/^  CurlGlobal &curl;$/;"	m	class:Net::DownloadToBufferJob
curl	src/net/http/ToFile.hpp	/^  CurlGlobal &curl;$/;"	m	class:Net::DownloadToFileJob
current	src/Topography/TopographyFile.hpp	/^    const ShapeList *current;$/;"	m	class:TopographyFile::const_iterator
current	src/Units/Units.cpp	/^UnitSetting Units::current = {$/;"	m	class:Units	file:
current	src/Widget/PagerWidget.hpp	/^  unsigned current;$/;"	m	class:PagerWidget
current	src/ui/window/DoubleBufferWindow.hpp	/^  unsigned current = 0;$/;"	m	class:DoubleBufferWindow
current	src/util/IterableSplitString.hxx	/^		StringView current, rest;$/;"	m	class:BasicIterableSplitString::final
current_circle	src/Computer/Wind/CirclingWind.hpp	/^  Angle current_circle;$/;"	m	class:CirclingWind
current_index	src/Form/DataField/ComboList.hpp	/^  int current_index;$/;"	m	class:ComboList
current_index	src/Form/DataField/File.hpp	/^  unsigned int current_index;$/;"	m	class:final
current_index	src/PageState.hpp	/^  unsigned current_index;$/;"	m	struct:PagesState
current_leg	src/Engine/Task/Computer/TaskStatsComputer.hpp	/^  ElementStatComputer current_leg;$/;"	m	class:TaskStatsComputer
current_leg	src/Engine/Task/Stats/TaskStats.hpp	/^  ElementStat current_leg;$/;"	m	class:TaskStats
current_line	src/Logger/FlightParser.hpp	/^  char *current_line;$/;"	m	class:FlightParser
current_mode	src/Input/InputEvents.cpp	/^  static Mode current_mode = InputEvents::MODE_DEFAULT;$/;"	m	namespace:InputEvents	file:
current_page	src/Dialogs/Settings/dlgConfiguration.cpp	/^static unsigned current_page;$/;"	v	file:
current_page	src/Form/GridView.hpp	/^  unsigned current_page;$/;"	m	class:GridView
current_position	src/net/http/DownloadManager.cpp	/^  int64_t current_size, current_position;$/;"	m	class:final	file:
current_preview	src/Dialogs/Settings/dlgConfigInfoboxes.cpp	/^  unsigned current_preview;$/;"	m	class:final	file:
current_risk_mc	src/Engine/Task/Stats/CommonStats.hpp	/^  double current_risk_mc;$/;"	m	class:CommonStats
current_size	src/net/http/DownloadManager.cpp	/^  int64_t current_size, current_position;$/;"	m	class:final	file:
current_thermal	src/NMEA/ClimbInfo.hpp	/^  OneClimbInfo current_thermal;$/;"	m	struct:ClimbInfo
current_type	src/Dialogs/Task/MutateTaskPointDialog.cpp	/^  const TaskPointFactoryType current_type;$/;"	m	class:final	file:
current_value	src/Engine/PathSolvers/Dijkstra.hpp	/^  unsigned current_value;$/;"	m	class:Dijkstra
current_year	src/Logger/IGCFileCleanup.cpp	/^  unsigned current_year;$/;"	m	class:OldIGCFileFinder	file:
currentfeature	src/Topography/shapelib/mapserver.h	/^    featureListNodeObjPtr currentfeature; \/* pointer to the current feature *\/$/;"	m	struct:layerObj
currentfp	src/zzip/lib.h	/^    struct zzip_file * currentfp; \/* last fp used... *\/$/;"	m	struct:zzip_dir	typeref:struct:zzip_dir::zzip_file
curseg	src/Terrain/jasper/jpc/jpc_dec.h	/^	jpc_dec_seg_t *curseg;$/;"	m	struct:__anon122
cursor	src/Dialogs/KnobTextEntry.cpp	/^  unsigned int cursor;$/;"	m	class:final	file:
cursor	src/Dialogs/TouchTextEntry.cpp	/^static unsigned int cursor = 0;$/;"	v	file:
cursor	src/Form/DigitEntry.hpp	/^  unsigned cursor;$/;"	m	class:CoordinateFormat
cursor	src/Form/List.hpp	/^  unsigned cursor = 0;$/;"	m	class:ListControl
cursor	src/Form/TabMenuDisplay.hpp	/^  unsigned cursor;$/;"	m	class:final
cursor	src/net/AddressInfo.hxx	/^		struct addrinfo *cursor;$/;"	m	class:AddressInfoList::const_iterator	typeref:struct:AddressInfoList::const_iterator::addrinfo
cursor	src/util/IntrusiveList.hxx	/^			:cursor(_cursor) {}$/;"	f	class:IntrusiveList::final
cursor	src/util/IntrusiveList.hxx	/^			:cursor(src.cursor) {}$/;"	f	class:IntrusiveList::final
cursor	src/util/IntrusiveList.hxx	/^		IntrusiveListNode *cursor;$/;"	m	class:IntrusiveList::final
cursor	src/util/IntrusiveList.hxx	/^		const IntrusiveListNode *cursor;$/;"	m	class:IntrusiveList::final
cursor_handler	src/Form/List.hpp	/^  ListCursorHandler *cursor_handler = nullptr;$/;"	m	class:ListControl
cursor_size	src/DisplaySettings.hpp	/^  uint8_t cursor_size;$/;"	m	struct:DisplaySettings
cursor_size	src/ui/window/TopWindow.hpp	/^  uint8_t cursor_size = 1;$/;"	m	class:UI::TopWindow
cursor_x	src/Screen/TerminalWindow.hpp	/^  unsigned cursor_x, cursor_y;$/;"	m	class:TerminalWindow
cursor_y	src/Screen/TerminalWindow.hpp	/^  unsigned cursor_x, cursor_y;$/;"	m	class:TerminalWindow
curtile	src/Terrain/jasper/jpc/jpc_dec.h	/^	jpc_dec_tile_t *curtile;$/;"	m	struct:__anon129
curtileendoff	src/Terrain/jasper/jpc/jpc_dec.h	/^	long curtileendoff;$/;"	m	struct:__anon129
curtoken	src/Topography/shapelib/mapserver.h	/^    tokenListNodeObjPtr curtoken;$/;"	m	struct:__anon28
custom_dpi	src/UISettings.hpp	/^  unsigned custom_dpi;$/;"	m	struct:UISettings
d	src/Engine/Route/RouteLink.hpp	/^  double d;$/;"	m	struct:RouteLink
d	src/XML/Node.hpp	/^  Data *d;$/;"	m	class:XMLNode
d	src/util/ByteOrder.hxx	/^	uint8_t a, b, c, d;$/;"	m	class:PackedLE32
d	src/util/MD5.hpp	/^    uint32_t a, b, c, d;$/;"	m	struct:MD5::State
d_compr	src/zzip/lib.h	/^    uint8_t     d_compr;        \/* the compression type, 0 = store, 8 = inflate *\/$/;"	m	struct:zzip_dir_hdr
d_compr	src/zzip/zzip.h	/^    int	 	d_compr;	\/* compression method *\/$/;"	m	struct:zzip_dirent
d_crc32	src/zzip/lib.h	/^    uint32_t    d_crc32;        \/* the adler32-checksum *\/$/;"	m	struct:zzip_dir_hdr
d_csize	src/zzip/lib.h	/^    uint32_t    d_csize;        \/* compressed size *\/$/;"	m	struct:zzip_dir_hdr
d_csize	src/zzip/zzip.h	/^    int         d_csize;        \/* compressed size *\/$/;"	m	struct:zzip_dirent
d_name	src/zzip/lib.h	/^    char        d_name[1];      \/* the actual name of the entry, may contain DIRSEPs *\/$/;"	m	struct:zzip_dir_hdr
d_name	src/zzip/zzip.h	/^    char * 	d_name;		\/* file name \/ strdupped name *\/$/;"	m	struct:zzip_dirent
d_namlen	src/zzip/lib.h	/^    uint16_t    d_namlen;       \/* explicit namelen of d_name *\/$/;"	m	struct:zzip_dir_hdr
d_off	src/zzip/lib.h	/^    uint32_t    d_off;          \/* offset of file in zipfile *\/$/;"	m	struct:zzip_dir_hdr
d_planned	src/Engine/Task/Stats/TaskSummary.hpp	/^  double d_planned;$/;"	m	struct:TaskSummaryPoint
d_reclen	src/zzip/lib.h	/^    uint16_t    d_reclen;       \/* next dir_hdr structure offset *\/$/;"	m	struct:zzip_dir_hdr
d_stream	src/zzip/file.h	/^    z_stream d_stream;$/;"	m	struct:zzip_file
d_usize	src/zzip/lib.h	/^    uint32_t    d_usize;        \/* uncompressed size *\/$/;"	m	struct:zzip_dir_hdr
da	src/Math/Quadratic.hpp	/^  const double da;$/;"	m	class:Quadratic
dark_border_brush	src/Look/ButtonLook.hpp	/^    Brush light_border_brush, dark_border_brush;$/;"	m	struct:ButtonLook::StateLook
dark_border_pen	src/Look/ButtonLook.hpp	/^    Pen light_border_pen, dark_border_pen;$/;"	m	struct:ButtonLook::StateLook
dat	src/Device/Driver/LX/LXN.hpp	/^    uint16_t time, dat;$/;"	m	struct:LXN::ExtConfig
data	src/Cloud/Sender.hpp	/^  } data;$/;"	m	class:ThermalResponseSender	typeref:struct:ThermalResponseSender::Packet
data	src/Cloud/Sender.hpp	/^  } data;$/;"	m	class:TrafficResponseSender	typeref:struct:TrafficResponseSender::Packet
data	src/Device/Driver/ATR833.cpp	/^  uint8_t data[32];$/;"	m	class:ATRBuffer	file:
data	src/Device/Driver/LX/LXN.hpp	/^    uint16_t data[0];$/;"	m	struct:LXN::BExt
data	src/Device/Driver/LX/LXN.hpp	/^    uint16_t data[0];$/;"	m	struct:LXN::KExt
data	src/Dialogs/Device/CAI302/UnitsEditor.hpp	/^  CAI302::Pilot data;$/;"	m	class:final
data	src/Dialogs/Settings/dlgConfigInfoboxes.cpp	/^  InfoBoxSettings::Panel &data;$/;"	m	class:final	file:
data	src/FLARM/ColorDatabase.hpp	/^  Map data;$/;"	m	class:FlarmColorDatabase
data	src/FLARM/NameDatabase.hpp	/^  Array data;$/;"	m	class:FlarmNameDatabase
data	src/Gauge/FlarmTrafficWindow.hpp	/^  TrafficList data;$/;"	m	class:FlarmTrafficWindow
data	src/InfoBoxes/InfoBoxWindow.hpp	/^  InfoBoxData data;$/;"	m	class:InfoBoxWindow
data	src/Input/InputDefaults.cpp	/^  const TCHAR *data;$/;"	m	struct:flat_gesture_map	file:
data	src/Input/InputParser.cpp	/^  StaticString<256> type, data, label;$/;"	m	struct:EventBuilder	file:
data	src/Language/MOFile.hpp	/^  const uint8_t *data;$/;"	m	class:MOFile
data	src/Operation/ThreadedOperationEnvironment.hpp	/^  Data data;$/;"	m	class:ThreadedOperationEnvironment
data	src/Screen/TerminalWindow.hpp	/^  AllocatedGrid<TCHAR> data;$/;"	m	class:TerminalWindow
data	src/Terrain/HeightMatrix.hpp	/^  AllocatedArray<TerrainHeight> data;$/;"	m	class:HeightMatrix
data	src/Terrain/RasterBuffer.hpp	/^  AllocatedGrid<TerrainHeight> data;$/;"	m	class:RasterBuffer
data	src/Terrain/jasper/jp2/jp2_cod.h	/^	} data;$/;"	m	struct:__anon94	typeref:union:__anon94::__anon95
data	src/Terrain/jasper/jpc/jpc_cs.h	/^	jas_uchar *data;$/;"	m	struct:__anon148
data	src/Terrain/jasper/jpc/jpc_cs.h	/^	jas_uchar *data;$/;"	m	struct:__anon150
data	src/Terrain/jasper/jpc/jpc_cs.h	/^	jas_uchar *data;$/;"	m	struct:__anon154
data	src/Terrain/jasper/jpc/jpc_cs.h	/^	unsigned char *data;$/;"	m	struct:__anon149
data	src/Terrain/jasper/jpc/jpc_dec.h	/^	jas_matrix_t *data;$/;"	m	struct:__anon122
data	src/Terrain/jasper/jpc/jpc_dec.h	/^	jas_matrix_t *data;$/;"	m	struct:__anon124
data	src/Terrain/jasper/jpc/jpc_dec.h	/^	jas_matrix_t *data;$/;"	m	struct:__anon126
data	src/Terrain/jasper/jpc/jpc_dec.h	/^	jas_uchar *data;$/;"	m	struct:__anon116
data	src/Topography/shapelib/mapserver.h	/^    char *data; \/* filename, can be relative or full path *\/$/;"	m	struct:layerObj
data	src/Topography/shapelib/mapserver.h	/^    char *data;$/;"	m	struct:__anon57
data	src/Topography/shapelib/mapserver.h	/^    unsigned char *data;$/;"	m	struct:_autobuffer
data	src/Tracking/SkyLines/Key.cpp	/^  uint8_t data[6];$/;"	m	struct:MacAddress	file:
data	src/Weather/METARParser.cpp	/^  TCHAR *start, *data, *end;$/;"	m	class:METARLine	file:
data	src/io/CSVLine.hpp	/^  const char *data, *end;$/;"	m	class:CSVLine
data	src/system/FileMapping.hpp	/^  const void *data() const {$/;"	f	class:FileMapping
data	src/ui/canvas/custom/LibPNG.cpp	/^  const uint8_t *data;$/;"	m	struct:PNGCallbackContext	file:
data	src/ui/canvas/custom/UncompressedImage.hpp	/^  std::unique_ptr<uint8_t[]> data;$/;"	m	class:UncompressedImage
data	src/ui/canvas/memory/Buffer.hpp	/^  rpointer data;$/;"	m	struct:ConstImageBuffer
data	src/ui/canvas/memory/Buffer.hpp	/^  rpointer data;$/;"	m	struct:WritableImageBuffer
data	src/util/Cache.hxx	/^		Data data;$/;"	m	struct:Cache::Pair
data	src/util/ForeignFifoBuffer.hxx	/^		 capacity(src.capacity), data(src.data) {$/;"	f	class:ForeignFifoBuffer
data	src/util/ForeignFifoBuffer.hxx	/^		:capacity(0), data(n) {}$/;"	f	class:ForeignFifoBuffer
data	src/util/ForeignFifoBuffer.hxx	/^		:capacity(_capacity), data(_data) {}$/;"	f	class:ForeignFifoBuffer
data	src/util/ForeignFifoBuffer.hxx	/^	T *data;$/;"	m	class:ForeignFifoBuffer
data	src/util/Manual.hxx	/^	char data[sizeof(T)];$/;"	m	class:Manual
data	src/util/OverwritingRingBuffer.hpp	/^  T data[size];$/;"	m	class:TrivialOverwritingRingBuffer
data	src/util/StaticFifoBuffer.hxx	/^	T data[size];$/;"	m	class:StaticFifoBuffer
data1	src/ui/event/sdl/Queue.cpp	/^  void *data1, *data2;$/;"	m	struct:UI::MatchCallbackData	file:
data2	src/ui/event/sdl/Queue.cpp	/^  void *data1, *data2;$/;"	m	struct:UI::MatchCallbackData	file:
data_	src/Terrain/jasper/jas_seq.h	/^	jas_seqent_t *data_;$/;"	m	struct:jas_matrix
data_field	src/Form/Edit.hpp	/^  DataField *data_field = nullptr;$/;"	m	class:WndProperty
data_field_key_up	src/Form/DataField/Time.cpp	/^static bool data_field_key_up = false;$/;"	v	file:
data_modified	src/Gauge/FlarmTrafficWindow.hpp	/^  Validity data_modified;$/;"	m	class:FlarmTrafficWindow
data_path	src/LocalPath.cpp	/^static AllocatedPath data_path = AllocatedPath(nullptr);$/;"	v	file:
datafield	src/Form/DataField/File.cpp	/^  FileDataField &datafield;$/;"	m	class:FileVisitor	file:
datafield_key_up	src/Form/DataField/Integer.cpp	/^static bool datafield_key_up = false;$/;"	v	file:
datalen	src/Terrain/jasper/jp2/jp2_cod.h	/^	uint_fast32_t datalen;$/;"	m	struct:__anon94
dataoffset	src/zzip/file.h	/^    zzip_off_t dataoffset;$/;"	m	struct:zzip_file
datapattern	src/Topography/shapelib/mapserver.h	/^    char *datapattern, *templatepattern; \/* depricated, use VALIDATION ... END block instead *\/$/;"	m	struct:mapObj
datasize_	src/Terrain/jasper/jas_seq.h	/^	int_fast32_t datasize_;$/;"	m	struct:jas_matrix
date	src/Device/Driver/IMI/Protocol/Types.hpp	/^    IMIDATETIMESEC date;$/;"	m	struct:IMI::TDeclarationHeader
date	src/Device/Driver/LX/Convert.cpp	/^  char date[7];$/;"	m	struct:Context	file:
date	src/Device/Driver/LX/LXN.hpp	/^    const struct Date *date;$/;"	m	union:LXN::Packet	typeref:struct:LXN::Packet::Date
date	src/Device/Driver/LX/Protocol.hpp	/^    char date[9];$/;"	m	struct:LX::FlightInfo
date	src/FlightInfo.hpp	/^  BrokenDate date;$/;"	m	struct:FlightInfo
date	src/zzip/format.h	/^    zzip_byte_t   date[2];$/;"	m	struct:zzip_dostime
date_time	src/Tracking/TrackingGlue.hpp	/^  BrokenDateTime date_time;$/;"	m	class:final
date_time_local	src/NMEA/Derived.hpp	/^  BrokenDateTime date_time_local;$/;"	m	struct:DerivedInfo
date_time_utc	src/Logger/LoggerImpl.hpp	/^    BrokenDateTime date_time_utc;$/;"	m	struct:LoggerImpl::PreTakeoffBuffer
date_time_utc	src/NMEA/Info.hpp	/^  BrokenDateTime date_time_utc;$/;"	m	struct:NMEAInfo
datetime	src/IGC/IGCDeclaration.hpp	/^  BrokenDateTime datetime;$/;"	m	struct:IGCDeclarationHeader
day	src/Device/Driver/CAI302/Protocol.hpp	/^    uint8_t year, month, day, hour, minute, second;$/;"	m	struct:CAI302::DateTime
day	src/Device/Driver/LX/LXN.hpp	/^    uint8_t day, month, year;$/;"	m	struct:LXN::Task
day	src/Device/Driver/LX/LXN.hpp	/^    uint8_t day, month;$/;"	m	struct:LXN::Date
day	src/time/BrokenDate.hpp	/^  uint8_t day;$/;"	m	struct:BrokenDate
day2	src/Device/Driver/LX/LXN.hpp	/^    uint8_t day2, month2, year2;$/;"	m	struct:LXN::Task
day_length	src/Math/SunEphemeris.hpp	/^    double day_length, morning_twilight, evening_twilight;$/;"	m	struct:SunEphemeris::Result
day_of_month	src/Weather/ParsedMETAR.hpp	/^  uint8_t day_of_month;$/;"	m	struct:ParsedMETAR
day_of_week	src/time/BrokenDate.hpp	/^  int8_t day_of_week;$/;"	m	struct:BrokenDate
dayinput	src/Device/Driver/LX/Protocol.hpp	/^    uint8_t dayinput;$/;"	m	struct:LX::Declaration
days	src/Engine/Airspace/AirspaceActivity.hpp	/^    Days days;$/;"	m	union:AirspaceActivity::__anon167
days_of_operation	src/Airspace/AirspaceParser.cpp	/^  AirspaceActivity days_of_operation;$/;"	m	struct:TempAirspaceType	file:
days_of_operation	src/Engine/Airspace/AbstractAirspace.hpp	/^  AirspaceActivity days_of_operation;$/;"	m	class:AbstractAirspace
dayuser	src/Device/Driver/LX/Protocol.hpp	/^    uint8_t dayuser;$/;"	m	struct:LX::Declaration
db1Day	src/Device/Driver/IMI/Protocol/Types.hpp	/^    IMIBYTE db1Day, db1Month;$/;"	m	struct:IMI::TDeclarationHeader
db1Month	src/Device/Driver/IMI/Protocol/Types.hpp	/^    IMIBYTE db1Day, db1Month;$/;"	m	struct:IMI::TDeclarationHeader
db1Year	src/Device/Driver/IMI/Protocol/Types.hpp	/^    IMIWORD db1Year;$/;"	m	struct:IMI::TDeclarationHeader
db2Day	src/Device/Driver/IMI/Protocol/Types.hpp	/^    IMIBYTE db2Day, db2Month;$/;"	m	struct:IMI::TDeclarationHeader
db2Month	src/Device/Driver/IMI/Protocol/Types.hpp	/^    IMIBYTE db2Day, db2Month;$/;"	m	struct:IMI::TDeclarationHeader
db2Year	src/Device/Driver/IMI/Protocol/Types.hpp	/^    IMIWORD db2Year;$/;"	m	struct:IMI::TDeclarationHeader
db_path	src/Cloud/Main.cpp	/^  const AllocatedPath db_path;$/;"	m	class:final	file:
dbcursor	src/Device/Driver/Volkslogger/dbbconv.h	/^  size_t dbcursor;$/;"	m	class:DBB
dblval	src/Topography/shapelib/mapserver.h	/^    double dblval; \/* for map cellsize used by simplify *\/$/;"	m	struct:__anon29
dblval	src/Topography/shapelib/mapserver.h	/^    double dblval;$/;"	m	union:__anon27
dblval2	src/Topography/shapelib/mapserver.h	/^    double dblval2; \/* for data cellsize *\/$/;"	m	struct:__anon29
dc	src/ui/canvas/gdi/Canvas.hpp	/^  HDC dc = nullptr, compatible_dc = nullptr;$/;"	m	class:Canvas
dc	src/ui/canvas/gdi/RootDC.hpp	/^  HDC dc;$/;"	m	class:RootDC
dead_band_enabled	src/Audio/VarioSettings.hpp	/^  bool dead_band_enabled;$/;"	m	struct:VarioSoundSettings
dead_band_enabled	src/Audio/VarioSynthesiser.hpp	/^  bool dead_band_enabled;$/;"	m	class:final
deadband_types	src/Dialogs/Device/Vega/AudioDeadbandParameters.hpp	/^static constexpr StaticEnumChoice deadband_types[] = {$/;"	v
deallocate	src/util/SliceAllocator.hxx	/^		bool deallocate(Item *i) {$/;"	f	struct:SliceAllocator::Area
deallocate	src/util/SliceAllocator.hxx	/^	void deallocate(T *t, const size_type n) {$/;"	f	class:GlobalSliceAllocator
deallocate	src/util/SliceAllocator.hxx	/^	void deallocate(T *t, const size_type n) {$/;"	f	class:SliceAllocator
debounce_time	src/Engine/Airspace/AirspaceWarning.hpp	/^  unsigned debounce_time;$/;"	m	class:AirspaceWarning
debug	src/Dialogs/Device/DeviceListDialog.cpp	/^    bool debug:1;$/;"	m	struct:final::Flags	file:
debug	src/Terrain/jasper/jpc/jpc_dec.h	/^	int debug;$/;"	m	struct:__anon130
debug	src/Topography/shapelib/mapserver.h	/^    int debug;$/;"	m	struct:classObj
debug	src/Topography/shapelib/mapserver.h	/^    int debug;$/;"	m	struct:layerObj
debug	src/Topography/shapelib/mapserver.h	/^    int debug;$/;"	m	struct:mapObj
debugInfoObj	src/Topography/shapelib/maperror.h	/^  } debugInfoObj;$/;"	t	typeref:struct:debug_info_obj
debugLevel	src/Topography/shapelib/maperror.h	/^               } debugLevel;$/;"	t	typeref:enum:__anon66
debugMode	src/Topography/shapelib/maperror.h	/^               } debugMode;$/;"	t	typeref:enum:__anon67
debug_button	src/Dialogs/Device/DeviceListDialog.cpp	/^  Button *debug_button;$/;"	m	class:final	file:
debug_info_obj	src/Topography/shapelib/maperror.h	/^  typedef struct debug_info_obj {$/;"	s
debug_mode	src/Topography/shapelib/maperror.h	/^    debugMode   debug_mode;$/;"	m	struct:debug_info_obj
dec_clnpass	src/Terrain/jasper/jpc/jpc_t1dec.c	/^static int dec_clnpass(jpc_mqdec_t *mqdec, unsigned bitpos, enum jpc_tsfb_orient orient,$/;"	f	file:
dec_rawrefpass	src/Terrain/jasper/jpc/jpc_t1dec.c	/^static int dec_rawrefpass(jpc_bitstream_t *in, unsigned bitpos,$/;"	f	file:
dec_rawsigpass	src/Terrain/jasper/jpc/jpc_t1dec.c	/^static int dec_rawsigpass(jpc_bitstream_t *in, unsigned bitpos, bool vcausalflag,$/;"	f	file:
dec_refpass	src/Terrain/jasper/jpc/jpc_t1dec.c	/^static int dec_refpass(jpc_mqdec_t *mqdec, unsigned bitpos,$/;"	f	file:
dec_sigpass	src/Terrain/jasper/jpc/jpc_t1dec.c	/^static int dec_sigpass(jpc_mqdec_t *mqdec, unsigned bitpos, enum jpc_tsfb_orient orient,$/;"	f	file:
decl	src/Device/Driver/IMI/Protocol/Types.hpp	/^    TDeclaration decl;$/;"	m	struct:IMI::Flight
declaration	src/Logger/ExternalLogger.cpp	/^  const struct Declaration &declaration;$/;"	m	class:DeclareJob	typeref:struct:DeclareJob::Declaration	file:
decode	src/Terrain/jasper/jas_image.h	/^	jas_image_t *(*decode)(jas_stream_t *in, const char *opts);$/;"	m	struct:__anon103
decoded	src/Weather/METAR.hpp	/^  ContentString decoded;$/;"	m	struct:METAR
decopts	src/Terrain/jasper/jpc/jpc_dec.c	/^static const jas_taginfo_t decopts[] = {$/;"	v	file:
default_approximation_scale	src/Topography/shapelib/mapserver.h	/^    double default_approximation_scale;$/;"	m	struct:rendererVTableObj
default_brush	src/Look/FlarmTrafficLook.hpp	/^  Brush default_brush;$/;"	m	struct:FlarmTrafficLook
default_color	src/Look/FlarmTrafficLook.hpp	/^  Color default_color;$/;"	m	struct:FlarmTrafficLook
default_io	src/zzip/plugin.c	/^static const struct zzip_plugin_io default_io = {$/;"	v	typeref:struct:zzip_plugin_io	file:
default_io_read	src/zzip/plugin.c	/^default_io_read(int fd, void *buf, zzip_size_t len)$/;"	f	file:
default_io_write	src/zzip/plugin.c	/^default_io_write(int fd, const void *buf, zzip_size_t len)$/;"	f	file:
default_pen	src/Look/FlarmTrafficLook.hpp	/^  Pen default_pen;$/;"	m	struct:FlarmTrafficLook
default_status_messages	src/StatusMessage.cpp	/^static constexpr StatusMessage default_status_messages[] = {$/;"	v	file:
default_task_path	src/Task/DefaultTask.hpp	32;"	d
default_transform_mode	src/Topography/shapelib/mapserver.h	/^    enum MS_TRANSFORM_MODE default_transform_mode;$/;"	m	struct:rendererVTableObj	typeref:enum:rendererVTableObj::MS_TRANSFORM_MODE
defaultpchg	src/Terrain/jasper/jpc/jpc_t2cod.h	/^	jpc_pchg_t defaultpchg;$/;"	m	struct:__anon115
defer_process	src/event/net/cares/Channel.hxx	/^	DeferEvent defer_process;$/;"	m	class:Cares::Channel
defer_read_info	src/net/http/Global.hxx	/^	DeferEvent defer_read_info;$/;"	m	class:final
defined	src/thread/Thread.hpp	/^  Thread(const char *_name=nullptr) noexcept:name(_name), defined(false) {$/;"	f	class:Thread
defined	src/thread/Thread.hpp	/^  bool defined;$/;"	m	class:Thread
defresolution	src/Topography/shapelib/mapserver.h	/^    double defresolution; \/* default resolution: used for calculate the scalefactor *\/$/;"	m	struct:mapObj
degradation_factor	src/Computer/Settings.hpp	/^  double degradation_factor;$/;"	m	struct:PolarSettings
degrees	src/Device/Driver/IMI/Protocol/Conversion.hpp	/^        IMIDWORD degrees :8;$/;"	m	struct:IMI::AngleConverter::__anon161::__anon162
degrees	src/Math/Angle.hpp	/^    unsigned degrees, minutes, seconds;$/;"	m	struct:Angle::DMS
deinitSurface	src/Android/NativeView.hpp	/^  void deinitSurface() {$/;"	f	class:NativeView
deinit_surface_method	src/Android/NativeView.cpp	/^jmethodID NativeView::init_surface_method, NativeView::deinit_surface_method;$/;"	m	class:NativeView	file:
deinit_surface_method	src/Android/NativeView.hpp	/^  static jmethodID init_surface_method, deinit_surface_method;$/;"	m	class:NativeView
delay	src/RateLimiter.cpp	/^  :period(_period - _delay), delay(_delay)$/;"	f
delay	src/RateLimiter.hpp	/^  std::chrono::steady_clock::duration period, delay;$/;"	m	class:RateLimiter
delay	src/StatusMessage.hpp	/^  std::chrono::steady_clock::duration delay;$/;"	m	struct:StatusMessage
delay	src/thread/WorkerThread.hpp	/^  const std::chrono::steady_clock::duration period_min, idle_min, delay;$/;"	m	class:WorkerThread
delay	src/ui/event/DelayedNotify.hpp	/^  const std::chrono::steady_clock::duration delay;$/;"	m	class:UI::final
delete_button	src/Dialogs/Plane/PlaneListDialog.cpp	/^  Button *edit_button, *delete_button, *load_button;$/;"	m	class:final	file:
delete_button	src/Dialogs/ProfileListDialog.cpp	/^  Button *copy_button, *delete_button;$/;"	m	class:final	file:
delete_button	src/Dialogs/Settings/Panels/PagesConfigPanel.cpp	/^  Button *add_button, *delete_button;$/;"	m	class:PageListWidget	file:
delete_button	src/Dialogs/Waypoint/Manager.cpp	/^  Button *new_button, *edit_button, *save_button, *delete_button;$/;"	m	class:final	file:
delta	src/Engine/Task/Unordered/AlternateTask.hpp	/^      :AlternatePoint(std::move(_waypoint), _solution), delta(_delta) {}$/;"	f	struct:final::Divert
delta	src/Engine/Task/Unordered/AlternateTask.hpp	/^    double delta;$/;"	m	struct:final::Divert
delta_distance	src/Engine/Trace/Trace.hpp	/^    unsigned delta_distance;$/;"	m	struct:Trace::TraceDelta
delta_list	src/Engine/Trace/Trace.hpp	/^  DeltaList delta_list;$/;"	m	class:Trace
delta_t	src/Dialogs/Task/TargetDialog.cpp	/^    PixelRect range, radial, ete, delta_t, speed_remaining, speed_achieved;$/;"	m	struct:TargetWidget::Layout	file:
delta_t	src/Dialogs/Task/TargetDialog.cpp	/^  WndProperty range, radial, ete, delta_t, speed_remaining, speed_achieved;$/;"	m	class:TargetWidget	file:
delta_time	src/Computer/AverageVarioComputer.hpp	/^  DeltaTime delta_time;$/;"	m	class:AverageVarioComputer
delta_time	src/Computer/FlyingComputer.hpp	/^  DeltaTime delta_time;$/;"	m	class:FlyingComputer
delta_time	src/Computer/GlideComputerAirData.hpp	/^  DeltaTime delta_time;$/;"	m	class:GlideComputerAirData
delta_time	src/Computer/GroundSpeedComputer.hpp	/^  DeltaTime delta_time;$/;"	m	class:GroundSpeedComputer
delta_time	src/Computer/WarningComputer.hpp	/^  DeltaTime delta_time;$/;"	m	class:WarningComputer
delta_time	src/Computer/WaveComputer.hpp	/^  DeltaTime delta_time;$/;"	m	class:WaveComputer
delta_x	src/Terrain/ScanLine.cpp	/^  int delta_x, delta_y;$/;"	m	struct:GridRay	file:
delta_y	src/Terrain/ScanLine.cpp	/^  int delta_x, delta_y;$/;"	m	struct:GridRay	file:
demo	src/Dialogs/Device/Vega/VegaConfigurationDialog.cpp	/^    PixelRect demo, save;$/;"	m	struct:final::Layout	file:
demo_button	src/Dialogs/Device/Vega/VegaConfigurationDialog.cpp	/^  Button demo_button, save_button;$/;"	m	class:final	file:
dendlatitude	src/Topography/shapelib/mapserver.h	/^    double    dendlatitude;$/;"	m	struct:__anon49
dendlongitude	src/Topography/shapelib/mapserver.h	/^    double    dendlongitude;$/;"	m	struct:__anon49
denom	src/Math/Quadratic.hpp	/^  const double denom;$/;"	m	class:Quadratic
depth	src/Engine/Route/FlatTriangleFanTree.hpp	/^    :depth(_depth) {}$/;"	f	class:FlatTriangleFanTree
depth	src/Engine/Route/FlatTriangleFanTree.hpp	/^  const unsigned char depth;$/;"	m	class:FlatTriangleFanTree
desc	src/Terrain/jasper/jas_image.h	/^	char *desc;$/;"	m	struct:__anon104
descent_rate	src/Engine/Airspace/AirspaceAircraftPerformance.hpp	/^  double descent_rate;$/;"	m	class:AirspaceAircraftPerformance
description	src/InfoBoxes/Content/Factory.cpp	/^  const TCHAR *description;$/;"	m	struct:MetaData	file:
dest_counter	src/Terrain/RasterBuffer.cpp	/^  unsigned dest_increment, dest_counter;$/;"	m	class:PixelIterator	file:
dest_increment	src/Terrain/RasterBuffer.cpp	/^  unsigned dest_increment, dest_counter;$/;"	m	class:PixelIterator	file:
destination	src/Engine/Task/Points/TaskLeg.hpp	/^  OrderedTaskPoint& destination;$/;"	m	class:TaskLeg
destination	src/Engine/Task/Unordered/AlternateTask.hpp	/^  GeoPoint destination;$/;"	m	class:final
destination	src/Geo/Memento/DistanceMemento.hpp	/^  mutable GeoPoint destination;$/;"	m	class:DistanceMemento
destination	src/Geo/Memento/GeoVectorMemento.hpp	/^  mutable GeoPoint destination;$/;"	m	class:GeoVectorMemento
destination_last	src/Engine/Route/RoutePlanner.hpp	/^  AFlatGeoPoint destination_last;$/;"	m	class:RoutePlanner
destroy	src/Terrain/jasper/jp2/jp2_cod.h	/^	void (*destroy)(jp2_box_t *box);$/;"	m	struct:jp2_boxops_s
destroy	src/util/SliceAllocator.hxx	/^	void destroy(T *t) {$/;"	f	class:GlobalSliceAllocator
destroy	src/util/SliceAllocator.hxx	/^	void destroy(T *t) {$/;"	f	class:SliceAllocator
destroyTreeNode	src/Topography/shapelib/maptree.c	/^static void destroyTreeNode(treeNodeObj *node)$/;"	f	file:
destroyparms	src/Terrain/jasper/jpc/jpc_cs.h	/^	void (*destroyparms)(jpc_ms_t *ms);$/;"	m	struct:jpc_msops_s
details	src/Engine/Waypoint/Waypoint.hpp	/^  tstring details;$/;"	m	struct:Waypoint
details_button	src/Dialogs/MapItemListDialog.cpp	/^  Button *settings_button, *details_button, *cancel_button, *goto_button;$/;"	m	class:final	file:
details_button	src/Dialogs/Task/AlternatesListDialog.cpp	/^  Button *details_button, *cancel_button, *goto_button;$/;"	m	class:final	file:
details_button	src/Dialogs/Weather/NOAAList.cpp	/^  Button *details_button, *add_button, *update_button, *remove_button;$/;"	m	class:final	file:
details_button	src/Dialogs/dlgAnalysis.cpp	/^    PixelRect details_button, previous_button, next_button, close_button;$/;"	m	struct:final::Layout	file:
details_button	src/Dialogs/dlgAnalysis.cpp	/^  Button details_button, previous_button, next_button, close_button;$/;"	m	class:final	file:
details_button	src/Gauge/BigTrafficWidget.cpp	/^  Button details_button;$/;"	m	struct:TrafficWidget::Windows	file:
details_panel	src/Dialogs/Waypoint/dlgWaypointDetails.cpp	/^  PanelControl details_panel;$/;"	m	class:final	file:
details_text	src/Dialogs/Waypoint/dlgWaypointDetails.cpp	/^    PixelRect details_text;$/;"	m	struct:final::Layout	file:
details_text	src/Dialogs/Waypoint/dlgWaypointDetails.cpp	/^  LargeTextWindow details_text;$/;"	m	class:final	file:
detected	src/Device/Driver/Vega/Internal.hpp	/^  bool detected;$/;"	m	class:VegaDevice
detected_x_dpi	src/Hardware/DisplayDPI.cpp	/^static unsigned detected_x_dpi = 0, detected_y_dpi = 0;$/;"	v	file:
detected_y_dpi	src/Hardware/DisplayDPI.cpp	/^static unsigned detected_x_dpi = 0, detected_y_dpi = 0;$/;"	v	file:
detour_cost_markers_enabled	src/MapSettings.hpp	/^  bool detour_cost_markers_enabled;$/;"	m	struct:MapSettings
devInitOne	src/Device/device.cpp	/^devInitOne(DeviceDescriptor &device, const DeviceConfig &config)$/;"	f	file:
devRestart	src/Device/device.cpp	/^devRestart()$/;"	f
devShutdown	src/Device/device.cpp	/^devShutdown()$/;"	f
devStartup	src/Device/device.cpp	/^devStartup()$/;"	f
devVarioFindVega	src/Device/device.cpp	/^devVarioFindVega()$/;"	f
device	src/Audio/SDLPCMPlayer.hpp	/^  SDL_AudioDeviceID device = -1;$/;"	m	class:SDLPCMPlayer
device	src/Device/Descriptor.cpp	/^  DeviceDescriptor &device;$/;"	m	class:final	file:
device	src/Device/Descriptor.cpp	/^  DeviceDescriptor &device;$/;"	m	struct:ScopeReturnDevice	file:
device	src/Device/Descriptor.hpp	/^  Device *device;$/;"	m	class:final
device	src/Device/Driver/IMI/Protocol/Types.hpp	/^    IMIBYTE device;$/;"	m	struct:IMI::TDeviceInfo
device	src/Device/Driver/IMI/Protocol/Types.hpp	/^    IMIBYTE id, device;$/;"	m	struct:IMI::TDeclarationHeader
device	src/Dialogs/Device/BlueFly/BlueFlyConfigurationDialog.cpp	/^  BlueFlyDevice &device;$/;"	m	class:final	file:
device	src/Dialogs/Device/CAI302/WaypointUploader.hpp	/^  CAI302Device &device;$/;"	m	class:CAI302WaypointUploader
device	src/Dialogs/Device/FLARM/ConfigWidget.hpp	/^  FlarmDevice &device;$/;"	m	class:final
device	src/Dialogs/Device/LX/ManageLX16xxDialog.cpp	/^  gcc_unused_field LXDevice &device;$/;"	m	class:ManageLX16xxWidget	file:
device	src/Dialogs/Device/LX/ManageNanoDialog.cpp	/^  LXDevice &device;$/;"	m	class:final	file:
device	src/Dialogs/Device/LX/ManageV7Dialog.cpp	/^  LXDevice &device;$/;"	m	class:final	file:
device	src/Dialogs/Device/LX/NanoConfigWidget.hpp	/^  LXDevice &device;$/;"	m	class:final
device	src/Dialogs/Device/LX/V7ConfigWidget.hpp	/^  LXDevice &device;$/;"	m	class:final
device	src/Dialogs/Device/ManageCAI302Dialog.cpp	/^  CAI302Device &device;$/;"	m	class:final	file:
device	src/Dialogs/Device/ManageFlarmDialog.cpp	/^  FlarmDevice &device;$/;"	m	class:final	file:
device	src/Dialogs/Device/PortMonitor.cpp	/^  DeviceDescriptor &device;$/;"	m	class:final	file:
device	src/Dialogs/Device/Vega/VegaConfigurationDialog.cpp	/^static VegaDevice *device;$/;"	v	file:
device	src/Dialogs/Device/Vega/VegaParametersWidget.hpp	/^  VegaDevice &device;$/;"	m	class:VegaParametersWidget
device	src/Logger/ExternalLogger.cpp	/^  DeviceDescriptor &device;$/;"	m	class:DeclareJob	file:
device	src/Logger/ExternalLogger.cpp	/^  DeviceDescriptor &device;$/;"	m	class:DownloadFlightJob	file:
device	src/Logger/ExternalLogger.cpp	/^  DeviceDescriptor &device;$/;"	m	class:ReadFlightListJob	file:
device	src/NMEA/Info.hpp	/^  DeviceInfo device;$/;"	m	struct:NMEAInfo
device	src/Replay/NmeaReplay.hpp	/^  Device *device;$/;"	m	class:NmeaReplay
device	src/Topography/shapelib/mapserver.h	/^    void *device; \/* for supporting direct rendering onto a device context *\/$/;"	m	struct:__anon32
device_blackboard	src/Components.cpp	/^DeviceBlackboard *device_blackboard;$/;"	v
device_blackboard	src/MergeThread.hpp	/^  DeviceBlackboard &device_blackboard;$/;"	m	class:final
devices	src/Blackboard/DeviceBlackboard.hpp	/^  MultipleDevices *devices = nullptr;$/;"	m	class:DeviceBlackboard
devices	src/Components.cpp	/^MultipleDevices *devices;$/;"	v
devices	src/Device/Dispatcher.hpp	/^  MultipleDevices &devices;$/;"	m	class:final
devices	src/Device/Driver/IMI/Protocol/IGC.cpp	/^static const IMI::IMICHAR *const devices[] = {$/;"	m	class:IMI	file:
devices	src/Device/MultipleDevices.hpp	/^  std::array<DeviceDescriptor *, NUMDEV> devices;$/;"	m	class:final
devices	src/SystemSettings.hpp	/^  std::array<DeviceConfig, NUMDEV> devices;$/;"	m	struct:SystemSettings
dew_point	src/Weather/ParsedMETAR.hpp	/^  double temperature, dew_point;$/;"	m	struct:ParsedMETAR
dewpoint	src/Atmosphere/CuSonde.hpp	/^    Temperature dewpoint;$/;"	m	struct:CuSonde::Level
dewpoint_empty	src/Atmosphere/CuSonde.hpp	/^    bool dewpoint_empty() const {$/;"	f	struct:CuSonde::Level
df	src/Dialogs/Settings/Panels/InterfaceConfigPanel.cpp	/^  DataFieldEnum &df;$/;"	m	class:LanguageFileVisitor	file:
df	src/Dialogs/StartupDialog.cpp	/^  DataField *const df;$/;"	m	class:final	file:
df	src/Engine/Task/Computer/IncrementalSpeedComputer.hpp	/^  DiffFilter df;$/;"	m	class:IncrementalSpeedComputer
df	src/Engine/Task/Computer/TaskVarioComputer.hpp	/^  DiffFilter df;$/;"	m	class:TaskVarioComputer
df_max	src/Engine/Contest/Solvers/TriangleContest.hpp	/^    unsigned df_min, df_max;$/;"	m	struct:TriangleContest::CandidateSet
df_min	src/Engine/Contest/Solvers/TriangleContest.hpp	/^    unsigned df_min, df_max;$/;"	m	struct:TriangleContest::CandidateSet
dh	src/Engine/ThermalBand/ThermalBand.hpp	/^  double dh;$/;"	m	class:ThermalBand
dhv_xc_free	src/Engine/Contest/ContestManager.hpp	/^  XContestFree dhv_xc_free;$/;"	m	class:ContestManager
dhv_xc_triangle	src/Engine/Contest/ContestManager.hpp	/^  XContestTriangle dhv_xc_triangle;$/;"	m	class:ContestManager
dialog	src/Dialogs/Airspace/AirspaceList.cpp	/^    :RowFormWidget(look), dialog(_dialog) {}$/;"	f	class:final
dialog	src/Dialogs/Airspace/AirspaceList.cpp	/^  WndForm &dialog;$/;"	m	class:final	file:
dialog	src/Dialogs/Airspace/dlgAirspaceDetails.cpp	/^  WndForm *dialog;$/;"	m	class:final	file:
dialog	src/Dialogs/Airspace/dlgAirspaceWarnings.cpp	/^static WndForm *dialog = NULL;$/;"	v	file:
dialog	src/Dialogs/Device/BlueFly/BlueFlyConfigurationDialog.cpp	/^  WidgetDialog &dialog;$/;"	m	class:final	file:
dialog	src/Dialogs/Device/ScanBluetoothLeDialog.cpp	/^  WidgetDialog &dialog;$/;"	m	class:final	file:
dialog	src/Dialogs/Device/Vega/VegaConfigurationDialog.cpp	/^  WidgetDialog &dialog;$/;"	m	class:final	file:
dialog	src/Dialogs/DownloadFilePicker.cpp	/^  ProgressDialog &dialog;$/;"	m	class:final	file:
dialog	src/Dialogs/DownloadFilePicker.cpp	/^  WidgetDialog &dialog;$/;"	m	class:final	file:
dialog	src/Dialogs/ListPicker.cpp	/^  WndForm &dialog;$/;"	m	class:ListPickerWidget	file:
dialog	src/Dialogs/Plane/PlaneDetailsDialog.cpp	/^  WndForm *dialog;$/;"	m	class:final	file:
dialog	src/Dialogs/Settings/dlgConfigInfoboxes.cpp	/^  WndForm &dialog;$/;"	m	class:final	file:
dialog	src/Dialogs/StartupDialog.cpp	/^    :look(_look), dialog(_dialog) {}$/;"	f	class:final
dialog	src/Dialogs/StartupDialog.cpp	/^  WndForm &dialog;$/;"	m	class:final	file:
dialog	src/Dialogs/Task/Manager/Internal.hpp	/^  WndForm &dialog;$/;"	m	class:final
dialog	src/Dialogs/Task/Manager/TaskActionsPanel.hpp	/^  TaskManagerDialog &dialog;$/;"	m	class:TaskActionsPanel
dialog	src/Dialogs/Task/Manager/TaskClosePanel.hpp	/^  TaskManagerDialog &dialog;$/;"	m	class:final
dialog	src/Dialogs/Task/Manager/TaskEditPanel.cpp	/^  TaskManagerDialog &dialog;$/;"	m	class:TaskEditPanel	file:
dialog	src/Dialogs/Task/Manager/TaskListPanel.cpp	/^  TaskManagerDialog &dialog;$/;"	m	class:final	file:
dialog	src/Dialogs/Task/Manager/TaskManagerDialog.cpp	/^     dialog(_dialog) {}$/;"	f
dialog	src/Dialogs/Task/Manager/TaskPropertiesPanel.hpp	/^  TaskManagerDialog &dialog;$/;"	m	class:final
dialog	src/Dialogs/Task/TargetDialog.cpp	/^  WndForm &dialog;$/;"	m	class:TargetWidget	file:
dialog	src/Dialogs/Task/TaskPointDialog.cpp	/^  WidgetDialog &dialog;$/;"	m	class:final	file:
dialog	src/Dialogs/Traffic/FlarmTrafficDetails.cpp	/^  WndForm &dialog;$/;"	m	class:final	file:
dialog	src/Dialogs/Traffic/TrafficList.cpp	/^  WndForm &dialog;$/;"	m	class:TrafficListButtons	file:
dialog	src/Dialogs/Traffic/TrafficList.cpp	/^  WndForm &dialog;$/;"	m	class:TrafficListWidget	file:
dialog	src/Dialogs/Waypoint/WaypointList.cpp	/^  WndForm &dialog;$/;"	m	class:WaypointListButtons	file:
dialog	src/Dialogs/Waypoint/WaypointList.cpp	/^  WndForm &dialog;$/;"	m	class:final	file:
dialog	src/Dialogs/Waypoint/dlgWaypointDetails.cpp	/^  WidgetDialog &dialog;$/;"	m	class:final	file:
dialog	src/Dialogs/Weather/NOAADetails.cpp	/^  WndForm &dialog;$/;"	m	class:final	file:
dialog	src/Dialogs/dlgAnalysis.cpp	/^  WndForm &dialog;$/;"	m	class:final	file:
dialog	src/Dialogs/dlgQuickMenu.cpp	/^  WndForm &dialog;$/;"	m	class:final	file:
dialog	src/Kobo/KoboMenu.cpp	/^  WndForm &dialog;$/;"	m	class:final	file:
dialog	src/Look/Look.hpp	/^  DialogLook dialog;$/;"	m	struct:Look
dialog	src/UISettings.hpp	/^  DialogSettings dialog;$/;"	m	struct:UISettings
dialog	src/ui/event/windows/Loop.hpp	/^  HWND dialog;$/;"	m	class:UI::DialogEventLoop
dialog_look	src/Dialogs/JobDialog.hpp	/^  const DialogLook &dialog_look;$/;"	m	class:DialogJobRunner
dialog_look	src/Dialogs/MapItemListDialog.cpp	/^  const DialogLook &dialog_look;$/;"	m	class:final	file:
dialog_look	src/Dialogs/Task/AlternatesListDialog.cpp	/^  const DialogLook &dialog_look;$/;"	m	class:final	file:
dialog_settings	src/Kobo/KoboMenu.cpp	/^static DialogSettings dialog_settings;$/;"	v	file:
dialog_state	src/Dialogs/Airspace/AirspaceList.cpp	/^static AirspaceListWidgetState dialog_state;$/;"	v	file:
dialog_state	src/Dialogs/Waypoint/WaypointList.cpp	/^static WaypointListDialogState dialog_state;$/;"	v	file:
dialogs	src/ui/window/SingleWindow.hpp	/^  std::forward_list<WndForm *> dialogs;$/;"	m	class:UI::SingleWindow
difference_type	src/Engine/Trace/Trace.cpp	/^  typedef typename I::difference_type difference_type;$/;"	t	class:PointerIterator	file:
difference_type	src/util/CastIterator.hpp	/^  typedef typename IT::difference_type difference_type;$/;"	t	class:CastIterator
difference_type	src/util/QuadTree.hxx	/^		typedef ptrdiff_t difference_type;$/;"	t	class:const_iterator
difference_type	src/util/QuadTree.hxx	/^		typedef ptrdiff_t difference_type;$/;"	t	class:iterator
dijkstra	src/Engine/PathSolvers/NavDijkstra.hpp	/^  Dijkstra dijkstra;$/;"	m	class:NavDijkstra
dijkstra_max	src/Engine/Task/Ordered/OrderedTask.hpp	/^  std::unique_ptr<TaskDijkstraMax> dijkstra_max;$/;"	m	class:final
dijkstra_min	src/Engine/Task/Ordered/OrderedTask.hpp	/^  std::unique_ptr<TaskDijkstraMin> dijkstra_min;$/;"	m	class:final
dimmed_text_color	src/Look/VarioLook.hpp	/^  Color background_color, text_color, dimmed_text_color;$/;"	m	struct:VarioLook
dincrementlatitude	src/Topography/shapelib/mapserver.h	/^    double    dincrementlatitude;$/;"	m	struct:__anon49
dincrementlongitude	src/Topography/shapelib/mapserver.h	/^    double    dincrementlongitude;$/;"	m	struct:__anon49
dir	src/Device/Port/TTYEnumerator.hpp	/^  DIR *dir;$/;"	m	class:TTYEnumerator
dir	src/Topography/TopographyFile.hpp	/^  zzip_dir *const dir;$/;"	m	class:TopographyFile
dir	src/io/ZipArchive.hpp	/^  struct zzip_dir *dir = nullptr;$/;"	m	class:ZipArchive	typeref:struct:ZipArchive::zzip_dir
dir	src/zzip/file.h	/^    struct zzip_dir* dir; $/;"	m	struct:zzip_file	typeref:struct:zzip_file::zzip_dir
direct	src/Engine/Route/ReachResult.hpp	/^  int direct;$/;"	m	struct:ReachResult
direction	src/Device/Driver/Volkslogger/Database.hpp	/^    uint8_t direction;$/;"	m	struct:Volkslogger::DeclarationWaypoint
direction	src/Dialogs/Airspace/AirspaceList.cpp	/^  unsigned direction;$/;"	m	struct:AirspaceListWidgetState	file:
direction	src/Engine/Airspace/AirspaceSorter.hpp	/^  Angle direction;$/;"	m	struct:AirspaceFilterData
direction	src/Engine/Waypoint/Runway.hpp	/^  int16_t direction;$/;"	m	class:Runway
direction	src/Gauge/ThermalAssistantRenderer.hpp	/^  Angle direction;$/;"	m	class:ThermalAssistantRenderer
direction	src/Waypoint/WaypointFilter.hpp	/^  Angle direction;$/;"	m	struct:WaypointFilter
direction_filter_items	src/Dialogs/Waypoint/WaypointList.cpp	/^static constexpr int direction_filter_items[] = {$/;"	v	file:
direction_index	src/Dialogs/Waypoint/WaypointList.cpp	/^  int direction_index;$/;"	m	struct:WaypointListDialogState	file:
directory_fd	src/io/FileOutputStream.hxx	/^	const FileDescriptor directory_fd;$/;"	m	class:final
dirent	src/zzip/lib.h	/^    struct zzip_dirent dirent;$/;"	m	struct:zzip_dir	typeref:struct:zzip_dir::zzip_dirent
dirsep_basename	src/zzip/file.c	/^dirsep_basename(zzip_char_t* name)$/;"	f	file:
dirsep_strcasecmp	src/zzip/file.c	/^dirsep_strcasecmp(zzip_char_t * s1, zzip_char_t * s2)$/;"	f	file:
dirsep_strcasecmp	src/zzip/file.c	140;"	d	file:
dirty	src/Dialogs/Device/Vega/VegaConfigurationDialog.cpp	/^static bool changed, dirty;$/;"	v	file:
dirty	src/Engine/Route/RoutePlanner.hpp	/^  bool dirty;$/;"	m	class:RoutePlanner
dirty	src/Gauge/GaugeVario.hpp	/^  bool dirty = true;$/;"	m	class:GaugeVario
dirty	src/Terrain/RasterTileCache.hpp	/^  bool dirty;$/;"	m	class:RasterTileCache
dirty	src/ui/canvas/RawBitmap.hpp	/^  mutable bool dirty = true;$/;"	m	class:final
dirty	src/ui/window/BufferWindow.hpp	/^  bool dirty;$/;"	m	class:BufferWindow
disable_button	src/Dialogs/Device/DeviceListDialog.cpp	/^  Button *disable_button;$/;"	m	class:final	file:
disable_button	src/Dialogs/Weather/MapOverlayWidget.cpp	/^  Button *use_button, *disable_button, *update_button;$/;"	m	class:final	file:
disabled	src/Look/ButtonLook.hpp	/^  } disabled;$/;"	m	struct:ButtonLook	typeref:struct:ButtonLook::__anon18
disabled	src/Look/CheckBoxLook.hpp	/^  } standard, focused, pressed, disabled;$/;"	m	struct:CheckBoxLook	typeref:struct:CheckBoxLook::StateLook
dispatcher	src/Device/Descriptor.hpp	/^  PortLineHandler *dispatcher;$/;"	m	class:final
dispatchers	src/Device/MultipleDevices.hpp	/^  std::array<DeviceDispatcher *, NUMDEV> dispatchers;$/;"	m	class:final
display	src/Renderer/AirspaceRendererSettings.hpp	/^  bool display;$/;"	m	struct:AirspaceClassRendererSettings
display	src/UISettings.hpp	/^  DisplaySettings display;$/;"	m	struct:UISettings
display	src/ui/canvas/custom/TopCanvas.hpp	/^  EGLDisplay display;$/;"	m	class:DisplayOrientation
display	src/ui/event/poll/WaylandQueue.hpp	/^  struct wl_display *const display;$/;"	m	class:UI::final
display	src/ui/event/poll/X11Queue.hpp	/^  _XDisplay *const display;$/;"	m	class:UI::X11EventQueue
display_format	src/Form/DataField/Number.hpp	/^  StaticString<32> display_format;$/;"	m	class:NumberDataField
display_ground_track	src/MapSettings.hpp	/^  DisplayGroundTrack display_ground_track;$/;"	m	struct:MapSettings
display_mode	src/UIState.hpp	/^  DisplayMode display_mode;$/;"	m	struct:UIState
display_name	src/Device/Driver.hpp	/^  const TCHAR *display_name;$/;"	m	struct:DeviceRegister
display_name	src/Weather/PCMet/Images.hpp	/^  const TCHAR *display_name;$/;"	m	struct:PCMet::ImageArea
display_name	src/Weather/PCMet/Images.hpp	/^  const TCHAR *display_name;$/;"	m	struct:PCMet::ImageType
display_orientation	src/ui/canvas/opengl/Globals.cpp	/^DisplayOrientation display_orientation;$/;"	m	namespace:OpenGL	file:
display_orientation_list	src/Dialogs/Settings/Panels/LayoutConfigPanel.cpp	/^static constexpr StaticEnumChoice display_orientation_list[] = {$/;"	v	file:
display_parameters	src/Dialogs/Device/Vega/DisplayParameters.hpp	/^VegaParametersWidget::StaticParameter display_parameters[] = {$/;"	v
display_string	src/Form/DataField/ComboList.hpp	/^    tstring display_string;$/;"	m	struct:ComboList::Item
display_string	src/Form/DataField/Enum.hpp	/^    TCHAR *display_string;$/;"	m	class:final::Entry
display_string	src/Form/DataField/Enum.hpp	/^  const TCHAR *display_string;$/;"	m	struct:StaticEnumChoice
display_text_type	src/Renderer/WaypointRendererSettings.hpp	/^  } display_text_type;$/;"	m	struct:WaypointRendererSettings	typeref:class:WaypointRendererSettings::DisplayTextType
distance	src/Airspace/NearestAirspace.hpp	/^  double distance;$/;"	m	class:NearestAirspace
distance	src/Computer/GlideRatioCalculator.hpp	/^    unsigned distance;$/;"	m	struct:GlideRatioCalculator::Record
distance	src/Dialogs/Airspace/AirspaceList.cpp	/^  double distance;$/;"	m	struct:AirspaceListWidgetState	file:
distance	src/Engine/Airspace/AirspaceInterceptSolution.hpp	/^  double distance;$/;"	m	struct:AirspaceInterceptSolution
distance	src/Engine/Airspace/AirspaceSorter.hpp	/^  double distance;$/;"	m	struct:AirspaceFilterData
distance	src/Engine/Contest/ContestResult.hpp	/^  double distance;$/;"	m	struct:ContestResult
distance	src/Engine/Task/Stats/DistanceStat.hpp	/^  double distance;$/;"	m	class:DistanceStat
distance	src/Engine/Task/Stats/WindowStats.hpp	/^  double distance;$/;"	m	struct:WindowStats
distance	src/FLARM/Traffic.hpp	/^  RoughDistance distance;$/;"	m	class:FlarmTraffic::AircraftType
distance	src/Gauge/FlarmTrafficWindow.hpp	/^  double distance;$/;"	m	class:FlarmTrafficWindow
distance	src/Geo/GeoVector.hpp	/^  double distance;$/;"	m	struct:GeoVector
distance	src/Terrain/RasterTile.hpp	/^  unsigned distance;$/;"	m	class:RasterTile
distance	src/Waypoint/WaypointFilter.hpp	/^  double distance;$/;"	m	struct:WaypointFilter
distance_filter_items	src/Dialogs/Waypoint/WaypointList.cpp	/^static constexpr unsigned distance_filter_items[] = {$/;"	v	file:
distance_index	src/Dialogs/Waypoint/WaypointList.cpp	/^  int distance_index;$/;"	m	struct:WaypointListDialogState	file:
distance_max	src/Engine/Task/Stats/TaskStats.hpp	/^  double distance_max;$/;"	m	class:TaskStats
distance_min	src/Engine/Task/Stats/TaskStats.hpp	/^  double distance_min;$/;"	m	class:TaskStats
distance_nominal	src/Engine/Task/Stats/TaskStats.hpp	/^  double distance_nominal;$/;"	m	class:TaskStats
distance_scored	src/Engine/Task/Stats/TaskStats.hpp	/^  double distance_scored;$/;"	m	class:TaskStats
distance_type	src/util/QuadTree.hxx	/^	typedef unsigned distance_type;$/;"	t	class:QuadTree
distance_unit	src/Units/Settings.hpp	/^  Unit distance_unit;$/;"	m	struct:UnitSetting
distinct_zoom	src/PageSettings.hpp	/^  bool distinct_zoom;$/;"	m	struct:PageSettings
dither	src/ui/canvas/custom/TopCanvas.hpp	/^  Dither dither;$/;"	m	class:DisplayOrientation
dlgAirspaceDetails	src/Dialogs/Airspace/dlgAirspaceDetails.cpp	/^dlgAirspaceDetails(const AbstractAirspace &airspace,$/;"	f
dlgAirspacePatternsShowModal	src/Dialogs/Airspace/dlgAirspacePatterns.cpp	/^dlgAirspacePatternsShowModal(const AirspaceLook &look)$/;"	f
dlgAirspaceShowModal	src/Dialogs/Airspace/dlgAirspace.cpp	/^dlgAirspaceShowModal(bool color_mode)$/;"	f
dlgAirspaceWarningVisible	src/Dialogs/Airspace/dlgAirspaceWarnings.cpp	/^dlgAirspaceWarningVisible()$/;"	f
dlgAirspaceWarningsShowModal	src/Dialogs/Airspace/dlgAirspaceWarnings.cpp	/^dlgAirspaceWarningsShowModal(ProtectedAirspaceWarningManager &_warnings,$/;"	f
dlgAlternatesListShowModal	src/Dialogs/Task/AlternatesListDialog.cpp	/^dlgAlternatesListShowModal()$/;"	f
dlgAnalysisShowModal	src/Dialogs/dlgAnalysis.cpp	/^dlgAnalysisShowModal(SingleWindow &parent, const Look &look,$/;"	f
dlgBasicSettingsShowModal	src/Dialogs/Settings/dlgBasicSettings.cpp	/^dlgBasicSettingsShowModal()$/;"	f
dlgChecklistShowModal	src/Dialogs/dlgChecklist.cpp	/^dlgChecklistShowModal()$/;"	f
dlgConfigInfoboxesShowModal	src/Dialogs/Settings/dlgConfigInfoboxes.cpp	/^dlgConfigInfoboxesShowModal(SingleWindow &parent,$/;"	f
dlgConfigWaypointsShowModal	src/Dialogs/Waypoint/Manager.cpp	/^dlgConfigWaypointsShowModal()$/;"	f
dlgConfigurationBlueFlyVarioShowModal	src/Dialogs/Device/BlueFly/BlueFlyConfigurationDialog.cpp	/^dlgConfigurationBlueFlyVarioShowModal(Device &_device)$/;"	f
dlgConfigurationShowModal	src/Dialogs/Settings/dlgConfiguration.cpp	/^void dlgConfigurationShowModal()$/;"	f
dlgConfigurationVarioShowModal	src/Dialogs/Device/Vega/VegaConfigurationDialog.cpp	/^dlgConfigurationVarioShowModal(Device &_device)$/;"	f
dlgCreditsShowModal	src/Dialogs/dlgCredits.cpp	/^dlgCreditsShowModal(UI::SingleWindow &parent)$/;"	f
dlgFlarmTrafficDetailsShowModal	src/Dialogs/Traffic/FlarmTrafficDetails.cpp	/^dlgFlarmTrafficDetailsShowModal(FlarmId id)$/;"	f
dlgInfoBoxAccessShowModeless	src/Dialogs/dlgInfoBoxAccess.cpp	/^dlgInfoBoxAccessShowModeless(const int id, const InfoBoxPanel *panels)$/;"	f
dlgNOAADetailsShowModal	src/Dialogs/Weather/NOAADetails.cpp	/^dlgNOAADetailsShowModal(NOAAStore::iterator iterator)$/;"	f
dlgNOAADetailsShowModal	src/Dialogs/Weather/NOAADetails.cpp	/^dlgNOAADetailsShowModal(unsigned station_index)$/;"	f
dlgPlaneDetailsShowModal	src/Dialogs/Plane/PlaneDetailsDialog.cpp	/^dlgPlaneDetailsShowModal(Plane &_plane)$/;"	f
dlgPlanePolarShowModal	src/Dialogs/Plane/PlanePolarDialog.cpp	/^dlgPlanePolarShowModal(Plane &_plane)$/;"	f
dlgPlanesShowModal	src/Dialogs/Plane/PlaneListDialog.cpp	/^dlgPlanesShowModal()$/;"	f
dlgQuickMenuShowModal	src/Dialogs/dlgQuickMenu.cpp	/^dlgQuickMenuShowModal(UI::SingleWindow &parent)$/;"	f
dlgSimulatorPromptShowModal	src/Dialogs/dlgSimulatorPrompt.cpp	/^dlgSimulatorPromptShowModal()$/;"	f
dlgStartupShowModal	src/Dialogs/StartupDialog.cpp	/^dlgStartupShowModal()$/;"	f
dlgStatusShowModal	src/Dialogs/dlgStatus.cpp	/^dlgStatusShowModal(int start_page)$/;"	f
dlgSwitchesShowModal	src/Dialogs/Device/Vega/SwitchesDialog.cpp	/^dlgSwitchesShowModal()$/;"	f
dlgTargetShowModal	src/Dialogs/Task/TargetDialog.cpp	/^dlgTargetShowModal(int _target_point)$/;"	f
dlgTaskManagerShowModal	src/Dialogs/Task/Manager/TaskManagerDialog.cpp	/^dlgTaskManagerShowModal()$/;"	f
dlgTaskOptionalStarts	src/Dialogs/Task/OptionalStartsDialog.cpp	/^dlgTaskOptionalStarts(OrderedTask &task)$/;"	f
dlgTaskPointShowModal	src/Dialogs/Task/TaskPointDialog.cpp	/^dlgTaskPointShowModal(OrderedTask &task,$/;"	f
dlgTaskPointType	src/Dialogs/Task/MutateTaskPointDialog.cpp	/^dlgTaskPointType(OrderedTask &task, const unsigned index)$/;"	f
dlgTeamCodeShowModal	src/Dialogs/Traffic/TeamCodeDialog.cpp	/^dlgTeamCodeShowModal()$/;"	f
dlgVegaDemoShowModal	src/Dialogs/Device/Vega/VegaDemoDialog.cpp	/^dlgVegaDemoShowModal()$/;"	f
dlgWaypointDetailsShowModal	src/Dialogs/Waypoint/dlgWaypointDetails.cpp	/^dlgWaypointDetailsShowModal(WaypointPtr _waypoint,$/;"	f
dlgWaypointEditShowModal	src/Dialogs/Waypoint/dlgWaypointEdit.cpp	/^dlgWaypointEditShowModal(Waypoint &way_point)$/;"	f
dmst_quad	src/Engine/Contest/ContestManager.hpp	/^  DMStQuad dmst_quad;$/;"	m	class:ContestManager
do_sha256	src/net/http/ToFile.cpp	/^    :out(_out), env(_env), do_sha256(_do_sha256)$/;"	f	class:final
do_sha256	src/net/http/ToFile.cpp	/^  const bool do_sha256;$/;"	m	class:final	file:
do_water	src/Weather/Rasp/RaspStyle.hpp	/^  bool do_water;$/;"	m	struct:RaspStyle
done	src/event/Call.cxx	/^	bool done;$/;"	m	class:final	file:
done	src/net/http/ToBuffer.cpp	/^  bool done = false;$/;"	m	class:final	file:
done	src/net/http/ToFile.cpp	/^  bool done = false;$/;"	m	class:final	file:
dot	src/Topography/shapelib/mapsearch.c	374;"	d	file:
double_click	src/ui/window/TopWindow.hpp	/^  DoubleClick double_click;$/;"	m	class:UI::TopWindow
down	src/Form/Button.hpp	/^  bool dragging, down;$/;"	m	class:Button
down	src/ui/event/poll/linux/Input.hpp	/^  bool down;$/;"	m	class:UI::final
down	src/ui/event/poll/linux/MergeMouse.hpp	/^  bool down = false;$/;"	m	class:UI::final
down_button	src/Dialogs/Task/Manager/TaskEditPanel.cpp	/^  Button *down_button, *up_button;$/;"	m	class:TaskEditPanel	file:
down_index	src/Form/TabDisplay.hpp	/^  unsigned down_index; \/\/ index of tab where mouse down occurred$/;"	m	class:final
down_index	src/Form/TabMenuDisplay.hpp	/^  MenuTabIndex down_index;$/;"	m	class:final
download_button	src/Dialogs/DownloadFilePicker.cpp	/^  Button *download_button;$/;"	m	class:final	file:
download_button	src/Dialogs/FileManager.cpp	/^  Button *download_button, *add_button, *cancel_button, *update_button;$/;"	m	class:ManagedFileListWidget	file:
download_manager	src/net/http/DownloadManager.cpp	/^static AndroidDownloadManager *download_manager;$/;"	v	file:
download_status	src/Dialogs/FileManager.cpp	/^    DownloadStatus download_status;$/;"	m	struct:ManagedFileListWidget::FileItem	file:
downloading	src/Dialogs/FileManager.cpp	/^    bool downloading, failed, out_of_date;$/;"	m	struct:ManagedFileListWidget::FileItem	file:
downloads	src/Dialogs/FileManager.cpp	/^  std::map<std::string, DownloadStatus> downloads;$/;"	m	class:ManagedFileListWidget	file:
drag_last	src/MapWindow/TargetMapWindow.hpp	/^  PixelPoint drag_start, drag_last;$/;"	m	class:TargetMapWindow
drag_last	src/UIUtil/GestureManager.hpp	/^  PixelPoint drag_last;$/;"	m	class:GestureManager
drag_mode	src/Form/List.hpp	/^  DragMode drag_mode = DragMode::NONE;$/;"	m	class:ListControl
drag_mode	src/MapWindow/GlueMapWindow.hpp	/^  } drag_mode = DRAG_NONE;$/;"	m	class:GlueMapWindow	typeref:enum:GlueMapWindow::DragMode
drag_mode	src/MapWindow/TargetMapWindow.hpp	/^  } drag_mode;$/;"	m	class:TargetMapWindow	typeref:enum:TargetMapWindow::DragMode
drag_off_button	src/Form/TabDisplay.hpp	/^  bool drag_off_button; \/\/ set by mouse_move$/;"	m	class:final
drag_off_button	src/Form/TabMenuDisplay.hpp	/^  bool drag_off_button; \/\/ set by mouse_move$/;"	m	class:final
drag_offset	src/Form/ScrollBar.hpp	/^  int drag_offset;$/;"	m	class:ScrollBar
drag_projection	src/MapWindow/GlueMapWindow.hpp	/^  Projection drag_projection;$/;"	m	class:GlueMapWindow
drag_start	src/MapWindow/GlueMapWindow.hpp	/^  PixelPoint drag_start;$/;"	m	class:GlueMapWindow
drag_start	src/MapWindow/TargetMapWindow.hpp	/^  PixelPoint drag_start, drag_last;$/;"	m	class:TargetMapWindow
drag_start_geopoint	src/MapWindow/GlueMapWindow.hpp	/^  GeoPoint drag_start_geopoint;$/;"	m	class:GlueMapWindow
drag_y	src/Form/List.hpp	/^  int drag_y;$/;"	m	class:ListControl
drag_y_window	src/Form/List.hpp	/^  int drag_y_window;$/;"	m	class:ListControl
dragging	src/Dialogs/dlgAnalysis.cpp	/^  bool dragging;$/;"	m	class:ChartControl	file:
dragging	src/Form/Button.hpp	/^  bool dragging, down;$/;"	m	class:Button
dragging	src/Form/CheckBox.hpp	/^  bool checked, dragging, pressed;$/;"	m	class:CheckBoxControl
dragging	src/Form/Edit.hpp	/^  bool dragging = false, pressed = false;$/;"	m	class:WndProperty
dragging	src/Form/Form.hpp	/^  bool dragging = false;$/;"	m	class:WndForm
dragging	src/Form/ScrollBar.hpp	/^  bool dragging;$/;"	m	class:ScrollBar
dragging	src/Form/TabDisplay.hpp	/^  bool dragging; \/\/ tracks that mouse is down and captured$/;"	m	class:final
dragging	src/Form/TabMenuDisplay.hpp	/^  bool dragging; \/\/ tracks that mouse is down and captured$/;"	m	class:final
dragging	src/Gauge/BigThermalAssistantWindow.hpp	/^  bool dragging;$/;"	m	class:BigThermalAssistantWindow
dragging	src/Gauge/BigTrafficWidget.cpp	/^  bool enable_auto_zoom, dragging;$/;"	m	class:FlarmTrafficControl	file:
dragging	src/Gauge/GaugeFLARM.cpp	/^  bool dragging, pressed;$/;"	m	class:SmallTrafficWindow	file:
dragging	src/Gauge/GaugeThermalAssistant.cpp	/^  bool dragging, pressed;$/;"	m	class:GaugeThermalAssistantWindow	file:
dragging	src/InfoBoxes/InfoBoxWindow.hpp	/^  bool dragging = false;$/;"	m	class:InfoBoxWindow
dragging	src/MainWindow.hpp	/^  bool dragging = false;$/;"	m	class:MainWindow
drain	src/Android/PortBridge.hpp	/^  bool drain(JNIEnv *env) {$/;"	f	class:PortBridge
drain_method	src/Android/PortBridge.cpp	/^jmethodID PortBridge::drain_method;$/;"	m	class:PortBridge	file:
drain_method	src/Android/PortBridge.hpp	/^  static jmethodID drain_method;$/;"	m	class:PortBridge
draw	src/Gauge/LogoView.cpp	/^LogoView::draw(Canvas &canvas, const PixelRect &rc)$/;"	f	class:LogoView
drawButtons	src/Input/InputEvents.cpp	/^InputEvents::drawButtons(Mode mode, bool full)$/;"	f	class:InputEvents
draw_bearing	src/Renderer/TaskPointRenderer.hpp	/^  const bool draw_bearing;$/;"	m	class:TaskPointRenderer
draw_scale	src/Projection/Projection.hpp	/^  double draw_scale;$/;"	m	class:Projection
draw_suspended	src/MainWindow.hpp	/^  bool draw_suspended = false;$/;"	m	class:MainWindow
draw_sw	src/MapWindow/MapWindow.hpp	/^  ScreenStopWatch draw_sw;$/;"	m	class:MapWindow
draw_thread	src/Components.cpp	/^DrawThread *draw_thread;$/;"	v
draw_thread_handle	src/Components.cpp	/^static ThreadHandle draw_thread_handle;$/;"	v	file:
dri_fd	src/ui/canvas/egl/TopCanvas.cpp	/^  int dri_fd;$/;"	m	struct:drm_fb	file:
drift_factor	src/Engine/Trace/Point.hpp	/^  uint16_t drift_factor;$/;"	m	class:TracePoint
driver	src/Device/Descriptor.hpp	/^  const DeviceRegister *driver;$/;"	m	class:final
driver	src/Topography/shapelib/mapserver.h	/^    char *driver;$/;"	m	struct:__anon32
driver2_name	src/Device/Config.hpp	/^  StaticString<32> driver2_name;$/;"	m	struct:DeviceConfig
driver_list	src/Device/Register.cpp	/^static const struct DeviceRegister *const driver_list[] = {$/;"	v	file:
driver_name	src/Device/Config.hpp	/^  StaticString<32> driver_name;$/;"	m	struct:DeviceConfig
drm_fb	src/ui/canvas/egl/TopCanvas.cpp	/^struct drm_fb {$/;"	s	file:
droidsoar_v2	src/Device/Descriptor.hpp	/^  BMP085Device *droidsoar_v2;$/;"	m	class:final
dry_mass	src/Engine/GlideSolvers/GlidePolar.hpp	/^  double dry_mass;$/;"	m	class:GlidePolar
dry_mass	src/Plane/Plane.hpp	/^  double dry_mass;$/;"	m	struct:Plane
dry_temperature	src/Atmosphere/CuSonde.hpp	/^    Temperature dry_temperature;$/;"	m	struct:CuSonde::Level
dsanzahl	src/Device/Driver/Volkslogger/dbbconv.h	/^    unsigned dsanzahl;$/;"	m	struct:DBB::HEADER
dsfirst	src/Device/Driver/Volkslogger/dbbconv.h	/^    unsigned dsfirst, dslast;$/;"	m	struct:DBB::HEADER
dslaenge	src/Device/Driver/Volkslogger/Database.hpp	/^    uint8_t dslaenge;$/;"	m	struct:Volkslogger::TableHeader
dslaenge	src/Device/Driver/Volkslogger/dbbconv.h	/^    unsigned dslaenge, keylaenge;$/;"	m	struct:DBB::HEADER
dslast	src/Device/Driver/Volkslogger/dbbconv.h	/^    unsigned dsfirst, dslast;$/;"	m	struct:DBB::HEADER
dstartlatitude	src/Topography/shapelib/mapserver.h	/^    double    dstartlatitude;$/;"	m	struct:__anon49
dstartlongitude	src/Topography/shapelib/mapserver.h	/^    double    dstartlongitude;$/;"	m	struct:__anon49
dt	src/Engine/Task/Solvers/TaskSolveTravelled.hpp	/^  double dt;$/;"	m	class:TaskSolveTravelled
dt	src/Engine/ThermalBand/ThermalSlice.hpp	/^  double dt;$/;"	m	struct:ThermalSlice
due	src/event/CoarseTimerEvent.hxx	/^	Event::TimePoint due;$/;"	m	class:final
due	src/event/FineTimerEvent.hxx	/^	Event::TimePoint due;$/;"	m	class:final
due	src/ui/event/shared/TimerQueue.hpp	/^    std::chrono::steady_clock::time_point due;$/;"	m	struct:UI::TimerQueue::TimerRecord
dummy	src/ui/canvas/RawBitmap.hpp	/^  uint8_t dummy;$/;"	m	struct:RawColor
dummy0	src/Device/Driver/LX/Protocol.hpp	/^    uint8_t dummy0[4];$/;"	m	struct:LX::FlightInfo
dummy_rc	src/Form/ButtonPanel.cpp	/^static constexpr PixelRect dummy_rc = { 0, 0, 100, 40 };$/;"	v	file:
dump	src/Topography/shapelib/mapserver.h	/^    int dump;$/;"	m	struct:layerObj
dump_button	src/Dialogs/Settings/dlgBasicSettings.cpp	/^  Button *dump_button;$/;"	m	class:final	file:
dump_port	src/Device/Config.hpp	/^  bool dump_port;$/;"	m	struct:DeviceConfig
dump_time	src/Plane/Plane.hpp	/^  unsigned dump_time;$/;"	m	struct:Plane
duplicate	src/Dialogs/Device/DeviceListDialog.cpp	/^    bool duplicate:1;$/;"	m	struct:final::Flags	file:
duplicate_always	src/Topography/shapelib/mapserver.h	/^  duplicate_always,$/;"	e	enum:__anon60
duplicate_if_needed	src/Topography/shapelib/mapserver.h	/^  duplicate_if_needed$/;"	e	enum:__anon60
duplicate_never	src/Topography/shapelib/mapserver.h	/^  duplicate_never,$/;"	e	enum:__anon60
duration	src/Engine/Task/Stats/WindowStats.hpp	/^  double duration;$/;"	m	struct:WindowStats
duration	src/NMEA/ClimbInfo.hpp	/^  double duration;$/;"	m	struct:OneClimbInfo
dwhichlatitude	src/Topography/shapelib/mapserver.h	/^    double    dwhichlatitude;$/;"	m	struct:__anon49
dwhichlongitude	src/Topography/shapelib/mapserver.h	/^    double    dwhichlongitude;$/;"	m	struct:__anon49
dx	src/ui/canvas/memory/Bresenham.hpp	/^  int dx, dy, sx, sy, error;$/;"	m	class:BresenhamIterator
dy	src/ui/canvas/memory/Bresenham.hpp	/^  int dx, dy, sx, sy, error;$/;"	m	class:BresenhamIterator
dyn_pressure	src/NMEA/Info.hpp	/^  AtmosphericPressure dyn_pressure;$/;"	m	struct:NMEAInfo
dyn_pressure_available	src/NMEA/Info.hpp	/^  Validity dyn_pressure_available;$/;"	m	struct:NMEAInfo
e	src/Geo/UTM.cpp	/^static constexpr double e = 0.00669438;$/;"	v	file:
e2	src/Geo/UTM.cpp	/^static constexpr double e2 = e * e;$/;"	v	file:
e3	src/Geo/UTM.cpp	/^static constexpr double e3 = e * e;$/;"	v	file:
eAttribEquals	src/XML/Parser.cpp	/^    eAttribEquals,$/;"	e	enum:XML::Attrib	file:
eAttribName	src/XML/Parser.cpp	/^    eAttribName = 0,$/;"	e	enum:XML::Attrib	file:
eAttribValue	src/XML/Parser.cpp	/^    eAttribValue$/;"	e	enum:XML::Attrib	file:
eInsideTag	src/XML/Parser.cpp	/^    eInsideTag = 0,$/;"	e	enum:XML::Status	file:
eOutsideTag	src/XML/Parser.cpp	/^    eOutsideTag$/;"	e	enum:XML::Status	file:
eTokenCloseTag	src/XML/Parser.cpp	/^    eTokenCloseTag,         \/* ">"            *\/$/;"	e	enum:XML::TokenTypeTag	file:
eTokenDeclaration	src/XML/Parser.cpp	/^    eTokenDeclaration,      \/* "<?"           *\/$/;"	e	enum:XML::TokenTypeTag	file:
eTokenEquals	src/XML/Parser.cpp	/^    eTokenEquals,           \/* "="            *\/$/;"	e	enum:XML::TokenTypeTag	file:
eTokenError	src/XML/Parser.cpp	/^    eTokenError$/;"	e	enum:XML::TokenTypeTag	file:
eTokenQuotedText	src/XML/Parser.cpp	/^    eTokenQuotedText,$/;"	e	enum:XML::TokenTypeTag	file:
eTokenShortHandClose	src/XML/Parser.cpp	/^    eTokenShortHandClose,   \/* "\/>"           *\/$/;"	e	enum:XML::TokenTypeTag	file:
eTokenTagEnd	src/XML/Parser.cpp	/^    eTokenTagEnd,           \/* "<\/"           *\/$/;"	e	enum:XML::TokenTypeTag	file:
eTokenTagStart	src/XML/Parser.cpp	/^    eTokenTagStart,         \/* "<"            *\/$/;"	e	enum:XML::TokenTypeTag	file:
eTokenText	src/XML/Parser.cpp	/^    eTokenText = 0,$/;"	e	enum:XML::TokenTypeTag	file:
eTopLayout	src/Profile/PageProfile.cpp	/^enum eTopLayout {$/;"	g	file:
eType	src/Topography/shapelib/mapserver.h	/^    FilterNodeType      eType;$/;"	m	struct:_FilterNode
eValidationFileNotFound	src/VALI-XCS.cpp	/^  eValidationFileNotFound,$/;"	e	enum:STATUS_t	file:
eValidationFileRead	src/VALI-XCS.cpp	/^  eValidationFileRead,$/;"	e	enum:STATUS_t	file:
eValidationPassed	src/VALI-XCS.cpp	/^  eValidationPassed,$/;"	e	enum:STATUS_t	file:
e_AA_DistanceMax	src/InfoBoxes/Content/Type.hpp	/^    e_AA_DistanceMax, \/* Assigned Area Task maximum distance possible for remainder of task *\/$/;"	e	enum:InfoBoxFactory::Type
e_AA_DistanceMin	src/InfoBoxes/Content/Type.hpp	/^    e_AA_DistanceMin, \/* Assigned Area Task minimum distance possible for remainder of task *\/$/;"	e	enum:InfoBoxFactory::Type
e_AA_SpeedAvg	src/InfoBoxes/Content/Type.hpp	/^    e_AA_SpeedAvg, \/* Assigned Area Task average speed achievable around target points remaining in minimum AAT time *\/$/;"	e	enum:InfoBoxFactory::Type
e_AA_SpeedMax	src/InfoBoxes/Content/Type.hpp	/^    e_AA_SpeedMax, \/* Assigned Area Task average speed achievable if flying maximum possible distance remaining in minimum AAT time *\/$/;"	e	enum:InfoBoxFactory::Type
e_AA_SpeedMin	src/InfoBoxes/Content/Type.hpp	/^    e_AA_SpeedMin, \/* Assigned Area Task average speed achievable if flying minimum possible distance remaining in minimum AAT time *\/$/;"	e	enum:InfoBoxFactory::Type
e_AA_Time	src/InfoBoxes/Content/Type.hpp	/^    e_AA_Time, \/* Assigned Area Task time remaining. Goes red when time remaining has expired *\/$/;"	e	enum:InfoBoxFactory::Type
e_AA_TimeDiff	src/InfoBoxes/Content/Type.hpp	/^    e_AA_TimeDiff, \/* Difference between estimated task time and AAT minimum time. Colored red if negative (expected arrival too early), or blue if in sector and can turn now with estimated arrival time greater than AAT time plus 5 minutes *\/$/;"	e	enum:InfoBoxFactory::Type
e_Act_Speed	src/InfoBoxes/Content/Type.hpp	/^    e_Act_Speed, \/* The instantaneous MacCready speed-to-fly, making use of Netto vario calculations to determine dolphin cruise speed in the glider's current bearing. In cruise flight mode, this speed-to-fly is calculated for maintaining altitude. In final glide mode, this speed-to-fly is calculated for descent. In climb mode, this switches to the speed for minimum sink at the current load factor (if an accelerometer is connected). When Block mode speed to fly is selected, this infobox displays the MacCready speed *\/$/;"	e	enum:InfoBoxFactory::Type
e_ActiveRadio	src/InfoBoxes/Content/Type.hpp	/^    e_ActiveRadio, \/* Active Radio Frequency *\/$/;"	e	enum:InfoBoxFactory::Type
e_AirSpeed_Ext	src/InfoBoxes/Content/Type.hpp	/^    e_AirSpeed_Ext, \/* Indicated Airspeed reported by a supported external intelligent vario *\/$/;"	e	enum:InfoBoxFactory::Type
e_Alternate_1_GR	src/InfoBoxes/Content/Type.hpp	/^    e_Alternate_1_GR, \/* Geometric gradient to the arrival height above the best alternate. This is not adjusted for total energy *\/$/;"	e	enum:InfoBoxFactory::Type
e_Alternate_1_Name	src/InfoBoxes/Content/Type.hpp	/^    e_Alternate_1_Name, \/* Displays name and bearing to the best alternate landing location *\/$/;"	e	enum:InfoBoxFactory::Type
e_Alternate_2_Name	src/InfoBoxes/Content/Type.hpp	/^    e_Alternate_2_Name, \/* Displays name and bearing to the second alternate landing location *\/$/;"	e	enum:InfoBoxFactory::Type
e_Barogram	src/InfoBoxes/Content/Type.hpp	/^    e_Barogram,$/;"	e	enum:InfoBoxFactory::Type
e_Battery	src/InfoBoxes/Content/Type.hpp	/^    e_Battery, \/* Displays percentage of device battery remaining (where applicable) and status\/voltage of external power supply *\/$/;"	e	enum:InfoBoxFactory::Type
e_Bearing	src/InfoBoxes/Content/Type.hpp	/^    e_Bearing, \/* True bearing of the next waypoint.  For AAT tasks, this is the true bearing to the target within the AAT sector *\/$/;"	e	enum:InfoBoxFactory::Type
e_CC_Speed	src/InfoBoxes/Content/Type.hpp	/^    e_CC_Speed, \/* Achieved cross country speed while on current task, compensated for altitude *\/$/;"	e	enum:InfoBoxFactory::Type
e_CC_SpeedInst	src/InfoBoxes/Content/Type.hpp	/^    e_CC_SpeedInst, \/* Instantaneous cross country speed while on current task, compensated for altitude *\/$/;"	e	enum:InfoBoxFactory::Type
e_CPU_Load	src/InfoBoxes/Content/Type.hpp	/^    e_CPU_Load, \/* CPU load consumed by XCSoar averaged over 5 seconds *\/$/;"	e	enum:InfoBoxFactory::Type
e_CirclingAverage_spark	src/InfoBoxes/Content/Type.hpp	/^    e_CirclingAverage_spark,$/;"	e	enum:InfoBoxFactory::Type
e_Climb_Avg	src/InfoBoxes/Content/Type.hpp	/^    e_Climb_Avg, \/* Time-average climb rate in all thermals *\/$/;"	e	enum:InfoBoxFactory::Type
e_Climb_Perc	src/InfoBoxes/Content/Type.hpp	/^    e_Climb_Perc, \/* Percentage of time spent in climb mode. These statistics are reset upon starting the task *\/$/;"	e	enum:InfoBoxFactory::Type
e_Climb_Perc_Chart	src/InfoBoxes/Content/Type.hpp	/^    e_Climb_Perc_Chart,$/;"	e	enum:InfoBoxFactory::Type
e_Experimental1	src/InfoBoxes/Content/Type.hpp	/^    e_Experimental1, \/* Experimental1 *\/$/;"	e	enum:InfoBoxFactory::Type
e_Experimental2	src/InfoBoxes/Content/Type.hpp	/^    e_Experimental2, \/* Experimental2 *\/$/;"	e	enum:InfoBoxFactory::Type
e_Fin_AA_Distance	src/InfoBoxes/Content/Type.hpp	/^    e_Fin_AA_Distance, \/* Assigned Area Task distance around target points for remainder of task *\/$/;"	e	enum:InfoBoxFactory::Type
e_Fin_AltDiff	src/InfoBoxes/Content/Type.hpp	/^    e_Fin_AltDiff, \/* Arrival altitude at the final task turn point relative to the safety arrival height *\/$/;"	e	enum:InfoBoxFactory::Type
e_Fin_AltReq	src/InfoBoxes/Content/Type.hpp	/^    e_Fin_AltReq, \/* Additional altitude required to finish the task *\/$/;"	e	enum:InfoBoxFactory::Type
e_Fin_Distance	src/InfoBoxes/Content/Type.hpp	/^    e_Fin_Distance, \/* Distance to finish around remaining turn points *\/$/;"	e	enum:InfoBoxFactory::Type
e_Fin_ETE_VMG	src/InfoBoxes/Content/Type.hpp	/^    e_Fin_ETE_VMG,$/;"	e	enum:InfoBoxFactory::Type
e_Fin_GR	src/InfoBoxes/Content/Type.hpp	/^    e_Fin_GR, \/* Geometric gradient to the arrival height above the final waypoint. This is not adjusted for total energy *\/$/;"	e	enum:InfoBoxFactory::Type
e_Fin_GR_TE	src/InfoBoxes/Content/Type.hpp	/^    e_Fin_GR_TE, \/* Deprecated *\/$/;"	e	enum:InfoBoxFactory::Type
e_Fin_Time	src/InfoBoxes/Content/Type.hpp	/^    e_Fin_Time, \/* Estimated time required to complete task, assuming performance of ideal MacCready cruise\/climb cycle *\/$/;"	e	enum:InfoBoxFactory::Type
e_Fin_TimeLocal	src/InfoBoxes/Content/Type.hpp	/^    e_Fin_TimeLocal, \/* Estimated arrival local time at task completion, assuming performance of ideal MacCready cruise\/climb cycle *\/$/;"	e	enum:InfoBoxFactory::Type
e_FlightLevel	src/InfoBoxes/Content/Type.hpp	/^    e_FlightLevel, \/* Flight Level, also known as pressure altitude *\/$/;"	e	enum:InfoBoxFactory::Type
e_Free_RAM	src/InfoBoxes/Content/Type.hpp	/^    e_Free_RAM, \/* Free RAM as reported by OS *\/$/;"	e	enum:InfoBoxFactory::Type
e_GR_Avg	src/InfoBoxes/Content/Type.hpp	/^    e_GR_Avg, \/* The distance made in the configured period of time divided by the altitude lost since then. *\/$/;"	e	enum:InfoBoxFactory::Type
e_GR_Cruise	src/InfoBoxes/Content/Type.hpp	/^    e_GR_Cruise, \/* The distance from the top of the last thermal, divided by the altitude lost since the top of the last thermal. Negative values indicate climbing cruise (height gain since leaving the last thermal). If the vertical speed is close to zero, the displayed value is '---' *\/$/;"	e	enum:InfoBoxFactory::Type
e_GR_Instantaneous	src/InfoBoxes/Content/Type.hpp	/^    e_GR_Instantaneous, \/* Instantaneous glide ratio over ground, given by the ground speed divided by the vertical speed (GPS speed) over the last 20 seconds. Negative values indicate climbing cruise. If the vertical speed is close to zero, the displayed value is '---' *\/$/;"	e	enum:InfoBoxFactory::Type
e_H_Baro	src/InfoBoxes/Content/Type.hpp	/^    e_H_Baro, \/* This is the barometric altitude obtained from a GPS equipped with pressure sensor, or a supported external intelligent vario *\/$/;"	e	enum:InfoBoxFactory::Type
e_H_QFE	src/InfoBoxes/Content/Type.hpp	/^    e_H_QFE, \/* Height on automatic QFE. This altitude value is constantly reset to 0 on ground BEFORE taking off. After takeoff, it is no more reset automatically even if on ground. During flight you can change QFE with up and down keys. Bottom line shows QNH altitude. Changing QFE does not affect QNH altitude *\/$/;"	e	enum:InfoBoxFactory::Type
e_H_Terrain	src/InfoBoxes/Content/Type.hpp	/^    e_H_Terrain, \/* This is the elevation of the terrain above mean sea level, obtained from the terrain file at the current GPS location *\/$/;"	e	enum:InfoBoxFactory::Type
e_HeadWind	src/InfoBoxes/Content/Type.hpp	/^    e_HeadWind,$/;"	e	enum:InfoBoxFactory::Type
e_HeightAGL	src/InfoBoxes/Content/Type.hpp	/^    e_HeightAGL, \/* This is the navigation altitude minus the terrain height obtained from the terrain file. The value is coloured red when the glider is below the terrain safety clearance height *\/$/;"	e	enum:InfoBoxFactory::Type
e_HeightGPS	src/InfoBoxes/Content/Type.hpp	/^    e_HeightGPS, \/* This is the height above mean sea level reported by the GPS. Touchscreen\/PC only: in simulation mode, this value is adjustable with the up\/down arrow keys and the right\/left arrow keys also cause the glider to turn *\/$/;"	e	enum:InfoBoxFactory::Type
e_Home_Distance	src/InfoBoxes/Content/Type.hpp	/^    e_Home_Distance, \/* Distance to home waypoint (if defined) *\/$/;"	e	enum:InfoBoxFactory::Type
e_Home_Temperature	src/InfoBoxes/Content/Type.hpp	/^    e_Home_Temperature, \/* Forecast temperature of the ground at the home airfield, used in estimating convection height and cloud base in conjunction with outside air temperature and relative humidity probe. (Touchscreen\/PC only) Pressing the up\/down cursor keys adjusts this forecast temperature *\/$/;"	e	enum:InfoBoxFactory::Type
e_Horizon	src/InfoBoxes/Content/Type.hpp	/^    e_Horizon,$/;"	e	enum:InfoBoxFactory::Type
e_HumidityRel	src/InfoBoxes/Content/Type.hpp	/^    e_HumidityRel, \/* Relative humidity of the air in percent as measured by a probe if supported by a connected intelligent variometer *\/$/;"	e	enum:InfoBoxFactory::Type
e_LD	src/InfoBoxes/Content/Type.hpp	/^    e_LD, \/* Instantaneous lift\/drag ratio, given by the indicated airspeed divided by the total energy vertical speed, when connected to an intelligent variometer. Negative values indicate climbing cruise. If the total energy vario speed is close to zero, the displayed value is '---' *\/$/;"	e	enum:InfoBoxFactory::Type
e_Load_G	src/InfoBoxes/Content/Type.hpp	/^    e_Load_G, \/* Magnitude of G loading reported by a supported external intelligent vario. This value is negative for pitch-down manoeuvres *\/$/;"	e	enum:InfoBoxFactory::Type
e_MacCready	src/InfoBoxes/Content/Type.hpp	/^    e_MacCready, \/* The current MacCready setting. This infobox also shows whether MacCready is manual or auto. (Touchscreen\/PC only) Also used to adjust the MacCready Setting if the infobox is active, by using the up\/down cursor keys *\/$/;"	e	enum:InfoBoxFactory::Type
e_NUM_TYPES	src/InfoBoxes/Content/Type.hpp	/^    e_NUM_TYPES \/* Last item *\/$/;"	e	enum:InfoBoxFactory::Type
e_NbrSat	src/InfoBoxes/Content/Type.hpp	/^    e_NbrSat, \/* Number of used Sat by GPS module *\/$/;"	e	enum:InfoBoxFactory::Type
e_NearestAirspaceHorizontal	src/InfoBoxes/Content/Type.hpp	/^    e_NearestAirspaceHorizontal,$/;"	e	enum:InfoBoxFactory::Type
e_NearestAirspaceVertical	src/InfoBoxes/Content/Type.hpp	/^    e_NearestAirspaceVertical,$/;"	e	enum:InfoBoxFactory::Type
e_NettoVario_spark	src/InfoBoxes/Content/Type.hpp	/^    e_NettoVario_spark,$/;"	e	enum:InfoBoxFactory::Type
e_NonCircling_Climb_Perc	src/InfoBoxes/Content/Type.hpp	/^    e_NonCircling_Climb_Perc,$/;"	e	enum:InfoBoxFactory::Type
e_OC_Distance	src/InfoBoxes/Content/Type.hpp	/^    e_OC_Distance, \/* Online Contest Distance *\/$/;"	e	enum:InfoBoxFactory::Type
e_RH_Trend	src/InfoBoxes/Content/Type.hpp	/^    e_RH_Trend, \/* Task Req. Total Height Trend *\/$/;"	e	enum:InfoBoxFactory::Type
e_Speed	src/InfoBoxes/Content/Type.hpp	/^    e_Speed, \/* True Airspeed reported by a supported external intelligent vario *\/$/;"	e	enum:InfoBoxFactory::Type
e_SpeedTaskAvg	src/InfoBoxes/Content/Type.hpp	/^    e_SpeedTaskAvg, \/* Average cross country speed while on current task, compensated for altitude *\/$/;"	e	enum:InfoBoxFactory::Type
e_Speed_GPS	src/InfoBoxes/Content/Type.hpp	/^    e_Speed_GPS, \/* Ground speed measured by the GPS. If this infobox is active in simulation mode, pressing the up and down arrows adjusts the speed, and left and right turn the glider *\/$/;"	e	enum:InfoBoxFactory::Type
e_StandbyRadio	src/InfoBoxes/Content/Type.hpp	/^    e_StandbyRadio, \/* Standby Radio Frequency *\/$/;"	e	enum:InfoBoxFactory::Type
e_TL_Avg	src/InfoBoxes/Content/Type.hpp	/^    e_TL_Avg, \/* Total altitude gain\/loss in the last thermal divided by the time spent circling *\/$/;"	e	enum:InfoBoxFactory::Type
e_TL_Gain	src/InfoBoxes/Content/Type.hpp	/^    e_TL_Gain, \/* Total altitude gain\/loss in the last thermal *\/$/;"	e	enum:InfoBoxFactory::Type
e_TL_Time	src/InfoBoxes/Content/Type.hpp	/^    e_TL_Time, \/* Time spent circling in the last thermal *\/$/;"	e	enum:InfoBoxFactory::Type
e_TaskMaxHeightTime	src/InfoBoxes/Content/Type.hpp	/^    e_TaskMaxHeightTime, \/* Time aircraft has been under the max start height *\/$/;"	e	enum:InfoBoxFactory::Type
e_TaskProgress	src/InfoBoxes/Content/Type.hpp	/^    e_TaskProgress,$/;"	e	enum:InfoBoxFactory::Type
e_Team_Bearing	src/InfoBoxes/Content/Type.hpp	/^    e_Team_Bearing, \/* The bearing to the team aircraft location at the last team code report *\/$/;"	e	enum:InfoBoxFactory::Type
e_Team_BearingDiff	src/InfoBoxes/Content/Type.hpp	/^    e_Team_BearingDiff, \/* The relative bearing to the team aircraft location at the last reported team code *\/$/;"	e	enum:InfoBoxFactory::Type
e_Team_Code	src/InfoBoxes/Content/Type.hpp	/^    e_Team_Code, \/* The current Team code for this aircraft. Use this to report to other team members. The last team aircraft code entered is displayed underneath *\/$/;"	e	enum:InfoBoxFactory::Type
e_Team_Range	src/InfoBoxes/Content/Type.hpp	/^    e_Team_Range, \/* The range to the team aircraft location at the last reported team code *\/$/;"	e	enum:InfoBoxFactory::Type
e_Temperature	src/InfoBoxes/Content/Type.hpp	/^    e_Temperature, \/* Outside air temperature measured by a probe if supported by a connected intelligent variometer *\/$/;"	e	enum:InfoBoxFactory::Type
e_ThermalBand	src/InfoBoxes/Content/Type.hpp	/^    e_ThermalBand,$/;"	e	enum:InfoBoxFactory::Type
e_Thermal_30s	src/InfoBoxes/Content/Type.hpp	/^    e_Thermal_30s, \/* A 30 second rolling average climb rate based of the reported GPS altitude, or vario if available *\/$/;"	e	enum:InfoBoxFactory::Type
e_Thermal_Avg	src/InfoBoxes/Content/Type.hpp	/^    e_Thermal_Avg, \/* Altitude gained\/lost in the current thermal, divided by time spent thermaling *\/$/;"	e	enum:InfoBoxFactory::Type
e_Thermal_Gain	src/InfoBoxes/Content/Type.hpp	/^    e_Thermal_Gain, \/* The altitude gained\/lost in the current thermal *\/$/;"	e	enum:InfoBoxFactory::Type
e_Thermal_Time	src/InfoBoxes/Content/Type.hpp	/^    e_Thermal_Time, \/* Time in Thermal*\/$/;"	e	enum:InfoBoxFactory::Type
e_TimeLocal	src/InfoBoxes/Content/Type.hpp	/^    e_TimeLocal, \/* GPS time expressed in local time zone *\/$/;"	e	enum:InfoBoxFactory::Type
e_TimeSinceTakeoff	src/InfoBoxes/Content/Type.hpp	/^    e_TimeSinceTakeoff, \/* Time elapsed since takeoff was detected *\/$/;"	e	enum:InfoBoxFactory::Type
e_TimeUTC	src/InfoBoxes/Content/Type.hpp	/^    e_TimeUTC, \/* GPS time expressed in UTC *\/$/;"	e	enum:InfoBoxFactory::Type
e_Track_GPS	src/InfoBoxes/Content/Type.hpp	/^    e_Track_GPS, \/* Magnetic track reported by the GPS. (Touchscreen\/PC only) If this infobox is active in simulation mode, pressing the up and down  arrows adjusts the track *\/$/;"	e	enum:InfoBoxFactory::Type
e_Vario_spark	src/InfoBoxes/Content/Type.hpp	/^    e_Vario_spark,$/;"	e	enum:InfoBoxFactory::Type
e_VerticalSpeed_GPS	src/InfoBoxes/Content/Type.hpp	/^    e_VerticalSpeed_GPS, \/* Instantaneous vertical speed, as reported by the GPS, or the intelligent vario total energy vario value if connected to one *\/$/;"	e	enum:InfoBoxFactory::Type
e_VerticalSpeed_Netto	src/InfoBoxes/Content/Type.hpp	/^    e_VerticalSpeed_Netto, \/* Instantaneous vertical speed of air-mass, equal to vario value less the glider's estimated sink rate. Best used if airspeed, accelerometers and vario are connected, otherwise calculations are based on GPS measurements and wind estimates *\/$/;"	e	enum:InfoBoxFactory::Type
e_WP_AltDiff	src/InfoBoxes/Content/Type.hpp	/^    e_WP_AltDiff, \/* Next Altitude Difference - Arrival altitude at the next waypoint relative to the safety arrival height *\/$/;"	e	enum:InfoBoxFactory::Type
e_WP_AltReq	src/InfoBoxes/Content/Type.hpp	/^    e_WP_AltReq, \/* Additional altitude required to reach the next turn point *\/$/;"	e	enum:InfoBoxFactory::Type
e_WP_BearingDiff	src/InfoBoxes/Content/Type.hpp	/^    e_WP_BearingDiff, \/* The difference between the glider's track bearing, to the bearing of the next waypoint, or for AAT tasks, to the bearing to the target within the AAT sector. GPS navigation is based on the track bearing across the ground, and this track bearing may differ from the glider's heading when there is wind present. Chevrons point to the direction the glider needs to alter course to correct the bearing difference, that is, so that the glider's course made good is pointing directly at the next waypoint. This bearing takes into account the curvature of the Earth *\/$/;"	e	enum:InfoBoxFactory::Type
e_WP_Distance	src/InfoBoxes/Content/Type.hpp	/^    e_WP_Distance, \/* The distance to the currently selected waypoint. For AAT tasks, this is the distance to the target within the AAT sector *\/$/;"	e	enum:InfoBoxFactory::Type
e_WP_ETA_VMG	src/InfoBoxes/Content/Type.hpp	/^    e_WP_ETA_VMG, \/* Estimated arrival time at next waypoint assuming current speed is maintained*\/$/;"	e	enum:InfoBoxFactory::Type
e_WP_ETE_VMG	src/InfoBoxes/Content/Type.hpp	/^    e_WP_ETE_VMG,$/;"	e	enum:InfoBoxFactory::Type
e_WP_GR	src/InfoBoxes/Content/Type.hpp	/^    e_WP_GR, \/* The required glide ratio over ground to reach the next waypoint, given by the distance to next waypoint divided by the height required to arrive at the safety arrival height. Negative values indicate a climb is necessary to reach the waypoint. If the height required is close to zero, the displayed value is '---'.   Note that this calculation may be optimistic because it reduces the height required to reach the waypoint by the excess energy height of the glider if its true airspeed is greater than the MacCready and best LD speeds *\/$/;"	e	enum:InfoBoxFactory::Type
e_WP_H	src/InfoBoxes/Content/Type.hpp	/^    e_WP_H, \/* Absolute arrival altitude at the next waypoint in final glide *\/$/;"	e	enum:InfoBoxFactory::Type
e_WP_MC0AltDiff	src/InfoBoxes/Content/Type.hpp	/^    e_WP_MC0AltDiff,$/;"	e	enum:InfoBoxFactory::Type
e_WP_Name	src/InfoBoxes/Content/Type.hpp	/^    e_WP_Name, \/* The name of the currently selected turn point. When this infobox is active, using the up\/down cursor keys selects the next\/previous waypoint in the task. (Touchscreen\/PC only) Pressing the enter cursor key brings up the waypoint details *\/$/;"	e	enum:InfoBoxFactory::Type
e_WP_Speed_MC	src/InfoBoxes/Content/Type.hpp	/^    e_WP_Speed_MC, \/* The MacCready speed-to-fly for optimal flight to the next waypoint. In cruise flight mode, this speed-to-fly is calculated for maintaining altitude. In final glide mode, this speed-to-fly is calculated for descent *\/$/;"	e	enum:InfoBoxFactory::Type
e_WP_Time	src/InfoBoxes/Content/Type.hpp	/^    e_WP_Time, \/* Estimated time required to reach next waypoint, assuming performance of ideal MacCready cruise\/climb cycle *\/$/;"	e	enum:InfoBoxFactory::Type
e_WP_TimeLocal	src/InfoBoxes/Content/Type.hpp	/^    e_WP_TimeLocal, \/* Estimated arrival local time at next waypoint, assuming performance of ideal MacCready cruise\/climb cycle *\/$/;"	e	enum:InfoBoxFactory::Type
e_WindBearing_Est	src/InfoBoxes/Content/Type.hpp	/^    e_WindBearing_Est, \/* Wind bearing estimated by XCSoar. (Touchscreen\/PC only) Manual adjustment is possible by pressing the up\/down cursor keys to adjust bearing when the infobox is active *\/$/;"	e	enum:InfoBoxFactory::Type
e_WindSpeed_Est	src/InfoBoxes/Content/Type.hpp	/^    e_WindSpeed_Est, \/* Wind speed estimated by XCSoar. (Touchscreen\/PC only) Manual adjustment is possible by pressing the up\/down cursor keys to adjust magnitude and left\/right cursor keys to adjust bearing when the infobox is active. Pressing the enter cursor key saves the wind value as the initial value when XCSoar next starts *\/$/;"	e	enum:InfoBoxFactory::Type
e_p2	src/Geo/UTM.cpp	/^static constexpr double e_p2 = e \/ (1.0 - e);$/;"	v	file:
easting	src/Geo/UTM.hpp	/^  double easting, northing;$/;"	m	struct:UTM
easy	src/net/http/Request.hxx	/^	CurlEasy easy;$/;"	m	class:final
easy_mkstemp	src/Terrain/jasper/base/jas_stream.c	/^static int easy_mkstemp(char *buffer, size_t size)$/;"	f	file:
edge_buffer	src/ui/canvas/memory/RasterCanvas.hpp	/^  AllocatedArray<BresenhamIterator> edge_buffer;$/;"	m	class:RasterCanvas
edge_const_iterator	src/Engine/PathSolvers/Dijkstra.hpp	/^  typedef typename EdgeMap::const_iterator edge_const_iterator;$/;"	t	class:Dijkstra
edge_iterator	src/Engine/PathSolvers/Dijkstra.hpp	/^  typedef typename EdgeMap::iterator edge_iterator;$/;"	t	class:Dijkstra
edge_value	src/Engine/PathSolvers/Dijkstra.hpp	/^    unsigned edge_value;$/;"	m	struct:Dijkstra::Value
edges	src/Engine/PathSolvers/Dijkstra.hpp	/^  EdgeMap edges;$/;"	m	class:Dijkstra
edit_button	src/Dialogs/Device/DeviceListDialog.cpp	/^  Button *edit_button;$/;"	m	class:final	file:
edit_button	src/Dialogs/Plane/PlaneListDialog.cpp	/^  Button *edit_button, *delete_button, *load_button;$/;"	m	class:final	file:
edit_button	src/Dialogs/Task/Manager/TaskEditPanel.cpp	/^  Button *edit_button, *mutate_button;$/;"	m	class:TaskEditPanel	file:
edit_button	src/Dialogs/Waypoint/Manager.cpp	/^  Button *new_button, *edit_button, *save_button, *delete_button;$/;"	m	class:final	file:
edit_callback	src/Form/Edit.cpp	/^   edit_callback(EditDataFieldDialog)$/;"	f
edit_callback	src/Form/Edit.hpp	/^  EditCallback edit_callback;$/;"	m	class:WndProperty
edit_format	src/Form/DataField/Number.hpp	/^  StaticString<32> edit_format;$/;"	m	class:NumberDataField
edit_manual_wind	src/Dialogs/Settings/WindSettingsPanel.hpp	/^  const bool edit_manual_wind, clear_manual_button, edit_trail_drift;$/;"	m	class:final
edit_position	src/ui/event/poll/linux/Input.hpp	/^  Position edit_position;$/;"	m	class:UI::final
edit_rc	src/Form/Edit.hpp	/^  PixelRect edit_rc;$/;"	m	class:WndProperty
edit_trail_drift	src/Dialogs/Settings/WindSettingsPanel.hpp	/^  const bool edit_manual_wind, clear_manual_button, edit_trail_drift;$/;"	m	class:final
editor	src/Dialogs/Settings/Panels/PagesConfigPanel.cpp	/^  PageLayoutEditWidget *editor;$/;"	m	class:PageListWidget	file:
editor	src/Dialogs/TouchTextEntry.cpp	/^static WndProperty *editor;$/;"	v	file:
edittext	src/Dialogs/TouchTextEntry.cpp	/^static TCHAR edittext[MAX_TEXTENTRY];$/;"	v	file:
eeprom	src/Device/Driver/IMI/Protocol/Types.hpp	/^    IMIBYTE eeprom;$/;"	m	struct:IMI::TDeviceInfo
eepromSize	src/Device/Driver/IMI/Protocol/Types.hpp	/^    IMIDWORD eepromSize;$/;"	m	struct:IMI::TDeviceInfo
effective_distance	src/Engine/Task/Solvers/TaskMacCreadyTotal.cpp	/^TaskMacCreadyTotal::effective_distance(const double time_remaining) const$/;"	f	class:TaskMacCreadyTotal
effective_leg_distance	src/Engine/Task/Solvers/TaskMacCreadyTotal.cpp	/^TaskMacCreadyTotal::effective_leg_distance(const double time_remaining) const$/;"	f	class:TaskMacCreadyTotal
effective_mc	src/Engine/Task/Stats/TaskStats.hpp	/^  double effective_mc;$/;"	m	class:TaskStats
effective_wind_angle	src/Engine/GlideSolvers/GlideResult.hpp	/^  Angle effective_wind_angle;$/;"	m	struct:GlideResult
effective_wind_angle	src/Engine/GlideSolvers/GlideState.hpp	/^  Angle effective_wind_angle;$/;"	m	struct:GlideState
effective_wind_speed	src/Engine/GlideSolvers/GlideResult.hpp	/^  double effective_wind_speed;$/;"	m	struct:GlideResult
egm96s_dem	src/Geo/Geoid.cpp	/^extern "C" const uint8_t egm96s_dem[];$/;"	v
ekf	src/Computer/Wind/WindEKFGlue.hpp	/^  WindEKF ekf;$/;"	m	class:WindEKFGlue
ekf_active	src/Computer/Wind/Computer.hpp	/^  bool ekf_active;$/;"	m	class:WindComputer
elapsed_time	src/Engine/Airspace/AirspaceInterceptSolution.hpp	/^  double elapsed_time;$/;"	m	struct:AirspaceInterceptSolution
elevation	src/Device/Driver/CAI302/Protocol.hpp	/^    uint16_t elevation;$/;"	m	struct:CAI302::Navpoint
elevation	src/Engine/Waypoint/Waypoint.hpp	/^  double elevation;$/;"	m	struct:Waypoint
elevation	src/MapWindow/Items/MapItem.hpp	/^  double elevation;$/;"	m	struct:ArrivalAltitudeMapItem
elevation	src/MapWindow/Items/MapItem.hpp	/^  double elevation;$/;"	m	struct:LocationMapItem
elim_distance	src/Engine/Trace/Trace.hpp	/^    unsigned elim_distance;$/;"	m	struct:Trace::TraceDelta
elim_time	src/Engine/Trace/Trace.hpp	/^    unsigned elim_time;$/;"	m	struct:Trace::TraceDelta
ell	src/Engine/Task/Ordered/AATIsoline.cpp	/^  :ell(ap.GetPrevious()->GetLocationRemaining(),$/;"	f
ell	src/Engine/Task/Ordered/AATIsoline.hpp	/^  const GeoEllipse ell;$/;"	m	class:AATIsoline
ell	src/Engine/Task/PathSolvers/IsolineCrossingFinder.cpp	/^   ell(_ell)$/;"	f
ell	src/Engine/Task/PathSolvers/IsolineCrossingFinder.hpp	/^  const GeoEllipse &ell;$/;"	m	class:final
ell	src/Geo/GeoEllipse.hpp	/^  FlatEllipse ell;$/;"	m	class:GeoEllipse
emplace_back	src/util/TrivialArray.hxx	/^	void emplace_back(Args&&... args) {$/;"	f	class:TrivialArray
empty	src/Atmosphere/CuSonde.hpp	/^    bool empty() const {$/;"	f	struct:CuSonde::Level
empty	src/Cloud/Client.hpp	/^  bool empty() const {$/;"	f	class:CloudClientContainer
empty	src/Cloud/Thermal.hpp	/^  bool empty() const {$/;"	f	class:CloudThermalContainer
empty	src/Engine/Airspace/AirspaceIntersectSort.hpp	/^  bool empty() const {$/;"	f	class:AirspaceIntersectSort
empty	src/Engine/Airspace/AirspaceWarningManager.hpp	/^  bool empty() const {$/;"	f	class:AirspaceWarningManager
empty	src/Engine/Trace/Trace.hpp	/^  bool empty() const {$/;"	f	class:Trace
empty	src/Form/DataField/ComboList.hpp	/^  bool empty() const {$/;"	f	class:ComboList
empty	src/Input/InputParser.cpp	/^  bool empty() const {$/;"	f	struct:EventBuilder
empty	src/MapWindow/MapWindowGlideRange.cpp	/^  bool empty() const {$/;"	f	struct:ProjectedFans
empty	src/Topography/shapelib/mapserver.h	/^    char *empty, *error; \/* error handling *\/$/;"	m	struct:__anon35
empty	src/event/TimerWheel.hxx	/^	mutable bool empty = true;$/;"	m	class:final
empty	src/net/AddressInfo.hxx	/^	bool empty() const {$/;"	f	class:AddressInfoList
empty	src/util/OverwritingRingBuffer.hpp	/^  bool empty() const {$/;"	f	class:TrivialOverwritingRingBuffer
empty	src/util/Range.hpp	/^  bool empty() const {$/;"	f	class:Range
empty_spacer	src/Dialogs/Settings/Panels/RouteConfigPanel.cpp	/^  empty_spacer,$/;"	e	enum:ControlIndex	file:
enable	src/Engine/Contest/Settings.hpp	/^  bool enable;$/;"	m	struct:ContestSettings
enable	src/Renderer/AirspaceRendererSettings.hpp	/^  bool enable;$/;"	m	struct:AirspaceRendererSettings
enable	src/Terrain/TerrainSettings.hpp	/^  bool enable;$/;"	m	struct:TerrainRendererSettings
enable	src/ui/canvas/fb/mxcfb.h	/^	int enable;$/;"	m	struct:mxcfb_color_key
enable	src/ui/canvas/fb/mxcfb.h	/^	int enable;$/;"	m	struct:mxcfb_gamma
enable	src/ui/canvas/fb/mxcfb.h	/^	int enable;$/;"	m	struct:mxcfb_gbl_alpha
enable	src/ui/canvas/fb/mxcfb.h	/^	int enable;$/;"	m	struct:mxcfb_loc_alpha
enable_airspace_warning_dialog	src/UISettings.hpp	/^  bool enable_airspace_warning_dialog;$/;"	m	struct:UISettings
enable_auto_zoom	src/Gauge/BigTrafficWidget.cpp	/^  bool enable_auto_zoom, dragging;$/;"	m	class:FlarmTrafficControl	file:
enable_bestcruisetrack	src/Replay/TaskAutoPilot.hpp	/^  bool enable_bestcruisetrack;$/;"	m	struct:AutopilotParameters
enable_button	src/Dialogs/Airspace/dlgAirspaceWarnings.cpp	/^  Button *enable_button;$/;"	m	class:final	file:
enable_dither	src/ui/canvas/custom/TopCanvas.hpp	/^  bool enable_dither;$/;"	m	class:DisplayOrientation
enable_flight_logger	src/Logger/Settings.hpp	/^  bool enable_flight_logger;$/;"	m	struct:LoggerSettings
enable_gauge	src/Gauge/TrafficSettings.hpp	/^  bool enable_gauge;$/;"	m	struct:TrafficSettings
enable_nmea_logger	src/Logger/Settings.hpp	/^  bool enable_nmea_logger;$/;"	m	struct:LoggerSettings
enable_north_up	src/Gauge/FlarmTrafficWindow.hpp	/^  bool enable_north_up;$/;"	m	class:FlarmTrafficWindow
enable_sound	src/PopupMessage.hpp	/^  bool enable_sound;$/;"	m	class:PopupMessage
enable_team	src/Computer/Events.hpp	/^  bool enable_team, last_teammate_in_sector;$/;"	m	class:final
enable_warnings	src/Airspace/AirspaceComputerSettings.hpp	/^  bool enable_warnings;$/;"	m	struct:AirspaceComputerSettings
enabled	src/Audio/VarioSettings.hpp	/^  bool enabled;$/;"	m	struct:VarioSoundSettings
enabled	src/BallastDumpManager.hpp	/^  bool enabled = false;$/;"	m	class:BallastDumpManager
enabled	src/Computer/WaveSettings.hpp	/^  bool enabled;$/;"	m	struct:WaveSettings
enabled	src/Device/Config.hpp	/^  bool enabled;$/;"	m	struct:DeviceConfig
enabled	src/Logger/NMEALogger.cpp	/^  bool enabled = false;$/;"	m	namespace:NMEALogger	file:
enabled	src/Menu/ButtonLabel.hpp	/^    bool visible, enabled;$/;"	m	struct:ButtonLabel::Expanded
enabled	src/PageSettings.hpp	/^    bool enabled;$/;"	m	struct:PageLayout::InfoBoxConfig
enabled	src/Tracking/LiveTrack24/Settings.hpp	/^  bool enabled;$/;"	m	struct:LiveTrack24::Settings
enabled	src/Tracking/SkyLines/CloudSettings.hpp	/^  TriState enabled;$/;"	m	struct:SkyLinesTracking::CloudSettings
enabled	src/Tracking/SkyLines/Settings.hpp	/^  bool enabled;$/;"	m	struct:SkyLinesTracking::Settings
enabled	src/ui/canvas/opengl/ConstantAlpha.hpp	/^  const bool enabled;$/;"	m	class:ScopeTextureConstantAlpha
enabled	src/ui/window/Window.hpp	/^  bool enabled = true;$/;"	m	class:WindowStyle
enabled	src/ui/window/Window.hpp	/^  bool enabled;$/;"	m	class:Window
enabled	src/util/ScopeExit.hxx	/^	bool enabled = true;$/;"	m	class:ScopeExitGuard
encode	src/Terrain/jasper/jas_image.h	/^	int (*encode)(jas_image_t *image, jas_stream_t *out, const char *opts);$/;"	m	struct:__anon103
encoding	src/Topography/shapelib/mapserver.h	/^    char *encoding; \/* for iconving shape attributes. ignored if NULL or "utf-8" *\/$/;"	m	struct:layerObj
encoding	src/Topography/shapelib/mapserver.h	/^    char *encoding;$/;"	m	struct:labelObj
encryption_key	src/Topography/shapelib/mapserver.h	/^    unsigned char encryption_key[MS_ENCRYPTION_KEY_SIZE]; \/* 128bits encryption key *\/$/;"	m	struct:mapObj
encryption_key_loaded	src/Topography/shapelib/mapserver.h	/^    int encryption_key_loaded;        \/* MS_TRUE once key has been loaded *\/$/;"	m	struct:mapObj
end	src/Cloud/Client.hpp	/^  List::const_iterator end() const {$/;"	f	class:CloudClientContainer
end	src/Cloud/Thermal.hpp	/^  List::const_iterator end() const {$/;"	f	class:CloudThermalContainer
end	src/Device/Driver/LX/LXN.hpp	/^    const struct End *end;$/;"	m	union:LXN::Packet	typeref:struct:LXN::Packet::End
end	src/Device/MultipleDevices.hpp	/^  const_iterator end() {$/;"	f	class:final
end	src/Device/SettingsMap.hpp	/^  const_iterator end() const {$/;"	f	class:DeviceSettingsMap
end	src/Engine/Airspace/AirspaceWarningManager.hpp	/^  const_iterator end() const {$/;"	f	class:AirspaceWarningManager
end	src/Engine/Trace/Trace.hpp	/^  const_iterator end() const {$/;"	f	class:Trace
end	src/Engine/Waypoint/Waypoints.hpp	/^  const_iterator end() const {$/;"	f	class:Waypoints
end	src/FLARM/ColorDatabase.hpp	/^  const_iterator end() const {$/;"	f	class:FlarmColorDatabase
end	src/FLARM/FlarmNetDatabase.hpp	/^  RecordMap::const_iterator end() const {$/;"	f	class:FlarmNetDatabase
end	src/FLARM/NameDatabase.hpp	/^  const_iterator end() const {$/;"	f	class:FlarmNameDatabase
end	src/Math/ARange.hpp	/^    :start(_start), end(_end) {}$/;"	f	struct:AngleRange
end	src/Math/ARange.hpp	/^  Angle start, end;$/;"	m	struct:AngleRange
end	src/Renderer/AirspaceLabelList.hpp	/^  const Label *end() const {$/;"	f	class:AirspaceLabelList
end	src/Renderer/WaypointLabelList.hpp	/^  const Label *end() const {$/;"	f	class:WaypointLabelList
end	src/Repository/FileRepository.hpp	/^  const_iterator end() const {$/;"	f	struct:FileRepository
end	src/Terrain/ScanLine.cpp	/^  GridLocation start, end;$/;"	m	struct:GridRay	file:
end	src/Topography/TopographyFile.hpp	/^  const_iterator end() const {$/;"	f	class:TopographyFile
end	src/UIUtil/KineticManager.hpp	/^  int end;$/;"	m	class:KineticManager
end	src/Weather/METARParser.cpp	/^  TCHAR *start, *data, *end;$/;"	m	class:METARLine	file:
end	src/Weather/NOAAStore.hpp	/^  const_iterator end() const {$/;"	f	class:NOAAStore
end	src/Weather/NOAAStore.hpp	/^  iterator end() {$/;"	f	class:NOAAStore
end	src/XML/Node.hpp	/^    const_iterator end() const {$/;"	f	struct:XMLNode::Data
end	src/XML/Node.hpp	/^  const_iterator end() const {$/;"	f	class:XMLNode
end	src/io/CSVLine.hpp	/^  const char *data, *end;$/;"	m	class:CSVLine
end	src/net/AddressInfo.hxx	/^	const_iterator end() const {$/;"	f	class:AddressInfoList
end	src/net/HostParser.hxx	/^	const char *end;$/;"	m	struct:ExtractHostResult
end	src/system/FileMapping.hpp	/^  const void *end() const {$/;"	f	class:FileMapping
end	src/time/RoughTime.hpp	/^  RoughTime end;$/;"	m	class:RoughTimeSpan
end	src/util/AllocatedGrid.hxx	/^	constexpr const_iterator end() const {$/;"	f	class:AllocatedGrid
end	src/util/AllocatedGrid.hxx	/^	iterator end() {$/;"	f	class:AllocatedGrid
end	src/util/IterableSplitString.hxx	/^	constexpr const_iterator end() const {$/;"	f	class:BasicIterableSplitString
end	src/util/OverwritingRingBuffer.hpp	/^  const_iterator end() const {$/;"	f	class:TrivialOverwritingRingBuffer
end	src/util/Range.hpp	/^  I end() const {$/;"	f	class:Range
end	src/util/StaticString.hxx	/^	const_iterator end() const {$/;"	f	class:StaticStringBase
end	src/util/StringBuilder.hxx	/^	const pointer end;$/;"	m	class:StringBuilder
endLayer	src/Topography/shapelib/mapserver.h	/^    int (*endLayer)(imageObj *img, mapObj *map, layerObj *layer);$/;"	m	struct:rendererVTableObj
endShape	src/Topography/shapelib/mapserver.h	/^    int (*endShape)(imageObj *img, shapeObj *shape);$/;"	m	struct:rendererVTableObj
end_	src/util/Range.hpp	/^  I begin_, end_;$/;"	m	class:Range
end_address	src/Device/Driver/LX/Protocol.hpp	/^    MemoryAddress24 start_address, end_address;$/;"	m	struct:LX::SeekMemory
end_address	src/Device/Driver/LX/Protocol.hpp	/^    MemoryAddress32 end_address;$/;"	m	struct:LX::FlightInfo
end_address	src/Device/RecordedFlight.hpp	/^      uint8_t end_address[3];$/;"	m	struct:RecordedFlightInfo::__anon159::__anon160
end_offset	src/Device/Driver/Volkslogger/Database.hpp	/^    uint16_t end_offset;$/;"	m	struct:Volkslogger::TableHeader
end_radial	src/Engine/Task/ObservationZones/SectorZone.hpp	/^  Angle end_radial;$/;"	m	class:SectorZone
end_time	src/FlightInfo.hpp	/^  BrokenTime start_time, end_time;$/;"	m	struct:FlightInfo
end_time	src/NMEA/ClimbInfo.hpp	/^  double end_time;$/;"	m	struct:OneClimbInfo
end_utc	src/Device/Driver/CAI302/Protocol.hpp	/^      struct DateTime start_utc, end_utc;$/;"	m	struct:CAI302::FileList::FileInfo	typeref:struct:CAI302::FileList::FileInfo::
energy_height	src/NMEA/MoreData.hpp	/^  double energy_height;$/;"	m	struct:MoreData
engine	src/Audio/SLES/Engine.hpp	/^    SLEngineItf engine;$/;"	m	class:SLES::Engine
engine_noise_level	src/Engine/Trace/Point.hpp	/^  uint16_t engine_noise_level;$/;"	m	class:TracePoint
engine_noise_level	src/NMEA/Info.hpp	/^  unsigned engine_noise_level;$/;"	m	struct:NMEAInfo
engine_noise_level	src/Tracking/SkyLines/Protocol.hpp	/^  uint16_t engine_noise_level;$/;"	m	struct:SkyLinesTracking::FixPacket
engine_noise_level_available	src/NMEA/Info.hpp	/^  Validity engine_noise_level_available;$/;"	m	struct:NMEAInfo
engine_object	src/Audio/AndroidPCMPlayer.hpp	/^  SLES::Object engine_object;$/;"	m	class:AndroidPCMPlayer
enl	src/Device/Driver/IMI/Protocol/Types.hpp	/^    IMIDWORD enl:10;$/;"	m	struct:IMI::FixB
enl	src/IGC/IGCFix.hpp	/^  int16_t enl;$/;"	m	struct:IGCFix
enl1	src/Device/Driver/IMI/Protocol/Types.hpp	/^    IMIDWORD enl1:10;$/;"	m	struct:IMI::FixB2
enl2	src/Device/Driver/IMI/Protocol/Types.hpp	/^    IMIDWORD enl2:10;$/;"	m	struct:IMI::FixB2
enlflt	src/Device/Driver/Volkslogger/vlconv.cpp	/^enlflt(int enl)$/;"	f	file:
enllim	src/Device/Driver/Volkslogger/vlconv.cpp	/^enllim(int enl)$/;"	f	file:
enqueue_method	src/Android/DownloadManager.cpp	/^static jmethodID enumerate_method, enqueue_method, cancel_method;$/;"	v	file:
enroute_logging_interval	src/Device/Driver/CAI302/Protocol.hpp	/^    uint16_t enroute_logging_interval;$/;"	m	struct:CAI302::Pilot
entries	src/Form/DataField/Enum.hpp	/^  StaticArray<Entry, 128> entries;$/;"	m	class:final
ents	src/Terrain/jasper/jp2/jp2_cod.h	/^	jp2_cdefchan_t *ents;$/;"	m	struct:__anon91
ents	src/Terrain/jasper/jp2/jp2_cod.h	/^	jp2_cmapent_t *ents;$/;"	m	struct:__anon93
ents	src/Terrain/jasper/jpc/jpc_dec.h	/^	jpc_ppxstabent_t **ents;$/;"	m	struct:__anon117
enumerate_method	src/Android/DownloadManager.cpp	/^static jmethodID enumerate_method, enqueue_method, cancel_method;$/;"	v	file:
env	src/Android/NativeView.hpp	/^  JNIEnv *env;$/;"	m	class:NativeView
env	src/Android/TextUtil.cpp	/^JNIEnv *TextUtil::env;$/;"	m	class:TextUtil	file:
env	src/Android/TextUtil.hpp	/^  static JNIEnv *env;$/;"	m	class:TextUtil
env	src/Device/Descriptor.cpp	/^  OperationEnvironment &env;$/;"	m	struct:ScopeReturnDevice	file:
env	src/Device/Util/NMEAReader.hpp	/^  OperationEnvironment &env;$/;"	m	class:PortNMEAReader
env	src/Dialogs/DownloadFilePicker.cpp	/^  ThreadedOperationEnvironment env;$/;"	m	class:final	file:
env	src/Job/Async.hpp	/^  ThreadedOperationEnvironment *env;$/;"	m	class:final
env	src/Terrain/Loader.hpp	/^  OperationEnvironment &env;$/;"	m	class:TerrainLoader
env	src/java/Ref.hxx	/^	JNIEnv *env;$/;"	m	class:Java::LocalRef
env	src/net/http/ToBuffer.cpp	/^  OperationEnvironment &env;$/;"	m	class:final	file:
env	src/net/http/ToFile.cpp	/^  OperationEnvironment &env;$/;"	m	class:final	file:
eoc	src/Terrain/jasper/jpc/jpc_cs.h	/^	int eoc;	\/* unused *\/$/;"	m	union:__anon155
eof	src/Terrain/jasper/jpc/jpc_mqdec.h	/^	bool eof;$/;"	m	struct:__anon110
eof	src/io/BufferedReader.hxx	/^	bool eof = false;$/;"	m	class:BufferedReader
eof	src/io/GunzipReader.hxx	/^	bool eof = false;$/;"	m	class:final
epd_update_marker	src/ui/canvas/custom/TopCanvas.hpp	/^  uint32_t epd_update_marker;$/;"	m	class:DisplayOrientation
eph	src/Terrain/jasper/jpc/jpc_cs.h	/^	int eph;	\/* unused *\/$/;"	m	union:__anon155
epoll	src/event/EpollBackend.hxx	/^	EpollFD epoll;$/;"	m	class:EpollBackend
epsilon	src/Math/ZeroFinder.cpp	/^static constexpr double epsilon = std::numeric_limits<double>::epsilon();$/;"	v	file:
equals	src/Engine/Airspace/AirspaceActivity.hpp	/^  bool equals(const AirspaceActivity _mask) const {$/;"	f	class:AirspaceActivity
equals	src/util/StaticString.hxx	/^	bool equals(const_pointer other) const {$/;"	f	class:StaticStringBase
erase	src/Device/SettingsMap.hpp	/^  void erase(const K &key) {$/;"	f	class:DeviceSettingsMap
erase	src/Weather/NOAAStore.hpp	/^  void erase(iterator i) {$/;"	f	class:NOAAStore
errcode	src/zzip/lib.h	/^    int errcode; \/* zzip_error_t *\/$/;"	m	struct:zzip_dir
error	src/Config/Registry.hpp	/^  bool error() const {$/;"	f	class:RegistryKey
error	src/Dialogs/Device/DeviceListDialog.cpp	/^    bool open:1, error:1;$/;"	m	struct:final::Flags	file:
error	src/Dialogs/DownloadFilePicker.cpp	/^  std::exception_ptr error;$/;"	m	class:final	file:
error	src/FLARM/Data.hpp	/^  FlarmError error;$/;"	m	struct:FlarmData
error	src/Language/MOFile.hpp	/^  bool error() const {$/;"	f	class:MOFile
error	src/Language/MOLoader.hpp	/^  bool error() const {$/;"	f	class:MOLoader
error	src/Operation/ThreadedOperationEnvironment.hpp	/^    StaticString<256u> error;$/;"	m	struct:ThreadedOperationEnvironment::Data
error	src/Topography/shapelib/mapserver.h	/^    char *empty, *error; \/* error handling *\/$/;"	m	struct:__anon35
error	src/event/net/cares/CoLookup.hxx	/^	std::exception_ptr error;$/;"	m	class:Cares::final
error	src/event/net/cares/SimpleResolver.hxx	/^	std::exception_ptr error;$/;"	m	class:Cares::final
error	src/net/http/ToBuffer.cpp	/^  std::exception_ptr error;$/;"	m	class:final	file:
error	src/net/http/ToFile.cpp	/^  std::exception_ptr error;$/;"	m	class:final	file:
error	src/system/FileMapping.hpp	/^  bool error() const {$/;"	f	class:FileMapping
error	src/ui/canvas/memory/Bresenham.hpp	/^  int dx, dy, sx, sy, error;$/;"	m	class:BresenhamIterator
errorObj	src/Topography/shapelib/maperror.h	/^  typedef struct errorObj {$/;"	s
errorObj	src/Topography/shapelib/maperror.h	/^  } errorObj;$/;"	t	typeref:struct:errorObj
error_buffer	src/net/http/Request.hxx	/^	char error_buffer[CURL_ERROR_SIZE];$/;"	m	class:final
error_message	src/Device/Descriptor.hpp	/^  tstring error_message;$/;"	m	class:final
error_messages	src/Dialogs/Device/DeviceListDialog.cpp	/^  tstring error_messages[NUMDEV];$/;"	m	class:final	file:
error_reported	src/Device/Driver/LevilAHRS_G.cpp	/^static bool error_reported = false;$/;"	v	file:
error_strings	src/FLARM/Error.cpp	/^} error_strings[] = {$/;"	v	typeref:struct:__anon1	file:
errorcount	src/Topography/shapelib/maperror.h	/^    int errorcount; \/* number of subsequent errors *\/$/;"	m	struct:errorObj
errorfile	src/Topography/shapelib/maperror.h	/^    char        *errorfile;$/;"	m	struct:debug_info_obj
estimate_location	src/NMEA/ThermalLocator.hpp	/^  GeoPoint estimate_location;$/;"	m	struct:ThermalLocatorInfo
estimate_valid	src/NMEA/ThermalLocator.hpp	/^  bool estimate_valid;$/;"	m	struct:ThermalLocatorInfo
estimated_wind	src/NMEA/Derived.hpp	/^  SpeedVector estimated_wind;$/;"	m	struct:DerivedInfo
estimated_wind_available	src/NMEA/Derived.hpp	/^  Validity estimated_wind_available;$/;"	m	struct:DerivedInfo
ete	src/Dialogs/Task/TargetDialog.cpp	/^    PixelRect range, radial, ete, delta_t, speed_remaining, speed_achieved;$/;"	m	struct:TargetWidget::Layout	file:
ete	src/Dialogs/Task/TargetDialog.cpp	/^  WndProperty range, radial, ete, delta_t, speed_remaining, speed_achieved;$/;"	m	class:TargetWidget	file:
evening_twilight	src/Math/SunEphemeris.hpp	/^    double day_length, morning_twilight, evening_twilight;$/;"	m	struct:SunEphemeris::Result
event	src/Device/Driver/LX/Convert.cpp	/^  LXN::Event event;$/;"	m	struct:Context	file:
event	src/Device/Driver/LX/LXN.hpp	/^    const struct Event *event;$/;"	m	union:LXN::Packet	typeref:struct:LXN::Packet::Event
event	src/Input/InputConfig.hpp	/^    pt2Event event;$/;"	m	struct:InputConfig::Event
event	src/Input/InputDefaults.cpp	/^  unsigned short event;$/;"	m	struct:flat_event_map	file:
event	src/Input/InputDefaults.cpp	/^  unsigned short event;$/;"	m	struct:flat_gesture_map	file:
event	src/Input/InputDefaults.cpp	/^  unsigned short event;$/;"	m	struct:flat_label	file:
event	src/Input/InputLookup.cpp	/^  pt2Event event;$/;"	m	struct:Text2EventSTRUCT	file:
event	src/Menu/MenuBar.hpp	/^    unsigned event;$/;"	m	class:MenuBar::Button
event	src/Menu/MenuData.hpp	/^  unsigned event;$/;"	m	class:MenuItem
event	src/event/Call.cxx	/^	InjectEvent event;$/;"	m	class:final	file:
event	src/event/IdleEvent.hxx	/^		:event(_loop, _callback) {}$/;"	f	class:final
event	src/event/IdleEvent.hxx	/^	DeferEvent event;$/;"	m	class:final
event	src/event/SignalMonitor.cxx	/^	SocketEvent event;$/;"	m	class:final	file:
event	src/event/net/ConnectSocket.hxx	/^	SocketEvent event;$/;"	m	class:final
event	src/event/net/cares/Channel.cxx	/^		 event(channel.GetEventLoop(), BIND_THIS_METHOD(OnSocket),$/;"	f	class:Cares::Channel::Socket
event	src/event/net/cares/Channel.cxx	/^	SocketEvent event;$/;"	m	class:Cares::Channel::Socket	file:
event	src/ui/event/sdl/Event.hpp	/^  SDL_Event event;$/;"	m	struct:UI::Event
eventAbortTask	src/Input/InputEventsTask.cpp	/^InputEvents::eventAbortTask(const TCHAR *misc)$/;"	f	class:InputEvents
eventAddWaypoint	src/Input/InputEventsActions.cpp	/^InputEvents::eventAddWaypoint(const TCHAR *misc)$/;"	f	class:InputEvents
eventAdjustForecastTemperature	src/Input/InputEventsSettings.cpp	/^InputEvents::eventAdjustForecastTemperature(const TCHAR *misc)$/;"	f	class:InputEvents
eventAdjustVarioFilter	src/Input/InputEventsVega.cpp	/^InputEvents::eventAdjustVarioFilter(const TCHAR *misc)$/;"	f	class:InputEvents
eventAdjustWaypoint	src/Input/InputEventsTask.cpp	/^InputEvents::eventAdjustWaypoint(const TCHAR *misc)$/;"	f	class:InputEvents
eventAirSpace	src/Input/InputEventsAirspace.cpp	/^InputEvents::eventAirSpace(const TCHAR *misc)$/;"	f	class:InputEvents
eventAirspaceDisplayMode	src/Input/InputEventsSettings.cpp	/^InputEvents::eventAirspaceDisplayMode(const TCHAR *misc)$/;"	f	class:InputEvents
eventAnalysis	src/Input/InputEventsActions.cpp	/^InputEvents::eventAnalysis(gcc_unused const TCHAR *misc)$/;"	f	class:InputEvents
eventArmAdvance	src/Input/InputEventsTask.cpp	/^InputEvents::eventArmAdvance(const TCHAR *misc)$/;"	f	class:InputEvents
eventAudioDeadband	src/Input/InputEventsSettings.cpp	/^InputEvents::eventAudioDeadband(const TCHAR *misc)$/;"	f	class:InputEvents
eventAutoLogger	src/Input/InputEventsActions.cpp	/^InputEvents::eventAutoLogger(const TCHAR *misc)$/;"	f	class:InputEvents
eventBallast	src/Input/InputEventsSettings.cpp	/^InputEvents::eventBallast(const TCHAR *misc)$/;"	f	class:InputEvents
eventBeep	src/Input/InputEventsActions.cpp	/^InputEvents::eventBeep(gcc_unused const TCHAR *misc)$/;"	f	class:InputEvents
eventBrightness	src/Input/InputEventsActions.cpp	/^InputEvents::eventBrightness(gcc_unused const TCHAR *misc)$/;"	f	class:InputEvents
eventBugs	src/Input/InputEventsSettings.cpp	/^InputEvents::eventBugs(const TCHAR *misc)$/;"	f	class:InputEvents
eventCalculator	src/Input/InputEventsTask.cpp	/^InputEvents::eventCalculator(gcc_unused const TCHAR *misc)$/;"	f	class:InputEvents
eventChecklist	src/Input/InputEventsActions.cpp	/^InputEvents::eventChecklist(gcc_unused const TCHAR *misc)$/;"	f	class:InputEvents
eventClearAirspaceWarnings	src/Input/InputEventsAirspace.cpp	/^InputEvents::eventClearAirspaceWarnings(gcc_unused const TCHAR *misc)$/;"	f	class:InputEvents
eventClearStatusMessages	src/Input/InputEventsActions.cpp	/^InputEvents::eventClearStatusMessages(gcc_unused const TCHAR *misc)$/;"	f	class:InputEvents
eventCredits	src/Input/InputEventsActions.cpp	/^InputEvents::eventCredits(gcc_unused const TCHAR *misc)$/;"	f	class:InputEvents
eventDeclutterLabels	src/Input/InputEventsSettings.cpp	/^InputEvents::eventDeclutterLabels(const TCHAR *misc)$/;"	f	class:InputEvents
eventDevice	src/Input/InputEventsDevice.cpp	/^InputEvents::eventDevice(const TCHAR *misc)$/;"	f	class:InputEvents
eventExit	src/Input/InputEventsActions.cpp	/^InputEvents::eventExit(gcc_unused const TCHAR *misc)$/;"	f	class:InputEvents
eventFLARMRadar	src/Input/InputEventsTraffic.cpp	/^InputEvents::eventFLARMRadar(gcc_unused const TCHAR *misc)$/;"	f	class:InputEvents
eventFileManager	src/Input/InputEventsActions.cpp	/^InputEvents::eventFileManager(const TCHAR *misc)$/;"	f	class:InputEvents
eventFlarmDetails	src/Input/InputEventsTraffic.cpp	/^InputEvents::eventFlarmDetails(gcc_unused const TCHAR *misc)$/;"	f	class:InputEvents
eventFlarmTraffic	src/Input/InputEventsTraffic.cpp	/^InputEvents::eventFlarmTraffic(gcc_unused const TCHAR *misc)$/;"	f	class:InputEvents
eventGotoLookup	src/Input/InputEventsTask.cpp	/^InputEvents::eventGotoLookup(gcc_unused const TCHAR *misc)$/;"	f	class:InputEvents
eventLockScreen	src/Input/InputEvents.cpp	/^InputEvents::eventLockScreen(const TCHAR *mode)$/;"	f	class:InputEvents
eventLogger	src/Input/InputEventsActions.cpp	/^InputEvents::eventLogger(const TCHAR *misc)$/;"	f	class:InputEvents
eventMacCready	src/Input/InputEventsTask.cpp	/^InputEvents::eventMacCready(const TCHAR *misc)$/;"	f	class:InputEvents
eventMainMenu	src/Input/InputEventsActions.cpp	/^InputEvents::eventMainMenu(gcc_unused const TCHAR *misc)$/;"	f	class:InputEvents
eventMarkLocation	src/Input/InputEventsActions.cpp	/^InputEvents::eventMarkLocation(const TCHAR *misc)$/;"	f	class:InputEvents
eventMode	src/Input/InputEventsActions.cpp	/^InputEvents::eventMode(const TCHAR *misc)$/;"	f	class:InputEvents
eventNearestAirspaceDetails	src/Input/InputEventsAirspace.cpp	/^InputEvents::eventNearestAirspaceDetails(gcc_unused const TCHAR *misc)$/;"	f	class:InputEvents
eventNearestMapItems	src/Input/InputEventsActions.cpp	/^InputEvents::eventNearestMapItems(gcc_unused const TCHAR *misc)$/;"	f	class:InputEvents
eventNearestWaypointDetails	src/Input/InputEventsActions.cpp	/^InputEvents::eventNearestWaypointDetails(gcc_unused const TCHAR *misc)$/;"	f	class:InputEvents
eventNull	src/Input/InputEventsActions.cpp	/^InputEvents::eventNull(gcc_unused const TCHAR *misc)$/;"	f	class:InputEvents
eventOrientation	src/Input/InputEventsSettings.cpp	/^InputEvents::eventOrientation(const TCHAR *misc)$/;"	f	class:InputEvents
eventPage	src/Input/InputEventsPage.cpp	/^InputEvents::eventPage(const TCHAR *misc)$/;"	f	class:InputEvents
eventPan	src/Input/InputEventsMap.cpp	/^InputEvents::eventPan(const TCHAR *misc)$/;"	f	class:InputEvents
eventPlaySound	src/Input/InputEventsActions.cpp	/^InputEvents::eventPlaySound(const TCHAR *misc)$/;"	f	class:InputEvents
eventProfileLoad	src/Input/InputEventsSettings.cpp	/^InputEvents::eventProfileLoad(const TCHAR *misc)$/;"	f	class:InputEvents
eventProfileSave	src/Input/InputEventsSettings.cpp	/^InputEvents::eventProfileSave(const TCHAR *misc)$/;"	f	class:InputEvents
eventQuickMenu	src/Input/InputEventsActions.cpp	/^InputEvents::eventQuickMenu(gcc_unused const TCHAR *misc)$/;"	f	class:InputEvents
eventRepeatStatusMessage	src/Input/InputEventsActions.cpp	/^InputEvents::eventRepeatStatusMessage(gcc_unused const TCHAR *misc)$/;"	f	class:InputEvents
eventResetTask	src/Input/InputEventsTask.cpp	/^InputEvents::eventResetTask(const TCHAR *misc)$/;"	f	class:InputEvents
eventRun	src/Input/InputEventsActions.cpp	/^InputEvents::eventRun(const TCHAR *misc)$/;"	f	class:InputEvents
eventRunLuaFile	src/Input/InputEventsLua.cpp	/^InputEvents::eventRunLuaFile(const TCHAR *misc)$/;"	f	class:InputEvents
eventScreenModes	src/Input/InputEventsActions.cpp	/^InputEvents::eventScreenModes(const TCHAR *misc)$/;"	f	class:InputEvents
eventSendNMEA	src/Input/InputEventsDevice.cpp	/^InputEvents::eventSendNMEA(const TCHAR *misc)$/;"	f	class:InputEvents
eventSendNMEAPort1	src/Input/InputEventsDevice.cpp	/^InputEvents::eventSendNMEAPort1(const TCHAR *misc)$/;"	f	class:InputEvents
eventSendNMEAPort2	src/Input/InputEventsDevice.cpp	/^InputEvents::eventSendNMEAPort2(const TCHAR *misc)$/;"	f	class:InputEvents
eventSetup	src/Input/InputEventsActions.cpp	/^InputEvents::eventSetup(const TCHAR *misc)$/;"	f	class:InputEvents
eventSnailTrail	src/Input/InputEventsSettings.cpp	/^InputEvents::eventSnailTrail(const TCHAR *misc)$/;"	f	class:InputEvents
eventSounds	src/Input/InputEventsSettings.cpp	/^InputEvents::eventSounds(const TCHAR *misc)$/;"	f	class:InputEvents
eventStatus	src/Input/InputEventsActions.cpp	/^InputEvents::eventStatus(const TCHAR *misc)$/;"	f	class:InputEvents
eventStatusMessage	src/Input/InputEventsActions.cpp	/^InputEvents::eventStatusMessage(const TCHAR *misc)$/;"	f	class:InputEvents
eventTaskLoad	src/Input/InputEventsTask.cpp	/^InputEvents::eventTaskLoad(const TCHAR *misc)$/;"	f	class:InputEvents
eventTaskSave	src/Input/InputEventsTask.cpp	/^InputEvents::eventTaskSave(const TCHAR *misc)$/;"	f	class:InputEvents
eventTaskTransition	src/Input/InputEventsTask.cpp	/^InputEvents::eventTaskTransition(const TCHAR *misc)$/;"	f	class:InputEvents
eventTerrainTopography	src/Input/InputEventsSettings.cpp	/^InputEvents::eventTerrainTopography(const TCHAR *misc)$/;"	f	class:InputEvents
eventTerrainTopology	src/Input/InputEventsSettings.cpp	/^InputEvents::eventTerrainTopology(const TCHAR *misc)$/;"	f	class:InputEvents
eventThermalAssistant	src/Input/InputEventsThermalAssistant.cpp	/^InputEvents::eventThermalAssistant(gcc_unused const TCHAR *misc)$/;"	f	class:InputEvents
eventTraffic	src/Input/InputEventsTraffic.cpp	/^InputEvents::eventTraffic(const TCHAR *misc)$/;"	f	class:InputEvents
eventUserDisplayModeForce	src/Input/InputEventsActions.cpp	/^InputEvents::eventUserDisplayModeForce(const TCHAR *misc)$/;"	f	class:InputEvents
eventWaypointDetails	src/Input/InputEventsActions.cpp	/^InputEvents::eventWaypointDetails(const TCHAR *misc)$/;"	f	class:InputEvents
eventWaypointEditor	src/Input/InputEventsActions.cpp	/^InputEvents::eventWaypointEditor(const TCHAR *misc)$/;"	f	class:InputEvents
eventWeather	src/Input/InputEventsActions.cpp	/^InputEvents::eventWeather(const TCHAR *misc)$/;"	f	class:InputEvents
eventZoom	src/Input/InputEventsMap.cpp	/^InputEvents::eventZoom(const TCHAR* misc)$/;"	f	class:InputEvents
event_enum_names	src/lua/InputEvent.cpp	/^static const char* event_enum_names[] = {$/;"	v	file:
event_id	src/Input/InputParser.cpp	/^  unsigned event_id, location;$/;"	m	struct:EventBuilder	file:
event_loop	src/Audio/ALSAPCMPlayer.cpp	/^  :event_loop(_event_loop)$/;"	f
event_loop	src/Audio/ALSAPCMPlayer.hpp	/^  EventLoop &event_loop;$/;"	m	class:ALSAPCMPlayer
event_loop	src/Device/Descriptor.hpp	/^  EventLoop &event_loop;$/;"	m	class:final
event_loop	src/ui/event/poll/Queue.hpp	/^  ::EventLoop event_loop;$/;"	m	class:DisplayOrientation::final
event_queue	src/ui/event/Globals.cpp	/^EventQueue *event_queue;$/;"	m	namespace:UI	file:
event_set	src/event/WinSelectBackend.hxx	/^	SocketSet event_set[2];$/;"	m	class:WinSelectBackend
event_store_enum	src/lua/InputEvent.cpp	/^static LuaEventRegistry<unsigned> event_store_enum;$/;"	v	file:
event_store_gesture	src/lua/InputEvent.cpp	/^static LuaEventRegistry<const tstring> event_store_gesture;$/;"	v	file:
event_store_key	src/lua/InputEvent.cpp	/^static LuaEventRegistry<unsigned> event_store_key;$/;"	v	file:
events	src/Input/InputConfig.hpp	/^  TrivialArray<Event, MAX_EVENTS> events;$/;"	m	struct:InputConfig
events	src/event/EpollBackend.hxx	/^	std::array<epoll_event, 16> events;$/;"	m	class:EpollBackendResult
events	src/event/PollResultGeneric.hxx	/^		unsigned events;$/;"	m	struct:PollResultGeneric::Item
events	src/event/WinSelectBackend.hxx	/^		unsigned events = 0;$/;"	m	struct:WinSelectBackend::Item
events	src/ui/event/android/Queue.hpp	/^  std::queue<Event> events;$/;"	m	class:UI::EventQueue
events	src/ui/event/poll/Queue.hpp	/^  std::queue<Event> events;$/;"	m	class:DisplayOrientation::final
ewDecelTpIndex	src/Device/Driver/EW.cpp	/^  int ewDecelTpIndex;$/;"	m	class:EWDevice	file:
ew_driver	src/Device/Driver/EW.cpp	/^const struct DeviceRegister ew_driver = {$/;"	v	typeref:struct:DeviceRegister
ew_microrecorder_driver	src/Device/Driver/EWMicroRecorder.cpp	/^const struct DeviceRegister ew_microrecorder_driver = {$/;"	v	typeref:struct:DeviceRegister
exception	src/Job/Async.hpp	/^  std::exception_ptr exception;$/;"	m	class:final
exception	src/Job/Thread.hpp	/^  std::exception_ptr exception;$/;"	m	class:JobThread
exception	src/event/Call.cxx	/^	std::exception_ptr exception;$/;"	m	class:final	file:
exchange	src/io/FileReader.hxx	/^		 handle(std::exchange(other.handle, INVALID_HANDLE_VALUE)) {}$/;"	f	class:final
exchange	src/java/Ref.hxx	/^		 value(std::exchange(src.value, nullptr)) {}$/;"	f	class:Java::LocalRef
exchange	src/net/UniqueSocketDescriptor.hxx	/^		:SocketDescriptor(std::exchange(other.fd, -1)) {}$/;"	f	class:UniqueSocketDescriptor
exchange	src/net/http/Easy.hxx	/^		:handle(std::exchange(src.handle, nullptr)) {}$/;"	f	class:CurlEasy
exchange	src/net/http/Multi.hxx	/^		:handle(std::exchange(src.handle, nullptr)) {}$/;"	f	class:CurlMulti
exchange	src/net/http/Slist.hxx	/^		:head(std::exchange(src.head, nullptr)) {}$/;"	f	class:CurlSlist
exchange	src/util/AllocatedArray.hxx	/^		:buffer(std::exchange(other.buffer, nullptr)) {}$/;"	f	class:AllocatedArray
exchange	src/util/Cancellable.hxx	/^		:cancellable(std::exchange(src.cancellable, nullptr)) {}$/;"	f	class:CancellablePointer
exclude	src/Device/Dispatcher.hpp	/^  unsigned exclude;$/;"	m	class:final
expected_top	src/lua/Assert.hxx	/^	const int expected_top;$/;"	m	class:Lua::ScopeCheckStack
expert	src/Dialogs/DialogSettings.hpp	/^  bool expert;$/;"	m	struct:DialogSettings
expert	src/Dialogs/Settings/dlgConfiguration.cpp	/^    PixelRect expert, button2, button1;$/;"	m	struct:final::Layout	file:
expert	src/Dialogs/Settings/dlgConfiguration.cpp	/^  CheckBoxControl expert;$/;"	m	class:final	file:
expert	src/Widget/RowFormWidget.hpp	/^    bool expert = false;$/;"	m	struct:RowFormWidget::Row
expire_timer	src/Cloud/Main.cpp	/^  CoarseTimerEvent save_timer, expire_timer;$/;"	m	class:final	file:
expired	src/Engine/Airspace/AirspaceWarning.hpp	/^  bool expired;$/;"	m	class:AirspaceWarning
expired_last	src/Engine/Airspace/AirspaceWarning.hpp	/^  bool expired_last;$/;"	m	class:AirspaceWarning
expr	src/Topography/shapelib/mapserver.h	/^    expressionObj *expr; \/* expression to be evaluated (contains tokens) *\/$/;"	m	struct:__anon29
exprBindings	src/Topography/shapelib/mapserver.h	/^    expressionObj exprBindings[MS_LABEL_BINDING_LENGTH];$/;"	m	struct:labelObj
exprBindings	src/Topography/shapelib/mapserver.h	/^    expressionObj exprBindings[MS_STYLE_BINDING_LENGTH];$/;"	m	struct:styleObj
expression	src/Topography/shapelib/mapserver.h	/^    expressionObj expression; \/* the expression to be matched *\/$/;"	m	struct:classObj
expression	src/Topography/shapelib/mapserver.h	/^    expressionObj expression;$/;"	m	struct:labelObj
expressionObj	src/Topography/shapelib/mapserver.h	/^  } expressionObj;$/;"	t	typeref:struct:__anon28
ext	src/Terrain/jasper/jas_image.h	/^	char *ext;$/;"	m	struct:__anon104
ext_config	src/Device/Driver/LX/LXN.hpp	/^    const struct ExtConfig *ext_config;$/;"	m	union:LXN::Packet	typeref:struct:LXN::Packet::ExtConfig
ext_master_ctl_has_switch	src/Audio/VolumeController.hpp	/^  bool ext_master_ctl_has_vol, ext_master_ctl_has_switch;$/;"	m	class:final
ext_master_ctl_has_vol	src/Audio/VolumeController.hpp	/^  bool ext_master_ctl_has_vol, ext_master_ctl_has_switch;$/;"	m	class:final
ext_master_max	src/Audio/VolumeController.hpp	/^  long ext_master_min, ext_master_max, ext_master_zero_db;$/;"	m	class:final
ext_master_min	src/Audio/VolumeController.hpp	/^  long ext_master_min, ext_master_max, ext_master_zero_db;$/;"	m	class:final
ext_master_volume_ctl	src/Audio/VolumeController.hpp	/^  snd_mixer_elem_t *ext_master_volume_ctl = nullptr;$/;"	m	class:final
ext_master_zero_db	src/Audio/VolumeController.hpp	/^  long ext_master_min, ext_master_max, ext_master_zero_db;$/;"	m	class:final
extension	src/Topography/shapelib/mapserver.h	/^    char *extension;$/;"	m	struct:__anon32
extension_defs	src/Device/Driver/LX/LXN.cpp	/^const struct LXN::ExtensionDefinition LXN::extension_defs[16] = {$/;"	m	class:LXN	typeref:struct:LXN::	file:
extensions	src/Device/Driver/LX/LXN.hpp	/^    struct ExtensionDefinition extensions[16];$/;"	m	struct:LXN::ExtensionConfig	typeref:struct:LXN::ExtensionConfig::ExtensionDefinition
extensions	src/Replay/IgcReplay.hpp	/^  IGCExtensions extensions;$/;"	m	class:IgcReplay
extent	src/Topography/shapelib/mapserver.h	/^    rectObj   extent;$/;"	m	struct:__anon49
extent	src/Topography/shapelib/mapserver.h	/^    rectObj extent; \/* clipping extent *\/$/;"	m	struct:__anon35
extent	src/Topography/shapelib/mapserver.h	/^    rectObj extent; \/* map extent array *\/$/;"	m	struct:mapObj
extent	src/Topography/shapelib/mapserver.h	/^    rectObj extent;$/;"	m	struct:__anon46
extent	src/Topography/shapelib/mapserver.h	/^    rectObj extent;$/;"	m	struct:layerObj
external_trigger_cruise_enabled	src/Computer/Settings.hpp	/^  bool external_trigger_cruise_enabled;$/;"	m	struct:CirclingSettings
external_wind	src/Computer/Wind/Settings.hpp	/^  bool external_wind;$/;"	m	struct:WindSettings
external_wind	src/NMEA/Info.hpp	/^  SpeedVector external_wind;$/;"	m	struct:NMEAInfo
external_wind_available	src/NMEA/Info.hpp	/^  Validity external_wind_available;$/;"	m	struct:NMEAInfo
externalstatus	src/Hardware/Battery.hpp	/^    enum externalstatus{$/;"	g	namespace:Power::External
extra	src/Widget/ArrowPagerWidget.hpp	/^    PixelRect extra;$/;"	m	struct:ArrowPagerWidget::Layout
extra	src/Widget/ArrowPagerWidget.hpp	/^  const std::unique_ptr<Widget> extra;$/;"	m	class:ArrowPagerWidget
extra	src/Widget/TabWidget.hpp	/^    PixelRect tab_display, extra, pager;$/;"	m	struct:TabWidget::Layout
extra	src/Widget/TabWidget.hpp	/^  std::unique_ptr<Widget> extra;$/;"	m	class:TabWidget
extra_position	src/Widget/TabWidget.hpp	/^  PixelRect extra_position;$/;"	m	class:TabWidget
eye_driver	src/Device/Driver/Eye.cpp	/^const struct DeviceRegister eye_driver = {$/;"	v	typeref:struct:DeviceRegister
f	src/event/Call.cxx	/^	const std::function<void()> f;$/;"	m	class:final	file:
f1	src/Geo/Flat/FlatEllipse.hpp	/^  FlatPoint f1, f2, ap;$/;"	m	class:FlatEllipse
f2	src/Geo/Flat/FlatEllipse.hpp	/^  FlatPoint f1, f2, ap;$/;"	m	class:FlatEllipse
face	src/Topography/shapelib/mapserver.h	/^  face_element *face;$/;"	m	struct:__anon59
face	src/ui/canvas/Font.hpp	/^  FT_Face face = nullptr;$/;"	m	class:Font
face_element	src/Topography/shapelib/mapserver.h	/^typedef struct face_element face_element;$/;"	t	typeref:struct:face_element
factor	src/Android/VoltageDevice.hpp	/^  double factor;$/;"	m	class:final
factor_to_user	src/Units/Descriptor.hpp	/^  double factor_to_user;$/;"	m	struct:UnitDescriptor
factory	src/Waypoint/WaypointReaderBase.hpp	/^  const WaypointFactory factory;$/;"	m	class:WaypointReaderBase
factory_mode	src/Engine/Task/Ordered/OrderedTask.hpp	/^  TaskFactoryType factory_mode;$/;"	m	class:final
fai_constraints	src/Engine/Task/Factory/FAITaskFactory.cpp	/^static constexpr TaskFactoryConstraints fai_constraints = {$/;"	v	file:
fai_finish	src/Engine/Task/Factory/Constraints.hpp	/^  bool fai_finish;$/;"	m	struct:TaskFactoryConstraints
fai_finish	src/Engine/Task/Ordered/FinishConstraints.hpp	/^  bool fai_finish;$/;"	m	struct:FinishConstraints
fai_finish	src/Engine/Task/Ordered/StartConstraints.hpp	/^  bool fai_finish;$/;"	m	struct:StartConstraints
fai_finish_height	src/Engine/Task/Ordered/Points/FinishPoint.hpp	/^  double fai_finish_height = 0;$/;"	m	class:final
fai_goal_constraints	src/Engine/Task/Factory/FAIGoalTaskFactory.cpp	/^static constexpr TaskFactoryConstraints fai_goal_constraints = {$/;"	v	file:
fai_or_constraints	src/Engine/Task/Factory/FAIORTaskFactory.cpp	/^static constexpr TaskFactoryConstraints fai_or_constraints = {$/;"	v	file:
fai_triangle	src/Engine/Task/Ordered/Settings.hpp	/^  FAITriangleSettings fai_triangle;$/;"	m	struct:OrderedTaskSettings
fai_triangle_constraints	src/Engine/Task/Factory/FAITriangleTaskFactory.cpp	/^static constexpr TaskFactoryConstraints fai_triangle_constraints = {$/;"	v	file:
fai_triangle_point_invalid	src/Engine/Task/Shapes/FAITrianglePointValidator.hpp	/^  bool fai_triangle_point_invalid;$/;"	m	class:FAITrianglePointValidator
fai_triangle_settings	src/MapSettings.hpp	/^  FAITriangleSettings fai_triangle_settings;$/;"	m	struct:MapSettings
fai_triangle_threshold_list	src/Dialogs/Settings/Panels/ScoringConfigPanel.cpp	/^static constexpr StaticEnumChoice fai_triangle_threshold_list[] = {$/;"	v	file:
failed	src/Dialogs/FileManager.cpp	/^    bool downloading, failed, out_of_date;$/;"	m	struct:ManagedFileListWidget::FileItem	file:
failures	src/Dialogs/FileManager.cpp	/^  std::set<std::string> failures;$/;"	m	class:ManagedFileListWidget	file:
false	src/Dialogs/Airspace/AirspaceCRendererSettingsPanel.cpp	/^  :RowFormWidget(UIGlobals::GetDialogLook()), border_color_changed(false),$/;"	v
false	src/Dialogs/WidgetDialog.cpp	/^   full(false), auto_size(false)$/;"	v
false	src/Dialogs/WidgetDialog.cpp	/^   full(false), auto_size(true)$/;"	v
false	src/Terrain/jasper/jas_types.h	91;"	d
false_text	src/Form/DataField/Boolean.hpp	/^  StaticString<32> false_text;$/;"	m	class:final
fan_counter	src/Engine/Route/ReachFanParms.hpp	/^  unsigned fan_counter = 0;$/;"	m	struct:ReachFanParms
fans	src/MapWindow/MapWindowGlideRange.cpp	/^  ProjectedFanVector fans;$/;"	m	struct:ProjectedFans	file:
fans	src/MapWindow/MapWindowGlideRange.cpp	/^  ProjectedFans fans;$/;"	m	class:final	file:
far_distance	src/NMEA/FlyingState.hpp	/^  double far_distance;$/;"	m	struct:FlyingState
far_location	src/NMEA/FlyingState.hpp	/^  GeoPoint far_location;$/;"	m	struct:FlyingState
fast_forward	src/Replay/Replay.hpp	/^  double fast_forward;$/;"	m	class:final
fast_log_num	src/Computer/LogComputer.hpp	/^  unsigned fast_log_num;$/;"	m	class:LogComputer
fastcosine	src/Math/Angle.hpp	/^  inline double fastcosine() const {$/;"	f	class:Angle
fastsine	src/Math/Angle.hpp	/^  inline double fastsine() const {$/;"	f	class:Angle
fb_cfg	src/ui/window/TopWindow.hpp	/^  GLXFBConfig *fb_cfg;$/;"	m	class:UI::TopWindow
fb_id	src/ui/canvas/egl/TopCanvas.cpp	/^  uint32_t fb_id;$/;"	m	struct:drm_fb	file:
fd	src/Kobo/WPASupplicant.hpp	/^  SocketDescriptor fd;$/;"	m	class:WPASupplicant
fd	src/Terrain/jasper/jas_stream.h	/^	int fd;$/;"	m	struct:__anon98
fd	src/event/SignalMonitor.cxx	/^	SignalFD fd;$/;"	m	class:final	file:
fd	src/event/SocketEvent.hxx	/^		 fd(_fd) {}$/;"	f	class:final
fd	src/event/SocketEvent.hxx	/^	SocketDescriptor fd;$/;"	m	class:final
fd	src/event/WakeFD.hxx	/^	EventFD fd;$/;"	m	class:WakeFD
fd	src/io/FileDescriptor.hxx	/^	explicit constexpr FileDescriptor(int _fd) noexcept:fd(_fd) {}$/;"	f	class:FileDescriptor
fd	src/io/FileDescriptor.hxx	/^	int fd;$/;"	m	class:FileDescriptor
fd	src/io/FileOutputStream.hxx	/^	FileDescriptor fd = FileDescriptor::Undefined();$/;"	m	class:final
fd	src/io/FileReader.hxx	/^	UniqueFileDescriptor fd;$/;"	m	class:final
fd	src/system/EpollFD.hxx	/^	UniqueFileDescriptor fd;$/;"	m	class:EpollFD
fd	src/system/EventFD.hxx	/^	UniqueFileDescriptor fd;$/;"	m	class:EventFD
fd	src/system/SignalFD.hxx	/^	UniqueFileDescriptor fd;$/;"	m	class:SignalFD
fd	src/ui/canvas/custom/TopCanvas.hpp	/^  int fd;$/;"	m	class:DisplayOrientation
fd	src/ui/event/poll/libinput/LibInputHandler.cpp	/^   fd(queue.GetEventLoop(), BIND_THIS_METHOD(OnSocketReady)) {}$/;"	f	namespace:UI
fd	src/ui/event/poll/libinput/LibInputHandler.hpp	/^  SocketEvent fd;$/;"	m	class:UI::final
fd	src/zzip/file.h	/^    int fd;$/;"	m	struct:zzip_file
fd	src/zzip/lib.h	/^    int fd;$/;"	m	struct:zzip_dir
fd	src/zzip/plugin.h	/^    struct zzip_plugin_io fd;$/;"	m	union:_zzip_plugin_io	typeref:struct:_zzip_plugin_io::zzip_plugin_io
fdf_findfield	src/Device/Driver/Volkslogger/dbbconv.cpp	/^DBB::fdf_findfield(uint8_t id) const$/;"	f	class:DBB
fdfcursor	src/Device/Driver/Volkslogger/dbbconv.h	/^  size_t fdfcursor;$/;"	m	class:DBB
fdim	src/Math/Angle.hpp	/^  Angle fdim(const Angle x) const {$/;"	f	class:Angle
featureListNodeObj	src/Topography/shapelib/mapserver.h	/^  } featureListNodeObj;$/;"	t	typeref:struct:listNode
featureListNodeObjPtr	src/Topography/shapelib/mapserver.h	/^  typedef featureListNodeObj * featureListNodeObjPtr;$/;"	t
features	src/Computer/Settings.hpp	/^  FeaturesSettings features;$/;"	m	struct:ComputerSettings
features	src/Topography/shapelib/mapserver.h	/^    featureListNodeObjPtr features; \/* linked list so we don't need a counter *\/$/;"	m	struct:layerObj
fg_color	src/Look/InfoBoxLook.hpp	/^    Color fg_color;$/;"	m	struct:InfoBoxLook::__anon17
fgrep	src/LocalPath.cpp	/^fgrep(const char *fname, const char *string, const char *string2 = nullptr)$/;"	f	file:
field_marginal_icon	src/Look/WaypointLook.hpp	/^  MaskedIcon field_marginal_icon, field_reachable_icon, field_unreachable_icon;$/;"	m	struct:WaypointLook
field_reachable_icon	src/Look/WaypointLook.hpp	/^  MaskedIcon field_marginal_icon, field_reachable_icon, field_unreachable_icon;$/;"	m	struct:WaypointLook
field_unreachable_icon	src/Look/WaypointLook.hpp	/^  MaskedIcon field_marginal_icon, field_reachable_icon, field_unreachable_icon;$/;"	m	struct:WaypointLook
file	src/IGC/IGCWriter.hpp	/^  FileOutputStream file;$/;"	m	class:IGCWriter
file	src/Language/MOLoader.hpp	/^  MOFile *file;$/;"	m	class:MOLoader
file	src/Topography/TopographyFile.hpp	/^  shapefileObj file;$/;"	m	class:TopographyFile
file	src/Topography/TopographyFileRenderer.hpp	/^  const TopographyFile &file;$/;"	m	class:final
file	src/io/FileHandle.hpp	/^  FILE *file;$/;"	m	class:FileHandle
file	src/io/FileLineReader.hpp	/^  FileReader file;$/;"	m	class:FileLineReaderA
file	src/io/StdioOutputStream.hxx	/^	FILE *const file;$/;"	m	class:final
file	src/io/StdioOutputStream.hxx	/^	explicit StdioOutputStream(FILE *_file) noexcept:file(_file) {}$/;"	f	class:final
file	src/io/TextWriter.hpp	/^  FileHandle file;$/;"	m	class:TextWriter
file	src/io/ZipReader.hpp	/^  struct zzip_file *const file;$/;"	m	class:final
file_cache	src/Components.cpp	/^FileCache *file_cache;$/;"	v
file_close	src/Terrain/jasper/base/jas_stream.c	/^static int file_close(jas_stream_obj_t *obj)$/;"	f	file:
file_list	src/Dialogs/Waypoint/dlgWaypointDetails.cpp	/^    PixelRect file_list;$/;"	m	struct:final::Layout	file:
file_list_item_height	src/Dialogs/Waypoint/dlgWaypointDetails.cpp	/^    unsigned file_list_item_height;$/;"	m	struct:final::Layout	file:
file_offset	src/Terrain/RasterTileCache.hpp	/^    uint32_t file_offset;$/;"	m	struct:RasterTileCache::MarkerSegmentInfo
file_read	src/Terrain/jasper/base/jas_stream.c	/^static int file_read(jas_stream_obj_t *obj, char *buf, unsigned cnt)$/;"	f	file:
file_seek	src/Terrain/jasper/base/jas_stream.c	/^static long file_seek(jas_stream_obj_t *obj, long offset, int origin)$/;"	f	file:
file_type	src/Dialogs/DownloadFilePicker.cpp	/^  const FileType file_type;$/;"	m	class:final	file:
file_type	src/Form/DataField/File.hpp	/^  FileType file_type;$/;"	m	class:final
file_write	src/Terrain/jasper/base/jas_stream.c	/^static int file_write(jas_stream_obj_t *obj, const char *buf, unsigned cnt)$/;"	f	file:
fileext	src/zzip/lib.h	/^    zzip_strings_t* fileext;      \/* list of fileext to test for *\/$/;"	m	struct:zzip_dir
filename	src/Form/DataField/File.hpp	/^    Path filename;$/;"	m	struct:final::Item
filename	src/Logger/LoggerImpl.hpp	/^  AllocatedPath filename;$/;"	m	class:LoggerImpl
filename	src/Task/TaskStore.hpp	/^    AllocatedPath filename;$/;"	m	struct:TaskStore::Item
filename	src/Topography/shapelib/mapserver.h	/^    char *filename;$/;"	m	struct:__anon24
filename	src/Topography/shapelib/mapserver.h	/^    char *filename;$/;"	m	struct:__anon45
files	src/Device/Driver/CAI302/Protocol.hpp	/^    FileInfo files[8];$/;"	m	struct:CAI302::FileList
files	src/Form/DataField/File.hpp	/^  StaticArray<Item, MAX_FILES> files;$/;"	m	class:final
files	src/Repository/FileRepository.hpp	/^  FileList files;$/;"	m	struct:FileRepository
files	src/Topography/TopographyRenderer.hpp	/^  StaticArray<TopographyFileRenderer *, TopographyStore::MAXTOPOGRAPHY> files;$/;"	m	class:TopographyRenderer
files	src/Topography/TopographyStore.hpp	/^  StaticArray<TopographyFile *, MAXTOPOGRAPHY> files;$/;"	m	class:TopographyStore
files_embed	src/Engine/Waypoint/Waypoint.hpp	/^  std::forward_list<tstring> files_embed;$/;"	m	struct:Waypoint
files_external	src/Engine/Waypoint/Waypoint.hpp	/^  std::forward_list<tstring> files_external;$/;"	m	struct:Waypoint
files_pages	src/Dialogs/Settings/dlgConfiguration.cpp	/^static constexpr TabMenuPage files_pages[] = {$/;"	v	file:
filesize	src/zzip/plugin.h	/^    zzip_off_t   (*filesize)(int fd);$/;"	m	struct:zzip_plugin_io
fill	src/Device/Driver/ATR833.cpp	/^  uint8_t fill;$/;"	m	class:ATRBuffer	file:
fill_brush_changed	src/Dialogs/Airspace/AirspaceCRendererSettingsPanel.hpp	/^  bool fill_brush_changed;$/;"	m	class:AirspaceClassRendererSettingsPanel
fill_cache	src/Renderer/AirspaceLabelRenderer.hpp	/^  TransparentRendererCache fill_cache;$/;"	m	class:AirspaceLabelRenderer
fill_cache	src/Renderer/AirspaceRenderer.hpp	/^  TransparentRendererCache fill_cache;$/;"	m	class:AirspaceRenderer
fill_color	src/Look/AirspaceLook.hpp	/^  Color fill_color;$/;"	m	struct:AirspaceClassLook
fill_color	src/Renderer/AirspaceRendererSettings.hpp	/^  RGB8Color fill_color;$/;"	m	struct:AirspaceClassRendererSettings
fill_color_changed	src/Dialogs/Airspace/AirspaceCRendererSettingsPanel.hpp	/^  bool fill_color_changed;$/;"	m	class:AirspaceClassRendererSettingsPanel
fill_mode	src/Renderer/AirspaceRendererSettings.hpp	/^  } fill_mode;$/;"	m	struct:AirspaceClassRendererSettings	typeref:class:AirspaceClassRendererSettings::FillMode
fill_mode	src/Renderer/AirspaceRendererSettings.hpp	/^  } fill_mode;$/;"	m	struct:AirspaceRendererSettings	typeref:class:AirspaceRendererSettings::FillMode
filled	src/Audio/AndroidPCMPlayer.hpp	/^  bool filled;$/;"	m	class:AndroidPCMPlayer
filter	src/Engine/Airspace/AirspaceSorter.cpp	/^  const AirspaceFilterData &filter;$/;"	m	class:final	file:
filter	src/Topography/shapelib/mapserver.h	/^    CompositingFilter *filter;$/;"	m	struct:_LayerCompositer
filter	src/Topography/shapelib/mapserver.h	/^    char *filter;$/;"	m	struct:_CompositingFilter
filter	src/Topography/shapelib/mapserver.h	/^    char *filter;$/;"	m	struct:__anon57
filter	src/Topography/shapelib/mapserver.h	/^    expressionObj filter; \/* by filter *\/$/;"	m	struct:__anon33
filter	src/Topography/shapelib/mapserver.h	/^    expressionObj filter; \/* connection specific attribute filter *\/$/;"	m	struct:layerObj
filter	src/Topography/shapelib/mapserver.h	/^    expressionObj filter; \/* expression for filtering the shapes *\/$/;"	m	struct:__anon30
filter	src/Waypoint/WaypointListBuilder.hpp	/^  const WaypointFilter &filter;$/;"	m	class:final
filter_	src/Math/SelfTimingKalmanFilter1d.hpp	/^  KalmanFilter1d filter_;$/;"	m	class:SelfTimingKalmanFilter1d
filter_time	src/Dialogs/Device/Vega/AudioModeParameters.hpp	/^static constexpr StaticEnumChoice filter_time[] = {$/;"	v
filter_widget	src/Dialogs/Airspace/AirspaceList.cpp	/^  AirspaceFilterWidget &filter_widget;$/;"	m	class:final	file:
filter_widget	src/Dialogs/Traffic/TrafficList.cpp	/^  const RowFormWidget *const filter_widget;$/;"	m	class:TrafficListWidget	file:
filter_widget	src/Dialogs/Waypoint/WaypointList.cpp	/^  WaypointFilterWidget &filter_widget;$/;"	m	class:final	file:
filteritem	src/Topography/shapelib/mapserver.h	/^    char *filteritem;$/;"	m	struct:__anon33
filteritem	src/Topography/shapelib/mapserver.h	/^    char *filteritem;$/;"	m	struct:__anon57
filteritem	src/Topography/shapelib/mapserver.h	/^    char *filteritem;$/;"	m	struct:layerObj
filteritemindex	src/Topography/shapelib/mapserver.h	/^    int filteritemindex;$/;"	m	struct:layerObj
final	src/Android/BMP085Device.hpp	/^class BMP085Device final : private BMP085Listener {$/;"	c
final	src/Android/I2CbaroDevice.hpp	/^class I2CbaroDevice final : private I2CbaroListener {$/;"	c
final	src/Android/NunchuckDevice.hpp	/^class NunchuckDevice final : private NunchuckListener {$/;"	c
final	src/Android/VoltageDevice.hpp	/^class VoltageDevice final : private VoltageListener {$/;"	c
final	src/Audio/GlobalPCMMixer.hpp	/^class ScopeGlobalPCMMixer final {$/;"	c
final	src/Audio/GlobalPCMResourcePlayer.hpp	/^class ScopeGlobalPCMResourcePlayer final {$/;"	c
final	src/Audio/GlobalVolumeController.hpp	/^class ScopeGlobalVolumeController final {$/;"	c
final	src/Audio/PCMMixer.hpp	/^class PCMMixer final {$/;"	c
final	src/Audio/VarioSynthesiser.hpp	/^class VarioSynthesiser final : public ToneSynthesiser {$/;"	c
final	src/Audio/VolumeController.hpp	/^class VolumeController final {$/;"	c
final	src/CalculationThread.hpp	/^class CalculationThread final : public WorkerThread {$/;"	c
final	src/Cloud/Main.cpp	/^class CloudServer final$/;"	c	file:
final	src/Computer/ConditionMonitor/ConditionMonitorAATTime.hpp	/^class ConditionMonitorAATTime final : public ConditionMonitor {$/;"	c
final	src/Computer/ConditionMonitor/ConditionMonitorFinalGlide.hpp	/^class ConditionMonitorFinalGlide final : public ConditionMonitor {$/;"	c
final	src/Computer/ConditionMonitor/ConditionMonitorGlideTerrain.hpp	/^class ConditionMonitorGlideTerrain final : public ConditionMonitor {$/;"	c
final	src/Computer/ConditionMonitor/ConditionMonitorLandableReachable.hpp	/^class ConditionMonitorLandableReachable final : public ConditionMonitor {$/;"	c
final	src/Computer/ConditionMonitor/ConditionMonitorSunset.hpp	/^class ConditionMonitorSunset final : public ConditionMonitor {$/;"	c
final	src/Computer/ConditionMonitor/ConditionMonitorWind.hpp	/^class ConditionMonitorWind final : public ConditionMonitor {$/;"	c
final	src/Computer/Events.hpp	/^class GlideComputerEvents final : public NullBlackboardListener {$/;"	c
final	src/Computer/GlideComputerInterface.hpp	/^class GlideComputerTaskEvents final : public TaskEvents {$/;"	c
final	src/CrossSection/AirspaceXSRenderer.cpp	/^class AirspaceIntersectionVisitorSlice final$/;"	c	file:
final	src/Device/Descriptor.cpp	/^class OpenDeviceJob final : public Job {$/;"	c	file:
final	src/Device/Descriptor.hpp	/^class DeviceDescriptor final : PortListener, PortLineSplitter {$/;"	c
final	src/Device/Dispatcher.hpp	/^class DeviceDispatcher final : public PortLineHandler {$/;"	c
final	src/Device/Driver/ATR833.cpp	/^class ATR833Device final : public AbstractDevice {$/;"	c	file:
final	src/Device/Driver/CaiLNav.cpp	/^class CaiLNavDevice final : public AbstractDevice {$/;"	c	file:
final	src/Device/Driver/KRT2.cpp	/^class KRT2Device final : public AbstractDevice {$/;"	c	file:
final	src/Device/Driver/XCTracer/Internal.hpp	/^class XCTracerDevice final : public AbstractDevice {$/;"	c
final	src/Device/MultipleDevices.hpp	/^class MultipleDevices final : PortListener {$/;"	c
final	src/Device/Port/DumpPort.hpp	/^class DumpPort final : public Port {$/;"	c
final	src/Device/Port/TCPClientPort.hpp	/^class TCPClientPort final$/;"	c
final	src/Device/Port/TCPPort.hpp	/^class TCPPort final : public BufferedPort$/;"	c
final	src/Device/Port/UDPPort.hpp	/^class UDPPort final : public BufferedPort$/;"	c
final	src/Dialogs/Airspace/AirspaceList.cpp	/^class AirspaceFilterWidget final : public RowFormWidget {$/;"	c	file:
final	src/Dialogs/Airspace/AirspaceList.cpp	/^class AirspaceListButtons final : public RowFormWidget {$/;"	c	file:
final	src/Dialogs/Airspace/AirspaceList.cpp	/^class AirspaceListWidget final$/;"	c	file:
final	src/Dialogs/Airspace/dlgAirspaceDetails.cpp	/^class AirspaceDetailsWidget final$/;"	c	file:
final	src/Dialogs/Airspace/dlgAirspaceWarnings.cpp	/^class AirspaceWarningListWidget final$/;"	c	file:
final	src/Dialogs/Device/BlueFly/BlueFlyConfigurationDialog.cpp	/^class BlueFlyConfigurationWidget final$/;"	c	file:
final	src/Dialogs/Device/CAI302/UnitsEditor.hpp	/^class CAI302UnitsEditor final : public RowFormWidget {$/;"	c
final	src/Dialogs/Device/DeviceListDialog.cpp	/^class DeviceListWidget final$/;"	c	file:
final	src/Dialogs/Device/FLARM/ConfigWidget.hpp	/^class FLARMConfigWidget final : public RowFormWidget {$/;"	c
final	src/Dialogs/Device/LX/ManageNanoDialog.cpp	/^class ManageNanoWidget final$/;"	c	file:
final	src/Dialogs/Device/LX/ManageV7Dialog.cpp	/^class ManageV7Widget final$/;"	c	file:
final	src/Dialogs/Device/LX/NanoConfigWidget.hpp	/^class NanoConfigWidget final : public RowFormWidget {$/;"	c
final	src/Dialogs/Device/LX/V7ConfigWidget.hpp	/^class V7ConfigWidget final : public RowFormWidget {$/;"	c
final	src/Dialogs/Device/ManageCAI302Dialog.cpp	/^class ManageCAI302Widget final$/;"	c	file:
final	src/Dialogs/Device/ManageFlarmDialog.cpp	/^class ManageFLARMWidget final$/;"	c	file:
final	src/Dialogs/Device/PortMonitor.cpp	/^class PortMonitorWidget final : public WindowWidget {$/;"	c	file:
final	src/Dialogs/Device/PortMonitor.cpp	/^class PortTerminalBridge final : public DataHandler {$/;"	c	file:
final	src/Dialogs/Device/ScanBluetoothLeDialog.cpp	/^class ScanBluetoothLeWidget final$/;"	c	file:
final	src/Dialogs/Device/Vega/VegaConfigurationDialog.cpp	/^class VegaConfigurationExtraButtons final$/;"	c	file:
final	src/Dialogs/Device/Vega/VegaDemoDialog.cpp	/^class VegaDemoWidget final$/;"	c	file:
final	src/Dialogs/DownloadFilePicker.cpp	/^class DownloadFilePickerWidget final$/;"	c	file:
final	src/Dialogs/DownloadFilePicker.cpp	/^class DownloadProgress final : Net::DownloadListener {$/;"	c	file:
final	src/Dialogs/FileManager.cpp	/^class AddFileListItemRenderer final : public ListItemRenderer {$/;"	c	file:
final	src/Dialogs/KnobTextEntry.cpp	/^class KnobTextEntryWidget final : public WindowWidget {$/;"	c	file:
final	src/Dialogs/KnobTextEntry.cpp	/^class KnobTextEntryWindow final : public PaintWindow {$/;"	c	file:
final	src/Dialogs/MapItemListDialog.cpp	/^class MapItemListWidget final$/;"	c	file:
final	src/Dialogs/MapItemListSettingsPanel.hpp	/^class MapItemListSettingsPanel final : public RowFormWidget {$/;"	c
final	src/Dialogs/Plane/PlaneDetailsDialog.cpp	/^class PlaneEditWidget final$/;"	c	file:
final	src/Dialogs/Plane/PlaneListDialog.cpp	/^class PlaneListWidget final$/;"	c	file:
final	src/Dialogs/Plane/PlanePolarDialog.cpp	/^class PlanePolarWidget final$/;"	c	file:
final	src/Dialogs/ProfileListDialog.cpp	/^class ProfileListWidget final$/;"	c	file:
final	src/Dialogs/ReplayDialog.cpp	/^class ReplayControlWidget final$/;"	c	file:
final	src/Dialogs/Settings/Panels/AirspaceConfigPanel.cpp	/^class AirspaceConfigPanel final$/;"	c	file:
final	src/Dialogs/Settings/Panels/AudioConfigPanel.cpp	/^class AudioConfigPanel final : public RowFormWidget {$/;"	c	file:
final	src/Dialogs/Settings/Panels/AudioVarioConfigPanel.cpp	/^class AudioVarioConfigPanel final : public RowFormWidget {$/;"	c	file:
final	src/Dialogs/Settings/Panels/CloudConfigPanel.cpp	/^class CloudConfigPanel final$/;"	c	file:
final	src/Dialogs/Settings/Panels/GaugesConfigPanel.cpp	/^class GaugesConfigPanel final : public RowFormWidget, DataFieldListener {$/;"	c	file:
final	src/Dialogs/Settings/Panels/GlideComputerConfigPanel.cpp	/^class GlideComputerConfigPanel final : public RowFormWidget {$/;"	c	file:
final	src/Dialogs/Settings/Panels/InfoBoxesConfigPanel.cpp	/^class InfoBoxesConfigPanel final$/;"	c	file:
final	src/Dialogs/Settings/Panels/InterfaceConfigPanel.cpp	/^class InterfaceConfigPanel final : public RowFormWidget {$/;"	c	file:
final	src/Dialogs/Settings/Panels/LayoutConfigPanel.cpp	/^class LayoutConfigPanel final : public RowFormWidget {$/;"	c	file:
final	src/Dialogs/Settings/Panels/LoggerConfigPanel.cpp	/^class LoggerConfigPanel final : public RowFormWidget {$/;"	c	file:
final	src/Dialogs/Settings/Panels/MapDisplayConfigPanel.cpp	/^class MapDisplayConfigPanel final$/;"	c	file:
final	src/Dialogs/Settings/Panels/PagesConfigPanel.cpp	/^class PageLayoutEditWidget final$/;"	c	file:
final	src/Dialogs/Settings/Panels/RouteConfigPanel.cpp	/^class RouteConfigPanel final$/;"	c	file:
final	src/Dialogs/Settings/Panels/SafetyFactorsConfigPanel.cpp	/^class SafetyFactorsConfigPanel final : public RowFormWidget {$/;"	c	file:
final	src/Dialogs/Settings/Panels/ScoringConfigPanel.cpp	/^class ScoringConfigPanel final$/;"	c	file:
final	src/Dialogs/Settings/Panels/SiteConfigPanel.cpp	/^class SiteConfigPanel final : public RowFormWidget {$/;"	c	file:
final	src/Dialogs/Settings/Panels/SymbolsConfigPanel.cpp	/^class SymbolsConfigPanel final$/;"	c	file:
final	src/Dialogs/Settings/Panels/TaskDefaultsConfigPanel.cpp	/^class TaskDefaultsConfigPanel final$/;"	c	file:
final	src/Dialogs/Settings/Panels/TaskRulesConfigPanel.cpp	/^class TaskRulesConfigPanel final : public RowFormWidget {$/;"	c	file:
final	src/Dialogs/Settings/Panels/TerrainDisplayConfigPanel.cpp	/^class TerrainDisplayConfigPanel final$/;"	c	file:
final	src/Dialogs/Settings/Panels/TimeConfigPanel.cpp	/^class TimeConfigPanel final$/;"	c	file:
final	src/Dialogs/Settings/Panels/TrackingConfigPanel.cpp	/^class TrackingConfigPanel final$/;"	c	file:
final	src/Dialogs/Settings/Panels/UnitsConfigPanel.cpp	/^class UnitsConfigPanel final$/;"	c	file:
final	src/Dialogs/Settings/Panels/VarioConfigPanel.cpp	/^class VarioConfigPanel final : public RowFormWidget {$/;"	c	file:
final	src/Dialogs/Settings/Panels/WaypointDisplayConfigPanel.cpp	/^class WaypointDisplayConfigPanel final$/;"	c	file:
final	src/Dialogs/Settings/Panels/WeatherConfigPanel.cpp	/^class WeatherConfigPanel final$/;"	c	file:
final	src/Dialogs/Settings/WindSettingsPanel.hpp	/^class WindSettingsPanel final$/;"	c
final	src/Dialogs/Settings/dlgBasicSettings.cpp	/^class FlightSetupPanel final$/;"	c	file:
final	src/Dialogs/Settings/dlgConfigInfoboxes.cpp	/^class InfoBoxesConfigWidget final$/;"	c	file:
final	src/Dialogs/Settings/dlgConfiguration.cpp	/^class ConfigurationExtraButtons final$/;"	c	file:
final	src/Dialogs/SimulatorPromptWindow.hpp	/^class SimulatorPromptWindow final : public ContainerWindow {$/;"	c
final	src/Dialogs/StartupDialog.cpp	/^class LogoQuitWidget final : public NullWidget {$/;"	c	file:
final	src/Dialogs/StartupDialog.cpp	/^class LogoWindow final : public PaintWindow {$/;"	c	file:
final	src/Dialogs/StartupDialog.cpp	/^class StartupWidget final : public RowFormWidget {$/;"	c	file:
final	src/Dialogs/StatusPanels/SystemStatusPanel.hpp	/^class SystemStatusPanel final$/;"	c
final	src/Dialogs/Task/AlternatesListDialog.cpp	/^class AlternatesListWidget final$/;"	c	file:
final	src/Dialogs/Task/Manager/Internal.hpp	/^class TaskManagerDialog final : public TabWidget {$/;"	c
final	src/Dialogs/Task/Manager/TaskClosePanel.hpp	/^class TaskClosePanel final : public NullWidget {$/;"	c
final	src/Dialogs/Task/Manager/TaskListPanel.cpp	/^class TaskListPanel final$/;"	c	file:
final	src/Dialogs/Task/Manager/TaskMiscPanel.hpp	/^class TaskMiscPanel final : public PagerWidget {$/;"	c
final	src/Dialogs/Task/Manager/TaskPropertiesPanel.hpp	/^class TaskPropertiesPanel final$/;"	c
final	src/Dialogs/Task/MutateTaskPointDialog.cpp	/^class MutateTaskPointRenderer final : public ListItemRenderer {$/;"	c	file:
final	src/Dialogs/Task/TaskPointDialog.cpp	/^class TaskPointWidget final$/;"	c	file:
final	src/Dialogs/Traffic/FlarmTrafficDetails.cpp	/^class FlarmTrafficDetailsWidget final$/;"	c	file:
final	src/Dialogs/Traffic/TeamCodeDialog.cpp	/^class TeamCodeWidget final$/;"	c	file:
final	src/Dialogs/Waypoint/Manager.cpp	/^class WaypointManagerWidget final$/;"	c	file:
final	src/Dialogs/Waypoint/WaypointCommandsWidget.hpp	/^class WaypointCommandsWidget final$/;"	c
final	src/Dialogs/Waypoint/WaypointList.cpp	/^class WaypointListWidget final$/;"	c	file:
final	src/Dialogs/Waypoint/dlgWaypointDetails.cpp	/^class WaypointDetailsWidget final$/;"	c	file:
final	src/Dialogs/Waypoint/dlgWaypointDetails.cpp	/^class WaypointExternalFileListHandler final$/;"	c	file:
final	src/Dialogs/Waypoint/dlgWaypointEdit.cpp	/^class WaypointEditWidget final : public RowFormWidget, DataFieldListener {$/;"	c	file:
final	src/Dialogs/Weather/MapOverlayWidget.cpp	/^class WeatherMapOverlayListWidget final$/;"	c	file:
final	src/Dialogs/Weather/NOAADetails.cpp	/^class NOAADetailsWidget final : public LargeTextWidget {$/;"	c	file:
final	src/Dialogs/Weather/NOAAList.cpp	/^class NOAAListWidget final$/;"	c	file:
final	src/Dialogs/Weather/PCMetDialog.cpp	/^class ImageAreaListWidget final : public TextListWidget {$/;"	c	file:
final	src/Dialogs/Weather/PCMetDialog.cpp	/^class ImageTypeListWidget final : public TextListWidget {$/;"	c	file:
final	src/Dialogs/Weather/RASPDialog.cpp	/^class RASPSettingsPanel final$/;"	c	file:
final	src/Dialogs/WidgetDialog.hpp	/^class TWidgetDialog final : public WidgetDialog {$/;"	c
final	src/Dialogs/dlgAnalysis.cpp	/^class AnalysisWidget final : public NullWidget {$/;"	c	file:
final	src/Dialogs/dlgCredits.cpp	/^class LogoPageWindow final : public PaintWindow {$/;"	c	file:
final	src/Dialogs/dlgQuickMenu.cpp	/^class QuickMenu final : public WindowWidget {$/;"	c	file:
final	src/Dialogs/dlgQuickMenu.cpp	/^class QuickMenuButtonRenderer final : public ButtonRenderer {$/;"	c	file:
final	src/Dialogs/dlgSimulatorPrompt.cpp	/^class SimulatorPromptWidget final : public WindowWidget {$/;"	c	file:
final	src/DrawThread.hpp	/^class DrawThread final : public RecursivelySuspensibleThread {$/;"	c
final	src/Engine/Airspace/Airspace.hpp	/^class Airspace final : public FlatBoundingBox$/;"	c
final	src/Engine/Airspace/AirspaceAircraftPerformance.cpp	/^class AirspaceAircraftInterceptHorizontal final : public ZeroFinder {$/;"	c	file:
final	src/Engine/Airspace/AirspaceAircraftPerformance.cpp	/^class AirspaceAircraftInterceptVertical final : public ZeroFinder {$/;"	c	file:
final	src/Engine/Airspace/AirspaceCircle.hpp	/^class AirspaceCircle final : public AbstractAirspace {$/;"	c
final	src/Engine/Airspace/AirspacePolygon.hpp	/^class AirspacePolygon final : public AbstractAirspace {$/;"	c
final	src/Engine/Airspace/AirspaceSorter.cpp	/^class AirspaceFilterPredicate final {$/;"	c	file:
final	src/Engine/Airspace/AirspaceWarningManager.cpp	/^class AirspaceIntersectionWarningVisitor final$/;"	c	file:
final	src/Engine/GlideSolvers/GlidePolar.cpp	/^class GlidePolarSpeedToFly final : public ZeroFinder {$/;"	c	file:
final	src/Engine/Route/AirspaceRoute.cpp	/^class AIV final : public AirspaceIntersectionVisitor {$/;"	c	file:
final	src/Engine/Task/Factory/AATTaskFactory.hpp	/^class AATTaskFactory final : public AbstractTaskFactory$/;"	c
final	src/Engine/Task/Factory/MatTaskFactory.hpp	/^class MatTaskFactory final : public AbstractTaskFactory {$/;"	c
final	src/Engine/Task/ObservationZones/KeyholeZone.hpp	/^class KeyholeZone final : public SymmetricSectorZone$/;"	c
final	src/Engine/Task/Ordered/OrderedTask.hpp	/^class OrderedTask final : public AbstractTask$/;"	c
final	src/Engine/Task/Ordered/Points/AATPoint.hpp	/^class AATPoint final : public IntermediateTaskPoint {$/;"	c
final	src/Engine/Task/Ordered/Points/ASTPoint.hpp	/^class ASTPoint final : public IntermediateTaskPoint$/;"	c
final	src/Engine/Task/Ordered/Points/FinishPoint.hpp	/^class FinishPoint final : public OrderedTaskPoint$/;"	c
final	src/Engine/Task/Ordered/Points/StartPoint.hpp	/^class StartPoint final : public OrderedTaskPoint {$/;"	c
final	src/Engine/Task/Ordered/SmartTaskAdvance.hpp	/^class SmartTaskAdvance final : public TaskAdvance {$/;"	c
final	src/Engine/Task/PathSolvers/IsolineCrossingFinder.hpp	/^class IsolineCrossingFinder final : public ZeroFinder$/;"	c
final	src/Engine/Task/PathSolvers/TaskDijkstra.hpp	/^  virtual void AddEdges(ScanTaskPoint curNode) noexcept final;$/;"	m	class:TaskDijkstra
final	src/Engine/Task/PathSolvers/TaskDijkstraMax.hpp	/^class TaskDijkstraMax final : public TaskDijkstra {$/;"	c
final	src/Engine/Task/PathSolvers/TaskDijkstraMin.hpp	/^class TaskDijkstraMin final : public TaskDijkstra {$/;"	c
final	src/Engine/Task/Solvers/TaskBestMc.hpp	/^class TaskBestMc final : ZeroFinder$/;"	c
final	src/Engine/Task/Solvers/TaskCruiseEfficiency.hpp	/^class TaskCruiseEfficiency final : public TaskSolveTravelled$/;"	c
final	src/Engine/Task/Solvers/TaskEffectiveMacCready.hpp	/^class TaskEffectiveMacCready final : public TaskSolveTravelled$/;"	c
final	src/Engine/Task/Solvers/TaskGlideRequired.hpp	/^class TaskGlideRequired final : private ZeroFinder {$/;"	c
final	src/Engine/Task/Solvers/TaskMacCreadyRemaining.hpp	/^class TaskMacCreadyRemaining final : public TaskMacCready {$/;"	c
final	src/Engine/Task/Solvers/TaskMacCreadyTotal.hpp	/^class TaskMacCreadyTotal final : public TaskMacCready {$/;"	c
final	src/Engine/Task/Solvers/TaskMacCreadyTravelled.hpp	/^class TaskMacCreadyTravelled final : public TaskMacCready$/;"	c
final	src/Engine/Task/Solvers/TaskMinTarget.hpp	/^class TaskMinTarget final : private ZeroFinder {$/;"	c
final	src/Engine/Task/Solvers/TaskOptTarget.hpp	/^class TaskOptTarget final : public ZeroFinder$/;"	c
final	src/Engine/Task/Unordered/AlternateTask.hpp	/^class AlternateTask final : public AbortTask$/;"	c
final	src/Engine/Task/Unordered/GotoTask.hpp	/^class GotoTask final : public UnorderedTask$/;"	c
final	src/Engine/Task/Unordered/UnorderedTaskPoint.hpp	/^class UnorderedTaskPoint final : public TaskWaypoint {$/;"	c
final	src/Form/DataField/Angle.hpp	/^class AngleDataField final : public DataField {$/;"	c
final	src/Form/DataField/Boolean.hpp	/^class DataFieldBoolean final : public DataField {$/;"	c
final	src/Form/DataField/Enum.hpp	/^class DataFieldEnum final : public DataField {$/;"	c
final	src/Form/DataField/File.hpp	/^class FileDataField final : public DataField {$/;"	c
final	src/Form/DataField/Float.hpp	/^class DataFieldFloat final : public NumberDataField {$/;"	c
final	src/Form/DataField/GeoPoint.hpp	/^class GeoPointDataField final : public DataField {$/;"	c
final	src/Form/DataField/Integer.hpp	/^class DataFieldInteger final : public NumberDataField$/;"	c
final	src/Form/DataField/Password.hpp	/^class PasswordDataField final : public DataFieldString {$/;"	c
final	src/Form/DataField/Prefix.hpp	/^class PrefixDataField final : public DataFieldString {$/;"	c
final	src/Form/DataField/RoughTime.hpp	/^class RoughTimeDataField final : public DataField {$/;"	c
final	src/Form/DataField/Time.hpp	/^class DataFieldTime final : public DataField {$/;"	c
final	src/Form/TabDisplay.hpp	/^class TabDisplay final : public PaintWindow$/;"	c
final	src/Form/TabMenuDisplay.hpp	/^class TabMenuDisplay final : public PaintWindow$/;"	c
final	src/Gauge/GaugeFLARM.hpp	/^class GaugeFLARM final : public OverlappedWidget, NullBlackboardListener {$/;"	c
final	src/Gauge/GaugeThermalAssistant.hpp	/^class GaugeThermalAssistant final$/;"	c
final	src/Gauge/GlueGaugeVario.hpp	/^class GlueGaugeVario final$/;"	c
final	src/HorizonWidget.hpp	/^class HorizonWidget final : public WindowWidget,$/;"	c
final	src/InfoBoxes/Panel/AltitudeSimulator.cpp	/^class AltitudeSimulatorOffsetButtons final : public OffsetButtonsWidget {$/;"	c	file:
final	src/InfoBoxes/Panel/MacCreadyEdit.cpp	/^class MacCreadyOffsetButtons final : public OffsetButtonsWidget {$/;"	c	file:
final	src/InfoBoxes/Panel/RadioEdit.cpp	/^class RadioOffsetButtons final : public OffsetButtonsWidget {$/;"	c	file:
final	src/Input/InputEventsLua.cpp	/^class LuaFileVisitor final : public File::Visitor {$/;"	c	file:
final	src/Input/TaskEventObserver.hpp	/^class TaskEventObserver final {$/;"	c
final	src/Job/Async.hpp	/^class AsyncJobRunner final : private Thread {$/;"	c
final	src/Job/TriStateJob.hpp	/^class TriStateJob final : public Job, public T {$/;"	c
final	src/Kobo/KoboMenu.cpp	/^class KoboMenuWidget final : public WindowWidget {$/;"	c	file:
final	src/Kobo/NetworkDialog.cpp	/^class NetworkWidget final$/;"	c	file:
final	src/Kobo/SystemDialog.cpp	/^class SystemWidget final$/;"	c	file:
final	src/Kobo/ToolsDialog.cpp	/^class ToolsWidget final$/;"	c	file:
final	src/Kobo/WifiDialog.cpp	/^class WifiListWidget final$/;"	c	file:
final	src/MapWindow/MapWindowGlideRange.cpp	/^class TriangleCompound final : public FlatTriangleFanVisitor {$/;"	c	file:
final	src/MapWindow/OverlayBitmap.hpp	/^class MapOverlayBitmap final : public MapOverlay {$/;"	c
final	src/MergeThread.hpp	/^class MergeThread final : public WorkerThread {$/;"	c
final	src/Monitor/AirspaceWarningMonitor.cpp	/^class AirspaceWarningWidget final$/;"	c	file:
final	src/Monitor/AllMonitors.hpp	/^class AllMonitors final : NullBlackboardListener, RateLimiter {$/;"	c
final	src/Monitor/MatTaskMonitor.cpp	/^class MatTaskAddWidget final$/;"	c	file:
final	src/Monitor/TaskAdvanceMonitor.cpp	/^class TaskAdvanceWidget final$/;"	c	file:
final	src/Renderer/AirspaceRendererGL.cpp	/^class AirspaceFillRenderer final$/;"	c	file:
final	src/Renderer/AirspaceRendererGL.cpp	/^class AirspaceVisitorRenderer final$/;"	c	file:
final	src/Renderer/AirspaceRendererOther.cpp	/^class AirspaceOutlineRenderer final$/;"	c	file:
final	src/Renderer/AirspaceRendererOther.cpp	/^class AirspaceVisitorMap final$/;"	c	file:
final	src/Renderer/WaypointRenderer.cpp	/^class WaypointVisitorMap final$/;"	c	file:
final	src/Replay/Replay.hpp	/^class Replay final$/;"	c
final	src/Terrain/Thread.hpp	/^class TerrainThread final : private StandbyThread {$/;"	c
final	src/Topography/Thread.hpp	/^class TopographyThread final : private StandbyThread {$/;"	c
final	src/Topography/TopographyFileRenderer.hpp	/^class TopographyFileRenderer final$/;"	c
final	src/Tracking/SkyLines/Client.hpp	/^class Client final : Cares::SimpleHandler {$/;"	c	namespace:SkyLinesTracking
final	src/Tracking/TrackingGlue.hpp	/^class TrackingGlue final$/;"	c
final	src/Waypoint/WaypointListBuilder.hpp	/^class WaypointListBuilder final {$/;"	c
final	src/Waypoint/WaypointReaderCompeGPS.hpp	/^class WaypointReaderCompeGPS final : public WaypointReaderBase {$/;"	c
final	src/Waypoint/WaypointReaderFS.hpp	/^class WaypointReaderFS final : public WaypointReaderBase {$/;"	c
final	src/Waypoint/WaypointReaderOzi.hpp	/^class WaypointReaderOzi final : public WaypointReaderBase {$/;"	c
final	src/Waypoint/WaypointReaderSeeYou.hpp	/^class WaypointReaderSeeYou final : public WaypointReaderBase {$/;"	c
final	src/Waypoint/WaypointReaderWinPilot.hpp	/^class WaypointReaderWinPilot final : public WaypointReaderBase {$/;"	c
final	src/Waypoint/WaypointReaderZander.hpp	/^class WaypointReaderZander final : public WaypointReaderBase {$/;"	c
final	src/Widget/CreateWindowWidget.hpp	/^class CreateWindowWidget final : public WindowWidget {$/;"	c
final	src/Widget/ViewImageWidget.cpp	/^class ViewImageWindow final : public PaintWindow {$/;"	c	file:
final	src/XML/DataNodeXML.hpp	/^class ConstDataNodeXML final : public ConstDataNode {$/;"	c
final	src/XML/DataNodeXML.hpp	/^class WritableDataNodeXML final : public WritableDataNode {$/;"	c
final	src/event/Call.cxx	/^class BlockingCallMonitor final$/;"	c	file:
final	src/event/CoarseTimerEvent.hxx	/^class CoarseTimerEvent final : AutoUnlinkIntrusiveListHook$/;"	c
final	src/event/DeferEvent.hxx	/^class DeferEvent final : AutoUnlinkIntrusiveListHook$/;"	c
final	src/event/FineTimerEvent.hxx	/^class FineTimerEvent final :$/;"	c
final	src/event/IdleEvent.hxx	/^class IdleEvent final {$/;"	c
final	src/event/InjectEvent.hxx	/^class InjectEvent final$/;"	c
final	src/event/Loop.hxx	/^class EventLoop final$/;"	c
final	src/event/SignalMonitor.cxx	/^class SignalMonitor final {$/;"	c	file:
final	src/event/SocketEvent.hxx	/^class SocketEvent final : IntrusiveListHook, public EventPollBackendEvents$/;"	c
final	src/event/TimerList.hxx	/^class TimerList final {$/;"	c
final	src/event/TimerWheel.hxx	/^class TimerWheel final {$/;"	c
final	src/event/net/ConnectSocket.hxx	/^class ConnectSocket final : public Cancellable {$/;"	c
final	src/event/net/cares/Channel.cxx	/^class Channel::Request final : Cancellable {$/;"	c	namespace:Cares	file:
final	src/event/net/cares/CoLookup.hxx	/^class CoLookup final : Handler {$/;"	c	namespace:Cares
final	src/event/net/cares/SimpleResolver.hxx	/^class SimpleResolver final : Handler {$/;"	c	namespace:Cares
final	src/io/FileOutputStream.hxx	/^class FileOutputStream final : public OutputStream {$/;"	c
final	src/io/FileReader.hxx	/^class FileReader final : public Reader {$/;"	c
final	src/io/GunzipReader.hxx	/^class GunzipReader final : public Reader {$/;"	c
final	src/io/StdioOutputStream.hxx	/^class StdioOutputStream final : public OutputStream {$/;"	c
final	src/io/ZipReader.hpp	/^class ZipReader final : public Reader {$/;"	c
final	src/io/ZlibError.hxx	/^class ZlibError final : public std::exception {$/;"	c
final	src/io/async/AsioThread.hpp	/^class AsioThread final : protected Thread {$/;"	c
final	src/lua/Background.cpp	/^class BackgroundLua final$/;"	c	file:
final	src/lua/InputEvent.cpp	/^class LuaInputEvent final {$/;"	c	file:
final	src/lua/Timer.cpp	/^class LuaTimer final {$/;"	c	file:
final	src/net/http/DownloadManager.cpp	/^class DownloadManagerThread final$/;"	c	file:
final	src/net/http/Global.cxx	/^class CurlSocket final {$/;"	c	file:
final	src/net/http/Global.hxx	/^class CurlGlobal final {$/;"	c
final	src/net/http/Request.hxx	/^class CurlRequest final {$/;"	c
final	src/net/http/ToBuffer.cpp	/^class DownloadToBufferHandler final : public CurlResponseHandler {$/;"	c	file:
final	src/net/http/ToFile.cpp	/^class DownloadToFileHandler final : public CurlResponseHandler {$/;"	c	file:
final	src/ui/canvas/Bitmap.hpp	/^class Bitmap final$/;"	c
final	src/ui/canvas/RawBitmap.hpp	/^class RawBitmap final$/;"	c
final	src/ui/event/DelayedNotify.hpp	/^class DelayedNotify final {$/;"	c	namespace:UI
final	src/ui/event/Notify.hpp	/^class Notify final$/;"	c	namespace:UI
final	src/ui/event/PeriodicTimer.hpp	/^class PeriodicTimer final {$/;"	c	namespace:UI
final	src/ui/event/Timer.hpp	/^class Timer final {$/;"	c	namespace:UI
final	src/ui/event/poll/InputQueue.hpp	/^class InputEventQueue final {$/;"	c	class:DisplayOrientation
final	src/ui/event/poll/Queue.hpp	/^class EventQueue final {$/;"	c	class:DisplayOrientation
final	src/ui/event/poll/WaylandQueue.hpp	/^class WaylandEventQueue final {$/;"	c	namespace:UI
final	src/ui/event/poll/libinput/LibInputHandler.hpp	/^class LibInputHandler final {$/;"	c	namespace:UI
final	src/ui/event/poll/linux/Input.hpp	/^class LinuxInputDevice final {$/;"	c	namespace:UI
final	src/ui/event/poll/linux/MergeMouse.hpp	/^class MergeMouse final {$/;"	c	namespace:UI
final	src/util/IntrusiveList.hxx	/^	class const_iterator final$/;"	c	class:IntrusiveList
final	src/util/IntrusiveList.hxx	/^	class iterator final$/;"	c	class:IntrusiveList
final	src/util/IterableSplitString.hxx	/^	class Iterator final {$/;"	c	class:BasicIterableSplitString
final_glide_bar	src/Look/Look.hpp	/^  FinalGlideBarLook final_glide_bar;$/;"	m	struct:Look
final_glide_bar_display_mode	src/MapSettings.hpp	/^  FinalGlideBarDisplayMode final_glide_bar_display_mode;$/;"	m	struct:MapSettings
final_glide_bar_display_mode_list	src/Dialogs/Settings/Panels/GaugesConfigPanel.cpp	/^static constexpr StaticEnumChoice final_glide_bar_display_mode_list[] = {$/;"	v	file:
final_glide_bar_mc0_enabled	src/MapSettings.hpp	/^  bool final_glide_bar_mc0_enabled;$/;"	m	struct:MapSettings
final_glide_bar_renderer	src/MapWindow/GlueMapWindow.hpp	/^  FinalGlideBarRenderer final_glide_bar_renderer;$/;"	m	class:GlueMapWindow
final_glide_look	src/Renderer/MapItemListRenderer.hpp	/^  const FinalGlideBarLook &final_glide_look;$/;"	m	class:MapItemListRenderer
final_glide_mode_icon	src/Look/MapLook.hpp	/^  MaskedIcon cruise_mode_icon, climb_mode_icon, final_glide_mode_icon, abort_mode_icon;$/;"	m	struct:MapLook
final_glide_terrain	src/Computer/Settings.hpp	/^  } final_glide_terrain;$/;"	m	struct:FeaturesSettings	typeref:class:FeaturesSettings::FinalGlideTerrain
final_path	src/io/FileTransaction.hpp	/^  AllocatedPath final_path;$/;"	m	class:FileTransaction
find	src/Device/SettingsMap.hpp	/^  const_iterator find(const K &key) const {$/;"	f	class:DeviceSettingsMap
findEvent	src/Input/InputLookup.cpp	/^InputEvents::findEvent(const TCHAR *data)$/;"	f	class:InputEvents
findGCE	src/Input/InputLookup.cpp	/^InputEvents::findGCE(const TCHAR *data)$/;"	f	class:InputEvents
findNE	src/Input/InputLookup.cpp	/^InputEvents::findNE(const TCHAR *data)$/;"	f	class:InputEvents
find_best_start	src/Engine/Task/Ordered/Points/StartPoint.cpp	/^StartPoint::find_best_start(const AircraftState &state,$/;"	f	class:StartPoint
find_resource_name	src/ui/canvas/android/Bitmap.cpp	/^find_resource_name(unsigned id)$/;"	f	file:
fine	src/Form/DataField/Angle.hpp	/^  bool fine;$/;"	m	class:final
fine_pen_width_scale	src/Screen/Layout.cpp	/^  unsigned fine_pen_width_scale = 1024;$/;"	m	namespace:Layout	file:
finish	src/Device/Driver/IMI/Protocol/Types.hpp	/^    FlightFinish finish;$/;"	m	struct:IMI::Flight
finish	src/Device/Driver/IMI/Protocol/Types.hpp	/^    IMIDATETIMESEC finish;$/;"	m	struct:IMI::FlightInfo
finish	src/Device/Driver/Volkslogger/grecord.cpp	/^void GRECORD::finish(void) {$/;"	f	class:GRECORD
finish	src/IGC/IGCExtensions.hpp	/^  uint16_t start, finish;$/;"	m	struct:IGCExtension
finish_alt_diff	src/Engine/Contest/Solvers/AbstractContest.cpp	/^   finish_alt_diff(_finish_alt_diff)$/;"	f
finish_alt_diff	src/Engine/Contest/Solvers/AbstractContest.hpp	/^  const unsigned finish_alt_diff;$/;"	m	class:AbstractContest
finish_constraints	src/Engine/Task/Ordered/Settings.hpp	/^  FinishConstraints finish_constraints;$/;"	m	struct:OrderedTaskSettings
finish_point	src/Engine/Waypoint/Waypoint.hpp	/^    bool finish_point:1;$/;"	m	struct:Waypoint::Flags
finish_radius	src/Engine/Task/TaskBehaviour.hpp	/^  double finish_radius;$/;"	m	struct:SectorDefaults
finish_type	src/Engine/Task/TaskBehaviour.hpp	/^  TaskPointFactoryType finish_type;$/;"	m	struct:SectorDefaults
finish_types	src/Engine/Task/Factory/AbstractTaskFactory.hpp	/^  const LegalPointSet finish_types;$/;"	m	class:AbstractTaskFactory
finished	src/Engine/Contest/Solvers/ContestDijkstra.hpp	/^  bool finished;$/;"	m	class:ContestDijkstra
finishpoint	src/Device/Driver/Volkslogger/vlapi2.h	/^      DCLWPT finishpoint;$/;"	m	struct:VLAPI_DATA::DECLARATION::TASK
fir	src/Gauge/FlarmTrafficWindow.hpp	/^  FastIntegerRotation fir;$/;"	m	class:FlarmTrafficWindow
fir	src/Math/FastRotation.hpp	/^  FastIntegerRotation fir;$/;"	m	class:FastRowRotation
first	src/Engine/Contest/Solvers/TriangleContest.hpp	/^      :CandidateSet(TurnPointRange{parent, first, last}) {}$/;"	m	struct:TriangleContest::CandidateSet
first	src/Engine/Route/RouteLink.hpp	/^  RoutePoint first;$/;"	m	struct:RouteLinkBase
first	src/InfoBoxes/InfoBoxManager.cpp	/^  static bool first;$/;"	m	namespace:InfoBoxManager	file:
first	src/JSON/Writer.hpp	/^    bool first;$/;"	m	class:JSON::ArrayWriter
first	src/JSON/Writer.hpp	/^    bool first;$/;"	m	class:JSON::ObjectWriter
first	src/Topography/TopographyFile.hpp	/^  const ShapeList *first;$/;"	m	class:TopographyFile
first	src/Waypoint/WaypointReaderSeeYou.hpp	/^  bool first = true;$/;"	m	class:final
first	src/Waypoint/WaypointReaderWinPilot.hpp	/^  bool first = true;$/;"	m	class:final
first	src/Widget/TwoWidgets.hpp	/^  const std::unique_ptr<Widget> first, second;$/;"	m	class:TwoWidgets
first1x	src/ui/canvas/memory/Murphy.hpp	/^  int first1x, first1y, first2x, first2y;$/;"	m	struct:MurphyIterator
first1y	src/ui/canvas/memory/Murphy.hpp	/^  int first1x, first1y, first2x, first2y;$/;"	m	struct:MurphyIterator
first2x	src/ui/canvas/memory/Murphy.hpp	/^  int first1x, first1y, first2x, first2y;$/;"	m	struct:MurphyIterator
first2y	src/ui/canvas/memory/Murphy.hpp	/^  int first1x, first1y, first2x, first2y;$/;"	m	struct:MurphyIterator
first_argument_type	src/ui/canvas/memory/PixelOperations.hpp	/^  typedef color_type first_argument_type;$/;"	t	struct:PixelIntegerAdapter
first_finish_candidate	src/Engine/Contest/Solvers/ContestDijkstra.hpp	/^  unsigned first_finish_candidate;$/;"	m	class:ContestDijkstra
first_font	src/Renderer/TwoTextRowsRenderer.hpp	/^  const Font *first_font, *second_font;$/;"	m	class:TwoTextRowsRenderer
first_page_index	src/Form/TabMenuDisplay.hpp	/^    unsigned first_page_index;$/;"	m	struct:final::MainMenuButton
first_y	src/Renderer/TwoTextRowsRenderer.hpp	/^  int x, first_y, second_y;$/;"	m	class:TwoTextRowsRenderer
firstpassno	src/Terrain/jasper/jpc/jpc_dec.h	/^	unsigned firstpassno;$/;"	m	struct:__anon122
firsttime	src/Device/Driver/Volkslogger/vlconv.h	/^	BrokenDateTime firsttime; \/\/ time of first fix$/;"	m	struct:DIRENTRY
fix	src/IGC/IGCWriter.hpp	/^  IGCFix fix;$/;"	m	class:IGCWriter
fixB1	src/Device/Driver/IMI/Protocol/IGC.cpp	/^static IMI::FixB fixB1 = {0};$/;"	v	file:
fixB2	src/Device/Driver/IMI/Protocol/IGC.cpp	/^static IMI::FixB fixB2 = {0};$/;"	v	file:
fixBLastFull	src/Device/Driver/IMI/Protocol/IGC.cpp	/^static IMI::FixB fixBLastFull = {0};$/;"	v	file:
fix_accuracy	src/Device/Driver/LX/LXN.hpp	/^    uint8_t fix_accuracy;$/;"	m	struct:LXN::FlightInfo
fix_quality	src/Logger/LoggerImpl.hpp	/^    FixQuality fix_quality;$/;"	m	struct:LoggerImpl::PreTakeoffBuffer
fix_quality	src/NMEA/GPSState.hpp	/^  FixQuality fix_quality;$/;"	m	struct:GPSState
fix_quality_available	src/NMEA/GPSState.hpp	/^  Validity fix_quality_available;$/;"	m	struct:GPSState
fix_stat	src/Device/Driver/LX/Convert.cpp	/^  char fix_stat;$/;"	m	struct:Context	file:
fixed_scale	src/Geo/Flat/FlatProjection.cpp	/^static constexpr int fixed_scale = 57296;$/;"	v	file:
fixes	src/Device/Driver/IMI/Protocol/Types.hpp	/^    IMIDWORD fixes;$/;"	m	struct:IMI::FlightFinish
fixes2	src/Device/Driver/IMI/Protocol/Types.hpp	/^    IMIDWORD fixes2;$/;"	m	struct:IMI::FlightFinish
flags	src/Device/Driver.hpp	/^  unsigned int flags;$/;"	m	struct:DeviceRegister
flags	src/Dialogs/Device/DeviceListDialog.cpp	/^    Flags flags;$/;"	m	union:final::Item	file:
flags	src/Engine/Waypoint/Waypoint.hpp	/^  Flags flags;$/;"	m	struct:Waypoint
flags	src/Terrain/jasper/jas_stream.h	/^	int flags;$/;"	m	struct:__anon98
flags	src/Terrain/jasper/jp2/jp2_cod.h	/^	int flags;$/;"	m	struct:jp2_boxinfo_s
flags	src/Terrain/jasper/jpc/jpc_dec.h	/^	unsigned flags;$/;"	m	struct:__anon119
flags	src/Terrain/jasper/jpc/jpc_dec.h	/^	unsigned flags;$/;"	m	struct:__anon120
flags	src/Topography/shapelib/mapserver.h	/^    int flags;$/;"	m	struct:__anon28
flags	src/Topography/shapelib/maptree.h	/^    char  flags[3];$/;"	m	struct:__anon81
flags	src/Tracking/SkyLines/Protocol.hpp	/^  uint32_t flags;$/;"	m	struct:SkyLinesTracking::ACKPacket
flags	src/Tracking/SkyLines/Protocol.hpp	/^  uint32_t flags;$/;"	m	struct:SkyLinesTracking::FixPacket
flags	src/Tracking/SkyLines/Protocol.hpp	/^  uint32_t flags;$/;"	m	struct:SkyLinesTracking::ThermalRequestPacket
flags	src/Tracking/SkyLines/Protocol.hpp	/^  uint32_t flags;$/;"	m	struct:SkyLinesTracking::TrafficRequestPacket
flags	src/Tracking/SkyLines/Protocol.hpp	/^  uint32_t flags;$/;"	m	struct:SkyLinesTracking::UserNameResponsePacket
flags	src/Tracking/SkyLines/Protocol.hpp	/^  uint32_t flags;$/;"	m	struct:SkyLinesTracking::WaveRequestPacket
flags	src/ui/canvas/fb/mxcfb.h	/^	int flags;$/;"	m	struct:mxcfb_update_data
flags_	src/Terrain/jasper/jas_seq.h	/^	int flags_;$/;"	m	struct:jas_matrix
flags_	src/Terrain/jasper/jas_stream.h	/^	int flags_;$/;"	m	struct:__anon97
flags_	src/Terrain/jasper/jpc/jpc_bs.h	/^	int flags_;$/;"	m	struct:__anon106
flap_position	src/NMEA/SwitchState.hpp	/^  FlapPosition flap_position;$/;"	m	struct:SwitchState
flap_position_list	src/Dialogs/Device/Vega/SwitchesDialog.cpp	/^static constexpr StaticEnumChoice flap_position_list[] = {$/;"	v	file:
flarm	src/Device/RecordedFlight.hpp	/^    uint8_t flarm;$/;"	m	union:RecordedFlightInfo::__anon159
flarm	src/NMEA/Info.hpp	/^  FlarmData flarm;$/;"	m	struct:NMEAInfo
flarm_aircraft_types	src/Dialogs/Device/Vega/FlarmIdentificationParameters.hpp	/^static constexpr StaticEnumChoice flarm_aircraft_types[] = {$/;"	v
flarm_alert_parameters	src/Dialogs/Device/Vega/FlarmAlertParameters.hpp	/^VegaParametersWidget::StaticParameter flarm_alert_parameters[] = {$/;"	v
flarm_calculations	src/FLARM/FlarmComputer.hpp	/^  FlarmCalculations flarm_calculations;$/;"	m	class:FlarmComputer
flarm_colors	src/FLARM/TrafficDatabases.hpp	/^  FlarmColorDatabase flarm_colors;$/;"	m	struct:TrafficDatabases
flarm_computer	src/MergeThread.hpp	/^  FlarmComputer flarm_computer;$/;"	m	class:final
flarm_dialog	src/Look/Look.hpp	/^  FlarmTrafficLook flarm_dialog;$/;"	m	struct:Look
flarm_display_location_list	src/Dialogs/Settings/Panels/LayoutConfigPanel.cpp	/^static constexpr StaticEnumChoice flarm_display_location_list[] = {$/;"	v	file:
flarm_driver	src/Device/Driver/FLARM/Register.cpp	/^const struct DeviceRegister flarm_driver = {$/;"	v	typeref:struct:DeviceRegister
flarm_gauge	src/Look/Look.hpp	/^  FlarmTrafficLook flarm_gauge;$/;"	m	struct:Look
flarm_id_parameters	src/Dialogs/Device/Vega/FlarmIdentificationParameters.hpp	/^VegaParametersWidget::StaticParameter flarm_id_parameters[] = {$/;"	v
flarm_names	src/FLARM/TrafficDatabases.hpp	/^  FlarmNameDatabase flarm_names;$/;"	m	struct:TrafficDatabases
flarm_net	src/FLARM/TrafficDatabases.hpp	/^  FlarmNetDatabase flarm_net;$/;"	m	struct:TrafficDatabases
flarm_repeat_parameters	src/Dialogs/Device/Vega/FlarmRepeatParameters.hpp	/^VegaParametersWidget::StaticParameter flarm_repeat_parameters[] = {$/;"	v
flarm_setting_names	src/Dialogs/Device/FLARM/ConfigWidget.cpp	/^static const char *const flarm_setting_names[] = {$/;"	v	file:
flarm_teammate_code	src/NMEA/Derived.hpp	/^  TeamCode flarm_teammate_code;$/;"	m	struct:TeamInfo
flarm_teammate_code_current	src/NMEA/Derived.hpp	/^  bool flarm_teammate_code_current;$/;"	m	struct:TeamInfo
flarm_user_interfaces	src/Dialogs/Device/Vega/FlarmAlertParameters.hpp	/^static constexpr StaticEnumChoice flarm_user_interfaces[] = {$/;"	v
flash	src/Device/Driver/IMI/Protocol/Types.hpp	/^    IMIBYTE flash;$/;"	m	struct:IMI::TDeviceInfo
flashSize	src/Device/Driver/IMI/Protocol/Types.hpp	/^    IMIDWORD flashSize;$/;"	m	struct:IMI::TDeviceInfo
flat_bb	src/Engine/Task/Ordered/Points/OrderedTaskPoint.hpp	/^  FlatBoundingBox flat_bb;$/;"	m	class:OrderedTaskPoint
flat_event_map	src/Input/InputDefaults.cpp	/^struct flat_event_map {$/;"	s	file:
flat_gesture_map	src/Input/InputDefaults.cpp	/^struct flat_gesture_map {$/;"	s	file:
flat_label	src/Input/InputDefaults.cpp	/^struct flat_label {$/;"	s	file:
flat_location	src/Engine/Waypoint/Waypoint.hpp	/^  FlatGeoPoint flat_location;$/;"	m	struct:Waypoint
flat_location	src/Geo/SearchPoint.hpp	/^  FlatGeoPoint flat_location;$/;"	m	class:SearchPoint
flat_location_initialised	src/Engine/Waypoint/Waypoint.hpp	/^  bool flat_location_initialised;$/;"	m	struct:Waypoint
flat_projection	src/MapWindow/MapWindowGlideRange.cpp	/^  const FlatProjection flat_projection;$/;"	m	class:final	file:
flat_projection	src/Renderer/TaskPointRenderer.hpp	/^  const FlatProjection &flat_projection;$/;"	m	class:TaskPointRenderer
flavour	src/Input/InputEvents.cpp	/^  static const TCHAR *flavour;$/;"	m	namespace:InputEvents	file:
flight	src/IGC/IGCHeader.hpp	/^  unsigned flight;$/;"	m	struct:IGCHeader
flight	src/Logger/ExternalLogger.cpp	/^  const RecordedFlightInfo &flight;$/;"	m	class:DownloadFlightJob	file:
flight	src/NMEA/Derived.hpp	/^  FlyingState flight;$/;"	m	struct:DerivedInfo
flightNumber	src/Device/Driver/IMI/Protocol/Types.hpp	/^    IMIDWORD flightNumber;$/;"	m	struct:IMI::TDeclarationHeader
flightOfDay	src/Device/Driver/IMI/Protocol/Types.hpp	/^    IMIWORD flightOfDay;$/;"	m	struct:IMI::FlightInfo
flightOfDay	src/Device/Driver/IMI/Protocol/Types.hpp	/^    IMIWORD flightOfDay;$/;"	m	struct:IMI::TDeclarationHeader
flightStartDateTime	src/Device/Driver/IMI/Protocol/Types.hpp	/^    IMIDATETIMESEC flightStartDateTime;$/;"	m	struct:IMI::TDeclarationHeader
flightStopDateTime	src/Device/Driver/IMI/Protocol/Types.hpp	/^    IMIDATETIMESEC flightStopDateTime;$/;"	m	struct:IMI::FlightFinish
flight_button	src/Dialogs/Device/DeviceListDialog.cpp	/^  Button *reconnect_button, *flight_button;$/;"	m	class:final	file:
flight_date	src/IGC/IGCDeclaration.hpp	/^  BrokenDate flight_date;$/;"	m	struct:IGCDeclarationHeader
flight_info	src/Device/Driver/LX/Convert.cpp	/^  LXN::FlightInfo flight_info;$/;"	m	struct:Context	file:
flight_info	src/Device/Driver/LX/LXN.hpp	/^    const struct FlightInfo *flight_info;$/;"	m	union:LXN::Packet	typeref:struct:LXN::Packet::FlightInfo
flight_level	src/Engine/Airspace/AirspaceAltitude.hpp	/^  double flight_level;$/;"	m	struct:AirspaceAltitude
flight_list	src/Logger/ExternalLogger.cpp	/^  RecordedFlightList &flight_list;$/;"	m	class:ReadFlightListJob	file:
flight_logger	src/Components.cpp	/^GlueFlightLogger *flight_logger;$/;"	v
flight_mode	src/NMEA/SwitchState.hpp	/^  FlightMode flight_mode;$/;"	m	struct:SwitchState
flight_mode_final_glide	src/Engine/Task/Stats/TaskStats.hpp	/^  bool flight_mode_final_glide;$/;"	m	class:TaskStats
flight_mode_height_margin	src/Engine/Task/Stats/TaskStats.cpp	/^static constexpr int flight_mode_height_margin = 120;$/;"	v	file:
flight_no	src/Device/Driver/LX/Convert.cpp	/^  uint8_t flight_no;$/;"	m	struct:Context	file:
flight_no	src/Device/Driver/LX/LXN.hpp	/^    uint8_t flight_no;$/;"	m	struct:LXN::Start
flight_no	src/Device/Driver/LX/Protocol.hpp	/^    uint8_t flight_no; \/* ? *\/$/;"	m	struct:LX::FlightInfo
flight_time	src/NMEA/FlyingState.hpp	/^  double flight_time;$/;"	m	struct:FlyingState
flightinfo	src/Device/Driver/Volkslogger/vlapi2.h	/^    } flightinfo;$/;"	m	struct:VLAPI_DATA::DECLARATION	typeref:struct:VLAPI_DATA::DECLARATION::FLIGHTINFO
flights	src/Renderer/FlightListRenderer.hpp	/^  OverwritingRingBuffer<FlightInfo, 128u> flights;$/;"	m	class:FlightListRenderer
flightstats	src/Computer/StatsComputer.hpp	/^  FlightStatistics flightstats;$/;"	m	class:StatsComputer
flipped	src/ui/canvas/Bitmap.hpp	/^  bool flipped = false;$/;"	m	class:final
flipped	src/ui/canvas/custom/UncompressedImage.hpp	/^  bool flipped;$/;"	m	class:UncompressedImage
flipped	src/ui/canvas/opengl/Texture.cpp	/^  :size(_size), allocated_size(ValidateTextureSize(_size)), flipped(_flipped)$/;"	f
flipped	src/ui/canvas/opengl/Texture.hpp	/^    :id(_id), size(_size), allocated_size(_allocated_size), flipped(_flipped) {$/;"	f	class:GLTexture
flipped	src/ui/canvas/opengl/Texture.hpp	/^  bool flipped;$/;"	m	class:GLTexture
floor_alt	src/Replay/TaskAccessor.hpp	/^  const double floor_alt;$/;"	m	class:TaskAccessor
flushRecord	src/Topography/shapelib/mapxbase.c	/^static void flushRecord( DBFHandle psDBF )$/;"	f	file:
fly_bitmap	src/Dialogs/SimulatorPromptWindow.hpp	/^  Bitmap fly_bitmap, sim_bitmap;$/;"	m	class:final
fly_button	src/Dialogs/SimulatorPromptWindow.hpp	/^  Button fly_button, sim_button;$/;"	m	class:final
flying	src/Engine/Navigation/Aircraft.hpp	/^  bool flying;$/;"	m	struct:AircraftState
flying	src/NMEA/FlyingState.hpp	/^  bool flying;$/;"	m	struct:FlyingState
flying	src/Tracking/TrackingGlue.hpp	/^  bool flying = false, last_flying;$/;"	m	class:final
flying_computer	src/Computer/GlideComputerAirData.hpp	/^  FlyingComputer flying_computer;$/;"	m	class:GlideComputerAirData
flymaster_f1_driver	src/Device/Driver/FlymasterF1.cpp	/^const struct DeviceRegister flymaster_f1_driver = {$/;"	v	typeref:struct:DeviceRegister
flynet_driver	src/Device/Driver/FlyNet.cpp	/^const struct DeviceRegister flynet_driver = {$/;"	v	typeref:struct:DeviceRegister
flytec	src/Device/RecordedFlight.hpp	/^    unsigned flytec;$/;"	m	union:RecordedFlightInfo::__anon159
flytec_driver	src/Device/Driver/Flytec/Register.cpp	/^const struct DeviceRegister flytec_driver = {$/;"	v	typeref:struct:DeviceRegister
fn	src/lua/Util.hxx	/^	lua_CFunction fn;$/;"	m	struct:Lua::StackIndex::LightUserData::CClosure
focus_background_brush	src/Look/CheckBoxLook.hpp	/^  Brush focus_background_brush;$/;"	m	struct:CheckBoxLook
focused	src/Look/ButtonLook.hpp	/^  } standard, focused;$/;"	m	struct:ButtonLook	typeref:struct:ButtonLook::StateLook
focused	src/Look/CheckBoxLook.hpp	/^  } standard, focused, pressed, disabled;$/;"	m	struct:CheckBoxLook	typeref:struct:CheckBoxLook::StateLook
focused	src/Look/DialogLook.hpp	/^    } focused;$/;"	m	struct:DialogLook::__anon13	typeref:struct:DialogLook::__anon13::__anon15
focused	src/Look/DialogLook.hpp	/^  } focused;$/;"	m	struct:DialogLook	typeref:struct:DialogLook::__anon12
focused	src/ui/window/Window.hpp	/^  bool focused = false;$/;"	m	class:Window
focused_background_color	src/Look/InfoBoxLook.hpp	/^  Color background_color, focused_background_color, pressed_background_color;$/;"	m	struct:InfoBoxLook
follow_labels	src/Topography/shapelib/mapserver.h	/^    textSymbolObj **follow_labels;$/;"	m	struct:label_follow_result
follow_mode	src/MapWindow/MapWindow.hpp	/^  FollowMode follow_mode = FOLLOW_SELF;$/;"	m	class:MapWindow
font	src/Gauge/LogoView.hpp	/^  Font font;$/;"	m	class:LogoView
font	src/Look/ButtonLook.hpp	/^  const Font *font;$/;"	m	struct:ButtonLook
font	src/Look/CheckBoxLook.hpp	/^  const Font *font;$/;"	m	struct:CheckBoxLook
font	src/Look/DialogLook.hpp	/^    const Font *font, *font_bold;$/;"	m	struct:DialogLook::__anon13
font	src/Look/DialogLook.hpp	/^    const Font *font;$/;"	m	struct:DialogLook::__anon11
font	src/Look/FinalGlideBarLook.hpp	/^  const Font *font;$/;"	m	struct:FinalGlideBarLook
font	src/Look/TerminalLook.hpp	/^  Font font;$/;"	m	struct:TerminalLook
font	src/Look/TrafficLook.hpp	/^  const Font *font;$/;"	m	struct:TrafficLook
font	src/Look/VarioBarLook.hpp	/^  const Font *font;$/;"	m	struct:VarioBarLook
font	src/Look/WaypointLook.hpp	/^  const Font *font, *bold_font;$/;"	m	struct:WaypointLook
font	src/Look/WindArrowLook.hpp	/^  const Font *font;$/;"	m	struct:WindArrowLook
font	src/ProgressWindow.hpp	/^  Font font;$/;"	m	class:ProgressWindow
font	src/Renderer/FlightListRenderer.hpp	/^  const Font &font, &header_font;$/;"	m	class:FlightListRenderer
font	src/Screen/LargeTextWindow.hpp	/^  const Font *font = nullptr;$/;"	m	class:LargeTextWindow
font	src/Topography/shapelib/mapserver.h	/^    char *font;$/;"	m	struct:labelObj
font	src/ui/canvas/custom/Cache.cpp	/^  const Font *font;$/;"	m	struct:TextCacheKey	file:
font	src/ui/canvas/memory/Canvas.hpp	/^  const Font *font = nullptr;$/;"	m	class:Canvas
font	src/ui/canvas/opengl/Canvas.hpp	/^  const Font *font = nullptr;$/;"	m	class:Canvas
fontMetrics	src/Topography/shapelib/mapserver.h	/^  } fontMetrics;$/;"	t	typeref:struct:__anon65
fontSetObj	src/Topography/shapelib/mapserver.h	/^  } fontSetObj;$/;"	t	typeref:struct:__anon24
font_bold	src/Look/DialogLook.hpp	/^    const Font *font, *font_bold;$/;"	m	struct:DialogLook::__anon13
font_height	src/Dialogs/Device/DeviceListDialog.cpp	/^  unsigned font_height;$/;"	m	class:final	file:
font_height	src/Dialogs/DownloadFilePicker.cpp	/^  unsigned font_height;$/;"	m	class:final	file:
font_path	src/ui/canvas/freetype/Font.cpp	/^static AllocatedPath font_path = nullptr;$/;"	v	file:
font_scale	src/Screen/Layout.cpp	/^  unsigned font_scale = 1024;$/;"	m	namespace:Layout	file:
font_search_paths	src/ui/canvas/custom/Files.cpp	/^static const char *const font_search_paths[] = {$/;"	v	file:
fonts	src/Topography/shapelib/mapserver.h	/^    char* fonts[MS_MAX_LABEL_FONTS];$/;"	m	struct:__anon64
fonts	src/Topography/shapelib/mapserver.h	/^    hashTableObj fonts;$/;"	m	struct:__anon24
fontset	src/Topography/shapelib/mapserver.h	/^    fontSetObj *fontset; \/* a pointer to the main mapObj version *\/$/;"	m	struct:__anon45
fontset	src/Topography/shapelib/mapserver.h	/^    fontSetObj fontset;$/;"	m	struct:mapObj
foo	src/Device/Driver/LX/LXN.hpp	/^    char foo[22];$/;"	m	struct:LXN::SecurityOld
foo	src/Device/Driver/LX/LXN.hpp	/^    char foo[9];$/;"	m	struct:LXN::Event
foo	src/Device/Driver/LX/LXN.hpp	/^    uint8_t foo;$/;"	m	struct:LXN::KExt
foo	src/Device/Driver/LX/LXN.hpp	/^    uint8_t foo[64];$/;"	m	struct:LXN::Security
footer	src/Topography/shapelib/mapserver.h	/^    char *header, *footer; \/* only used with multi result queries *\/$/;"	m	struct:layerObj
footer	src/Topography/shapelib/mapserver.h	/^    char *header, *footer;$/;"	m	struct:__anon31
footer	src/Topography/shapelib/mapserver.h	/^    char *header, *footer;$/;"	m	struct:__anon35
force	src/CalculationThread.hpp	/^  bool force;$/;"	m	class:final
force	src/Form/Form.hpp	/^  bool force = false;$/;"	m	class:WndForm
force	src/Topography/shapelib/mapserver.h	/^    int force; \/* labels *must* be drawn *\/$/;"	m	struct:labelObj
force_current	src/Engine/Task/Solvers/TaskMinTarget.hpp	/^     force_current(false)$/;"	f	class:final
force_current	src/Engine/Task/Solvers/TaskMinTarget.hpp	/^  bool force_current;$/;"	m	class:final
force_display_mode	src/UIState.hpp	/^  DisplayMode force_display_mode;$/;"	m	struct:UIState
force_draw_selector	src/InfoBoxes/InfoBoxWindow.hpp	/^  bool force_draw_selector = false;$/;"	m	class:InfoBoxWindow
force_full_update	src/Engine/Task/AbstractTask.hpp	/^  bool force_full_update = true;$/;"	m	class:AbstractTask
force_shutdown	src/UIActions.cpp	/^static bool force_shutdown = false;$/;"	v	file:
force_traffic_gauge	src/MainWindow.hpp	/^  bool suppress_traffic_gauge = false, force_traffic_gauge = false;$/;"	m	class:MainWindow
forced_x_dpi	src/Hardware/DisplayDPI.cpp	/^  static unsigned forced_x_dpi = 0;$/;"	v	file:
forced_y_dpi	src/Hardware/DisplayDPI.cpp	/^  static unsigned forced_y_dpi = 0;$/;"	v	file:
forecast_temperature	src/Computer/Settings.hpp	/^  Temperature forecast_temperature;$/;"	m	struct:ComputerSettings
foreground_brush	src/Look/ButtonLook.hpp	/^    Brush foreground_brush;$/;"	m	struct:ButtonLook::StateLook
foreground_color	src/Look/ButtonLook.hpp	/^    Color foreground_color;$/;"	m	struct:ButtonLook::StateLook
form	src/Dialogs/JobDialog.cpp	/^  WndForm &form;$/;"	m	class:DialogJobThread	file:
form	src/Dialogs/Plane/PlaneListDialog.cpp	/^  WndForm *form;$/;"	m	class:final	file:
form	src/Dialogs/ProfileListDialog.cpp	/^  WndForm *form;$/;"	m	class:final	file:
form	src/Dialogs/Settings/dlgConfigInfoboxes.cpp	/^    PixelRect form;$/;"	m	struct:final::Layout	file:
form	src/Dialogs/Waypoint/WaypointCommandsWidget.hpp	/^  WndForm *const form;$/;"	m	class:final
format	src/Dialogs/Device/Vega/VegaParametersWidget.hpp	/^    const TCHAR *format;$/;"	m	struct:VegaParametersWidget::StaticParameter
format	src/Form/DataField/GeoPoint.hpp	/^  const CoordinateFormat format;$/;"	m	class:final
format	src/Topography/shapelib/mapserver.h	/^    outputFormatObj *format;$/;"	m	struct:imageObj
format	src/UISettings.hpp	/^  FormatSettings format;$/;"	m	struct:UISettings
format	src/Widget/OffsetButtonsWidget.hpp	/^  const TCHAR *const format;$/;"	m	class:OffsetButtonsWidget
format	src/ui/canvas/custom/UncompressedImage.hpp	/^  Format format;$/;"	m	class:UncompressedImage
format_buffer	src/io/TextWriter.hpp	/^  ReusableArray<TCHAR> format_buffer;$/;"	m	class:TextWriter
format_revision	src/Language/MOFile.hpp	/^    uint32_t format_revision;$/;"	m	struct:MOFile::mo_header
formatoptions	src/Topography/shapelib/mapserver.h	/^    char **formatoptions;$/;"	m	struct:__anon32
found	src/Engine/Airspace/AirspaceWarningManager.cpp	/^  bool found;$/;"	m	class:final	file:
fp	src/Topography/shapelib/maperror.h	/^    FILE        *fp;$/;"	m	struct:debug_info_obj
fp	src/Topography/shapelib/mapshape.h	/^    struct zzip_file  *fp;$/;"	m	struct:__anon76	typeref:struct:__anon76::zzip_file
fp	src/Topography/shapelib/maptree.h	/^    struct zzip_file        *fp;$/;"	m	struct:__anon81	typeref:struct:__anon81::zzip_file
fp	src/zzip/lib.h	/^        struct zzip_file * volatile fp;  $/;"	m	struct:zzip_dir::__anon184
fpSHP	src/Topography/shapelib/mapshape.h	/^    struct zzip_file  *fpSHP;$/;"	m	struct:__anon75	typeref:struct:__anon75::zzip_file
fpSHX	src/Topography/shapelib/mapshape.h	/^    struct zzip_file  *fpSHX;$/;"	m	struct:__anon75	typeref:struct:__anon75::zzip_file
fr	src/Gauge/FlarmTrafficWindow.hpp	/^  FastRotation fr;$/;"	m	class:FlarmTrafficWindow
frame_buffer	src/ui/canvas/opengl/BufferCanvas.hpp	/^  GLFrameBuffer *frame_buffer = nullptr;$/;"	m	class:DisplayOrientation
frame_renderer	src/Renderer/ColorButtonRenderer.hpp	/^  ButtonFrameRenderer frame_renderer;$/;"	m	class:ColorButtonRenderer
frame_renderer	src/Renderer/SymbolButtonRenderer.hpp	/^  ButtonFrameRenderer frame_renderer;$/;"	m	class:SymbolButtonRenderer
frame_renderer	src/Renderer/TextButtonRenderer.hpp	/^  ButtonFrameRenderer frame_renderer;$/;"	m	class:TextButtonRenderer
frame_sync	src/ui/canvas/custom/TopCanvas.hpp	/^  bool frame_sync = false;$/;"	m	class:DisplayOrientation
frecord	src/Logger/LoggerImpl.hpp	/^  LoggerFRecord frecord;$/;"	m	class:LoggerImpl
freeImage	src/Topography/shapelib/mapserver.h	/^    int (*freeImage)(imageObj *image);$/;"	m	struct:rendererVTableObj
freeSymbol	src/Topography/shapelib/mapserver.h	/^    int (*freeSymbol)(symbolObj *symbol);$/;"	m	struct:rendererVTableObj
freetype_mutex	src/ui/canvas/freetype/Font.cpp	/^static Mutex freetype_mutex;$/;"	v	file:
frequency	src/FLARM/FlarmNetRecord.hpp	/^  StaticString<LatinBufferSize(8)> frequency;$/;"	m	struct:FlarmNetRecord
friday	src/Engine/Airspace/AirspaceActivity.hpp	/^    bool friday:1;$/;"	m	struct:AirspaceActivity::Days
from	src/Topography/shapelib/mapserver.h	/^    char *from, *to; \/* item names *\/$/;"	m	struct:__anon31
from	src/ui/event/poll/linux/Translate.hpp	/^  unsigned from, to;$/;"	m	struct:__anon178
front	src/Engine/Trace/Trace.hpp	/^  const TracePoint &front() const {$/;"	f	class:Trace
front	src/net/AddressInfo.hxx	/^	const AddressInfo &front() const {$/;"	f	class:AddressInfoList
front	src/util/StringParser.hxx	/^	value_type front() const {$/;"	f	class:StringParser
fs_renderer	src/Dialogs/dlgAnalysis.cpp	/^  FlightStatisticsRenderer fs_renderer;$/;"	m	class:ChartControl	file:
ft_library	src/ui/canvas/freetype/Init.cpp	/^static FT_Library ft_library;$/;"	v	file:
ftp_credentials	src/Weather/PCMet/Settings.hpp	/^  Credentials ftp_credentials;$/;"	m	struct:PCMetSettings
ftyp	src/Terrain/jasper/jp2/jp2_cod.h	/^		jp2_ftyp_t ftyp;$/;"	m	union:__anon94::__anon95
full	src/Computer/TraceComputer.hpp	/^  Trace full, contest, sprint;$/;"	m	class:TraceComputer
full	src/Dialogs/WidgetDialog.hpp	/^  bool full;$/;"	m	class:WidgetDialog
full	src/MapWindow/MapWindowGlideRange.cpp	/^  bool full() const {$/;"	f	struct:ProjectedFans
full	src/util/StaticString.hxx	/^	bool full() const {$/;"	f	class:StaticStringBase
full_screen	src/CommandLine.cpp	/^  bool full_screen = false;$/;"	m	namespace:CommandLine	file:
full_screen	src/CommandLine.hpp	/^  static constexpr bool full_screen = false;$/;"	m	namespace:CommandLine
full_screen	src/ui/window/TopWindow.hpp	/^  bool full_screen = false;$/;"	m	class:UI::TopWindowStyle
full_trace_no_thin_time	src/Computer/TraceComputer.cpp	/^static constexpr unsigned full_trace_no_thin_time =$/;"	v	file:
full_trace_size	src/Computer/TraceComputer.cpp	/^static constexpr unsigned full_trace_size =$/;"	v	file:
fullscreen	src/Dialogs/Task/Manager/Internal.hpp	/^  bool fullscreen = false;$/;"	m	class:final
function	src/Blackboard/ScopeCalculatedListener.hpp	/^  Function function;$/;"	m	class:ScopeCalculatedListener
function	src/Blackboard/ScopeGPSListener.hpp	/^  Function function;$/;"	m	class:ScopeGPSListener
function	src/Form/List.hpp	/^  const ListItemRendererFunction function;$/;"	m	class:FunctionListItemRenderer
function	src/util/BindMethod.hxx	/^		:instance_(_instance), function(_function) {}$/;"	f	class:BoundMethod
function	src/util/BindMethod.hxx	/^	BoundMethod(std::nullptr_t) noexcept:function(nullptr) {}$/;"	f	class:BoundMethod
function	src/util/BindMethod.hxx	/^	function_pointer function;$/;"	m	class:BoundMethod
fv	src/Device/Driver/IMI/Protocol/Types.hpp	/^    IMIDWORD fv:2;$/;"	m	struct:IMI::FixB
fx	src/Geo/Flat/FlatRay.hpp	/^  double fx;$/;"	m	class:FlatRay
fxa	src/Device/Driver/IMI/Protocol/Types.hpp	/^    IMIDWORD fxa:10;$/;"	m	struct:IMI::FixB
fxa1	src/Device/Driver/IMI/Protocol/Types.hpp	/^    IMISDWORD fxa1:8;$/;"	m	struct:IMI::FixB2
fxa2	src/Device/Driver/IMI/Protocol/Types.hpp	/^    IMISDWORD fxa2:8;$/;"	m	struct:IMI::FixB2
fy	src/Geo/Flat/FlatRay.hpp	/^  double fy;$/;"	m	class:FlatRay
g	src/Engine/Route/AStar.hpp	/^  unsigned g;$/;"	m	struct:AStarPriorityValue
g	src/ui/canvas/PortableColor.hpp	/^  uint8_t b, g, r;$/;"	m	class:BGR8Color
g	src/ui/canvas/PortableColor.hpp	/^  uint8_t r, g, b;$/;"	m	class:RGB8Color
g	src/ui/canvas/opengl/Color.hpp	/^  Component r, g, b, a;$/;"	m	class:Color
g_key	src/Logger/GRecord.cpp	/^static constexpr MD5::State g_key[GRecord::N_MD5] = {$/;"	v	file:
g_load	src/Engine/Navigation/Aircraft.hpp	/^  double g_load;$/;"	m	struct:AircraftState
g_load	src/NMEA/Acceleration.hpp	/^  double g_load;$/;"	m	struct:AccelerationState
gain	src/NMEA/ClimbInfo.hpp	/^  double gain;$/;"	m	struct:OneClimbInfo
galt	src/Device/Driver/LX/LXN.hpp	/^    uint16_t time, latitude, longitude, aalt, galt;$/;"	m	struct:LXN::Position
gap	src/Topography/shapelib/mapserver.h	/^    double gap; \/*moved from symbolObj in version 6.0*\/$/;"	m	struct:styleObj
gap	src/Topography/shapelib/mapserver.h	/^    double gap;$/;"	m	struct:__anon63
gaps_filled	src/Engine/Route/FlatTriangleFanTree.hpp	/^  bool gaps_filled = false;$/;"	m	class:FlatTriangleFanTree
gauge_location	src/Gauge/TrafficSettings.hpp	/^  } gauge_location;$/;"	m	struct:TrafficSettings	typeref:class:TrafficSettings::GaugeLocation
gauge_pages	src/Dialogs/Settings/dlgConfiguration.cpp	/^static constexpr TabMenuPage gauge_pages[] = {$/;"	v	file:
gcc_aligned	src/util/Compiler.h	105;"	d
gcc_aligned	src/util/Compiler.h	135;"	d
gcc_always_inline	src/util/Compiler.h	110;"	d
gcc_always_inline	src/util/Compiler.h	140;"	d
gcc_cold	src/util/Compiler.h	147;"	d
gcc_cold	src/util/Compiler.h	152;"	d
gcc_const	src/util/Compiler.h	116;"	d
gcc_const	src/util/Compiler.h	86;"	d
gcc_deprecated	src/util/Compiler.h	117;"	d
gcc_deprecated	src/util/Compiler.h	87;"	d
gcc_fallthrough	src/util/Compiler.h	163;"	d
gcc_fallthrough	src/util/Compiler.h	165;"	d
gcc_fallthrough	src/util/Compiler.h	167;"	d
gcc_flatten	src/util/Compiler.h	157;"	d
gcc_flatten	src/util/Compiler.h	159;"	d
gcc_hot	src/util/Compiler.h	146;"	d
gcc_hot	src/util/Compiler.h	151;"	d
gcc_likely	src/util/Compiler.h	102;"	d
gcc_likely	src/util/Compiler.h	132;"	d
gcc_malloc	src/util/Compiler.h	119;"	d
gcc_malloc	src/util/Compiler.h	89;"	d
gcc_may_alias	src/util/Compiler.h	118;"	d
gcc_may_alias	src/util/Compiler.h	88;"	d
gcc_nonnull	src/util/Compiler.h	128;"	d
gcc_nonnull	src/util/Compiler.h	98;"	d
gcc_nonnull_all	src/util/Compiler.h	129;"	d
gcc_nonnull_all	src/util/Compiler.h	99;"	d
gcc_noreturn	src/util/Compiler.h	120;"	d
gcc_noreturn	src/util/Compiler.h	90;"	d
gcc_packed	src/Device/Driver/CAI302/Protocol.hpp	/^    } gcc_packed;$/;"	m	struct:CAI302::FileList	typeref:struct:CAI302::FileList::FileInfo
gcc_packed	src/Device/Driver/CAI302/Protocol.hpp	/^  } gcc_packed;$/;"	m	namespace:CAI302	typeref:struct:CAI302::FileData
gcc_packed	src/Device/Driver/CAI302/Protocol.hpp	/^  } gcc_packed;$/;"	m	namespace:CAI302	typeref:struct:CAI302::FileList
gcc_packed	src/Device/Driver/CAI302/Protocol.hpp	/^  } gcc_packed;$/;"	m	namespace:CAI302	typeref:struct:CAI302::FileSignatureASCII
gcc_packed	src/Device/Driver/CAI302/Protocol.hpp	/^  } gcc_packed;$/;"	m	namespace:CAI302	typeref:struct:CAI302::GeneralInfo
gcc_packed	src/Device/Driver/CAI302/Protocol.hpp	/^  } gcc_packed;$/;"	m	namespace:CAI302	typeref:struct:CAI302::Navpoint
gcc_packed	src/Device/Driver/CAI302/Protocol.hpp	/^  } gcc_packed;$/;"	m	namespace:CAI302	typeref:struct:CAI302::Pilot
gcc_packed	src/Device/Driver/CAI302/Protocol.hpp	/^  } gcc_packed;$/;"	m	namespace:CAI302	typeref:struct:CAI302::PilotMeta
gcc_packed	src/Device/Driver/CAI302/Protocol.hpp	/^  } gcc_packed;$/;"	m	namespace:CAI302	typeref:struct:CAI302::PilotMetaActive
gcc_packed	src/Device/Driver/CAI302/Protocol.hpp	/^  } gcc_packed;$/;"	m	namespace:CAI302	typeref:struct:CAI302::Polar
gcc_packed	src/Device/Driver/CAI302/Protocol.hpp	/^  } gcc_packed;$/;"	m	namespace:CAI302	typeref:struct:CAI302::PolarMeta
gcc_packed	src/Device/Driver/IMI/Protocol/Types.hpp	/^  } gcc_packed; \/\/ B record (id = 2)$/;"	m	namespace:IMI	typeref:struct:IMI::FixB
gcc_packed	src/Device/Driver/IMI/Protocol/Types.hpp	/^  } gcc_packed; \/\/ B2 record (id = 3)$/;"	m	namespace:IMI	typeref:struct:IMI::FixB2
gcc_packed	src/Device/Driver/IMI/Protocol/Types.hpp	/^  } gcc_packed; \/\/ Event, Satellites, Comment (id = 5)$/;"	m	namespace:IMI	typeref:struct:IMI::FixE
gcc_packed	src/Device/Driver/IMI/Protocol/Types.hpp	/^  } gcc_packed;$/;"	m	namespace:IMI	typeref:struct:IMI::Fix
gcc_packed	src/Device/Driver/IMI/Protocol/Types.hpp	/^  } gcc_packed;$/;"	m	namespace:IMI	typeref:struct:IMI::FixK
gcc_packed	src/Device/Driver/IMI/Protocol/Types.hpp	/^  } gcc_packed;$/;"	m	namespace:IMI	typeref:struct:IMI::Flight
gcc_packed	src/Device/Driver/IMI/Protocol/Types.hpp	/^  } gcc_packed;$/;"	m	namespace:IMI	typeref:struct:IMI::FlightFinish
gcc_packed	src/Device/Driver/IMI/Protocol/Types.hpp	/^  } gcc_packed;$/;"	m	namespace:IMI	typeref:struct:IMI::FlightInfo
gcc_packed	src/Device/Driver/IMI/Protocol/Types.hpp	/^  } gcc_packed;$/;"	m	namespace:IMI	typeref:struct:IMI::Signature
gcc_packed	src/Device/Driver/IMI/Protocol/Types.hpp	/^  } gcc_packed;$/;"	m	namespace:IMI	typeref:struct:IMI::TDeclaration
gcc_packed	src/Device/Driver/IMI/Protocol/Types.hpp	/^  } gcc_packed;$/;"	m	namespace:IMI	typeref:struct:IMI::TDeclarationHeader
gcc_packed	src/Device/Driver/IMI/Protocol/Types.hpp	/^  } gcc_packed;$/;"	m	namespace:IMI	typeref:struct:IMI::TDeviceInfo
gcc_packed	src/Device/Driver/IMI/Protocol/Types.hpp	/^  } gcc_packed;$/;"	m	namespace:IMI	typeref:struct:IMI::TMsg
gcc_packed	src/Device/Driver/IMI/Protocol/Types.hpp	/^  } gcc_packed;$/;"	m	namespace:IMI	typeref:struct:IMI::TObservationZone
gcc_packed	src/Device/Driver/IMI/Protocol/Types.hpp	/^  } gcc_packed;$/;"	m	namespace:IMI	typeref:struct:IMI::TWaypoint
gcc_packed	src/Device/Driver/LX/LXN.hpp	/^  } gcc_packed;$/;"	m	namespace:LXN	typeref:struct:LXN::BExt
gcc_packed	src/Device/Driver/LX/LXN.hpp	/^  } gcc_packed;$/;"	m	namespace:LXN	typeref:struct:LXN::CompetitionClass
gcc_packed	src/Device/Driver/LX/LXN.hpp	/^  } gcc_packed;$/;"	m	namespace:LXN	typeref:struct:LXN::Date
gcc_packed	src/Device/Driver/LX/LXN.hpp	/^  } gcc_packed;$/;"	m	namespace:LXN	typeref:struct:LXN::End
gcc_packed	src/Device/Driver/LX/LXN.hpp	/^  } gcc_packed;$/;"	m	namespace:LXN	typeref:struct:LXN::Event
gcc_packed	src/Device/Driver/LX/LXN.hpp	/^  } gcc_packed;$/;"	m	namespace:LXN	typeref:struct:LXN::ExtConfig
gcc_packed	src/Device/Driver/LX/LXN.hpp	/^  } gcc_packed;$/;"	m	namespace:LXN	typeref:struct:LXN::FlightInfo
gcc_packed	src/Device/Driver/LX/LXN.hpp	/^  } gcc_packed;$/;"	m	namespace:LXN	typeref:struct:LXN::KExt
gcc_packed	src/Device/Driver/LX/LXN.hpp	/^  } gcc_packed;$/;"	m	namespace:LXN	typeref:struct:LXN::Origin
gcc_packed	src/Device/Driver/LX/LXN.hpp	/^  } gcc_packed;$/;"	m	namespace:LXN	typeref:struct:LXN::Position
gcc_packed	src/Device/Driver/LX/LXN.hpp	/^  } gcc_packed;$/;"	m	namespace:LXN	typeref:struct:LXN::Security
gcc_packed	src/Device/Driver/LX/LXN.hpp	/^  } gcc_packed;$/;"	m	namespace:LXN	typeref:struct:LXN::Security7000
gcc_packed	src/Device/Driver/LX/LXN.hpp	/^  } gcc_packed;$/;"	m	namespace:LXN	typeref:struct:LXN::SecurityOld
gcc_packed	src/Device/Driver/LX/LXN.hpp	/^  } gcc_packed;$/;"	m	namespace:LXN	typeref:struct:LXN::Serial
gcc_packed	src/Device/Driver/LX/LXN.hpp	/^  } gcc_packed;$/;"	m	namespace:LXN	typeref:struct:LXN::Start
gcc_packed	src/Device/Driver/LX/LXN.hpp	/^  } gcc_packed;$/;"	m	namespace:LXN	typeref:struct:LXN::String
gcc_packed	src/Device/Driver/LX/LXN.hpp	/^  } gcc_packed;$/;"	m	namespace:LXN	typeref:struct:LXN::Task
gcc_packed	src/Device/Driver/LX/LXN.hpp	/^  } gcc_packed;$/;"	m	namespace:LXN	typeref:struct:LXN::Version
gcc_packed	src/Device/Driver/LX/Protocol.hpp	/^  } gcc_packed;$/;"	m	namespace:LX	typeref:struct:LX::ContestClass
gcc_packed	src/Device/Driver/LX/Protocol.hpp	/^  } gcc_packed;$/;"	m	namespace:LX	typeref:struct:LX::Declaration
gcc_packed	src/Device/Driver/LX/Protocol.hpp	/^  } gcc_packed;$/;"	m	namespace:LX	typeref:struct:LX::FlightInfo
gcc_packed	src/Device/Driver/LX/Protocol.hpp	/^  } gcc_packed;$/;"	m	namespace:LX	typeref:struct:LX::MemoryAddress24
gcc_packed	src/Device/Driver/LX/Protocol.hpp	/^  } gcc_packed;$/;"	m	namespace:LX	typeref:struct:LX::MemoryAddress32
gcc_packed	src/Device/Driver/LX/Protocol.hpp	/^  } gcc_packed;$/;"	m	namespace:LX	typeref:struct:LX::MemorySection
gcc_packed	src/Device/Driver/LX/Protocol.hpp	/^  } gcc_packed;$/;"	m	namespace:LX	typeref:struct:LX::Pilot
gcc_packed	src/Device/Driver/LX/Protocol.hpp	/^  } gcc_packed;$/;"	m	namespace:LX	typeref:struct:LX::SeekMemory
gcc_packed	src/Device/Driver/Volkslogger/Database.hpp	/^  } gcc_packed;$/;"	m	namespace:Volkslogger	typeref:struct:Volkslogger::DeclarationWaypoint
gcc_packed	src/Device/Driver/Volkslogger/Database.hpp	/^  } gcc_packed;$/;"	m	namespace:Volkslogger	typeref:struct:Volkslogger::Pilot
gcc_packed	src/Device/Driver/Volkslogger/Database.hpp	/^  } gcc_packed;$/;"	m	namespace:Volkslogger	typeref:struct:Volkslogger::Route
gcc_packed	src/Device/Driver/Volkslogger/Database.hpp	/^  } gcc_packed;$/;"	m	namespace:Volkslogger	typeref:struct:Volkslogger::TableHeader
gcc_packed	src/Device/Driver/Volkslogger/Database.hpp	/^  } gcc_packed;$/;"	m	namespace:Volkslogger	typeref:struct:Volkslogger::Waypoint
gcc_packed	src/util/Compiler.h	121;"	d
gcc_packed	src/util/Compiler.h	91;"	d
gcc_printf	src/util/Compiler.h	122;"	d
gcc_printf	src/util/Compiler.h	92;"	d
gcc_pure	src/util/Compiler.h	123;"	d
gcc_pure	src/util/Compiler.h	93;"	d
gcc_restrict	src/util/Compiler.h	172;"	d
gcc_restrict	src/util/Compiler.h	175;"	d
gcc_restrict	src/util/Compiler.h	178;"	d
gcc_returns_nonnull	src/util/Compiler.h	100;"	d
gcc_returns_nonnull	src/util/Compiler.h	130;"	d
gcc_sentinel	src/util/Compiler.h	124;"	d
gcc_sentinel	src/util/Compiler.h	94;"	d
gcc_unlikely	src/util/Compiler.h	103;"	d
gcc_unlikely	src/util/Compiler.h	133;"	d
gcc_unreachable	src/util/Compiler.h	193;"	d
gcc_unreachable	src/util/Compiler.h	195;"	d
gcc_unused	src/util/Compiler.h	125;"	d
gcc_unused	src/util/Compiler.h	95;"	d
gcc_unused_field	src/util/Compiler.h	187;"	d
gcc_unused_field	src/util/Compiler.h	189;"	d
gcc_visibility_default	src/util/Compiler.h	108;"	d
gcc_visibility_default	src/util/Compiler.h	138;"	d
gcc_visibility_hidden	src/util/Compiler.h	107;"	d
gcc_visibility_hidden	src/util/Compiler.h	137;"	d
gcc_warn_unused_result	src/util/Compiler.h	126;"	d
gcc_warn_unused_result	src/util/Compiler.h	96;"	d
gcnt	src/Device/Driver/Volkslogger/grecord.h	/^  int  gcnt;$/;"	m	class:GRECORD
gdiplusToken	src/ui/canvas/gdi/GdiPlusBitmap.cpp	/^static ULONG_PTR gdiplusToken;$/;"	v	file:
generateLineIntersection	src/Topography/shapelib/mapprimitive.c	/^static pointObj generateLineIntersection(pointObj a, pointObj b, pointObj c, pointObj d)$/;"	f	file:
generic_driver	src/Device/Driver/Generic.cpp	/^const struct DeviceRegister generic_driver = {$/;"	v	typeref:struct:DeviceRegister
geo_location	src/Projection/Projection.hpp	/^  GeoPoint geo_location = GeoPoint::Invalid();$/;"	m	class:Projection
geo_points	src/MapWindow/MapCanvas.hpp	/^  AllocatedArray<GeoPoint> geo_points;$/;"	m	class:MapCanvas
geo_points_buffer	src/MapWindow/StencilMapCanvas.hpp	/^  ReusableArray<GeoPoint> geo_points_buffer;$/;"	m	class:StencilMapCanvas
geometry	src/Dialogs/Settings/dlgConfigInfoboxes.cpp	/^  const InfoBoxSettings::Geometry geometry;$/;"	m	class:final	file:
geometry	src/Gauge/GaugeVario.hpp	/^  } geometry;$/;"	m	class:GaugeVario	typeref:struct:GaugeVario::Geometry
geometry	src/Geo/Boost/GeoPoint.hpp	/^namespace geometry {$/;"	n	namespace:boost
geometry	src/InfoBoxes/InfoBoxLayout.hpp	/^    InfoBoxSettings::Geometry geometry;$/;"	m	struct:InfoBoxLayout::Layout
geometry	src/InfoBoxes/InfoBoxSettings.hpp	/^  } geometry;$/;"	m	struct:InfoBoxSettings	typeref:class:InfoBoxSettings::Geometry
geometry	src/Topography/shapelib/mapprimitive.h	/^  void *geometry;$/;"	m	struct:__anon72
geometry_counts	src/InfoBoxes/InfoBoxLayout.cpp	/^static constexpr unsigned char geometry_counts[] = {$/;"	v	file:
geotransform	src/Topography/shapelib/mapprimitive.h	/^  double geotransform[6];    \/* Pixel\/line to georef. *\/$/;"	m	struct:__anon74
geotransformObj	src/Topography/shapelib/mapprimitive.h	/^} geotransformObj;$/;"	t	typeref:struct:__anon74
gesture	src/Look/Look.hpp	/^  GestureLook gesture;$/;"	m	struct:Look
gesture	src/UIUtil/GestureManager.hpp	/^  StaticString<11> gesture;$/;"	m	class:GestureManager
gesture_look	src/MapWindow/GlueMapWindow.hpp	/^  const GestureLook &gesture_look;$/;"	m	class:GlueMapWindow
gesture_to_event	src/Input/InputEvents.cpp	/^InputEvents::gesture_to_event(const TCHAR *data)$/;"	f	class:InputEvents
gestures	src/Dialogs/dlgAnalysis.cpp	/^  GestureManager gestures;$/;"	m	class:ChartControl	file:
gestures	src/Gauge/BigThermalAssistantWindow.hpp	/^  GestureManager gestures;$/;"	m	class:BigThermalAssistantWindow
gestures	src/Gauge/BigTrafficWidget.cpp	/^  GestureManager gestures;$/;"	m	class:FlarmTrafficControl	file:
gestures	src/MainWindow.hpp	/^  GestureManager gestures;$/;"	m	class:MainWindow
gestures	src/MapWindow/GlueMapWindow.hpp	/^  TrackingGestureManager gestures;$/;"	m	class:GlueMapWindow
get	src/Device/Driver/Volkslogger/vlapi2.cpp	/^VLAPI_DATA::DECLARATION::get(const DBB &dbb)$/;"	f	class:VLAPI_DATA::DECLARATION
get	src/Device/Driver/Volkslogger/vlapi2.cpp	/^VLAPI_DATA::PILOT::get(const void *p)$/;"	f	class:VLAPI_DATA::PILOT
get	src/Device/Driver/Volkslogger/vlapi2.cpp	/^void VLAPI_DATA::DCLWPT::get(const void *p) {$/;"	f	class:VLAPI_DATA::DCLWPT
get	src/Device/Driver/Volkslogger/vlapi2.cpp	/^void VLAPI_DATA::ROUTE::get(const void *p) {$/;"	f	class:VLAPI_DATA::ROUTE
get	src/Device/Driver/Volkslogger/vlapi2.cpp	/^void VLAPI_DATA::WPT::get(const void *p) {$/;"	f	class:VLAPI_DATA::WPT
get	src/Geo/Boost/GeoPoint.hpp	/^  static inline double get(const GeoPoint &p) {$/;"	f	struct:boost::geometry::traits::access
get	src/Language/MOLoader.hpp	/^  const MOFile &get() const {$/;"	f	class:MOLoader
get	src/io/ZipArchive.hpp	/^  struct zzip_dir *get() {$/;"	f	class:ZipArchive
get	src/util/ReusableArray.hpp	/^  T *get(size_type _length) {$/;"	f	class:ReusableArray
getAbsolutePath_method	src/java/File.cxx	/^jmethodID Java::File::getAbsolutePath_method;$/;"	m	class:Java::File	file:
getAbsolutePath_method	src/java/File.hxx	/^	static jmethodID getAbsolutePath_method;$/;"	m	class:Java::File
getBaudRate	src/Android/PortBridge.hpp	/^  int getBaudRate(JNIEnv *env) const {$/;"	f	class:PortBridge
getBaudRate_method	src/Android/PortBridge.cpp	/^jmethodID PortBridge::getBaudRate_method;$/;"	m	class:PortBridge	file:
getBaudRate_method	src/Android/PortBridge.hpp	/^  static jmethodID getBaudRate_method, setBaudRate_method;$/;"	m	class:PortBridge
getContentLength	src/java/URL.hxx	/^	static int getContentLength(JNIEnv *env, jobject connection) {$/;"	f	class:Java::URLConnection
getContentLength_method	src/java/URL.cxx	/^jmethodID Java::URLConnection::getContentLength_method;$/;"	m	class:Java::URLConnection	file:
getContentLength_method	src/java/URL.hxx	/^	static jmethodID getContentLength_method;$/;"	m	class:Java::URLConnection
getDeviceIndex	src/Android/InternalSensors.cpp	/^getDeviceIndex(JNIEnv *env, jobject obj)$/;"	f	file:
getDirection	src/UIUtil/GestureManager.cpp	/^getDirection(int dx, int dy)$/;"	f	file:
getExternalStorageDirectory	src/Android/Environment.cpp	/^getExternalStorageDirectory(JNIEnv *env)$/;"	f	file:
getExternalStorageDirectory_method	src/Android/Environment.cpp	/^static jmethodID getExternalStorageDirectory_method;$/;"	m	namespace:Environment	file:
getExternalStoragePublicDirectory	src/Android/Environment.cpp	/^getExternalStoragePublicDirectory(JNIEnv *env, const char *type)$/;"	f	file:
getExternalStoragePublicDirectory_method	src/Android/Environment.cpp	/^static jmethodID getExternalStoragePublicDirectory_method;$/;"	m	namespace:Environment	file:
getHeight_method	src/Android/Bitmap.cpp	/^jmethodID AndroidBitmap::getHeight_method;$/;"	m	class:AndroidBitmap	file:
getHeight_method	src/Android/Bitmap.hpp	/^  static jmethodID getWidth_method, getHeight_method;$/;"	m	class:AndroidBitmap
getInputStream	src/java/URL.hxx	/^	static jobject getInputStream(JNIEnv *env, jobject connection) {$/;"	f	class:Java::URLConnection
getInputStream_method	src/java/URL.cxx	/^jmethodID Java::URLConnection::getInputStream_method;$/;"	m	class:Java::URLConnection	file:
getInputStream_method	src/java/URL.hxx	/^	static jmethodID getInputStream_method;$/;"	m	class:Java::URLConnection
getItem	src/Form/DataField/Enum.cpp	/^DataFieldEnum::getItem(unsigned index) const$/;"	f	class:DataFieldEnum
getLeastImportantItem	src/Computer/Wind/MeasurementList.cpp	/^WindMeasurementList::getLeastImportantItem(unsigned now)$/;"	f	class:WindMeasurementList
getModeID	src/Input/InputEvents.cpp	/^InputEvents::getModeID()$/;"	f	class:InputEvents
getNameFromAddress_method	src/Android/BluetoothHelper.cpp	/^static jmethodID getNameFromAddress_method;$/;"	m	namespace:BluetoothHelper	file:
getNetState	src/Android/NativeView.hpp	/^  int getNetState() const {$/;"	f	class:NativeView
getNetState_method	src/Android/NativeView.cpp	/^jmethodID NativeView::getNetState_method;$/;"	m	class:NativeView	file:
getNetState_method	src/Android/NativeView.hpp	/^  static jmethodID getNetState_method;$/;"	m	class:NativeView
getNumberUarts	src/Device/Port/AndroidIOIOUartPort.hpp	/^  static inline unsigned getNumberUarts() { return 4; }$/;"	f	namespace:AndroidIOIOUartPort
getPolygonCenterOfGravity	src/Topography/shapelib/mapprimitive.c	/^static int getPolygonCenterOfGravity(shapeObj *p, pointObj *lp)$/;"	f	file:
getPortHelp	src/Device/Port/AndroidIOIOUartPort.hpp	/^  static inline const TCHAR *getPortHelp(unsigned UartID) {$/;"	f	namespace:AndroidIOIOUartPort
getRasterBufferCopy	src/Topography/shapelib/mapserver.h	/^    int WARN_UNUSED (*getRasterBufferCopy)(imageObj *img, rasterBufferObj *rb);$/;"	m	struct:rendererVTableObj
getRasterBufferHandle	src/Topography/shapelib/mapserver.h	/^    int WARN_UNUSED (*getRasterBufferHandle)(imageObj *img, rasterBufferObj *rb);$/;"	m	struct:rendererVTableObj
getRingArea	src/Topography/shapelib/mapprimitive.c	/^static double getRingArea(lineObj *ring)$/;"	f	file:
getState	src/Android/PortBridge.hpp	/^  int getState(JNIEnv *env) {$/;"	f	class:PortBridge
getState_method	src/Android/PortBridge.cpp	/^jmethodID PortBridge::getState_method;$/;"	m	class:PortBridge	file:
getState_method	src/Android/PortBridge.hpp	/^  static jmethodID getState_method;$/;"	m	class:PortBridge
getSubNodeOffset	src/Topography/shapelib/maptree.c	/^static ms_int32 getSubNodeOffset(treeNodeObj *node)$/;"	f	file:
getSubscribableSensors	src/Android/InternalSensors.cpp	/^InternalSensors::getSubscribableSensors(JNIEnv *env, jobject sensors_obj)$/;"	f	class:InternalSensors
getSubscribableSensors	src/Android/InternalSensors.hpp	/^  const auto &getSubscribableSensors() const {$/;"	f	class:InternalSensors
getTaskValidationErrors	src/Task/ValidationErrorStrings.cpp	/^getTaskValidationErrors(const TaskValidationErrorSet v)$/;"	f
getTextBounds	src/Android/TextUtil.cpp	/^TextUtil::getTextBounds(StringView text) const$/;"	f	class:TextUtil
getTextTextureGL	src/Android/TextUtil.cpp	/^TextUtil::getTextTextureGL(StringView text) const$/;"	f	class:TextUtil
getWidth_method	src/Android/Bitmap.cpp	/^jmethodID AndroidBitmap::getWidth_method;$/;"	m	class:AndroidBitmap	file:
getWidth_method	src/Android/Bitmap.hpp	/^  static jmethodID getWidth_method, getHeight_method;$/;"	m	class:AndroidBitmap
getWind	src/Computer/Wind/MeasurementList.cpp	/^WindMeasurementList::getWind(unsigned now, double alt, bool &found) const$/;"	f	class:WindMeasurementList
get_active_solution	src/Engine/Task/Solvers/TaskMacCready.hpp	/^  const GlideResult &get_active_solution() const {$/;"	f	class:TaskMacCready
get_aircraft_start	src/Engine/Task/Solvers/TaskMacCreadyRemaining.cpp	/^TaskMacCreadyRemaining::get_aircraft_start(const AircraftState &aircraft) const$/;"	f	class:TaskMacCreadyRemaining
get_aircraft_start	src/Engine/Task/Solvers/TaskMacCreadyTotal.cpp	/^TaskMacCreadyTotal::get_aircraft_start(const AircraftState &aircraft) const$/;"	f	class:TaskMacCreadyTotal
get_aircraft_start	src/Engine/Task/Solvers/TaskMacCreadyTravelled.cpp	/^TaskMacCreadyTravelled::get_aircraft_start(const AircraftState &aircraft) const$/;"	f	class:TaskMacCreadyTravelled
get_ascent_height	src/Android/TextUtil.hpp	/^  unsigned get_ascent_height() const {$/;"	f	class:TextUtil
get_bounds	src/Topography/XShape.hpp	/^  const GeoBounds &get_bounds() const {$/;"	f	class:XShape
get_capital_height	src/Android/TextUtil.hpp	/^  unsigned get_capital_height() const {$/;"	f	class:TextUtil
get_cursor_name	src/Dialogs/Task/Manager/TaskListPanel.cpp	/^TaskListPanel::get_cursor_name()$/;"	f	class:TaskListPanel
get_cursor_task	src/Dialogs/Task/Manager/TaskListPanel.cpp	/^TaskListPanel::get_cursor_task()$/;"	f	class:TaskListPanel
get_dirty	src/ui/canvas/gdi/PaintCanvas.hpp	/^  const PixelRect &get_dirty() const {$/;"	f	class:PaintCanvas
get_height	src/Android/TextUtil.hpp	/^  unsigned get_height() const {$/;"	f	class:TextUtil
get_min_height	src/Engine/Task/Solvers/TaskMacCreadyTravelled.cpp	/^TaskMacCreadyTravelled::get_min_height(const AircraftState &aircraft) const$/;"	f	class:TaskMacCreadyTravelled
get_radius	src/Device/Declaration.cpp	/^get_radius(const OrderedTaskPoint &tp)$/;"	f	file:
get_shape	src/Device/Declaration.cpp	/^get_shape(const OrderedTaskPoint &tp)$/;"	f	file:
get_state	src/Computer/Wind/WindEKF.hpp	/^  const float* get_state() const { return X; };$/;"	f	class:WindEKF
get_string	src/Language/MOFile.cpp	/^MOFile::get_string(const struct mo_table_entry *entry) const$/;"	f	class:MOFile
get_style	src/Android/TextUtil.hpp	/^  unsigned get_style() const {$/;"	f	class:TextUtil
get_temp_directory	src/Terrain/jasper/base/jas_stream.c	/^static size_t get_temp_directory(char *buffer, size_t size)$/;"	f	file:
get_type	src/Topography/XShape.hpp	/^  MS_SHAPE_TYPE get_type() const {$/;"	f	class:XShape
get_value	src/Engine/Task/Stats/TaskVario.hpp	/^  double get_value() const {$/;"	f	class:TaskVario
getdata	src/Terrain/jasper/jp2/jp2_cod.h	/^	int (*getdata)(jp2_box_t *box, jas_stream_t *in);$/;"	m	struct:jp2_boxops_s
getparms	src/Terrain/jasper/jpc/jpc_cs.h	/^	int (*getparms)(jpc_ms_t *ms, jpc_cstate_t *cstate, jas_stream_t *in);$/;"	m	struct:jpc_msops_s
gettext	src/Language/Language.cpp	/^gettext(const TCHAR* text)$/;"	f
gid	src/Device/Driver/IMI/Protocol/Types.hpp	/^    IMICHAR gid[IMIDECL_GID_LENGTH];$/;"	m	struct:IMI::FlightInfo
gid	src/Device/Driver/IMI/Protocol/Types.hpp	/^    IMICHAR gid[IMIDECL_GID_LENGTH];$/;"	m	struct:IMI::TDeclarationHeader
glCreateProgram	src/ui/canvas/opengl/Program.hpp	/^  GLProgram() noexcept:id(glCreateProgram()) {}$/;"	f	class:GLProgram
glCreateShader	src/ui/canvas/opengl/Program.hpp	/^  explicit GLShader(GLenum type) noexcept:id(glCreateShader(type)) {}$/;"	f	class:GLShader
gl_cls	src/Android/GliderLink.cpp	/^Java::TrivialClass GliderLink::gl_cls;$/;"	m	class:GliderLink	file:
gl_cls	src/Android/GliderLink.hpp	/^  static Java::TrivialClass gl_cls;$/;"	m	class:GliderLink
gl_ctor_id	src/Android/GliderLink.cpp	/^jmethodID GliderLink::gl_ctor_id, GliderLink::close_method;$/;"	m	class:GliderLink	file:
gl_ctor_id	src/Android/GliderLink.hpp	/^  static jmethodID gl_ctor_id, close_method;$/;"	m	class:GliderLink
glide	src/Engine/Task/TaskBehaviour.hpp	/^  GlideSettings glide;$/;"	m	struct:TaskBehaviour
glide_computer	src/CalculationThread.hpp	/^  GlideComputer &glide_computer;$/;"	m	class:final
glide_computer	src/Components.cpp	/^GlideComputer *glide_computer;$/;"	v
glide_computer	src/Dialogs/dlgAnalysis.cpp	/^  GlideComputer &glide_computer;$/;"	m	class:final	file:
glide_computer	src/Dialogs/dlgAnalysis.cpp	/^  const GlideComputer &glide_computer;$/;"	m	class:ChartControl	file:
glide_computer	src/MapWindow/MapWindow.hpp	/^  GlideComputer *glide_computer = nullptr;$/;"	m	class:MapWindow
glide_computer	src/MapWindow/TargetMapWindow.hpp	/^  const GlideComputer *glide_computer = nullptr;$/;"	m	class:TargetMapWindow
glide_computer_events	src/Startup.cpp	/^static GlideComputerEvents *glide_computer_events;$/;"	v	file:
glide_polar	src/CrossSection/CrossSectionRenderer.hpp	/^  GlidePolar glide_polar;$/;"	m	class:CrossSectionRenderer
glide_polar	src/Engine/GlideSolvers/MacCready.hpp	/^  const GlidePolar &glide_polar;$/;"	m	class:MacCready
glide_polar	src/Engine/Task/Solvers/TaskMacCready.hpp	/^  GlidePolar glide_polar;$/;"	m	class:TaskMacCready
glide_polar	src/Engine/Task/TaskManager.hpp	/^  GlidePolar glide_polar;$/;"	m	class:TaskManager
glide_polar_safety	src/NMEA/Derived.hpp	/^  GlidePolar glide_polar_safety;$/;"	m	struct:DerivedInfo
glide_polar_task	src/Computer/Settings.hpp	/^  GlidePolar glide_polar_task;$/;"	m	struct:PolarSettings
glide_required	src/Engine/Task/Stats/TaskStats.hpp	/^  double glide_required;$/;"	m	class:TaskStats
glide_settings	src/CrossSection/CrossSectionRenderer.hpp	/^  GlideSettings glide_settings;$/;"	m	class:CrossSectionRenderer
glide_sink	src/Engine/Task/Solvers/TaskMacCready.cpp	/^TaskMacCready::glide_sink(const AircraftState &aircraft, const double S) const$/;"	f	class:TaskMacCready
glide_solution	src/Engine/Task/Solvers/TaskMacCready.cpp	/^TaskMacCready::glide_solution(const AircraftState &aircraft)$/;"	f	class:TaskMacCready
glider	src/Device/Driver/LX/LXN.hpp	/^    char glider[12];$/;"	m	struct:LXN::FlightInfo
glider_average	src/Computer/ThermalLocator.cpp	/^ThermalLocator::glider_average()$/;"	f	class:ThermalLocator
glider_id	src/Device/Driver/CAI302/Protocol.hpp	/^    char glider_id[12];$/;"	m	struct:CAI302::Polar
glider_link	src/Device/Descriptor.hpp	/^  GliderLink *glider_link;$/;"	m	class:final
glider_screen_position	src/MapSettings.hpp	/^  int glider_screen_position;$/;"	m	struct:MapSettings
glider_type	src/Device/Driver/CAI302/Protocol.hpp	/^    char glider_type[12];$/;"	m	struct:CAI302::Polar
gliderid	src/Device/Driver/Volkslogger/vlapi2.h	/^      char gliderid[8];$/;"	m	struct:VLAPI_DATA::DECLARATION::FLIGHTINFO
gliderid	src/Device/Driver/Volkslogger/vlconv.h	/^	char gliderid[8];				\/\/ enough$/;"	m	struct:DIRENTRY
glidertype	src/Device/Driver/Volkslogger/vlapi2.h	/^      char glidertype[13];$/;"	m	struct:VLAPI_DATA::DECLARATION::FLIGHTINFO
glink_data	src/NMEA/Info.hpp	/^  GliderLinkData glink_data;$/;"	m	struct:NMEAInfo
global	src/net/http/Global.cxx	/^	CurlGlobal &global;$/;"	m	class:final	file:
global	src/net/http/Request.hxx	/^	CurlGlobal &global;$/;"	m	class:final
global_cares_channel	src/io/async/GlobalAsioThread.cpp	/^Cares::Channel *global_cares_channel;$/;"	v
global_debug_level	src/Topography/shapelib/maperror.h	/^    debugLevel  global_debug_level;$/;"	m	struct:debug_info_obj
global_dialog_look	src/Kobo/KoboMenu.cpp	/^static DialogLook *global_dialog_look;$/;"	v	file:
global_main_window	src/Kobo/KoboMenu.cpp	/^static UI::SingleWindow *global_main_window;$/;"	v	file:
global_progress_window	src/ProgressGlue.cpp	/^static ProgressWindow *global_progress_window;$/;"	v	file:
global_running	src/Protection.cpp	/^bool global_running;$/;"	v
global_simulator_flag	src/Simulator.cpp	/^bool global_simulator_flag;$/;"	v
glx_context	src/ui/canvas/custom/TopCanvas.hpp	/^  GLXContext glx_context;$/;"	m	class:DisplayOrientation
glx_window	src/ui/canvas/custom/TopCanvas.hpp	/^  GLXWindow glx_window;$/;"	m	class:DisplayOrientation
glyph	src/Topography/shapelib/mapserver.h	/^  glyph_element *glyph;$/;"	m	struct:__anon59
glyphObj	src/Topography/shapelib/mapserver.h	/^} glyphObj;$/;"	t	typeref:struct:__anon59
glyph_element	src/Topography/shapelib/mapserver.h	/^typedef struct glyph_element glyph_element;$/;"	t	typeref:struct:glyph_element
glyph_metrics	src/Topography/shapelib/mapserver.h	/^} glyph_metrics;$/;"	t	typeref:struct:__anon58
glyph_size	src/Topography/shapelib/mapserver.h	/^  int glyph_size;$/;"	m	struct:textPathObj
glyphs	src/Topography/shapelib/mapserver.h	/^  glyphObj *glyphs;$/;"	m	struct:textPathObj
gmax	src/Gauge/GaugeVario.hpp	/^  static constexpr int gmax = GAUGEVARIOSWEEP + 2;$/;"	m	class:GaugeVario
gmin	src/Gauge/GaugeVario.hpp	/^  static constexpr int gmin = -gmax;$/;"	m	class:GaugeVario
got_size	src/Dialogs/DownloadFilePicker.cpp	/^  bool got_size = false, complete = false, success;$/;"	m	class:final	file:
goto_button	src/Dialogs/MapItemListDialog.cpp	/^  Button *settings_button, *details_button, *cancel_button, *goto_button;$/;"	m	class:final	file:
goto_button	src/Dialogs/Task/AlternatesListDialog.cpp	/^  Button *details_button, *cancel_button, *goto_button;$/;"	m	class:final	file:
goto_button	src/Dialogs/Waypoint/dlgWaypointDetails.cpp	/^    PixelRect goto_button;$/;"	m	struct:final::Layout	file:
goto_button	src/Dialogs/Waypoint/dlgWaypointDetails.cpp	/^  Button goto_button;$/;"	m	class:final	file:
goto_nonlandable	src/Engine/Task/TaskBehaviour.hpp	/^  bool goto_nonlandable;$/;"	m	struct:TaskBehaviour
goto_target	src/Replay/TaskAutoPilot.hpp	/^  bool goto_target;$/;"	m	struct:AutopilotParameters
goto_task	src/Engine/Task/TaskManager.hpp	/^  const std::unique_ptr<GotoTask> goto_task;$/;"	m	class:TaskManager
gps	src/Device/Driver/IMI/Protocol/Types.hpp	/^    IMIBYTE gps;$/;"	m	struct:IMI::TDeclarationHeader
gps	src/Device/Driver/IMI/Protocol/Types.hpp	/^    IMIBYTE gps;$/;"	m	struct:IMI::TDeviceInfo
gps	src/Device/Driver/LX/LXN.hpp	/^    char gps[60];$/;"	m	struct:LXN::FlightInfo
gps	src/Dialogs/Device/DeviceListDialog.cpp	/^    bool alive:1, location:1, gps:1, baro:1, airspeed:1, vario:1, traffic:1;$/;"	m	struct:final::Flags	file:
gps	src/FLARM/Status.hpp	/^  GPSStatus gps;$/;"	m	struct:FlarmStatus
gps	src/NMEA/Info.hpp	/^  GPSState gps;$/;"	m	struct:NMEAInfo
gpsModules	src/Device/Driver/IMI/Protocol/IGC.cpp	/^static const IMI::IMICHAR *const gpsModules[] =$/;"	m	class:IMI	file:
gps_altitude	src/IGC/IGCFix.hpp	/^  int gps_altitude, pressure_altitude;$/;"	m	struct:IGCFix
gps_altitude	src/NMEA/Info.hpp	/^  double gps_altitude;$/;"	m	struct:NMEAInfo
gps_altitude	src/Replay/CatmullRomInterpolator.hpp	/^    double gps_altitude;$/;"	m	struct:CatmullRomInterpolator::Record
gps_altitude_available	src/Logger/LoggerImpl.hpp	/^    bool gps_altitude_available;$/;"	m	struct:LoggerImpl::PreTakeoffBuffer
gps_altitude_available	src/NMEA/Info.hpp	/^  Validity gps_altitude_available;$/;"	m	struct:NMEAInfo
gps_cls	src/Android/InternalSensors.cpp	/^Java::TrivialClass InternalSensors::gps_cls, InternalSensors::sensors_cls;$/;"	m	class:InternalSensors	file:
gps_cls	src/Android/InternalSensors.hpp	/^  static Java::TrivialClass gps_cls, sensors_cls;$/;"	m	class:InternalSensors
gps_ctor_id	src/Android/InternalSensors.cpp	/^jmethodID InternalSensors::gps_ctor_id, InternalSensors::close_method;$/;"	m	class:InternalSensors	file:
gps_ctor_id	src/Android/InternalSensors.hpp	/^  static jmethodID gps_ctor_id, close_method;$/;"	m	class:InternalSensors
gps_date	src/Device/Driver/LX/LXN.hpp	/^    uint8_t gps_date;$/;"	m	struct:LXN::FlightInfo
gps_info	src/Blackboard/BaseBlackboard.hpp	/^  MoreData gps_info;$/;"	m	class:BaseBlackboard
gps_nav_driver	src/Device/Driver/CaiGpsNav.cpp	/^const struct DeviceRegister gps_nav_driver = {$/;"	v	typeref:struct:DeviceRegister
gps_valid	src/IGC/IGCFix.hpp	/^  bool gps_valid;$/;"	m	struct:IGCFix
gps_vario	src/NMEA/MoreData.hpp	/^  double gps_vario;$/;"	m	struct:MoreData
gps_vario_TE	src/NMEA/MoreData.hpp	/^  double gps_vario_TE;$/;"	m	struct:MoreData
gps_vario_available	src/NMEA/MoreData.hpp	/^  Validity gps_vario_available;$/;"	m	struct:MoreData
gpsalt	src/Device/Driver/IMI/Protocol/Types.hpp	/^    IMIDDWORD gpsalt:14;$/;"	m	struct:IMI::FixB
gpsalt1	src/Device/Driver/IMI/Protocol/Types.hpp	/^    IMISDWORD gpsalt1:8;$/;"	m	struct:IMI::FixB2
gpsalt2	src/Device/Driver/IMI/Protocol/Types.hpp	/^    IMISDWORD gpsalt2:7;$/;"	m	struct:IMI::FixB2
gr	src/NMEA/VarioInfo.hpp	/^  double gr;$/;"	m	struct:VarioInfo
gr_calculator	src/Computer/GlideRatioComputer.hpp	/^  GlideRatioCalculator gr_calculator;$/;"	m	class:GlideRatioComputer
gr_calculator_initialised	src/Computer/GlideRatioComputer.hpp	/^  bool gr_calculator_initialised;$/;"	m	class:GlideRatioComputer
gr_computer	src/Computer/GlideComputerAirData.hpp	/^  GlideRatioComputer gr_computer;$/;"	m	class:GlideComputerAirData
gradient	src/Engine/Route/RoutePolar.hpp	/^    double gradient;$/;"	m	struct:RoutePolar::RoutePolarPoint
gradient	src/Engine/Task/Stats/ElementStat.hpp	/^  double gradient;$/;"	m	struct:ElementStat
graticuleIntersectionObj	src/Topography/shapelib/mapserver.h	/^  } graticuleIntersectionObj;$/;"	t	typeref:struct:__anon50
graticuleObj	src/Topography/shapelib/mapserver.h	/^  } graticuleObj;$/;"	t	typeref:struct:__anon49
grecord	src/Device/Driver/Volkslogger/grecord.h	/^  char grecord[80];$/;"	m	class:GRECORD
grecord	src/IGC/IGCWriter.hpp	/^  GRecord grecord;$/;"	m	class:IGCWriter
grid	src/Topography/shapelib/mapserver.h	/^    graticuleObj* grid;$/;"	m	struct:layerObj
grid_font	src/Look/CrossSectionLook.hpp	/^  const Font *grid_font;$/;"	m	struct:CrossSectionLook
grid_pen	src/Look/CrossSectionLook.hpp	/^  Pen grid_pen;$/;"	m	struct:CrossSectionLook
gridstep	src/Topography/shapelib/mapserver.h	/^    int gridstep;$/;"	m	struct:__anon36
gross	src/Gauge/GaugeVario.hpp	/^    LabelValueGeometry average, gross, mc;$/;"	m	struct:GaugeVario::Geometry
gross_di	src/Gauge/GaugeVario.hpp	/^  LabelValueDrawInfo average_di, mc_di, gross_di;$/;"	m	class:GaugeVario
ground_height	src/Atmosphere/CuSonde.hpp	/^  double ground_height;$/;"	m	class:CuSonde
ground_height	src/NMEA/ThermalLocator.hpp	/^  double ground_height;$/;"	m	struct:ThermalSource
ground_speed	src/Computer/BasicComputer.hpp	/^  GroundSpeedComputer ground_speed;$/;"	m	class:BasicComputer
ground_speed	src/Engine/Navigation/Aircraft.hpp	/^  double ground_speed;$/;"	m	struct:SpeedState
ground_speed	src/Engine/Task/Stats/StartStats.hpp	/^  double ground_speed;$/;"	m	struct:StartStats
ground_speed	src/NMEA/Info.hpp	/^  double ground_speed;$/;"	m	struct:NMEAInfo
ground_speed	src/Tracking/SkyLines/Protocol.hpp	/^  uint16_t ground_speed;$/;"	m	struct:SkyLinesTracking::FixPacket
ground_speed	src/Tracking/TrackingGlue.hpp	/^  unsigned ground_speed;$/;"	m	class:final
ground_speed_available	src/NMEA/Info.hpp	/^  Validity ground_speed_available;$/;"	m	struct:NMEAInfo
ground_track_mode_list	src/Dialogs/Settings/Panels/SymbolsConfigPanel.cpp	/^static constexpr StaticEnumChoice ground_track_mode_list[] = {$/;"	v	file:
group	src/Topography/shapelib/mapserver.h	/^    char *group; \/* shouldn't be unique it's supposed to be a group right? *\/$/;"	m	struct:layerObj
group	src/Topography/shapelib/mapserver.h	/^    char *group;$/;"	m	struct:classObj
group	src/Topography/shapelib/mapserver.h	/^    expressionObj group; \/* expression to identify the groups *\/$/;"	m	struct:__anon30
grow	src/util/ReusableArray.hpp	/^  T *grow(size_type old_length, size_type new_length) {$/;"	f	class:ReusableArray
growable_	src/Terrain/jasper/jas_stream.h	/^	int growable_;$/;"	m	struct:__anon99
gsp	src/Device/Driver/IMI/Protocol/Types.hpp	/^    IMIDWORD gsp:10;$/;"	m	struct:IMI::FixK
gsp	src/IGC/IGCFix.hpp	/^  int16_t gsp;$/;"	m	struct:IGCFix
gt	src/Topography/shapelib/mapserver.h	/^    geotransformObj gt; \/* rotation \/ geotransform *\/$/;"	m	struct:mapObj
gty	src/Device/Driver/IMI/Protocol/Types.hpp	/^    IMICHAR gty[IMIDECL_GTY_LENGTH];$/;"	m	struct:IMI::FlightInfo
gty	src/Device/Driver/IMI/Protocol/Types.hpp	/^    IMICHAR gty[IMIDECL_GTY_LENGTH];$/;"	m	struct:IMI::TDeclarationHeader
guard	src/thread/Guard.hpp	/^    Guard &guard;$/;"	m	class:Guard::ExclusiveLease
guard	src/thread/Guard.hpp	/^    const Guard &guard;$/;"	m	class:Guard::Lease
guard	src/thread/Guard.hpp	/^    explicit ExclusiveLease(Guard &_guard) noexcept:guard(_guard) {$/;"	f	class:Guard::ExclusiveLease
guard	src/thread/Guard.hpp	/^    explicit Lease(const Guard &_guard) noexcept:guard(_guard) {$/;"	f	class:Guard::Lease
gutter	src/Topography/shapelib/mapserver.h	/^    int gutter; \/* space in pixels around the image where labels cannot be placed *\/$/;"	m	struct:__anon42
h	src/Engine/Route/AStar.hpp	/^    :g(_g), h(_h) {}$/;"	f	struct:AStarPriorityValue
h	src/Engine/Route/AStar.hpp	/^  unsigned h;$/;"	m	struct:AStarPriorityValue
h	src/ui/canvas/Ramp.hpp	/^  short h;$/;"	m	struct:ColorRamp
hBmpTabCalculator	src/Look/IconLook.hpp	/^  MaskedIcon hBmpTabCalculator;$/;"	m	struct:IconLook
hBmpTabFlight	src/Look/IconLook.hpp	/^  MaskedIcon hBmpTabFlight;$/;"	m	struct:IconLook
hBmpTabRules	src/Look/IconLook.hpp	/^  MaskedIcon hBmpTabRules;$/;"	m	struct:IconLook
hBmpTabSettings	src/Look/IconLook.hpp	/^  MaskedIcon hBmpTabSettings;$/;"	m	struct:IconLook
hBmpTabSystem	src/Look/IconLook.hpp	/^  MaskedIcon hBmpTabSystem;$/;"	m	struct:IconLook
hBmpTabTask	src/Look/IconLook.hpp	/^  MaskedIcon hBmpTabTask;$/;"	m	struct:IconLook
hBmpTabTimes	src/Look/IconLook.hpp	/^  MaskedIcon hBmpTabTimes;$/;"	m	struct:IconLook
hBmpTabWrench	src/Look/IconLook.hpp	/^  MaskedIcon hBmpTabWrench;$/;"	m	struct:IconLook
hDBF	src/Topography/shapelib/mapshape.h	/^    DBFHandle hDBF; \/* DBF file pointer *\/$/;"	m	struct:__anon78
hFile	src/system/FileMapping.hpp	/^  HANDLE hFile, hMapping;$/;"	m	class:FileMapping
hKey	src/Config/Registry.hpp	/^  HKEY hKey;$/;"	m	class:RegistryKey
hMapping	src/system/FileMapping.hpp	/^  HANDLE hFile, hMapping;$/;"	m	class:FileMapping
hPort	src/Device/Port/SerialPort.hpp	/^  HANDLE hPort;$/;"	m	class:SerialPort
hSHP	src/Topography/shapelib/mapshape.h	/^    SHPHandle hSHP; \/* SHP\/SHX file pointer *\/$/;"	m	struct:__anon78
hSavedFocus	src/ui/window/TopWindow.hpp	/^  HWND hSavedFocus;$/;"	m	class:UI::TopWindow
hWnd	src/ui/window/Window.hpp	/^  HWND hWnd = nullptr;$/;"	m	class:Window
h_max	src/Engine/Airspace/Predicate/AirspacePredicateHeightRange.hpp	/^  const double h_max;$/;"	m	class:AirspacePredicateHeightRange
h_max	src/Engine/Route/RoutePlanner.hpp	/^  int h_max;$/;"	m	class:RoutePlanner
h_min	src/Engine/Airspace/Predicate/AirspacePredicateHeightRange.hpp	/^  const double h_min;$/;"	m	class:AirspacePredicateHeightRange
h_min	src/Engine/Route/RoutePlanner.hpp	/^  int h_min;$/;"	m	class:RoutePlanner
h_min	src/Engine/ThermalBand/ThermalBand.hpp	/^  double h_min;$/;"	m	class:ThermalBand
h_padding	src/Gauge/FlarmTrafficWindow.hpp	/^  const unsigned h_padding, v_padding;$/;"	m	class:FlarmTrafficWindow
halfmajor	src/Math/LeastSquares.hpp	/^  double halfmajor;$/;"	m	struct:ErrorEllipse
halfminor	src/Math/LeastSquares.hpp	/^  double halfminor;$/;"	m	struct:ErrorEllipse
handicap	src/Engine/Contest/Settings.hpp	/^  unsigned handicap;$/;"	m	struct:ContestSettings
handicap	src/Engine/Contest/Solvers/AbstractContest.hpp	/^  unsigned handicap;$/;"	m	class:AbstractContest
handicap	src/Plane/Plane.hpp	/^  unsigned handicap;$/;"	m	struct:Plane
handle	src/io/FileOutputStream.hxx	/^	HANDLE handle = INVALID_HANDLE_VALUE;$/;"	m	class:final
handle	src/io/FileReader.hxx	/^	HANDLE handle;$/;"	m	class:final
handle	src/net/http/Easy.hxx	/^	CURL *handle = nullptr;$/;"	m	class:CurlEasy
handle	src/net/http/Easy.hxx	/^	CurlEasy(std::nullptr_t) noexcept:handle(nullptr) {}$/;"	f	class:CurlEasy
handle	src/net/http/Multi.hxx	/^	CURLM *handle = nullptr;$/;"	m	class:CurlMulti
handle	src/net/http/Multi.hxx	/^	CurlMulti(std::nullptr_t) noexcept:handle(nullptr) {}$/;"	f	class:CurlMulti
handle	src/thread/Handle.hpp	/^  constexpr ThreadHandle(DWORD _handle) noexcept:handle(_handle) {}$/;"	f	class:ThreadHandle
handle	src/thread/Handle.hpp	/^  constexpr ThreadHandle(pthread_t _handle) noexcept:handle(_handle) {}$/;"	f	class:ThreadHandle
handle	src/thread/Handle.hpp	/^  pthread_t handle;$/;"	m	class:ThreadHandle
handle	src/thread/Thread.hpp	/^  HANDLE handle;$/;"	m	class:Thread
handle	src/thread/Thread.hpp	/^  Thread(const char *_name=nullptr) noexcept:name(_name), handle(nullptr) {}$/;"	f	class:Thread
handle	src/thread/Thread.hpp	/^  pthread_t handle;$/;"	m	class:Thread
handle	src/thread/Trigger.hpp	/^  HANDLE handle;$/;"	m	class:Trigger
handler	src/Device/Port/Port.hpp	/^  DataHandler &handler;$/;"	m	class:Port
handler	src/Tracking/SkyLines/Client.hpp	/^  Handler *const handler;$/;"	m	class:SkyLinesTracking::final
handler	src/event/net/ConnectSocket.hxx	/^	ConnectSocketHandler &handler;$/;"	m	class:final
handler	src/event/net/cares/Channel.cxx	/^	Handler *handler;$/;"	m	class:Cares::final	file:
handler	src/event/net/cares/SimpleResolver.hxx	/^	SimpleHandler &handler;$/;"	m	class:Cares::final
handler	src/net/http/Request.hxx	/^	CurlResponseHandler &handler;$/;"	m	class:final
haptic_feedback	src/UISettings.hpp	/^  } haptic_feedback;$/;"	m	struct:UISettings	typeref:class:UISettings::HapticFeedback
hardware	src/Device/Driver/LX/LXN.hpp	/^    uint8_t hardware, software;$/;"	m	struct:LXN::Version
hardware_parameters	src/Dialogs/Device/Vega/HardwareParameters.hpp	/^VegaParametersWidget::StaticParameter hardware_parameters[] = {$/;"	v
hardware_version	src/FLARM/Version.hpp	/^  NarrowString<7> hardware_version, software_version;$/;"	m	struct:FlarmVersion
hardware_version	src/NMEA/DeviceInfo.hpp	/^  NarrowString<16> hardware_version;$/;"	m	struct:DeviceInfo
hasLe_field	src/Android/BluetoothHelper.cpp	/^static jfieldID hasLe_field;$/;"	m	namespace:BluetoothHelper	file:
has_active_frequency	src/NMEA/ExternalSettings.hpp	/^  Validity has_active_frequency;$/;"	m	struct:ExternalSettings
has_border	src/ui/window/Window.hpp	/^  bool has_border = false;$/;"	m	class:Window
has_border	src/ui/window/Window.hpp	/^  bool has_border = false;$/;"	m	class:WindowStyle
has_cursor_keys	src/Android/Product.cpp	/^bool has_cursor_keys;$/;"	v
has_data	src/Atmosphere/CuSonde.hpp	/^    bool has_data;$/;"	m	struct:CuSonde::Level
has_dewpoint	src/Atmosphere/CuSonde.hpp	/^    bool has_dewpoint;$/;"	m	struct:CuSonde::Level
has_exited	src/Engine/Task/Points/ScoredTaskPoint.hpp	/^  bool has_exited;$/;"	m	class:ScoredTaskPoint
has_optional_starts	src/Engine/Task/Stats/TaskStats.hpp	/^  bool has_optional_starts;$/;"	m	class:TaskStats
has_standby_frequency	src/NMEA/ExternalSettings.hpp	/^  Validity has_standby_frequency;$/;"	m	struct:ExternalSettings
has_targets	src/Engine/Task/Solvers/TaskMacCreadyRemaining.cpp	/^TaskMacCreadyRemaining::has_targets() const$/;"	f	class:TaskMacCreadyRemaining
has_targets	src/Engine/Task/Stats/TaskStats.hpp	/^  bool has_targets;$/;"	m	class:TaskStats
has_trivial_copy_and_destructor	src/util/TypeTraits.hpp	/^struct has_trivial_copy_and_destructor$/;"	s
hasdeclaration	src/Device/Driver/Volkslogger/vlconv.cpp	/^  int hasdeclaration;$/;"	m	class:C_RECORD	file:
hashBits	src/Device/Driver/IMI/Protocol/Types.hpp	/^    IMIWORD hashBits;$/;"	m	struct:IMI::Signature
hash_table_offset	src/Language/MOFile.hpp	/^    uint32_t hash_table_size, hash_table_offset;$/;"	m	struct:MOFile::mo_header
hash_table_size	src/Language/MOFile.hpp	/^    uint32_t hash_table_size, hash_table_offset;$/;"	m	struct:MOFile::mo_header
have_position	src/Widget/ManagedWidget.hpp	/^  bool have_position = false;$/;"	m	class:ManagedWidget
have_quit_button	src/Dialogs/SimulatorPromptWindow.hpp	/^  const bool have_quit_button;$/;"	m	class:final
have_sles	src/Audio/VarioGlue.cpp	/^static bool have_sles;$/;"	v	file:
hbGray	src/Look/TaskLook.hpp	/^  Brush hbGray, hbGreen, hbOrange, hbLightGray, hbNotReachableTerrain;$/;"	m	struct:TaskLook
hbGreen	src/Look/TaskLook.hpp	/^  Brush hbGray, hbGreen, hbOrange, hbLightGray, hbNotReachableTerrain;$/;"	m	struct:TaskLook
hbLightGray	src/Look/TaskLook.hpp	/^  Brush hbGray, hbGreen, hbOrange, hbLightGray, hbNotReachableTerrain;$/;"	m	struct:TaskLook
hbNotReachableTerrain	src/Look/TaskLook.hpp	/^  Brush hbGray, hbGreen, hbOrange, hbLightGray, hbNotReachableTerrain;$/;"	m	struct:TaskLook
hbOrange	src/Look/TaskLook.hpp	/^  Brush hbGray, hbGreen, hbOrange, hbLightGray, hbNotReachableTerrain;$/;"	m	struct:TaskLook
hdm	src/IGC/IGCFix.hpp	/^  int16_t hdm;$/;"	m	struct:IGCFix
hdop	src/Logger/LoggerImpl.hpp	/^    double hdop;$/;"	m	struct:LoggerImpl::PreTakeoffBuffer
hdop	src/NMEA/GPSState.hpp	/^  double hdop;$/;"	m	struct:GPSState
hdop2fxa	src/Device/Driver/Volkslogger/vlconv.cpp	/^hdop2fxa(uint8_t hdop)$/;"	f	file:
hdr	src/zzip/lib.h	/^    struct zzip_dir_hdr * hdr;   \/* zdp; directory pointer, for dirent stuff *\/$/;"	m	struct:zzip_dir	typeref:struct:zzip_dir::zzip_dir_hdr
hdr0	src/zzip/lib.h	/^    struct zzip_dir_hdr * hdr0;  \/* zfi; *\/$/;"	m	struct:zzip_dir	typeref:struct:zzip_dir::zzip_dir_hdr
hdt	src/Device/Driver/IMI/Protocol/Types.hpp	/^    IMIDWORD hdt:9;$/;"	m	struct:IMI::FixK
hdt	src/IGC/IGCFix.hpp	/^  int16_t hdt;$/;"	m	struct:IGCFix
head	src/Terrain/jasper/jpc/jpc_dec.h	/^	jpc_dec_seg_t *head;$/;"	m	struct:__anon121
head	src/net/http/FormData.hpp	/^  struct curl_httppost *head = nullptr, *tail = nullptr;$/;"	m	class:Net::MultiPartFormData	typeref:struct:Net::MultiPartFormData::curl_httppost
head	src/net/http/Slist.hxx	/^	struct curl_slist *head = nullptr;$/;"	m	class:CurlSlist	typeref:struct:CurlSlist::curl_slist
head	src/util/ForeignFifoBuffer.hxx	/^	size_type head = 0, tail = 0, capacity;$/;"	m	class:ForeignFifoBuffer
head	src/util/OverwritingRingBuffer.hpp	/^  unsigned head, tail;$/;"	m	class:TrivialOverwritingRingBuffer
head	src/util/QuadTree.hxx	/^		Leaf *head;$/;"	m	struct:LeafList
head	src/util/RadixTree.hpp	/^    Leaf *head;$/;"	m	struct:RadixTree::LeafList
head	src/util/SliceAllocator.hxx	/^	Area *head;$/;"	m	class:SliceAllocator
head	src/util/StaticFifoBuffer.hxx	/^	size_type head = 0, tail = 0;$/;"	m	class:StaticFifoBuffer
head_wind	src/Engine/GlideSolvers/GlideResult.hpp	/^  double head_wind;$/;"	m	struct:GlideResult
head_wind	src/Engine/GlideSolvers/GlideState.hpp	/^  double head_wind;$/;"	m	struct:GlideState
head_wind	src/NMEA/Derived.hpp	/^  double head_wind;$/;"	m	struct:DerivedInfo
head_wind_available	src/NMEA/Derived.hpp	/^  Validity head_wind_available;$/;"	m	struct:DerivedInfo
header	src/Cloud/Sender.hpp	/^    SkyLinesTracking::ThermalResponsePacket header;$/;"	m	struct:ThermalResponseSender::Packet
header	src/Cloud/Sender.hpp	/^    SkyLinesTracking::TrafficResponsePacket header;$/;"	m	struct:TrafficResponseSender::Packet
header	src/Device/Driver/IMI/Protocol/Types.hpp	/^    TDeclarationHeader header;$/;"	m	struct:IMI::TDeclaration
header	src/Device/Driver/Volkslogger/dbbconv.h	/^  HEADER header[8];$/;"	m	class:DBB
header	src/Topography/shapelib/mapserver.h	/^    char *header, *footer; \/* only used with multi result queries *\/$/;"	m	struct:layerObj
header	src/Topography/shapelib/mapserver.h	/^    char *header, *footer;$/;"	m	struct:__anon31
header	src/Topography/shapelib/mapserver.h	/^    char *header, *footer;$/;"	m	struct:__anon35
header	src/Tracking/SkyLines/Protocol.hpp	/^  Header header;$/;"	m	struct:SkyLinesTracking::ACKPacket
header	src/Tracking/SkyLines/Protocol.hpp	/^  Header header;$/;"	m	struct:SkyLinesTracking::FixPacket
header	src/Tracking/SkyLines/Protocol.hpp	/^  Header header;$/;"	m	struct:SkyLinesTracking::PingPacket
header	src/Tracking/SkyLines/Protocol.hpp	/^  Header header;$/;"	m	struct:SkyLinesTracking::ThermalRequestPacket
header	src/Tracking/SkyLines/Protocol.hpp	/^  Header header;$/;"	m	struct:SkyLinesTracking::ThermalResponsePacket
header	src/Tracking/SkyLines/Protocol.hpp	/^  Header header;$/;"	m	struct:SkyLinesTracking::ThermalSubmitPacket
header	src/Tracking/SkyLines/Protocol.hpp	/^  Header header;$/;"	m	struct:SkyLinesTracking::TrafficRequestPacket
header	src/Tracking/SkyLines/Protocol.hpp	/^  Header header;$/;"	m	struct:SkyLinesTracking::TrafficResponsePacket
header	src/Tracking/SkyLines/Protocol.hpp	/^  Header header;$/;"	m	struct:SkyLinesTracking::UserNameRequestPacket
header	src/Tracking/SkyLines/Protocol.hpp	/^  Header header;$/;"	m	struct:SkyLinesTracking::UserNameResponsePacket
header	src/Tracking/SkyLines/Protocol.hpp	/^  Header header;$/;"	m	struct:SkyLinesTracking::WaveRequestPacket
header	src/Tracking/SkyLines/Protocol.hpp	/^  Header header;$/;"	m	struct:SkyLinesTracking::WaveResponsePacket
header	src/Tracking/SkyLines/Protocol.hpp	/^  Header header;$/;"	m	struct:SkyLinesTracking::WaveSubmitPacket
header_font	src/Renderer/FlightListRenderer.hpp	/^  const Font &font, &header_font;$/;"	m	class:FlightListRenderer
headers	src/net/http/Request.hxx	/^	std::multimap<std::string, std::string> headers;$/;"	m	class:final
heading	src/Gauge/FlarmTrafficWindow.hpp	/^  Angle heading;$/;"	m	class:FlarmTrafficWindow
heading	src/NMEA/Attitude.hpp	/^  Angle heading;$/;"	m	struct:AttitudeState
heading	src/NMEA/Info.hpp	/^  Angle heading;$/;"	m	struct:NMEAInfo
heading	src/Replay/TaskAutoPilot.hpp	/^  Angle heading;$/;"	m	class:AbstractAutoPilot
heading_available	src/NMEA/Attitude.hpp	/^  Validity heading_available;$/;"	m	struct:AttitudeState
heading_available	src/NMEA/Info.hpp	/^  Validity heading_available;$/;"	m	struct:NMEAInfo
heading_computed	src/NMEA/Attitude.hpp	/^  bool heading_computed;$/;"	m	struct:AttitudeState
heading_filter	src/Replay/TaskAutoPilot.hpp	/^  Filter heading_filter;$/;"	m	class:TaskAutoPilot
heading_to_index	src/Computer/LiftDatabaseComputer.cpp	/^heading_to_index(const Angle heading)$/;"	f	file:
height	src/Android/NativeView.cpp	/^   width(_width), height(_height)$/;"	f
height	src/Android/NativeView.hpp	/^  unsigned width, height;$/;"	m	class:NativeView
height	src/Android/TextUtil.hpp	/^    unsigned width, height;$/;"	m	struct:TextUtil::Texture
height	src/Android/TextUtil.hpp	/^  unsigned height, ascent_height, capital_height;$/;"	m	class:TextUtil
height	src/CommandLine.cpp	/^  unsigned height = IsKobo() ? 800 : 480;$/;"	m	namespace:CommandLine	file:
height	src/Engine/Route/FlatTriangleFan.hpp	/^  int height;$/;"	m	class:FlatTriangleFan
height	src/Look/FontDescription.hpp	/^  unsigned height;$/;"	m	class:FontDescription
height	src/Terrain/HeightMatrix.hpp	/^  unsigned width, height;$/;"	m	class:HeightMatrix
height	src/Terrain/RasterTile.hpp	/^  unsigned width = 0, height = 0;$/;"	m	class:RasterTile
height	src/Terrain/RasterTileCache.hpp	/^    unsigned width, height;$/;"	m	struct:RasterTileCache::CacheHeader
height	src/Terrain/RasterTileCache.hpp	/^  unsigned int width, height;$/;"	m	class:RasterTileCache
height	src/Terrain/jasper/jas_image.h	/^	jas_image_coord_t height;$/;"	m	struct:__anon102
height	src/Terrain/jasper/jp2/jp2_cod.h	/^	uint_fast32_t height;$/;"	m	struct:__anon86
height	src/Terrain/jasper/jpc/jpc_cs.h	/^	uint_fast32_t height;$/;"	m	struct:__anon137
height	src/Terrain/jasper/jpc/jpc_dec.h	/^	uint_fast32_t height;$/;"	m	struct:__anon128
height	src/Topography/shapelib/mapserver.h	/^    int height, width;$/;"	m	struct:__anon34
height	src/Topography/shapelib/mapserver.h	/^    int height, width;$/;"	m	struct:__anon46
height	src/Topography/shapelib/mapserver.h	/^    int height, width;$/;"	m	struct:__anon47
height	src/Topography/shapelib/mapserver.h	/^    int height, width;$/;"	m	struct:__anon48
height	src/Topography/shapelib/mapserver.h	/^    int height, width;$/;"	m	struct:mapObj
height	src/Topography/shapelib/mapserver.h	/^    int height;$/;"	m	struct:tileCacheObj
height	src/Topography/shapelib/mapserver.h	/^    int width, height;$/;"	m	struct:imageObj
height	src/ui/canvas/Font.hpp	/^  unsigned height, ascent_height, capital_height;$/;"	m	class:Font
height	src/ui/canvas/RawBitmap.hpp	/^  const unsigned height;$/;"	m	class:final
height	src/ui/canvas/custom/UncompressedImage.hpp	/^  unsigned pitch, width, height;$/;"	m	class:UncompressedImage
height	src/ui/canvas/fb/mxcfb.h	/^	__u32 height;	\/* height of entire buffer *\/$/;"	m	struct:mxcfb_alt_buffer_data
height	src/ui/canvas/fb/mxcfb.h	/^	__u32 height;$/;"	m	struct:mxcfb_rect
height	src/ui/canvas/memory/Buffer.hpp	/^  unsigned pitch, width, height;$/;"	m	struct:ConstImageBuffer
height	src/ui/canvas/memory/Buffer.hpp	/^  unsigned pitch, width, height;$/;"	m	struct:WritableImageBuffer
height	src/ui/dim/Size.hpp	/^    :width(_size), height(_size) {}$/;"	f	struct:PixelSize
height	src/ui/dim/Size.hpp	/^    :width(_width), height(_height) {}$/;"	f	struct:PixelSize
height	src/ui/dim/Size.hpp	/^  unsigned width, height;$/;"	m	struct:PixelSize
height	src/ui/event/poll/libinput/LibInputHandler.hpp	/^  unsigned width = 0, height = 0;$/;"	m	class:UI::final
height	src/ui/event/shared/RotatePointer.hpp	/^  unsigned width = 0, height = 0;$/;"	m	class:UI::RotatePointer
height	src/util/AllocatedGrid.hxx	/^	unsigned width = 0, height = 0;$/;"	m	class:AllocatedGrid
height_	src/Terrain/jasper/jas_image.h	/^	jas_image_coord_t height_;$/;"	m	struct:__anon100
height_climb	src/Engine/GlideSolvers/GlideResult.hpp	/^  double height_climb;$/;"	m	struct:GlideResult
height_fraction_working	src/Engine/Task/Stats/CommonStats.hpp	/^  double height_fraction_working;$/;"	m	class:CommonStats
height_glide	src/Engine/GlideSolvers/GlideResult.hpp	/^  double height_glide;$/;"	m	struct:GlideResult
height_matrix	src/Terrain/RasterRenderer.hpp	/^  HeightMatrix height_matrix;$/;"	m	class:RasterRenderer
height_max_working	src/Engine/Task/Stats/CommonStats.hpp	/^  double height_max_working;$/;"	m	class:CommonStats
height_min_working	src/Engine/Route/RoutePolars.hpp	/^  int height_min_working;$/;"	m	class:RoutePolars
height_min_working	src/Engine/Task/Stats/CommonStats.hpp	/^  double height_min_working;$/;"	m	class:CommonStats
height_range	src/Engine/Airspace/Predicate/AirspacePredicateHeightRange.hpp	/^  const AirspacePredicateHeightRange height_range;$/;"	m	class:AirspacePredicateHeightRangeExcludeTwo
height_scale	src/Weather/Rasp/RaspStyle.hpp	/^  unsigned height_scale;$/;"	m	struct:RaspStyle
help	src/Dialogs/Device/Vega/VegaParametersWidget.hpp	/^    const TCHAR *label, *help;$/;"	m	struct:VegaParametersWidget::StaticParameter
help	src/Form/DataField/Enum.hpp	/^    TCHAR *help;$/;"	m	class:final::Entry
help	src/Form/DataField/Enum.hpp	/^  const TCHAR *help;$/;"	m	struct:StaticEnumChoice
help	src/Weather/Rasp/RaspStore.hpp	/^    const TCHAR *help;$/;"	m	struct:RaspStore::MapInfo
help	src/Weather/Rasp/RaspStore.hpp	/^    const TCHAR *help;$/;"	m	struct:RaspStore::MapItem
help_text	src/Dialogs/ListPicker.cpp	/^  const TCHAR *const caption, *const help_text;$/;"	m	class:ListPickerWidget	file:
help_text	src/Form/Control.hpp	/^  const TCHAR *help_text = nullptr;$/;"	m	class:WindowControl
help_text	src/Form/DataField/ComboList.hpp	/^    tstring help_text;$/;"	m	struct:ComboList::Item
help_widget	src/Dialogs/ListPicker.cpp	/^  TextWidget *help_widget;$/;"	m	class:ListPickerWidget	file:
hi	src/util/ByteOrder.hxx	/^	uint8_t hi, lo;$/;"	m	class:PackedBE16
hi	src/util/ByteOrder.hxx	/^	uint8_t lo, hi;$/;"	m	class:PackedLE16
highlight_pen	src/Look/TaskLook.hpp	/^  Pen highlight_pen;$/;"	m	struct:TaskLook
history	src/Computer/ClimbAverageCalculator.hpp	/^  HistoryItem history[MAX_HISTORY];$/;"	m	class:ClimbAverageCalculator
hit_radius	src/Screen/Layout.cpp	/^  unsigned hit_radius = 10;$/;"	m	namespace:Layout	file:
hoff	src/Terrain/jasper/jpc/jpc_cs.h	/^	uint_fast16_t hoff;$/;"	m	struct:__anon152
home	src/Engine/Waypoint/Waypoint.hpp	/^    bool home:1;$/;"	m	struct:Waypoint::Flags
home	src/Engine/Waypoint/Waypoints.hpp	/^  WaypointPtr home;$/;"	m	class:Waypoints
home	src/Logger/ExternalLogger.cpp	/^  const Waypoint *home;$/;"	m	class:DeclareJob	file:
home_location	src/Computer/Settings.hpp	/^  GeoPoint home_location;$/;"	m	struct:PlacesOfInterestSettings
home_location_available	src/Computer/Settings.hpp	/^  bool home_location_available;$/;"	m	struct:PlacesOfInterestSettings
home_waypoint	src/Computer/Settings.hpp	/^  int home_waypoint;$/;"	m	struct:PlacesOfInterestSettings
homepoint	src/Device/Driver/Volkslogger/vlapi2.h	/^      WPT homepoint;$/;"	m	struct:VLAPI_DATA::DECLARATION::FLIGHTINFO
homogeneous_tps	src/Engine/Task/Factory/Constraints.hpp	/^  bool homogeneous_tps;$/;"	m	struct:TaskFactoryConstraints
horizon	src/Look/Look.hpp	/^  HorizonLook horizon;$/;"	m	struct:Look
host	src/net/HostParser.hxx	/^	StringView host;$/;"	m	struct:ExtractHostResult
hour	src/Device/Driver/CAI302/Protocol.hpp	/^    uint8_t year, month, day, hour, minute, second;$/;"	m	struct:CAI302::DateTime
hour	src/Weather/ParsedMETAR.hpp	/^  uint8_t hour, minute;$/;"	m	struct:ParsedMETAR
hour	src/time/BrokenTime.hpp	/^  uint8_t hour;$/;"	m	struct:BrokenTime
hpenergywts	src/Terrain/jasper/jpc/jpc_qmfb.h	/^	const double *hpenergywts;$/;"	m	struct:__anon105
hsamp	src/Terrain/jasper/jpc/jpc_cs.h	/^	uint_fast8_t hsamp;$/;"	m	struct:__anon136
hsamp	src/Terrain/jasper/jpc/jpc_t2cod.h	/^	uint_fast32_t hsamp;$/;"	m	struct:__anon114
hstep	src/Terrain/jasper/jas_image.h	/^	jas_image_coord_t hstep;$/;"	m	struct:__anon102
hstep	src/Terrain/jasper/jpc/jpc_dec.h	/^	uint_fast32_t hstep;$/;"	m	struct:__anon128
hstep_	src/Terrain/jasper/jas_image.h	/^	jas_image_coord_t hstep_;$/;"	m	struct:__anon100
hsubstep	src/Terrain/jasper/jpc/jpc_dec.h	/^	uint_fast32_t hsubstep;$/;"	m	struct:__anon128
humidity	src/Dialogs/Device/DeviceListDialog.cpp	/^    bool humidity:1;$/;"	m	struct:final::Flags	file:
humidity	src/NMEA/Info.hpp	/^  double humidity;$/;"	m	struct:NMEAInfo
humidity_available	src/NMEA/Info.hpp	/^  bool humidity_available;$/;"	m	struct:NMEAInfo
hwVersion	src/Device/Driver/IMI/Protocol/Types.hpp	/^    IMIBYTE hwVersion;$/;"	m	struct:IMI::TDeclarationHeader
hwVersion	src/Device/Driver/IMI/Protocol/Types.hpp	/^    IMIBYTE hwVersion;$/;"	m	struct:IMI::TDeviceInfo
i	src/Computer/Wind/WindEKFGlue.hpp	/^  unsigned i;$/;"	m	class:WindEKFGlue
i	src/Device/Driver/Volkslogger/vlconv.cpp	/^  int i;$/;"	m	class:C2	file:
i	src/Device/SettingsMap.hpp	/^    typename Map::const_iterator i;$/;"	m	class:DeviceSettingsMap::const_iterator
i	src/Dialogs/Device/DeviceListDialog.cpp	/^    uint16_t i;$/;"	m	union:final::Item	file:
i	src/Dialogs/Settings/dlgConfigInfoboxes.cpp	/^  unsigned i;$/;"	m	class:InfoBoxPreview	file:
i	src/Engine/Trace/Trace.cpp	/^  I i;$/;"	m	class:PointerIterator	file:
i	src/Math/WindowFilter.hpp	/^  unsigned i = 0;$/;"	m	class:WindowFilter
i	src/ui/canvas/memory/PixelTraits.hpp	/^    integer_type i;$/;"	m	union:BGRAPixelTraits::U
i	src/util/OverwritingRingBuffer.hpp	/^    unsigned i;$/;"	m	class:TrivialOverwritingRingBuffer::const_iterator
i2c_addr	src/Device/Config.hpp	/^  unsigned i2c_addr;$/;"	m	struct:DeviceConfig
i2c_bus	src/Device/Config.hpp	/^  unsigned i2c_bus;$/;"	m	struct:DeviceConfig
i2cbaro	src/Device/Descriptor.hpp	/^  I2CbaroDevice *i2cbaro[3]; \/\/ static, pitot, tek; in any order$/;"	m	class:final
i2cbaro_class	src/Android/I2CbaroDevice.cpp	/^static Java::TrivialClass i2cbaro_class;$/;"	v	file:
i2cbaro_ctor	src/Android/I2CbaroDevice.cpp	/^static jmethodID i2cbaro_ctor, close_method;$/;"	v	file:
iDescription	src/Waypoint/WaypointReaderSeeYou.hpp	/^  unsigned iDescription = 10;$/;"	m	class:final
iFrequency	src/Waypoint/WaypointReaderSeeYou.hpp	/^  unsigned iFrequency = 9;$/;"	m	class:final
ias	src/IGC/IGCFix.hpp	/^  int16_t ias;$/;"	m	struct:IGCFix
ibkDown	src/InfoBoxes/Content/Base.hpp	/^    ibkDown = -1,$/;"	e	enum:InfoBoxContent::InfoBoxKeyCodes
ibkLeft	src/InfoBoxes/Content/Base.hpp	/^    ibkLeft = -2,$/;"	e	enum:InfoBoxContent::InfoBoxKeyCodes
ibkRight	src/InfoBoxes/Content/Base.hpp	/^    ibkRight = 2$/;"	e	enum:InfoBoxContent::InfoBoxKeyCodes
ibkUp	src/InfoBoxes/Content/Base.hpp	/^    ibkUp = 1,$/;"	e	enum:InfoBoxContent::InfoBoxKeyCodes
icao_code	src/Weather/ParsedMETAR.hpp	/^  StaticString<5> icao_code;$/;"	m	struct:ParsedMETAR
iccp	src/Terrain/jasper/jp2/jp2_cod.h	/^	uint_fast8_t *iccp;$/;"	m	struct:__anon88
iccplen	src/Terrain/jasper/jp2/jp2_cod.h	/^	size_t iccplen;$/;"	m	struct:__anon88
icon	src/Form/TabDisplay.hpp	/^  const MaskedIcon *icon;$/;"	m	class:TabButton
icon	src/Look/Look.hpp	/^  IconLook icon;$/;"	m	struct:Look
icon	src/Look/NOAALook.hpp	/^  MaskedIcon icon;$/;"	m	struct:NOAALook
icon	src/Topography/TopographyFile.hpp	/^  const ResourceId icon, big_icon;$/;"	m	class:TopographyFile
icon	src/Topography/TopographyFileRenderer.hpp	/^  MaskedIcon icon;$/;"	m	class:final
icon_list	src/Topography/TopographyStore.cpp	/^static constexpr LOOKUP_ICON icon_list[] = {$/;"	v	file:
id	src/Android/TextUtil.hpp	/^    unsigned id;$/;"	m	struct:TextUtil::Texture
id	src/Cloud/Client.hpp	/^  const unsigned id;$/;"	m	struct:CloudClient
id	src/Device/Driver/CAI302/Protocol.hpp	/^    char id[3];$/;"	m	struct:CAI302::GeneralInfo
id	src/Device/Driver/CAI302/Protocol.hpp	/^    uint16_t id;$/;"	m	struct:CAI302::Navpoint
id	src/Device/Driver/IMI/Protocol/Types.hpp	/^    IMIBYTE id, device;$/;"	m	struct:IMI::TDeclarationHeader
id	src/Device/Driver/IMI/Protocol/Types.hpp	/^    IMIBYTE id:3;$/;"	m	struct:IMI::FixE
id	src/Device/Driver/IMI/Protocol/Types.hpp	/^    IMIDWORD id:3;$/;"	m	struct:IMI::Fix
id	src/Device/Driver/IMI/Protocol/Types.hpp	/^    IMIDWORD id:3;$/;"	m	struct:IMI::FixB
id	src/Device/Driver/IMI/Protocol/Types.hpp	/^    IMIDWORD id:3;$/;"	m	struct:IMI::FixB2
id	src/Device/Driver/IMI/Protocol/Types.hpp	/^    IMIDWORD id:3;$/;"	m	struct:IMI::FixK
id	src/Device/Driver/LX/LXN.hpp	/^    uint16_t id;$/;"	m	struct:LXN::FlightInfo
id	src/Dialogs/Traffic/TrafficList.cpp	/^    FlarmId id;$/;"	m	struct:TrafficListWidget::Item	file:
id	src/Engine/Waypoint/Waypoint.hpp	/^  unsigned id;$/;"	m	struct:Waypoint
id	src/FLARM/FlarmNetRecord.hpp	/^  StaticString<LatinBufferSize(7)> id;$/;"	m	struct:FlarmNetRecord
id	src/FLARM/NameDatabase.hpp	/^    FlarmId id;$/;"	m	struct:FlarmNameDatabase::Record
id	src/FLARM/Traffic.hpp	/^  FlarmId id;$/;"	m	class:FlarmTraffic::AircraftType
id	src/Form/DataField/Enum.hpp	/^    unsigned id;$/;"	m	class:final::Entry
id	src/Form/DataField/Enum.hpp	/^  unsigned id;$/;"	m	struct:StaticEnumChoice
id	src/GliderLink/Traffic.hpp	/^  GliderLinkId id;$/;"	m	struct:GliderLinkTraffic
id	src/IGC/IGCHeader.hpp	/^  char id[4];$/;"	m	struct:IGCHeader
id	src/InfoBoxes/InfoBoxWindow.hpp	/^  const unsigned id;$/;"	m	class:InfoBoxWindow
id	src/Kobo/Model.cpp	/^  const char *id;$/;"	m	struct:__anon183	file:
id	src/Kobo/WPASupplicant.hpp	/^  int id;$/;"	m	struct:WifiConfiguredNetworkInfo
id	src/Kobo/WifiDialog.cpp	/^    int id;$/;"	m	struct:final::NetworkInfo	file:
id	src/MapWindow/Items/MapItem.hpp	/^  FlarmId id;$/;"	m	struct:TrafficMapItem
id	src/MapWindow/Items/MapItem.hpp	/^  uint32_t id, time_of_day_ms;$/;"	m	struct:SkyLinesTrafficMapItem
id	src/ResourceId.hpp	/^  unsigned id;$/;"	m	class:ResourceId
id	src/Terrain/jasper/jas_image.h	/^	int id;$/;"	m	struct:__anon104
id	src/Terrain/jasper/jpc/jpc_cs.c	/^	int id;$/;"	m	struct:__anon133	file:
id	src/Terrain/jasper/jpc/jpc_cs.h	/^	uint_fast16_t id;$/;"	m	struct:__anon156
id	src/Terrain/jasper/jpc/jpc_dec.c	/^	uint_least16_t id;$/;"	m	struct:__anon131	file:
id	src/Topography/shapelib/mapserver.h	/^    int id; \/* corresponding label *\/$/;"	m	struct:__anon40
id	src/Tracking/SkyLines/Protocol.hpp	/^  uint16_t id;$/;"	m	struct:SkyLinesTracking::ACKPacket
id	src/Tracking/SkyLines/Protocol.hpp	/^  uint16_t id;$/;"	m	struct:SkyLinesTracking::PingPacket
id	src/thread/Id.hxx	/^	DWORD id;$/;"	m	class:ThreadId
id	src/thread/Id.hxx	/^	constexpr ThreadId(DWORD _id) noexcept:id(_id) {}$/;"	f	class:ThreadId
id	src/thread/Id.hxx	/^	constexpr ThreadId(pthread_t _id) noexcept:id(_id) {}$/;"	f	class:ThreadId
id	src/thread/Thread.hpp	/^  DWORD id;$/;"	m	class:Thread
id	src/ui/canvas/opengl/Buffer.hpp	/^  GLuint id;$/;"	m	class:GLBuffer
id	src/ui/canvas/opengl/FrameBuffer.hpp	/^  GLuint id;$/;"	m	class:GLFrameBuffer
id	src/ui/canvas/opengl/Program.hpp	/^  const GLuint id;$/;"	m	class:GLProgram
id	src/ui/canvas/opengl/Program.hpp	/^  const GLuint id;$/;"	m	class:GLShader
id	src/ui/canvas/opengl/RenderBuffer.hpp	/^  GLuint id;$/;"	m	class:GLRenderBuffer
id	src/ui/canvas/opengl/Texture.hpp	/^  GLuint id;$/;"	m	class:GLTexture
id_set	src/Cloud/Client.hpp	/^  IdSet id_set;$/;"	m	class:CloudClientContainer
ideal_polar	src/Engine/GlideSolvers/GlidePolar.hpp	/^  PolarCoefficients ideal_polar;$/;"	m	class:GlidePolar
idle	src/event/Loop.hxx	/^	DeferList idle;$/;"	m	class:final
idle	src/system/SystemLoad.cpp	/^  long busy, idle;$/;"	m	struct:cpu	file:
idle_clock	src/Computer/GlideComputer.hpp	/^  PeriodClock idle_clock;$/;"	m	class:GlideComputer
idle_min	src/thread/WorkerThread.hpp	/^  const std::chrono::steady_clock::duration period_min, idle_min, delay;$/;"	m	class:WorkerThread
ids	src/Topography/shapelib/maptree.h	/^    ms_int32 *ids;$/;"	m	struct:shape_tree_node
ids_acked	src/Airspace/AirspaceWarningCopy.hpp	/^  StaticArray<const AbstractAirspace *,64> ids_inside, ids_warning, ids_acked;$/;"	m	class:AirspaceWarningCopy
ids_inside	src/Airspace/AirspaceWarningCopy.hpp	/^  StaticArray<const AbstractAirspace *,64> ids_inside, ids_warning, ids_acked;$/;"	m	class:AirspaceWarningCopy
ids_warning	src/Airspace/AirspaceWarningCopy.hpp	/^  StaticArray<const AbstractAirspace *,64> ids_inside, ids_warning, ids_acked;$/;"	m	class:AirspaceWarningCopy
idx	src/lua/Util.hxx	/^	int idx;$/;"	m	struct:Lua::StackIndex
ifastcosine	src/Math/Angle.hpp	/^  inline int ifastcosine() const {$/;"	f	class:Angle
ifastsine	src/Math/Angle.hpp	/^  inline int ifastsine() const {$/;"	f	class:Angle
igc_filter	src/Device/Driver/Volkslogger/vlapihlp.cpp	/^char *igc_filter(char *st) {$/;"	f
igcfile_version	src/Device/Driver/Volkslogger/vlconv.cpp	/^static constexpr int igcfile_version = 424;$/;"	v	file:
ignore_comma	src/Logger/GRecord.hpp	/^  bool ignore_comma;$/;"	m	class:GRecord
ignore_following	src/Waypoint/WaypointReaderSeeYou.hpp	/^  bool ignore_following = false;$/;"	m	class:final
ignore_lines	src/Waypoint/WaypointReaderOzi.hpp	/^  unsigned ignore_lines = 4;$/;"	m	class:final
ignore_single_click	src/MapWindow/GlueMapWindow.hpp	/^  bool ignore_single_click = false;$/;"	m	class:GlueMapWindow
ihdr	src/Terrain/jasper/jp2/jp2_cod.h	/^		jp2_ihdr_t ihdr;$/;"	m	union:__anon94::__anon95
ilabelstate	src/Topography/shapelib/mapserver.h	/^    int     ilabelstate;$/;"	m	struct:__anon49
ilabeltype	src/Topography/shapelib/mapserver.h	/^    int     ilabeltype;$/;"	m	struct:__anon49
ilec_driver	src/Device/Driver/ILEC.cpp	/^const struct DeviceRegister ilec_driver = {$/;"	v	typeref:struct:DeviceRegister
image	src/Terrain/RasterRenderer.hpp	/^  RawBitmap *image = nullptr;$/;"	m	class:RasterRenderer
image	src/Terrain/jasper/jpc/jpc_dec.h	/^	jas_image_t *image;$/;"	m	struct:__anon129
image	src/Topography/shapelib/mapserver.h	/^    char *image;$/;"	m	struct:__anon46
image	src/Topography/shapelib/mapserver.h	/^    imageObj *image;$/;"	m	struct:tileCacheObj
imageObj	src/Topography/shapelib/mapserver.h	/^  struct imageObj{$/;"	s
image_types	src/Weather/PCMet/Images.cpp	/^const PCMet::ImageType PCMet::image_types[] = {$/;"	m	class:PCMet	file:
image_window	src/Dialogs/Waypoint/dlgWaypointDetails.cpp	/^  WndOwnerDrawFrame image_window;$/;"	m	class:final	file:
imagecache	src/Topography/shapelib/mapserver.h	/^    struct imageCacheObj *imagecache;$/;"	m	struct:__anon45	typeref:struct:__anon45::imageCacheObj
imagecachesize	src/Topography/shapelib/mapserver.h	/^    int imagecachesize;$/;"	m	struct:__anon45
imagecolor	src/Topography/shapelib/mapserver.h	/^    colorObj imagecolor; \/* holds the initial image color value *\/$/;"	m	struct:mapObj
imagecolor	src/Topography/shapelib/mapserver.h	/^    colorObj imagecolor;$/;"	m	struct:__anon47
imagecolor	src/Topography/shapelib/mapserver.h	/^    colorObj imagecolor;$/;"	m	struct:__anon48
imagemap	src/Topography/shapelib/mapserver.h	/^      char *imagemap;$/;"	m	union:imageObj::__anon51
imagemode	src/Topography/shapelib/mapserver.h	/^    int  imagemode; \/* MS_IMAGEMODE_* value. *\/$/;"	m	struct:__anon32
imagepath	src/Topography/shapelib/mapserver.h	/^    char *imagepath, *imageurl, *temppath;$/;"	m	struct:__anon35
imagepath	src/Topography/shapelib/mapserver.h	/^    char *imagepath, *imageurl;$/;"	m	struct:imageObj
imagequality	src/Topography/shapelib/mapserver.h	/^    int imagequality; \/* TODO - Deprecated *\/$/;"	m	struct:mapObj
images	src/Dialogs/Waypoint/dlgWaypointDetails.cpp	/^  StaticArray<Bitmap, 5> images;$/;"	m	class:final	file:
imagetype	src/Topography/shapelib/mapserver.h	/^    char *imagetype; \/* name of current outputformat *\/$/;"	m	struct:mapObj
imageurl	src/Topography/shapelib/mapserver.h	/^    char *imagepath, *imageurl, *temppath;$/;"	m	struct:__anon35
imageurl	src/Topography/shapelib/mapserver.h	/^    char *imagepath, *imageurl;$/;"	m	struct:imageObj
img	src/Topography/shapelib/mapserver.h	/^    } img;$/;"	m	struct:imageObj	typeref:union:imageObj::__anon51
img_mask	src/Topography/shapelib/mapserver.h	/^    ms_bitarray  img_mask;$/;"	m	struct:imageObj
imi	src/Device/RecordedFlight.hpp	/^    uint32_t imi;$/;"	m	union:RecordedFlightInfo::__anon159
imi_driver	src/Device/Driver/IMI/Register.cpp	/^const struct DeviceRegister imi_driver = {$/;"	v	typeref:struct:DeviceRegister
immutable	src/Topography/shapelib/mapprimitive.h	/^  %immutable;$/;"	m	struct:__anon71
immutable	src/Topography/shapelib/mapprimitive.h	/^  %immutable;$/;"	m	struct:__anon72
immutable	src/Topography/shapelib/mapserver.h	/^    %immutable;$/;"	m	struct:__anon24
immutable	src/Topography/shapelib/mapserver.h	/^    %immutable;$/;"	m	struct:__anon32
immutable	src/Topography/shapelib/mapserver.h	/^    %immutable;$/;"	m	struct:__anon35
immutable	src/Topography/shapelib/mapserver.h	/^    %immutable;$/;"	m	struct:__anon36
immutable	src/Topography/shapelib/mapserver.h	/^    %immutable;$/;"	m	struct:__anon44
immutable	src/Topography/shapelib/mapserver.h	/^    %immutable;$/;"	m	struct:__anon45
immutable	src/Topography/shapelib/mapserver.h	/^    %immutable;$/;"	m	struct:__anon46
immutable	src/Topography/shapelib/mapserver.h	/^    %immutable;$/;"	m	struct:__anon48
immutable	src/Topography/shapelib/mapserver.h	/^    %immutable;$/;"	m	struct:classObj
immutable	src/Topography/shapelib/mapserver.h	/^    %immutable;$/;"	m	struct:imageObj
immutable	src/Topography/shapelib/mapserver.h	/^    %immutable;$/;"	m	struct:labelObj
immutable	src/Topography/shapelib/mapserver.h	/^    %immutable;$/;"	m	struct:layerObj
immutable	src/Topography/shapelib/mapserver.h	/^    %immutable;$/;"	m	struct:mapObj
immutable	src/Topography/shapelib/mapserver.h	/^    %immutable;$/;"	m	struct:styleObj
immutable	src/Topography/shapelib/mapserver.h	/^  %immutable;$/;"	m	struct:styleObj
immutable	src/Topography/shapelib/mapshape.h	/^    %immutable;$/;"	m	struct:__anon76
immutable	src/Topography/shapelib/mapshape.h	/^    %immutable;$/;"	m	struct:__anon78
import_uint32	src/Language/MOFile.hpp	/^  uint32_t import_uint32(uint32_t x) const {$/;"	f	class:MOFile
important_label_font	src/Look/TopographyLook.hpp	/^  Font important_label_font;$/;"	m	struct:TopographyLook
important_label_threshold	src/Topography/TopographyFile.hpp	/^  const double important_label_threshold;$/;"	m	class:TopographyFile
in	src/Terrain/jasper/jpc/jpc_dec.h	/^	jas_stream_t *in;$/;"	m	struct:__anon129
in	src/Terrain/jasper/jpc/jpc_mqdec.h	/^	jas_stream_t *in;$/;"	m	struct:__anon110
inTask	src/Renderer/WaypointLabelList.hpp	/^    bool inTask;$/;"	m	struct:WaypointLabelList::Label
in_addr_t	src/net/IPv4Address.hxx	/^	typedef uint32_t in_addr_t;$/;"	t	class:IPv4Address
in_encounter	src/Computer/ThermalBandComputer.hpp	/^  bool in_encounter;$/;"	m	class:ThermalBandComputer
in_task	src/Renderer/WaypointRenderer.cpp	/^  bool in_task;$/;"	m	struct:VisibleWaypoint	file:
inactive_background_color	src/Look/DialogLook.hpp	/^    Color inactive_background_color;$/;"	m	struct:DialogLook::__anon11
inbuffer	src/Terrain/jasper/jpc/jpc_mqdec.h	/^	jas_uchar inbuffer;$/;"	m	struct:__anon110
incltagtree	src/Terrain/jasper/jpc/jpc_dec.h	/^	jpc_tagtree_t *incltagtree;$/;"	m	struct:__anon123
include_travel_to_start	src/Engine/Task/Solvers/TaskMacCreadyRemaining.hpp	/^  const bool include_travel_to_start;$/;"	m	class:final
increment	src/Audio/ToneSynthesiser.hpp	/^  unsigned volume = 100, angle = 0, increment = 0;$/;"	m	class:ToneSynthesiser
incremental	src/Engine/Contest/Solvers/ContestDijkstra.cpp	/^   incremental(false)$/;"	f
incremental	src/Engine/Contest/Solvers/ContestDijkstra.hpp	/^  bool incremental;$/;"	m	class:ContestDijkstra
incremental	src/Engine/Contest/Solvers/TriangleContest.hpp	/^  bool incremental;$/;"	m	class:TriangleContest
incremental_speed	src/Engine/Task/Computer/DistanceStatComputer.hpp	/^  IncrementalSpeedComputer incremental_speed;$/;"	m	class:DistanceStatComputer
ind	src/Terrain/jasper/jpc/jpc_cs.h	/^	uint_fast8_t ind;$/;"	m	struct:__anon148
ind	src/Terrain/jasper/jpc/jpc_cs.h	/^	uint_fast8_t ind;$/;"	m	struct:__anon149
ind	src/Terrain/jasper/jpc/jpc_dec.h	/^	uint_fast16_t ind;$/;"	m	struct:__anon116
ind	src/Terrain/jasper/jpc/jpc_mqcod.h	/^	int_least8_t ind;$/;"	m	struct:__anon111
index	src/Android/BMP085Device.hpp	/^  unsigned index;$/;"	m	class:final
index	src/Android/I2CbaroDevice.hpp	/^  unsigned index;$/;"	m	class:final
index	src/Android/NunchuckDevice.hpp	/^  unsigned index;$/;"	m	class:final
index	src/Android/VoltageDevice.hpp	/^  unsigned index;$/;"	m	class:final
index	src/Apple/InternalSensors.hpp	/^  unsigned int index;$/;"	m	class:InternalSensors
index	src/Device/Descriptor.hpp	/^  const unsigned index;$/;"	m	class:final
index	src/InfoBoxes/Content/Alternate.hpp	/^  unsigned index;$/;"	m	class:InfoBoxContentAlternateGR
index	src/InfoBoxes/Content/Alternate.hpp	/^  unsigned index;$/;"	m	class:InfoBoxContentAlternateName
index	src/MapWindow/Items/MapItem.hpp	/^  int index;$/;"	m	struct:TaskOZMapItem
index	src/Renderer/TaskPointRenderer.hpp	/^  unsigned index;$/;"	m	class:TaskPointRenderer
index	src/Terrain/ScanLine.cpp	/^  unsigned index;$/;"	m	struct:GridLocation	file:
index	src/Topography/shapelib/mapprimitive.h	/^  int index;$/;"	m	struct:__anon73
index	src/Topography/shapelib/mapprimitive.h	/^  long index;$/;"	m	struct:__anon72
index	src/Topography/shapelib/mapserver.h	/^    int index;$/;"	m	struct:__anon22
index	src/Topography/shapelib/mapserver.h	/^    int index;$/;"	m	struct:layerObj
index	src/event/PollBackend.hxx	/^		std::size_t index;$/;"	m	struct:PollBackend::Item
index_count	src/Topography/XShape.hpp	/^  uint16_t *index_count[THINNING_LEVELS];$/;"	m	class:XShape
index_max	src/Engine/Contest/Solvers/TriangleContest.hpp	/^    unsigned index_min, index_max; \/\/ [index_min, index_max)$/;"	m	struct:TriangleContest::TurnPointRange
index_min	src/Engine/Contest/Solvers/TriangleContest.hpp	/^    unsigned index_min, index_max; \/\/ [index_min, index_max)$/;"	m	struct:TriangleContest::TurnPointRange
index_to_point	src/Engine/Route/RoutePolar.cpp	/^static constexpr FlatGeoPoint index_to_point[] = {$/;"	v	file:
indicated_airspeed	src/NMEA/Info.hpp	/^  double indicated_airspeed;$/;"	m	struct:NMEAInfo
indices	src/Topography/XShape.hpp	/^  uint16_t *indices[THINNING_LEVELS];$/;"	m	class:XShape
info	src/Dialogs/Device/LX/ManageLX16xxDialog.cpp	/^  const DeviceInfo info;$/;"	m	class:ManageLX16xxWidget	file:
info	src/Dialogs/Device/LX/ManageNanoDialog.cpp	/^  const DeviceInfo info;$/;"	m	class:final	file:
info	src/Dialogs/Device/LX/ManageV7Dialog.cpp	/^  const DeviceInfo info;$/;"	m	class:final	file:
info	src/Dialogs/dlgAnalysis.cpp	/^    PixelRect info;$/;"	m	struct:final::Layout	file:
info	src/Dialogs/dlgAnalysis.cpp	/^  WndFrame info;$/;"	m	class:final	file:
info	src/Terrain/jasper/jp2/jp2_cod.h	/^	const struct jp2_boxinfo_s *info;$/;"	m	struct:__anon94	typeref:struct:__anon94::jp2_boxinfo_s
info_box	src/Look/Look.hpp	/^  InfoBoxLook info_box;$/;"	m	struct:Look
info_box_geometry_list	src/Dialogs/Settings/Panels/LayoutConfigPanel.cpp	/^static constexpr StaticEnumChoice info_box_geometry_list[] = {$/;"	v	file:
info_boxes	src/Dialogs/Settings/dlgConfigInfoboxes.cpp	/^    InfoBoxLayout::Layout info_boxes;$/;"	m	struct:final::Layout	file:
info_boxes	src/UISettings.hpp	/^  InfoBoxSettings info_boxes;$/;"	m	struct:UISettings
info_labels_font	src/Look/FlarmTrafficLook.hpp	/^  Font info_values_font, info_units_font, info_labels_font, call_sign_font;$/;"	m	struct:FlarmTrafficLook
info_units_font	src/Look/FlarmTrafficLook.hpp	/^  Font info_values_font, info_units_font, info_labels_font, call_sign_font;$/;"	m	struct:FlarmTrafficLook
info_values_font	src/Look/FlarmTrafficLook.hpp	/^  Font info_values_font, info_units_font, info_labels_font, call_sign_font;$/;"	m	struct:FlarmTrafficLook
infobox_border_list	src/Dialogs/Settings/Panels/LayoutConfigPanel.cpp	/^static constexpr StaticEnumChoice infobox_border_list[] = {$/;"	v	file:
infobox_config	src/PageSettings.hpp	/^  InfoBoxConfig infobox_config;$/;"	m	struct:PageLayout
infoboxes	src/InfoBoxes/InfoBoxManager.cpp	/^static InfoBoxWindow *infoboxes[InfoBoxSettings::Panel::MAX_CONTENTS];$/;"	v	file:
infoboxes_dirty	src/InfoBoxes/InfoBoxManager.cpp	/^static bool infoboxes_dirty = false;$/;"	v	file:
infoboxes_hidden	src/InfoBoxes/InfoBoxManager.cpp	/^static bool infoboxes_hidden = false;$/;"	v	file:
init	src/Terrain/jasper/jp2/jp2_cod.h	/^	void (*init)(jp2_box_t *box);$/;"	m	struct:jp2_boxops_s
init	src/event/net/cares/Channel.hxx	/^	Init init;$/;"	m	class:Cares::Channel
initSurface	src/Android/NativeView.hpp	/^  bool initSurface() {$/;"	f	class:NativeView
init_surface_method	src/Android/NativeView.cpp	/^jmethodID NativeView::init_surface_method, NativeView::deinit_surface_method;$/;"	m	class:NativeView	file:
init_surface_method	src/Android/NativeView.hpp	/^  static jmethodID init_surface_method, deinit_surface_method;$/;"	m	class:NativeView
initial_active_task_point	src/Dialogs/Task/TargetDialog.cpp	/^  unsigned initial_active_task_point;$/;"	m	class:TargetWidget	file:
initial_orientation	src/ui/window/TopWindow.hpp	/^  DisplayOrientation initial_orientation = DisplayOrientation::DEFAULT;$/;"	m	class:UI::TopWindowStyle
initial_value	src/Dialogs/ListPicker.cpp	/^  unsigned initial_value;$/;"	m	class:ListPickerWidget	file:
initialgap	src/Topography/shapelib/mapserver.h	/^    double initialgap;$/;"	m	struct:styleObj
initialised	src/Computer/WarningComputer.hpp	/^  bool initialised;$/;"	m	class:WarningComputer
initialised	src/Engine/Task/Computer/ElementStatComputer.hpp	/^  bool initialised;$/;"	m	class:ElementStatComputer
initialised	src/Widget/PagerWidget.hpp	/^  bool initialised = false, prepared, visible;$/;"	m	class:PagerWidget
initialised	src/Widget/RowFormWidget.hpp	/^    bool initialised, prepared, shown;$/;"	m	struct:RowFormWidget::Row
initializeRasterBuffer	src/Topography/shapelib/mapserver.h	/^    int WARN_UNUSED (*initializeRasterBuffer)(rasterBufferObj *rb, int width, int height, int mode);$/;"	m	struct:rendererVTableObj
initialized	src/util/Manual.hxx	/^	bool initialized = false;$/;"	m	class:Manual
inline	src/Terrain/jasper/jas_compiler.h	67;"	d
inline	src/Terrain/jasper/jas_compiler.h	68;"	d
inmapfile	src/Topography/shapelib/mapserver.h	/^    int inmapfile; \/* boolean value for writing *\/$/;"	m	struct:__anon32
inner_circle_pen	src/Look/ThermalAssistantLook.hpp	/^  Pen inner_circle_pen;$/;"	m	struct:ThermalAssistantLook
inner_radius	src/Engine/Task/ObservationZones/AnnularSectorZone.hpp	/^  double inner_radius;$/;"	m	class:AnnularSectorZone
inner_radius	src/Engine/Task/ObservationZones/KeyholeZone.hpp	/^  double inner_radius;$/;"	m	class:final
input_config	src/Input/InputEvents.cpp	/^static InputConfig input_config;$/;"	v	file:
input_event_funcs	src/lua/InputEvent.cpp	/^static constexpr struct luaL_Reg input_event_funcs[] = {$/;"	v	typeref:struct:luaL_Reg	file:
input_event_methods	src/lua/InputEvent.cpp	/^static constexpr struct luaL_Reg input_event_methods[] = {$/;"	v	typeref:struct:luaL_Reg	file:
inputs	src/NMEA/VegaSwitchState.hpp	/^  unsigned inputs, outputs;$/;"	m	struct:VegaSwitchState
insert	src/util/TrivialArray.hxx	/^	void insert(size_type i, I _begin, I _end) {$/;"	f	class:TrivialArray
inside_oz	src/Engine/Task/Stats/TaskStats.hpp	/^  bool inside_oz;$/;"	m	class:TaskStats
inst_speed_fast	src/Engine/Task/Computer/TaskStatsComputer.hpp	/^  Filter inst_speed_fast;$/;"	m	class:TaskStatsComputer
inst_speed_fast	src/Engine/Task/Stats/TaskStats.hpp	/^  double inst_speed_fast;$/;"	m	class:TaskStats
inst_speed_slow	src/Engine/Task/Computer/TaskStatsComputer.hpp	/^  Filter inst_speed_slow;$/;"	m	class:TaskStatsComputer
inst_speed_slow	src/Engine/Task/Stats/TaskStats.hpp	/^  double inst_speed_slow;$/;"	m	class:TaskStats
instance	src/Android/DownloadManager.cpp	/^static AndroidDownloadManager *instance;$/;"	v	file:
instance	src/Dialogs/Settings/Panels/TerrainDisplayConfigPanel.cpp	/^static TerrainDisplayConfigPanel *instance;$/;"	v	file:
instance_	src/util/BindMethod.hxx	/^	void *instance_;$/;"	m	class:BoundMethod
int16_t	src/zzip/stdint.h	/^    typedef unsigned int uint16_t;      typedef signed int int16_t;$/;"	t
int16_t	src/zzip/stdint.h	/^    typedef unsigned short uint16_t;    typedef signed short int16_t;$/;"	t
int32_t	src/zzip/stdint.h	/^    typedef unsigned int uint32_t;      typedef signed int int32_t;$/;"	t
int32_t	src/zzip/stdint.h	/^    typedef unsigned long uint32_t;     typedef signed long int32_t;$/;"	t
int64_t	src/zzip/stdint.h	/^typedef unsigned _zzip___int64 uint64_t; typedef _zzip___int64 int64_t;$/;"	t
int8_t	src/zzip/stdint.h	/^    typedef unsigned char uint8_t;      typedef signed char int8_t;$/;"	t
int_value	src/Form/DataField/ComboList.hpp	/^    int int_value;$/;"	m	struct:ComboList::Item
integer_type	src/ui/canvas/memory/PixelOperations.hpp	/^  typedef typename PixelTraits::integer_type integer_type;$/;"	t	struct:PixelIntegerAdapter
integer_type	src/ui/canvas/memory/PixelTraits.hpp	/^  typedef uint32_t integer_type;$/;"	t	struct:BGRAPixelTraits
integer_type	src/ui/canvas/memory/PixelTraits.hpp	/^  typedef uint8_t integer_type;$/;"	t	struct:GreyscalePixelTraits
intercept_icon	src/Look/AirspaceLook.hpp	/^  MaskedIcon intercept_icon;$/;"	m	struct:AirspaceLook
interlace	src/Topography/shapelib/mapserver.h	/^    int interlace; \/* TODO - Deprecated *\/$/;"	m	struct:mapObj
interlace	src/Topography/shapelib/mapserver.h	/^    int interlace;$/;"	m	struct:__anon47
interlace	src/Topography/shapelib/mapserver.h	/^    int interlace;$/;"	m	struct:__anon48
intermediate_types	src/Engine/Task/Factory/AbstractTaskFactory.hpp	/^  const LegalPointSet intermediate_types;$/;"	m	class:AbstractTaskFactory
internal	src/Device/RecordedFlight.hpp	/^  } internal;$/;"	m	struct:RecordedFlightInfo	typeref:union:RecordedFlightInfo::__anon159
internal_polars	src/Polar/PolarStore.cpp	/^static constexpr PolarStore::Item internal_polars[] =$/;"	v	file:
internal_sensors	src/Device/Descriptor.hpp	/^  InternalSensors *internal_sensors;$/;"	m	class:final
interpolation	src/ui/canvas/Bitmap.hpp	/^  bool interpolation = false;$/;"	m	class:final
intersection_test	src/Engine/Task/Unordered/AbortTask.hpp	/^  AbortIntersectionTest* intersection_test;$/;"	m	class:AbortTask
intersection_test	src/Task/ProtectedTaskManager.hpp	/^  ReachIntersectionTest intersection_test;$/;"	m	class:ProtectedTaskManager
intersections	src/Engine/Airspace/AirspaceIntersectionVisitor.hpp	/^  AirspaceIntersectionVector intersections;$/;"	m	class:AirspaceIntersectionVisitor
intersections	src/Renderer/AirspaceLabelRenderer.hpp	/^  StaticArray<GeoPoint,32> intersections;$/;"	m	class:AirspaceLabelRenderer
intersections	src/Renderer/AirspaceRenderer.hpp	/^  StaticArray<GeoPoint,32> intersections;$/;"	m	class:AirspaceRenderer
interval	src/Tracking/LiveTrack24/Settings.hpp	/^  unsigned interval;$/;"	m	struct:LiveTrack24::Settings
interval	src/Tracking/SkyLines/Settings.hpp	/^  unsigned interval;$/;"	m	struct:SkyLinesTracking::Settings
intervals	src/Topography/shapelib/mapserver.h	/^    int intervals;$/;"	m	struct:__anon47
intptr_t	src/zzip/stdint.h	/^    typedef int intptr_t;$/;"	t
intptr_t	src/zzip/stdint.h	/^    typedef int64_t intptr_t;$/;"	t
intptr_t	src/zzip/stdint.h	/^    typedef long intptr_t;$/;"	t
intval	src/Topography/shapelib/mapserver.h	/^    int intval;$/;"	m	union:__anon26
intval	src/Topography/shapelib/mapserver.h	/^    int intval;$/;"	m	union:__anon27
inv_d	src/Engine/Route/RouteLink.hpp	/^  double inv_d;$/;"	m	struct:RouteLink
inv_draw_scale	src/Projection/Projection.hpp	/^  double inv_draw_scale;$/;"	m	class:Projection
inv_dt	src/Engine/Task/Solvers/TaskSolveTravelled.hpp	/^  double inv_dt;$/;"	m	class:TaskSolveTravelled
inv_gradient	src/Engine/Route/RoutePolar.hpp	/^    double inv_gradient;$/;"	m	struct:RoutePolar::RoutePolarPoint
inv_k1	src/Atmosphere/Pressure.cpp	29;"	d	file:
inv_k2	src/Atmosphere/Pressure.cpp	31;"	d	file:
inv_mc	src/Engine/GlideSolvers/GlidePolar.hpp	/^  double inv_mc;$/;"	m	class:GlidePolar
inv_mc	src/Engine/Route/RoutePolars.hpp	/^  double inv_mc;$/;"	m	class:RoutePolars
invalid_color	src/Look/GestureLook.hpp	/^  Color color, invalid_color;$/;"	m	struct:GestureLook
invalid_pen	src/Look/GestureLook.hpp	/^  Pen pen, invalid_pen;$/;"	m	struct:GestureLook
invalidated	src/ui/window/TopWindow.hpp	/^  bool invalidated;$/;"	m	class:UI::TopWindow
inverse	src/CrossSection/CrossSectionRenderer.hpp	/^  const bool inverse;$/;"	m	class:CrossSectionRenderer
inverse	src/HorizonWidget.cpp	/^    :look(_look),inverse(_inverse)$/;"	f	class:HorizonWindow
inverse	src/HorizonWidget.cpp	/^  const bool& inverse;$/;"	m	class:HorizonWindow	file:
inverse	src/InfoBoxes/InfoBoxSettings.hpp	/^  bool inverse, use_colors;$/;"	m	struct:InfoBoxSettings
inverse	src/Look/InfoBoxLook.hpp	/^  bool inverse;$/;"	m	struct:InfoBoxLook
inverse	src/Look/ThermalBandLook.hpp	/^  bool inverse;$/;"	m	struct:ThermalBandLook
inverse	src/Look/TraceHistoryLook.hpp	/^  bool inverse;$/;"	m	struct:TraceHistoryLook
inverse	src/Look/VarioLook.hpp	/^  bool inverse, colors;$/;"	m	struct:VarioLook
invert_cursor_colors	src/DisplaySettings.hpp	/^  bool invert_cursor_colors;$/;"	m	struct:DisplaySettings
invert_cursor_colors	src/ui/window/TopWindow.hpp	/^  bool invert_cursor_colors = false;$/;"	m	class:UI::TopWindow
invert_fragment_shader	src/ui/canvas/opengl/Shaders.cpp	/^static constexpr char invert_fragment_shader[] =$/;"	v	file:
invert_projection	src/ui/canvas/opengl/Shaders.cpp	/^GLint invert_projection, invert_texture;$/;"	m	namespace:OpenGL	file:
invert_shader	src/ui/canvas/opengl/Shaders.cpp	/^GLProgram *invert_shader;$/;"	m	namespace:OpenGL	file:
invert_texture	src/ui/canvas/opengl/Shaders.cpp	/^GLint invert_projection, invert_texture;$/;"	m	namespace:OpenGL	file:
invert_vertex_shader	src/ui/canvas/opengl/Shaders.cpp	/^static const char *const invert_vertex_shader = texture_vertex_shader;$/;"	v	file:
invert_x	src/ui/event/shared/RotatePointer.hpp	/^  bool invert_x = false, invert_y = false;$/;"	m	class:UI::RotatePointer
invert_y	src/ui/event/shared/RotatePointer.hpp	/^  bool invert_x = false, invert_y = false;$/;"	m	class:UI::RotatePointer
invfastcosine	src/Math/Angle.hpp	/^  inline double invfastcosine() const {$/;"	f	class:Angle
invgeotransform	src/Topography/shapelib/mapprimitive.h	/^  double invgeotransform[6]; \/* georef to pixel\/line *\/$/;"	m	struct:__anon74
io	src/zzip/file.h	/^    zzip_plugin_io_t io;$/;"	m	struct:zzip_file
io	src/zzip/lib.h	/^    zzip_plugin_io_t io;          \/* vtable for io routines *\/$/;"	m	struct:zzip_dir
ioio_helper	src/Android/Main.cpp	/^IOIOHelper *ioio_helper;$/;"	v
ioio_uart_id	src/Device/Config.hpp	/^  unsigned ioio_uart_id;$/;"	m	struct:DeviceConfig
ioprio_set	src/thread/Util.hpp	/^ioprio_set(int which, int who, int ioprio)$/;"	f
ioprio_set_idle	src/thread/Util.hpp	/^ioprio_set_idle()$/;"	f
ip_address	src/Device/Config.hpp	/^  StaticString<64> ip_address;$/;"	m	struct:DeviceConfig
ipr	src/Terrain/jasper/jp2/jp2_cod.h	/^	uint_fast8_t ipr;$/;"	m	struct:__anon86
isAirport	src/Renderer/WaypointLabelList.hpp	/^    bool isAirport;$/;"	m	struct:WaypointLabelList::Label
isBGAEnhancedOptionZone	src/Task/TaskFileSeeYou.cpp	/^static bool isBGAEnhancedOptionZone(const SeeYouTurnpointInformation$/;"	f	file:
isBGAFixedCourseZone	src/Task/TaskFileSeeYou.cpp	/^static bool isBGAFixedCourseZone(const SeeYouTurnpointInformation &turnpoint_infos)$/;"	f	file:
isClickOnTarget	src/MapWindow/TargetMapWindowDrag.cpp	/^TargetMapWindow::isClickOnTarget(const PixelPoint pc) const$/;"	f	class:TargetMapWindow
isEnabled	src/Android/BluetoothHelper.cpp	/^BluetoothHelper::isEnabled(JNIEnv *env)$/;"	f	class:BluetoothHelper
isEnabled_method	src/Android/BluetoothHelper.cpp	/^static jmethodID isEnabled_method;$/;"	m	namespace:BluetoothHelper	file:
isInSector	src/MapWindow/TargetMapWindowDrag.cpp	/^TargetMapWindow::isInSector(PixelPoint pt)$/;"	f	class:TargetMapWindow
isKeyhole	src/Task/TaskFileSeeYou.cpp	/^static bool isKeyhole(const SeeYouTurnpointInformation &turnpoint_infos)$/;"	f	file:
isLandable	src/Renderer/WaypointLabelList.hpp	/^    bool isLandable;$/;"	m	struct:WaypointLabelList::Label
isLeft	src/Geo/ConvexHull/PolygonInterior.cpp	/^isLeft( const FlatGeoPoint &P0, const FlatGeoPoint &P1, const FlatGeoPoint &P2 )$/;"	f	file:
isLeft	src/Geo/ConvexHull/PolygonInterior.cpp	/^isLeft( const GeoPoint &P0, const GeoPoint &P1, const GeoPoint &P2 )$/;"	f	file:
isWatchedWaypoint	src/Renderer/WaypointLabelList.hpp	/^    bool isWatchedWaypoint;$/;"	m	struct:WaypointLabelList::Label
is_active	src/Engine/Task/Unordered/AbortTask.hpp	/^  bool is_active;$/;"	m	class:AbortTask
is_char	src/ui/event/poll/linux/Translate.hpp	/^  bool is_char;$/;"	m	struct:__anon178
is_char	src/ui/event/shared/Event.hpp	/^  bool is_char;$/;"	m	struct:UI::Event
is_closed	src/Engine/Contest/Solvers/TriangleContest.hpp	/^  bool is_closed = false;$/;"	m	class:TriangleContest
is_closed	src/Engine/Task/Factory/Constraints.hpp	/^  bool is_closed;$/;"	m	struct:TaskFactoryConstraints
is_closing_quote_char	src/util/ExtractParameters.cpp	/^static bool is_closing_quote_char(TCHAR const *s) {$/;"	f	file:
is_colibri	src/Device/Driver/LX/Internal.hpp	/^  bool is_colibri;$/;"	m	class:LXDevice
is_complete	src/Engine/Contest/Solvers/TriangleContest.hpp	/^  bool is_complete = false;$/;"	m	class:TriangleContest
is_convex	src/Engine/Airspace/AbstractAirspace.hpp	/^  mutable TriState is_convex;$/;"	m	class:AbstractAirspace
is_declaration	src/XML/Node.hpp	/^    bool is_declaration;$/;"	m	struct:XMLNode::Data
is_dhv	src/Engine/Contest/Solvers/XContestFree.cpp	/^   is_dhv(_is_dhv) {}$/;"	f
is_dhv	src/Engine/Contest/Solvers/XContestFree.hpp	/^  const bool is_dhv;$/;"	m	class:XContestFree
is_dhv	src/Engine/Contest/Solvers/XContestTriangle.cpp	/^   is_dhv(_is_dhv) {}$/;"	f
is_dhv	src/Engine/Contest/Solvers/XContestTriangle.hpp	/^  const bool is_dhv;$/;"	m	class:XContestTriangle
is_dithered	src/Android/Product.cpp	/^bool is_nook, is_dithered;$/;"	v
is_event	src/Device/Driver/LX/Convert.cpp	/^  bool is_event;$/;"	m	struct:Context	file:
is_forwarded_nano	src/Device/Driver/LX/Internal.hpp	/^  bool is_forwarded_nano;$/;"	m	class:LXDevice
is_fraction	src/Renderer/UnitSymbolRenderer.cpp	/^  bool is_fraction;$/;"	m	struct:UnitSymbolStrings	file:
is_line	src/Task/TaskFileSeeYou.cpp	/^  bool is_line;$/;"	m	struct:SeeYouTurnpointInformation	file:
is_locked	src/Dialogs/Task/TargetDialog.cpp	/^  bool is_locked;$/;"	m	class:TargetWidget	file:
is_lx16xx	src/Device/Driver/LX/Internal.hpp	/^  bool is_lx16xx;$/;"	m	class:LXDevice
is_mat	src/Engine/Task/Stats/TaskStats.hpp	/^  bool is_mat;$/;"	m	class:TaskStats
is_min	src/Engine/Task/PathSolvers/TaskDijkstra.cpp	/^   is_min(_is_min)$/;"	f
is_min	src/Engine/Task/PathSolvers/TaskDijkstra.hpp	/^  const bool is_min;$/;"	m	class:TaskDijkstra
is_nano	src/Device/Driver/LX/Internal.hpp	/^  bool is_nano;$/;"	m	class:LXDevice
is_nook	src/Android/Product.cpp	/^bool is_nook, is_dithered;$/;"	v
is_pointer	src/ui/event/poll/linux/Input.hpp	/^  bool is_pointer;$/;"	m	class:UI::final
is_positive	src/Engine/Task/Computer/IncrementalSpeedComputer.hpp	/^  const bool is_positive;$/;"	m	class:IncrementalSpeedComputer
is_simulator	src/Simulator.hpp	/^static inline bool is_simulator()$/;"	f
is_tmpfile	src/io/FileOutputStream.hxx	/^	bool is_tmpfile = false;$/;"	m	class:final
is_trivial_ndebug	src/util/TypeTraits.hpp	/^struct is_trivial_ndebug$/;"	s
is_utm	src/Waypoint/WaypointReaderCompeGPS.hpp	/^  bool is_utm = false;$/;"	m	class:final
is_utm	src/Waypoint/WaypointReaderFS.hpp	/^  bool is_utm = false;$/;"	m	class:final
is_v7	src/Device/Driver/LX/Internal.hpp	/^  bool is_v7;$/;"	m	class:LXDevice
isa_sea_level_density	src/Atmosphere/AirDensity.cpp	28;"	d	file:
isfallback	src/Topography/shapelib/mapserver.h	/^    int isfallback; \/\/ TRUE if this class should be applied if and only if$/;"	m	struct:classObj
iso	src/Engine/Task/Solvers/TaskOptTarget.hpp	/^     iso(_tp_current, projection)$/;"	f	class:final
iso	src/Engine/Task/Solvers/TaskOptTarget.hpp	/^  AATIsolineSegment iso;$/;"	m	class:final
iso_latin_1_to_tchar	src/io/StringConverter.cpp	/^iso_latin_1_to_tchar(TCHAR *dest, const char *src)$/;"	f	file:
isoline_pen	src/Look/TaskLook.hpp	/^  Pen isoline_pen;$/;"	m	struct:TaskLook
isopen	src/Topography/shapelib/mapshape.h	/^    int isopen;$/;"	m	struct:__anon78
isreported	src/Topography/shapelib/maperror.h	/^    int isreported;$/;"	m	struct:errorObj
italic	src/Look/FontDescription.hpp	/^  bool bold, italic;$/;"	m	class:FontDescription
italic_font_path	src/ui/canvas/freetype/Font.cpp	/^static AllocatedPath italic_font_path = nullptr;$/;"	v	file:
item	src/Topography/shapelib/mapserver.h	/^      char* item;$/;"	m	struct:__anon55
item	src/Topography/shapelib/mapserver.h	/^    char *item;$/;"	m	struct:__anon22
itemObj	src/Topography/shapelib/mapprimitive.h	/^} itemObj;$/;"	t	typeref:struct:__anon73
item_height	src/Form/List.hpp	/^  unsigned item_height;$/;"	m	class:ListControl
item_help_callback	src/Dialogs/ListPicker.cpp	/^     item_help_callback(nullptr) {}$/;"	f	class:ListPickerWidget
item_help_callback	src/Dialogs/ListPicker.cpp	/^  ItemHelpCallback_t item_help_callback;$/;"	m	class:ListPickerWidget	file:
item_help_enabled	src/Form/DataField/Base.hpp	/^  bool item_help_enabled;$/;"	m	class:DataField
item_list	src/MapSettings.hpp	/^  MapItemListSettings item_list;$/;"	m	struct:MapSettings
item_renderer	src/Dialogs/ListPicker.cpp	/^  ListItemRenderer &item_renderer;$/;"	m	class:ListPickerWidget	file:
item_renderer	src/Form/List.hpp	/^  ListItemRenderer *item_renderer = nullptr;$/;"	m	class:ListControl
iteminfo	src/Topography/shapelib/mapserver.h	/^    void *iteminfo; \/* connection specific information necessary to retrieve values *\/$/;"	m	struct:layerObj
items	src/Dialogs/Airspace/AirspaceList.cpp	/^  AirspaceSelectInfoVector items;$/;"	m	class:final	file:
items	src/Dialogs/Device/DeviceListDialog.cpp	/^  Item items[NUMDEV];$/;"	m	class:final	file:
items	src/Dialogs/Device/ScanBluetoothLeDialog.cpp	/^  std::vector<Item> items;$/;"	m	class:final	file:
items	src/Dialogs/DownloadFilePicker.cpp	/^  std::vector<AvailableFile> items;$/;"	m	class:final	file:
items	src/Dialogs/FileManager.cpp	/^  TrivialArray<FileItem, 64u> items;$/;"	m	class:ManagedFileListWidget	file:
items	src/Dialogs/Traffic/TrafficList.cpp	/^  ItemList items;$/;"	m	class:TrafficListWidget	file:
items	src/Dialogs/Waypoint/Manager.cpp	/^  WaypointList items;$/;"	m	class:final	file:
items	src/Dialogs/Waypoint/WaypointList.cpp	/^  WaypointList items;$/;"	m	class:final	file:
items	src/Dialogs/Weather/MapOverlayWidget.cpp	/^  std::vector<Item> items;$/;"	m	class:final	file:
items	src/Form/DataField/ComboList.hpp	/^  std::vector<Item> items;$/;"	m	class:ComboList
items	src/Form/GridView.hpp	/^  StaticArray<Window *, MAX_ITEMS> items;$/;"	m	class:GridView
items	src/Menu/MenuData.hpp	/^  MenuItem items[MAX_ITEMS];$/;"	m	class:Menu
items	src/Topography/shapelib/mapserver.h	/^    char **items, **values; \/* items\/values (process 1 record at a time) *\/$/;"	m	struct:__anon31
items	src/Topography/shapelib/mapserver.h	/^    char **items;$/;"	m	struct:layerObj
items	src/event/PollBackend.hxx	/^	std::unordered_map<int, Item> items;$/;"	m	class:PollBackend
items	src/event/PollResultGeneric.hxx	/^	std::vector<Item> items;$/;"	m	class:PollResultGeneric
items	src/event/WinSelectBackend.hxx	/^	std::unordered_map<SOCKET, Item> items;$/;"	m	class:WinSelectBackend
items	src/util/SliceAllocator.hxx	/^		Item items[size];$/;"	m	struct:SliceAllocator::Area
items_visible	src/Form/List.hpp	/^  unsigned items_visible;$/;"	m	class:ListControl
iterator	src/Dialogs/Weather/NOAAList.cpp	/^    NOAAStore::iterator iterator;$/;"	m	struct:final::ListItem	file:
iterator	src/Engine/PathSolvers/Dijkstra.hpp	/^      :edge_value(_edge_value), iterator(_iterator) {}$/;"	f	struct:Dijkstra::Value
iterator	src/Engine/PathSolvers/Dijkstra.hpp	/^    edge_iterator iterator;$/;"	m	struct:Dijkstra::Value
iterator	src/Engine/Route/AStar.hpp	/^      :priority(_priority), iterator(_iterator) {}$/;"	f	struct:AStar::NodeValue
iterator	src/Engine/Route/AStar.hpp	/^    node_value_iterator iterator;$/;"	m	struct:AStar::NodeValue
iterator	src/FLARM/NameDatabase.hpp	/^  typedef Array::iterator iterator;$/;"	t	class:FlarmNameDatabase
iterator	src/Weather/NOAAStore.hpp	/^  typedef StationContainer::iterator iterator;$/;"	t	class:NOAAStore
iterator	src/util/AllocatedGrid.hxx	/^	typedef typename AllocatedArray<T>::iterator iterator;$/;"	t	class:AllocatedGrid
iterator	src/util/CastIterator.hpp	/^  IT iterator;$/;"	m	class:CastIterator
iterator	src/util/IterableSplitString.hxx	/^	typedef Iterator iterator;$/;"	t	class:BasicIterableSplitString
iterator	src/util/QuadTree.hxx	/^	class iterator {$/;"	c
iterator_category	src/Engine/Trace/Trace.cpp	/^  typedef typename I::iterator_category iterator_category;$/;"	t	class:PointerIterator	file:
iterator_category	src/util/CastIterator.hpp	/^  typedef typename IT::iterator_category iterator_category;$/;"	t	class:CastIterator
iterator_category	src/util/IterableSplitString.hxx	/^		typedef std::forward_iterator_tag iterator_category;$/;"	t	class:BasicIterableSplitString::final
iterator_category	src/util/QuadTree.hxx	/^		typedef std::forward_iterator_tag iterator_category;$/;"	t	class:const_iterator
iterator_category	src/util/QuadTree.hxx	/^		typedef std::forward_iterator_tag iterator_category;$/;"	t	class:iterator
ival_av_last	src/Gauge/GaugeVario.hpp	/^  int ival_av_last = 0;$/;"	m	class:GaugeVario
ival_last	src/Gauge/GaugeVario.hpp	/^  int ival_last = 0;$/;"	m	class:GaugeVario
jas_alloc2	src/Terrain/jasper/base/jas_malloc.c	/^void *jas_alloc2(size_t num_elements, size_t element_size)$/;"	f
jas_alloc3	src/Terrain/jasper/base/jas_malloc.c	/^void *jas_alloc3(size_t num_arrays, size_t array_size, size_t element_size)$/;"	f
jas_calloc	src/Terrain/jasper/base/jas_malloc.c	/^void *jas_calloc(size_t num_elements, size_t element_size)$/;"	f
jas_deprecated	src/Terrain/jasper/jas_debug.h	116;"	d
jas_eprintf	src/Terrain/jasper/jas_debug.h	114;"	d
jas_fast32_asl	src/Terrain/jasper/jas_math.h	/^inline static int_fast32_t jas_fast32_asl(int_fast32_t x, unsigned n)$/;"	f
jas_fast32_asr	src/Terrain/jasper/jas_math.h	/^inline static int_fast32_t jas_fast32_asr(int_fast32_t x, unsigned n)$/;"	f
jas_free	src/Terrain/jasper/base/jas_malloc.c	/^void jas_free(void *ptr)$/;"	f
jas_get_mb	src/Terrain/jasper/base/jas_malloc.c	/^jas_mb_t *jas_get_mb(void *ptr)$/;"	f
jas_get_mem_usage	src/Terrain/jasper/base/jas_malloc.c	/^size_t jas_get_mem_usage()$/;"	f
jas_getdbglevel	src/Terrain/jasper/jas_debug.h	113;"	d
jas_image_brx	src/Terrain/jasper/jas_image.h	379;"	d
jas_image_bry	src/Terrain/jasper/jas_image.h	386;"	d
jas_image_clrspc	src/Terrain/jasper/jas_image.h	398;"	d
jas_image_cmprof	src/Terrain/jasper/jas_image.h	667;"	d
jas_image_cmpt_t	src/Terrain/jasper/jas_image.h	/^} jas_image_cmpt_t;$/;"	t	typeref:struct:__anon100
jas_image_cmptbrx	src/Terrain/jasper/jas_image.h	464;"	d
jas_image_cmptbry	src/Terrain/jasper/jas_image.h	472;"	d
jas_image_cmptdtype	src/Terrain/jasper/jas_image.h	/^static inline uint_least8_t jas_image_cmptdtype(const jas_image_t *image, unsigned cmptno)$/;"	f
jas_image_cmptheight	src/Terrain/jasper/jas_image.h	421;"	d
jas_image_cmpthstep	src/Terrain/jasper/jas_image.h	439;"	d
jas_image_cmptparm_t	src/Terrain/jasper/jas_image.h	/^} jas_image_cmptparm_t;$/;"	t	typeref:struct:__anon102
jas_image_cmptprec	src/Terrain/jasper/jas_image.h	433;"	d
jas_image_cmptsgnd	src/Terrain/jasper/jas_image.h	427;"	d
jas_image_cmpttlx	src/Terrain/jasper/jas_image.h	451;"	d
jas_image_cmpttly	src/Terrain/jasper/jas_image.h	457;"	d
jas_image_cmpttype	src/Terrain/jasper/jas_image.h	407;"	d
jas_image_cmpttype_t	src/Terrain/jasper/jas_image.h	/^typedef int_fast32_t jas_image_cmpttype_t;$/;"	t
jas_image_cmptvstep	src/Terrain/jasper/jas_image.h	445;"	d
jas_image_cmptwidth	src/Terrain/jasper/jas_image.h	415;"	d
jas_image_colorspc_t	src/Terrain/jasper/jas_image.h	/^typedef int_fast16_t jas_image_colorspc_t;$/;"	t
jas_image_coord_t	src/Terrain/jasper/jas_image.h	/^typedef int_fast32_t jas_image_coord_t;$/;"	t
jas_image_fmtinfo_t	src/Terrain/jasper/jas_image.h	/^} jas_image_fmtinfo_t;$/;"	t	typeref:struct:__anon104
jas_image_fmtops_t	src/Terrain/jasper/jas_image.h	/^} jas_image_fmtops_t;$/;"	t	typeref:struct:__anon103
jas_image_height	src/Terrain/jasper/jas_image.h	358;"	d
jas_image_numcmpts	src/Terrain/jasper/jas_image.h	392;"	d
jas_image_setclrspc	src/Terrain/jasper/jas_image.h	404;"	d
jas_image_setcmprof	src/Terrain/jasper/jas_image.h	702;"	d
jas_image_setcmpttype	src/Terrain/jasper/jas_image.h	409;"	d
jas_image_smpltype_t	src/Terrain/jasper/jas_image.h	/^typedef int_fast16_t jas_image_smpltype_t;$/;"	t
jas_image_t	src/Terrain/jasper/jas_image.h	/^} jas_image_t;$/;"	t	typeref:struct:__anon101
jas_image_tlx	src/Terrain/jasper/jas_image.h	365;"	d
jas_image_tly	src/Terrain/jasper/jas_image.h	372;"	d
jas_image_width	src/Terrain/jasper/jas_image.h	352;"	d
jas_int_asl	src/Terrain/jasper/jas_math.h	/^inline static int jas_int_asl(int x, unsigned n)$/;"	f
jas_int_asr	src/Terrain/jasper/jas_math.h	/^inline static int jas_int_asr(int x, unsigned n)$/;"	f
jas_least32_asl	src/Terrain/jasper/jas_math.h	/^inline static int_least32_t jas_least32_asl(int_least32_t x, unsigned n)$/;"	f
jas_least32_asr	src/Terrain/jasper/jas_math.h	/^inline static int_least32_t jas_least32_asr(int_least32_t x, unsigned n)$/;"	f
jas_longlong	src/Terrain/jasper/jas_types.h	86;"	d
jas_malloc	src/Terrain/jasper/base/jas_malloc.c	/^void *jas_malloc(size_t size)$/;"	f
jas_matent_t	src/Terrain/jasper/jas_seq.h	/^typedef int_fast32_t jas_matent_t;$/;"	t
jas_matent_t	src/Terrain/jasper/jas_seq.h	/^typedef int_least32_t jas_matent_t;$/;"	t
jas_matind_t	src/Terrain/jasper/jas_seq.h	/^typedef int_fast32_t jas_matind_t;$/;"	t
jas_matind_t	src/Terrain/jasper/jas_seq.h	/^typedef int_least32_t jas_matind_t;$/;"	t
jas_matrix	src/Terrain/jasper/jas_seq.h	/^typedef struct jas_matrix {$/;"	s
jas_matrix_asl	src/Terrain/jasper/base/jas_seq.c	/^void jas_matrix_asl(jas_matrix_t *matrix, unsigned n)$/;"	f
jas_matrix_asr	src/Terrain/jasper/base/jas_seq.c	/^void jas_matrix_asr(jas_matrix_t *matrix, unsigned n)$/;"	f
jas_matrix_bindcol	src/Terrain/jasper/jas_seq.h	/^static inline int jas_matrix_bindcol(jas_matrix_t *mat0, jas_matrix_t *mat1, jas_matind_t c)$/;"	f
jas_matrix_bindrow	src/Terrain/jasper/jas_seq.h	/^static inline int jas_matrix_bindrow(jas_matrix_t *mat0, jas_matrix_t *mat1, jas_matind_t r)$/;"	f
jas_matrix_bindsub	src/Terrain/jasper/base/jas_seq.c	/^int jas_matrix_bindsub(jas_matrix_t *mat0, jas_matrix_t *mat1,$/;"	f
jas_matrix_clip	src/Terrain/jasper/base/jas_seq.c	/^void jas_matrix_clip(jas_matrix_t *matrix, jas_seqent_t minval,$/;"	f
jas_matrix_cmp	src/Terrain/jasper/base/jas_seq.c	/^int jas_matrix_cmp(jas_matrix_t *mat0, jas_matrix_t *mat1)$/;"	f
jas_matrix_copy	src/Terrain/jasper/base/jas_seq.c	/^jas_matrix_t *jas_matrix_copy(jas_matrix_t *x)$/;"	f
jas_matrix_create	src/Terrain/jasper/base/jas_seq.c	/^jas_matrix_t *jas_matrix_create(jas_matind_t numrows, jas_matind_t numcols)$/;"	f
jas_matrix_destroy	src/Terrain/jasper/base/jas_seq.c	/^void jas_matrix_destroy(jas_matrix_t *matrix)$/;"	f
jas_matrix_divpow2	src/Terrain/jasper/base/jas_seq.c	/^void jas_matrix_divpow2(jas_matrix_t *matrix, unsigned n)$/;"	f
jas_matrix_empty	src/Terrain/jasper/jas_seq.h	/^static inline bool jas_matrix_empty(const jas_matrix_t *matrix)$/;"	f
jas_matrix_get	src/Terrain/jasper/jas_seq.h	/^static inline jas_seqent_t jas_matrix_get(const jas_matrix_t *matrix, jas_matind_t i, jas_matind_t j)$/;"	f
jas_matrix_getref	src/Terrain/jasper/jas_seq.h	/^static inline jas_seqent_t *jas_matrix_getref(const jas_matrix_t *matrix, jas_matind_t i, jas_matind_t j)$/;"	f
jas_matrix_getv	src/Terrain/jasper/jas_seq.h	/^static inline jas_seqent_t jas_matrix_getv(const jas_matrix_t *matrix, jas_matind_t i)$/;"	f
jas_matrix_getvref	src/Terrain/jasper/jas_seq.h	/^static inline jas_seqent_t *jas_matrix_getvref(const jas_matrix_t *matrix, jas_matind_t i)$/;"	f
jas_matrix_numcols	src/Terrain/jasper/jas_seq.h	/^static inline jas_matind_t jas_matrix_numcols(const jas_matrix_t *matrix)$/;"	f
jas_matrix_numrows	src/Terrain/jasper/jas_seq.h	/^static inline jas_matind_t jas_matrix_numrows(const jas_matrix_t *matrix)$/;"	f
jas_matrix_resize	src/Terrain/jasper/base/jas_seq.c	/^int jas_matrix_resize(jas_matrix_t *matrix, jas_matind_t numrows,$/;"	f
jas_matrix_rowstep	src/Terrain/jasper/jas_seq.h	/^static inline size_t jas_matrix_rowstep(const jas_matrix_t *matrix)$/;"	f
jas_matrix_set	src/Terrain/jasper/jas_seq.h	/^static inline void jas_matrix_set(jas_matrix_t *matrix, jas_matind_t i, jas_matind_t j, jas_seqent_t v)$/;"	f
jas_matrix_setall	src/Terrain/jasper/base/jas_seq.c	/^void jas_matrix_setall(jas_matrix_t *matrix, jas_seqent_t val)$/;"	f
jas_matrix_setv	src/Terrain/jasper/jas_seq.h	/^static inline void jas_matrix_setv(jas_matrix_t *matrix, jas_matind_t i, jas_seqent_t v)$/;"	f
jas_matrix_size	src/Terrain/jasper/jas_seq.h	/^static inline jas_matind_t jas_matrix_size(const jas_matrix_t *matrix)$/;"	f
jas_matrix_step	src/Terrain/jasper/jas_seq.h	/^static inline size_t jas_matrix_step(const jas_matrix_t *matrix)$/;"	f
jas_matrix_t	src/Terrain/jasper/jas_seq.h	/^} jas_matrix_t;$/;"	t	typeref:struct:jas_matrix
jas_max_mem	src/Terrain/jasper/base/jas_malloc.c	/^static size_t jas_max_mem = JAS_DEFAULT_MAX_MEM_USAGE;$/;"	v	file:
jas_mb_get_data	src/Terrain/jasper/base/jas_malloc.c	/^void *jas_mb_get_data(jas_mb_t *mb)$/;"	f
jas_mb_t	src/Terrain/jasper/base/jas_malloc.c	/^} jas_mb_t;$/;"	t	typeref:struct:__anon157	file:
jas_mem	src/Terrain/jasper/base/jas_malloc.c	/^static size_t jas_mem = 0;$/;"	v	file:
jas_memdump	src/Terrain/jasper/jas_debug.h	115;"	d
jas_realloc	src/Terrain/jasper/base/jas_malloc.c	/^void *jas_realloc(void *ptr, size_t size)$/;"	f
jas_realloc2	src/Terrain/jasper/base/jas_malloc.c	/^void *jas_realloc2(void *ptr, size_t num_elements, size_t element_size)$/;"	f
jas_rtc_MarkerSegment	src/Terrain/jasper/jpc/jpc_rtc.cpp	/^  void jas_rtc_MarkerSegment(void *_loader, long file_offset, unsigned id) {$/;"	f
jas_rtc_ProcessComment	src/Terrain/jasper/jpc/jpc_rtc.cpp	/^  void jas_rtc_ProcessComment(void *_loader, const char *data, unsigned size) {$/;"	f
jas_rtc_PutTileData	src/Terrain/jasper/jpc/jpc_rtc.cpp	/^  void jas_rtc_PutTileData(void *_loader,$/;"	f
jas_rtc_SetSize	src/Terrain/jasper/jpc/jpc_rtc.cpp	/^  void jas_rtc_SetSize(void *_loader,$/;"	f
jas_rtc_SkipMarkerSegment	src/Terrain/jasper/jpc/jpc_rtc.cpp	/^  long jas_rtc_SkipMarkerSegment(void *_loader, long file_offset) {$/;"	f
jas_rtc_StartTile	src/Terrain/jasper/jpc/jpc_rtc.cpp	/^  void jas_rtc_StartTile(void *_loader, unsigned index) {$/;"	f
jas_safe_intfast32_add	src/Terrain/jasper/jas_math.h	/^inline static bool jas_safe_intfast32_add(int_fast32_t x, int_fast32_t y,$/;"	f
jas_safe_intfast32_mul	src/Terrain/jasper/jas_math.h	/^inline static bool jas_safe_intfast32_mul(int_fast32_t x, int_fast32_t y,$/;"	f
jas_safe_intfast32_mul3	src/Terrain/jasper/jas_math.h	/^inline static bool jas_safe_intfast32_mul3(int_fast32_t a, int_fast32_t b,$/;"	f
jas_safe_size_add	src/Terrain/jasper/jas_math.h	/^inline static bool jas_safe_size_add(size_t x, size_t y, size_t *result)$/;"	f
jas_safe_size_mul	src/Terrain/jasper/jas_math.h	/^inline static bool jas_safe_size_mul(size_t x, size_t y, size_t *result)$/;"	f
jas_safe_size_mul3	src/Terrain/jasper/jas_math.h	/^inline static bool jas_safe_size_mul3(size_t a, size_t b, size_t c,$/;"	f
jas_safe_size_sub	src/Terrain/jasper/jas_math.h	/^inline static bool jas_safe_size_sub(size_t x, size_t y, size_t *result)$/;"	f
jas_seq2d_bindsub	src/Terrain/jasper/base/jas_seq.c	/^int jas_seq2d_bindsub(jas_matrix_t *s, jas_matrix_t *s1, jas_matind_t xstart,$/;"	f
jas_seq2d_copy	src/Terrain/jasper/base/jas_seq.c	/^jas_seq2d_t *jas_seq2d_copy(jas_seq2d_t *x)$/;"	f
jas_seq2d_create	src/Terrain/jasper/base/jas_seq.c	/^jas_matrix_t *jas_seq2d_create(jas_matind_t xstart, jas_matind_t ystart,$/;"	f
jas_seq2d_destroy	src/Terrain/jasper/jas_seq.h	/^static inline void jas_seq2d_destroy(jas_seq2d_t *s)$/;"	f
jas_seq2d_empty	src/Terrain/jasper/jas_seq.h	/^static inline bool jas_seq2d_empty(const jas_seq2d_t *s)$/;"	f
jas_seq2d_get	src/Terrain/jasper/jas_seq.h	/^static inline jas_seqent_t jas_seq2d_get(const jas_seq2d_t *s, jas_matind_t x, jas_matind_t y)$/;"	f
jas_seq2d_getref	src/Terrain/jasper/jas_seq.h	/^static inline jas_seqent_t *jas_seq2d_getref(const jas_seq2d_t *s, jas_matind_t x, jas_matind_t y)$/;"	f
jas_seq2d_height	src/Terrain/jasper/jas_seq.h	/^static inline unsigned jas_seq2d_height(const jas_seq2d_t *s)$/;"	f
jas_seq2d_rowstep	src/Terrain/jasper/jas_seq.h	/^static inline size_t jas_seq2d_rowstep(const jas_seq2d_t *s)$/;"	f
jas_seq2d_setshift	src/Terrain/jasper/jas_seq.h	/^static inline void jas_seq2d_setshift(jas_seq2d_t *s, jas_matind_t x, jas_matind_t y)$/;"	f
jas_seq2d_size	src/Terrain/jasper/jas_seq.h	/^static inline jas_matind_t jas_seq2d_size(const jas_seq2d_t *s)$/;"	f
jas_seq2d_t	src/Terrain/jasper/jas_seq.h	/^typedef jas_matrix_t jas_seq2d_t;$/;"	t
jas_seq2d_width	src/Terrain/jasper/jas_seq.h	/^static inline unsigned jas_seq2d_width(const jas_seq2d_t *s)$/;"	f
jas_seq2d_xend	src/Terrain/jasper/jas_seq.h	/^static inline jas_matind_t jas_seq2d_xend(const jas_seq2d_t *s)$/;"	f
jas_seq2d_xstart	src/Terrain/jasper/jas_seq.h	/^static inline jas_matind_t jas_seq2d_xstart(const jas_seq2d_t *s)$/;"	f
jas_seq2d_yend	src/Terrain/jasper/jas_seq.h	/^static inline jas_matind_t jas_seq2d_yend(const jas_seq2d_t *s)$/;"	f
jas_seq2d_ystart	src/Terrain/jasper/jas_seq.h	/^static inline jas_matind_t jas_seq2d_ystart(const jas_seq2d_t *s)$/;"	f
jas_seq_create	src/Terrain/jasper/jas_seq.h	/^static inline jas_seq_t *jas_seq_create(jas_matind_t start, jas_matind_t end)$/;"	f
jas_seq_destroy	src/Terrain/jasper/jas_seq.h	/^static inline void jas_seq_destroy(jas_seq_t *seq)$/;"	f
jas_seq_end	src/Terrain/jasper/jas_seq.h	/^static inline jas_matind_t jas_seq_end(const jas_seq_t *seq)$/;"	f
jas_seq_get	src/Terrain/jasper/jas_seq.h	/^static inline jas_seqent_t jas_seq_get(const jas_seq_t *seq, jas_matind_t i)$/;"	f
jas_seq_getref	src/Terrain/jasper/jas_seq.h	/^static inline jas_seqent_t *jas_seq_getref(const jas_seq_t *seq, jas_matind_t i)$/;"	f
jas_seq_set	src/Terrain/jasper/jas_seq.h	/^static inline void jas_seq_set(jas_seq_t *seq, jas_matind_t i, jas_seqent_t v)$/;"	f
jas_seq_start	src/Terrain/jasper/jas_seq.h	/^static inline jas_matind_t jas_seq_start(const jas_seq_t *seq)$/;"	f
jas_seq_t	src/Terrain/jasper/jas_seq.h	/^typedef jas_matrix_t jas_seq_t;$/;"	t
jas_seqent_asl	src/Terrain/jasper/jas_seq.h	/^static inline jas_seqent_t jas_seqent_asl(jas_seqent_t x, unsigned n)$/;"	f
jas_seqent_asr	src/Terrain/jasper/jas_seq.h	/^static inline jas_seqent_t jas_seqent_asr(jas_seqent_t x, unsigned n)$/;"	f
jas_seqent_t	src/Terrain/jasper/jas_seq.h	/^typedef int_fast32_t jas_seqent_t;$/;"	t
jas_seqent_t	src/Terrain/jasper/jas_seq.h	/^typedef int_least32_t jas_seqent_t;$/;"	t
jas_set_max_mem_usage	src/Terrain/jasper/base/jas_malloc.c	/^void jas_set_max_mem_usage(size_t max_mem)$/;"	f
jas_stream_clearerr	src/Terrain/jasper/jas_stream.h	478;"	d
jas_stream_close	src/Terrain/jasper/base/jas_stream.c	/^int jas_stream_close(jas_stream_t *stream)$/;"	f
jas_stream_copy	src/Terrain/jasper/base/jas_stream.c	/^int jas_stream_copy(jas_stream_t *out, jas_stream_t *in, int n)$/;"	f
jas_stream_create	src/Terrain/jasper/base/jas_stream.c	/^jas_stream_t *jas_stream_create(void)$/;"	f
jas_stream_destroy	src/Terrain/jasper/base/jas_stream.c	/^static void jas_stream_destroy(jas_stream_t *stream)$/;"	f	file:
jas_stream_eof	src/Terrain/jasper/jas_stream.h	454;"	d
jas_stream_error	src/Terrain/jasper/jas_stream.h	467;"	d
jas_stream_fdopen	src/Terrain/jasper/base/jas_stream.c	/^jas_stream_t *jas_stream_fdopen(int fd, const char *mode)$/;"	f
jas_stream_fileobj_t	src/Terrain/jasper/jas_stream.h	/^} jas_stream_fileobj_t;$/;"	t	typeref:struct:__anon98
jas_stream_fileops	src/Terrain/jasper/base/jas_stream.c	/^static const jas_stream_ops_t jas_stream_fileops = {$/;"	v	file:
jas_stream_fillbuf	src/Terrain/jasper/base/jas_stream.c	/^int jas_stream_fillbuf(jas_stream_t *stream, int getflag)$/;"	f
jas_stream_flush	src/Terrain/jasper/base/jas_stream.c	/^int jas_stream_flush(jas_stream_t *stream)$/;"	f
jas_stream_flushbuf	src/Terrain/jasper/base/jas_stream.c	/^int jas_stream_flushbuf(jas_stream_t *stream, int c)$/;"	f
jas_stream_fopen	src/Terrain/jasper/base/jas_stream.c	/^jas_stream_t *jas_stream_fopen(const char *filename, const char *mode)$/;"	f
jas_stream_freopen	src/Terrain/jasper/base/jas_stream.c	/^jas_stream_t *jas_stream_freopen(const char *path, const char *mode, FILE *fp)$/;"	f
jas_stream_getc	src/Terrain/jasper/jas_stream.h	547;"	d
jas_stream_getc	src/Terrain/jasper/jas_stream.h	549;"	d
jas_stream_getc2	src/Terrain/jasper/jas_stream.h	/^static inline int jas_stream_getc2(jas_stream_t *stream)$/;"	f
jas_stream_getc_func	src/Terrain/jasper/base/jas_stream.c	/^int jas_stream_getc_func(jas_stream_t *stream)$/;"	f
jas_stream_getc_macro	src/Terrain/jasper/jas_stream.h	/^static inline int jas_stream_getc_macro(jas_stream_t *stream)$/;"	f
jas_stream_getrwcount	src/Terrain/jasper/jas_stream.h	520;"	d
jas_stream_getrwlimit	src/Terrain/jasper/jas_stream.h	491;"	d
jas_stream_gets	src/Terrain/jasper/base/jas_stream.c	/^char *jas_stream_gets(jas_stream_t *stream, char *buf, int bufsize)$/;"	f
jas_stream_gobble	src/Terrain/jasper/base/jas_stream.c	/^int jas_stream_gobble(jas_stream_t *stream, int n)$/;"	f
jas_stream_initbuf	src/Terrain/jasper/base/jas_stream.c	/^void jas_stream_initbuf(jas_stream_t *stream, int bufmode, char *buf,$/;"	f
jas_stream_is_input_buffer_empty	src/Terrain/jasper/base/jas_stream.c	/^static bool jas_stream_is_input_buffer_empty(const jas_stream_t *stream)$/;"	f	file:
jas_stream_is_unbuffered	src/Terrain/jasper/base/jas_stream.c	/^static bool jas_stream_is_unbuffered(const jas_stream_t *stream)$/;"	f	file:
jas_stream_isseekable	src/Terrain/jasper/base/jas_stream.c	/^int jas_stream_isseekable(jas_stream_t *stream)$/;"	f
jas_stream_length	src/Terrain/jasper/base/jas_stream.c	/^long jas_stream_length(jas_stream_t *stream)$/;"	f
jas_stream_memobj_t	src/Terrain/jasper/jas_stream.h	/^} jas_stream_memobj_t;$/;"	t	typeref:struct:__anon99
jas_stream_memopen	src/Terrain/jasper/base/jas_stream.c	/^jas_stream_t *jas_stream_memopen(char *buf, int bufsize)$/;"	f
jas_stream_memopen2	src/Terrain/jasper/base/jas_stream.c	/^jas_stream_t *jas_stream_memopen2(char *buf, size_t bufsize)$/;"	f
jas_stream_memops	src/Terrain/jasper/base/jas_stream.c	/^static const jas_stream_ops_t jas_stream_memops = {$/;"	v	file:
jas_stream_obj_t	src/Terrain/jasper/jas_stream.h	/^typedef void jas_stream_obj_t;$/;"	t
jas_stream_ops_t	src/Terrain/jasper/jas_stream.h	/^} jas_stream_ops_t;$/;"	t	typeref:struct:__anon96
jas_stream_pad	src/Terrain/jasper/base/jas_stream.c	/^int jas_stream_pad(jas_stream_t *stream, int n, int c)$/;"	f
jas_stream_peek	src/Terrain/jasper/base/jas_stream.c	/^unsigned jas_stream_peek(jas_stream_t *stream, void *buf, size_t cnt)$/;"	f
jas_stream_peekc	src/Terrain/jasper/jas_stream.h	747;"	d
jas_stream_printf	src/Terrain/jasper/base/jas_stream.c	/^int jas_stream_printf(jas_stream_t *stream, const char *fmt, ...)$/;"	f
jas_stream_putc	src/Terrain/jasper/jas_stream.h	558;"	d
jas_stream_putc	src/Terrain/jasper/jas_stream.h	560;"	d
jas_stream_putc2	src/Terrain/jasper/jas_stream.h	/^static inline int jas_stream_putc2(jas_stream_t *stream, jas_uchar c)$/;"	f
jas_stream_putc_func	src/Terrain/jasper/base/jas_stream.c	/^int jas_stream_putc_func(jas_stream_t *stream, int c)$/;"	f
jas_stream_putc_macro	src/Terrain/jasper/jas_stream.h	/^static inline int jas_stream_putc_macro(jas_stream_t *stream, jas_uchar c)$/;"	f
jas_stream_puts	src/Terrain/jasper/base/jas_stream.c	/^int jas_stream_puts(jas_stream_t *stream, const char *s)$/;"	f
jas_stream_read	src/Terrain/jasper/base/jas_stream.c	/^unsigned jas_stream_read(jas_stream_t *stream, void *buf, unsigned cnt)$/;"	f
jas_stream_rewind	src/Terrain/jasper/base/jas_stream.c	/^int jas_stream_rewind(jas_stream_t *stream)$/;"	f
jas_stream_seek	src/Terrain/jasper/base/jas_stream.c	/^long jas_stream_seek(jas_stream_t *stream, long offset, int origin)$/;"	f
jas_stream_setrwcount	src/Terrain/jasper/base/jas_stream.c	/^long jas_stream_setrwcount(jas_stream_t *stream, long rwcnt)$/;"	f
jas_stream_setrwlimit	src/Terrain/jasper/base/jas_stream.c	/^long jas_stream_setrwlimit(jas_stream_t *stream, long rwlimit)$/;"	f
jas_stream_sfileops	src/Terrain/jasper/base/jas_stream.c	/^static const jas_stream_ops_t jas_stream_sfileops = {$/;"	v	file:
jas_stream_t	src/Terrain/jasper/jas_stream.h	/^} jas_stream_t;$/;"	t	typeref:struct:__anon97
jas_stream_tell	src/Terrain/jasper/base/jas_stream.c	/^long jas_stream_tell(jas_stream_t *stream)$/;"	f
jas_stream_tmpfile	src/Terrain/jasper/base/jas_stream.c	/^jas_stream_t *jas_stream_tmpfile()$/;"	f
jas_stream_ungetc	src/Terrain/jasper/base/jas_stream.c	/^int jas_stream_ungetc(jas_stream_t *stream, int c)$/;"	f
jas_stream_write	src/Terrain/jasper/base/jas_stream.c	/^unsigned jas_stream_write(jas_stream_t *stream, const void *buf, unsigned cnt)$/;"	f
jas_strtoopenmode	src/Terrain/jasper/base/jas_stream.c	/^static int jas_strtoopenmode(const char *s)$/;"	f	file:
jas_uchar	src/Terrain/jasper/jas_types.h	83;"	d
jas_uint	src/Terrain/jasper/jas_types.h	84;"	d
jas_ulong	src/Terrain/jasper/jas_types.h	85;"	d
jas_ulonglong	src/Terrain/jasper/jas_types.h	87;"	d
jas_zzip_close	src/Terrain/ZzipStream.cpp	/^jas_zzip_close(jas_stream_obj_t *obj)$/;"	f	file:
jas_zzip_read	src/Terrain/ZzipStream.cpp	/^jas_zzip_read(jas_stream_obj_t *obj, char *buf, unsigned cnt)$/;"	f	file:
jas_zzip_seek	src/Terrain/ZzipStream.cpp	/^jas_zzip_seek(jas_stream_obj_t *obj, long offset, int origin)$/;"	f	file:
jas_zzip_write	src/Terrain/ZzipStream.cpp	/^jas_zzip_write(jas_stream_obj_t *obj, const char *buf, unsigned cnt)$/;"	f	file:
job	src/Job/Async.hpp	/^  Job *job;$/;"	m	class:final
job	src/Job/Thread.hpp	/^  Job &job;$/;"	m	class:JobThread
joinObj	src/Topography/shapelib/mapserver.h	/^  } joinObj;$/;"	t	typeref:struct:__anon31
joininfo	src/Topography/shapelib/mapserver.h	/^    void *joininfo; \/* vendor specific (i.e. XBase, MySQL, etc.) stuff to allow for persistant access *\/$/;"	m	struct:__anon31
joins	src/Topography/shapelib/mapserver.h	/^    joinObj *joins;$/;"	m	struct:layerObj
jp	src/Terrain/jasper/jp2/jp2_cod.h	/^		jp2_jp_t jp;$/;"	m	union:__anon94::__anon95
jp2_box_create	src/Terrain/jasper/jp2/jp2_cod.c	/^jp2_box_t *jp2_box_create(int type)$/;"	f
jp2_box_create0	src/Terrain/jasper/jp2/jp2_cod.c	/^static jp2_box_t *jp2_box_create0(void)$/;"	f	file:
jp2_box_destroy	src/Terrain/jasper/jp2/jp2_cod.c	/^void jp2_box_destroy(jp2_box_t *box)$/;"	f
jp2_box_dump	src/Terrain/jasper/jp2/jp2_cod.c	/^static void jp2_box_dump(const jp2_box_t *box, FILE *out)$/;"	f	file:
jp2_box_dump	src/Terrain/jasper/jp2/jp2_cod.c	119;"	d	file:
jp2_box_get	src/Terrain/jasper/jp2/jp2_cod.c	/^jp2_box_t *jp2_box_get(jas_stream_t *in)$/;"	f
jp2_box_put	src/Terrain/jasper/jp2/jp2_cod.c	/^int jp2_box_put(jp2_box_t *box, jas_stream_t *out)$/;"	f
jp2_box_t	src/Terrain/jasper/jp2/jp2_cod.h	/^} jp2_box_t;$/;"	t	typeref:struct:__anon94
jp2_boxinfo_s	src/Terrain/jasper/jp2/jp2_cod.h	/^typedef struct jp2_boxinfo_s {$/;"	s
jp2_boxinfo_t	src/Terrain/jasper/jp2/jp2_cod.h	/^} jp2_boxinfo_t;$/;"	t	typeref:struct:jp2_boxinfo_s
jp2_boxinfo_unk	src/Terrain/jasper/jp2/jp2_cod.c	/^static const jp2_boxinfo_t jp2_boxinfo_unk = {$/;"	v	file:
jp2_boxinfolookup	src/Terrain/jasper/jp2/jp2_cod.c	/^static const jp2_boxinfo_t *jp2_boxinfolookup(int type)$/;"	f	file:
jp2_boxinfos	src/Terrain/jasper/jp2/jp2_cod.c	/^static const jp2_boxinfo_t jp2_boxinfos[] = {$/;"	v	file:
jp2_boxops_s	src/Terrain/jasper/jp2/jp2_cod.h	/^typedef struct jp2_boxops_s {$/;"	s
jp2_boxops_t	src/Terrain/jasper/jp2/jp2_cod.h	/^} jp2_boxops_t;$/;"	t	typeref:struct:jp2_boxops_s
jp2_bpcc_destroy	src/Terrain/jasper/jp2/jp2_cod.c	/^static void jp2_bpcc_destroy(jp2_box_t *box)$/;"	f	file:
jp2_bpcc_getdata	src/Terrain/jasper/jp2/jp2_cod.c	/^static int jp2_bpcc_getdata(jp2_box_t *box, jas_stream_t *in)$/;"	f	file:
jp2_bpcc_putdata	src/Terrain/jasper/jp2/jp2_cod.c	/^static int jp2_bpcc_putdata(const jp2_box_t *box, jas_stream_t *out)$/;"	f	file:
jp2_bpcc_t	src/Terrain/jasper/jp2/jp2_cod.h	/^} jp2_bpcc_t;$/;"	t	typeref:struct:__anon87
jp2_cdef_destroy	src/Terrain/jasper/jp2/jp2_cod.c	/^static void jp2_cdef_destroy(jp2_box_t *box)$/;"	f	file:
jp2_cdef_getdata	src/Terrain/jasper/jp2/jp2_cod.c	/^static int jp2_cdef_getdata(jp2_box_t *box, jas_stream_t *in)$/;"	f	file:
jp2_cdef_lookup	src/Terrain/jasper/jp2/jp2_cod.c	/^const jp2_cdefchan_t *jp2_cdef_lookup(jp2_cdef_t *cdef, int channo)$/;"	f
jp2_cdef_putdata	src/Terrain/jasper/jp2/jp2_cod.c	/^static int jp2_cdef_putdata(const jp2_box_t *box, jas_stream_t *out)$/;"	f	file:
jp2_cdef_t	src/Terrain/jasper/jp2/jp2_cod.h	/^} jp2_cdef_t;$/;"	t	typeref:struct:__anon91
jp2_cdefchan_t	src/Terrain/jasper/jp2/jp2_cod.h	/^} jp2_cdefchan_t;$/;"	t	typeref:struct:__anon90
jp2_cmap_destroy	src/Terrain/jasper/jp2/jp2_cod.c	/^static void jp2_cmap_destroy(jp2_box_t *box)$/;"	f	file:
jp2_cmap_getdata	src/Terrain/jasper/jp2/jp2_cod.c	/^static int jp2_cmap_getdata(jp2_box_t *box, jas_stream_t *in)$/;"	f	file:
jp2_cmap_putdata	src/Terrain/jasper/jp2/jp2_cod.c	/^static int jp2_cmap_putdata(const jp2_box_t *box, jas_stream_t *out)$/;"	f	file:
jp2_cmap_t	src/Terrain/jasper/jp2/jp2_cod.h	/^} jp2_cmap_t;$/;"	t	typeref:struct:__anon93
jp2_cmapent_t	src/Terrain/jasper/jp2/jp2_cod.h	/^} jp2_cmapent_t;$/;"	t	typeref:struct:__anon92
jp2_colr_destroy	src/Terrain/jasper/jp2/jp2_cod.c	/^static void jp2_colr_destroy(jp2_box_t *box)$/;"	f	file:
jp2_colr_getdata	src/Terrain/jasper/jp2/jp2_cod.c	/^static int jp2_colr_getdata(jp2_box_t *box, jas_stream_t *in)$/;"	f	file:
jp2_colr_putdata	src/Terrain/jasper/jp2/jp2_cod.c	/^static int jp2_colr_putdata(const jp2_box_t *box, jas_stream_t *out)$/;"	f	file:
jp2_colr_t	src/Terrain/jasper/jp2/jp2_cod.h	/^} jp2_colr_t;$/;"	t	typeref:struct:__anon88
jp2_ftyp_getdata	src/Terrain/jasper/jp2/jp2_cod.c	/^static int jp2_ftyp_getdata(jp2_box_t *box, jas_stream_t *in)$/;"	f	file:
jp2_ftyp_putdata	src/Terrain/jasper/jp2/jp2_cod.c	/^static int jp2_ftyp_putdata(const jp2_box_t *box, jas_stream_t *out)$/;"	f	file:
jp2_ftyp_t	src/Terrain/jasper/jp2/jp2_cod.h	/^} jp2_ftyp_t;$/;"	t	typeref:struct:__anon85
jp2_getint	src/Terrain/jasper/jp2/jp2_cod.c	/^static int jp2_getint(jas_stream_t *in, int s, int n, int_fast32_t *val)$/;"	f	file:
jp2_getuint16	src/Terrain/jasper/jp2/jp2_cod.c	/^static int jp2_getuint16(jas_stream_t *in, uint_fast16_t *val)$/;"	f	file:
jp2_getuint32	src/Terrain/jasper/jp2/jp2_cod.c	/^static int jp2_getuint32(jas_stream_t *in, uint_fast32_t *val)$/;"	f	file:
jp2_getuint64	src/Terrain/jasper/jp2/jp2_cod.c	/^static int jp2_getuint64(jas_stream_t *in, uint_fast64_t *val)$/;"	f	file:
jp2_getuint8	src/Terrain/jasper/jp2/jp2_cod.c	/^static int jp2_getuint8(jas_stream_t *in, uint_fast8_t *val)$/;"	f	file:
jp2_ihdr_getdata	src/Terrain/jasper/jp2/jp2_cod.c	/^static int jp2_ihdr_getdata(jp2_box_t *box, jas_stream_t *in)$/;"	f	file:
jp2_ihdr_putdata	src/Terrain/jasper/jp2/jp2_cod.c	/^static int jp2_ihdr_putdata(const jp2_box_t *box, jas_stream_t *out)$/;"	f	file:
jp2_ihdr_t	src/Terrain/jasper/jp2/jp2_cod.h	/^} jp2_ihdr_t;$/;"	t	typeref:struct:__anon86
jp2_jp_getdata	src/Terrain/jasper/jp2/jp2_cod.c	/^static int jp2_jp_getdata(jp2_box_t *box, jas_stream_t *in)$/;"	f	file:
jp2_jp_putdata	src/Terrain/jasper/jp2/jp2_cod.c	/^static int jp2_jp_putdata(const jp2_box_t *box, jas_stream_t *out)$/;"	f	file:
jp2_jp_t	src/Terrain/jasper/jp2/jp2_cod.h	/^} jp2_jp_t;$/;"	t	typeref:struct:__anon84
jp2_pclr_destroy	src/Terrain/jasper/jp2/jp2_cod.c	/^static void jp2_pclr_destroy(jp2_box_t *box)$/;"	f	file:
jp2_pclr_dumpdata	src/Terrain/jasper/jp2/jp2_cod.c	/^static void jp2_pclr_dumpdata(const jp2_box_t *box, FILE *out)$/;"	f	file:
jp2_pclr_getdata	src/Terrain/jasper/jp2/jp2_cod.c	/^static int jp2_pclr_getdata(jp2_box_t *box, jas_stream_t *in)$/;"	f	file:
jp2_pclr_putdata	src/Terrain/jasper/jp2/jp2_cod.c	/^static int jp2_pclr_putdata(const jp2_box_t *box, jas_stream_t *out)$/;"	f	file:
jp2_pclr_t	src/Terrain/jasper/jp2/jp2_cod.h	/^} jp2_pclr_t;$/;"	t	typeref:struct:__anon89
jp2_putuint16	src/Terrain/jasper/jp2/jp2_cod.c	/^static int jp2_putuint16(jas_stream_t *out, uint_fast16_t val)$/;"	f	file:
jp2_putuint32	src/Terrain/jasper/jp2/jp2_cod.c	/^static int jp2_putuint32(jas_stream_t *out, uint_fast32_t val)$/;"	f	file:
jp2_putuint64	src/Terrain/jasper/jp2/jp2_cod.c	/^static int jp2_putuint64(jas_stream_t *out, uint_fast64_t val)$/;"	f	file:
jp2_putuint8	src/Terrain/jasper/jp2/jp2_cod.c	/^static int jp2_putuint8(jas_stream_t *out, uint_fast8_t val)$/;"	f	file:
jpc_bitstream_align	src/Terrain/jasper/jpc/jpc_bs.c	/^int jpc_bitstream_align(jpc_bitstream_t *bitstream)$/;"	f
jpc_bitstream_alloc	src/Terrain/jasper/jpc/jpc_bs.c	/^static jpc_bitstream_t *jpc_bitstream_alloc()$/;"	f	file:
jpc_bitstream_close	src/Terrain/jasper/jpc/jpc_bs.c	/^int jpc_bitstream_close(jpc_bitstream_t *bitstream)$/;"	f
jpc_bitstream_eof	src/Terrain/jasper/jpc/jpc_bs.h	204;"	d
jpc_bitstream_fillbuf	src/Terrain/jasper/jpc/jpc_bs.c	/^int jpc_bitstream_fillbuf(jpc_bitstream_t *bitstream)$/;"	f
jpc_bitstream_getbit	src/Terrain/jasper/jpc/jpc_bs.h	151;"	d
jpc_bitstream_getbit	src/Terrain/jasper/jpc/jpc_bs.h	154;"	d
jpc_bitstream_getbit_func	src/Terrain/jasper/jpc/jpc_bs.c	/^int jpc_bitstream_getbit_func(jpc_bitstream_t *bitstream)$/;"	f
jpc_bitstream_getbit_macro	src/Terrain/jasper/jpc/jpc_bs.h	220;"	d
jpc_bitstream_getbits	src/Terrain/jasper/jpc/jpc_bs.c	/^long jpc_bitstream_getbits(jpc_bitstream_t *bitstream, int n)$/;"	f
jpc_bitstream_inalign	src/Terrain/jasper/jpc/jpc_bs.c	/^int jpc_bitstream_inalign(jpc_bitstream_t *bitstream, int fillmask,$/;"	f
jpc_bitstream_needalign	src/Terrain/jasper/jpc/jpc_bs.c	/^int jpc_bitstream_needalign(const jpc_bitstream_t *bitstream)$/;"	f
jpc_bitstream_outalign	src/Terrain/jasper/jpc/jpc_bs.c	/^int jpc_bitstream_outalign(jpc_bitstream_t *bitstream, int filldata)$/;"	f
jpc_bitstream_pending	src/Terrain/jasper/jpc/jpc_bs.c	/^int jpc_bitstream_pending(const jpc_bitstream_t *bitstream)$/;"	f
jpc_bitstream_putbit	src/Terrain/jasper/jpc/jpc_bs.h	160;"	d
jpc_bitstream_putbit	src/Terrain/jasper/jpc/jpc_bs.h	163;"	d
jpc_bitstream_putbit_func	src/Terrain/jasper/jpc/jpc_bs.c	/^int jpc_bitstream_putbit_func(jpc_bitstream_t *bitstream, int b)$/;"	f
jpc_bitstream_putbit_macro	src/Terrain/jasper/jpc/jpc_bs.h	226;"	d
jpc_bitstream_putbits	src/Terrain/jasper/jpc/jpc_bs.c	/^int jpc_bitstream_putbits(jpc_bitstream_t *bitstream, int n, long v)$/;"	f
jpc_bitstream_sopen	src/Terrain/jasper/jpc/jpc_bs.c	/^jpc_bitstream_t *jpc_bitstream_sopen(jas_stream_t *stream, const char *mode)$/;"	f
jpc_bitstream_t	src/Terrain/jasper/jpc/jpc_bs.h	/^} jpc_bitstream_t;$/;"	t	typeref:struct:__anon106
jpc_calcabsstepsize	src/Terrain/jasper/jpc/jpc_dec.c	/^static jpc_fix_t jpc_calcabsstepsize(unsigned stepsize, unsigned numbits)$/;"	f	file:
jpc_clnpass_step	src/Terrain/jasper/jpc/jpc_t1dec.c	661;"	d	file:
jpc_coc_destroyparms	src/Terrain/jasper/jpc/jpc_cs.c	/^static void jpc_coc_destroyparms(jpc_ms_t *ms)$/;"	f	file:
jpc_coc_getparms	src/Terrain/jasper/jpc/jpc_cs.c	/^static int jpc_coc_getparms(jpc_ms_t *ms, jpc_cstate_t *cstate, jas_stream_t *in)$/;"	f	file:
jpc_coc_putparms	src/Terrain/jasper/jpc/jpc_cs.c	/^static int jpc_coc_putparms(jpc_ms_t *ms, jpc_cstate_t *cstate, jas_stream_t *out)$/;"	f	file:
jpc_coc_t	src/Terrain/jasper/jpc/jpc_cs.h	/^} jpc_coc_t;$/;"	t	typeref:struct:__anon141
jpc_cod_destroyparms	src/Terrain/jasper/jpc/jpc_cs.c	/^static void jpc_cod_destroyparms(jpc_ms_t *ms)$/;"	f	file:
jpc_cod_dumpparms	src/Terrain/jasper/jpc/jpc_cs.c	/^static int jpc_cod_dumpparms(jpc_ms_t *ms, FILE *out)$/;"	f	file:
jpc_cod_getparms	src/Terrain/jasper/jpc/jpc_cs.c	/^static int jpc_cod_getparms(jpc_ms_t *ms, jpc_cstate_t *cstate, jas_stream_t *in)$/;"	f	file:
jpc_cod_gettsfb	src/Terrain/jasper/jpc/jpc_tsfb.c	/^jpc_tsfb_t *jpc_cod_gettsfb(unsigned qmfbid, unsigned numlvls)$/;"	f
jpc_cod_putparms	src/Terrain/jasper/jpc/jpc_cs.c	/^static int jpc_cod_putparms(jpc_ms_t *ms, jpc_cstate_t *cstate, jas_stream_t *out)$/;"	f	file:
jpc_cod_t	src/Terrain/jasper/jpc/jpc_cs.h	/^} jpc_cod_t;$/;"	t	typeref:struct:__anon140
jpc_com_destroyparms	src/Terrain/jasper/jpc/jpc_cs.c	/^static void jpc_com_destroyparms(jpc_ms_t *ms)$/;"	f	file:
jpc_com_getparms	src/Terrain/jasper/jpc/jpc_cs.c	/^static int jpc_com_getparms(jpc_ms_t *ms, jpc_cstate_t *cstate, jas_stream_t *in)$/;"	f	file:
jpc_com_putparms	src/Terrain/jasper/jpc/jpc_cs.c	/^static int jpc_com_putparms(jpc_ms_t *ms, jpc_cstate_t *cstate, jas_stream_t *out)$/;"	f	file:
jpc_com_t	src/Terrain/jasper/jpc/jpc_cs.h	/^} jpc_com_t;$/;"	t	typeref:struct:__anon150
jpc_cox_destroycompparms	src/Terrain/jasper/jpc/jpc_cs.c	/^static void jpc_cox_destroycompparms(jpc_coxcp_t *compparms)$/;"	f	file:
jpc_cox_getcompparms	src/Terrain/jasper/jpc/jpc_cs.c	/^static int jpc_cox_getcompparms(jpc_ms_t *ms, jpc_cstate_t *cstate,$/;"	f	file:
jpc_cox_putcompparms	src/Terrain/jasper/jpc/jpc_cs.c	/^static int jpc_cox_putcompparms(jpc_ms_t *ms, jpc_cstate_t *cstate,$/;"	f	file:
jpc_coxcp_t	src/Terrain/jasper/jpc/jpc_cs.h	/^} jpc_coxcp_t;$/;"	t	typeref:struct:__anon139
jpc_coxrlvl_t	src/Terrain/jasper/jpc/jpc_cs.h	/^} jpc_coxrlvl_t;$/;"	t	typeref:struct:__anon138
jpc_crg_destroyparms	src/Terrain/jasper/jpc/jpc_cs.c	/^static void jpc_crg_destroyparms(jpc_ms_t *ms)$/;"	f	file:
jpc_crg_getparms	src/Terrain/jasper/jpc/jpc_cs.c	/^static int jpc_crg_getparms(jpc_ms_t *ms, jpc_cstate_t *cstate, jas_stream_t *in)$/;"	f	file:
jpc_crg_putparms	src/Terrain/jasper/jpc/jpc_cs.c	/^static int jpc_crg_putparms(jpc_ms_t *ms, jpc_cstate_t *cstate, jas_stream_t *out)$/;"	f	file:
jpc_crg_t	src/Terrain/jasper/jpc/jpc_cs.h	/^} jpc_crg_t;$/;"	t	typeref:struct:__anon153
jpc_crgcomp_t	src/Terrain/jasper/jpc/jpc_cs.h	/^} jpc_crgcomp_t;$/;"	t	typeref:struct:__anon152
jpc_cstate_create	src/Terrain/jasper/jpc/jpc_cs.c	/^jpc_cstate_t *jpc_cstate_create()$/;"	f
jpc_cstate_destroy	src/Terrain/jasper/jpc/jpc_cs.c	/^void jpc_cstate_destroy(jpc_cstate_t *cstate)$/;"	f
jpc_cstate_t	src/Terrain/jasper/jpc/jpc_cs.h	/^} jpc_cstate_t;$/;"	t	typeref:struct:__anon134
jpc_dbltofix	src/Terrain/jasper/jpc/jpc_fix.h	/^static inline jpc_fix_t jpc_dbltofix(double x)$/;"	f
jpc_dec_band_t	src/Terrain/jasper/jpc/jpc_dec.h	/^} jpc_dec_band_t;$/;"	t	typeref:struct:__anon124
jpc_dec_cblk_t	src/Terrain/jasper/jpc/jpc_dec.h	/^} jpc_dec_cblk_t;$/;"	t	typeref:struct:__anon122
jpc_dec_ccp_t	src/Terrain/jasper/jpc/jpc_dec.h	/^} jpc_dec_ccp_t;$/;"	t	typeref:struct:__anon119
jpc_dec_cmpt_t	src/Terrain/jasper/jpc/jpc_dec.h	/^} jpc_dec_cmpt_t;$/;"	t	typeref:struct:__anon128
jpc_dec_cp_copy	src/Terrain/jasper/jpc/jpc_dec.c	/^static jpc_dec_cp_t *jpc_dec_cp_copy(const jpc_dec_cp_t *cp)$/;"	f	file:
jpc_dec_cp_create	src/Terrain/jasper/jpc/jpc_dec.c	/^static jpc_dec_cp_t *jpc_dec_cp_create(uint_fast16_t numcomps)$/;"	f	file:
jpc_dec_cp_destroy	src/Terrain/jasper/jpc/jpc_dec.c	/^static void jpc_dec_cp_destroy(jpc_dec_cp_t *cp)$/;"	f	file:
jpc_dec_cp_isvalid	src/Terrain/jasper/jpc/jpc_dec.c	/^static int jpc_dec_cp_isvalid(const jpc_dec_cp_t *cp)$/;"	f	file:
jpc_dec_cp_prepare	src/Terrain/jasper/jpc/jpc_dec.c	/^static int jpc_dec_cp_prepare(jpc_dec_cp_t *cp)$/;"	f	file:
jpc_dec_cp_resetflags	src/Terrain/jasper/jpc/jpc_dec.c	/^static void jpc_dec_cp_resetflags(jpc_dec_cp_t *cp)$/;"	f	file:
jpc_dec_cp_setfromcoc	src/Terrain/jasper/jpc/jpc_dec.c	/^static int jpc_dec_cp_setfromcoc(jpc_dec_cp_t *cp, const jpc_coc_t *coc)$/;"	f	file:
jpc_dec_cp_setfromcod	src/Terrain/jasper/jpc/jpc_dec.c	/^static int jpc_dec_cp_setfromcod(jpc_dec_cp_t *cp, const jpc_cod_t *cod)$/;"	f	file:
jpc_dec_cp_setfromcox	src/Terrain/jasper/jpc/jpc_dec.c	/^static int jpc_dec_cp_setfromcox(jpc_dec_cp_t *cp, jpc_dec_ccp_t *ccp,$/;"	f	file:
jpc_dec_cp_setfrompoc	src/Terrain/jasper/jpc/jpc_dec.c	/^static int jpc_dec_cp_setfrompoc(jpc_dec_cp_t *cp, const jpc_poc_t *poc, int reset)$/;"	f	file:
jpc_dec_cp_setfromqcc	src/Terrain/jasper/jpc/jpc_dec.c	/^static int jpc_dec_cp_setfromqcc(jpc_dec_cp_t *cp, const jpc_qcc_t *qcc)$/;"	f	file:
jpc_dec_cp_setfromqcd	src/Terrain/jasper/jpc/jpc_dec.c	/^static int jpc_dec_cp_setfromqcd(jpc_dec_cp_t *cp, const jpc_qcd_t *qcd)$/;"	f	file:
jpc_dec_cp_setfromqcx	src/Terrain/jasper/jpc/jpc_dec.c	/^static int jpc_dec_cp_setfromqcx(jpc_dec_cp_t *cp, jpc_dec_ccp_t *ccp,$/;"	f	file:
jpc_dec_cp_setfromrgn	src/Terrain/jasper/jpc/jpc_dec.c	/^static int jpc_dec_cp_setfromrgn(jpc_dec_cp_t *cp, const jpc_rgn_t *rgn)$/;"	f	file:
jpc_dec_cp_t	src/Terrain/jasper/jpc/jpc_dec.h	/^} jpc_dec_cp_t;$/;"	t	typeref:struct:__anon120
jpc_dec_create	src/Terrain/jasper/jpc/jpc_dec.c	/^jpc_dec_t *jpc_dec_create(jpc_dec_importopts_t *impopts, jas_stream_t *in)$/;"	f
jpc_dec_decode	src/Terrain/jasper/jpc/jpc_dec.c	/^int jpc_dec_decode(jpc_dec_t *dec)$/;"	f
jpc_dec_decodecblk	src/Terrain/jasper/jpc/jpc_t1dec.c	/^static int jpc_dec_decodecblk(jpc_dec_tile_t *tile, jpc_dec_tcomp_t *tcomp, jpc_dec_band_t *band,$/;"	f	file:
jpc_dec_decodecblks	src/Terrain/jasper/jpc/jpc_t1dec.c	/^int jpc_dec_decodecblks(jpc_dec_t *dec, jpc_dec_tile_t *tile)$/;"	f
jpc_dec_decodepkt	src/Terrain/jasper/jpc/jpc_t2dec.c	/^static int jpc_dec_decodepkt(jpc_dec_t *dec, jas_stream_t *pkthdrstream, jas_stream_t *in, int compno, int rlvlno,$/;"	f	file:
jpc_dec_decodepkts	src/Terrain/jasper/jpc/jpc_t2dec.c	/^int jpc_dec_decodepkts(jpc_dec_t *dec, jas_stream_t *pkthdrstream, jas_stream_t *in)$/;"	f
jpc_dec_destroy	src/Terrain/jasper/jpc/jpc_dec.c	/^void jpc_dec_destroy(jpc_dec_t *dec)$/;"	f
jpc_dec_importopts_t	src/Terrain/jasper/jpc/jpc_dec.h	/^} jpc_dec_importopts_t;$/;"	t	typeref:struct:__anon130
jpc_dec_lookahead	src/Terrain/jasper/jpc/jpc_t2dec.c	/^static long jpc_dec_lookahead(jas_stream_t *in)$/;"	f	file:
jpc_dec_mstab	src/Terrain/jasper/jpc/jpc_dec.c	/^static const jpc_dec_mstabent_t jpc_dec_mstab[] = {$/;"	v	file:
jpc_dec_mstab_lookup	src/Terrain/jasper/jpc/jpc_dec.c	/^static const jpc_dec_mstabent_t *jpc_dec_mstab_lookup(uint_fast16_t id)$/;"	f	file:
jpc_dec_mstabent_t	src/Terrain/jasper/jpc/jpc_dec.c	/^} jpc_dec_mstabent_t;$/;"	t	typeref:struct:__anon131	file:
jpc_dec_opts_create	src/Terrain/jasper/jpc/jpc_dec.c	/^static jpc_dec_importopts_t *jpc_dec_opts_create(const char *optstr)$/;"	f	file:
jpc_dec_opts_destroy	src/Terrain/jasper/jpc/jpc_dec.c	/^static void jpc_dec_opts_destroy(jpc_dec_importopts_t *opts)$/;"	f	file:
jpc_dec_pi_create	src/Terrain/jasper/jpc/jpc_t2dec.c	/^jpc_pi_t *jpc_dec_pi_create(jpc_dec_t *dec, jpc_dec_tile_t *tile)$/;"	f
jpc_dec_prc_t	src/Terrain/jasper/jpc/jpc_dec.h	/^} jpc_dec_prc_t;$/;"	t	typeref:struct:__anon123
jpc_dec_process_coc	src/Terrain/jasper/jpc/jpc_dec.c	/^static int jpc_dec_process_coc(jpc_dec_t *dec, jpc_ms_t *ms)$/;"	f	file:
jpc_dec_process_cod	src/Terrain/jasper/jpc/jpc_dec.c	/^static int jpc_dec_process_cod(jpc_dec_t *dec, jpc_ms_t *ms)$/;"	f	file:
jpc_dec_process_com	src/Terrain/jasper/jpc/jpc_dec.c	/^static int jpc_dec_process_com(jpc_dec_t *dec, jpc_ms_t *ms)$/;"	f	file:
jpc_dec_process_crg	src/Terrain/jasper/jpc/jpc_dec.c	/^static int jpc_dec_process_crg(jpc_dec_t *dec, jpc_ms_t *ms)$/;"	f	file:
jpc_dec_process_eoc	src/Terrain/jasper/jpc/jpc_dec.c	/^static int jpc_dec_process_eoc(jpc_dec_t *dec, jpc_ms_t *ms)$/;"	f	file:
jpc_dec_process_poc	src/Terrain/jasper/jpc/jpc_dec.c	/^static int jpc_dec_process_poc(jpc_dec_t *dec, jpc_ms_t *ms)$/;"	f	file:
jpc_dec_process_ppm	src/Terrain/jasper/jpc/jpc_dec.c	/^static int jpc_dec_process_ppm(jpc_dec_t *dec, jpc_ms_t *ms)$/;"	f	file:
jpc_dec_process_ppt	src/Terrain/jasper/jpc/jpc_dec.c	/^static int jpc_dec_process_ppt(jpc_dec_t *dec, jpc_ms_t *ms)$/;"	f	file:
jpc_dec_process_qcc	src/Terrain/jasper/jpc/jpc_dec.c	/^static int jpc_dec_process_qcc(jpc_dec_t *dec, jpc_ms_t *ms)$/;"	f	file:
jpc_dec_process_qcd	src/Terrain/jasper/jpc/jpc_dec.c	/^static int jpc_dec_process_qcd(jpc_dec_t *dec, jpc_ms_t *ms)$/;"	f	file:
jpc_dec_process_rgn	src/Terrain/jasper/jpc/jpc_dec.c	/^static int jpc_dec_process_rgn(jpc_dec_t *dec, jpc_ms_t *ms)$/;"	f	file:
jpc_dec_process_siz	src/Terrain/jasper/jpc/jpc_dec.c	/^static int jpc_dec_process_siz(jpc_dec_t *dec, jpc_ms_t *ms)$/;"	f	file:
jpc_dec_process_soc	src/Terrain/jasper/jpc/jpc_dec.c	/^static int jpc_dec_process_soc(jpc_dec_t *dec, jpc_ms_t *ms)$/;"	f	file:
jpc_dec_process_sod	src/Terrain/jasper/jpc/jpc_dec.c	/^static int jpc_dec_process_sod(jpc_dec_t *dec, jpc_ms_t *ms)$/;"	f	file:
jpc_dec_process_sot	src/Terrain/jasper/jpc/jpc_dec.c	/^static int jpc_dec_process_sot(jpc_dec_t *dec, jpc_ms_t *ms)$/;"	f	file:
jpc_dec_process_unk	src/Terrain/jasper/jpc/jpc_dec.c	/^static int jpc_dec_process_unk(jpc_dec_t *dec, jpc_ms_t *ms)$/;"	f	file:
jpc_dec_rlvl_t	src/Terrain/jasper/jpc/jpc_dec.h	/^} jpc_dec_rlvl_t;$/;"	t	typeref:struct:__anon125
jpc_dec_seg_s	src/Terrain/jasper/jpc/jpc_dec.h	/^typedef struct jpc_dec_seg_s {$/;"	s
jpc_dec_seg_t	src/Terrain/jasper/jpc/jpc_dec.h	/^} jpc_dec_seg_t;$/;"	t	typeref:struct:jpc_dec_seg_s
jpc_dec_seglist_t	src/Terrain/jasper/jpc/jpc_dec.h	/^} jpc_dec_seglist_t;$/;"	t	typeref:struct:__anon121
jpc_dec_t	src/Terrain/jasper/jpc/jpc_dec.h	/^} jpc_dec_t;$/;"	t	typeref:struct:__anon129
jpc_dec_tcomp_t	src/Terrain/jasper/jpc/jpc_dec.h	/^} jpc_dec_tcomp_t;$/;"	t	typeref:struct:__anon126
jpc_dec_tile_t	src/Terrain/jasper/jpc/jpc_dec.h	/^} jpc_dec_tile_t;$/;"	t	typeref:struct:__anon127
jpc_dec_tiledecode	src/Terrain/jasper/jpc/jpc_dec.c	/^static int jpc_dec_tiledecode(jpc_dec_t *dec, jpc_dec_tile_t *tile)$/;"	f	file:
jpc_dec_tilefini	src/Terrain/jasper/jpc/jpc_dec.c	/^static int jpc_dec_tilefini(jpc_dec_t *dec, jpc_dec_tile_t *tile)$/;"	f	file:
jpc_dec_tileinit	src/Terrain/jasper/jpc/jpc_dec.c	/^static int jpc_dec_tileinit(jpc_dec_t *dec, jpc_dec_tile_t *tile)$/;"	f	file:
jpc_decode	src/Terrain/jasper/jpc/jpc_dec.c	/^jas_image_t *jpc_decode(jas_stream_t *in, const char *optstr)$/;"	f
jpc_dequantize	src/Terrain/jasper/jpc/jpc_dec.c	/^static void jpc_dequantize(jas_matrix_t *x, jpc_fix_t absstepsize)$/;"	f	file:
jpc_fix_abs	src/Terrain/jasper/jpc/jpc_fix.h	/^static inline jpc_fix_t jpc_fix_abs(jpc_fix_t x)$/;"	f
jpc_fix_add	src/Terrain/jasper/jpc/jpc_fix.h	/^static inline jpc_fix_t jpc_fix_add(jpc_fix_t x, jpc_fix_t y)$/;"	f
jpc_fix_add3	src/Terrain/jasper/jpc/jpc_fix.h	/^static inline jpc_fix_t jpc_fix_add3(jpc_fix_t x, jpc_fix_t y, jpc_fix_t z)$/;"	f
jpc_fix_asl	src/Terrain/jasper/jpc/jpc_fix.h	177;"	d
jpc_fix_asl	src/Terrain/jasper/jpc/jpc_fix.h	180;"	d
jpc_fix_asr	src/Terrain/jasper/jpc/jpc_fix.h	178;"	d
jpc_fix_asr	src/Terrain/jasper/jpc/jpc_fix.h	181;"	d
jpc_fix_big_t	src/Terrain/jasper/jpc/jpc_fix.h	/^typedef int_fast64_t jpc_fix_big_t;$/;"	t
jpc_fix_div	src/Terrain/jasper/jpc/jpc_fix.h	/^static inline jpc_fix_t jpc_fix_div(jpc_fix_big_t x, jpc_fix_t y)$/;"	f
jpc_fix_firstone	src/Terrain/jasper/jpc/jpc_math.c	/^int jpc_fix_firstone(jpc_fix_t x)$/;"	f
jpc_fix_floor	src/Terrain/jasper/jpc/jpc_fix.h	/^static inline jpc_fix_t jpc_fix_floor(jpc_fix_t x)$/;"	f
jpc_fix_isint	src/Terrain/jasper/jpc/jpc_fix.h	/^static inline bool jpc_fix_isint(jpc_fix_t x)$/;"	f
jpc_fix_minuseq	src/Terrain/jasper/jpc/jpc_fix.h	185;"	d
jpc_fix_mul	src/Terrain/jasper/jpc/jpc_fix.h	/^static inline jpc_fix_t jpc_fix_mul(jpc_fix_big_t x, jpc_fix_big_t y)$/;"	f
jpc_fix_mulbyint	src/Terrain/jasper/jpc/jpc_fix.h	/^static inline jpc_fix_big_t jpc_fix_mulbyint(jpc_fix_big_t x, int y)$/;"	f
jpc_fix_muleq	src/Terrain/jasper/jpc/jpc_fix.h	186;"	d
jpc_fix_neg	src/Terrain/jasper/jpc/jpc_fix.h	/^static inline jpc_fix_t jpc_fix_neg(jpc_fix_t x)$/;"	f
jpc_fix_pluseq	src/Terrain/jasper/jpc/jpc_fix.h	184;"	d
jpc_fix_round	src/Terrain/jasper/jpc/jpc_fix.h	/^static inline jpc_fix_t jpc_fix_round(jpc_fix_t x)$/;"	f
jpc_fix_sgn	src/Terrain/jasper/jpc/jpc_fix.h	/^static inline int jpc_fix_sgn(jpc_fix_t x)$/;"	f
jpc_fix_sub	src/Terrain/jasper/jpc/jpc_fix.h	/^static inline jpc_fix_t jpc_fix_sub(jpc_fix_t x, jpc_fix_t y)$/;"	f
jpc_fix_t	src/Terrain/jasper/jpc/jpc_fix.h	/^typedef int_fast32_t jpc_fix_t;$/;"	t
jpc_fix_t	src/Terrain/jasper/jpc/jpc_fix.h	/^typedef int_least32_t jpc_fix_t;$/;"	t
jpc_fixtodbl	src/Terrain/jasper/jpc/jpc_fix.h	/^static inline double jpc_fixtodbl(jpc_fix_t x)$/;"	f
jpc_fixtoint	src/Terrain/jasper/jpc/jpc_fix.h	/^static inline int jpc_fixtoint(jpc_fix_t x)$/;"	f
jpc_floorlog2	src/Terrain/jasper/jpc/jpc_math.c	/^unsigned jpc_floorlog2(uint_fast32_t x)$/;"	f
jpc_flt_t	src/Terrain/jasper/jpc/jpc_flt.h	/^typedef double jpc_flt_t;$/;"	t
jpc_ft_analyze	src/Terrain/jasper/jpc/jpc_qmfb.c	/^int jpc_ft_analyze(jpc_fix_t *a, int xstart, int ystart, int width, int height,$/;"	f
jpc_ft_fwdlift_colgrp	src/Terrain/jasper/jpc/jpc_qmfb.c	/^static void jpc_ft_fwdlift_colgrp(jpc_fix_t *a, unsigned numrows, unsigned stride, bool parity)$/;"	f	file:
jpc_ft_fwdlift_colres	src/Terrain/jasper/jpc/jpc_qmfb.c	/^static void jpc_ft_fwdlift_colres(jpc_fix_t *a, unsigned numrows, unsigned numcols, unsigned stride,$/;"	f	file:
jpc_ft_fwdlift_row	src/Terrain/jasper/jpc/jpc_qmfb.c	/^static void jpc_ft_fwdlift_row(jpc_fix_t *a, unsigned numcols, bool parity)$/;"	f	file:
jpc_ft_hpenergywts	src/Terrain/jasper/jpc/jpc_qmfb.c	/^static const double jpc_ft_hpenergywts[32] = {$/;"	v	file:
jpc_ft_invlift_colgrp	src/Terrain/jasper/jpc/jpc_qmfb.c	/^static void jpc_ft_invlift_colgrp(jpc_fix_t *a, unsigned numrows, unsigned stride, bool parity)$/;"	f	file:
jpc_ft_invlift_colres	src/Terrain/jasper/jpc/jpc_qmfb.c	/^static void jpc_ft_invlift_colres(jpc_fix_t *a, unsigned numrows, unsigned numcols, unsigned stride,$/;"	f	file:
jpc_ft_invlift_row	src/Terrain/jasper/jpc/jpc_qmfb.c	/^static void jpc_ft_invlift_row(jpc_fix_t *a, unsigned numcols, bool parity)$/;"	f	file:
jpc_ft_lpenergywts	src/Terrain/jasper/jpc/jpc_qmfb.c	/^static const double jpc_ft_lpenergywts[32] = {$/;"	v	file:
jpc_ft_qmfb2d	src/Terrain/jasper/jpc/jpc_qmfb.c	/^const jpc_qmfb2d_t jpc_ft_qmfb2d = {$/;"	v
jpc_ft_synthesize	src/Terrain/jasper/jpc/jpc_qmfb.c	/^int jpc_ft_synthesize(jpc_fix_t *a, int xstart, int ystart, int width, int height,$/;"	f
jpc_getcommacode	src/Terrain/jasper/jpc/jpc_t2dec.c	/^static int jpc_getcommacode(jpc_bitstream_t *in)$/;"	f	file:
jpc_getdata	src/Terrain/jasper/jpc/jpc_cs.c	/^int jpc_getdata(jas_stream_t *in, jas_stream_t *out, long len)$/;"	f
jpc_getmagctxno	src/Terrain/jasper/jpc/jpc_t1cod.c	/^static uint_least8_t jpc_getmagctxno(unsigned f)$/;"	f	file:
jpc_getms	src/Terrain/jasper/jpc/jpc_cs.c	/^jpc_ms_t *jpc_getms(jas_stream_t *in, jpc_cstate_t *cstate)$/;"	f
jpc_getnumnewpasses	src/Terrain/jasper/jpc/jpc_t2dec.c	/^static int jpc_getnumnewpasses(jpc_bitstream_t *in)$/;"	f	file:
jpc_getscctxno	src/Terrain/jasper/jpc/jpc_t1cod.c	/^static uint_least8_t jpc_getscctxno(unsigned f)$/;"	f	file:
jpc_getspb	src/Terrain/jasper/jpc/jpc_t1cod.c	/^static bool jpc_getspb(unsigned f)$/;"	f	file:
jpc_getuint16	src/Terrain/jasper/jpc/jpc_cs.c	/^int jpc_getuint16(jas_stream_t *in, uint_fast16_t *val)$/;"	f
jpc_getuint32	src/Terrain/jasper/jpc/jpc_cs.c	/^int jpc_getuint32(jas_stream_t *in, uint_fast32_t *val)$/;"	f
jpc_getuint8	src/Terrain/jasper/jpc/jpc_cs.c	/^int jpc_getuint8(jas_stream_t *in, uint_fast8_t *val)$/;"	f
jpc_getzcctxno	src/Terrain/jasper/jpc/jpc_t1cod.c	/^static uint_least8_t jpc_getzcctxno(unsigned f, enum jpc_tsfb_orient orient)$/;"	f	file:
jpc_initctxs	src/Terrain/jasper/jpc/jpc_t1cod.c	/^static void jpc_initctxs(jpc_mqctx_t *ctxs)$/;"	f	file:
jpc_initluts	src/Terrain/jasper/jpc/jpc_t1cod.c	/^void jpc_initluts()$/;"	f
jpc_initmqctxs	src/Terrain/jasper/jpc/jpc_t1cod.c	/^static void jpc_initmqctxs()$/;"	f	file:
jpc_int_firstone	src/Terrain/jasper/jpc/jpc_math.c	/^int jpc_int_firstone(int x)$/;"	f
jpc_inttofix	src/Terrain/jasper/jpc/jpc_fix.h	/^static inline jpc_fix_t jpc_inttofix(int x)$/;"	f
jpc_invlift_column_with_parity	src/Terrain/jasper/jpc/jpc_qmfb.c	/^static void jpc_invlift_column_with_parity(jpc_fix_t *restrict dest,$/;"	f	file:
jpc_invlift_n	src/Terrain/jasper/jpc/jpc_qmfb.c	/^static void jpc_invlift_n(jpc_fix_t *restrict dest,$/;"	f	file:
jpc_invlift_pair	src/Terrain/jasper/jpc/jpc_qmfb.c	/^static void jpc_invlift_pair(jpc_fix_t *restrict dest,$/;"	f	file:
jpc_invlift_pair_stride	src/Terrain/jasper/jpc/jpc_qmfb.c	/^static void jpc_invlift_pair_stride(jpc_fix_t *restrict dest,$/;"	f	file:
jpc_invlift_pair_with_parity	src/Terrain/jasper/jpc/jpc_qmfb.c	/^static void jpc_invlift_pair_with_parity(jpc_fix_t *restrict dest,$/;"	f	file:
jpc_magctxnolut	src/Terrain/jasper/jpc/jpc_t1cod.c	/^uint_least8_t jpc_magctxnolut[4096];$/;"	v
jpc_mqctx_t	src/Terrain/jasper/jpc/jpc_mqcod.h	/^} jpc_mqctx_t;$/;"	t	typeref:struct:__anon111
jpc_mqctxs	src/Terrain/jasper/jpc/jpc_t1cod.c	/^jpc_mqctx_t jpc_mqctxs[JPC_NUMCTXS];$/;"	v
jpc_mqdec_bytein	src/Terrain/jasper/jpc/jpc_mqdec.c	/^static void jpc_mqdec_bytein(jpc_mqdec_t *mqdec)$/;"	f	file:
jpc_mqdec_create	src/Terrain/jasper/jpc/jpc_mqdec.c	/^jpc_mqdec_t *jpc_mqdec_create(unsigned maxctxs, jas_stream_t *in)$/;"	f
jpc_mqdec_destroy	src/Terrain/jasper/jpc/jpc_mqdec.c	/^void jpc_mqdec_destroy(jpc_mqdec_t *mqdec)$/;"	f
jpc_mqdec_getbit	src/Terrain/jasper/jpc/jpc_mqdec.h	161;"	d
jpc_mqdec_getbit	src/Terrain/jasper/jpc/jpc_mqdec.h	164;"	d
jpc_mqdec_getbit_func	src/Terrain/jasper/jpc/jpc_mqdec.c	/^bool jpc_mqdec_getbit_func(register jpc_mqdec_t *mqdec)$/;"	f
jpc_mqdec_getbit_macro	src/Terrain/jasper/jpc/jpc_mqdec.h	/^static bool jpc_mqdec_getbit_macro(jpc_mqdec_t *dec)$/;"	f
jpc_mqdec_getbitnoskew	src/Terrain/jasper/jpc/jpc_mqdec.h	170;"	d
jpc_mqdec_getbitnoskew	src/Terrain/jasper/jpc/jpc_mqdec.h	173;"	d
jpc_mqdec_init	src/Terrain/jasper/jpc/jpc_mqdec.c	/^void jpc_mqdec_init(jpc_mqdec_t *mqdec)$/;"	f
jpc_mqdec_lpsexchange	src/Terrain/jasper/jpc/jpc_mqdec.h	/^static bool jpc_mqdec_lpsexchange(uint_least32_t *areg_p, uint_least32_t delta, const jpc_mqstate_t **curctx)$/;"	f
jpc_mqdec_lpsexchrenormd	src/Terrain/jasper/jpc/jpc_mqdec.c	/^bool jpc_mqdec_lpsexchrenormd(register jpc_mqdec_t *mqdec)$/;"	f
jpc_mqdec_mpsexchange	src/Terrain/jasper/jpc/jpc_mqdec.h	/^static bool jpc_mqdec_mpsexchange(uint_least32_t areg, uint_least32_t delta, const jpc_mqstate_t **curctx)$/;"	f
jpc_mqdec_mpsexchrenormd	src/Terrain/jasper/jpc/jpc_mqdec.c	/^bool jpc_mqdec_mpsexchrenormd(register jpc_mqdec_t *mqdec)$/;"	f
jpc_mqdec_renormd	src/Terrain/jasper/jpc/jpc_mqdec.c	/^static void jpc_mqdec_renormd(jpc_mqdec_t *mqdec)$/;"	f	file:
jpc_mqdec_setctxs	src/Terrain/jasper/jpc/jpc_mqdec.c	/^void jpc_mqdec_setctxs(const jpc_mqdec_t *mqdec, unsigned numctxs, const jpc_mqctx_t *ctxs)$/;"	f
jpc_mqdec_setcurctx	src/Terrain/jasper/jpc/jpc_mqdec.h	/^static inline void jpc_mqdec_setcurctx(jpc_mqdec_t *dec, unsigned ctxno)$/;"	f
jpc_mqdec_setinput	src/Terrain/jasper/jpc/jpc_mqdec.c	/^void jpc_mqdec_setinput(jpc_mqdec_t *mqdec, jas_stream_t *in)$/;"	f
jpc_mqdec_t	src/Terrain/jasper/jpc/jpc_mqdec.h	/^} jpc_mqdec_t;$/;"	t	typeref:struct:__anon110
jpc_mqstate_s	src/Terrain/jasper/jpc/jpc_mqcod.h	/^typedef struct jpc_mqstate_s {$/;"	s
jpc_mqstate_t	src/Terrain/jasper/jpc/jpc_mqcod.h	/^} jpc_mqstate_t;$/;"	t	typeref:struct:jpc_mqstate_s
jpc_mqstates	src/Terrain/jasper/jpc/jpc_mqcod.c	/^const jpc_mqstate_t jpc_mqstates[47 * 2] = {$/;"	v
jpc_ms_create	src/Terrain/jasper/jpc/jpc_cs.c	/^jpc_ms_t *jpc_ms_create(int type)$/;"	f
jpc_ms_destroy	src/Terrain/jasper/jpc/jpc_cs.c	/^void jpc_ms_destroy(jpc_ms_t *ms)$/;"	f
jpc_ms_gettype	src/Terrain/jasper/jpc/jpc_cs.h	/^static inline unsigned jpc_ms_gettype(const jpc_ms_t *ms)$/;"	f
jpc_ms_t	src/Terrain/jasper/jpc/jpc_cs.h	/^} jpc_ms_t;$/;"	t	typeref:struct:__anon156
jpc_msops_s	src/Terrain/jasper/jpc/jpc_cs.h	/^typedef struct jpc_msops_s {$/;"	s
jpc_msops_t	src/Terrain/jasper/jpc/jpc_cs.h	/^} jpc_msops_t;$/;"	t	typeref:struct:jpc_msops_s
jpc_msparms_t	src/Terrain/jasper/jpc/jpc_cs.h	/^} jpc_msparms_t;$/;"	t	typeref:union:__anon155
jpc_mstab	src/Terrain/jasper/jpc/jpc_cs.c	/^static const jpc_mstabent_t jpc_mstab[] = {$/;"	v	file:
jpc_mstab_lookup	src/Terrain/jasper/jpc/jpc_cs.c	/^static const jpc_mstabent_t *jpc_mstab_lookup(int id)$/;"	f	file:
jpc_mstabent_t	src/Terrain/jasper/jpc/jpc_cs.c	/^} jpc_mstabent_t;$/;"	t	typeref:struct:__anon133	file:
jpc_ns_analyze	src/Terrain/jasper/jpc/jpc_qmfb.c	/^int jpc_ns_analyze(jpc_fix_t *a, int xstart, int ystart, int width, int height,$/;"	f
jpc_ns_fwdlift_colgrp	src/Terrain/jasper/jpc/jpc_qmfb.c	/^static void jpc_ns_fwdlift_colgrp(jpc_fix_t *a, unsigned numrows, unsigned stride,$/;"	f	file:
jpc_ns_fwdlift_colres	src/Terrain/jasper/jpc/jpc_qmfb.c	/^static void jpc_ns_fwdlift_colres(jpc_fix_t *a, unsigned numrows, unsigned numcols,$/;"	f	file:
jpc_ns_fwdlift_row	src/Terrain/jasper/jpc/jpc_qmfb.c	/^static void jpc_ns_fwdlift_row(jpc_fix_t *a, unsigned numcols, bool parity)$/;"	f	file:
jpc_ns_hpenergywts	src/Terrain/jasper/jpc/jpc_qmfb.c	/^static const double jpc_ns_hpenergywts[32] = {$/;"	v	file:
jpc_ns_invlift_colgrp	src/Terrain/jasper/jpc/jpc_qmfb.c	/^static void jpc_ns_invlift_colgrp(jpc_fix_t *a, unsigned numrows, unsigned stride,$/;"	f	file:
jpc_ns_invlift_colres	src/Terrain/jasper/jpc/jpc_qmfb.c	/^static void jpc_ns_invlift_colres(jpc_fix_t *a, unsigned numrows, unsigned numcols,$/;"	f	file:
jpc_ns_invlift_row	src/Terrain/jasper/jpc/jpc_qmfb.c	/^static void jpc_ns_invlift_row(jpc_fix_t *a, unsigned numcols, bool parity)$/;"	f	file:
jpc_ns_lpenergywts	src/Terrain/jasper/jpc/jpc_qmfb.c	/^static const double jpc_ns_lpenergywts[32] = {$/;"	v	file:
jpc_ns_qmfb2d	src/Terrain/jasper/jpc/jpc_qmfb.c	/^const jpc_qmfb2d_t jpc_ns_qmfb2d = {$/;"	v
jpc_ns_synthesize	src/Terrain/jasper/jpc/jpc_qmfb.c	/^int jpc_ns_synthesize(jpc_fix_t *a, int xstart, int ystart, int width,$/;"	f
jpc_passtype	src/Terrain/jasper/jpc/jpc_t1cod.h	/^enum jpc_passtype {$/;"	g
jpc_pchg_copy	src/Terrain/jasper/jpc/jpc_t2cod.c	/^jpc_pchg_t *jpc_pchg_copy(const jpc_pchg_t *pchg)$/;"	f
jpc_pchg_destroy	src/Terrain/jasper/jpc/jpc_t2cod.c	/^void jpc_pchg_destroy(jpc_pchg_t *pchg)$/;"	f
jpc_pchg_t	src/Terrain/jasper/jpc/jpc_cs.h	/^typedef jpc_pocpchg_t jpc_pchg_t;$/;"	t
jpc_pchglist_copy	src/Terrain/jasper/jpc/jpc_t2cod.c	/^jpc_pchglist_t *jpc_pchglist_copy(const jpc_pchglist_t *pchglist)$/;"	f
jpc_pchglist_create	src/Terrain/jasper/jpc/jpc_t2cod.c	/^jpc_pchglist_t *jpc_pchglist_create()$/;"	f
jpc_pchglist_destroy	src/Terrain/jasper/jpc/jpc_t2cod.c	/^void jpc_pchglist_destroy(jpc_pchglist_t *pchglist)$/;"	f
jpc_pchglist_get	src/Terrain/jasper/jpc/jpc_t2cod.c	/^const jpc_pchg_t *jpc_pchglist_get(const jpc_pchglist_t *pchglist, unsigned pchgno)$/;"	f
jpc_pchglist_insert	src/Terrain/jasper/jpc/jpc_t2cod.c	/^int jpc_pchglist_insert(jpc_pchglist_t *pchglist, int pchgno, jpc_pchg_t *pchg)$/;"	f
jpc_pchglist_numpchgs	src/Terrain/jasper/jpc/jpc_t2cod.c	/^unsigned jpc_pchglist_numpchgs(const jpc_pchglist_t *pchglist)$/;"	f
jpc_pchglist_remove	src/Terrain/jasper/jpc/jpc_t2cod.c	/^jpc_pchg_t *jpc_pchglist_remove(jpc_pchglist_t *pchglist, unsigned pchgno)$/;"	f
jpc_pchglist_t	src/Terrain/jasper/jpc/jpc_t2cod.h	/^} jpc_pchglist_t;$/;"	t	typeref:struct:__anon112
jpc_pi_addpchg	src/Terrain/jasper/jpc/jpc_t2cod.c	/^int jpc_pi_addpchg(jpc_pi_t *pi, jpc_pocpchg_t *pchg)$/;"	f
jpc_pi_addpchgfrompoc	src/Terrain/jasper/jpc/jpc_dec.c	/^static int jpc_pi_addpchgfrompoc(jpc_pi_t *pi, const jpc_poc_t *poc)$/;"	f	file:
jpc_pi_cmptno	src/Terrain/jasper/jpc/jpc_t2cod.h	250;"	d
jpc_pi_create0	src/Terrain/jasper/jpc/jpc_t2cod.c	/^jpc_pi_t *jpc_pi_create0()$/;"	f
jpc_pi_destroy	src/Terrain/jasper/jpc/jpc_t2cod.c	/^void jpc_pi_destroy(jpc_pi_t *pi)$/;"	f
jpc_pi_getind	src/Terrain/jasper/jpc/jpc_t2cod.h	247;"	d
jpc_pi_init	src/Terrain/jasper/jpc/jpc_t2cod.c	/^int jpc_pi_init(jpc_pi_t *pi)$/;"	f
jpc_pi_lyrno	src/Terrain/jasper/jpc/jpc_t2cod.h	256;"	d
jpc_pi_next	src/Terrain/jasper/jpc/jpc_t2cod.c	/^int jpc_pi_next(jpc_pi_t *pi)$/;"	f
jpc_pi_nextcprl	src/Terrain/jasper/jpc/jpc_t2cod.c	/^static int jpc_pi_nextcprl(register jpc_pi_t *pi)$/;"	f	file:
jpc_pi_nextlrcp	src/Terrain/jasper/jpc/jpc_t2cod.c	/^static int jpc_pi_nextlrcp(register jpc_pi_t *pi)$/;"	f	file:
jpc_pi_nextpcrl	src/Terrain/jasper/jpc/jpc_t2cod.c	/^static int jpc_pi_nextpcrl(register jpc_pi_t *pi)$/;"	f	file:
jpc_pi_nextrlcp	src/Terrain/jasper/jpc/jpc_t2cod.c	/^static int jpc_pi_nextrlcp(register jpc_pi_t *pi)$/;"	f	file:
jpc_pi_nextrpcl	src/Terrain/jasper/jpc/jpc_t2cod.c	/^static int jpc_pi_nextrpcl(register jpc_pi_t *pi)$/;"	f	file:
jpc_pi_prcno	src/Terrain/jasper/jpc/jpc_t2cod.h	259;"	d
jpc_pi_prg	src/Terrain/jasper/jpc/jpc_t2cod.h	262;"	d
jpc_pi_rlvlno	src/Terrain/jasper/jpc/jpc_t2cod.h	253;"	d
jpc_pi_t	src/Terrain/jasper/jpc/jpc_t2cod.h	/^} jpc_pi_t;$/;"	t	typeref:struct:__anon115
jpc_picomp_destroy	src/Terrain/jasper/jpc/jpc_t2cod.c	/^static void jpc_picomp_destroy(jpc_picomp_t *picomp)$/;"	f	file:
jpc_picomp_t	src/Terrain/jasper/jpc/jpc_t2cod.h	/^} jpc_picomp_t;$/;"	t	typeref:struct:__anon114
jpc_pirlvl_t	src/Terrain/jasper/jpc/jpc_t2cod.h	/^} jpc_pirlvl_t;$/;"	t	typeref:struct:__anon113
jpc_poc_destroyparms	src/Terrain/jasper/jpc/jpc_cs.c	/^static void jpc_poc_destroyparms(jpc_ms_t *ms)$/;"	f	file:
jpc_poc_getparms	src/Terrain/jasper/jpc/jpc_cs.c	/^static int jpc_poc_getparms(jpc_ms_t *ms, jpc_cstate_t *cstate, jas_stream_t *in)$/;"	f	file:
jpc_poc_putparms	src/Terrain/jasper/jpc/jpc_cs.c	/^static int jpc_poc_putparms(jpc_ms_t *ms, jpc_cstate_t *cstate, jas_stream_t *out)$/;"	f	file:
jpc_poc_t	src/Terrain/jasper/jpc/jpc_cs.h	/^} jpc_poc_t;$/;"	t	typeref:struct:__anon147
jpc_pocpchg_t	src/Terrain/jasper/jpc/jpc_cs.h	/^} jpc_pocpchg_t;$/;"	t	typeref:struct:__anon146
jpc_pow2i	src/Terrain/jasper/jpc/jpc_t1cod.c	/^static double jpc_pow2i(int n)$/;"	f	file:
jpc_ppm_destroyparms	src/Terrain/jasper/jpc/jpc_cs.c	/^static void jpc_ppm_destroyparms(jpc_ms_t *ms)$/;"	f	file:
jpc_ppm_getparms	src/Terrain/jasper/jpc/jpc_cs.c	/^static int jpc_ppm_getparms(jpc_ms_t *ms, jpc_cstate_t *cstate, jas_stream_t *in)$/;"	f	file:
jpc_ppm_putparms	src/Terrain/jasper/jpc/jpc_cs.c	/^static int jpc_ppm_putparms(jpc_ms_t *ms, jpc_cstate_t *cstate, jas_stream_t *out)$/;"	f	file:
jpc_ppm_t	src/Terrain/jasper/jpc/jpc_cs.h	/^} jpc_ppm_t;$/;"	t	typeref:struct:__anon148
jpc_ppmstabtostreams	src/Terrain/jasper/jpc/jpc_dec.c	/^static jpc_streamlist_t *jpc_ppmstabtostreams(jpc_ppxstab_t *tab)$/;"	f	file:
jpc_ppt_destroyparms	src/Terrain/jasper/jpc/jpc_cs.c	/^static void jpc_ppt_destroyparms(jpc_ms_t *ms)$/;"	f	file:
jpc_ppt_getparms	src/Terrain/jasper/jpc/jpc_cs.c	/^static int jpc_ppt_getparms(jpc_ms_t *ms, jpc_cstate_t *cstate, jas_stream_t *in)$/;"	f	file:
jpc_ppt_putparms	src/Terrain/jasper/jpc/jpc_cs.c	/^static int jpc_ppt_putparms(jpc_ms_t *ms, jpc_cstate_t *cstate, jas_stream_t *out)$/;"	f	file:
jpc_ppt_t	src/Terrain/jasper/jpc/jpc_cs.h	/^} jpc_ppt_t;$/;"	t	typeref:struct:__anon149
jpc_pptstabwrite	src/Terrain/jasper/jpc/jpc_dec.c	/^static int jpc_pptstabwrite(jas_stream_t *out, jpc_ppxstab_t *tab)$/;"	f	file:
jpc_ppxstab_create	src/Terrain/jasper/jpc/jpc_dec.c	/^static jpc_ppxstab_t *jpc_ppxstab_create()$/;"	f	file:
jpc_ppxstab_destroy	src/Terrain/jasper/jpc/jpc_dec.c	/^static void jpc_ppxstab_destroy(jpc_ppxstab_t *tab)$/;"	f	file:
jpc_ppxstab_grow	src/Terrain/jasper/jpc/jpc_dec.c	/^static int jpc_ppxstab_grow(jpc_ppxstab_t *tab, unsigned maxents)$/;"	f	file:
jpc_ppxstab_insert	src/Terrain/jasper/jpc/jpc_dec.c	/^static int jpc_ppxstab_insert(jpc_ppxstab_t *tab, jpc_ppxstabent_t *ent)$/;"	f	file:
jpc_ppxstab_t	src/Terrain/jasper/jpc/jpc_dec.h	/^} jpc_ppxstab_t;$/;"	t	typeref:struct:__anon117
jpc_ppxstabent_create	src/Terrain/jasper/jpc/jpc_dec.c	/^static jpc_ppxstabent_t *jpc_ppxstabent_create()$/;"	f	file:
jpc_ppxstabent_destroy	src/Terrain/jasper/jpc/jpc_dec.c	/^static void jpc_ppxstabent_destroy(jpc_ppxstabent_t *ent)$/;"	f	file:
jpc_ppxstabent_t	src/Terrain/jasper/jpc/jpc_dec.h	/^} jpc_ppxstabent_t;$/;"	t	typeref:struct:__anon116
jpc_putdata	src/Terrain/jasper/jpc/jpc_cs.c	/^int jpc_putdata(jas_stream_t *out, jas_stream_t *in, long len)$/;"	f
jpc_putms	src/Terrain/jasper/jpc/jpc_cs.c	/^int jpc_putms(jas_stream_t *out, jpc_cstate_t *cstate, jpc_ms_t *ms)$/;"	f
jpc_putuint16	src/Terrain/jasper/jpc/jpc_cs.c	/^int jpc_putuint16(jas_stream_t *out, uint_fast16_t val)$/;"	f
jpc_putuint32	src/Terrain/jasper/jpc/jpc_cs.c	/^int jpc_putuint32(jas_stream_t *out, uint_fast32_t val)$/;"	f
jpc_putuint8	src/Terrain/jasper/jpc/jpc_cs.c	/^int jpc_putuint8(jas_stream_t *out, uint_fast8_t val)$/;"	f
jpc_qcc_destroyparms	src/Terrain/jasper/jpc/jpc_cs.c	/^static void jpc_qcc_destroyparms(jpc_ms_t *ms)$/;"	f	file:
jpc_qcc_getparms	src/Terrain/jasper/jpc/jpc_cs.c	/^static int jpc_qcc_getparms(jpc_ms_t *ms, jpc_cstate_t *cstate, jas_stream_t *in)$/;"	f	file:
jpc_qcc_putparms	src/Terrain/jasper/jpc/jpc_cs.c	/^static int jpc_qcc_putparms(jpc_ms_t *ms, jpc_cstate_t *cstate, jas_stream_t *out)$/;"	f	file:
jpc_qcc_t	src/Terrain/jasper/jpc/jpc_cs.h	/^} jpc_qcc_t;$/;"	t	typeref:struct:__anon144
jpc_qcd_destroyparms	src/Terrain/jasper/jpc/jpc_cs.c	/^static void jpc_qcd_destroyparms(jpc_ms_t *ms)$/;"	f	file:
jpc_qcd_getparms	src/Terrain/jasper/jpc/jpc_cs.c	/^static int jpc_qcd_getparms(jpc_ms_t *ms, jpc_cstate_t *cstate, jas_stream_t *in)$/;"	f	file:
jpc_qcd_putparms	src/Terrain/jasper/jpc/jpc_cs.c	/^static int jpc_qcd_putparms(jpc_ms_t *ms, jpc_cstate_t *cstate, jas_stream_t *out)$/;"	f	file:
jpc_qcd_t	src/Terrain/jasper/jpc/jpc_cs.h	/^} jpc_qcd_t;$/;"	t	typeref:struct:__anon145
jpc_qcx_destroycompparms	src/Terrain/jasper/jpc/jpc_cs.c	/^static void jpc_qcx_destroycompparms(jpc_qcxcp_t *compparms)$/;"	f	file:
jpc_qcx_getcompparms	src/Terrain/jasper/jpc/jpc_cs.c	/^static int jpc_qcx_getcompparms(jpc_qcxcp_t *compparms, jpc_cstate_t *cstate,$/;"	f	file:
jpc_qcx_putcompparms	src/Terrain/jasper/jpc/jpc_cs.c	/^static int jpc_qcx_putcompparms(jpc_qcxcp_t *compparms, jpc_cstate_t *cstate,$/;"	f	file:
jpc_qcxcp_t	src/Terrain/jasper/jpc/jpc_cs.h	/^} jpc_qcxcp_t;$/;"	t	typeref:struct:__anon143
jpc_qmfb2d_t	src/Terrain/jasper/jpc/jpc_qmfb.h	/^} jpc_qmfb2d_t;$/;"	t	typeref:struct:__anon105
jpc_qmfb_join_colgrp	src/Terrain/jasper/jpc/jpc_qmfb.c	/^static void jpc_qmfb_join_colgrp(jpc_fix_t *a, unsigned numrows, unsigned stride,$/;"	f	file:
jpc_qmfb_join_colres	src/Terrain/jasper/jpc/jpc_qmfb.c	/^static void jpc_qmfb_join_colres(jpc_fix_t *a, unsigned numrows, unsigned numcols,$/;"	f	file:
jpc_qmfb_join_row	src/Terrain/jasper/jpc/jpc_qmfb.c	/^void jpc_qmfb_join_row(jpc_fix_t *a, unsigned numcols, bool parity)$/;"	f
jpc_qmfb_split_colgrp	src/Terrain/jasper/jpc/jpc_qmfb.c	/^static void jpc_qmfb_split_colgrp(jpc_fix_t *a, unsigned numrows, unsigned stride,$/;"	f	file:
jpc_qmfb_split_colres	src/Terrain/jasper/jpc/jpc_qmfb.c	/^static void jpc_qmfb_split_colres(jpc_fix_t *a, unsigned numrows, unsigned numcols,$/;"	f	file:
jpc_qmfb_split_row	src/Terrain/jasper/jpc/jpc_qmfb.c	/^static void jpc_qmfb_split_row(jpc_fix_t *a, unsigned numcols, bool parity)$/;"	f	file:
jpc_rawrefpass_step	src/Terrain/jasper/jpc/jpc_t1dec.c	/^static int jpc_rawrefpass_step(jpc_fix_t *fp, jpc_fix_t *dp, jpc_fix_t poshalf, jpc_fix_t neghalf, jpc_bitstream_t *in)$/;"	f	file:
jpc_rawsigpass_step	src/Terrain/jasper/jpc/jpc_t1dec.c	/^static int jpc_rawsigpass_step(jpc_fix_t *fp, size_t frowstep, jpc_fix_t *dp, jpc_fix_t oneplushalf, jpc_bitstream_t *in, bool vcausalflag)$/;"	f	file:
jpc_refnmsedec	src/Terrain/jasper/jpc/jpc_t1cod.c	/^jpc_fix_t jpc_refnmsedec[1 << JPC_NMSEDEC_BITS];$/;"	v
jpc_refnmsedec0	src/Terrain/jasper/jpc/jpc_t1cod.c	/^jpc_fix_t jpc_refnmsedec0[1 << JPC_NMSEDEC_BITS];$/;"	v
jpc_refpass_step	src/Terrain/jasper/jpc/jpc_t1dec.c	/^static void jpc_refpass_step(jpc_fix_t *fp, jpc_fix_t *dp, jpc_fix_t poshalf, jpc_fix_t neghalf, jpc_mqdec_t *mqdec)$/;"	f	file:
jpc_rgn_getparms	src/Terrain/jasper/jpc/jpc_cs.c	/^static int jpc_rgn_getparms(jpc_ms_t *ms, jpc_cstate_t *cstate, jas_stream_t *in)$/;"	f	file:
jpc_rgn_putparms	src/Terrain/jasper/jpc/jpc_cs.c	/^static int jpc_rgn_putparms(jpc_ms_t *ms, jpc_cstate_t *cstate, jas_stream_t *out)$/;"	f	file:
jpc_rgn_t	src/Terrain/jasper/jpc/jpc_cs.h	/^} jpc_rgn_t;$/;"	t	typeref:struct:__anon142
jpc_scctxnolut	src/Terrain/jasper/jpc/jpc_t1cod.c	/^uint_least8_t jpc_scctxnolut[256];$/;"	v
jpc_seg_alloc	src/Terrain/jasper/jpc/jpc_dec.c	/^jpc_dec_seg_t *jpc_seg_alloc()$/;"	f
jpc_seg_destroy	src/Terrain/jasper/jpc/jpc_dec.c	/^void jpc_seg_destroy(jpc_dec_seg_t *seg)$/;"	f
jpc_seglist_insert	src/Terrain/jasper/jpc/jpc_dec.c	/^void jpc_seglist_insert(jpc_dec_seglist_t *list, jpc_dec_seg_t *ins, jpc_dec_seg_t *node)$/;"	f
jpc_seglist_remove	src/Terrain/jasper/jpc/jpc_dec.c	/^void jpc_seglist_remove(jpc_dec_seglist_t *list, jpc_dec_seg_t *seg)$/;"	f
jpc_segtype	src/Terrain/jasper/jpc/jpc_t1cod.h	/^enum jpc_segtype {$/;"	g
jpc_signmsedec	src/Terrain/jasper/jpc/jpc_t1cod.c	/^jpc_fix_t jpc_signmsedec[1 << JPC_NMSEDEC_BITS];$/;"	v
jpc_signmsedec0	src/Terrain/jasper/jpc/jpc_t1cod.c	/^jpc_fix_t jpc_signmsedec0[1 << JPC_NMSEDEC_BITS];$/;"	v
jpc_sigpass_step	src/Terrain/jasper/jpc/jpc_t1dec.c	/^static void jpc_sigpass_step(jpc_fix_t *fp, size_t frowstep, jpc_fix_t *dp, jpc_fix_t oneplushalf, enum jpc_tsfb_orient orient, jpc_mqdec_t *mqdec, bool vcausalflag)$/;"	f	file:
jpc_siz_destroyparms	src/Terrain/jasper/jpc/jpc_cs.c	/^static void jpc_siz_destroyparms(jpc_ms_t *ms)$/;"	f	file:
jpc_siz_getparms	src/Terrain/jasper/jpc/jpc_cs.c	/^static int jpc_siz_getparms(jpc_ms_t *ms, jpc_cstate_t *cstate,$/;"	f	file:
jpc_siz_putparms	src/Terrain/jasper/jpc/jpc_cs.c	/^static int jpc_siz_putparms(jpc_ms_t *ms, jpc_cstate_t *cstate, jas_stream_t *out)$/;"	f	file:
jpc_siz_t	src/Terrain/jasper/jpc/jpc_cs.h	/^} jpc_siz_t;$/;"	t	typeref:struct:__anon137
jpc_sizcomp_t	src/Terrain/jasper/jpc/jpc_cs.h	/^} jpc_sizcomp_t;$/;"	t	typeref:struct:__anon136
jpc_sop_getparms	src/Terrain/jasper/jpc/jpc_cs.c	/^static int jpc_sop_getparms(jpc_ms_t *ms, jpc_cstate_t *cstate, jas_stream_t *in)$/;"	f	file:
jpc_sop_putparms	src/Terrain/jasper/jpc/jpc_cs.c	/^static int jpc_sop_putparms(jpc_ms_t *ms, jpc_cstate_t *cstate, jas_stream_t *out)$/;"	f	file:
jpc_sop_t	src/Terrain/jasper/jpc/jpc_cs.h	/^} jpc_sop_t;$/;"	t	typeref:struct:__anon151
jpc_sot_getparms	src/Terrain/jasper/jpc/jpc_cs.c	/^static int jpc_sot_getparms(jpc_ms_t *ms, jpc_cstate_t *cstate, jas_stream_t *in)$/;"	f	file:
jpc_sot_putparms	src/Terrain/jasper/jpc/jpc_cs.c	/^static int jpc_sot_putparms(jpc_ms_t *ms, jpc_cstate_t *cstate, jas_stream_t *out)$/;"	f	file:
jpc_sot_t	src/Terrain/jasper/jpc/jpc_cs.h	/^} jpc_sot_t;$/;"	t	typeref:struct:__anon135
jpc_spblut	src/Terrain/jasper/jpc/jpc_t1cod.c	/^bool jpc_spblut[256];$/;"	v
jpc_streamlist_create	src/Terrain/jasper/jpc/jpc_dec.c	/^static jpc_streamlist_t *jpc_streamlist_create()$/;"	f	file:
jpc_streamlist_destroy	src/Terrain/jasper/jpc/jpc_dec.c	/^static void jpc_streamlist_destroy(jpc_streamlist_t *streamlist)$/;"	f	file:
jpc_streamlist_insert	src/Terrain/jasper/jpc/jpc_dec.c	/^static int jpc_streamlist_insert(jpc_streamlist_t *streamlist, unsigned streamno,$/;"	f	file:
jpc_streamlist_numstreams	src/Terrain/jasper/jpc/jpc_dec.c	/^static int jpc_streamlist_numstreams(jpc_streamlist_t *streamlist)$/;"	f	file:
jpc_streamlist_remove	src/Terrain/jasper/jpc/jpc_dec.c	/^static jas_stream_t *jpc_streamlist_remove(jpc_streamlist_t *streamlist, unsigned streamno)$/;"	f	file:
jpc_streamlist_t	src/Terrain/jasper/jpc/jpc_dec.h	/^} jpc_streamlist_t;$/;"	t	typeref:struct:__anon118
jpc_tagtree_alloc	src/Terrain/jasper/jpc/jpc_tagtree.c	/^static jpc_tagtree_t *jpc_tagtree_alloc()$/;"	f	file:
jpc_tagtree_copy	src/Terrain/jasper/jpc/jpc_tagtree.c	/^void jpc_tagtree_copy(jpc_tagtree_t *dsttree, const jpc_tagtree_t *srctree)$/;"	f
jpc_tagtree_create	src/Terrain/jasper/jpc/jpc_tagtree.c	/^jpc_tagtree_t *jpc_tagtree_create(int numleafsh, int numleafsv)$/;"	f
jpc_tagtree_decode	src/Terrain/jasper/jpc/jpc_tagtree.c	/^int jpc_tagtree_decode(jpc_tagtree_t *tree, jpc_tagtreenode_t *leaf,$/;"	f
jpc_tagtree_destroy	src/Terrain/jasper/jpc/jpc_tagtree.c	/^void jpc_tagtree_destroy(jpc_tagtree_t *tree)$/;"	f
jpc_tagtree_encode	src/Terrain/jasper/jpc/jpc_tagtree.c	/^int jpc_tagtree_encode(jpc_tagtree_t *tree, jpc_tagtreenode_t *leaf,$/;"	f
jpc_tagtree_getleaf	src/Terrain/jasper/jpc/jpc_tagtree.c	/^jpc_tagtreenode_t *jpc_tagtree_getleaf(jpc_tagtree_t *tree, int n)$/;"	f
jpc_tagtree_reset	src/Terrain/jasper/jpc/jpc_tagtree.c	/^void jpc_tagtree_reset(jpc_tagtree_t *tree)$/;"	f
jpc_tagtree_setvalue	src/Terrain/jasper/jpc/jpc_tagtree.c	/^void jpc_tagtree_setvalue(jpc_tagtree_t *tree, jpc_tagtreenode_t *leaf,$/;"	f
jpc_tagtree_t	src/Terrain/jasper/jpc/jpc_tagtree.h	/^} jpc_tagtree_t;$/;"	t	typeref:struct:__anon109
jpc_tagtreenode_	src/Terrain/jasper/jpc/jpc_tagtree.h	/^typedef struct jpc_tagtreenode_ {$/;"	s
jpc_tagtreenode_t	src/Terrain/jasper/jpc/jpc_tagtree.h	/^} jpc_tagtreenode_t;$/;"	t	typeref:struct:jpc_tagtreenode_
jpc_tsfb_analyze	src/Terrain/jasper/jpc/jpc_tsfb.c	/^int jpc_tsfb_analyze(jpc_tsfb_t *tsfb, jas_seq2d_t *a)$/;"	f
jpc_tsfb_analyze2	src/Terrain/jasper/jpc/jpc_tsfb.c	/^static int jpc_tsfb_analyze2(jpc_tsfb_t *tsfb, jpc_fix_t *a, int xstart, int ystart,$/;"	f	file:
jpc_tsfb_band_t	src/Terrain/jasper/jpc/jpc_tsfb.h	/^} jpc_tsfb_band_t;$/;"	t	typeref:struct:__anon107
jpc_tsfb_destroy	src/Terrain/jasper/jpc/jpc_tsfb.c	/^void jpc_tsfb_destroy(jpc_tsfb_t *tsfb)$/;"	f
jpc_tsfb_getbands	src/Terrain/jasper/jpc/jpc_tsfb.c	/^int jpc_tsfb_getbands(jpc_tsfb_t *tsfb, uint_fast32_t xstart,$/;"	f
jpc_tsfb_getbands2	src/Terrain/jasper/jpc/jpc_tsfb.c	/^void jpc_tsfb_getbands2(jpc_tsfb_t *tsfb, int locxstart, int locystart,$/;"	f
jpc_tsfb_orient	src/Terrain/jasper/jpc/jpc_tsfb.h	/^enum jpc_tsfb_orient {$/;"	g
jpc_tsfb_synthesize	src/Terrain/jasper/jpc/jpc_tsfb.c	/^int jpc_tsfb_synthesize(jpc_tsfb_t *tsfb, jas_seq2d_t *a)$/;"	f
jpc_tsfb_synthesize2	src/Terrain/jasper/jpc/jpc_tsfb.c	/^static int jpc_tsfb_synthesize2(jpc_tsfb_t *tsfb, jpc_fix_t *a, int xstart, int ystart,$/;"	f	file:
jpc_tsfb_t	src/Terrain/jasper/jpc/jpc_tsfb.h	/^} jpc_tsfb_t;$/;"	t	typeref:struct:__anon108
jpc_undo_roi	src/Terrain/jasper/jpc/jpc_dec.c	/^static void jpc_undo_roi(jas_matrix_t *x, int roishift, int bgshift, unsigned numbps)$/;"	f	file:
jpc_unk_destroyparms	src/Terrain/jasper/jpc/jpc_cs.c	/^static void jpc_unk_destroyparms(jpc_ms_t *ms)$/;"	f	file:
jpc_unk_getparms	src/Terrain/jasper/jpc/jpc_cs.c	/^static int jpc_unk_getparms(jpc_ms_t *ms, jpc_cstate_t *cstate, jas_stream_t *in)$/;"	f	file:
jpc_unk_putparms	src/Terrain/jasper/jpc/jpc_cs.c	/^static int jpc_unk_putparms(jpc_ms_t *ms, jpc_cstate_t *cstate, jas_stream_t *out)$/;"	f	file:
jpc_unk_t	src/Terrain/jasper/jpc/jpc_cs.h	/^} jpc_unk_t;$/;"	t	typeref:struct:__anon154
jpc_validate	src/Terrain/jasper/jpc/jpc_cs.c	/^int jpc_validate(jas_stream_t *in)$/;"	f
jpc_zcctxnolut	src/Terrain/jasper/jpc/jpc_t1cod.c	/^uint_least8_t jpc_zcctxnolut[4 * 256];$/;"	v
jvm	src/java/Global.cxx	/^JavaVM *jvm;$/;"	m	namespace:Java	file:
k	src/Computer/Wind/WindEKF.hpp	/^  float k;$/;"	m	class:WindEKF
k	src/util/MD5.cpp	/^static constexpr uint32_t k[64] = {$/;"	v	file:
k0	src/Geo/UTM.cpp	/^static constexpr double k0 = 0.9996;$/;"	v	file:
k1	src/Atmosphere/Pressure.cpp	28;"	d	file:
k2	src/Atmosphere/Pressure.cpp	30;"	d	file:
k4	src/Atmosphere/AirDensity.cpp	29;"	d	file:
k6	src/Atmosphere/AirDensity.cpp	30;"	d	file:
k6bt	src/Device/Config.hpp	/^  bool k6bt;$/;"	m	struct:DeviceConfig
k7	src/Atmosphere/AirDensity.cpp	31;"	d	file:
k_ext	src/Device/Driver/LX/Convert.cpp	/^  LXN::ExtensionConfig k_ext, b_ext;$/;"	m	struct:Context	file:
k_ext	src/Device/Driver/LX/LXN.hpp	/^    const struct KExt *k_ext;$/;"	m	union:LXN::Packet	typeref:struct:LXN::Packet::KExt
kalman_filter	src/Android/BMP085Device.hpp	/^  SelfTimingKalmanFilter1d kalman_filter;$/;"	m	class:final
kalman_filter	src/Android/I2CbaroDevice.hpp	/^  SelfTimingKalmanFilter1d kalman_filter;$/;"	m	class:final
kalman_filter	src/Android/NunchuckDevice.hpp	/^  SelfTimingKalmanFilter1d kalman_filter;$/;"	m	class:final
kalman_filter	src/Device/Driver/BlueFly/Internal.hpp	/^  KalmanFilter1d kalman_filter;$/;"	m	class:BlueFlyDevice
kb	src/Dialogs/TouchTextEntry.cpp	/^static KeyboardWidget *kb = NULL;$/;"	v	file:
kd	src/ui/canvas/memory/Murphy.hpp	/^  int ku, kt, kv, kd;$/;"	m	struct:MurphyIterator
key	src/Cloud/Client.hpp	/^  const uint64_t key;$/;"	m	struct:CloudClient
key	src/Input/InputDefaults.cpp	/^  uint16_t key;$/;"	m	struct:flat_event_map	file:
key	src/Input/InputDefaults.cpp	/^  unsigned char key;$/;"	m	struct:flat_event_map	file:
key	src/Input/InputDefaults.cpp	/^  unsigned key;$/;"	m	struct:flat_event_map	file:
key	src/Input/InputDefaults.cpp	/^  unsigned short key;$/;"	m	struct:flat_event_map	file:
key	src/Input/InputKeys.cpp	/^  unsigned key;$/;"	m	struct:string_to_key	file:
key	src/StatusMessage.hpp	/^  const TCHAR *key;$/;"	m	struct:StatusMessage
key	src/Tracking/SkyLines/Client.hpp	/^  uint64_t key = 0;$/;"	m	class:SkyLinesTracking::final
key	src/Tracking/SkyLines/CloudSettings.hpp	/^  uint64_t key;$/;"	m	struct:SkyLinesTracking::CloudSettings
key	src/Tracking/SkyLines/Protocol.hpp	/^  uint64_t key;$/;"	m	struct:SkyLinesTracking::Header
key	src/Tracking/SkyLines/Server.hpp	/^    uint64_t key;$/;"	m	struct:SkyLinesTracking::Server::Client
key	src/Tracking/SkyLines/Settings.hpp	/^  uint64_t key;$/;"	m	struct:SkyLinesTracking::Settings
key	src/io/KeyValueFileReader.hpp	/^  char *key;$/;"	m	struct:KeyValuePair
key	src/ui/canvas/memory/NEON.hpp	/^  uint8_t key;$/;"	m	class:NEONTransparentPixelOperations
key	src/ui/canvas/memory/PixelOperations.hpp	/^  argument_type key;$/;"	m	struct:ColorKey
key	src/ui/canvas/memory/PixelOperations.hpp	/^  color_type key;$/;"	m	class:TransparentInvertPixelOperations
key	src/util/Cache.hxx	/^		Key key;$/;"	m	struct:Cache::Pair
key	src/util/RadixTree.hpp	/^      const TCHAR *key;$/;"	m	struct:RadixTree::Node::Match
key	src/util/RadixTree.hpp	/^    const TCHAR *key;$/;"	m	struct:RadixTree::KeyVisitorAdapter
key_buckets	src/Cloud/Client.hpp	/^  typename KeySet::bucket_type key_buckets[N_KEY_BUCKETS];$/;"	m	class:CloudClientContainer
key_code_translation_table	src/ui/event/poll/linux/Translate.hpp	/^} key_code_translation_table[] = {$/;"	v	typeref:struct:__anon178
key_down_function	src/Form/Form.hpp	/^  KeyDownFunction key_down_function;$/;"	m	class:WndForm
key_set	src/Cloud/Client.hpp	/^  KeySet key_set;$/;"	m	class:CloudClientContainer
key_to_event	src/Input/InputEvents.cpp	/^key_to_event(InputEvents::Mode mode, InputEvents::Mode overlay_mode,$/;"	f	file:
key_to_event	src/Input/InputEvents.cpp	/^key_to_event(InputEvents::Mode mode, unsigned key_code)$/;"	f	file:
keyboard	src/ui/event/poll/InputQueue.hpp	/^  LinuxInputDevice keyboard;$/;"	m	class:DisplayOrientation::final
keyboard_letters	src/Widget/KeyboardWidget.cpp	/^static constexpr TCHAR keyboard_letters[] =$/;"	v	file:
keyimage	src/Topography/shapelib/mapserver.h	/^    char *keyimage;$/;"	m	struct:classObj
keylaenge	src/Device/Driver/Volkslogger/Database.hpp	/^    uint8_t keylaenge;$/;"	m	struct:Volkslogger::TableHeader
keylaenge	src/Device/Driver/Volkslogger/dbbconv.h	/^    unsigned dslaenge, keylaenge;$/;"	m	struct:DBB::HEADER
keys	src/Form/ButtonPanel.hpp	/^  unsigned keys[8u];$/;"	m	class:ButtonPanel
keysizex	src/Topography/shapelib/mapserver.h	/^    int keysizex, keysizey;$/;"	m	struct:__anon48
keysizey	src/Topography/shapelib/mapserver.h	/^    int keysizex, keysizey;$/;"	m	struct:__anon48
keyspacingx	src/Topography/shapelib/mapserver.h	/^    int keyspacingx, keyspacingy;$/;"	m	struct:__anon48
keyspacingy	src/Topography/shapelib/mapserver.h	/^    int keyspacingx, keyspacingy;$/;"	m	struct:__anon48
khz	src/Device/Driver/KRT2.cpp	/^    uint8_t khz;$/;"	m	struct:final::stx_msg	file:
kinetic	src/Form/List.hpp	/^  KineticManager kinetic;$/;"	m	class:ListControl
kinetic_x	src/MapWindow/GlueMapWindow.hpp	/^  KineticManager kinetic_x = 700, kinetic_y = 700;$/;"	m	class:GlueMapWindow
kinetic_y	src/MapWindow/GlueMapWindow.hpp	/^  KineticManager kinetic_x = 700, kinetic_y = 700;$/;"	m	class:GlueMapWindow
known_	src/Terrain/jasper/jpc/jpc_tagtree.h	/^	int known_;$/;"	m	struct:jpc_tagtreenode_
kobo_model_ids	src/Kobo/Model.cpp	/^} kobo_model_ids[] = {$/;"	v	typeref:struct:__anon183	file:
koord	src/Device/Driver/Volkslogger/vlconv.cpp	/^  KOORD koord;$/;"	m	class:C2	file:
krt2_driver	src/Device/Driver/KRT2.cpp	/^const struct DeviceRegister krt2_driver = {$/;"	v	typeref:struct:DeviceRegister
kt	src/ui/canvas/memory/Murphy.hpp	/^  int ku, kt, kv, kd;$/;"	m	struct:MurphyIterator
ku	src/ui/canvas/memory/Murphy.hpp	/^  int ku, kt, kv, kd;$/;"	m	struct:MurphyIterator
kv	src/ui/canvas/memory/Murphy.hpp	/^  int ku, kt, kv, kd;$/;"	m	struct:MurphyIterator
lLastBaudrate	src/Device/Driver/EW.cpp	/^  unsigned lLastBaudrate;$/;"	m	class:EWDevice	file:
l_GeoPoint_tostring	src/lua/Geo.cpp	/^l_GeoPoint_tostring(lua_State *L)$/;"	f	file:
l_airspace_index	src/lua/Airspace.cpp	/^l_airspace_index(lua_State *L)$/;"	f	file:
l_alert	src/lua/Dialogs.cpp	/^l_alert(lua_State *L)$/;"	f	file:
l_blackboard_index	src/lua/Blackboard.cpp	/^l_blackboard_index(lua_State *L)$/;"	f	file:
l_cancel	src/lua/InputEvent.cpp	/^  static int l_cancel(lua_State *L) {$/;"	f	class:final
l_cancel	src/lua/Timer.cpp	/^LuaTimer::l_cancel(lua_State *L)$/;"	f	class:LuaTimer
l_clear	src/lua/InputEvent.cpp	/^  static int l_clear(lua_State *L) {$/;"	f	class:final
l_fire_legacy_event	src/lua/Legacy.cpp	/^l_fire_legacy_event(lua_State *L)$/;"	f	file:
l_gc	src/lua/Class.hxx	/^	static int l_gc(lua_State *L) {$/;"	f	struct:Lua::Class
l_gc	src/lua/InputEvent.cpp	/^  static int l_gc(lua_State *L) {$/;"	f	class:final
l_logger_disablelogbook	src/lua/Logger.cpp	/^l_logger_disablelogbook(lua_State *L)$/;"	f	file:
l_logger_disablenmea	src/lua/Logger.cpp	/^l_logger_disablenmea(lua_State *L)$/;"	f	file:
l_logger_enablelogbook	src/lua/Logger.cpp	/^l_logger_enablelogbook(lua_State *L)$/;"	f	file:
l_logger_enablenmea	src/lua/Logger.cpp	/^l_logger_enablenmea(lua_State *L)$/;"	f	file:
l_logger_index	src/lua/Logger.cpp	/^l_logger_index(lua_State *L)$/;"	f	file:
l_logger_setautologger	src/lua/Logger.cpp	/^l_logger_setautologger(lua_State *L)$/;"	f	file:
l_logger_setloggerid	src/lua/Logger.cpp	/^l_logger_setloggerid(lua_State *L)$/;"	f	file:
l_logger_setpilotname	src/lua/Logger.cpp	/^l_logger_setpilotname(lua_State *L)$/;"	f	file:
l_logger_settimestepcircling	src/lua/Logger.cpp	/^l_logger_settimestepcircling(lua_State *L)$/;"	f	file:
l_logger_settimestepcruise	src/lua/Logger.cpp	/^l_logger_settimestepcruise(lua_State *L)$/;"	f	file:
l_map_disablepan	src/lua/Map.cpp	/^l_map_disablepan(lua_State *L)$/;"	f	file:
l_map_enterpan	src/lua/Map.cpp	/^l_map_enterpan(lua_State *L)$/;"	f	file:
l_map_index	src/lua/Map.cpp	/^l_map_index(lua_State *L)$/;"	f	file:
l_map_leavepan	src/lua/Map.cpp	/^l_map_leavepan(lua_State *L)$/;"	f	file:
l_map_next	src/lua/Map.cpp	/^l_map_next(lua_State *L)$/;"	f	file:
l_map_pancursor	src/lua/Map.cpp	/^l_map_pancursor(lua_State *L)$/;"	f	file:
l_map_panto	src/lua/Map.cpp	/^l_map_panto(lua_State *L)$/;"	f	file:
l_map_prev	src/lua/Map.cpp	/^l_map_prev(lua_State *L)$/;"	f	file:
l_map_show	src/lua/Map.cpp	/^l_map_show(lua_State *L)$/;"	f	file:
l_map_zoom	src/lua/Map.cpp	/^l_map_zoom(lua_State *L)$/;"	f	file:
l_new	src/lua/InputEvent.cpp	/^  static int l_new(lua_State *L) {$/;"	f	class:final
l_new	src/lua/Timer.cpp	/^LuaTimer::l_new(lua_State *L)$/;"	f	class:LuaTimer
l_print	src/lua/Log.cpp	/^l_print(lua_State *L)$/;"	f	file:
l_replay_fastforward	src/lua/Replay.cpp	/^l_replay_fastforward(lua_State *L)$/;"	f	file:
l_replay_index	src/lua/Replay.cpp	/^l_replay_index(lua_State *L)$/;"	f	file:
l_replay_settimescale	src/lua/Replay.cpp	/^l_replay_settimescale(lua_State *L)$/;"	f	file:
l_replay_start	src/lua/Replay.cpp	/^l_replay_start(lua_State *L)$/;"	f	file:
l_replay_stop	src/lua/Replay.cpp	/^l_replay_stop(lua_State *L)$/;"	f	file:
l_schedule	src/lua/Timer.cpp	/^LuaTimer::l_schedule(lua_State *L)$/;"	f	class:LuaTimer
l_settings_index	src/lua/Settings.cpp	/^l_settings_index(lua_State *L)$/;"	f	file:
l_settings_setballast	src/lua/Settings.cpp	/^l_settings_setballast(lua_State *L)$/;"	f	file:
l_settings_setbugs	src/lua/Settings.cpp	/^l_settings_setbugs(lua_State *L)$/;"	f	file:
l_settings_setmaxtemp	src/lua/Settings.cpp	/^l_settings_setmaxtemp(lua_State *L)$/;"	f	file:
l_settings_setmc	src/lua/Settings.cpp	/^l_settings_setmc(lua_State *L)$/;"	f	file:
l_settings_setqnh	src/lua/Settings.cpp	/^l_settings_setqnh(lua_State *L)$/;"	f	file:
l_task_index	src/lua/Task.cpp	/^l_task_index(lua_State *L)$/;"	f	file:
l_tracking_disable_livetrack24	src/lua/Tracking.cpp	/^l_tracking_disable_livetrack24(lua_State *L)$/;"	f	file:
l_tracking_disable_skylines	src/lua/Tracking.cpp	/^l_tracking_disable_skylines(lua_State *L)$/;"	f	file:
l_tracking_disable_skylines_neartraffic	src/lua/Tracking.cpp	/^l_tracking_disable_skylines_neartraffic(lua_State *L)$/;"	f	file:
l_tracking_disable_skylines_traffic	src/lua/Tracking.cpp	/^l_tracking_disable_skylines_traffic(lua_State *L)$/;"	f	file:
l_tracking_enable_livetrack24	src/lua/Tracking.cpp	/^l_tracking_enable_livetrack24(lua_State *L)$/;"	f	file:
l_tracking_enable_skylines	src/lua/Tracking.cpp	/^l_tracking_enable_skylines(lua_State *L)$/;"	f	file:
l_tracking_enable_skylines_neartraffic	src/lua/Tracking.cpp	/^l_tracking_enable_skylines_neartraffic(lua_State *L)$/;"	f	file:
l_tracking_enable_skylines_traffic	src/lua/Tracking.cpp	/^l_tracking_enable_skylines_traffic(lua_State *L)$/;"	f	file:
l_tracking_index	src/lua/Tracking.cpp	/^l_tracking_index(lua_State *L)$/;"	f	file:
l_tracking_set_livetrack24_interval	src/lua/Tracking.cpp	/^l_tracking_set_livetrack24_interval(lua_State *L)$/;"	f	file:
l_tracking_set_livetrack24_vehiclename	src/lua/Tracking.cpp	/^l_tracking_set_livetrack24_vehiclename(lua_State *L)$/;"	f	file:
l_tracking_set_skylines_interval	src/lua/Tracking.cpp	/^l_tracking_set_skylines_interval(lua_State *L)$/;"	f	file:
l_wind_clear	src/lua/Wind.cpp	/^l_wind_clear(lua_State *L)$/;"	f	file:
l_wind_index	src/lua/Wind.cpp	/^l_wind_index(lua_State *L)$/;"	f	file:
l_wind_settaildrift	src/lua/Wind.cpp	/^l_wind_settaildrift(lua_State *L)$/;"	f	file:
l_wind_setwindbearing	src/lua/Wind.cpp	/^l_wind_setwindbearing(lua_State *L)$/;"	f	file:
l_wind_setwindmode	src/lua/Wind.cpp	/^l_wind_setwindmode(lua_State *L)$/;"	f	file:
l_wind_setwindspeed	src/lua/Wind.cpp	/^l_wind_setwindspeed(lua_State *L)$/;"	f	file:
label	src/Dialogs/Device/DeviceEditWidget.cpp	/^  const TCHAR *label;$/;"	m	struct:__anon3	file:
label	src/Dialogs/Device/Vega/VegaParametersWidget.hpp	/^    const TCHAR *label, *help;$/;"	m	struct:VegaParametersWidget::StaticParameter
label	src/Gauge/GaugeVario.hpp	/^    DrawInfo label;$/;"	m	struct:GaugeVario::LabelValueDrawInfo
label	src/Input/InputDefaults.cpp	/^  const TCHAR *label;$/;"	m	struct:flat_label	file:
label	src/Input/InputParser.cpp	/^  StaticString<256> type, data, label;$/;"	m	struct:EventBuilder	file:
label	src/MapWindow/Items/OverlayMapItem.hpp	/^  const StaticString<64> label;$/;"	m	struct:OverlayMapItem
label	src/MapWindow/Items/RaspMapItem.hpp	/^  const StaticString<64> label;$/;"	m	struct:RaspMapItem
label	src/MapWindow/OverlayBitmap.hpp	/^     label(_label) {}$/;"	f	class:final
label	src/MapWindow/OverlayBitmap.hpp	/^  tstring label;$/;"	m	class:final
label	src/Menu/MenuData.hpp	/^  const TCHAR *label;$/;"	m	class:MenuItem
label	src/Topography/XShape.hpp	/^  BasicAllocatedString<TCHAR> label;$/;"	m	class:XShape
label	src/Topography/shapelib/mapserver.h	/^    labelObj *label;$/;"	m	struct:__anon38
label	src/Topography/shapelib/mapserver.h	/^    labelObj label;$/;"	m	struct:__anon47
label	src/Topography/shapelib/mapserver.h	/^    labelObj label;$/;"	m	struct:__anon48
label	src/Weather/PCMet/Overlays.hpp	/^  tstring label;$/;"	m	struct:PCMet::OverlayInfo
label	src/Weather/Rasp/RaspStore.hpp	/^    const TCHAR *label;$/;"	m	struct:RaspStore::MapInfo
label	src/Weather/Rasp/RaspStore.hpp	/^    const TCHAR *label;$/;"	m	struct:RaspStore::MapItem
label	src/util/RadixTree.hpp	/^    StaticString<8> label;$/;"	m	struct:RadixTree::Node
labelCacheMemberObj	src/Topography/shapelib/mapserver.h	/^  } labelCacheMemberObj;$/;"	t	typeref:struct:__anon39
labelCacheObj	src/Topography/shapelib/mapserver.h	/^  } labelCacheObj;$/;"	t	typeref:struct:__anon42
labelCacheSlotObj	src/Topography/shapelib/mapserver.h	/^  } labelCacheSlotObj;$/;"	t	typeref:struct:__anon41
labelLeaderObj	src/Topography/shapelib/mapserver.h	/^  } labelLeaderObj;$/;"	t	typeref:struct:__anon36
labelObj	src/Topography/shapelib/mapserver.h	/^  struct labelObj{$/;"	s
labelObj	src/Topography/shapelib/mapserver.h	/^typedef struct labelObj labelObj;$/;"	t	typeref:struct:labelObj
labelPathObj	src/Topography/shapelib/mapserver.h	/^  } labelPathObj;$/;"	t	typeref:struct:__anon23
labelStyleObj	src/Topography/shapelib/mapserver.h	/^  } labelStyleObj;$/;"	t	typeref:struct:__anon64
label_auto_result	src/Topography/shapelib/mapserver.h	/^  struct label_auto_result {$/;"	s
label_blank_brush	src/Look/ChartLook.hpp	/^  Brush label_blank_brush;$/;"	m	struct:ChartLook
label_block	src/MapWindow/MapWindow.hpp	/^  LabelBlock label_block;$/;"	m	class:MapWindow
label_block	src/MapWindow/TargetMapWindow.hpp	/^  LabelBlock label_block;$/;"	m	class:TargetMapWindow
label_bottom	src/Gauge/GaugeVario.hpp	/^    int label_right, label_top, label_bottom, label_y;$/;"	m	struct:GaugeVario::LabelValueGeometry
label_bounds	src/Topography/shapelib/mapserver.h	/^  } label_bounds;$/;"	t	typeref:struct:__anon37
label_brush	src/Look/AirspaceLook.hpp	/^  Brush label_brush;$/;"	m	struct:AirspaceLook
label_cache_mode	src/Topography/shapelib/mapserver.h	/^} label_cache_mode;$/;"	t	typeref:enum:__anon60
label_field	src/Topography/TopographyFile.hpp	/^  const int label_field;$/;"	m	class:TopographyFile
label_follow_result	src/Topography/shapelib/mapserver.h	/^  struct label_follow_result {$/;"	s
label_font	src/Look/ChartLook.hpp	/^  Font label_font;$/;"	m	struct:ChartLook
label_font	src/Look/FlarmTrafficLook.hpp	/^  Font label_font, side_info_font, no_traffic_font;$/;"	m	struct:FlarmTrafficLook
label_pen	src/Look/AirspaceLook.hpp	/^  Pen label_pen;$/;"	m	struct:AirspaceLook
label_points	src/Topography/shapelib/mapserver.h	/^    pointObj *label_points;$/;"	m	struct:label_auto_result
label_pos	src/Gauge/GaugeVario.hpp	/^    PixelPoint label_pos, value_pos;$/;"	m	struct:GaugeVario::BallastGeometry
label_pos	src/Gauge/GaugeVario.hpp	/^    PixelPoint label_pos, value_pos;$/;"	m	struct:GaugeVario::BugsGeometry
label_position	src/Dialogs/SimulatorPromptWindow.hpp	/^  PixelPoint label_position;$/;"	m	class:final
label_rect	src/Gauge/GaugeVario.hpp	/^    PixelRect label_rect, value_rect;$/;"	m	struct:GaugeVario::BallastGeometry
label_rect	src/Gauge/GaugeVario.hpp	/^    PixelRect label_rect, value_rect;$/;"	m	struct:GaugeVario::BugsGeometry
label_right	src/Gauge/GaugeVario.hpp	/^    int label_right, label_top, label_bottom, label_y;$/;"	m	struct:GaugeVario::LabelValueGeometry
label_selection	src/Renderer/AirspaceRendererSettings.hpp	/^  } label_selection;$/;"	m	struct:AirspaceRendererSettings	typeref:class:AirspaceRendererSettings::LabelSelection
label_selection	src/Renderer/WaypointRendererSettings.hpp	/^  } label_selection;$/;"	m	struct:WaypointRendererSettings	typeref:class:WaypointRendererSettings::LabelSelection
label_text_color	src/Look/AirspaceLook.hpp	/^  Color label_text_color;$/;"	m	struct:AirspaceLook
label_threshold	src/Topography/TopographyFile.hpp	/^  const double label_threshold;$/;"	m	class:TopographyFile
label_top	src/Gauge/GaugeVario.hpp	/^    int label_right, label_top, label_bottom, label_y;$/;"	m	struct:GaugeVario::LabelValueGeometry
label_y	src/Gauge/GaugeVario.hpp	/^    int label_right, label_top, label_bottom, label_y;$/;"	m	struct:GaugeVario::LabelValueGeometry
labelcache	src/Topography/shapelib/mapserver.h	/^    int labelcache, postlabelcache; \/* on or off *\/$/;"	m	struct:layerObj
labelcache	src/Topography/shapelib/mapserver.h	/^    labelCacheObj labelcache; \/* we need this here so multiple feature processors can access it *\/$/;"	m	struct:mapObj
labelformat	src/Topography/shapelib/mapserver.h	/^    char    *labelformat;$/;"	m	struct:__anon49
labelitem	src/Topography/shapelib/mapserver.h	/^    char *labelitem;$/;"	m	struct:layerObj
labelitemindex	src/Topography/shapelib/mapserver.h	/^    int labelitemindex;$/;"	m	struct:layerObj
labelmaxscaledenom	src/Topography/shapelib/mapserver.h	/^    double labelminscaledenom, labelmaxscaledenom;$/;"	m	struct:layerObj
labelminscaledenom	src/Topography/shapelib/mapserver.h	/^    double labelminscaledenom, labelmaxscaledenom;$/;"	m	struct:layerObj
labelrequires	src/Topography/shapelib/mapserver.h	/^    char *labelrequires;$/;"	m	struct:layerObj
labels	src/Renderer/AirspaceLabelList.hpp	/^  StaticArray<Label, 512u> labels;$/;"	m	class:AirspaceLabelList
labels	src/Renderer/WaypointLabelList.hpp	/^  StaticArray<Label, 256u> labels;$/;"	m	class:WaypointLabelList
labels	src/Renderer/WaypointRenderer.cpp	/^  WaypointLabelList labels;$/;"	m	class:final	file:
labels	src/Topography/shapelib/mapserver.h	/^    labelCacheMemberObj *labels;$/;"	m	struct:__anon41
labels	src/Topography/shapelib/mapserver.h	/^    labelObj **labels;$/;"	m	struct:classObj
landable_reachable	src/Engine/Task/Stats/CommonStats.hpp	/^  bool landable_reachable;$/;"	m	class:CommonStats
landable_render_mode	src/Renderer/WaypointRendererSettings.hpp	/^  LabelShape landable_render_mode;$/;"	m	struct:WaypointRendererSettings
landable_rendering_scale	src/Renderer/WaypointRendererSettings.hpp	/^  int landable_rendering_scale;$/;"	m	struct:WaypointRendererSettings
landable_style	src/Renderer/WaypointRendererSettings.hpp	/^  } landable_style;$/;"	m	struct:WaypointRendererSettings	typeref:class:WaypointRendererSettings::LandableStyle
landing_location	src/NMEA/FlyingState.hpp	/^  GeoPoint landing_location;$/;"	m	struct:FlyingState
landing_time	src/Logger/FlightLogger.hpp	/^  BrokenDateTime landing_time;$/;"	m	class:FlightLogger
landing_time	src/NMEA/FlyingState.hpp	/^  double landing_time;$/;"	m	struct:FlyingState
landscape	src/InfoBoxes/InfoBoxLayout.hpp	/^    bool landscape;$/;"	m	struct:InfoBoxLayout::Layout
landscape	src/Screen/Layout.cpp	/^  bool landscape = false;$/;"	m	namespace:Layout	file:
language	src/Language/LanguageGlue.hpp	/^  unsigned language;$/;"	m	struct:BuiltinLanguage
language_allowed	src/Language/Language.cpp	/^static bool language_allowed = false;$/;"	v	file:
language_table	src/Language/LanguageGlue.cpp	/^const BuiltinLanguage language_table[] = {$/;"	v
language_table	src/Units/UnitsGlue.cpp	/^const struct language_unit_map language_table[] = {$/;"	v	typeref:struct:language_unit_map
language_unit_map	src/Units/UnitsGlue.cpp	/^struct language_unit_map {$/;"	s	file:
lar	src/Topography/shapelib/mapserver.h	/^    struct label_auto_result lar;$/;"	m	struct:label_follow_result	typeref:struct:label_follow_result::label_auto_result
large_extra	src/Widget/TabWidget.hpp	/^  bool large_extra = false;$/;"	m	class:TabWidget
large_threshold_flat	src/Engine/Contest/Solvers/OLCTriangleRules.hpp	/^    :large_threshold_flat(_large_threshold_flat) {}$/;"	f	class:OLCTriangleValidator
large_threshold_flat	src/Engine/Contest/Solvers/OLCTriangleRules.hpp	/^  unsigned large_threshold_flat;$/;"	m	class:OLCTriangleValidator
large_threshold_m	src/Engine/Contest/Solvers/OLCTriangleRules.hpp	/^  static inline constexpr double large_threshold_m = 500000; \/\/ 500km for DMSt\/OLC$/;"	m	struct:OLCTriangleConstants
last	src/Logger/FlightParser.hpp	/^  char *last;$/;"	m	class:FlightParser
last	src/Monitor/AirspaceWarningMonitor.hpp	/^  Validity last;$/;"	m	class:AirspaceWarningMonitor
last	src/UIUtil/KineticManager.hpp	/^  int last;$/;"	m	class:KineticManager
last	src/time/GPSClock.hpp	/^  double last;$/;"	m	class:GPSClock
last	src/time/PeriodClock.hpp	/^  Stamp last;$/;"	m	class:PeriodClock
last	src/util/OverwritingRingBuffer.hpp	/^  const T &last() const {$/;"	f	class:TrivialOverwritingRingBuffer
last1x	src/ui/canvas/memory/Murphy.hpp	/^  int last1x, last1y, last2x, last2y;$/;"	m	struct:MurphyIterator
last1y	src/ui/canvas/memory/Murphy.hpp	/^  int last1x, last1y, last2x, last2y;$/;"	m	struct:MurphyIterator
last2x	src/ui/canvas/memory/Murphy.hpp	/^  int last1x, last1y, last2x, last2y;$/;"	m	struct:MurphyIterator
last2y	src/ui/canvas/memory/Murphy.hpp	/^  int last1x, last1y, last2x, last2y;$/;"	m	struct:MurphyIterator
lastLat	src/Device/Driver/IMI/Protocol/Types.hpp	/^    IMIDWORD lastLat;$/;"	m	struct:IMI::FlightFinish
lastLon	src/Device/Driver/IMI/Protocol/Types.hpp	/^    IMIDWORD lastLon;$/;"	m	struct:IMI::FlightFinish
last_active_index	src/Monitor/TaskAdvanceMonitor.hpp	/^  unsigned last_active_index;$/;"	m	class:TaskAdvanceMonitor
last_active_tp	src/Computer/RouteComputer.hpp	/^  unsigned last_active_tp;$/;"	m	class:RouteComputer
last_airspeed_available	src/Computer/Wind/WindEKFGlue.hpp	/^  Validity last_ground_speed_available, last_airspeed_available;$/;"	m	class:WindEKFGlue
last_altitude	src/Computer/GlideRatioComputer.hpp	/^  double last_altitude;$/;"	m	class:GlideRatioComputer
last_altitude	src/Dialogs/Settings/dlgBasicSettings.cpp	/^  double last_altitude;$/;"	m	class:final	file:
last_any	src/MergeThread.hpp	/^  MoreData last_any;$/;"	m	class:final
last_ballast	src/Gauge/GaugeVario.hpp	/^  int last_ballast = -1;$/;"	m	class:GaugeVario
last_bounds	src/Topography/Thread.hpp	/^  GeoBounds last_bounds;$/;"	m	class:final
last_bugs	src/Gauge/GaugeVario.hpp	/^  int last_bugs = -1;$/;"	m	class:GaugeVario
last_center	src/Terrain/Thread.hpp	/^  GeoPoint last_center = GeoPoint::Invalid();$/;"	m	class:final
last_circling	src/Computer/Events.hpp	/^  bool last_circling;$/;"	m	class:final
last_circling	src/Computer/LiftDatabaseComputer.hpp	/^  bool last_circling;$/;"	m	class:LiftDatabaseComputer
last_climb_start_time	src/Computer/StatsComputer.hpp	/^  double last_climb_start_time, last_cruise_start_time;$/;"	m	class:StatsComputer
last_climb_time	src/Tracking/SkyLines/Glue.hpp	/^  double last_climb_time = -1;$/;"	m	class:SkyLinesTracking::Glue
last_color_ramp	src/Terrain/TerrainRenderer.hpp	/^  const ColorRamp *last_color_ramp = nullptr;$/;"	m	class:TerrainRenderer
last_color_ramp	src/Weather/Rasp/RaspRenderer.hpp	/^  const ColorRamp *last_color_ramp = nullptr;$/;"	m	class:RaspRenderer
last_cruise_start_time	src/Computer/StatsComputer.hpp	/^  double last_climb_start_time, last_cruise_start_time;$/;"	m	class:StatsComputer
last_date	src/Device/Driver/XCTracer/Internal.hpp	/^  BrokenDate last_date = BrokenDate::Invalid();$/;"	m	class:final
last_day	src/time/WrapClock.hpp	/^  unsigned last_day;$/;"	m	class:WrapClock
last_display_mode	src/MapWindow/GlueMapWindow.hpp	/^  DisplayMode last_display_mode = DisplayMode::NONE;$/;"	m	class:GlueMapWindow
last_drag	src/Form/Form.hpp	/^  PixelPoint last_drag;$/;"	m	class:WndForm
last_enabled	src/Computer/WaveComputer.hpp	/^  bool last_enabled;$/;"	m	class:WaveComputer
last_final_glide	src/Computer/Events.hpp	/^  bool last_final_glide;$/;"	m	class:final
last_fix	src/MergeThread.hpp	/^  MoreData last_fix;$/;"	m	class:final
last_flying	src/Computer/Events.hpp	/^  bool last_flying;$/;"	m	class:final
last_flying	src/Computer/TaskComputer.hpp	/^  bool last_flying;$/;"	m	class:TaskComputer
last_flying	src/Logger/GlueFlightLogger.hpp	/^  bool last_on_ground, last_flying;$/;"	m	class:GlueFlightLogger
last_flying	src/Tracking/TrackingGlue.hpp	/^  bool flying = false, last_flying;$/;"	m	class:final
last_ground_altitude	src/Computer/FlyingComputer.hpp	/^  double last_ground_altitude;$/;"	m	class:FlyingComputer
last_ground_speed_available	src/Computer/Wind/CirclingWind.hpp	/^  Validity last_track_available, last_ground_speed_available;$/;"	m	class:CirclingWind
last_ground_speed_available	src/Computer/Wind/WindEKFGlue.hpp	/^  Validity last_ground_speed_available, last_airspeed_available;$/;"	m	class:WindEKFGlue
last_heading	src/Computer/CirclingComputer.hpp	/^  Angle last_track, last_heading;$/;"	m	class:CirclingComputer
last_heading	src/Computer/LiftDatabaseComputer.hpp	/^  Angle last_heading;$/;"	m	class:LiftDatabaseComputer
last_heading	src/Dialogs/Airspace/AirspaceList.cpp	/^static Angle last_heading;$/;"	v	file:
last_heading	src/Dialogs/Waypoint/WaypointList.cpp	/^  Angle last_heading;$/;"	m	class:WaypointFilterWidget	file:
last_heading	src/Dialogs/Waypoint/WaypointList.cpp	/^  Angle last_heading;$/;"	m	class:final	file:
last_hour	src/Engine/Task/Stats/TaskStats.hpp	/^  WindowStats last_hour;$/;"	m	class:TaskStats
last_id	src/Monitor/MatTaskMonitor.hpp	/^  unsigned last_id;$/;"	m	class:MatTaskMonitor
last_input_date	src/time/WrapClock.hpp	/^  BrokenDate last_input_date;$/;"	m	class:WrapClock
last_level	src/Atmosphere/CuSonde.hpp	/^  unsigned short last_level;$/;"	m	class:CuSonde
last_location	src/Computer/GlideRatioComputer.hpp	/^  GeoPoint last_location;$/;"	m	class:GlideRatioComputer
last_location	src/Computer/GroundSpeedComputer.hpp	/^  GeoPoint last_location;$/;"	m	class:GroundSpeedComputer
last_location	src/Computer/LogComputer.hpp	/^  GeoPoint last_location;$/;"	m	class:LogComputer
last_location	src/Computer/StatsComputer.hpp	/^  GeoPoint last_location;$/;"	m	class:StatsComputer
last_location_available	src/Computer/GlideRatioComputer.hpp	/^  Validity last_location_available;$/;"	m	class:GlideRatioComputer
last_location_available	src/Computer/GroundSpeedComputer.hpp	/^  Validity last_location_available;$/;"	m	class:GroundSpeedComputer
last_location_available	src/Computer/TaskComputer.hpp	/^  Validity last_location_available;$/;"	m	class:TaskComputer
last_location_available	src/Computer/WaveComputer.hpp	/^  Validity last_location_available;$/;"	m	class:WaveComputer
last_min_location	src/Engine/Task/Ordered/OrderedTask.hpp	/^  GeoPoint last_min_location;$/;"	m	class:final
last_modified	src/Dialogs/FileManager.cpp	/^    StaticString<32u> last_modified;$/;"	m	struct:ManagedFileListWidget::FileItem	file:
last_need_to_arm	src/Monitor/TaskAdvanceMonitor.hpp	/^  bool last_need_to_arm;$/;"	m	class:TaskAdvanceMonitor
last_netto_vario_available	src/Computer/WaveComputer.hpp	/^  Validity last_netto_vario_available;$/;"	m	class:WaveComputer
last_new_traffic	src/Computer/Events.hpp	/^  Validity last_new_traffic;$/;"	m	class:final
last_on_ground	src/Logger/GlueFlightLogger.hpp	/^  bool last_on_ground, last_flying;$/;"	m	class:GlueFlightLogger
last_output_date	src/time/WrapClock.hpp	/^  BrokenDate last_output_date;$/;"	m	class:WrapClock
last_page	src/Dialogs/Waypoint/dlgWaypointDetails.cpp	/^  int page = 0, last_page = 0;$/;"	m	class:final	file:
last_page_index	src/Form/TabMenuDisplay.hpp	/^    unsigned last_page_index;$/;"	m	struct:final::MainMenuButton
last_point	src/Renderer/TaskPointRenderer.hpp	/^  GeoPoint last_point;$/;"	m	class:TaskPointRenderer
last_quantisation_pixels	src/Terrain/RasterRenderer.hpp	/^  unsigned last_quantisation_pixels = -1;$/;"	m	class:RasterRenderer
last_radius	src/Terrain/Thread.hpp	/^  double last_radius;$/;"	m	class:final
last_reachable	src/Computer/ConditionMonitor/ConditionMonitorLandableReachable.hpp	/^  bool last_reachable;$/;"	m	class:final
last_serial	src/Topography/CachedTopographyRenderer.hpp	/^  unsigned last_serial;$/;"	m	class:CachedTopographyRenderer
last_stamp	src/time/WrapClock.hpp	/^  double last_stamp;$/;"	m	class:WrapClock
last_state	src/Computer/TaskComputer.hpp	/^  AircraftState last_state;$/;"	m	class:TaskComputer
last_state	src/Engine/Util/AircraftStateFilter.hpp	/^  AircraftState last_state;$/;"	m	class:AircraftStateFilter
last_step	src/Form/DataField/Float.hpp	/^  PeriodClock last_step;$/;"	m	class:final
last_step	src/Form/DataField/Integer.hpp	/^  PeriodClock last_step;$/;"	m	class:final
last_step	src/Form/DataField/Time.hpp	/^  PeriodClock last_step;$/;"	m	class:final
last_sun_azimuth	src/Terrain/TerrainRenderer.hpp	/^  Angle last_sun_azimuth = Angle::Zero();$/;"	m	class:TerrainRenderer
last_tad	src/Computer/ConditionMonitor/ConditionMonitorFinalGlide.hpp	/^  double last_tad;$/;"	m	class:final
last_task_type	src/Computer/RouteComputer.hpp	/^  TaskType last_task_type;$/;"	m	class:RouteComputer
last_team_code_update	src/Computer/GlideComputer.cpp	/^static PeriodClock last_team_code_update;$/;"	v	file:
last_teammate_in_sector	src/Computer/Events.hpp	/^  bool enable_team, last_teammate_in_sector;$/;"	m	class:final
last_text	src/Gauge/GaugeVario.hpp	/^    TCHAR last_text[32];$/;"	m	struct:GaugeVario::DrawInfo
last_thermal	src/NMEA/ClimbInfo.hpp	/^  OneClimbInfo last_thermal;$/;"	m	struct:ClimbInfo
last_thermal_average_smooth	src/NMEA/ClimbInfo.hpp	/^  double last_thermal_average_smooth;$/;"	m	struct:ClimbInfo
last_thermal_end_time	src/Computer/StatsComputer.hpp	/^  double last_thermal_end_time;$/;"	m	class:StatsComputer
last_time	src/Device/Driver/Flytec/Device.hpp	/^  double last_time;$/;"	m	class:FlytecDevice
last_time	src/Device/Driver/XCTracer/Internal.hpp	/^  double last_time = 0;$/;"	m	class:final
last_time	src/Device/Parser.hpp	/^  double last_time;$/;"	m	class:NMEAParser
last_time	src/Engine/Task/Computer/IncrementalSpeedComputer.hpp	/^  double last_time;$/;"	m	class:IncrementalSpeedComputer
last_time	src/Logger/FlightLogger.hpp	/^  double last_time;$/;"	m	class:FlightLogger
last_time	src/Logger/GlueFlightLogger.hpp	/^  double last_time;$/;"	m	class:GlueFlightLogger
last_time	src/Weather/Rasp/RaspCache.hpp	/^  unsigned last_time = 0;$/;"	m	class:RaspCache
last_time	src/time/DeltaTime.hpp	/^  double last_time;$/;"	m	class:DeltaTime
last_time	src/time/ReplayClock.hpp	/^  double last_time;$/;"	m	class:ReplayClock
last_time	src/time/WrapClock.hpp	/^  BrokenTime last_time;$/;"	m	class:WrapClock
last_timestamp	src/Tracking/TrackingGlue.hpp	/^  int64_t last_timestamp = 0;$/;"	m	class:final
last_track	src/Computer/CirclingComputer.hpp	/^  Angle last_track, last_heading;$/;"	m	class:CirclingComputer
last_track	src/Computer/Wind/CirclingWind.hpp	/^  Angle last_track;$/;"	m	class:CirclingWind
last_track_available	src/Computer/Wind/CirclingWind.hpp	/^  Validity last_track_available, last_ground_speed_available;$/;"	m	class:CirclingWind
last_traffic	src/Computer/Events.hpp	/^  unsigned last_traffic;$/;"	m	class:final
last_unit	src/Gauge/GaugeVario.hpp	/^    Unit last_unit;$/;"	m	struct:GaugeVario::DrawInfo
last_update	src/Dialogs/Traffic/TrafficList.cpp	/^  Validity last_update;$/;"	m	class:TrafficListWidget	file:
last_update	src/Weather/METAR.hpp	/^  BrokenDateTime last_update;$/;"	m	struct:METAR
last_update	src/Weather/TAF.hpp	/^  BrokenDateTime last_update;$/;"	m	struct:TAF
last_v_diff	src/Gauge/GaugeVario.hpp	/^  double last_v_diff = 0;$/;"	m	class:GaugeVario
last_value	src/Gauge/GaugeVario.hpp	/^    double last_value;$/;"	m	struct:GaugeVario::DrawInfo
last_vario_available	src/Computer/ThermalBandComputer.hpp	/^  Validity last_vario_available;$/;"	m	class:ThermalBandComputer
last_vega_switches	src/ApplyVegaSwitches.cpp	/^static VegaSwitchState last_vega_switches;$/;"	v	file:
last_warning	src/BatteryTimer.hpp	/^  PeriodClock last_warning;$/;"	m	class:BatteryTimer
last_warning_serial	src/Renderer/AirspaceRenderer.hpp	/^  unsigned last_warning_serial;$/;"	m	class:AirspaceRenderer
last_width	src/Gauge/GaugeVario.hpp	/^    unsigned last_width;$/;"	m	struct:GaugeVario::DrawInfo
last_wind	src/Computer/ConditionMonitor/ConditionMonitorWind.hpp	/^  SpeedVector last_wind;$/;"	m	class:final
lastshape	src/Topography/shapelib/mapshape.h	/^    int lastshape;$/;"	m	struct:__anon78
lasttime	src/Device/Driver/Volkslogger/vlconv.h	/^	BrokenDateTime lasttime;  \/\/ time of last fix$/;"	m	struct:DIRENTRY
lat	src/Device/Driver/IMI/Protocol/Types.hpp	/^    IMIDDWORD lat:25;$/;"	m	struct:IMI::FixB
lat	src/Device/Driver/IMI/Protocol/Types.hpp	/^    IMIDWORD lat:25;$/;"	m	struct:IMI::TWaypoint
lat	src/Device/Driver/Volkslogger/vlconv.cpp	/^  long lat;$/;"	m	class:KOORD	file:
lat1	src/Device/Driver/IMI/Protocol/Types.hpp	/^    IMISDWORD lat1:11;$/;"	m	struct:IMI::FixB2
lat2	src/Device/Driver/IMI/Protocol/Types.hpp	/^    IMISDWORD lat2:10;$/;"	m	struct:IMI::FixB2
latest	src/NMEA/Derived.hpp	/^  Validity latest;$/;"	m	struct:AirspaceWarningsInfo
latitude	src/Device/Driver/CAI302/Protocol.hpp	/^    uint32_t latitude, longitude;$/;"	m	struct:CAI302::Navpoint
latitude	src/Device/Driver/LX/LXN.hpp	/^    uint16_t time, latitude, longitude, aalt, galt;$/;"	m	struct:LXN::Position
latitude	src/Device/Driver/LX/LXN.hpp	/^    uint32_t longitude[12], latitude[12];$/;"	m	struct:LXN::Task
latitude	src/Device/Driver/LX/LXN.hpp	/^    uint32_t time, latitude, longitude;$/;"	m	struct:LXN::Origin
latitude	src/Device/Driver/Volkslogger/Database.hpp	/^    uint8_t latitude[3];$/;"	m	struct:Volkslogger::Waypoint
latitude	src/Geo/GeoBounds.hpp	/^  AngleRange latitude;$/;"	m	class:GeoBounds
latitude	src/Geo/GeoPoint.hpp	/^  Angle latitude;$/;"	m	struct:GeoPoint
latitude	src/Tracking/SkyLines/Protocol.hpp	/^  int32_t latitude, longitude;$/;"	m	struct:SkyLinesTracking::GeoPoint
latitude_cos	src/Projection/CompareProjection.hpp	/^  double latitude_cos;$/;"	m	class:CompareProjection
latlon	src/Topography/shapelib/mapserver.h	/^    projectionObj latlon; \/* geographic projection definition *\/$/;"	m	struct:mapObj
layer	src/Topography/shapelib/mapserver.h	/^    int layer;$/;"	m	struct:__anon33
layer	src/Topography/shapelib/mapserver.h	/^    struct layerObj *layer;$/;"	m	struct:classObj	typeref:struct:classObj::layerObj
layerObj	src/Topography/shapelib/mapserver.h	/^  struct layerObj {$/;"	s
layerVTable	src/Topography/shapelib/mapserver.h	/^  struct layerVTable {$/;"	s
layerVTableObj	src/Topography/shapelib/mapserver.h	/^  typedef struct layerVTable layerVTableObj;$/;"	t	typeref:struct:layerVTable
layerindex	src/Topography/shapelib/mapserver.h	/^    int layerindex; \/* indexes *\/$/;"	m	struct:__anon39
layerinfo	src/Topography/shapelib/mapserver.h	/^    void *layerinfo; \/* all connection types should use this generic pointer to a vendor specific structure *\/$/;"	m	struct:layerObj
layerorder	src/Topography/shapelib/mapserver.h	/^    int *layerorder;$/;"	m	struct:mapObj
layers	src/Topography/shapelib/mapserver.h	/^    layerObj **layers;$/;"	m	struct:mapObj
layout	src/InfoBoxes/InfoBoxManager.cpp	/^  InfoBoxLayout::Layout layout;$/;"	m	namespace:InfoBoxManager	file:
ld_vario	src/NMEA/VarioInfo.hpp	/^  double ld_vario;$/;"	m	struct:VarioInfo
leader	src/Topography/shapelib/mapserver.h	/^    labelLeaderObj *leader;$/;"	m	struct:classObj
leader	src/Topography/shapelib/mapserver.h	/^    labelLeaderObj *leader;$/;"	m	struct:labelObj
leaderbbox	src/Topography/shapelib/mapserver.h	/^    rectObj *leaderbbox;$/;"	m	struct:__anon39
leaderline	src/Topography/shapelib/mapserver.h	/^    lineObj *leaderline;$/;"	m	struct:__anon39
leaf	src/util/QuadTree.hxx	/^			:bucket(_bucket), leaf(_leaf) {}$/;"	f	class:const_iterator
leaf	src/util/QuadTree.hxx	/^			:bucket(nullptr), leaf(nullptr) {}$/;"	f	class:const_iterator
leaf	src/util/QuadTree.hxx	/^			:bucket(nullptr), leaf(nullptr) {}$/;"	f	class:iterator
leaf	src/util/QuadTree.hxx	/^			:bucket(other.bucket), leaf(other.leaf) {}$/;"	f	class:const_iterator
leaf	src/util/QuadTree.hxx	/^		Leaf *leaf;$/;"	m	class:iterator
leaf	src/util/QuadTree.hxx	/^		const Leaf *leaf;$/;"	m	class:const_iterator
leaf_allocator	src/util/QuadTree.hxx	/^	LeafAllocator leaf_allocator;$/;"	v
leaves	src/util/QuadTree.hxx	/^		LeafList leaves;$/;"	m	struct:Bucket
leaves	src/util/RadixTree.hpp	/^    LeafList leaves;$/;"	m	struct:RadixTree::Node
left	src/Form/DigitEntry.hpp	/^    unsigned left, right;$/;"	m	struct:CoordinateFormat::Column
left	src/Geo/ConvexHull/GrahamScan.hpp	/^  SearchPoint *left;$/;"	m	class:GrahamScan
left	src/Terrain/RasterProjection.hpp	/^  int left, top;$/;"	m	class:RasterProjection
left	src/ui/canvas/fb/mxcfb.h	/^	__u32 left;$/;"	m	struct:mxcfb_rect
left	src/ui/dim/Rect.hpp	/^  int left, top, right, bottom;$/;"	m	struct:PixelRect
left	src/util/QuadTree.hxx	/^		position_type left, top, right, bottom;$/;"	m	struct:QuadTree::Rectangle
left_padding	src/Renderer/TextRowRenderer.hpp	/^  unsigned left_padding, top_padding;$/;"	m	class:TextRowRenderer
leftrotate	src/util/MD5.cpp	/^leftrotate(uint32_t x, uint32_t c)$/;"	f	file:
leg1	src/Engine/Task/Shapes/FAITrianglePointValidator.hpp	/^  double leg1;$/;"	m	class:FAITrianglePointValidator
leg2	src/Engine/Task/Shapes/FAITrianglePointValidator.hpp	/^  double leg2;$/;"	m	class:FAITrianglePointValidator
leg3	src/Engine/Task/Shapes/FAITrianglePointValidator.hpp	/^  double leg3;$/;"	m	class:FAITrianglePointValidator
leg_active_pen	src/Look/TaskLook.hpp	/^  Pen leg_active_pen;$/;"	m	struct:TaskLook
leg_in	src/Engine/Contest/Solvers/Retrospective.hpp	/^    double leg_in;$/;"	m	struct:Retrospective::NearWaypoint
leg_inactive_pen	src/Look/TaskLook.hpp	/^  Pen leg_inactive_pen;$/;"	m	struct:TaskLook
leg_solutions	src/Engine/Task/Solvers/TaskMacCready.hpp	/^  std::array<GlideResult, MAX_SIZE> leg_solutions;$/;"	m	class:TaskMacCready
legend	src/Topography/shapelib/mapserver.h	/^    legendObj legend;$/;"	m	struct:mapObj
legendObj	src/Topography/shapelib/mapserver.h	/^  } legendObj;$/;"	t	typeref:struct:__anon48
legendformat	src/Topography/shapelib/mapserver.h	/^    char *legendformat;$/;"	m	struct:__anon35
len	src/Terrain/jasper/jp2/jp2_cod.h	/^	uint_fast32_t len;$/;"	m	struct:__anon94
len	src/Terrain/jasper/jpc/jpc_cs.h	/^	uint_fast16_t len;$/;"	m	struct:__anon148
len	src/Terrain/jasper/jpc/jpc_cs.h	/^	uint_fast16_t len;$/;"	m	struct:__anon150
len	src/Terrain/jasper/jpc/jpc_cs.h	/^	uint_fast16_t len;$/;"	m	struct:__anon154
len	src/Terrain/jasper/jpc/jpc_cs.h	/^	uint_fast16_t len;$/;"	m	struct:__anon156
len	src/Terrain/jasper/jpc/jpc_cs.h	/^	uint_fast32_t len;$/;"	m	struct:__anon135
len	src/Terrain/jasper/jpc/jpc_cs.h	/^	uint_fast32_t len;$/;"	m	struct:__anon149
len	src/Terrain/jasper/jpc/jpc_dec.h	/^	uint_fast32_t len;$/;"	m	struct:__anon116
len_	src/Terrain/jasper/jas_stream.h	/^	uint_fast32_t len_;$/;"	m	struct:__anon99
length	src/Device/Driver/FLARM/BinaryProtocol.hpp	/^    PackedLE16 length;$/;"	m	struct:FLARM::FrameHeader
length	src/Device/Driver/LX/LXN.hpp	/^    uint8_t length, type;$/;"	m	struct:LXN::Security
length	src/Device/Driver/LX/LXN.hpp	/^    uint8_t length;$/;"	m	struct:LXN::String
length	src/Engine/Waypoint/Runway.hpp	/^  uint16_t length;$/;"	m	class:Runway
length	src/Form/DigitEntry.hpp	/^  unsigned length;$/;"	m	class:CoordinateFormat
length	src/Form/List.hpp	/^  unsigned length = 0;$/;"	m	class:ListControl
length	src/Language/MOFile.hpp	/^    uint32_t length;$/;"	m	struct:MOFile::mo_table_entry
length	src/MapSettings.hpp	/^  } length;$/;"	m	struct:TrailSettings	typeref:class:TrailSettings::Length
length	src/Topography/shapelib/mapstring.c	/^    size_t length;$/;"	m	struct:msStringBuffer	file:
length	src/XML/Parser.cpp	/^    size_t length;$/;"	m	struct:XML::NextToken	file:
length	src/net/http/ToBuffer.hpp	/^  size_t length;$/;"	m	class:Net::DownloadToBufferJob
length	src/util/StaticString.hxx	/^	size_type length() const {$/;"	f	class:StaticStringBase
length_editable	src/Dialogs/Task/Widgets/LineSectorZoneEditWidget.cpp	/^   length_editable(_length_editable) {}$/;"	f
length_editable	src/Dialogs/Task/Widgets/LineSectorZoneEditWidget.hpp	/^  const bool length_editable;$/;"	m	class:LineSectorZoneEditWidget
lengths	src/Device/Driver/LX/Protocol.hpp	/^    uint16_t lengths[N];$/;"	m	struct:LX::MemorySection
leonardo_driver	src/Device/Driver/Leonardo.cpp	/^const struct DeviceRegister leonardo_driver = {$/;"	v	typeref:struct:DeviceRegister
lettercursor	src/Dialogs/KnobTextEntry.cpp	/^  int lettercursor;$/;"	m	class:final	file:
level	src/Weather/PCMet/Overlays.hpp	/^  unsigned level;$/;"	m	struct:PCMet::OverlayInfo
levil_driver	src/Device/Driver/LevilAHRS_G.cpp	/^const struct DeviceRegister levil_driver = {$/;"	v	typeref:struct:DeviceRegister
li	src/ui/event/poll/libinput/LibInputHandler.hpp	/^  struct libinput* li = nullptr;$/;"	m	class:UI::final	typeref:struct:UI::final::libinput
li_if	src/ui/event/poll/libinput/LibInputHandler.hpp	/^  struct libinput_interface* li_if = nullptr;$/;"	m	class:UI::final	typeref:struct:UI::final::libinput_interface
lift	src/Cloud/Thermal.hpp	/^  double lift;$/;"	m	struct:CloudThermal
lift	src/Tracking/SkyLines/Data.hpp	/^    double lift;$/;"	m	struct:SkyLinesTracking::Data::Thermal
lift	src/Tracking/SkyLines/Protocol.hpp	/^  uint16_t lift;$/;"	m	struct:SkyLinesTracking::Thermal
lift	src/Tracking/SkyLines/Protocol.hpp	/^  uint16_t lift;$/;"	m	struct:SkyLinesTracking::Wave
lift_brush	src/Look/VarioLook.hpp	/^  Brush sink_brush, lift_brush;$/;"	m	struct:VarioLook
lift_color	src/Look/VarioLook.hpp	/^  Color sink_color, lift_color;$/;"	m	struct:VarioLook
lift_database	src/NMEA/VarioInfo.hpp	/^  LiftDatabase lift_database;$/;"	m	struct:VarioInfo
lift_database_computer	src/Computer/GlideComputerAirData.hpp	/^  LiftDatabaseComputer lift_database_computer;$/;"	m	class:GlideComputerAirData
lift_rate	src/NMEA/ClimbInfo.hpp	/^  double lift_rate;$/;"	m	struct:OneClimbInfo
lift_rate	src/NMEA/ThermalLocator.hpp	/^  double lift_rate;$/;"	m	struct:ThermalSource
lift_weight	src/Computer/ThermalLocator.hpp	/^    double lift_weight;$/;"	m	struct:ThermalLocator::Point
light_border_brush	src/Look/ButtonLook.hpp	/^    Brush light_border_brush, dark_border_brush;$/;"	m	struct:ButtonLook::StateLook
light_border_pen	src/Look/ButtonLook.hpp	/^    Pen light_border_pen, dark_border_pen;$/;"	m	struct:ButtonLook::StateLook
light_gray_brush	src/Look/WaypointLook.hpp	/^  Brush white_brush, light_gray_brush, magenta_brush, orange_brush;$/;"	m	struct:WaypointLook
limit_parameters	src/Dialogs/Device/Vega/LimitParameters.hpp	/^VegaParametersWidget::StaticParameter limit_parameters[] = {$/;"	v
line	src/Topography/shapelib/mapprimitive.h	/^  lineObj *line;$/;"	m	struct:__anon72
line1	src/Device/Driver/LX/LXN.hpp	/^    uint8_t line1[31], line2[32], line3[3];$/;"	m	struct:LXN::Security7000
line1	src/Renderer/UnitSymbolRenderer.cpp	/^  const TCHAR *line1;$/;"	m	struct:UnitSymbolStrings	file:
line2	src/Device/Driver/LX/LXN.hpp	/^    uint8_t line1[31], line2[32], line3[3];$/;"	m	struct:LXN::Security7000
line2	src/Renderer/UnitSymbolRenderer.cpp	/^  const TCHAR *line2;$/;"	m	struct:UnitSymbolStrings	file:
line3	src/Device/Driver/LX/LXN.hpp	/^    uint8_t line1[31], line2[32], line3[3];$/;"	m	struct:LXN::Security7000
lineObj	src/Topography/shapelib/mapprimitive.h	/^} lineObj;$/;"	t	typeref:struct:__anon71
line_height	src/Topography/shapelib/mapserver.h	/^  int line_height;$/;"	m	struct:textPathObj
line_lengths	src/Topography/shapelib/mapserver.h	/^  struct line_lengths {$/;"	s
line_mask	src/ui/canvas/memory/Murphy.hpp	/^  const unsigned line_mask;$/;"	m	struct:MurphyIterator
line_mask_position	src/ui/canvas/memory/Murphy.hpp	/^  unsigned line_mask_position;$/;"	m	struct:MurphyIterator
line_number	src/io/BufferedReader.hxx	/^	unsigned line_number = 0;$/;"	m	class:BufferedReader
line_only	src/Device/Driver/IMI/Protocol/Types.hpp	/^    IMIDWORD line_only:1;$/;"	m	struct:IMI::TObservationZone
line_pen	src/Look/TraceHistoryLook.hpp	/^  Pen line_pen;$/;"	m	struct:TraceHistoryLook
line_spacing	src/Android/TextUtil.hpp	/^  unsigned line_spacing, style;$/;"	m	class:TextUtil
linecap	src/Topography/shapelib/mapserver.h	/^    int linecap, linejoin; \/*moved from symbolObj in version 6.0*\/$/;"	m	struct:styleObj
linecap	src/Topography/shapelib/mapserver.h	/^    int linecap; \/* MS_CJC_TRIANGLE, MS_CJC_SQUARE, MS_CJC_ROUND, MS_CJC_BUTT *\/$/;"	m	struct:__anon62
linejoin	src/Topography/shapelib/mapserver.h	/^    int linecap, linejoin; \/*moved from symbolObj in version 6.0*\/$/;"	m	struct:styleObj
linejoin	src/Topography/shapelib/mapserver.h	/^    int linejoin; \/* MS_CJC_BEVEL MS_CJC_ROUND MS_CJC_MITER *\/$/;"	m	struct:__anon62
linejoinmaxsize	src/Topography/shapelib/mapserver.h	/^    double linejoinmaxsize; \/*moved from symbolObj in version 6.0*\/$/;"	m	struct:styleObj
linejoinmaxsize	src/Topography/shapelib/mapserver.h	/^    double linejoinmaxsize;$/;"	m	struct:__anon62
lines	src/Gauge/GaugeVario.hpp	/^  BulkPixelPoint lines[gmax * 2 + 1];$/;"	m	class:GaugeVario
lines	src/Topography/XShape.hpp	/^  uint16_t lines[MAX_LINES];$/;"	m	class:XShape
link	src/Engine/Route/AirspaceRoute.cpp	/^  const RouteLink &link;$/;"	m	class:final	file:
links	src/Engine/Route/RoutePlanner.hpp	/^  RouteLinkQueue links;$/;"	m	class:RoutePlanner
list	src/Android/BluetoothHelper.cpp	/^BluetoothHelper::list(JNIEnv *env)$/;"	f	class:BluetoothHelper
list	src/Cloud/Client.hpp	/^  List list;$/;"	m	class:CloudClientContainer
list	src/Cloud/Thermal.hpp	/^  List list;$/;"	m	class:CloudThermalContainer
list	src/Dialogs/Airspace/AirspaceList.cpp	/^  AirspaceListWidget *list;$/;"	m	class:final	file:
list	src/Dialogs/Airspace/dlgAirspaceWarnings.cpp	/^static AirspaceWarningListWidget *list;$/;"	v	file:
list	src/Dialogs/FileManager.cpp	/^  const std::vector<AvailableFile> &list;$/;"	m	class:final	file:
list	src/Dialogs/MapItemListDialog.cpp	/^  const MapItemList &list;$/;"	m	class:final	file:
list	src/Dialogs/Plane/PlaneListDialog.cpp	/^    std::vector<ListItem> &list;$/;"	m	class:final::PlaneFileVisitor	file:
list	src/Dialogs/Plane/PlaneListDialog.cpp	/^  std::vector<ListItem> list;$/;"	m	class:final	file:
list	src/Dialogs/ProfileListDialog.cpp	/^    std::vector<ListItem> &list;$/;"	m	class:final::ProfileFileVisitor	file:
list	src/Dialogs/ProfileListDialog.cpp	/^  std::vector<ListItem> list;$/;"	m	class:final	file:
list	src/Dialogs/Traffic/TrafficList.cpp	/^  TrafficListWidget *list;$/;"	m	class:TrafficListButtons	file:
list	src/Dialogs/Waypoint/WaypointList.cpp	/^  WaypointListWidget *list;$/;"	m	class:WaypointListButtons	file:
list	src/FLARM/List.hpp	/^  TrivialArray<FlarmTraffic, MAX_COUNT> list;$/;"	m	struct:TrafficList
list	src/GliderLink/List.hpp	/^  TrivialArray<GliderLinkTraffic, MAX_COUNT> list;$/;"	m	struct:GliderLinkTrafficList
list	src/Kobo/ToolsDialog.cpp	/^  std::vector<ListItem> &list;$/;"	m	class:ScriptFileVisitor	file:
list	src/Kobo/ToolsDialog.cpp	/^  std::vector<ListItem> list;$/;"	m	class:final	file:
list	src/Look/DialogLook.hpp	/^  } list;$/;"	m	struct:DialogLook	typeref:struct:DialogLook::__anon13
list	src/MapWindow/Items/AirspaceBuilder.cpp	/^  StaticArray<const AbstractAirspace *,64> list;$/;"	m	class:AirspaceWarningList	file:
list	src/MapWindow/Items/Builder.hpp	/^  MapItemList &list;$/;"	m	class:MapItemListBuilder
list	src/Waypoint/WaypointListBuilder.hpp	/^  WaypointList &list;$/;"	m	class:final
list	src/ui/window/custom/WList.hpp	/^  List list;$/;"	m	class:WindowList
listNode	src/Topography/shapelib/mapserver.h	/^  typedef struct listNode {$/;"	s
list_method	src/Android/BluetoothHelper.cpp	/^static jmethodID list_method, connect_method, createServer_method;$/;"	m	namespace:BluetoothHelper	file:
listener	src/Device/Port/Port.hpp	/^  PortListener *const listener;$/;"	m	class:Port
listener	src/Device/Port/TCPPort.hpp	/^  SocketEvent listener, connection;$/;"	m	class:final
listener	src/Dialogs/Airspace/AirspaceList.cpp	/^  DataFieldListener *listener;$/;"	m	class:final	file:
listener	src/Dialogs/Device/DeviceEditWidget.cpp	/^   config(_config), listener(NULL) {}$/;"	f
listener	src/Dialogs/Device/DeviceEditWidget.hpp	/^  Listener *listener;$/;"	m	class:DeviceEditWidget
listener	src/Dialogs/Plane/PolarShapeEditWidget.cpp	/^  :shape(_shape), listener(_listener) {}$/;"	f
listener	src/Dialogs/Plane/PolarShapeEditWidget.hpp	/^  DataFieldListener *const listener;$/;"	m	class:PolarShapeEditWidget
listener	src/Dialogs/Settings/Panels/PagesConfigPanel.cpp	/^  Listener &listener;$/;"	m	class:final	file:
listener	src/Dialogs/Task/Widgets/ObservationZoneEditWidget.hpp	/^  Listener *listener;$/;"	m	class:ObservationZoneEditWidget
listener	src/Dialogs/Traffic/TrafficList.cpp	/^  DataFieldListener *listener;$/;"	m	class:TrafficFilterWidget	file:
listener	src/Dialogs/Waypoint/WaypointList.cpp	/^  DataFieldListener *listener;$/;"	m	class:WaypointFilterWidget	file:
listener	src/Form/DataField/Base.hpp	/^  DataFieldListener *listener;$/;"	m	class:DataField
listeners	src/Android/DownloadManager.hpp	/^  std::list<Net::DownloadListener *> listeners;$/;"	m	class:AndroidDownloadManager
listeners	src/Blackboard/LiveBlackboard.hpp	/^  std::list<BlackboardListener *> listeners;$/;"	m	class:LiveBlackboard
listeners	src/Device/MultipleDevices.hpp	/^  std::list<PortListener *> listeners;$/;"	m	class:final
listeners	src/net/http/DownloadManager.cpp	/^  std::list<Net::DownloadListener *> listeners;$/;"	m	class:final	file:
listeners_mutex	src/Device/MultipleDevices.hpp	/^  Mutex listeners_mutex;$/;"	m	class:final
livetrack24	src/Tracking/TrackingSettings.hpp	/^  LiveTrack24::Settings livetrack24;$/;"	m	struct:TrackingSettings
ll	src/Topography/shapelib/mapserver.h	/^    struct line_lengths *ll;$/;"	m	struct:polyline_lengths	typeref:struct:polyline_lengths::line_lengths
lo	src/util/ByteOrder.hxx	/^	uint8_t hi, lo;$/;"	m	class:PackedBE16
lo	src/util/ByteOrder.hxx	/^	uint8_t lo, hi;$/;"	m	class:PackedLE16
load	src/InfoBoxes/Panel/Panel.hpp	/^  std::unique_ptr<Widget> (*load)(unsigned id);$/;"	m	class:InfoBoxPanel::std
loadFileBitmap	src/Android/NativeView.cpp	/^jobject NativeView::loadFileBitmap(Path path)$/;"	f	class:NativeView
loadFileBitmap_method	src/Android/NativeView.cpp	/^jmethodID NativeView::loadFileBitmap_method;$/;"	m	class:NativeView	file:
loadFileBitmap_method	src/Android/NativeView.hpp	/^  static jmethodID loadFileBitmap_method;$/;"	m	class:NativeView
loadFileTiff	src/Android/NativeView.cpp	/^jobject NativeView::loadFileTiff(Path path)$/;"	f	class:NativeView
loadImageFromFile	src/Topography/shapelib/mapserver.h	/^    int WARN_UNUSED (*loadImageFromFile)(char *path, rasterBufferObj *rb);$/;"	m	struct:rendererVTableObj
loadResourceBitmap	src/Android/NativeView.hpp	/^  jobject loadResourceBitmap(const char *name) {$/;"	f	class:NativeView
loadResourceBitmap_method	src/Android/NativeView.cpp	/^jmethodID NativeView::loadResourceBitmap_method;$/;"	m	class:NativeView	file:
loadResourceBitmap_method	src/Android/NativeView.hpp	/^  static jmethodID loadResourceBitmap_method;$/;"	m	class:NativeView
load_button	src/Dialogs/Plane/PlaneListDialog.cpp	/^  Button *edit_button, *delete_button, *load_button;$/;"	m	class:final	file:
load_flags	src/ui/canvas/freetype/Font.cpp	/^static FT_Int32 load_flags = FT_LOAD_DEFAULT;$/;"	v	file:
loaded	src/Dialogs/Device/Vega/VegaParametersWidget.hpp	/^  bool loaded;$/;"	m	class:VegaParametersWidget
loaded	src/Dialogs/Traffic/TrafficList.cpp	/^    bool loaded = false;$/;"	m	struct:TrafficListWidget::Item	file:
loaded	src/Form/DataField/File.hpp	/^  bool loaded;$/;"	m	class:final
loadedlibs	src/lua/Basic.cpp	/^static constexpr luaL_Reg loadedlibs[] = {$/;"	v	file:
loader	src/Terrain/jasper/jpc/jpc_dec.h	/^	void *loader;$/;"	m	struct:__anon129
loc_drift	src/Computer/ThermalLocator.hpp	/^    FlatPoint loc_drift;$/;"	m	struct:ThermalLocator::Point
local_path_code	src/LocalPath.cpp	/^static constexpr TCHAR local_path_code[] = _T("%LOCAL_PATH%\\\\");$/;"	v	file:
location	src/Cloud/Client.hpp	/^  GeoPoint location;$/;"	m	struct:CloudClient
location	src/Computer/ThermalLocator.hpp	/^    GeoPoint location;$/;"	m	struct:ThermalLocator::Point
location	src/Computer/WaveResult.hpp	/^  GeoPoint location;$/;"	m	struct:WaveInfo
location	src/Device/Driver/Volkslogger/vlapi2.h	/^    GeoPoint location;$/;"	m	struct:VLAPI_DATA::WPT
location	src/Dialogs/Airspace/AirspaceList.cpp	/^static GeoPoint location;$/;"	v	file:
location	src/Dialogs/Device/DeviceListDialog.cpp	/^    bool alive:1, location:1, gps:1, baro:1, airspeed:1, vario:1, traffic:1;$/;"	m	struct:final::Flags	file:
location	src/Dialogs/Traffic/TrafficList.cpp	/^    GeoPoint location = GeoPoint::Invalid();$/;"	m	struct:TrafficListWidget::Item	file:
location	src/Dialogs/Waypoint/WaypointList.cpp	/^  const GeoPoint location;$/;"	m	class:final	file:
location	src/Engine/Airspace/AirspaceInterceptSolution.hpp	/^  GeoPoint location;$/;"	m	struct:AirspaceInterceptSolution
location	src/Engine/Airspace/AirspaceSorter.cpp	/^  const GeoPoint location;$/;"	m	class:final	file:
location	src/Engine/Airspace/Predicate/OutsideAirspacePredicate.hpp	/^  const AGeoPoint location;$/;"	m	class:OutsideAirspacePredicate
location	src/Engine/Contest/ContestTrace.hpp	/^  GeoPoint location;$/;"	m	struct:ContestTracePoint
location	src/Engine/Contest/Solvers/Cast.hpp	/^  :time(src.GetTime()), location(src.GetLocation()) {}$/;"	f
location	src/Engine/Contest/Solvers/Retrospective.hpp	/^      :waypoint(std::move(_waypoint)), location(_location) {$/;"	f	struct:Retrospective::NearWaypoint
location	src/Engine/Contest/Solvers/Retrospective.hpp	/^    GeoPoint location;$/;"	m	struct:Retrospective::NearWaypoint
location	src/Engine/Navigation/Aircraft.hpp	/^  GeoPoint location;$/;"	m	struct:AircraftState
location	src/Engine/Task/Points/TaskPoint.hpp	/^  GeoPoint location;$/;"	m	class:TaskPoint
location	src/Engine/Waypoint/Waypoint.hpp	/^  GeoPoint location;$/;"	m	struct:Waypoint
location	src/FLARM/Traffic.hpp	/^  GeoPoint location;$/;"	m	class:FlarmTraffic::AircraftType
location	src/Geo/SearchPoint.hpp	/^  GeoPoint location;$/;"	m	class:SearchPoint
location	src/GliderLink/Traffic.hpp	/^  GeoPoint location;$/;"	m	struct:GliderLinkTraffic
location	src/IGC/IGCDeclaration.hpp	/^  GeoPoint location;$/;"	m	struct:IGCDeclarationTurnpoint
location	src/IGC/IGCFix.hpp	/^  GeoPoint location;$/;"	m	struct:IGCFix
location	src/Input/InputDefaults.cpp	/^  unsigned char mode, location;$/;"	m	struct:flat_label	file:
location	src/Input/InputParser.cpp	/^  unsigned event_id, location;$/;"	m	struct:EventBuilder	file:
location	src/Logger/LoggerImpl.hpp	/^    GeoPoint location;$/;"	m	struct:LoggerImpl::PreTakeoffBuffer
location	src/MapWindow/Items/AirspaceBuilder.cpp	/^  const GeoPoint location;$/;"	m	class:AirspaceAtPointPredicate	file:
location	src/MapWindow/Items/Builder.hpp	/^  GeoPoint location;$/;"	m	class:MapItemListBuilder
location	src/MapWindow/Items/MapItem.hpp	/^  GeoPoint location;$/;"	m	struct:SelfMapItem
location	src/NMEA/Info.hpp	/^  GeoPoint location;$/;"	m	struct:NMEAInfo
location	src/NMEA/ThermalLocator.hpp	/^  GeoPoint location;$/;"	m	struct:ThermalSource
location	src/Renderer/TaskPointRenderer.hpp	/^  const GeoPoint location;$/;"	m	class:TaskPointRenderer
location	src/Replay/CatmullRomInterpolator.hpp	/^    GeoPoint location;$/;"	m	struct:CatmullRomInterpolator::Record
location	src/Tracking/SkyLines/Data.hpp	/^    GeoPoint location;$/;"	m	struct:SkyLinesTracking::Data::Traffic
location	src/Tracking/SkyLines/Protocol.hpp	/^    GeoPoint location;$/;"	m	struct:SkyLinesTracking::TrafficResponsePacket::Traffic
location	src/Tracking/SkyLines/Protocol.hpp	/^  GeoPoint location;$/;"	m	struct:SkyLinesTracking::FixPacket
location	src/Tracking/TrackingGlue.hpp	/^  GeoPoint location;$/;"	m	class:final
location	src/Waypoint/WaypointList.cpp	/^  const GeoPoint &location;$/;"	m	class:WaypointDistanceCompare	file:
location	src/Waypoint/WaypointListBuilder.hpp	/^  const GeoPoint location;$/;"	m	class:final
location	src/Weather/ParsedMETAR.hpp	/^  GeoPoint location;$/;"	m	struct:ParsedMETAR
location	src/ui/window/custom/DoubleClick.hpp	/^  PixelPoint location;$/;"	m	class:DoubleClick
location_available	src/FLARM/Traffic.hpp	/^  bool location_available;$/;"	m	class:FlarmTraffic::AircraftType
location_available	src/NMEA/Info.hpp	/^  Validity location_available;$/;"	m	struct:NMEAInfo
location_available	src/Weather/ParsedMETAR.hpp	/^  bool location_available;$/;"	m	struct:ParsedMETAR
location_delegate	src/Apple/InternalSensors.hpp	/^  LocationDelegate *location_delegate;$/;"	m	class:InternalSensors
location_manager	src/Apple/InternalSensors.hpp	/^  CLLocationManager *location_manager;$/;"	m	class:InternalSensors
location_previous	src/Replay/TaskAutoPilot.hpp	/^  GeoPoint location_previous;$/;"	m	class:AbstractAutoPilot
location_remaining	src/Engine/Task/Stats/ElementStat.hpp	/^  GeoPoint location_remaining;$/;"	m	struct:ElementStat
location_start	src/Replay/TaskAutoPilot.hpp	/^  GeoPoint location_start;$/;"	m	class:AbstractAutoPilot
locations	src/Airspace/AirspaceWarningCopy.hpp	/^  StaticArray<GeoPoint,32> locations;$/;"	m	class:AirspaceWarningCopy
lock	src/Audio/PCMBufferDataSource.hpp	/^  Mutex lock;$/;"	m	class:PCMBufferDataSource
lock	src/Audio/PCMMixer.hpp	/^  Mutex lock;$/;"	m	class:final
lock	src/Audio/PCMMixerDataSource.hpp	/^  Mutex lock;$/;"	m	class:PCMMixerDataSource
lock	src/Audio/PCMResourcePlayer.hpp	/^  Mutex lock;$/;"	m	class:PCMResourcePlayer
lock	src/Logger/Logger.hpp	/^  mutable SharedMutex lock;$/;"	m	class:Logger
lock	src/thread/WindowsSharedMutex.hxx	/^	void lock() {$/;"	f	class:WindowsSharedMutex
lock_shared	src/thread/WindowsSharedMutex.hxx	/^	void lock_shared() {$/;"	f	class:WindowsSharedMutex
locked	src/zzip/lib.h	/^	int * volatile locked;$/;"	m	struct:zzip_dir::__anon184
locxend	src/Terrain/jasper/jpc/jpc_tsfb.h	/^	int locxend;$/;"	m	struct:__anon107
locxstart	src/Terrain/jasper/jpc/jpc_tsfb.h	/^	int locxstart;$/;"	m	struct:__anon107
locyend	src/Terrain/jasper/jpc/jpc_tsfb.h	/^	int locyend;$/;"	m	struct:__anon107
locystart	src/Terrain/jasper/jpc/jpc_tsfb.h	/^	int locystart;$/;"	m	struct:__anon107
log	src/Topography/shapelib/mapserver.h	/^    char *log;$/;"	m	struct:__anon35
log_clock	src/Computer/LogComputer.hpp	/^  GPSClock log_clock;$/;"	m	class:LogComputer
log_computer	src/Computer/GlideComputer.hpp	/^  LogComputer log_computer;$/;"	m	class:GlideComputer
log_int	src/Dialogs/Device/FLARM/ConfigWidget.hpp	/^  unsigned baud, priv, thre, range, acft, log_int, notrack;$/;"	m	class:final
logfont	src/Look/FontDescription.hpp	/^  LOGFONT logfont;$/;"	m	class:FontDescription
logger	src/Components.cpp	/^Logger *logger;$/;"	v
logger	src/Computer/LogComputer.hpp	/^  Logger *logger;$/;"	m	class:LogComputer
logger	src/Computer/Settings.hpp	/^  LoggerSettings logger;$/;"	m	struct:ComputerSettings
logger	src/Logger/Logger.hpp	/^  LoggerImpl logger;$/;"	m	class:Logger
logger	src/Replay/Replay.hpp	/^  Logger *logger;$/;"	m	class:final
logger_id	src/Device/Driver/LX/Protocol.hpp	/^    uint16_t logger_id;$/;"	m	struct:LX::FlightInfo
logger_id	src/Logger/Settings.hpp	/^  StaticString<32> logger_id;$/;"	m	struct:LoggerSettings
logger_parameters	src/Dialogs/Device/Vega/LoggerParameters.hpp	/^VegaParametersWidget::StaticParameter logger_parameters[] = {$/;"	v
logging_code	src/Device/Driver/CAI302/Protocol.hpp	/^    PackedBE16 logging_code;$/;"	m	struct:CAI302::FileBinary
logo	src/Dialogs/StartupDialog.cpp	/^  LogoView logo;$/;"	m	class:final	file:
logo	src/Dialogs/StartupDialog.cpp	/^  LogoWindow logo;$/;"	m	class:final	file:
logo	src/Gauge/LogoView.hpp	/^  Bitmap logo, big_logo, title, big_title;$/;"	m	class:LogoView
logo	src/ProgressWindow.hpp	/^  LogoView logo;$/;"	m	class:ProgressWindow
logo_position	src/ProgressWindow.hpp	/^  PixelRect logo_position, message_position;$/;"	m	class:ProgressWindow
logo_rect	src/Dialogs/SimulatorPromptWindow.hpp	/^  PixelRect logo_rect;$/;"	m	class:final
logo_view	src/Dialogs/SimulatorPromptWindow.hpp	/^  LogoView logo_view;$/;"	m	class:final
lon	src/Device/Driver/IMI/Protocol/Types.hpp	/^    IMIDDWORD lon:25;$/;"	m	struct:IMI::FixB
lon	src/Device/Driver/IMI/Protocol/Types.hpp	/^    IMIDWORD lon:25;$/;"	m	struct:IMI::TWaypoint
lon	src/Device/Driver/Volkslogger/vlconv.cpp	/^  long lon;$/;"	m	class:KOORD	file:
lon1	src/Device/Driver/IMI/Protocol/Types.hpp	/^    IMISDWORD lon1:11;$/;"	m	struct:IMI::FixB2
lon2	src/Device/Driver/IMI/Protocol/Types.hpp	/^    IMISDWORD lon2:10;$/;"	m	struct:IMI::FixB2
longest_line_index	src/Topography/shapelib/mapserver.h	/^    int longest_line_index;$/;"	m	struct:polyline_lengths
longest_max	src/Engine/Contest/Solvers/TriangleContest.hpp	/^    unsigned shortest_max, longest_min, longest_max;$/;"	m	struct:TriangleContest::CandidateSet
longest_min	src/Engine/Contest/Solvers/TriangleContest.hpp	/^    unsigned shortest_max, longest_min, longest_max;$/;"	m	struct:TriangleContest::CandidateSet
longest_segment_index	src/Topography/shapelib/mapserver.h	/^    int longest_segment_index;$/;"	m	struct:line_lengths
longest_segment_line_index	src/Topography/shapelib/mapserver.h	/^    int longest_segment_line_index, longest_segment_point_index;$/;"	m	struct:polyline_lengths
longest_segment_point_index	src/Topography/shapelib/mapserver.h	/^    int longest_segment_line_index, longest_segment_point_index;$/;"	m	struct:polyline_lengths
longitude	src/Device/Driver/CAI302/Protocol.hpp	/^    uint32_t latitude, longitude;$/;"	m	struct:CAI302::Navpoint
longitude	src/Device/Driver/LX/LXN.hpp	/^    uint16_t time, latitude, longitude, aalt, galt;$/;"	m	struct:LXN::Position
longitude	src/Device/Driver/LX/LXN.hpp	/^    uint32_t longitude[12], latitude[12];$/;"	m	struct:LXN::Task
longitude	src/Device/Driver/LX/LXN.hpp	/^    uint32_t time, latitude, longitude;$/;"	m	struct:LXN::Origin
longitude	src/Device/Driver/Volkslogger/Database.hpp	/^    uint8_t longitude[3];$/;"	m	struct:Volkslogger::Waypoint
longitude	src/Geo/GeoBounds.hpp	/^  AngleRange longitude;$/;"	m	class:GeoBounds
longitude	src/Geo/GeoPoint.hpp	/^  Angle longitude;$/;"	m	struct:GeoPoint
longitude	src/Tracking/SkyLines/Protocol.hpp	/^  int32_t latitude, longitude;$/;"	m	struct:SkyLinesTracking::GeoPoint
look	src/CrossSection/AirspaceXSRenderer.hpp	/^  const AirspaceLook &look;$/;"	m	class:AirspaceXSRenderer
look	src/CrossSection/CrossSectionRenderer.hpp	/^  const CrossSectionLook &look;$/;"	m	class:CrossSectionRenderer
look	src/CrossSection/TerrainXSRenderer.hpp	/^  const CrossSectionLook &look;$/;"	m	class:TerrainXSRenderer
look	src/Dialogs/Airspace/dlgAirspacePatterns.cpp	/^  const AirspaceLook &look;$/;"	m	class:AirspacePatternsDialog	file:
look	src/Dialogs/Device/DeviceListDialog.cpp	/^  const DialogLook &look;$/;"	m	class:final	file:
look	src/Dialogs/Device/PortMonitor.cpp	/^  const TerminalLook &look;$/;"	m	class:final	file:
look	src/Dialogs/Settings/dlgConfigInfoboxes.cpp	/^  const InfoBoxLook &look;$/;"	m	class:final	file:
look	src/Dialogs/Settings/dlgConfiguration.cpp	/^  const DialogLook &look;$/;"	m	class:final	file:
look	src/Dialogs/SimulatorPromptWindow.hpp	/^  const DialogLook &look;$/;"	m	class:final
look	src/Dialogs/StartupDialog.cpp	/^  const ButtonLook &look;$/;"	m	class:final	file:
look	src/Dialogs/Task/Manager/TaskClosePanel.hpp	/^  const DialogLook &look;$/;"	m	class:final
look	src/Dialogs/Task/Manager/TaskMapButtonRenderer.hpp	/^  const MapLook &look;$/;"	m	class:TaskMapButtonRenderer
look	src/Dialogs/Task/TaskPointDialog.cpp	/^  const DialogLook &look;$/;"	m	class:final	file:
look	src/Dialogs/dlgQuickMenu.cpp	/^  const DialogLook &look;$/;"	m	class:final	file:
look	src/Dialogs/dlgSimulatorPrompt.cpp	/^  const DialogLook &look;$/;"	m	class:final	file:
look	src/Form/ButtonPanel.hpp	/^  const ButtonLook &look;$/;"	m	class:ButtonPanel
look	src/Form/CheckBox.hpp	/^  const DialogLook *look;$/;"	m	class:CheckBoxControl
look	src/Form/DigitEntry.hpp	/^  const DialogLook &look;$/;"	m	class:CoordinateFormat
look	src/Form/Edit.hpp	/^  const DialogLook &look;$/;"	m	class:WndProperty
look	src/Form/Form.hpp	/^  const DialogLook &look;$/;"	m	class:WndForm
look	src/Form/Frame.hpp	/^  const DialogLook &look;$/;"	m	class:WndFrame
look	src/Form/HLine.hpp	/^  const DialogLook &look;$/;"	m	class:HLine
look	src/Form/List.hpp	/^  const DialogLook &look;$/;"	m	class:ListControl
look	src/Form/TabDisplay.hpp	/^  const DialogLook &look;$/;"	m	class:final
look	src/Form/TabMenuDisplay.hpp	/^  const DialogLook &look;$/;"	m	class:final
look	src/Gauge/BigThermalAssistantWidget.cpp	/^    :blackboard(_blackboard), look(_look) {}$/;"	f
look	src/Gauge/BigThermalAssistantWidget.hpp	/^  const ThermalAssistantLook &look;$/;"	m	class:BigThermalAssistantWidget
look	src/Gauge/FlarmTrafficWindow.hpp	/^  const FlarmTrafficLook &look;$/;"	m	class:FlarmTrafficWindow
look	src/Gauge/GaugeFLARM.hpp	/^    :blackboard(_blackboard), look(_look) {}$/;"	f	class:final
look	src/Gauge/GaugeFLARM.hpp	/^  const FlarmTrafficLook &look;$/;"	m	class:final
look	src/Gauge/GaugeThermalAssistant.hpp	/^    :blackboard(_blackboard), look(_look) {}$/;"	f	class:final
look	src/Gauge/GaugeThermalAssistant.hpp	/^  const ThermalAssistantLook &look;$/;"	m	class:final
look	src/Gauge/GaugeVario.cpp	/^  :blackboard(_blackboard), look(_look)$/;"	f
look	src/Gauge/GaugeVario.hpp	/^  const VarioLook &look;$/;"	m	class:GaugeVario
look	src/Gauge/GlueGaugeVario.hpp	/^    :blackboard(_blackboard), look(_look) {}$/;"	f	class:final
look	src/Gauge/GlueGaugeVario.hpp	/^  const VarioLook &look;$/;"	m	class:final
look	src/Gauge/ThermalAssistantRenderer.hpp	/^  const ThermalAssistantLook &look;$/;"	m	class:ThermalAssistantRenderer
look	src/HorizonWidget.cpp	/^  const HorizonLook &look;$/;"	m	class:HorizonWindow	file:
look	src/InfoBoxes/InfoBoxWindow.hpp	/^  const InfoBoxLook &look;$/;"	m	class:InfoBoxWindow
look	src/MainWindow.hpp	/^  Look *look = nullptr;$/;"	m	class:MainWindow
look	src/MapWindow/MapWindow.hpp	/^  const MapLook &look;$/;"	m	class:MapWindow
look	src/PopupMessage.hpp	/^  const DialogLook &look;$/;"	m	class:PopupMessage
look	src/Renderer/AirspaceLabelRenderer.hpp	/^  const AirspaceLook &look;$/;"	m	class:AirspaceLabelRenderer
look	src/Renderer/AirspaceRenderer.hpp	/^  const AirspaceLook &look;$/;"	m	class:AirspaceRenderer
look	src/Renderer/AirspaceRendererGL.cpp	/^  const AirspaceLook &look;$/;"	m	class:final	file:
look	src/Renderer/AirspaceRendererOther.cpp	/^  const AirspaceLook &look;$/;"	m	class:final	file:
look	src/Renderer/ButtonRenderer.hpp	/^  const ButtonLook &look;$/;"	m	class:ButtonFrameRenderer
look	src/Renderer/ChartRenderer.hpp	/^  const ChartLook &look;$/;"	m	class:ChartRenderer
look	src/Renderer/ClimbPercentRenderer.hpp	/^  const ClimbPercentLook &look;$/;"	m	class:ClimbPercentRenderer
look	src/Renderer/CompassRenderer.hpp	/^  const MapLook &look;$/;"	m	class:CompassRenderer
look	src/Renderer/FinalGlideBarRenderer.hpp	/^  const FinalGlideBarLook &look;$/;"	m	class:FinalGlideBarRenderer
look	src/Renderer/MapItemListRenderer.hpp	/^  const MapLook &look;$/;"	m	class:MapItemListRenderer
look	src/Renderer/NextArrowRenderer.hpp	/^  const WindArrowLook &look;$/;"	m	class:NextArrowRenderer
look	src/Renderer/TaskProgressRenderer.hpp	/^  const TaskLook &look;$/;"	m	class:TaskProgressRenderer
look	src/Renderer/ThermalBandRenderer.hpp	/^  const ThermalBandLook &look;$/;"	m	class:ThermalBandRenderer
look	src/Renderer/TraceHistoryRenderer.hpp	/^  const TraceHistoryLook &look;$/;"	m	class:TraceHistoryRenderer
look	src/Renderer/TrackLineRenderer.hpp	/^  const MapLook &look;$/;"	m	class:TrackLineRenderer
look	src/Renderer/TrailRenderer.hpp	/^  const TrailLook &look;$/;"	m	class:TrailRenderer
look	src/Renderer/VarioBarRenderer.hpp	/^  const VarioBarLook &look;$/;"	m	class:VarioBarRenderer
look	src/Renderer/WaveRenderer.hpp	/^  const WaveLook &look;$/;"	m	class:WaveRenderer
look	src/Renderer/WaypointIconRenderer.hpp	/^  const WaypointLook &look;$/;"	m	class:WaypointIconRenderer
look	src/Renderer/WaypointRenderer.cpp	/^  const WaypointLook &look;$/;"	m	class:final	file:
look	src/Renderer/WaypointRenderer.hpp	/^  const WaypointLook &look;$/;"	m	class:WaypointRenderer
look	src/Renderer/WindArrowRenderer.hpp	/^  const WindArrowLook &look;$/;"	m	class:WindArrowRenderer
look	src/Screen/TerminalWindow.hpp	/^  const TerminalLook &look;$/;"	m	class:TerminalWindow
look	src/Topography/TopographyFileRenderer.hpp	/^  const TopographyLook &look;$/;"	m	class:final
look	src/Widget/ArrowPagerWidget.hpp	/^  const ButtonLook &look;$/;"	m	class:ArrowPagerWidget
look	src/Widget/KeyboardWidget.hpp	/^  const ButtonLook &look;$/;"	m	class:KeyboardWidget
look	src/Widget/LargeTextWidget.hpp	/^  const DialogLook &look;$/;"	m	class:LargeTextWidget
look	src/Widget/OffsetButtonsWidget.hpp	/^  const ButtonLook &look;$/;"	m	class:OffsetButtonsWidget
look	src/Widget/RowFormWidget.hpp	/^  const DialogLook &look;$/;"	m	class:RowFormWidget
look_pages	src/Dialogs/Settings/dlgConfiguration.cpp	/^static constexpr TabMenuPage look_pages[] = {$/;"	v	file:
lookup	src/Language/MOFile.cpp	/^MOFile::lookup(const char *p) const$/;"	f	class:MOFile
loop	src/event/CoarseTimerEvent.hxx	/^	EventLoop &loop;$/;"	m	class:final
loop	src/event/DeferEvent.hxx	/^	EventLoop &loop;$/;"	m	class:final
loop	src/event/FineTimerEvent.hxx	/^	EventLoop &loop;$/;"	m	class:final
loop	src/event/InjectEvent.hxx	/^	EventLoop &loop;$/;"	m	class:final
loop	src/event/SocketEvent.hxx	/^	EventLoop &loop;$/;"	m	class:final
low_	src/Terrain/jasper/jpc/jpc_tagtree.h	/^	int low_;$/;"	m	struct:jpc_tagtreenode_
lower_hull	src/Geo/ConvexHull/GrahamScan.hpp	/^  std::vector<SearchPoint*> lower_hull;$/;"	m	class:GrahamScan
lower_left	src/Geo/Flat/FlatBoundingBox.hpp	/^  FlatGeoPoint lower_left;$/;"	m	struct:FlatBoundingBox
lower_partition_points	src/Geo/ConvexHull/GrahamScan.hpp	/^  std::vector<SearchPoint*> lower_partition_points;$/;"	m	class:GrahamScan
lpEndTag	src/XML/Parser.cpp	/^    const TCHAR *lpEndTag;$/;"	m	struct:XML::Parser	file:
lpXML	src/XML/Parser.cpp	/^    const TCHAR *lpXML;$/;"	m	struct:XML::Parser	file:
lpenergywts	src/Terrain/jasper/jpc/jpc_qmfb.h	/^	const double *lpenergywts;$/;"	m	struct:__anon105
ls	src/Computer/WaveComputer.hpp	/^  LeastSquares ls;$/;"	m	class:WaveComputer
lua_timer_class	src/lua/Timer.cpp	/^static constexpr char lua_timer_class[] = "xcsoar.timer";$/;"	v	file:
luminosity	src/ui/canvas/memory/Color.hpp	/^  Luminosity8 luminosity;$/;"	m	class:Color
lutdata	src/Terrain/jasper/jp2/jp2_cod.h	/^	int_fast32_t *lutdata;$/;"	m	struct:__anon89
lw	src/Device/Driver/Volkslogger/vlapi2.h	/^    unsigned lw; \/\/ linewidth (start- or finishline) in kilometers$/;"	m	struct:VLAPI_DATA::DCLWPT
lx	src/Device/RecordedFlight.hpp	/^    } lx;$/;"	m	union:RecordedFlightInfo::__anon159	typeref:struct:RecordedFlightInfo::__anon159::__anon160
lx_driver	src/Device/Driver/LX/Register.cpp	/^const struct DeviceRegister lx_driver = {$/;"	v	typeref:struct:DeviceRegister
lyrno	src/Terrain/jasper/jpc/jpc_dec.h	/^	unsigned lyrno;$/;"	m	struct:jpc_dec_seg_s
lyrno	src/Terrain/jasper/jpc/jpc_t2cod.h	/^	unsigned lyrno;$/;"	m	struct:__anon115
lyrnoend	src/Terrain/jasper/jpc/jpc_cs.h	/^	uint_fast16_t lyrnoend;$/;"	m	struct:__anon146
m	src/Math/Histogram.hpp	/^  double m;$/;"	m	class:Histogram
m	src/Math/LeastSquares.hpp	/^  double m;$/;"	m	class:LeastSquares
m	src/Topography/shapelib/mapprimitive.h	/^  double m;$/;"	m	struct:__anon70
mFine	src/Form/DataField/Float.hpp	/^  bool mFine;$/;"	m	class:final
mMax	src/Form/DataField/Float.hpp	/^  double mMax;$/;"	m	class:final
mMin	src/Form/DataField/Float.hpp	/^  double mMin;$/;"	m	class:final
mOnPaintCallback	src/Form/Draw.hpp	/^  std::function<void(Canvas &canvas, const PixelRect &rc)> mOnPaintCallback;$/;"	m	class:WndOwnerDrawFrame
mOutBuf	src/Form/DataField/Float.hpp	/^  mutable TCHAR mOutBuf[OUTBUFFERSIZE+1];$/;"	m	class:final
mSpeedup	src/Form/DataField/Float.hpp	/^  uint8_t mSpeedup;$/;"	m	class:final
mStep	src/Form/DataField/Float.hpp	/^  double mStep;$/;"	m	class:final
mValue	src/Form/DataField/Boolean.hpp	/^  bool mValue;$/;"	m	class:final
mValue	src/Form/DataField/Float.hpp	/^  double mValue;$/;"	m	class:final
mValue	src/Form/DataField/String.hpp	/^  StaticString<EDITSTRINGSIZE> mValue;$/;"	m	class:DataFieldString
m_airspace	src/Engine/Airspace/AirspaceIntersectSort.hpp	/^  const AbstractAirspace *m_airspace;$/;"	m	class:AirspaceIntersectSort
m_airspaces	src/Engine/Route/AirspaceRoute.hpp	/^  Airspaces m_airspaces;$/;"	m	class:AirspaceRoute
m_alt	src/Engine/Airspace/AirspaceAircraftPerformance.cpp	/^  const double m_alt;$/;"	m	class:final	file:
m_border	src/Engine/Airspace/AbstractAirspace.hpp	/^  SearchPointVector m_border;$/;"	m	class:AbstractAirspace
m_center	src/Engine/Airspace/AirspaceCircle.hpp	/^  const GeoPoint m_center;$/;"	m	class:final
m_clearance	src/Engine/Airspace/AbstractAirspace.hpp	/^  mutable SearchPointVector m_clearance;$/;"	m	class:AbstractAirspace
m_d_min	src/Engine/Airspace/AirspaceAircraftPerformance.cpp	/^  const double m_d_min;$/;"	m	class:final	file:
m_data	src/system/FileMapping.hpp	/^  void *m_data;$/;"	m	class:FileMapping
m_dh	src/Engine/Airspace/AirspaceAircraftPerformance.cpp	/^  const double m_dh;$/;"	m	class:final	file:
m_distance	src/Engine/Airspace/AirspaceAircraftPerformance.cpp	/^  const double m_distance;$/;"	m	class:final	file:
m_h_min	src/Engine/Airspace/AirspaceAircraftPerformance.cpp	/^  const double m_h_min;$/;"	m	class:final	file:
m_head_wind	src/Engine/GlideSolvers/GlidePolar.cpp	/^  const double m_head_wind;$/;"	m	class:final	file:
m_inx	src/Engine/Route/AirspaceRoute.hpp	/^  mutable RouteAirspaceIntersection m_inx;$/;"	m	class:AirspaceRoute
m_inx_terrain	src/Engine/Route/TerrainRoute.hpp	/^  mutable RoutePoint m_inx_terrain;$/;"	m	class:TerrainRoute
m_net_sink_rate	src/Engine/GlideSolvers/GlidePolar.cpp	/^  const double m_net_sink_rate;$/;"	m	class:final	file:
m_perf	src/Engine/Airspace/AirspaceAircraftPerformance.cpp	/^  const AirspaceAircraftPerformance &m_perf;$/;"	m	class:final	file:
m_proj	src/Renderer/TaskPointRenderer.hpp	/^  const WindowProjection &m_proj;$/;"	m	class:TaskPointRenderer
m_q	src/Engine/Airspace/AirspaceIntersectSort.hpp	/^  std::priority_queue<Intersection, std::vector<Intersection>, Rank> m_q;$/;"	m	class:AirspaceIntersectSort
m_radius	src/Engine/Airspace/AirspaceCircle.hpp	/^  const double m_radius;$/;"	m	class:final
m_size	src/system/FileMapping.hpp	/^  size_t m_size;$/;"	m	class:FileMapping
m_start	src/Engine/Airspace/AirspaceIntersectSort.hpp	/^  const GeoPoint& m_start;$/;"	m	class:AirspaceIntersectSort
mac	src/Engine/GlideSolvers/MacCready.cpp	/^  const MacCready &mac;$/;"	m	class:MacCreadyVopt	file:
mac_cready	src/NMEA/ExternalSettings.hpp	/^  double mac_cready;$/;"	m	struct:ExternalSettings
mac_cready_available	src/NMEA/ExternalSettings.hpp	/^  Validity mac_cready_available;$/;"	m	struct:ExternalSettings
magenta_brush	src/Look/WaypointLook.hpp	/^  Brush white_brush, light_gray_brush, magenta_brush, orange_brush;$/;"	m	struct:WaypointLook
magic	src/Language/MOFile.hpp	/^    uint32_t magic;$/;"	m	struct:MOFile::mo_header
magic	src/Terrain/jasper/jp2/jp2_cod.h	/^	uint_fast32_t magic;$/;"	m	struct:__anon84
magic	src/Tracking/SkyLines/Protocol.hpp	/^  uint32_t magic;$/;"	m	struct:SkyLinesTracking::Header
magnify_button	src/Dialogs/Waypoint/dlgWaypointDetails.cpp	/^    PixelRect magnify_button, shrink_button;$/;"	m	struct:final::Layout	file:
magnify_button	src/Dialogs/Waypoint/dlgWaypointDetails.cpp	/^  Button magnify_button, shrink_button;$/;"	m	class:final	file:
main	src/Cloud/Main.cpp	/^main(int argc, char **argv)$/;"	f
main	src/Cloud/ToKML.cpp	/^main(int argc, char **argv)$/;"	f
main	src/Dialogs/Waypoint/dlgWaypointDetails.cpp	/^    PixelRect main;$/;"	m	struct:final::Layout	file:
main	src/Dialogs/dlgAnalysis.cpp	/^    PixelRect main;$/;"	m	struct:final::Layout	file:
main	src/Kobo/KoboMenu.cpp	/^int main(int argc, char **argv)$/;"	f
main	src/Kobo/PowerOff.cpp	/^int main(int argc, char **argv)$/;"	f
main	src/PageActions.cpp	39;"	d	file:
main	src/PageSettings.hpp	/^  } main;$/;"	m	struct:PageLayout	typeref:class:PageLayout::Main
main	src/VALI-XCS.cpp	/^int main(int argc, char* argv[])$/;"	f
main	src/Widget/ArrowPagerWidget.cpp	/^  :main(rc)$/;"	f
main	src/Widget/ArrowPagerWidget.hpp	/^    PixelRect main;$/;"	m	struct:ArrowPagerWidget::Layout
main	src/XCSoar.cpp	/^int main(int argc, char **argv)$/;"	f
main_index	src/Form/TabMenuDisplay.hpp	/^    unsigned main_index;$/;"	m	struct:final::MenuTabIndex
main_menu_buttons	src/Form/TabMenuDisplay.hpp	/^  StaticArray<MainMenuButton, MAX_MAIN_MENU_ITEMS> main_menu_buttons;$/;"	m	class:final
main_menu_captions	src/Dialogs/Settings/dlgConfiguration.cpp	/^static constexpr TabMenuGroup main_menu_captions[] = {$/;"	v	file:
main_menu_index	src/Form/TabMenuDisplay.hpp	/^    unsigned main_menu_index;$/;"	m	struct:final::SubMenuButton
main_thread	src/thread/Debug.cpp	/^static ThreadHandle main_thread = ThreadHandle::GetCurrent();$/;"	v	file:
main_thread	src/thread/Debug.cpp	/^static ThreadHandle main_thread;$/;"	v	file:
main_window	src/Interface.cpp	/^MainWindow *CommonInterface::main_window;$/;"	m	class:CommonInterface	file:
majver	src/Terrain/jasper/jp2/jp2_cod.h	/^	uint_fast32_t majver;$/;"	m	struct:__anon85
makeLabel	src/Input/InputDefaults.cpp	/^makeLabel(InputConfig &input_config,$/;"	f	file:
make_mkstemp_template	src/Terrain/jasper/base/jas_stream.c	/^static int make_mkstemp_template(char *buffer, size_t size)$/;"	f	file:
manage_button	src/Dialogs/Device/DeviceListDialog.cpp	/^  Button *manage_button, *monitor_button;$/;"	m	class:final	file:
manager	src/Computer/WarningComputer.hpp	/^  AirspaceWarningManager manager;$/;"	m	class:WarningComputer
manager	src/Monitor/AirspaceWarningMonitor.cpp	/^  ProtectedAirspaceWarningManager &manager;$/;"	m	class:final	file:
manual_modified	src/Dialogs/Settings/WindSettingsPanel.hpp	/^  bool manual_modified;$/;"	m	class:final
manual_wind	src/Computer/Wind/Settings.hpp	/^  SpeedVector manual_wind;$/;"	m	struct:WindSettings
manual_wind_available	src/Computer/Wind/Settings.hpp	/^  Validity manual_wind_available;$/;"	m	struct:WindSettings
manufacturer	src/IGC/IGCHeader.hpp	/^  char manufacturer[4];$/;"	m	struct:IGCHeader
map	src/Device/SettingsMap.hpp	/^  Map map;$/;"	m	class:DeviceSettingsMap
map	src/Dialogs/Task/TargetDialog.cpp	/^    PixelRect map;$/;"	m	struct:TargetWidget::Layout	file:
map	src/Dialogs/Task/TargetDialog.cpp	/^  TargetDialogMapWindow map;$/;"	m	class:TargetWidget	file:
map	src/Dialogs/Task/TaskPointDialog.cpp	/^    PixelRect map, properties;$/;"	m	struct:final::Layout	file:
map	src/Dialogs/Task/TaskPointDialog.cpp	/^  WndOwnerDrawFrame map;$/;"	m	class:final	file:
map	src/DrawThread.hpp	/^  GlueMapWindow &map;$/;"	m	class:final
map	src/FLARM/FlarmNetDatabase.hpp	/^  RecordMap map;$/;"	m	class:FlarmNetDatabase
map	src/Look/FontSettings.hpp	/^  FontDescription map;$/;"	m	struct:FontSettings
map	src/Look/GlobalFonts.cpp	/^Font Fonts::map;$/;"	m	class:Fonts	file:
map	src/Look/Look.hpp	/^  MapLook map;$/;"	m	struct:Look
map	src/MainWindow.hpp	/^  GlueMapWindow *map = nullptr;$/;"	m	class:MainWindow
map	src/Profile/Current.cpp	/^  ProfileMap map;$/;"	m	namespace:Profile	file:
map	src/Terrain/RasterTerrain.hpp	/^  RasterMap map;$/;"	m	class:RasterTerrain
map	src/Terrain/jasper/jp2/jp2_cod.h	/^	uint_fast8_t map;$/;"	m	struct:__anon92
map	src/Topography/shapelib/mapserver.h	/^    mapObj *map;$/;"	m	struct:imageObj
map	src/Topography/shapelib/mapserver.h	/^    struct mapObj *map;$/;"	m	struct:__anon24	typeref:struct:__anon24::mapObj
map	src/Topography/shapelib/mapserver.h	/^    struct mapObj *map;$/;"	m	struct:__anon35	typeref:struct:__anon35::mapObj
map	src/Topography/shapelib/mapserver.h	/^    struct mapObj *map;$/;"	m	struct:__anon45	typeref:struct:__anon45::mapObj
map	src/Topography/shapelib/mapserver.h	/^    struct mapObj *map;$/;"	m	struct:__anon46	typeref:struct:__anon46::mapObj
map	src/Topography/shapelib/mapserver.h	/^    struct mapObj *map;$/;"	m	struct:__anon48	typeref:struct:__anon48::mapObj
map	src/Topography/shapelib/mapserver.h	/^    struct mapObj *map;$/;"	m	struct:layerObj	typeref:struct:layerObj::mapObj
map	src/UISettings.hpp	/^  MapSettings map;$/;"	m	struct:UISettings
map	src/Weather/Rasp/RaspCache.hpp	/^  RasterMap *map = nullptr;$/;"	m	class:RaspCache
map	src/Weather/WeatherUIState.hpp	/^  int map;$/;"	m	struct:WeatherUIState
map	src/ui/canvas/custom/TopCanvas.hpp	/^  void *map;$/;"	m	class:DisplayOrientation
map	src/ui/canvas/gdi/Canvas.hpp	/^  const HWColor map(const Color color) const$/;"	f	class:Canvas
map	src/util/Cache.hxx	/^	KeyMap map;$/;"	m	class:Cache
mapObj	src/Topography/shapelib/mapserver.h	/^  struct mapObj { \/* structure for a map *\/$/;"	s
map_bold	src/Look/FontSettings.hpp	/^  FontDescription map_bold;$/;"	m	struct:FontSettings
map_bold	src/Look/GlobalFonts.cpp	/^Font Fonts::map_bold;$/;"	m	class:Fonts	file:
map_bpp	src/ui/canvas/custom/TopCanvas.hpp	/^  unsigned map_pitch, map_bpp;$/;"	m	class:DisplayOrientation
map_buffer	src/ui/canvas/opengl/Dynamic.cpp	/^PFNGLMAPBUFFEROESPROC map_buffer;$/;"	m	namespace:GLExt	file:
map_canvas	src/Renderer/TaskPointRenderer.hpp	/^  MapCanvas map_canvas;$/;"	m	class:TaskPointRenderer
map_datum	src/Device/Driver/CAI302/Protocol.hpp	/^    uint8_t map_datum; \/\/ ignored on IGC version$/;"	m	struct:CAI302::Pilot
map_funcs	src/lua/Map.cpp	/^static constexpr struct luaL_Reg map_funcs[] = {$/;"	v	typeref:struct:luaL_Reg	file:
map_look	src/Renderer/FlightStatisticsRenderer.hpp	/^  const MapLook &map_look;$/;"	m	class:FlightStatisticsRenderer
map_pages	src/Dialogs/Settings/dlgConfiguration.cpp	/^static constexpr TabMenuPage map_pages[] = {$/;"	v	file:
map_pitch	src/ui/canvas/custom/TopCanvas.hpp	/^  unsigned map_pitch, map_bpp;$/;"	m	class:DisplayOrientation
map_rect	src/MainWindow.hpp	/^  PixelRect map_rect;$/;"	m	class:MainWindow
map_scale_left_icon	src/Look/OverlayLook.hpp	/^  MaskedIcon map_scale_left_icon;$/;"	m	struct:OverlayLook
map_scale_right_icon	src/Look/OverlayLook.hpp	/^  MaskedIcon map_scale_right_icon;$/;"	m	struct:OverlayLook
map_shift_bias	src/MapSettings.hpp	/^  MapShiftBias map_shift_bias;$/;"	m	struct:MapSettings
mapbuffer	src/ui/canvas/opengl/Globals.cpp	/^bool mapbuffer;$/;"	m	namespace:OpenGL	file:
mapbuffer	src/ui/canvas/opengl/Globals.hpp	/^static constexpr bool mapbuffer = true;$/;"	m	class:DisplayOrientation
mappath	src/Topography/shapelib/mapserver.h	/^    char *mappath; \/* path of the mapfile, all path are relative to this path *\/$/;"	m	struct:mapObj
mapped	src/ui/event/poll/X11Queue.hpp	/^  bool mapped = true, visible = true;$/;"	m	class:UI::X11EventQueue
mapping	src/Language/MOLoader.hpp	/^  FileMapping *mapping;$/;"	m	class:MOLoader
maps	src/Weather/Rasp/RaspStore.hpp	/^  MapList maps;$/;"	m	class:RaspStore
margin_height	src/Device/Driver/CAI302/Protocol.hpp	/^    uint16_t margin_height; \/\/ (10ths of Meters)$/;"	m	struct:CAI302::Pilot
margins	src/Engine/Task/Ordered/Points/StartPoint.hpp	/^  TaskStartMargins margins;$/;"	m	class:final
marker	src/Topography/shapelib/mapserver.h	/^    int marker;$/;"	m	struct:__anon46
markerCacheMemberObj	src/Topography/shapelib/mapserver.h	/^  } markerCacheMemberObj;$/;"	t	typeref:struct:__anon40
marker_icon	src/Look/WaypointLook.hpp	/^  MaskedIcon marker_icon;$/;"	m	struct:WaypointLook
markercachesize	src/Topography/shapelib/mapserver.h	/^    int markercachesize;$/;"	m	struct:__anon41
markerid	src/Topography/shapelib/mapserver.h	/^    int markerid; \/* corresponding marker (POINT layers only) *\/$/;"	m	struct:__anon39
markername	src/Topography/shapelib/mapserver.h	/^    char *markername;$/;"	m	struct:__anon46
markers	src/Screen/StopWatch.hpp	/^  MarkerList markers;$/;"	m	class:ScreenStopWatch
markers	src/Topography/shapelib/mapserver.h	/^    markerCacheMemberObj *markers;$/;"	m	struct:__anon41
markersize	src/Topography/shapelib/mapserver.h	/^    int markersize;$/;"	m	struct:__anon46
mask	src/Engine/Airspace/AirspaceActivity.hpp	/^  } mask;$/;"	m	class:AirspaceActivity	typeref:union:AirspaceActivity::__anon167
mask	src/Topography/shapelib/mapserver.h	/^    char *mask;$/;"	m	struct:layerObj
mask	src/util/EnumBitSet.hxx	/^		:mask((ToMask(args) | ...)) {}$/;"	f	class:EnumBitSet
mask	src/util/EnumBitSet.hxx	/^		:mask(_mask) {}$/;"	f	class:EnumBitSet
mask	src/util/EnumBitSet.hxx	/^	I mask;$/;"	m	class:EnumBitSet
maskimage	src/Topography/shapelib/mapserver.h	/^    imageObj *maskimage;$/;"	m	struct:layerObj
mass_unit	src/Units/Settings.hpp	/^  Unit mass_unit;$/;"	m	struct:UnitSetting
master_volume	src/Audio/Settings.hpp	/^  uint8_t master_volume;$/;"	m	struct:SoundSettings
mat_constraints	src/Engine/Task/Factory/MatTaskFactory.cpp	/^static constexpr TaskFactoryConstraints mat_constraints = {$/;"	v	file:
mat_task	src/Monitor/AllMonitors.hpp	/^  MatTaskMonitor mat_task;$/;"	m	class:final
match_type	src/ui/event/android/Queue.cpp	/^match_type(const Event &event, void *ctx)$/;"	f	namespace:UI
match_type	src/ui/event/poll/Queue.cpp	/^match_type(const Event &event, void *ctx)$/;"	f	namespace:UI
max	src/Form/DataField/Integer.hpp	/^  int max;$/;"	m	class:final
max	src/Form/DataField/Time.hpp	/^  int max;$/;"	m	class:final
max	src/Renderer/ChartRenderer.hpp	/^    double scale, min, max;$/;"	m	struct:ChartRenderer::Axis
maxAlt	src/Device/Driver/IMI/Protocol/Types.hpp	/^    IMIDWORD maxAlt: 14;$/;"	m	struct:IMI::TObservationZone
max_abort	src/Engine/Task/Unordered/AbortTask.hpp	/^  static constexpr AlternateTaskVector::size_type max_abort = 10;$/;"	m	class:AbortTask
max_alt	src/Engine/Airspace/AirspaceWarningManager.cpp	/^  const double max_alt;$/;"	m	class:final	file:
max_alternates	src/Engine/Task/Unordered/AlternateTask.hpp	/^  static constexpr DivertVector::size_type max_alternates = 6;$/;"	m	class:final
max_altitude	src/Task/TaskFileSeeYou.cpp	/^  double radius1, radius2, max_altitude;$/;"	m	struct:SeeYouTurnpointInformation	file:
max_auto_zoom_distance	src/MapSettings.hpp	/^  double max_auto_zoom_distance;$/;"	m	struct:MapSettings
max_ballast	src/Plane/Plane.hpp	/^  double max_ballast;$/;"	m	struct:Plane
max_ballast	src/Polar/Polar.hpp	/^  double max_ballast;  \/**< Max water ballast (l) *\/$/;"	m	struct:PolarInfo
max_ballast	src/Polar/PolarStore.hpp	/^    double max_ballast;$/;"	m	struct:PolarStore::Item
max_bfv	src/Device/Driver/Volkslogger/vlconv.cpp	/^const int max_bfv=1;$/;"	v
max_cached_shape_count	src/Topography/shapelib/mapserver.h	/^    int max_cached_shape_count; \/* maximum number of shapes cached in the total number of resultCacheObj *\/$/;"	m	struct:__anon33
max_cached_shape_ram_amount	src/Topography/shapelib/mapserver.h	/^    int max_cached_shape_ram_amount; \/* maximum number of bytes taken by shapes cached in the total number of resultCacheObj *\/$/;"	m	struct:__anon33
max_dead	src/Audio/VarioSettings.hpp	/^  double max_dead;$/;"	m	struct:VarioSoundSettings
max_dead	src/Audio/VarioSynthesiser.hpp	/^  int min_dead, max_dead;$/;"	m	class:final
max_delta	src/Projection/CompareProjection.hpp	/^  double max_delta = -1;$/;"	m	class:CompareProjection
max_dt_us_	src/Math/SelfTimingKalmanFilter1d.hpp	/^  uint64_t max_dt_us_;$/;"	m	class:SelfTimingKalmanFilter1d
max_error	src/Math/LeastSquares.hpp	/^  double max_error;$/;"	m	class:LeastSquares
max_fai_angle	src/Engine/Task/Shapes/FAITrianglePointValidator.cpp	/^static constexpr Angle max_fai_angle = Angle::Degrees(114);$/;"	v	file:
max_frequency	src/Audio/VarioSettings.hpp	/^  unsigned max_frequency;$/;"	m	struct:VarioSoundSettings
max_frequency	src/Audio/VarioSynthesiser.hpp	/^  unsigned max_frequency;$/;"	m	class:final
max_ground_temperature	src/Atmosphere/CuSonde.hpp	/^  Temperature max_ground_temperature;$/;"	m	class:CuSonde
max_height	src/Engine/Task/Ordered/StartConstraints.hpp	/^  unsigned max_height;$/;"	m	struct:StartConstraints
max_height_gain	src/NMEA/CirclingInfo.hpp	/^  double max_height_gain;$/;"	m	struct:CirclingInfo
max_height_margin	src/Engine/Task/TaskBehaviour.hpp	/^  unsigned max_height_margin;$/;"	m	struct:TaskStartMargins
max_height_ref	src/Engine/Task/Ordered/StartConstraints.hpp	/^  AltitudeReference max_height_ref;$/;"	m	struct:StartConstraints
max_iterations	src/Engine/Contest/Solvers/TriangleContest.hpp	/^  unsigned max_iterations = 1e6,$/;"	m	class:TriangleContest
max_length	src/net/http/ToBuffer.hpp	/^  size_t max_length;$/;"	m	class:Net::DownloadToBufferJob
max_period_ms	src/Audio/VarioSettings.hpp	/^  unsigned max_period_ms;$/;"	m	struct:VarioSoundSettings
max_period_ms	src/Audio/VarioSynthesiser.hpp	/^  unsigned max_period_ms;$/;"	m	class:final
max_points	src/Engine/Task/Factory/Constraints.hpp	/^  unsigned max_points;$/;"	m	struct:TaskFactoryConstraints
max_samples	src/Terrain/jasper/jpc/jpc_dec.h	/^	size_t max_samples;$/;"	m	struct:__anon129
max_samples	src/Terrain/jasper/jpc/jpc_dec.h	/^	size_t max_samples;$/;"	m	struct:__anon130
max_search_range	src/Engine/Task/Unordered/AbortTask.cpp	/^static constexpr double max_search_range = 100000;$/;"	v	file:
max_size	src/Engine/Trace/Trace.hpp	/^  const unsigned max_size;$/;"	m	class:Trace
max_size	src/net/http/ToBuffer.cpp	/^  const size_t max_size;$/;"	m	class:final	file:
max_speed	src/Engine/Airspace/AirspaceAircraftPerformance.hpp	/^  double max_speed;$/;"	m	class:AirspaceAircraftPerformance
max_speed	src/Engine/Task/Ordered/StartConstraints.hpp	/^  double max_speed;$/;"	m	struct:StartConstraints
max_speed	src/Plane/Plane.hpp	/^  double max_speed;$/;"	m	struct:Plane
max_speed_margin	src/Engine/Task/TaskBehaviour.hpp	/^  double max_speed_margin;$/;"	m	struct:TaskStartMargins
max_start_altitude	src/Task/TaskFileSeeYou.cpp	/^  double max_start_altitude;$/;"	m	struct:SeeYouTaskInformation	file:
max_start_speed_clock	src/Monitor/TaskConstraintsMonitor.hpp	/^  PeriodClock max_start_speed_clock;$/;"	m	class:TaskConstraintsMonitor
max_time	src/Engine/Airspace/AirspaceWarningManager.cpp	/^  const double max_time;$/;"	m	class:final	file:
max_time	src/Engine/Trace/Trace.hpp	/^  const unsigned max_time;$/;"	m	class:Trace
max_tokens	src/Form/DataField/Time.hpp	/^  unsigned max_tokens;$/;"	m	class:final
max_tree_size	src/Engine/Contest/Solvers/TriangleContest.hpp	/^           max_tree_size = 5e5;$/;"	m	class:TriangleContest
max_value	src/Dialogs/Device/Vega/VegaParametersWidget.hpp	/^    int min_value, max_value, step;$/;"	m	struct:VegaParametersWidget::StaticParameter
max_value	src/Screen/ProgressBar.hpp	/^  unsigned min_value = 0, max_value = 0, value = 0, step_size = 1;$/;"	m	class:ProgressBar
max_vario	src/Audio/VarioSynthesiser.cpp	/^static constexpr int min_vario = -500, max_vario = 500;$/;"	v	file:
max_width	src/Dialogs/KnobTextEntry.cpp	/^  const size_t max_width;$/;"	m	class:final	file:
max_width	src/Dialogs/TouchTextEntry.cpp	/^static size_t max_width;$/;"	v	file:
max_width	src/Form/DigitEntry.hpp	/^  unsigned top, bottom, max_width;$/;"	m	class:CoordinateFormat
max_x	src/ui/event/poll/linux/Input.hpp	/^  int min_x, max_x, min_y, max_y;$/;"	m	class:UI::final
max_y	src/ui/event/poll/linux/Input.hpp	/^  int min_x, max_x, min_y, max_y;$/;"	m	class:UI::final
maxarcs	src/Topography/shapelib/mapserver.h	/^    double    maxarcs;$/;"	m	struct:__anon49
maxboxsize	src/Topography/shapelib/mapserver.h	/^    int maxboxsize;$/;"	m	struct:__anon46
maxclasses	src/Topography/shapelib/mapserver.h	/^    int maxclasses;$/;"	m	struct:layerObj
maxcmpts_	src/Terrain/jasper/jas_image.h	/^	unsigned maxcmpts_;$/;"	m	struct:__anon101
maxcolor	src/Topography/shapelib/mapserver.h	/^    colorObj maxcolor;$/;"	m	struct:styleObj
maxctxs	src/Terrain/jasper/jpc/jpc_mqdec.h	/^	unsigned maxctxs;$/;"	m	struct:__anon110
maxdepth	src/Topography/shapelib/maptree.h	/^    ms_int32 maxdepth;$/;"	m	struct:__anon80
maxdistance	src/Topography/shapelib/mapserver.h	/^    double maxdistance; \/* max distance between clusters *\/$/;"	m	struct:__anon30
maxdistance	src/Topography/shapelib/mapserver.h	/^    int maxdistance;$/;"	m	struct:__anon36
maxents	src/Terrain/jasper/jpc/jpc_dec.h	/^	unsigned maxents;$/;"	m	struct:__anon117
maxfeatures	src/Topography/shapelib/mapserver.h	/^    int  maxfeatures; \/* global maxfeatures *\/$/;"	m	struct:__anon33
maxfeatures	src/Topography/shapelib/mapserver.h	/^    int maxfeatures;$/;"	m	struct:layerObj
maxgeowidth	src/Topography/shapelib/mapserver.h	/^    double mingeowidth, maxgeowidth; \/* map width (in map units) at which the layer should be drawn *\/$/;"	m	struct:layerObj
maximum_control_height	src/Screen/Layout.cpp	/^  unsigned minimum_control_height = 20, maximum_control_height = 44;$/;"	m	namespace:Layout	file:
maxincrement	src/Topography/shapelib/mapserver.h	/^    double    maxincrement;$/;"	m	struct:__anon49
maxlabels	src/Topography/shapelib/mapserver.h	/^    int maxlabels;$/;"	m	struct:classObj
maxlayers	src/Topography/shapelib/mapserver.h	/^    int maxlayers; \/* allocated size of layers[] array *\/$/;"	m	struct:mapObj
maxlength	src/Topography/shapelib/mapserver.h	/^    int maxlength;$/;"	m	struct:labelObj
maxlyrs	src/Terrain/jasper/jpc/jpc_dec.h	/^	unsigned maxlyrs;$/;"	m	struct:__anon129
maxlyrs	src/Terrain/jasper/jpc/jpc_dec.h	/^	unsigned maxlyrs;$/;"	m	struct:__anon130
maxoverlapangle	src/Topography/shapelib/mapserver.h	/^    double maxoverlapangle;$/;"	m	struct:labelObj
maxpasses	src/Terrain/jasper/jpc/jpc_dec.h	/^	unsigned maxpasses;$/;"	m	struct:jpc_dec_seg_s
maxpchgs	src/Terrain/jasper/jpc/jpc_t2cod.h	/^	unsigned maxpchgs;$/;"	m	struct:__anon112
maxpkts	src/Terrain/jasper/jpc/jpc_dec.h	/^	int maxpkts;$/;"	m	struct:__anon129
maxpkts	src/Terrain/jasper/jpc/jpc_dec.h	/^	int maxpkts;$/;"	m	struct:__anon130
maxresults	src/Topography/shapelib/mapserver.h	/^    int maxresults;$/;"	m	struct:__anon33
maxrlvls	src/Terrain/jasper/jpc/jpc_t2cod.h	/^	unsigned maxrlvls;$/;"	m	struct:__anon115
maxrows_	src/Terrain/jasper/jas_seq.h	/^	int_fast32_t maxrows_;$/;"	m	struct:jas_matrix
maxscale	src/Topography/shapelib/mapserver.h	/^    double maxscale;$/;"	m	struct:__anon52
maxscaledenom	src/Topography/shapelib/mapserver.h	/^    double minscaledenom, maxscaledenom;$/;"	m	struct:__anon35
maxscaledenom	src/Topography/shapelib/mapserver.h	/^    double minscaledenom, maxscaledenom;$/;"	m	struct:classObj
maxscaledenom	src/Topography/shapelib/mapserver.h	/^    double minscaledenom, maxscaledenom;$/;"	m	struct:labelObj
maxscaledenom	src/Topography/shapelib/mapserver.h	/^    double minscaledenom, maxscaledenom;$/;"	m	struct:layerObj
maxscaledenom	src/Topography/shapelib/mapserver.h	/^    double minscaledenom, maxscaledenom;$/;"	m	struct:styleObj
maxsize	src/Topography/shapelib/mapserver.h	/^    double minsize, maxsize;$/;"	m	struct:styleObj
maxsize	src/Topography/shapelib/mapserver.h	/^    int maxsize;$/;"	m	struct:mapObj
maxsize	src/Topography/shapelib/mapserver.h	/^    int minsize, maxsize;$/;"	m	struct:labelObj
maxstreams	src/Terrain/jasper/jpc/jpc_dec.h	/^	unsigned maxstreams;$/;"	m	struct:__anon118
maxstyles	src/Topography/shapelib/mapserver.h	/^    int maxstyles;$/;"	m	struct:__anon36
maxstyles	src/Topography/shapelib/mapserver.h	/^    int maxstyles;$/;"	m	struct:classObj
maxstyles	src/Topography/shapelib/mapserver.h	/^    int maxstyles;$/;"	m	struct:labelObj
maxsubdivides	src/Topography/shapelib/mapserver.h	/^    double    maxsubdivides;$/;"	m	struct:__anon49
maxsymbols	src/Topography/shapelib/mapserver.h	/^    int maxsymbols;$/;"	m	struct:__anon45
maxtemplate	src/Topography/shapelib/mapserver.h	/^    char *mintemplate, *maxtemplate;$/;"	m	struct:__anon35
maxvalue	src/Topography/shapelib/mapserver.h	/^    double maxvalue;$/;"	m	struct:styleObj
maxwidth	src/Topography/shapelib/mapserver.h	/^    double minwidth, maxwidth;$/;"	m	struct:styleObj
maxx	src/Topography/shapelib/mapprimitive.h	/^  double minx, miny, maxx, maxy;$/;"	m	struct:__anon68
maxx	src/Topography/shapelib/mapserver.h	/^  double minx,miny,maxx,maxy,advance;$/;"	m	struct:__anon58
maxy	src/Topography/shapelib/mapprimitive.h	/^  double minx, miny, maxx, maxy;$/;"	m	struct:__anon68
maxy	src/Topography/shapelib/mapserver.h	/^  double minx,miny,maxx,maxy,advance;$/;"	m	struct:__anon58
mc	src/Device/Driver/Vega/Volatile.hpp	/^    unsigned mc;$/;"	m	struct:Vega::VolatileData
mc	src/Engine/GlideSolvers/GlidePolar.hpp	/^  double mc;$/;"	m	class:GlidePolar
mc	src/Gauge/GaugeVario.hpp	/^    LabelValueGeometry average, gross, mc;$/;"	m	struct:GaugeVario::Geometry
mc_best	src/Engine/Task/Stats/TaskStats.hpp	/^  double mc_best;$/;"	m	class:TaskStats
mc_di	src/Gauge/GaugeVario.hpp	/^  LabelValueDrawInfo average_di, mc_di, gross_di;$/;"	m	class:GaugeVario
mc_lpf_valid	src/Engine/Task/AbstractTask.hpp	/^  bool mc_lpf_valid = false;$/;"	m	class:AbstractTask
mctid	src/Terrain/jasper/jpc/jpc_dec.h	/^	uint_fast8_t mctid;$/;"	m	struct:__anon120
mctrans	src/Terrain/jasper/jpc/jpc_cs.h	/^	uint_fast8_t mctrans;$/;"	m	struct:__anon140
md5	src/Logger/GRecord.hpp	/^  MD5 md5[N_MD5];$/;"	m	class:GRecord
md5_start	src/util/MD5.cpp	/^static constexpr MD5::State md5_start = {$/;"	v	file:
measurements	src/Computer/Wind/MeasurementList.hpp	/^  StaticArray<WindMeasurement, 200> measurements;$/;"	m	class:WindMeasurementList
mem_close	src/Terrain/jasper/base/jas_stream.c	/^static int mem_close(jas_stream_obj_t *obj)$/;"	f	file:
mem_read	src/Terrain/jasper/base/jas_stream.c	/^static int mem_read(jas_stream_obj_t *obj, char *buf, unsigned cnt)$/;"	f	file:
mem_resize	src/Terrain/jasper/base/jas_stream.c	/^static int mem_resize(jas_stream_memobj_t *m, size_t bufsize)$/;"	f	file:
mem_seek	src/Terrain/jasper/base/jas_stream.c	/^static long mem_seek(jas_stream_obj_t *obj, long offset, int origin)$/;"	f	file:
mem_write	src/Terrain/jasper/base/jas_stream.c	/^static int mem_write(jas_stream_obj_t *obj, const char *buf, unsigned cnt)$/;"	f	file:
memo_max	src/Engine/Task/Points/TaskLeg.hpp	/^  DistanceMemento memo_max;$/;"	m	class:TaskLeg
memo_min	src/Engine/Task/Points/TaskLeg.hpp	/^  DistanceMemento memo_min;$/;"	m	class:TaskLeg
memo_nominal	src/Engine/Task/Points/TaskLeg.hpp	/^  GeoVectorMemento memo_nominal;$/;"	m	class:TaskLeg
memo_planned	src/Engine/Task/Points/TaskLeg.hpp	/^  GeoVectorMemento memo_planned;$/;"	m	class:TaskLeg
memo_remaining	src/Engine/Task/Points/TaskLeg.hpp	/^  GeoVectorMemento memo_remaining;$/;"	m	class:TaskLeg
memo_travelled	src/Engine/Task/Points/TaskLeg.hpp	/^  GeoVectorMemento memo_travelled;$/;"	m	class:TaskLeg
menu	src/Dialogs/dlgQuickMenu.cpp	/^  const Menu &menu;$/;"	m	class:final	file:
menu_caption	src/Form/TabMenuData.hpp	/^  const TCHAR *menu_caption;$/;"	m	struct:TabMenuPage
menu_timeout	src/UISettings.hpp	/^  unsigned menu_timeout;$/;"	m	struct:UISettings
menubar_height_scale_factor	src/Menu/MenuBar.hpp	/^static constexpr unsigned menubar_height_scale_factor = 6;$/;"	v
menus	src/Input/InputConfig.hpp	/^  Menu menus[MAX_MODE];$/;"	m	struct:InputConfig
merge	src/ui/event/poll/linux/Input.hpp	/^  MergeMouse &merge;$/;"	m	class:UI::final
mergeRasterBuffer	src/Topography/shapelib/mapserver.h	/^    int WARN_UNUSED (*mergeRasterBuffer)(imageObj *dest, rasterBufferObj *overlay, double opacity, int srcX, int srcY, int dstX, int dstY, int width, int height);$/;"	m	struct:rendererVTableObj
merge_mouse	src/ui/event/poll/InputQueue.hpp	/^  MergeMouse merge_mouse;$/;"	m	class:DisplayOrientation::final
merge_thread	src/Components.cpp	/^MergeThread *merge_thread;$/;"	v
message	src/Dialogs/Task/Manager/TaskClosePanel.cpp	/^   message(look) {}$/;"	f
message	src/Dialogs/Task/Manager/TaskClosePanel.hpp	/^    PixelRect close_button, message, revert_button;$/;"	m	struct:final::Layout
message	src/Dialogs/Task/Manager/TaskClosePanel.hpp	/^  WndFrame message;$/;"	m	class:final
message	src/ProgressWindow.hpp	/^  StaticString<128> message;$/;"	m	class:ProgressWindow
message	src/Topography/shapelib/maperror.h	/^    char message[MESSAGELENGTH];$/;"	m	struct:errorObj
message	src/Widget/QuestionWidget.cpp	/^   message(_message) {}$/;"	f
message	src/Widget/QuestionWidget.hpp	/^  const TCHAR *const message;$/;"	m	class:QuestionWidget
message_length	src/util/MD5.hpp	/^  uint64_t message_length;$/;"	m	class:MD5
message_position	src/ProgressWindow.hpp	/^  PixelRect logo_position, message_position;$/;"	m	class:ProgressWindow
messages	src/PopupMessage.hpp	/^  struct Message messages[MAXMESSAGES];$/;"	m	class:PopupMessage	typeref:struct:PopupMessage::Message
meta_data	src/InfoBoxes/Content/Factory.cpp	/^static constexpr MetaData meta_data[] = {$/;"	v	file:
metadata	src/Topography/shapelib/mapserver.h	/^    hashTableObj metadata;$/;"	m	struct:__anon35
metadata	src/Topography/shapelib/mapserver.h	/^    hashTableObj metadata;$/;"	m	struct:classObj
metadata	src/Topography/shapelib/mapserver.h	/^    hashTableObj metadata;$/;"	m	struct:layerObj
metar	src/Weather/NOAAStore.hpp	/^    METAR metar;$/;"	m	struct:NOAAStore::Item
metar_available	src/Weather/NOAAStore.hpp	/^    bool metar_available;$/;"	m	struct:NOAAStore::Item
method	src/Terrain/jasper/jp2/jp2_cod.h	/^	uint_fast8_t method;$/;"	m	struct:__anon88
method	src/zzip/file.h	/^    int method;$/;"	m	struct:zzip_file
mhz	src/Device/Driver/KRT2.cpp	/^    uint8_t mhz;$/;"	m	struct:final::stx_msg	file:
mid	src/Gauge/ThermalAssistantRenderer.hpp	/^  PixelPoint mid;$/;"	m	class:ThermalAssistantRenderer
midGetFontMetrics	src/Android/TextUtil.cpp	/^jmethodID TextUtil::midGetFontMetrics;$/;"	m	class:TextUtil	file:
midGetFontMetrics	src/Android/TextUtil.hpp	/^  static jmethodID midTextUtil, midGetFontMetrics, midGetTextBounds;$/;"	m	class:TextUtil
midGetTextBounds	src/Android/TextUtil.cpp	/^jmethodID TextUtil::midGetTextBounds;$/;"	m	class:TextUtil	file:
midGetTextBounds	src/Android/TextUtil.hpp	/^  static jmethodID midTextUtil, midGetFontMetrics, midGetTextBounds;$/;"	m	class:TextUtil
midGetTextTextureGL	src/Android/TextUtil.cpp	/^jmethodID TextUtil::midGetTextTextureGL;$/;"	m	class:TextUtil	file:
midGetTextTextureGL	src/Android/TextUtil.hpp	/^  static jmethodID midGetTextTextureGL;$/;"	m	class:TextUtil
midTextUtil	src/Android/TextUtil.cpp	/^jmethodID TextUtil::midTextUtil;$/;"	m	class:TextUtil	file:
midTextUtil	src/Android/TextUtil.hpp	/^  static jmethodID midTextUtil, midGetFontMetrics, midGetTextBounds;$/;"	m	class:TextUtil
mid_sensors_cancelAllSensorSubscriptions_	src/Android/InternalSensors.cpp	/^jmethodID InternalSensors::mid_sensors_cancelAllSensorSubscriptions_;$/;"	m	class:InternalSensors	file:
mid_sensors_cancelAllSensorSubscriptions_	src/Android/InternalSensors.hpp	/^  static jmethodID mid_sensors_cancelAllSensorSubscriptions_;$/;"	m	class:InternalSensors
mid_sensors_cancelSensorSubscription_	src/Android/InternalSensors.cpp	/^jmethodID InternalSensors::mid_sensors_cancelSensorSubscription_;$/;"	m	class:InternalSensors	file:
mid_sensors_cancelSensorSubscription_	src/Android/InternalSensors.hpp	/^  static jmethodID mid_sensors_cancelSensorSubscription_;$/;"	m	class:InternalSensors
mid_sensors_getSubscribableSensors	src/Android/InternalSensors.cpp	/^jmethodID InternalSensors::mid_sensors_getSubscribableSensors;$/;"	m	class:InternalSensors	file:
mid_sensors_getSubscribableSensors	src/Android/InternalSensors.hpp	/^  static jmethodID mid_sensors_getSubscribableSensors;$/;"	m	class:InternalSensors
mid_sensors_subscribeToSensor_	src/Android/InternalSensors.cpp	/^jmethodID InternalSensors::mid_sensors_subscribeToSensor_;$/;"	m	class:InternalSensors	file:
mid_sensors_subscribeToSensor_	src/Android/InternalSensors.hpp	/^  static jmethodID mid_sensors_subscribeToSensor_;$/;"	m	class:InternalSensors
mid_sensors_subscribedToSensor_	src/Android/InternalSensors.cpp	/^jmethodID InternalSensors::mid_sensors_subscribedToSensor_;$/;"	m	class:InternalSensors	file:
mid_sensors_subscribedToSensor_	src/Android/InternalSensors.hpp	/^  static jmethodID mid_sensors_subscribedToSensor_;$/;"	m	class:InternalSensors
milliminutes	src/Device/Driver/IMI/Protocol/Conversion.hpp	/^        IMIDWORD milliminutes :16;$/;"	m	struct:IMI::AngleConverter::__anon161::__anon162
mimetype	src/Topography/shapelib/mapserver.h	/^    char *mimetype;$/;"	m	struct:__anon32
min	src/Form/DataField/Integer.hpp	/^  int min;$/;"	m	class:final
min	src/Form/DataField/Time.hpp	/^  int min;$/;"	m	class:final
min	src/Renderer/ChartRenderer.hpp	/^    double scale, min, max;$/;"	m	struct:ChartRenderer::Axis
min_altitude	src/Computer/CirclingComputer.hpp	/^  double min_altitude;$/;"	m	class:CirclingComputer
min_arrival_altitude	src/Engine/GlideSolvers/GlideResult.hpp	/^  double min_arrival_altitude;$/;"	m	struct:GlideResult
min_arrival_altitude	src/Engine/GlideSolvers/GlideState.hpp	/^  double min_arrival_altitude;$/;"	m	struct:GlideState
min_dead	src/Audio/VarioSettings.hpp	/^  double min_dead;$/;"	m	struct:VarioSoundSettings
min_dead	src/Audio/VarioSynthesiser.hpp	/^  int min_dead, max_dead;$/;"	m	class:final
min_distance	src/Engine/Route/AirspaceRoute.cpp	/^  double min_distance;$/;"	m	class:final	file:
min_fai_angle	src/Engine/Task/Shapes/FAITrianglePointValidator.cpp	/^static constexpr Angle min_fai_angle = Angle::Degrees(31.5);$/;"	v	file:
min_frequency	src/Audio/VarioSettings.hpp	/^  unsigned min_frequency;$/;"	m	struct:VarioSoundSettings
min_frequency	src/Audio/VarioSynthesiser.hpp	/^  unsigned min_frequency;$/;"	m	class:final
min_height	src/Engine/Task/Ordered/FinishConstraints.hpp	/^  unsigned min_height;$/;"	m	struct:FinishConstraints
min_height_ref	src/Engine/Task/Ordered/FinishConstraints.hpp	/^  AltitudeReference min_height_ref;$/;"	m	struct:FinishConstraints
min_period_ms	src/Audio/VarioSettings.hpp	/^  unsigned min_period_ms;$/;"	m	struct:VarioSoundSettings
min_period_ms	src/Audio/VarioSynthesiser.hpp	/^  unsigned min_period_ms;$/;"	m	class:final
min_points	src/Engine/Task/Factory/Constraints.hpp	/^  unsigned min_points;$/;"	m	struct:TaskFactoryConstraints
min_screen_pixels	src/Screen/Layout.cpp	/^  unsigned min_screen_pixels = 512;$/;"	m	namespace:Layout	file:
min_search_range	src/Engine/Task/Unordered/AbortTask.cpp	/^static constexpr double min_search_range = 50000;$/;"	v	file:
min_value	src/Dialogs/Device/Vega/VegaParametersWidget.hpp	/^    int min_value, max_value, step;$/;"	m	struct:VegaParametersWidget::StaticParameter
min_value	src/Screen/ProgressBar.hpp	/^  unsigned min_value = 0, max_value = 0, value = 0, step_size = 1;$/;"	m	class:ProgressBar
min_vario	src/Audio/VarioSynthesiser.cpp	/^static constexpr int min_vario = -500, max_vario = 500;$/;"	v	file:
min_x	src/ui/event/poll/linux/Input.hpp	/^  int min_x, max_x, min_y, max_y;$/;"	m	class:UI::final
min_y	src/ui/event/poll/linux/Input.hpp	/^  int min_x, max_x, min_y, max_y;$/;"	m	class:UI::final
minarcs	src/Topography/shapelib/mapserver.h	/^    double    minarcs;$/;"	m	struct:__anon49
minboxsize	src/Topography/shapelib/mapserver.h	/^    int minboxsize;$/;"	m	struct:__anon46
mincolor	src/Topography/shapelib/mapserver.h	/^    colorObj mincolor;$/;"	m	struct:styleObj
mindistance	src/Topography/shapelib/mapserver.h	/^    int mindistance;$/;"	m	struct:labelObj
minfeaturesize	src/Topography/shapelib/mapserver.h	/^    int minfeaturesize; \/* minimum feature size (in pixels) to label *\/$/;"	m	struct:labelObj
minfeaturesize	src/Topography/shapelib/mapserver.h	/^    int minfeaturesize; \/* minimum feature size (in pixels) to shape *\/$/;"	m	struct:classObj
minfeaturesize	src/Topography/shapelib/mapserver.h	/^    int minfeaturesize; \/* minimum feature size (in pixels) to shape *\/$/;"	m	struct:layerObj
mingeowidth	src/Topography/shapelib/mapserver.h	/^    double mingeowidth, maxgeowidth; \/* map width (in map units) at which the layer should be drawn *\/$/;"	m	struct:layerObj
minimum_control_height	src/Screen/Layout.cpp	/^  unsigned minimum_control_height = 20, maximum_control_height = 44;$/;"	m	namespace:Layout	file:
minimum_speed_to_force_flight_logging	src/Device/Driver/CAI302/Protocol.hpp	/^    uint16_t minimum_speed_to_force_flight_logging; \/\/ (Knots)$/;"	m	struct:CAI302::Pilot
minincrement	src/Topography/shapelib/mapserver.h	/^    double    minincrement;$/;"	m	struct:__anon49
minlength	src/Topography/shapelib/mapserver.h	/^    int minlength;$/;"	m	struct:labelObj
minor_tick_size	src/Renderer/ChartRenderer.hpp	/^  const int minor_tick_size;$/;"	m	class:ChartRenderer
minscale	src/Topography/shapelib/mapserver.h	/^    double minscale;$/;"	m	struct:__anon52
minscaledenom	src/Topography/shapelib/mapserver.h	/^    double minscaledenom, maxscaledenom;$/;"	m	struct:__anon35
minscaledenom	src/Topography/shapelib/mapserver.h	/^    double minscaledenom, maxscaledenom;$/;"	m	struct:classObj
minscaledenom	src/Topography/shapelib/mapserver.h	/^    double minscaledenom, maxscaledenom;$/;"	m	struct:labelObj
minscaledenom	src/Topography/shapelib/mapserver.h	/^    double minscaledenom, maxscaledenom;$/;"	m	struct:layerObj
minscaledenom	src/Topography/shapelib/mapserver.h	/^    double minscaledenom, maxscaledenom;$/;"	m	struct:styleObj
minsize	src/Topography/shapelib/mapserver.h	/^    double minsize, maxsize;$/;"	m	struct:styleObj
minsize	src/Topography/shapelib/mapserver.h	/^    int minsize, maxsize;$/;"	m	struct:labelObj
minsubdivides	src/Topography/shapelib/mapserver.h	/^    double    minsubdivides;$/;"	m	struct:__anon49
mintemplate	src/Topography/shapelib/mapserver.h	/^    char *mintemplate, *maxtemplate;$/;"	m	struct:__anon35
minute	src/Device/Driver/CAI302/Protocol.hpp	/^    uint8_t year, month, day, hour, minute, second;$/;"	m	struct:CAI302::DateTime
minute	src/Weather/ParsedMETAR.hpp	/^  uint8_t hour, minute;$/;"	m	struct:ParsedMETAR
minute	src/time/BrokenTime.hpp	/^  uint8_t minute;$/;"	m	struct:BrokenTime
minute_clock	src/Engine/Task/Computer/WindowStatsComputer.hpp	/^  DeltaTime minute_clock;$/;"	m	class:WindowStatsComputer
minutes	src/Math/Angle.hpp	/^    unsigned degrees, minutes, seconds;$/;"	m	struct:Angle::DMS
minvalue	src/Topography/shapelib/mapserver.h	/^    double minvalue;$/;"	m	struct:styleObj
minver	src/Terrain/jasper/jp2/jp2_cod.h	/^	uint_fast32_t minver;$/;"	m	struct:__anon85
minwidth	src/Topography/shapelib/mapserver.h	/^    double minwidth, maxwidth;$/;"	m	struct:styleObj
minx	src/Topography/shapelib/mapprimitive.h	/^  double minx, miny, maxx, maxy;$/;"	m	struct:__anon68
minx	src/Topography/shapelib/mapserver.h	/^  double minx,miny,maxx,maxy,advance;$/;"	m	struct:__anon58
miny	src/Topography/shapelib/mapprimitive.h	/^  double minx, miny, maxx, maxy;$/;"	m	struct:__anon68
miny	src/Topography/shapelib/mapserver.h	/^  double minx,miny,maxx,maxy,advance;$/;"	m	struct:__anon58
misc	src/Input/InputConfig.hpp	/^    const TCHAR *misc;$/;"	m	struct:InputConfig::Event
mix_object	src/Audio/AndroidPCMPlayer.hpp	/^  SLES::Object mix_object;$/;"	m	class:AndroidPCMPlayer
mixed_constraints	src/Engine/Task/Factory/MixedTaskFactory.cpp	/^static constexpr TaskFactoryConstraints mixed_constraints = {$/;"	v	file:
mixer_data_source	src/Audio/PCMMixer.hpp	/^  PCMMixerDataSource mixer_data_source;$/;"	m	class:final
mixer_parameters	src/Dialogs/Device/Vega/MixerParameters.hpp	/^VegaParametersWidget::StaticParameter mixer_parameters[] = {$/;"	v
mo_file	src/Language/Language.cpp	/^const MOFile *mo_file;$/;"	v
mo_header	src/Language/MOFile.hpp	/^  struct mo_header {$/;"	s	class:MOFile
mo_loader	src/Language/LanguageGlue.cpp	/^static MOLoader *mo_loader;$/;"	v	file:
mo_table_entry	src/Language/MOFile.hpp	/^  struct mo_table_entry {$/;"	s	class:MOFile
modal_result	src/Form/Form.hpp	/^  int modal_result = 0;$/;"	m	class:WndForm
mode	src/Device/Driver/CAI302/Internal.hpp	/^  Mode mode;$/;"	m	class:CAI302Device
mode	src/Device/Driver/FLARM/Device.hpp	/^  Mode mode = Mode::UNKNOWN;$/;"	m	class:FlarmDevice
mode	src/Device/Driver/LX/Internal.hpp	/^  Mode mode;$/;"	m	class:LXDevice
mode	src/Dialogs/Device/Vega/AudioParameters.hpp	/^  const char *mode;$/;"	m	class:VegaAudioParametersWidget
mode	src/Engine/Route/Config.hpp	/^  Mode mode;$/;"	m	struct:RoutePlannerConfig
mode	src/Engine/Task/TaskManager.hpp	/^  TaskType mode;$/;"	m	class:TaskManager
mode	src/Input/InputDefaults.cpp	/^  unsigned char mode, location;$/;"	m	struct:flat_label	file:
mode	src/Input/InputDefaults.cpp	/^  unsigned char mode;$/;"	m	struct:flat_event_map	file:
mode	src/Input/InputDefaults.cpp	/^  unsigned char mode;$/;"	m	struct:flat_gesture_map	file:
mode	src/Input/InputParser.cpp	/^  StaticString<1024> mode;$/;"	m	struct:EventBuilder	file:
mode	src/Topography/ShapeRenderer.hpp	/^  enum { NONE, OUTLINE, SOLID } mode;$/;"	m	class:ShapeRenderer	typeref:enum:ShapeRenderer::__anon82
mode	src/Topography/shapelib/mapserver.h	/^    int mode; \/* MS_QUERY_MODE *\/$/;"	m	struct:__anon33
mode	src/io/FileOutputStream.hxx	/^	Mode mode;$/;"	m	class:final
mode_du	src/ui/canvas/fb/mxcfb.h	/^	int mode_du;$/;"	m	struct:mxcfb_waveform_modes
mode_gc16	src/ui/canvas/fb/mxcfb.h	/^	int mode_gc16;$/;"	m	struct:mxcfb_waveform_modes
mode_gc32	src/ui/canvas/fb/mxcfb.h	/^	int mode_gc32;$/;"	m	struct:mxcfb_waveform_modes
mode_gc4	src/ui/canvas/fb/mxcfb.h	/^	int mode_gc4;$/;"	m	struct:mxcfb_waveform_modes
mode_gc8	src/ui/canvas/fb/mxcfb.h	/^	int mode_gc8;$/;"	m	struct:mxcfb_waveform_modes
mode_init	src/ui/canvas/fb/mxcfb.h	/^	int mode_init;$/;"	m	struct:mxcfb_waveform_modes
mode_inside	src/Engine/Airspace/AirspaceWarningManager.cpp	/^  bool mode_inside;$/;"	m	class:final	file:
mode_optional_start	src/Renderer/TaskPointRenderer.hpp	/^  bool mode_optional_start;$/;"	m	class:TaskPointRenderer
model	src/Kobo/Model.cpp	/^  KoboModel model;$/;"	m	struct:__anon183	file:
modeless	src/Form/Form.hpp	/^  bool modeless = false;$/;"	m	class:WndForm
modes	src/Input/InputConfig.hpp	/^  TrivialArray<StaticString<MAX_MODE_STRING>, MAX_MODE> modes;$/;"	m	struct:InputConfig
modified	src/Dialogs/Task/Manager/Internal.hpp	/^  bool modified = false;$/;"	m	class:final
modified	src/Dialogs/Task/OptionalStartsDialog.cpp	/^  bool modified = false;$/;"	m	class:OptionStartsWidget	file:
modified	src/Dialogs/Waypoint/Manager.cpp	/^  bool modified;$/;"	m	class:final	file:
modified	src/Dialogs/Waypoint/dlgWaypointEdit.cpp	/^  bool modified;$/;"	m	class:final	file:
modified	src/FLARM/List.hpp	/^  Validity modified;$/;"	m	struct:TrafficList
modified	src/Profile/Map.hpp	/^  bool modified;$/;"	m	class:ProfileMap
modify_serial	src/Engine/Contest/Solvers/TraceManager.hpp	/^  Serial modify_serial;$/;"	m	class:TraceManager
modify_serial	src/Engine/Trace/Trace.hpp	/^  Serial append_serial, modify_serial;$/;"	m	class:Trace
module	src/system/DynamicLibrary.hpp	/^  HMODULE module;$/;"	m	class:DynamicLibrary
monday	src/Engine/Airspace/AirspaceActivity.hpp	/^    bool monday:1;$/;"	m	struct:AirspaceActivity::Days
monitor	src/Device/Descriptor.hpp	/^  DataHandler  *monitor;$/;"	m	class:final
monitor	src/Monitor/AirspaceWarningMonitor.cpp	/^  AirspaceWarningMonitor &monitor;$/;"	m	class:final	file:
monitor	src/Monitor/MatTaskMonitor.cpp	/^  MatTaskMonitor &monitor;$/;"	m	class:final	file:
monitor	src/Monitor/TaskAdvanceMonitor.cpp	/^  TaskAdvanceMonitor &monitor;$/;"	m	class:final	file:
monitor	src/event/SignalMonitor.cxx	/^static Manual<SignalMonitor> monitor;$/;"	v	file:
monitor_button	src/Dialogs/Device/DeviceListDialog.cpp	/^  Button *manage_button, *monitor_button;$/;"	m	class:final	file:
mono	src/ui/canvas/freetype/Init.cpp	/^bool FreeType::mono = true;$/;"	m	class:FreeType	file:
monospace	src/Look/FontDescription.hpp	/^  bool monospace;$/;"	m	class:FontDescription
monospace_font_path	src/ui/canvas/freetype/Font.cpp	/^static AllocatedPath monospace_font_path = nullptr;$/;"	v	file:
month	src/Device/Driver/CAI302/Protocol.hpp	/^    uint8_t year, month, day, hour, minute, second;$/;"	m	struct:CAI302::DateTime
month	src/Device/Driver/LX/LXN.hpp	/^    uint8_t day, month, year;$/;"	m	struct:LXN::Task
month	src/Device/Driver/LX/LXN.hpp	/^    uint8_t day, month;$/;"	m	struct:LXN::Date
month	src/time/BrokenDate.hpp	/^  uint8_t month;$/;"	m	struct:BrokenDate
month2	src/Device/Driver/LX/LXN.hpp	/^    uint8_t day2, month2, year2;$/;"	m	struct:LXN::Task
monthinput	src/Device/Driver/LX/Protocol.hpp	/^    uint8_t monthinput;$/;"	m	struct:LX::Declaration
monthuser	src/Device/Driver/LX/Protocol.hpp	/^    uint8_t monthuser;$/;"	m	struct:LX::Declaration
more	src/Dialogs/Task/Manager/TaskListPanel.cpp	/^  bool more;$/;"	m	class:final	file:
more_button	src/Dialogs/Task/Manager/TaskListPanel.cpp	/^  Button *more_button;$/;"	m	class:final	file:
morning_twilight	src/Math/SunEphemeris.hpp	/^    double day_length, morning_twilight, evening_twilight;$/;"	m	struct:SunEphemeris::Result
mountain_pass_icon	src/Look/WaypointLook.hpp	/^  MaskedIcon mountain_pass_icon;$/;"	m	struct:WaypointLook
mountain_top_icon	src/Look/WaypointLook.hpp	/^  MaskedIcon mountain_top_icon, bridge_icon, obstacle_icon;$/;"	m	struct:WaypointLook
mouse	src/ui/event/poll/InputQueue.hpp	/^  LinuxInputDevice mouse;$/;"	m	class:DisplayOrientation::final
mouse_down_clock	src/MapWindow/GlueMapWindow.hpp	/^  PeriodClock mouse_down_clock;$/;"	m	class:GlueMapWindow
move	src/Device/Driver/IMI/Protocol/Types.hpp	/^    IMIDWORD move:1;$/;"	m	struct:IMI::TObservationZone
move	src/Device/Port/DumpPort.cpp	/^   port(std::move(_port)) {}$/;"	f
move	src/Dialogs/StatusPanels/FlightStatusPanel.hpp	/^    :StatusPanel(look), nearest_waypoint(std::move(_waypoint)) {}$/;"	f	class:FlightStatusPanel
move	src/Dialogs/Waypoint/WaypointInfoWidget.hpp	/^    :RowFormWidget(look), waypoint(std::move(_waypoint)) {}$/;"	f	struct:WaypointInfoWidget
move	src/Dialogs/Weather/RASPDialog.cpp	/^     rasp(std::move(_rasp)) {}$/;"	f	class:final
move	src/Dialogs/dlgSimulatorPrompt.cpp	/^    :look(_look), callback(std::move(_callback)) {}$/;"	f	class:final
move	src/Engine/Task/ObservationZones/ObservationZoneClient.cpp	/^  :oz_point(std::move(_oz_point)) {}$/;"	f
move	src/Widget/ActionWidget.hpp	/^    :callback(std::move(_callback)) {}$/;"	f	class:ActionWidget
move	src/Widget/ArrowPagerWidget.hpp	/^     extra(std::move(_extra)) {}$/;"	f	class:ArrowPagerWidget
move	src/Widget/ButtonWidget.cpp	/^   callback(std::move(_callback)) {}$/;"	f
move	src/Widget/CreateWindowWidget.hpp	/^    :create(std::move(_create)) {}$/;"	f	class:final
move	src/Widget/RowFormWidget.hpp	/^       widget(std::move(_widget))$/;"	f	struct:RowFormWidget::Row
move	src/Widget/RowFormWidget.hpp	/^       window(std::move(_window))$/;"	f	struct:RowFormWidget::Row
move	src/Widget/SolidWidget.hpp	/^    :widget(std::move(_widget)) {}$/;"	f	class:SolidWidget
move	src/Widget/TabWidget.hpp	/^     extra(std::move(_extra)) {}$/;"	f	class:TabWidget
move	src/Widget/TwoWidgets.hpp	/^     second(std::move(_second)) {}$/;"	f	class:TwoWidgets
move	src/Widget/WindowWidget.cpp	/^  :window(std::move(_window))$/;"	f
move	src/io/FileReader.hxx	/^		 fd(std::move(other.fd)) {}$/;"	f	class:final
move	src/ui/event/DelayedNotify.hpp	/^    :delay(_delay), callback(std::move(_callback)) {}$/;"	f	class:UI::final
move	src/ui/event/Notify.cpp	/^  :callback(std::move(_callback))$/;"	f	namespace:UI
move	src/ui/event/PeriodicTimer.hpp	/^    :callback(std::move(_callback)) {}$/;"	f	class:UI::final
move	src/ui/event/Timer.hpp	/^  explicit Timer(Callback &&_callback) noexcept:callback(std::move(_callback)) {}$/;"	f	class:UI::final
move	src/ui/event/poll/Timer.cpp	/^   callback(std::move(_callback)) {}$/;"	f	namespace:UI
move	src/util/AllocatedString.hxx	/^		:BasicAllocatedString(std::move(src)) {}$/;"	f	class:AllocatedString
move	src/util/LightString.hxx	/^		 allocation(std::move(src)) {}$/;"	f	class:LightString
move	src/util/LightString.hxx	/^		 allocation(std::move(src.allocation)) {}$/;"	f	class:LightString
move_down_button	src/Dialogs/Settings/Panels/PagesConfigPanel.cpp	/^  Button *move_up_button, *move_down_button;$/;"	m	class:PageListWidget	file:
move_in_view	src/Renderer/TextInBox.hpp	/^  bool move_in_view = false;$/;"	v
move_up_button	src/Dialogs/Settings/Panels/PagesConfigPanel.cpp	/^  Button *move_up_button, *move_down_button;$/;"	m	class:PageListWidget	file:
moved	src/ui/event/poll/linux/MergeMouse.hpp	/^  bool moved = false, pressed = false, released = false;$/;"	m	class:UI::final
movement_detected	src/Interface.cpp	/^bool CommonInterface::Private::movement_detected = false;$/;"	m	class:CommonInterface::Private	file:
moving	src/ui/event/poll/linux/Input.hpp	/^  bool moving;$/;"	m	class:UI::final
moving_at	src/Computer/FlyingComputer.hpp	/^  GeoPoint moving_at;$/;"	m	class:FlyingComputer
moving_clock	src/Computer/FlyingComputer.hpp	/^  StateClock<30, 5> moving_clock;$/;"	m	class:FlyingComputer
moving_since	src/Computer/FlyingComputer.hpp	/^  double moving_since;$/;"	m	class:FlyingComputer
mps	src/Terrain/jasper/jpc/jpc_mqcod.h	/^	bool mps;$/;"	m	struct:__anon111
mps	src/Terrain/jasper/jpc/jpc_mqcod.h	/^	bool mps;$/;"	m	struct:jpc_mqstate_s
mrCancel	src/Form/Form.hpp	/^  mrCancel = 3,$/;"	e	enum:ModalResult
mrOK	src/Form/Form.hpp	/^  mrOK = 2,$/;"	e	enum:ModalResult
msAddLine	src/Topography/shapelib/mapprimitive.c	/^int msAddLine(shapeObj *p, lineObj *new_line)$/;"	f
msAddLineDirectly	src/Topography/shapelib/mapprimitive.c	/^int msAddLineDirectly(shapeObj *p, lineObj *new_line)$/;"	f
msAddPointToLine	src/Topography/shapelib/mapprimitive.c	/^int msAddPointToLine(lineObj *line, pointObj *point )$/;"	f
msAllocBitArray	src/Topography/shapelib/mapbits.c	/^ms_bitarray msAllocBitArray(int numbits)$/;"	f
msBuildPath	src/Topography/shapelib/mapstring.c	/^char *msBuildPath(char *pszReturnPath, const char *abs_path, const char *path)$/;"	f
msBuildPath3	src/Topography/shapelib/mapstring.c	/^char *msBuildPath3(char *pszReturnPath, const char *abs_path, const char *path1,const char *path2)$/;"	f
msCaseReplaceSubstring	src/Topography/shapelib/mapstring.c	/^char *msCaseReplaceSubstring(char *str, const char *old, const char *new)$/;"	f
msClipPolygonRect	src/Topography/shapelib/mapprimitive.c	/^void msClipPolygonRect(shapeObj *shape, rectObj rect)$/;"	f
msClipPolylineRect	src/Topography/shapelib/mapprimitive.c	/^void msClipPolylineRect(shapeObj *shape, rectObj rect)$/;"	f
msCommifyString	src/Topography/shapelib/mapstring.c	/^char *msCommifyString(char *str)$/;"	f
msComputeBounds	src/Topography/shapelib/mapprimitive.c	/^void msComputeBounds(shapeObj *shape)$/;"	f
msConvertWideStringToUTF8	src/Topography/shapelib/mapstring.c	/^char* msConvertWideStringToUTF8 (const wchar_t* string, const char* encoding)$/;"	f
msCopyShape	src/Topography/shapelib/mapprimitive.c	/^int msCopyShape(shapeObj *from, shapeObj *to)$/;"	f
msCountChars	src/Topography/shapelib/mapstring.c	/^int msCountChars(char *str, char ch)$/;"	f
msCreateTree	src/Topography/shapelib/maptree.c	/^treeObj *msCreateTree(shapefileObj *shapefile, int maxdepth)$/;"	f
msDBFAddField	src/Topography/shapelib/mapxbase.c	/^int msDBFAddField(DBFHandle psDBF, const char * pszFieldName, DBFFieldType eType, int nWidth, int nDecimals )$/;"	f
msDBFClose	src/Topography/shapelib/mapxbase.c	/^void  msDBFClose(DBFHandle psDBF)$/;"	f
msDBFCreate	src/Topography/shapelib/mapxbase.c	/^DBFHandle msDBFCreate( const char * pszFilename )$/;"	f
msDBFGetFieldCount	src/Topography/shapelib/mapxbase.c	/^int msDBFGetFieldCount( DBFHandle psDBF )$/;"	f
msDBFGetFieldInfo	src/Topography/shapelib/mapxbase.c	/^DBFFieldType msDBFGetFieldInfo( DBFHandle psDBF, int iField, char * pszFieldName, int * pnWidth, int * pnDecimals )$/;"	f
msDBFGetItemIndex	src/Topography/shapelib/mapxbase.c	/^int msDBFGetItemIndex(DBFHandle dbffile, char *name)$/;"	f
msDBFGetItemIndexes	src/Topography/shapelib/mapxbase.c	/^int *msDBFGetItemIndexes(DBFHandle dbffile, char **items, int numitems)$/;"	f
msDBFGetItems	src/Topography/shapelib/mapxbase.c	/^char **msDBFGetItems(DBFHandle dbffile)$/;"	f
msDBFGetRecordCount	src/Topography/shapelib/mapxbase.c	/^int msDBFGetRecordCount( DBFHandle psDBF )$/;"	f
msDBFGetValueList	src/Topography/shapelib/mapxbase.c	/^char **msDBFGetValueList(DBFHandle dbffile, int record, int *itemindexes, int numitems)$/;"	f
msDBFGetValues	src/Topography/shapelib/mapxbase.c	/^char **msDBFGetValues(DBFHandle dbffile, int record)$/;"	f
msDBFOpen	src/Topography/shapelib/mapxbase.c	/^DBFHandle msDBFOpen(struct zzip_dir *zdir,  const char * pszFilename, const char * pszAccess )$/;"	f
msDBFReadAttribute	src/Topography/shapelib/mapxbase.c	/^static const char *msDBFReadAttribute(DBFHandle psDBF, int hEntity, int iField )$/;"	f	file:
msDBFReadDoubleAttribute	src/Topography/shapelib/mapxbase.c	/^double  msDBFReadDoubleAttribute( DBFHandle psDBF, int iRecord, int iField )$/;"	f
msDBFReadIntegerAttribute	src/Topography/shapelib/mapxbase.c	/^int msDBFReadIntegerAttribute( DBFHandle psDBF, int iRecord, int iField )$/;"	f
msDBFReadStringAttribute	src/Topography/shapelib/mapxbase.c	/^const char *msDBFReadStringAttribute( DBFHandle psDBF, int iRecord, int iField )$/;"	f
msDBFWriteAttribute	src/Topography/shapelib/mapxbase.c	/^static int msDBFWriteAttribute(DBFHandle psDBF, int hEntity, int iField, void * pValue )$/;"	f	file:
msDBFWriteDoubleAttribute	src/Topography/shapelib/mapxbase.c	/^int msDBFWriteDoubleAttribute( DBFHandle psDBF, int iRecord, int iField, double dValue )$/;"	f
msDBFWriteIntegerAttribute	src/Topography/shapelib/mapxbase.c	/^int msDBFWriteIntegerAttribute( DBFHandle psDBF, int iRecord, int iField, int nValue )$/;"	f
msDBFWriteStringAttribute	src/Topography/shapelib/mapxbase.c	/^int msDBFWriteStringAttribute( DBFHandle psDBF, int iRecord, int iField, const char * pszValue )$/;"	f
msDebug	src/Topography/shapelib/maperror.h	/^msDebug(const char *fmt, ...)$/;"	f
msDecodeHTMLEntities	src/Topography/shapelib/mapstring.c	/^void msDecodeHTMLEntities(const char *string)$/;"	f
msDestroyTree	src/Topography/shapelib/maptree.c	/^void msDestroyTree(treeObj *tree)$/;"	f
msDistancePointToPoint	src/Topography/shapelib/mapsearch.c	/^double msDistancePointToPoint(pointObj *a, pointObj *b)$/;"	f
msDistancePointToSegment	src/Topography/shapelib/mapsearch.c	/^double msDistancePointToSegment(pointObj *p, pointObj *a, pointObj *b)$/;"	f
msDistancePointToShape	src/Topography/shapelib/mapsearch.c	/^double msDistancePointToShape(pointObj *point, shapeObj *shape)$/;"	f
msDistanceSegmentToSegment	src/Topography/shapelib/mapsearch.c	/^double msDistanceSegmentToSegment(pointObj *pa, pointObj *pb, pointObj *pc, pointObj *pd)$/;"	f
msDistanceShapeToShape	src/Topography/shapelib/mapsearch.c	/^double msDistanceShapeToShape(shapeObj *shape1, shapeObj *shape2)$/;"	f
msDoubleToString	src/Topography/shapelib/mapstring.c	/^char *msDoubleToString(double value, int force_f)$/;"	f
msEncodeChar	src/Topography/shapelib/mapstring.c	/^int msEncodeChar(const char c)$/;"	f
msEncodeHTMLEntities	src/Topography/shapelib/mapstring.c	/^char *msEncodeHTMLEntities(const char *string)$/;"	f
msEncodeUrl	src/Topography/shapelib/mapstring.c	/^char *msEncodeUrl(const char *data)$/;"	f
msEncodeUrlExcept	src/Topography/shapelib/mapstring.c	/^char *msEncodeUrlExcept(const char *data, const char except)$/;"	f
msEscapeJSonString	src/Topography/shapelib/mapstring.c	/^char* msEscapeJSonString(const char* pszJSonString)$/;"	f
msFilterTreeSearch	src/Topography/shapelib/maptree.c	/^void msFilterTreeSearch(shapefileObj *shp, ms_bitarray status, rectObj search_rect)$/;"	f
msFlipBit	src/Topography/shapelib/mapbits.c	/^void msFlipBit(ms_bitarray array, int index)$/;"	f
msFree	src/Topography/shapelib/mapalloc.c	/^void msFree(void *p)$/;"	f
msFree	src/Topography/shapelib/mapserver.h	2184;"	d
msFreeCharArray	src/Topography/shapelib/mapalloc.c	/^void msFreeCharArray(char **array, int num_items)$/;"	f
msFreeLabelPathObj	src/Topography/shapelib/mapprimitive.c	/^void msFreeLabelPathObj(labelPathObj *path)$/;"	f
msFreeShape	src/Topography/shapelib/mapprimitive.c	/^void msFreeShape(shapeObj *shape)$/;"	f
msGetBit	src/Topography/shapelib/mapbits.c	/^int msGetBit(ms_const_bitarray array, int index)$/;"	f
msGetBitArraySize	src/Topography/shapelib/mapbits.c	/^size_t msGetBitArraySize(int numbits)$/;"	f
msGetEncodedString	src/Topography/shapelib/mapstring.c	/^char *msGetEncodedString(const char *string, const char *encoding)$/;"	f
msGetFriBidiEncodedString	src/Topography/shapelib/mapstring.c	/^char *msGetFriBidiEncodedString(const char *string, const char *encoding)$/;"	f
msGetInnerList	src/Topography/shapelib/mapprimitive.c	/^int *msGetInnerList(shapeObj *shape, int r, int *outerlist)$/;"	f
msGetNextBit	src/Topography/shapelib/mapbits.c	/^int msGetNextBit(ms_const_bitarray array, int i, int size)$/;"	f
msGetNextGlyph	src/Topography/shapelib/mapstring.c	/^int msGetNextGlyph(const char **in_ptr, char *out_string)$/;"	f
msGetNumGlyphs	src/Topography/shapelib/mapstring.c	/^int msGetNumGlyphs(const char *in_ptr)$/;"	f
msGetOuterList	src/Topography/shapelib/mapprimitive.c	/^int *msGetOuterList(shapeObj *shape)$/;"	f
msGetPath	src/Topography/shapelib/mapstring.c	/^char *msGetPath(const char *fn)$/;"	f
msGetPolygonArea	src/Topography/shapelib/mapprimitive.c	/^double msGetPolygonArea(shapeObj *p)$/;"	f
msGetPolygonCentroid	src/Topography/shapelib/mapprimitive.c	/^int msGetPolygonCentroid(shapeObj *p, pointObj *lp, double *miny, double *maxy)$/;"	f
msGetShapeRAMSize	src/Topography/shapelib/mapprimitive.c	/^int msGetShapeRAMSize(shapeObj* shape)$/;"	f
msGetUnicodeEntity	src/Topography/shapelib/mapstring.c	/^int msGetUnicodeEntity(const char *inptr, unsigned int *unicode)$/;"	f
msHashString	src/Topography/shapelib/mapstring.c	/^char *msHashString(const char *pszStr)$/;"	f
msHexToInt	src/Topography/shapelib/mapstring.c	/^int msHexToInt(char *hex)$/;"	f
msInitShape	src/Topography/shapelib/mapprimitive.c	/^void msInitShape(shapeObj *shape)$/;"	f
msIntToString	src/Topography/shapelib/mapstring.c	/^char *msIntToString(int value)$/;"	f
msIntersectMultipointPolygon	src/Topography/shapelib/mapsearch.c	/^int msIntersectMultipointPolygon(shapeObj *multipoint, shapeObj *poly)$/;"	f
msIntersectPointPolygon	src/Topography/shapelib/mapsearch.c	/^int msIntersectPointPolygon(pointObj *point, shapeObj *poly)$/;"	f
msIntersectPolygons	src/Topography/shapelib/mapsearch.c	/^int msIntersectPolygons(shapeObj *p1, shapeObj *p2)$/;"	f
msIntersectPolylinePolygon	src/Topography/shapelib/mapsearch.c	/^int msIntersectPolylinePolygon(shapeObj *line, shapeObj *poly)$/;"	f
msIntersectPolylines	src/Topography/shapelib/mapsearch.c	/^int msIntersectPolylines(shapeObj *line1, shapeObj *line2)$/;"	f
msIntersectSegments	src/Topography/shapelib/mapsearch.c	/^int msIntersectSegments(const pointObj *a, const pointObj *b, const pointObj *c, const pointObj *d)   \/* from comp.graphics.alogorithms FAQ *\/$/;"	f
msIsDegenerateShape	src/Topography/shapelib/mapprimitive.c	/^int msIsDegenerateShape(shapeObj *shape)$/;"	f
msIsNan	src/Topography/shapelib/mapserver.h	338;"	d
msIsNan	src/Topography/shapelib/mapserver.h	340;"	d
msIsOuterRing	src/Topography/shapelib/mapprimitive.c	/^int msIsOuterRing(shapeObj *shape, int r)$/;"	f
msIsXMLTagValid	src/Topography/shapelib/mapstring.c	/^int msIsXMLTagValid(const char *string)$/;"	f
msJoinStrings	src/Topography/shapelib/mapstring.c	/^char *msJoinStrings(char **array, int arrayLength, const char *delimeter)$/;"	f
msLayerEncodeShapeAttributes	src/Topography/shapelib/mapstring.c	/^int msLayerEncodeShapeAttributes( layerObj *layer, shapeObj *shape) {$/;"	f
msLineLabelPath	src/Topography/shapelib/mapprimitive.c	/^int msLineLabelPath(mapObj *map, imageObj *img, lineObj *p, textSymbolObj *ts, struct line_lengths *ll, struct label_follow_result *lfr, labelObj *label)$/;"	f
msLineLabelPoint	src/Topography/shapelib/mapprimitive.c	/^int msLineLabelPoint(mapObj *map, lineObj *p, textSymbolObj *ts, struct line_lengths *ll, struct label_auto_result *lar, labelObj *label, double resolutionfactor)$/;"	f
msLongToString	src/Topography/shapelib/mapstring.c	/^char *msLongToString(long value)$/;"	f
msMergeRect	src/Topography/shapelib/mapsearch.c	/^void msMergeRect(rectObj *a, rectObj *b)$/;"	f
msOffsetPointRelativeTo	src/Topography/shapelib/mapprimitive.c	/^void msOffsetPointRelativeTo(pointObj *point, layerObj *layer)$/;"	f
msOffsetShapeRelativeTo	src/Topography/shapelib/mapprimitive.c	/^void msOffsetShapeRelativeTo(shapeObj *shape, layerObj *layer)$/;"	f
msPointInPolygon	src/Topography/shapelib/mapsearch.c	/^int msPointInPolygon(pointObj *p, lineObj *c)$/;"	f
msPointInRect	src/Topography/shapelib/mapsearch.c	/^int msPointInRect(const pointObj *p, const rectObj *rect)$/;"	f
msPointToFormattedString	src/Topography/shapelib/mapprimitive.c	/^void msPointToFormattedString(pointObj *point, const char *format, char *buffer, int buffer_length)$/;"	f
msPolygonDirection	src/Topography/shapelib/mapsearch.c	/^int msPolygonDirection(lineObj *c)$/;"	f
msPolygonLabelPoint	src/Topography/shapelib/mapprimitive.c	/^int msPolygonLabelPoint(shapeObj *p, pointObj *lp, double min_dimension)$/;"	f
msPolylineComputeLineSegments	src/Topography/shapelib/mapprimitive.c	/^void msPolylineComputeLineSegments(shapeObj *shape, struct polyline_lengths *pll)$/;"	f
msPolylineLabelPath	src/Topography/shapelib/mapprimitive.c	/^int msPolylineLabelPath(mapObj *map, imageObj *image, shapeObj *p, textSymbolObj *ts, labelObj *label, struct label_follow_result *lfr)$/;"	f
msPolylineLabelPoint	src/Topography/shapelib/mapprimitive.c	/^int msPolylineLabelPoint(mapObj *map, shapeObj *p, textSymbolObj *ts, labelObj *label, struct label_auto_result *lar, double resolutionfactor)$/;"	f
msPrintShape	src/Topography/shapelib/mapprimitive.c	/^void msPrintShape(shapeObj *p)$/;"	f
msReadTree	src/Topography/shapelib/maptree.c	/^treeObj *msReadTree(char *filename, int debug)$/;"	f
msRectContained	src/Topography/shapelib/mapsearch.c	/^int msRectContained(const rectObj *a, const rectObj *b)$/;"	f
msRectIntersect	src/Topography/shapelib/mapsearch.c	/^int msRectIntersect( rectObj *a, const rectObj *b )$/;"	f
msRectOverlap	src/Topography/shapelib/mapsearch.c	/^int msRectOverlap(const rectObj *a, const rectObj *b)$/;"	f
msRectToFormattedString	src/Topography/shapelib/mapprimitive.c	/^void msRectToFormattedString(rectObj *rect, char *format, char *buffer, int buffer_length)$/;"	f
msRectToPolygon	src/Topography/shapelib/mapprimitive.c	/^void msRectToPolygon(rectObj rect, shapeObj *poly)$/;"	f
msReplaceChar	src/Topography/shapelib/mapstring.c	/^void msReplaceChar(char *str, char old, char new)$/;"	f
msReplaceSubstring	src/Topography/shapelib/mapstring.c	/^char *msReplaceSubstring(char *str, const char *old, const char *new)$/;"	f
msSHPClose	src/Topography/shapelib/mapshape.c	/^void msSHPClose(SHPHandle psSHP )$/;"	f
msSHPCreate	src/Topography/shapelib/mapshape.c	/^SHPHandle msSHPCreate( const char * pszLayer, int nShapeType )$/;"	f
msSHPDiskTreeClose	src/Topography/shapelib/maptree.c	/^void msSHPDiskTreeClose(SHPTreeHandle disktree)$/;"	f
msSHPDiskTreeOpen	src/Topography/shapelib/maptree.c	/^SHPTreeHandle msSHPDiskTreeOpen(struct zzip_dir *zdir, const char * pszTree,$/;"	f
msSHPGetInfo	src/Topography/shapelib/mapshape.c	/^void msSHPGetInfo(SHPHandle psSHP, int * pnEntities, int * pnShapeType )$/;"	f
msSHPLayerClose	src/Topography/shapelib/mapshape.c	/^int msSHPLayerClose(layerObj *layer)$/;"	f
msSHPLayerFreeItemInfo	src/Topography/shapelib/mapshape.c	/^void msSHPLayerFreeItemInfo(layerObj *layer)$/;"	f
msSHPLayerGetExtent	src/Topography/shapelib/mapshape.c	/^int msSHPLayerGetExtent(layerObj *layer, rectObj *extent)$/;"	f
msSHPLayerGetItems	src/Topography/shapelib/mapshape.c	/^int msSHPLayerGetItems(layerObj *layer)$/;"	f
msSHPLayerGetShape	src/Topography/shapelib/mapshape.c	/^int msSHPLayerGetShape(layerObj *layer, shapeObj *shape, resultObj *record)$/;"	f
msSHPLayerInitItemInfo	src/Topography/shapelib/mapshape.c	/^int msSHPLayerInitItemInfo(layerObj *layer)$/;"	f
msSHPLayerInitializeVirtualTable	src/Topography/shapelib/mapshape.c	/^int msSHPLayerInitializeVirtualTable(layerObj *layer)$/;"	f
msSHPLayerIsOpen	src/Topography/shapelib/mapshape.c	/^int msSHPLayerIsOpen(layerObj *layer)$/;"	f
msSHPLayerNextShape	src/Topography/shapelib/mapshape.c	/^int msSHPLayerNextShape(layerObj *layer, shapeObj *shape)$/;"	f
msSHPLayerOpen	src/Topography/shapelib/mapshape.c	/^int msSHPLayerOpen(layerObj *layer)$/;"	f
msSHPLayerSupportsCommonFilters	src/Topography/shapelib/mapshape.c	/^int msSHPLayerSupportsCommonFilters(layerObj *layer)$/;"	f
msSHPLayerWhichShapes	src/Topography/shapelib/mapshape.c	/^int msSHPLayerWhichShapes(layerObj *layer, rectObj rect, int isQuery)$/;"	f
msSHPOpen	src/Topography/shapelib/mapshape.c	/^SHPHandle msSHPOpen(struct zzip_dir *zdir, const char * pszLayer, const char * pszAccess )$/;"	f
msSHPPassThroughFieldDefinitions	src/Topography/shapelib/mapshape.c	/^static void msSHPPassThroughFieldDefinitions( layerObj *layer, DBFHandle hDBF )$/;"	f	file:
msSHPReadAllocateBuffer	src/Topography/shapelib/mapshape.c	/^static int msSHPReadAllocateBuffer( SHPHandle psSHP, int hEntity, const char* pszCallingFunction)$/;"	f	file:
msSHPReadBounds	src/Topography/shapelib/mapshape.c	/^int msSHPReadBounds( SHPHandle psSHP, int hEntity, rectObj *padBounds)$/;"	f
msSHPReadPoint	src/Topography/shapelib/mapshape.c	/^int msSHPReadPoint( SHPHandle psSHP, int hEntity, pointObj *point )$/;"	f
msSHPReadShape	src/Topography/shapelib/mapshape.c	/^void msSHPReadShape( SHPHandle psSHP, int hEntity, shapeObj *shape )$/;"	f
msSHPWritePoint	src/Topography/shapelib/mapshape.c	/^int msSHPWritePoint(SHPHandle psSHP, pointObj *point )$/;"	f
msSHPWriteShape	src/Topography/shapelib/mapshape.c	/^int msSHPWriteShape(SHPHandle psSHP, shapeObj *shape )$/;"	f
msSHXLoadAll	src/Topography/shapelib/mapshape.c	/^int msSHXLoadAll( SHPHandle psSHP )$/;"	f
msSHXLoadPage	src/Topography/shapelib/mapshape.c	/^int msSHXLoadPage( SHPHandle psSHP, int shxBufferPage )$/;"	f
msSHXReadOffset	src/Topography/shapelib/mapshape.c	/^int msSHXReadOffset( SHPHandle psSHP, int hEntity )$/;"	f
msSHXReadSize	src/Topography/shapelib/mapshape.c	/^int msSHXReadSize( SHPHandle psSHP, int hEntity )$/;"	f
msSearchDiskTree	src/Topography/shapelib/maptree.c	/^ms_bitarray msSearchDiskTree(struct zzip_dir *zdir, const char *filename, rectObj aoi, int debug, int numshapes)$/;"	f
msSearchTree	src/Topography/shapelib/maptree.c	/^ms_bitarray msSearchTree(const treeObj *tree, rectObj aoi)$/;"	f
msSetAllBits	src/Topography/shapelib/mapbits.c	/^void msSetAllBits(ms_bitarray array, int numbits, int value)$/;"	f
msSetBit	src/Topography/shapelib/mapbits.c	/^void msSetBit(ms_bitarray array, int index, int value)$/;"	f
msSetError	src/Topography/shapelib/maperror.h	/^msSetError(int code, const char *message, const char *routine, ...)$/;"	f
msShapeDeleteLine	src/Topography/shapelib/mapprimitive.c	/^void msShapeDeleteLine( shapeObj *shape, int line )$/;"	f
msShapeFromWKT	src/Topography/shapelib/mapprimitive.c	/^shapeObj *msShapeFromWKT(const char *string)$/;"	f
msShapeToWKT	src/Topography/shapelib/mapprimitive.c	/^char *msShapeToWKT(shapeObj *shape)$/;"	f
msShapefileClose	src/Topography/shapelib/mapshape.c	/^void msShapefileClose(shapefileObj *shpfile)$/;"	f
msShapefileCreate	src/Topography/shapelib/mapshape.c	/^int msShapefileCreate(shapefileObj *shpfile, char *filename, int type)$/;"	f
msShapefileOpen	src/Topography/shapelib/mapshape.c	/^int msShapefileOpen(shapefileObj *shpfile, const char *mode, struct zzip_dir *zdir, const char *filename, int log_failures)$/;"	f
msShapefileWhichShapes	src/Topography/shapelib/mapshape.c	/^int msShapefileWhichShapes(shapefileObj *shpfile, struct zzip_dir *zdir, rectObj rect, int debug)$/;"	f
msSmallMalloc	src/Topography/shapelib/mapserver.h	/^  static inline void *msSmallMalloc( size_t nSize ) {$/;"	f
msSquareDistancePointToPoint	src/Topography/shapelib/mapsearch.c	/^double msSquareDistancePointToPoint(pointObj *a, pointObj *b)$/;"	f
msSquareDistancePointToSegment	src/Topography/shapelib/mapsearch.c	/^double msSquareDistancePointToSegment(pointObj *p, pointObj *a, pointObj *b)$/;"	f
msSquareDistancePointToShape	src/Topography/shapelib/mapsearch.c	/^double msSquareDistancePointToShape(pointObj *point, shapeObj *shape)$/;"	f
msStrdup	src/Topography/shapelib/mapstring.c	/^char *msStrdup(const char * pszString)$/;"	f
msStringBuffer	src/Topography/shapelib/mapserver.h	/^  typedef struct msStringBuffer msStringBuffer;$/;"	t	typeref:struct:msStringBuffer
msStringBuffer	src/Topography/shapelib/mapstring.c	/^struct msStringBuffer$/;"	s	file:
msStringBufferAlloc	src/Topography/shapelib/mapstring.c	/^msStringBuffer* msStringBufferAlloc(void)$/;"	f
msStringBufferAppend	src/Topography/shapelib/mapstring.c	/^int msStringBufferAppend(msStringBuffer* sb, const char* pszAppendedString)$/;"	f
msStringBufferFree	src/Topography/shapelib/mapstring.c	/^void msStringBufferFree(msStringBuffer* sb)$/;"	f
msStringBufferGetString	src/Topography/shapelib/mapstring.c	/^const char* msStringBufferGetString(msStringBuffer* sb)$/;"	f
msStringBufferReleaseStringAndFree	src/Topography/shapelib/mapstring.c	/^char* msStringBufferReleaseStringAndFree(msStringBuffer* sb)$/;"	f
msStringChop	src/Topography/shapelib/mapstring.c	/^char *msStringChop(char *string)$/;"	f
msStringConcatenate	src/Topography/shapelib/mapstring.c	/^char *msStringConcatenate(char *pszDest, const char *pszSrc)$/;"	f
msStringEscape	src/Topography/shapelib/mapstring.c	/^char* msStringEscape( const char * pszString )$/;"	f
msStringFirstCap	src/Topography/shapelib/mapstring.c	/^void msStringFirstCap(char *string)$/;"	f
msStringInArray	src/Topography/shapelib/mapstring.c	/^int msStringInArray( const char * pszString, char **array, int numelements)$/;"	f
msStringInitCap	src/Topography/shapelib/mapstring.c	/^void msStringInitCap(char *string)$/;"	f
msStringIsInteger	src/Topography/shapelib/mapstring.c	/^int msStringIsInteger(const char *string)$/;"	f
msStringSplit	src/Topography/shapelib/mapstring.c	/^char **msStringSplit(const char *string, char ch, int *num_tokens)$/;"	f
msStringSplitComplex	src/Topography/shapelib/mapstring.c	/^char ** msStringSplitComplex( const char * pszString,$/;"	f
msStringToLower	src/Topography/shapelib/mapstring.c	/^void msStringToLower(char *string)$/;"	f
msStringToUpper	src/Topography/shapelib/mapstring.c	/^void msStringToUpper(char *string)$/;"	f
msStringTokenize	src/Topography/shapelib/mapstring.c	/^char **msStringTokenize( const char *pszLine, const char *pszDelim,$/;"	f
msStringTrim	src/Topography/shapelib/mapstring.c	/^void msStringTrim(char *str)$/;"	f
msStringTrimBlanks	src/Topography/shapelib/mapstring.c	/^void msStringTrimBlanks(char *string)$/;"	f
msStringTrimEOL	src/Topography/shapelib/mapstring.c	/^void msStringTrimEOL(char *string)$/;"	f
msStringTrimLeft	src/Topography/shapelib/mapstring.c	/^char *msStringTrimLeft(char *string)$/;"	f
msStripPath	src/Topography/shapelib/mapstring.c	/^char *msStripPath(char *fn)$/;"	f
msTileIndexAbsoluteDir	src/Topography/shapelib/mapshape.c	/^void msTileIndexAbsoluteDir(char *tiFileAbsDir, layerObj *layer)$/;"	f
msTiledSHPClose	src/Topography/shapelib/mapshape.c	/^void msTiledSHPClose(layerObj *layer)$/;"	f	file:
msTiledSHPCloseVT	src/Topography/shapelib/mapshape.c	/^int msTiledSHPCloseVT(layerObj *layer)$/;"	f
msTiledSHPGetShape	src/Topography/shapelib/mapshape.c	/^int msTiledSHPGetShape(layerObj *layer, shapeObj *shape, resultObj *record)$/;"	f	file:
msTiledSHPLayerFreeItemInfo	src/Topography/shapelib/mapshape.c	/^void msTiledSHPLayerFreeItemInfo(layerObj *layer)$/;"	f
msTiledSHPLayerGetExtent	src/Topography/shapelib/mapshape.c	/^int msTiledSHPLayerGetExtent(layerObj *layer, rectObj *extent)$/;"	f
msTiledSHPLayerGetItems	src/Topography/shapelib/mapshape.c	/^int msTiledSHPLayerGetItems(layerObj *layer)$/;"	f
msTiledSHPLayerInfo	src/Topography/shapelib/mapshape.h	/^  } msTiledSHPLayerInfo;$/;"	t	typeref:struct:__anon79
msTiledSHPLayerInitItemInfo	src/Topography/shapelib/mapshape.c	/^int msTiledSHPLayerInitItemInfo(layerObj *layer)$/;"	f
msTiledSHPLayerInitializeVirtualTable	src/Topography/shapelib/mapshape.c	/^int msTiledSHPLayerInitializeVirtualTable(layerObj *layer)$/;"	f
msTiledSHPLayerIsOpen	src/Topography/shapelib/mapshape.c	/^int msTiledSHPLayerIsOpen(layerObj *layer)$/;"	f
msTiledSHPLayerSupportsCommonFilters	src/Topography/shapelib/mapshape.c	/^int msTiledSHPLayerSupportsCommonFilters(layerObj *layer)$/;"	f
msTiledSHPLoadEntry	src/Topography/shapelib/mapshape.c	/^static const char* msTiledSHPLoadEntry(layerObj *layer, int i, char* tilename, size_t tilenamesize)$/;"	f	file:
msTiledSHPNextShape	src/Topography/shapelib/mapshape.c	/^int msTiledSHPNextShape(layerObj *layer, shapeObj *shape)$/;"	f	file:
msTiledSHPOpenFile	src/Topography/shapelib/mapshape.c	/^int msTiledSHPOpenFile(layerObj *layer)$/;"	f	file:
msTiledSHPTryOpen	src/Topography/shapelib/mapshape.c	/^int msTiledSHPTryOpen(shapefileObj *shpfile, layerObj *layer, char *tiFileAbsDir, const char *filename)$/;"	f	file:
msTiledSHPWhichShapes	src/Topography/shapelib/mapshape.c	/^int msTiledSHPWhichShapes(layerObj *layer, rectObj rect, int isQuery)$/;"	f	file:
msTransformPixelToShape	src/Topography/shapelib/mapprimitive.c	/^void msTransformPixelToShape(shapeObj *shape, rectObj extent, double cellsize)$/;"	f
msTransformShape	src/Topography/shapelib/mapprimitive.c	/^void  msTransformShape(shapeObj *shape, rectObj extent, double cellsize, imageObj *image)$/;"	f
msTransformShapeSimplify	src/Topography/shapelib/mapprimitive.c	/^void msTransformShapeSimplify(shapeObj *shape, rectObj extent, double cellsize)$/;"	f
msTransformShapeToPixelDoublePrecision	src/Topography/shapelib/mapprimitive.c	/^void msTransformShapeToPixelDoublePrecision(shapeObj *shape, rectObj extent, double cellsize)$/;"	f
msTransformShapeToPixelRound	src/Topography/shapelib/mapprimitive.c	/^void msTransformShapeToPixelRound(shapeObj *shape, rectObj extent, double cellsize)$/;"	f
msTransformShapeToPixelSnapToGrid	src/Topography/shapelib/mapprimitive.c	/^void msTransformShapeToPixelSnapToGrid(shapeObj *shape, rectObj extent, double cellsize, double grid_resolution)$/;"	f
msTreeTrim	src/Topography/shapelib/maptree.c	/^void msTreeTrim(treeObj *tree)$/;"	f
msTryBuildPath	src/Topography/shapelib/mapstring.c	/^char *msTryBuildPath(char *szReturnPath, const char *abs_path, const char *path)$/;"	f
msTryBuildPath3	src/Topography/shapelib/mapstring.c	/^char *msTryBuildPath3(char *szReturnPath, const char *abs_path, const char *path1, const char *path2)$/;"	f
msWriteTree	src/Topography/shapelib/maptree.c	/^int msWriteTree(treeObj *tree, char *filename, int B_order)$/;"	f
ms_bitarray	src/Topography/shapelib/mapserver.h	/^typedef ms_uint32 *     ms_bitarray;$/;"	t
ms_const_bitarray	src/Topography/shapelib/mapserver.h	/^typedef const ms_uint32 *ms_const_bitarray;$/;"	t
ms_int32	src/Topography/shapelib/mapserver.h	/^typedef int             ms_int32;$/;"	t
ms_int32	src/Topography/shapelib/mapserver.h	/^typedef int32_t         ms_int32;$/;"	t
ms_int32	src/Topography/shapelib/mapserver.h	/^typedef long            ms_int32;$/;"	t
ms_uint32	src/Topography/shapelib/mapserver.h	/^typedef uint32_t        ms_uint32;$/;"	t
ms_uint32	src/Topography/shapelib/mapserver.h	/^typedef unsigned int    ms_uint32;$/;"	t
ms_uint32	src/Topography/shapelib/mapserver.h	/^typedef unsigned long   ms_uint32;$/;"	t
msg	src/net/SocketError.hxx	/^	char msg[msg_size];$/;"	m	class:SocketErrorMessage
msg	src/ui/event/windows/Event.hpp	/^  MSG msg;$/;"	m	struct:UI::Event
msgID	src/Device/Driver/IMI/Protocol/Types.hpp	/^    IMIBYTE msgID, parameter1;$/;"	m	struct:IMI::TMsg
msg_size	src/net/SocketError.hxx	/^	static constexpr unsigned msg_size = 256;$/;"	m	class:SocketErrorMessage
mtime	src/io/FileCache.cpp	/^  uint64_t mtime;$/;"	m	struct:FileInfo	file:
multi	src/net/http/Global.hxx	/^	CurlMulti multi;$/;"	m	class:final
multi_draw_arrays	src/ui/canvas/opengl/Dynamic.cpp	/^PFNGLMULTIDRAWARRAYSEXTPROC multi_draw_arrays;$/;"	m	namespace:GLExt	file:
multi_draw_elements	src/ui/canvas/opengl/Dynamic.cpp	/^PFNGLMULTIDRAWELEMENTSEXTPROC multi_draw_elements;$/;"	m	namespace:GLExt	file:
multipointObj	src/Topography/shapelib/mapprimitive.h	/^typedef lineObj multipointObj;$/;"	t
mutate_button	src/Dialogs/Task/Manager/TaskEditPanel.cpp	/^  Button *edit_button, *mutate_button;$/;"	m	class:TaskEditPanel	file:
mutex	src/Android/DownloadManager.hpp	/^  Mutex mutex;$/;"	m	class:AndroidDownloadManager
mutex	src/Audio/AndroidPCMPlayer.hpp	/^  Mutex mutex;$/;"	m	class:AndroidPCMPlayer
mutex	src/Audio/VarioSynthesiser.hpp	/^  Mutex mutex;$/;"	m	class:final
mutex	src/Blackboard/DeviceBlackboard.hpp	/^  Mutex mutex;$/;"	m	class:DeviceBlackboard
mutex	src/CalculationThread.hpp	/^  Mutex mutex;$/;"	m	class:final
mutex	src/Computer/TraceComputer.hpp	/^  mutable Mutex mutex;$/;"	m	class:TraceComputer
mutex	src/Device/Descriptor.hpp	/^  mutable Mutex mutex;$/;"	m	class:final
mutex	src/Device/Driver/LX/Internal.hpp	/^  Mutex mutex;$/;"	m	class:LXDevice
mutex	src/Device/Port/BufferedPort.hpp	/^  Mutex mutex;$/;"	m	class:BufferedPort
mutex	src/Device/SettingsMap.hpp	/^  Mutex mutex;$/;"	m	class:DeviceSettingsMap
mutex	src/Dialogs/Device/PortMonitor.cpp	/^  Mutex mutex;$/;"	m	class:final	file:
mutex	src/Dialogs/Device/ScanBluetoothLeDialog.cpp	/^  Mutex mutex;$/;"	m	class:final	file:
mutex	src/Dialogs/DownloadFilePicker.cpp	/^  mutable Mutex mutex;$/;"	m	class:final	file:
mutex	src/Dialogs/FileManager.cpp	/^  mutable Mutex mutex;$/;"	m	class:ManagedFileListWidget	file:
mutex	src/FlightStatistics.hpp	/^  mutable Mutex mutex;$/;"	m	class:FlightStatistics
mutex	src/Logger/NMEALogger.cpp	/^  static Mutex mutex;$/;"	m	namespace:NMEALogger	file:
mutex	src/Operation/ThreadedOperationEnvironment.hpp	/^  mutable Mutex mutex;$/;"	m	class:ThreadedOperationEnvironment
mutex	src/PopupMessage.hpp	/^  Mutex mutex;$/;"	m	class:PopupMessage
mutex	src/Terrain/Loader.hpp	/^  SharedMutex &mutex;$/;"	m	class:TerrainLoader
mutex	src/Topography/TopographyFile.hpp	/^  mutable Mutex mutex;$/;"	m	class:TopographyFile
mutex	src/Tracking/SkyLines/Client.hpp	/^  mutable Mutex mutex;$/;"	m	class:SkyLinesTracking::final
mutex	src/Tracking/SkyLines/Data.hpp	/^  mutable Mutex mutex;$/;"	m	struct:SkyLinesTracking::Data
mutex	src/event/Call.cxx	/^	Mutex mutex;$/;"	m	class:final	file:
mutex	src/event/Loop.hxx	/^	Mutex mutex;$/;"	m	class:final
mutex	src/net/http/ToBuffer.cpp	/^  Mutex mutex;$/;"	m	class:final	file:
mutex	src/net/http/ToFile.cpp	/^  Mutex mutex;$/;"	m	class:final	file:
mutex	src/thread/Guard.hpp	/^  mutable SharedMutex mutex;$/;"	m	class:Guard
mutex	src/thread/Mutex.hxx	/^	Mutex &mutex;$/;"	m	class:ScopeUnlock
mutex	src/thread/Mutex.hxx	/^	explicit ScopeUnlock(Mutex &_mutex) noexcept:mutex(_mutex) {$/;"	f	class:ScopeUnlock
mutex	src/thread/StandbyThread.hpp	/^  Mutex mutex;$/;"	m	class:StandbyThread
mutex	src/thread/SuspensibleThread.hpp	/^  Mutex mutex;$/;"	m	class:SuspensibleThread
mutex	src/ui/event/android/Queue.hpp	/^  Mutex mutex;$/;"	m	class:UI::EventQueue
mutex	src/ui/event/poll/Queue.hpp	/^  Mutex mutex;$/;"	m	class:DisplayOrientation::final
mutex	src/ui/event/sdl/Queue.hpp	/^  Mutex mutex;$/;"	m	class:UI::EventQueue
mutex	src/ui/event/windows/Queue.hpp	/^  Mutex mutex;$/;"	m	class:UI::EventQueue
mutex	src/ui/window/DoubleBufferWindow.hpp	/^  mutable Mutex mutex;$/;"	m	class:DoubleBufferWindow
mutexEventQueue	src/Input/InputQueue.cpp	/^static Mutex mutexEventQueue;$/;"	v	file:
mutex_settings	src/Device/Driver/BlueFly/Internal.hpp	/^  Mutex mutex_settings;$/;"	m	class:BlueFlyDevice
mxcfb_alt_buffer_data	src/ui/canvas/fb/mxcfb.h	/^struct mxcfb_alt_buffer_data {$/;"	s
mxcfb_color_key	src/ui/canvas/fb/mxcfb.h	/^struct mxcfb_color_key {$/;"	s
mxcfb_gamma	src/ui/canvas/fb/mxcfb.h	/^struct mxcfb_gamma {$/;"	s
mxcfb_gbl_alpha	src/ui/canvas/fb/mxcfb.h	/^struct mxcfb_gbl_alpha {$/;"	s
mxcfb_loc_alpha	src/ui/canvas/fb/mxcfb.h	/^struct mxcfb_loc_alpha {$/;"	s
mxcfb_pos	src/ui/canvas/fb/mxcfb.h	/^struct mxcfb_pos {$/;"	s
mxcfb_rect	src/ui/canvas/fb/mxcfb.h	/^struct mxcfb_rect {$/;"	s
mxcfb_update_data	src/ui/canvas/fb/mxcfb.h	/^struct mxcfb_update_data {$/;"	s
mxcfb_waveform_modes	src/ui/canvas/fb/mxcfb.h	/^struct mxcfb_waveform_modes {$/;"	s
myalloc_	src/Terrain/jasper/jas_stream.h	/^	int myalloc_;$/;"	m	struct:__anon99
n	src/Engine/ThermalBand/ThermalSlice.hpp	/^  double n;$/;"	m	struct:ThermalSlice
nBottom	src/Topography/shapelib/mapserver.h	/^    int nBottom;$/;"	m	struct:__anon50
nBufSize	src/Topography/shapelib/mapshape.h	/^    int   nBufSize; \/* these used static vars in shape readers, moved to be thread-safe *\/$/;"	m	struct:__anon75
nCurrentRecord	src/Topography/shapelib/mapshape.h	/^    int   nCurrentRecord;$/;"	m	struct:__anon76
nDepth	src/Topography/shapelib/maptree.h	/^    ms_int32        nDepth;$/;"	m	struct:__anon81
nFields	src/Topography/shapelib/mapshape.h	/^    int   nFields;$/;"	m	struct:__anon76
nFileSize	src/Topography/shapelib/mapshape.h	/^    int   nFileSize;        \/* SHP file *\/$/;"	m	struct:__anon75
nFirst	src/XML/Parser.cpp	/^    bool nFirst;$/;"	m	struct:XML::Parser	file:
nHeaderLength	src/Topography/shapelib/mapshape.h	/^    int   nHeaderLength;$/;"	m	struct:__anon76
nIndex	src/XML/Parser.cpp	/^    unsigned nIndex;$/;"	m	struct:XML::Parser	file:
nLeft	src/Topography/shapelib/mapserver.h	/^    int nLeft;$/;"	m	struct:__anon50
nLists	src/Dialogs/dlgChecklist.cpp	/^static int nLists = 0;$/;"	v	file:
nMaxRecords	src/Topography/shapelib/mapshape.h	/^    int   nMaxRecords;$/;"	m	struct:__anon75
nPartMax	src/Topography/shapelib/mapshape.h	/^    int   nPartMax;$/;"	m	struct:__anon75
nProperties	src/Topography/shapelib/mapserver.h	/^      int nProperties;$/;"	m	struct:__anon56
nRecordLength	src/Topography/shapelib/mapshape.h	/^    unsigned int nRecordLength;$/;"	m	struct:__anon76
nRecords	src/Topography/shapelib/mapshape.h	/^    int   nRecords;$/;"	m	struct:__anon75
nRecords	src/Topography/shapelib/mapshape.h	/^    int   nRecords;$/;"	m	struct:__anon76
nRight	src/Topography/shapelib/mapserver.h	/^    int nRight;$/;"	m	struct:__anon50
nShapeType	src/Topography/shapelib/mapshape.h	/^    int   nShapeType;       \/* SHPT_* *\/$/;"	m	struct:__anon75
nShapes	src/Topography/shapelib/maptree.h	/^    ms_int32        nShapes;$/;"	m	struct:__anon81
nStringFieldLen	src/Topography/shapelib/mapshape.h	/^    int   nStringFieldLen;$/;"	m	struct:__anon76
nTop	src/Topography/shapelib/mapserver.h	/^    int nTop;$/;"	m	struct:__anon50
n_entries	src/Topography/shapelib/mapserver.h	/^     int n_entries;$/;"	m	struct:__anon53
n_events	src/event/EpollBackend.hxx	/^	size_t n_events = 0;$/;"	m	class:EpollBackendResult
n_failures	src/Device/Descriptor.hpp	/^  unsigned n_failures;$/;"	m	class:final
n_index	src/Computer/ThermalLocator.hpp	/^  unsigned n_index;$/;"	m	class:ThermalLocator
n_keyboards	src/ui/event/poll/libinput/LibInputHandler.hpp	/^  unsigned n_pointers = 0, n_touch_screens = 0, n_keyboards = 0;$/;"	m	class:UI::final
n_pages	src/PageSettings.hpp	/^  unsigned n_pages;$/;"	m	struct:PageSettings
n_pointers	src/ui/event/poll/libinput/LibInputHandler.hpp	/^  unsigned n_pointers = 0, n_touch_screens = 0, n_keyboards = 0;$/;"	m	class:UI::final
n_pointers	src/ui/event/poll/linux/MergeMouse.hpp	/^  unsigned n_pointers = 0;$/;"	m	class:UI::final
n_points	src/Computer/ThermalLocator.hpp	/^  unsigned n_points;$/;"	m	class:ThermalLocator
n_points	src/Engine/Contest/Solvers/TraceManager.hpp	/^  unsigned n_points;$/;"	m	class:TraceManager
n_processing	src/Topography/shapelib/mapserver.h	/^    int n_processing;$/;"	m	struct:__anon57
n_pts	src/Math/Histogram.hpp	/^  unsigned n_pts;$/;"	m	class:Histogram
n_queries	src/Engine/Waypoint/Waypoints.cpp	/^unsigned n_queries = 0;$/;"	v
n_thermal	src/Cloud/Sender.hpp	/^  unsigned n_thermal = 0;$/;"	m	class:ThermalResponseSender
n_touch_screens	src/ui/event/poll/libinput/LibInputHandler.hpp	/^  unsigned n_pointers = 0, n_touch_screens = 0, n_keyboards = 0;$/;"	m	class:UI::final
n_traffic	src/Cloud/Sender.hpp	/^  unsigned n_traffic = 0;$/;"	m	class:TrafficResponseSender
n_visible	src/PopupMessage.hpp	/^  unsigned n_visible;$/;"	m	class:PopupMessage
name	src/Airspace/AirspaceParser.cpp	/^  tstring name;$/;"	m	struct:TempAirspaceType	file:
name	src/Device/Driver.hpp	/^  const TCHAR *name;$/;"	m	struct:DeviceRegister
name	src/Device/Driver/CAI302/Protocol.hpp	/^    char name[12];$/;"	m	struct:CAI302::Navpoint
name	src/Device/Driver/CAI302/Protocol.hpp	/^    char name[24];$/;"	m	struct:CAI302::Pilot
name	src/Device/Driver/IMI/Protocol/Types.hpp	/^    IMICHAR name[IMIDECL_WP_NAME_LENGTH];$/;"	m	struct:IMI::TWaypoint
name	src/Device/Driver/LX/LXN.hpp	/^    char name[12][9];$/;"	m	struct:LXN::Task
name	src/Device/Driver/LX/LXN.hpp	/^    char name[4];$/;"	m	struct:LXN::ExtensionDefinition
name	src/Device/Driver/Volkslogger/Database.hpp	/^    char name[14];$/;"	m	struct:Volkslogger::Route
name	src/Device/Driver/Volkslogger/Database.hpp	/^    char name[16];$/;"	m	struct:Volkslogger::Pilot
name	src/Device/Driver/Volkslogger/Database.hpp	/^    char name[6];$/;"	m	struct:Volkslogger::Waypoint
name	src/Device/Driver/Volkslogger/vlapi2.h	/^    char name[15];$/;"	m	struct:VLAPI_DATA::ROUTE
name	src/Device/Driver/Volkslogger/vlapi2.h	/^    char name[17];$/;"	m	struct:VLAPI_DATA::PILOT
name	src/Device/Driver/Volkslogger/vlapi2.h	/^    char name[7]; \/\/ name of waypoint, zero-ended C-string, max. 6 characters$/;"	m	struct:VLAPI_DATA::WPT
name	src/Device/Driver/Volkslogger/vlconv.cpp	/^  char name[7];$/;"	m	class:C2	file:
name	src/Dialogs/Device/ScanBluetoothLeDialog.cpp	/^    std::string name;$/;"	m	struct:final::Item	file:
name	src/Dialogs/Device/Vega/VegaParametersWidget.hpp	/^    const char *name;$/;"	m	struct:VegaParametersWidget::Parameter
name	src/Dialogs/Device/Vega/VegaParametersWidget.hpp	/^    const char *name;$/;"	m	struct:VegaParametersWidget::StaticParameter
name	src/Dialogs/FileManager.cpp	/^    StaticString<64u> name;$/;"	m	struct:ManagedFileListWidget::FileItem	file:
name	src/Dialogs/Plane/PlaneListDialog.cpp	/^    StaticString<32> name;$/;"	m	struct:final::ListItem	file:
name	src/Dialogs/ProfileListDialog.cpp	/^    StaticString<32> name;$/;"	m	struct:final::ListItem	file:
name	src/Dialogs/Traffic/TrafficList.cpp	/^    tstring name;$/;"	m	struct:TrafficListWidget::Item	file:
name	src/Dialogs/Waypoint/WaypointList.cpp	/^  StaticString<WaypointFilter::NAME_LENGTH + 1> name;$/;"	m	struct:WaypointListDialogState	file:
name	src/Dialogs/Weather/MapOverlayWidget.cpp	/^    StaticString<80> name;$/;"	m	struct:final::Item	file:
name	src/Engine/Airspace/AbstractAirspace.hpp	/^  tstring name;$/;"	m	class:AbstractAirspace
name	src/Engine/Task/Ordered/OrderedTask.hpp	/^  StaticString<64> name;$/;"	m	class:final
name	src/Engine/Waypoint/Waypoint.hpp	/^  tstring name;$/;"	m	struct:Waypoint
name	src/FLARM/NameDatabase.hpp	/^    StaticString<21> name;$/;"	m	struct:FlarmNameDatabase::Record
name	src/FLARM/Traffic.hpp	/^  StaticString<10> name;$/;"	m	class:FlarmTraffic::AircraftType
name	src/GliderLink/Traffic.hpp	/^  StaticString<10> name;$/;"	m	struct:GliderLinkTraffic
name	src/IGC/IGCDeclaration.hpp	/^  NarrowString<256> name;$/;"	m	struct:IGCDeclarationTurnpoint
name	src/InfoBoxes/Content/Factory.cpp	/^  const TCHAR *name;$/;"	m	struct:MetaData	file:
name	src/InfoBoxes/InfoBoxSettings.hpp	/^    StaticString<32u> name;$/;"	m	struct:InfoBoxSettings::Panel
name	src/InfoBoxes/Panel/Panel.hpp	/^  const TCHAR *name;$/;"	m	struct:InfoBoxPanel
name	src/Input/InputKeys.cpp	/^  const TCHAR *name;$/;"	m	struct:string_to_key	file:
name	src/Kobo/ToolsDialog.cpp	/^  StaticString<32> name;$/;"	m	struct:ListItem	file:
name	src/Language/LanguageGlue.hpp	/^  const TCHAR *name;$/;"	m	struct:BuiltinLanguage
name	src/MapWindow/Items/MapItem.hpp	/^  StaticString<40> name;$/;"	m	struct:SkyLinesTrafficMapItem
name	src/Polar/PolarStore.hpp	/^    const TCHAR* name;   \/**< Name of the glider type *\/$/;"	m	struct:PolarStore::Item
name	src/Repository/AvailableFile.hpp	/^  std::string name;$/;"	m	struct:AvailableFile
name	src/Repository/FileRepository.cpp	/^  const char *name;$/;"	m	struct:AvailableFileNameComparator	file:
name	src/Terrain/jasper/jas_image.h	/^	char *name;$/;"	m	struct:__anon104
name	src/Terrain/jasper/jp2/jp2_cod.h	/^	const char *name;$/;"	m	struct:jp2_boxinfo_s
name	src/Terrain/jasper/jpc/jpc_cs.c	/^	const char *name;$/;"	m	struct:__anon133	file:
name	src/Topography/TopographyStore.cpp	/^  const char *name;$/;"	m	struct:__anon83	file:
name	src/Topography/shapelib/mapprimitive.h	/^  char *name;$/;"	m	struct:__anon73
name	src/Topography/shapelib/mapserver.h	/^     char *name;$/;"	m	struct:__anon53
name	src/Topography/shapelib/mapserver.h	/^    char *name; \/* should be unique *\/$/;"	m	struct:layerObj
name	src/Topography/shapelib/mapserver.h	/^    char *name; \/* should be unique within a layer *\/$/;"	m	struct:classObj
name	src/Topography/shapelib/mapserver.h	/^    char *name; \/* small identifier for naming etc. *\/$/;"	m	struct:mapObj
name	src/Topography/shapelib/mapserver.h	/^    char *name;$/;"	m	struct:__anon31
name	src/Topography/shapelib/mapserver.h	/^    char *name;$/;"	m	struct:__anon32
name	src/Units/Descriptor.hpp	/^  const TCHAR *name;$/;"	m	struct:UnitDescriptor
name	src/Waypoint/WaypointFilter.hpp	/^  StaticString<NAME_LENGTH + 1> name;$/;"	m	struct:WaypointFilter
name	src/Weather/PCMet/Images.hpp	/^  const char *name;$/;"	m	struct:PCMet::ImageArea
name	src/Weather/ParsedMETAR.hpp	/^  StaticString<128> name;$/;"	m	struct:ParsedMETAR
name	src/Weather/Rasp/Providers.hpp	/^  const TCHAR *name;$/;"	m	struct:RaspProvider
name	src/Weather/Rasp/RaspStore.hpp	/^    StaticString<32> name;$/;"	m	struct:RaspStore::MapItem
name	src/Weather/Rasp/RaspStore.hpp	/^    const TCHAR *name;$/;"	m	struct:RaspStore::MapInfo
name	src/Weather/Rasp/RaspStyle.hpp	/^  const TCHAR *name;$/;"	m	struct:RaspStyle
name	src/XML/Node.hpp	/^      tstring name, value;$/;"	m	struct:XMLNode::Data::Attribute
name	src/XML/Node.hpp	/^    tstring name;$/;"	m	struct:XMLNode::Data
name	src/system/Args.hpp	/^  const char *name, *usage;$/;"	m	class:Args
name	src/thread/Thread.hpp	/^  const char *const name;$/;"	m	class:Thread
name_available	src/Weather/ParsedMETAR.hpp	/^  bool name_available;$/;"	m	struct:ParsedMETAR
name_button	src/Dialogs/Task/TargetDialog.cpp	/^    PixelRect name_button;$/;"	m	struct:TargetWidget::Layout	file:
name_button	src/Dialogs/Task/TargetDialog.cpp	/^  Button name_button;$/;"	m	class:TargetWidget	file:
name_font	src/Look/AirspaceLook.hpp	/^  const Font *name_font;$/;"	m	struct:AirspaceLook
name_length	src/Tracking/SkyLines/Protocol.hpp	/^  uint8_t name_length;$/;"	m	struct:SkyLinesTracking::UserNameResponsePacket
name_prefix	src/Engine/Airspace/AirspaceSorter.hpp	/^  const TCHAR *name_prefix;$/;"	m	struct:AirspaceFilterData
name_tree	src/Engine/Waypoint/Waypoints.hpp	/^  WaypointNameTree name_tree;$/;"	m	class:Waypoints
names	src/Dialogs/Device/Vega/AudioParameters.hpp	/^  char names[5][64];$/;"	m	class:VegaAudioParametersWidget
namesuffixes	src/Task/TaskFile.hpp	/^  StaticArray<TCHAR *, 64> namesuffixes;$/;"	m	class:TaskFile
nano_filename	src/Device/RecordedFlight.hpp	/^      char nano_filename[16];$/;"	m	struct:RecordedFlightInfo::__anon159::__anon160
nano_setting_names	src/Dialogs/Device/LX/NanoConfigWidget.cpp	/^static const char *const nano_setting_names[] = {$/;"	v	file:
nano_settings	src/Device/Driver/LX/Internal.hpp	/^  DeviceSettingsMap<std::string> nano_settings;$/;"	m	class:LXDevice
native_byte_order	src/Language/MOFile.hpp	/^  bool native_byte_order;$/;"	m	class:MOFile
native_string	src/Topography/shapelib/mapserver.h	/^    char *native_string; \/* RFC 91 *\/$/;"	m	struct:__anon28
native_view	src/Android/Main.cpp	/^NativeView *native_view;$/;"	v
nav_altitude	src/NMEA/MoreData.hpp	/^  double nav_altitude;$/;"	m	struct:MoreData
nav_baro_altitude_enabled	src/Computer/Settings.hpp	/^  bool nav_baro_altitude_enabled;$/;"	m	struct:FeaturesSettings
near_distance	src/Dialogs/Traffic/TrafficList.cpp	/^    double near_distance;$/;"	m	struct:TrafficListWidget::Item	file:
near_name	src/Dialogs/Traffic/TrafficList.cpp	/^    StaticString<20> near_name;$/;"	m	struct:TrafficListWidget::Item	file:
near_traffic_enabled	src/Tracking/SkyLines/Glue.hpp	/^  bool near_traffic_enabled = false;$/;"	m	class:SkyLinesTracking::Glue
near_traffic_enabled	src/Tracking/SkyLines/Settings.hpp	/^  bool near_traffic_enabled;$/;"	m	struct:SkyLinesTracking::Settings
nearest	src/Engine/Route/AirspaceRoute.cpp	/^  AIVResult nearest;$/;"	m	class:final	file:
nearest_waypoint	src/Dialogs/StatusPanels/FlightStatusPanel.hpp	/^  const WaypointPtr nearest_waypoint;$/;"	m	class:FlightStatusPanel
need_geotransform	src/Topography/shapelib/mapprimitive.h	/^  int  need_geotransform;$/;"	m	struct:__anon74
need_to_arm	src/Engine/Task/Stats/TaskStats.hpp	/^  bool need_to_arm;$/;"	m	class:TaskStats
needle_gauge_types	src/Dialogs/Device/Vega/DisplayParameters.hpp	/^static constexpr StaticEnumChoice needle_gauge_types[] = {$/;"	v
needle_initialised	src/Gauge/GaugeVario.hpp	/^  bool needle_initialised = false;$/;"	m	class:GaugeVario
needswap	src/Topography/shapelib/maptree.h	/^    char        needswap;$/;"	m	struct:__anon81
neg_brush	src/Look/ChartLook.hpp	/^  Brush neg_brush;$/;"	m	struct:ChartLook
negative	src/Math/Angle.hpp	/^    bool negative;$/;"	m	struct:Angle::DMS
net_coupe	src/Engine/Contest/ContestManager.hpp	/^  NetCoupe net_coupe;$/;"	m	class:ContestManager
net_state_strings	src/Dialogs/StatusPanels/SystemStatusPanel.cpp	/^static const TCHAR *const net_state_strings[] = {$/;"	v	file:
netto_30s_filter	src/Computer/AverageVarioComputer.hpp	/^  WindowFilter<30> netto_30s_filter;$/;"	m	class:AverageVarioComputer
netto_average	src/NMEA/VarioInfo.hpp	/^  double netto_average;$/;"	m	struct:VarioInfo
netto_vario	src/Engine/Navigation/Aircraft.hpp	/^  double netto_vario;$/;"	m	struct:VarioState
netto_vario	src/NMEA/Info.hpp	/^  double netto_vario;$/;"	m	struct:NMEAInfo
netto_vario_available	src/NMEA/Info.hpp	/^  Validity netto_vario_available;$/;"	m	struct:NMEAInfo
networks	src/Kobo/WifiDialog.cpp	/^  TrivialArray<NetworkInfo, 64> networks;$/;"	m	class:final	file:
new_button	src/Dialogs/Waypoint/Manager.cpp	/^  Button *new_button, *edit_button, *save_button, *delete_button;$/;"	m	class:final	file:
new_items	src/Dialogs/Device/ScanBluetoothLeDialog.cpp	/^  std::forward_list<Item> new_items;$/;"	m	class:final	file:
new_size	src/ui/window/TopWindow.hpp	/^  PixelSize new_size;$/;"	m	class:UI::TopWindow
new_traffic	src/FLARM/List.hpp	/^  Validity new_traffic;$/;"	m	struct:TrafficList
new_traffic	src/GliderLink/List.hpp	/^  Validity new_traffic;$/;"	m	struct:GliderLinkTrafficList
newestValIndex	src/Computer/ClimbAverageCalculator.hpp	/^  int newestValIndex;$/;"	m	class:ClimbAverageCalculator
nexprbindings	src/Topography/shapelib/mapserver.h	/^    int nexprbindings;$/;"	m	struct:labelObj
nexprbindings	src/Topography/shapelib/mapserver.h	/^    int nexprbindings;$/;"	m	struct:styleObj
next	src/Audio/AndroidPCMPlayer.hpp	/^  unsigned next;$/;"	m	class:AndroidPCMPlayer
next	src/Blackboard/ProxyBlackboardListener.hpp	/^  BlackboardListener &next;$/;"	m	class:ProxyBlackboardListener
next	src/Input/InputConfig.hpp	/^    unsigned next;$/;"	m	struct:InputConfig::Event
next	src/Terrain/jasper/jpc/jpc_dec.h	/^	struct jpc_dec_seg_s *next;$/;"	m	struct:jpc_dec_seg_s	typeref:struct:jpc_dec_seg_s::jpc_dec_seg_s
next	src/Topography/TopographyFile.hpp	/^    const ShapeList *next;$/;"	m	struct:TopographyFile::ShapeList
next	src/Topography/shapelib/maperror.h	/^    struct debug_info_obj *next;$/;"	m	struct:debug_info_obj	typeref:struct:debug_info_obj::debug_info_obj
next	src/Topography/shapelib/maperror.h	/^    struct errorObj *next;$/;"	m	struct:errorObj	typeref:struct:errorObj::errorObj
next	src/Topography/shapelib/mapserver.h	/^    struct _CompositingFilter *next;$/;"	m	struct:_CompositingFilter	typeref:struct:_CompositingFilter::_CompositingFilter
next	src/Topography/shapelib/mapserver.h	/^    struct _LayerCompositer *next;$/;"	m	struct:_LayerCompositer	typeref:struct:_LayerCompositer::_LayerCompositer
next	src/Topography/shapelib/mapserver.h	/^    struct listNode *next;$/;"	m	struct:listNode	typeref:struct:listNode::listNode
next	src/Topography/shapelib/mapserver.h	/^    struct tokenListNode *next;$/;"	m	struct:tokenListNode	typeref:struct:tokenListNode::tokenListNode
next	src/Topography/shapelib/mapserver.h	/^    tileCacheObj *next;$/;"	m	struct:tileCacheObj
next	src/io/GunzipReader.hxx	/^	Reader &next;$/;"	m	class:final
next	src/util/IntrusiveList.hxx	/^	IntrusiveListNode *next, *prev;$/;"	m	struct:IntrusiveListNode
next	src/util/OverwritingRingBuffer.hpp	/^  static unsigned next(unsigned i) {$/;"	f	class:TrivialOverwritingRingBuffer
next	src/util/QuadTree.hxx	/^		Leaf *next;$/;"	m	struct:QuadTree::Leaf
next	src/util/RadixTree.hpp	/^    Leaf *next;$/;"	m	struct:RadixTree::Leaf
next	src/util/SliceAllocator.hxx	/^		Area *next;$/;"	m	struct:SliceAllocator::Area
next	src/util/SliceAllocator.hxx	/^		Item *next;$/;"	m	struct:SliceAllocator::Item
next_button	src/Dialogs/Task/TargetDialog.cpp	/^    PixelRect previous_button, next_button;$/;"	m	struct:TargetWidget::Layout	file:
next_button	src/Dialogs/Task/TargetDialog.cpp	/^  Button next_button;$/;"	m	class:TargetWidget	file:
next_button	src/Dialogs/Task/TaskPointDialog.cpp	/^  Button *previous_button, *next_button;$/;"	m	class:final	file:
next_button	src/Dialogs/Waypoint/dlgWaypointDetails.cpp	/^    PixelRect previous_button, next_button;$/;"	m	struct:final::Layout	file:
next_button	src/Dialogs/Waypoint/dlgWaypointDetails.cpp	/^  Button previous_button, next_button;$/;"	m	class:final	file:
next_button	src/Dialogs/dlgAnalysis.cpp	/^    PixelRect details_button, previous_button, next_button, close_button;$/;"	m	struct:final::Layout	file:
next_button	src/Dialogs/dlgAnalysis.cpp	/^  Button details_button, previous_button, next_button, close_button;$/;"	m	class:final	file:
next_button	src/Widget/ArrowPagerWidget.hpp	/^    PixelRect previous_button, next_button;$/;"	m	struct:ArrowPagerWidget::Layout
next_button	src/Widget/ArrowPagerWidget.hpp	/^  Button previous_button, next_button;$/;"	m	class:ArrowPagerWidget
next_center	src/Terrain/Thread.hpp	/^  GeoPoint next_center;$/;"	m	class:final
next_data	src/Replay/Replay.hpp	/^  NMEAInfo next_data;$/;"	m	class:final
next_id	src/Cloud/Client.hpp	/^  unsigned next_id = 1;$/;"	m	class:CloudClientContainer
next_id	src/Engine/Waypoint/Waypoints.hpp	/^  unsigned next_id;$/;"	m	class:Waypoints
next_is_last	src/Engine/Task/Stats/CommonStats.hpp	/^  bool next_is_last;$/;"	m	class:CommonStats
next_item_button	src/Gauge/BigTrafficWidget.cpp	/^  Button previous_item_button, next_item_button;$/;"	m	struct:TrafficWidget::Windows	file:
next_leg_eq_thermal	src/NMEA/Derived.hpp	/^  double next_leg_eq_thermal;$/;"	m	struct:DerivedInfo
next_leg_vector	src/Engine/Task/Stats/ElementStat.hpp	/^   GeoVector next_leg_vector;$/;"	m	struct:ElementStat
next_mutex	src/MapWindow/GlueMapWindow.hpp	/^  Mutex next_mutex;$/;"	m	class:GlueMapWindow
next_projection	src/Topography/Thread.hpp	/^  WindowProjection next_projection;$/;"	m	class:final
next_radius	src/Terrain/Thread.hpp	/^  double next_radius;$/;"	m	class:final
next_settings_computer	src/MapWindow/GlueMapWindow.hpp	/^  ComputerSettings next_settings_computer;$/;"	m	class:GlueMapWindow
next_settings_map	src/MapWindow/GlueMapWindow.hpp	/^  MapSettings next_settings_map;$/;"	m	class:GlueMapWindow
next_sibling	src/util/RadixTree.hpp	/^    Node *next_sibling, *children;$/;"	m	struct:RadixTree::Node
next_ui_state	src/MapWindow/GlueMapWindow.hpp	/^  UIState next_ui_state;$/;"	m	class:GlueMapWindow
next_waypoint_infobox_panels	src/InfoBoxes/Content/Task.cpp	/^const InfoBoxPanel next_waypoint_infobox_panels[] = {$/;"	v
nlength0	src/Gauge/GaugeVario.hpp	/^    int nlength0, nlength1, nwidth, nline;$/;"	m	struct:GaugeVario::Geometry
nlength1	src/Gauge/GaugeVario.hpp	/^    int nlength0, nlength1, nwidth, nline;$/;"	m	struct:GaugeVario::Geometry
nline	src/Gauge/GaugeVario.hpp	/^    int nlength0, nlength1, nwidth, nline;$/;"	m	struct:GaugeVario::Geometry
nlps	src/Terrain/jasper/jpc/jpc_mqcod.h	/^	const struct jpc_mqstate_s *nlps;$/;"	m	struct:jpc_mqstate_s	typeref:struct:jpc_mqstate_s::jpc_mqstate_s
nmea_out_driver	src/Device/Driver/NmeaOut.cpp	/^const struct DeviceRegister nmea_out_driver = {$/;"	v	typeref:struct:DeviceRegister
nmps	src/Terrain/jasper/jpc/jpc_mqcod.h	/^	const struct jpc_mqstate_s *nmps;$/;"	m	struct:jpc_mqstate_s	typeref:struct:jpc_mqstate_s::jpc_mqstate_s
no_gps_icon	src/Look/MapLook.hpp	/^  MaskedIcon waiting_for_fix_icon, no_gps_icon;$/;"	m	struct:MapLook
no_thin_time	src/Engine/Trace/Trace.hpp	/^  const unsigned no_thin_time;$/;"	m	class:Trace
no_traffic_font	src/Look/FlarmTrafficLook.hpp	/^  Font label_font, side_info_font, no_traffic_font;$/;"	m	struct:FlarmTrafficLook
noaa	src/Look/MapLook.hpp	/^  NOAALook noaa;$/;"	m	struct:MapLook
noaa_store	src/MapWindow/MapWindow.hpp	/^  NOAAStore *noaa_store = nullptr;$/;"	m	class:MapWindow
noaa_store	src/Weather/NOAAGlue.cpp	/^NOAAStore *noaa_store;$/;"	v
node	src/XML/DataNodeXML.hpp	/^    :node(_node) {}$/;"	f	class:final
node	src/XML/DataNodeXML.hpp	/^  XMLNode &node;$/;"	m	class:final
node	src/XML/DataNodeXML.hpp	/^  const XMLNode &node;$/;"	m	class:final
node	src/util/RadixTree.hpp	/^      Node *node;$/;"	m	struct:RadixTree::Node::Match
node_parent_const_iterator	src/Engine/Route/AStar.hpp	/^  typedef typename node_parent_map::const_iterator node_parent_const_iterator;$/;"	t	class:AStar
node_parent_iterator	src/Engine/Route/AStar.hpp	/^  typedef typename node_parent_map::iterator node_parent_iterator;$/;"	t	class:AStar
node_parent_map	src/Engine/Route/AStar.hpp	/^  typedef std::unordered_map<Node, Node, Hash, KeyEqual> node_parent_map;$/;"	t	class:AStar
node_parents	src/Engine/Route/AStar.hpp	/^  node_parent_map node_parents;$/;"	m	class:AStar
node_value_const_iterator	src/Engine/Route/AStar.hpp	/^  typedef typename node_value_map::const_iterator node_value_const_iterator;$/;"	t	class:AStar
node_value_iterator	src/Engine/Route/AStar.hpp	/^  typedef typename node_value_map::iterator node_value_iterator;$/;"	t	class:AStar
node_value_map	src/Engine/Route/AStar.hpp	/^  typedef std::unordered_map<Node, AStarPriorityValue, Hash, KeyEqual> node_value_map;$/;"	t	class:AStar
node_values	src/Engine/Route/AStar.hpp	/^  node_value_map node_values;$/;"	m	class:AStar
nodes_	src/Terrain/jasper/jpc/jpc_tagtree.h	/^	jpc_tagtreenode_t *nodes_;$/;"	m	struct:__anon109
noexcept	src/Android/Context.hpp	/^  AllocatedPath GetExternalCacheDir(JNIEnv *env) noexcept;$/;"	m	class:Context
noexcept	src/Android/Context.hpp	/^  AllocatedPath GetExternalFilesDir(JNIEnv *env) noexcept;$/;"	m	class:Context
noexcept	src/Android/DownloadManager.hpp	/^                                        Context &context) noexcept;$/;"	m	class:AndroidDownloadManager
noexcept	src/Android/DownloadManager.hpp	/^  static bool Initialise(JNIEnv *env) noexcept;$/;"	m	class:AndroidDownloadManager
noexcept	src/Android/DownloadManager.hpp	/^  static bool IsAvailable() noexcept;$/;"	m	class:AndroidDownloadManager
noexcept	src/Android/DownloadManager.hpp	/^  static void Deinitialise(JNIEnv *env) noexcept;$/;"	m	class:AndroidDownloadManager
noexcept	src/Android/DownloadManager.hpp	/^  void AddListener(Net::DownloadListener &listener) noexcept;$/;"	m	class:AndroidDownloadManager
noexcept	src/Android/DownloadManager.hpp	/^  void Cancel(JNIEnv *env, Path path_relative) noexcept;$/;"	m	class:AndroidDownloadManager
noexcept	src/Android/DownloadManager.hpp	/^  void Enqueue(JNIEnv *env, const char *uri, Path path_relative) noexcept;$/;"	m	class:AndroidDownloadManager
noexcept	src/Android/DownloadManager.hpp	/^  void Enumerate(JNIEnv *env, Net::DownloadListener &listener) noexcept;$/;"	m	class:AndroidDownloadManager
noexcept	src/Android/DownloadManager.hpp	/^  void OnDownloadComplete(Path path_relative, bool success) noexcept;$/;"	m	class:AndroidDownloadManager
noexcept	src/Android/DownloadManager.hpp	/^  void RemoveListener(Net::DownloadListener &listener) noexcept;$/;"	m	class:AndroidDownloadManager
noexcept	src/Android/Environment.hpp	/^AllocatedPath getExternalStorageDirectory() noexcept;$/;"	m	namespace:Environment
noexcept	src/Android/Environment.hpp	/^AllocatedPath getExternalStoragePublicDirectory(const char *type) noexcept;$/;"	m	namespace:Environment
noexcept	src/Android/NativeView.hpp	/^             jstring _product) noexcept;$/;"	m	class:NativeView
noexcept	src/Audio/ALSAPCMPlayer.hpp	/^  explicit ALSAPCMPlayer(EventLoop &event_loop) noexcept;$/;"	m	class:ALSAPCMPlayer
noexcept	src/Audio/ALSAPCMPlayer.hpp	/^  void OnSocketReady(unsigned events) noexcept;$/;"	m	class:ALSAPCMPlayer
noexcept	src/BallastDumpManager.hpp	/^  bool Update(GlidePolar &glide_polar, unsigned dump_time) noexcept;$/;"	m	class:BallastDumpManager
noexcept	src/BallastDumpManager.hpp	/^  void SetEnabled(bool _enabled) noexcept;$/;"	m	class:BallastDumpManager
noexcept	src/BallastDumpManager.hpp	/^  void Start() noexcept;$/;"	m	class:BallastDumpManager
noexcept	src/BallastDumpManager.hpp	/^  void Stop() noexcept;$/;"	m	class:BallastDumpManager
noexcept	src/Computer/GlideComputerInterface.hpp	/^  void SetComputer(GlideComputer &_computer) noexcept;$/;"	m	class:final
noexcept	src/Computer/WaveComputer.hpp	/^               const WaveSettings &settings) noexcept;$/;"	m	class:WaveComputer
noexcept	src/Computer/WaveComputer.hpp	/^  void Decay(double min_time) noexcept;$/;"	m	class:WaveComputer
noexcept	src/Computer/WaveComputer.hpp	/^  void FoundWave(const WaveInfo &new_wave) noexcept;$/;"	m	class:WaveComputer
noexcept	src/Computer/WaveComputer.hpp	/^  void Initialise() noexcept;$/;"	m	class:WaveComputer
noexcept	src/Computer/WaveComputer.hpp	/^  void ResetCurrent() noexcept;$/;"	m	class:WaveComputer
noexcept	src/CrossSection/CrossSectionWidget.hpp	/^              const MapSettings &settings) noexcept;$/;"	m	class:CrossSectionWidget
noexcept	src/Device/Descriptor.hpp	/^  bool DoOpen(OperationEnvironment &env) noexcept;$/;"	m	class:final
noexcept	src/Device/Descriptor.hpp	/^  void EnableDumpTemporarily(std::chrono::steady_clock::duration duration) noexcept;$/;"	m	class:final
noexcept	src/Device/Descriptor.hpp	/^  void OnJobFinished() noexcept;$/;"	m	class:final
noexcept	src/Device/Descriptor.hpp	/^  ~DeviceDescriptor() noexcept;$/;"	m	class:final
noexcept	src/Device/Driver/BlueFly/Internal.hpp	/^  BlueFlySettings GetSettings() noexcept;$/;"	m	class:BlueFlyDevice
noexcept	src/Device/Port/DumpPort.hpp	/^  DumpPort(std::unique_ptr<Port> port) noexcept;$/;"	m	class:final
noexcept	src/Device/Port/K6BtPort.hpp	/^           PortListener *listener, DataHandler &handler) noexcept;$/;"	m	class:K6BtPort
noexcept	src/Device/Port/Listener.hpp	/^  virtual void PortStateChanged() noexcept = 0;$/;"	m	class:PortListener
noexcept	src/Device/Port/Port.hpp	/^  void Error(std::exception_ptr e) noexcept;$/;"	m	class:Port
noexcept	src/Device/Port/TCPClientPort.hpp	/^  void OnSocketReady(unsigned events) noexcept;$/;"	m	class:final
noexcept	src/Device/Port/TCPPort.hpp	/^  void OnConnectionReady(unsigned events) noexcept;$/;"	m	class:final
noexcept	src/Device/Port/TCPPort.hpp	/^  void OnListenerReady(unsigned events) noexcept;$/;"	m	class:final
noexcept	src/Device/Port/TTYPort.hpp	/^  void OnSocketReady(unsigned events) noexcept;$/;"	m	class:TTYPort
noexcept	src/Device/Port/UDPPort.hpp	/^  void OnSocketReady(unsigned events) noexcept;$/;"	m	class:final
noexcept	src/Device/Util/LineHandler.hpp	/^  virtual bool LineReceived(const char *line) noexcept = 0;$/;"	m	class:PortLineHandler
noexcept	src/Dialogs/Airspace/AirspaceCRendererSettingsPanel.hpp	/^  explicit AirspaceClassRendererSettingsPanel(AirspaceClass type) noexcept;$/;"	m	class:AirspaceClassRendererSettingsPanel
noexcept	src/Dialogs/Airspace/AirspaceCRendererSettingsPanel.hpp	/^  void FillAirspaceClasses() noexcept;$/;"	m	class:AirspaceClassRendererSettingsPanel
noexcept	src/Dialogs/Airspace/dlgAirspaceDetails.cpp	/^  void AckDayOrEnable() noexcept;$/;"	m	class:final	file:
noexcept	src/Dialogs/Device/DeviceEditWidget.hpp	/^    virtual void OnModified(DeviceEditWidget &widget) noexcept = 0;$/;"	m	struct:DeviceEditWidget::Listener
noexcept	src/Dialogs/Device/DeviceEditWidget.hpp	/^  DeviceEditWidget(const DeviceConfig &_config) noexcept;$/;"	m	class:DeviceEditWidget
noexcept	src/Dialogs/Device/DeviceEditWidget.hpp	/^  void SetConfig(const DeviceConfig &config) noexcept;$/;"	m	class:DeviceEditWidget
noexcept	src/Dialogs/Device/DeviceEditWidget.hpp	/^  void UpdateVisibilities() noexcept;$/;"	m	class:DeviceEditWidget
noexcept	src/Dialogs/Device/LX/ManageLX16xxDialog.cpp	/^  void Prepare(ContainerWindow &parent, const PixelRect &rc) noexcept;$/;"	m	class:ManageLX16xxWidget	file:
noexcept	src/Dialogs/DownloadFilePicker.cpp	/^  void OnDownloadCompleteNotification() noexcept;$/;"	m	class:final	file:
noexcept	src/Dialogs/FileManager.cpp	/^  int FindItem(const TCHAR *name) const noexcept;$/;"	m	class:ManagedFileListWidget	file:
noexcept	src/Dialogs/FileManager.cpp	/^  void CreateButtons(WidgetDialog &dialog) noexcept;$/;"	m	class:ManagedFileListWidget	file:
noexcept	src/Dialogs/FileManager.cpp	/^  void OnDownloadNotification() noexcept;$/;"	m	class:ManagedFileListWidget	file:
noexcept	src/Dialogs/MapItemListSettingsPanel.hpp	/^  MapItemListSettingsPanel() noexcept;$/;"	m	class:final
noexcept	src/Dialogs/Plane/PolarShapeEditWidget.hpp	/^                       DataFieldListener *_listener) noexcept;$/;"	m	class:PolarShapeEditWidget
noexcept	src/Dialogs/Plane/PolarShapeEditWidget.hpp	/^  void SetPolarShape(const PolarShape &shape) noexcept;$/;"	m	class:PolarShapeEditWidget
noexcept	src/Dialogs/Plane/PolarShapeEditWidget.hpp	/^  ~PolarShapeEditWidget() noexcept;$/;"	m	class:PolarShapeEditWidget
noexcept	src/Dialogs/Settings/Panels/ConfigPanel.hpp	/^                       std::function<void()> callback) noexcept;$/;"	m	namespace:ConfigPanel
noexcept	src/Dialogs/Settings/Panels/InfoBoxesConfigPanel.cpp	/^  void OnAction(int id) noexcept;$/;"	m	class:final	file:
noexcept	src/Dialogs/Settings/WindSettingsPanel.hpp	/^                    bool edit_trail_drift) noexcept;$/;"	m	class:final
noexcept	src/Dialogs/Settings/WindSettingsPanel.hpp	/^  void ClearManual() noexcept;$/;"	m	class:final
noexcept	src/Dialogs/Settings/WindSettingsPanel.hpp	/^  void UpdateVector() noexcept;$/;"	m	class:final
noexcept	src/Dialogs/StatusPanels/StatusPanel.hpp	/^  virtual void Refresh() noexcept = 0;$/;"	m	class:StatusPanel
noexcept	src/Dialogs/Task/Manager/Internal.hpp	/^  explicit TaskManagerDialog(WndForm &_dialog) noexcept;$/;"	m	class:final
noexcept	src/Dialogs/Task/Manager/TaskActionsPanel.hpp	/^                   bool *_task_modified) noexcept;$/;"	m	class:TaskActionsPanel
noexcept	src/Dialogs/Task/Manager/TaskClosePanel.hpp	/^                 const DialogLook &_look) noexcept;$/;"	m	class:final
noexcept	src/Dialogs/Task/Manager/TaskClosePanel.hpp	/^    Layout(PixelRect rc, const DialogLook &look) noexcept;$/;"	m	struct:final::Layout
noexcept	src/Dialogs/Task/Manager/TaskClosePanel.hpp	/^  void CommitAndClose() noexcept;$/;"	m	class:final
noexcept	src/Dialogs/Task/Manager/TaskClosePanel.hpp	/^  void RefreshStatus() noexcept;$/;"	m	class:final
noexcept	src/Dialogs/Task/Manager/TaskEditPanel.cpp	/^  void CreateButtons(ButtonPanel &buttons) noexcept;$/;"	m	class:TaskEditPanel	file:
noexcept	src/Dialogs/Task/Manager/TaskMiscPanel.hpp	/^                bool *_task_modified) noexcept;$/;"	m	class:final
noexcept	src/Dialogs/Task/Manager/TaskPropertiesPanel.hpp	/^                      bool *_task_modified) noexcept;$/;"	m	class:final
noexcept	src/Dialogs/Task/TargetDialog.cpp	/^  void OnOptimized(bool value) noexcept;$/;"	m	class:TargetWidget	file:
noexcept	src/Dialogs/Task/Widgets/CylinderZoneEditWidget.hpp	/^  CylinderZoneEditWidget(CylinderZone &oz, bool _length_editable) noexcept;$/;"	m	class:CylinderZoneEditWidget
noexcept	src/Dialogs/Task/Widgets/KeyholeZoneEditWidget.hpp	/^  explicit KeyholeZoneEditWidget(KeyholeZone &_oz) noexcept;$/;"	m	class:KeyholeZoneEditWidget
noexcept	src/Dialogs/Task/Widgets/LineSectorZoneEditWidget.hpp	/^  LineSectorZoneEditWidget(LineSectorZone &oz, bool length_editable) noexcept;$/;"	m	class:LineSectorZoneEditWidget
noexcept	src/Dialogs/Task/Widgets/SectorZoneEditWidget.hpp	/^  explicit SectorZoneEditWidget(SectorZone &_oz) noexcept;$/;"	m	class:SectorZoneEditWidget
noexcept	src/Dialogs/Waypoint/WaypointInfoWidget.hpp	/^  WaypointInfoWidget(const DialogLook &look, WaypointPtr _waypoint) noexcept$/;"	m	struct:WaypointInfoWidget
noexcept	src/Dialogs/Waypoint/WaypointInfoWidget.hpp	/^  void AddGlideResult(const TCHAR *label, const GlideResult &result) noexcept;$/;"	m	struct:WaypointInfoWidget
noexcept	src/Dialogs/Waypoint/dlgWaypointDetails.cpp	/^                    const Waypoint &waypoint) noexcept;$/;"	m	struct:final::Layout	file:
noexcept	src/Dialogs/Waypoint/dlgWaypointDetails.cpp	/^  void UpdatePage() noexcept;$/;"	m	class:final	file:
noexcept	src/Dialogs/Weather/RASPDialog.cpp	/^  void Download() noexcept;$/;"	m	class:final	file:
noexcept	src/Dialogs/Weather/RASPDialog.cpp	/^  void FillItemControl() noexcept;$/;"	m	class:final	file:
noexcept	src/Dialogs/Weather/RASPDialog.cpp	/^  void OnTimeModified(const DataFieldEnum &df) noexcept;$/;"	m	class:final	file:
noexcept	src/Dialogs/Weather/RASPDialog.cpp	/^  void UpdateTimeControl() noexcept;$/;"	m	class:final	file:
noexcept	src/Dialogs/WidgetDialog.hpp	/^               Widget *widget) noexcept;$/;"	m	class:WidgetDialog
noexcept	src/Dialogs/WidgetDialog.hpp	/^               const TCHAR *caption) noexcept;$/;"	m	class:WidgetDialog
noexcept	src/Dialogs/WidgetDialog.hpp	/^               const TCHAR *caption, Widget *widget) noexcept;$/;"	m	class:WidgetDialog
noexcept	src/Dialogs/WidgetDialog.hpp	/^  void FinishPreliminary(std::unique_ptr<Widget> widget) noexcept;$/;"	m	class:WidgetDialog
noexcept	src/Dialogs/dlgAnalysis.cpp	/^    Layout(const DialogLook &look, const PixelRect &rc) noexcept;$/;"	m	struct:final::Layout	file:
noexcept	src/Engine/Contest/ContestTrace.hpp	/^  ContestTracePoint(const TracePoint &src) noexcept;$/;"	m	struct:ContestTracePoint
noexcept	src/Engine/Contest/Solvers/AbstractContest.hpp	/^                             const TracePoint &finish) const noexcept;$/;"	m	class:AbstractContest
noexcept	src/Engine/Contest/Solvers/AbstractContest.hpp	/^  AbstractContest(const unsigned _finish_alt_diff = 1000) noexcept;$/;"	m	class:AbstractContest
noexcept	src/Engine/Contest/Solvers/AbstractContest.hpp	/^  bool SaveSolution() noexcept;$/;"	m	class:AbstractContest
noexcept	src/Engine/Contest/Solvers/AbstractContest.hpp	/^  virtual ContestResult CalculateResult() const noexcept = 0;$/;"	m	class:AbstractContest
noexcept	src/Engine/Contest/Solvers/AbstractContest.hpp	/^  virtual SolverResult Solve(bool exhaustive) noexcept = 0;$/;"	m	class:AbstractContest
noexcept	src/Engine/Contest/Solvers/AbstractContest.hpp	/^  virtual bool UpdateScore() noexcept;$/;"	m	class:AbstractContest
noexcept	src/Engine/Contest/Solvers/AbstractContest.hpp	/^  virtual void CopySolution(ContestTraceVector &vec) const noexcept = 0;$/;"	m	class:AbstractContest
noexcept	src/Engine/Contest/Solvers/AbstractContest.hpp	/^  virtual void Reset() noexcept;$/;"	m	class:AbstractContest
noexcept	src/Engine/Contest/Solvers/ContestDijkstra.hpp	/^                  const unsigned finish_alt_diff = 1000) noexcept;$/;"	m	class:ContestDijkstra
noexcept	src/Engine/Contest/Solvers/ContestDijkstra.hpp	/^  bool SaveSolution() noexcept;$/;"	m	class:ContestDijkstra
noexcept	src/Engine/Contest/Solvers/ContestDijkstra.hpp	/^  virtual ContestResult CalculateResult(const ContestTraceVector &solution) const noexcept;$/;"	m	class:ContestDijkstra
noexcept	src/Engine/Contest/Solvers/ContestDijkstra.hpp	/^  virtual void AddStartEdges() noexcept;$/;"	m	class:ContestDijkstra
noexcept	src/Engine/Contest/Solvers/ContestDijkstra.hpp	/^  virtual void StartSearch() noexcept;$/;"	m	class:ContestDijkstra
noexcept	src/Engine/Contest/Solvers/ContestDijkstra.hpp	/^  void AddEdges(ScanTaskPoint origin, unsigned first_point) noexcept;$/;"	m	class:ContestDijkstra
noexcept	src/Engine/Contest/Solvers/ContestDijkstra.hpp	/^  void AddIncrementalEdges(unsigned first_point) noexcept;$/;"	m	class:ContestDijkstra
noexcept	src/Engine/Contest/Solvers/DMStQuad.hpp	/^  explicit DMStQuad(const Trace &_trace) noexcept;$/;"	m	class:DMStQuad
noexcept	src/Engine/Contest/Solvers/NetCoupe.hpp	/^  explicit NetCoupe(const Trace &_trace) noexcept;$/;"	m	class:NetCoupe
noexcept	src/Engine/Contest/Solvers/OLCClassic.hpp	/^  explicit OLCClassic(const Trace &_trace) noexcept;$/;"	m	class:OLCClassic
noexcept	src/Engine/Contest/Solvers/OLCFAI.hpp	/^  OLCFAI(const Trace &_trace, bool predict) noexcept;$/;"	m	class:OLCFAI
noexcept	src/Engine/Contest/Solvers/OLCLeague.hpp	/^  explicit OLCLeague(const Trace &_trace) noexcept;$/;"	m	class:OLCLeague
noexcept	src/Engine/Contest/Solvers/OLCPlus.hpp	/^  OLCPlus() noexcept;$/;"	m	class:OLCPlus
noexcept	src/Engine/Contest/Solvers/OLCSISAT.hpp	/^  explicit OLCSISAT(const Trace &_trace) noexcept;$/;"	m	class:OLCSISAT
noexcept	src/Engine/Contest/Solvers/OLCSprint.hpp	/^  explicit OLCSprint(const Trace &_trace) noexcept;$/;"	m	class:OLCSprint
noexcept	src/Engine/Contest/Solvers/OLCSprint.hpp	/^  unsigned FindStart() const noexcept;$/;"	m	class:OLCSprint
noexcept	src/Engine/Contest/Solvers/OLCTriangleRules.hpp	/^                                            const GeoPoint &reference) noexcept;$/;"	m	struct:OLCTriangleRules
noexcept	src/Engine/Contest/Solvers/Retrospective.hpp	/^                 const NearWaypoint& previous) noexcept$/;"	m	struct:Retrospective::NearWaypoint
noexcept	src/Engine/Contest/Solvers/Retrospective.hpp	/^    NearWaypoint(WaypointPtr &&_waypoint, const GeoPoint& _location) noexcept$/;"	m	struct:Retrospective::NearWaypoint
noexcept	src/Engine/Contest/Solvers/Retrospective.hpp	/^  bool UpdateSample(const GeoPoint &aircraft_location) noexcept;$/;"	m	class:Retrospective
noexcept	src/Engine/Contest/Solvers/Retrospective.hpp	/^  explicit Retrospective(const Waypoints &wps) noexcept;$/;"	m	class:Retrospective
noexcept	src/Engine/Contest/Solvers/Retrospective.hpp	/^  void CalcDistances(double &d_ach, double &d_can) noexcept;$/;"	m	class:Retrospective
noexcept	src/Engine/Contest/Solvers/Retrospective.hpp	/^  void Clear() noexcept;$/;"	m	class:Retrospective
noexcept	src/Engine/Contest/Solvers/Retrospective.hpp	/^  void PruneCandidates() noexcept;$/;"	m	class:Retrospective
noexcept	src/Engine/Contest/Solvers/TraceManager.hpp	/^  bool IsMasterUpdated(bool continuous) const noexcept;$/;"	m	class:TraceManager
noexcept	src/Engine/Contest/Solvers/TraceManager.hpp	/^  bool SetPredicted(const TracePoint &_predicted) noexcept;$/;"	m	class:TraceManager
noexcept	src/Engine/Contest/Solvers/TraceManager.hpp	/^  bool UpdateTraceTail() noexcept;$/;"	m	class:TraceManager
noexcept	src/Engine/Contest/Solvers/TraceManager.hpp	/^  explicit TraceManager(const Trace &_trace) noexcept;$/;"	m	class:TraceManager
noexcept	src/Engine/Contest/Solvers/TraceManager.hpp	/^  virtual void Reset() noexcept = 0;$/;"	m	class:TraceManager
noexcept	src/Engine/Contest/Solvers/TraceManager.hpp	/^  virtual void UpdateTrace(bool force) noexcept;$/;"	m	class:TraceManager
noexcept	src/Engine/Contest/Solvers/TraceManager.hpp	/^  void ClearTrace() noexcept;$/;"	m	class:TraceManager
noexcept	src/Engine/Contest/Solvers/TraceManager.hpp	/^  void UpdateTraceFull() noexcept;$/;"	m	class:TraceManager
noexcept	src/Engine/Contest/Solvers/TriangleContest.hpp	/^                   const unsigned min, const unsigned max) noexcept$/;"	m	struct:TriangleContest::TurnPointRange
noexcept	src/Engine/Contest/Solvers/TriangleContest.hpp	/^                 TurnPointRange _tp3) noexcept$/;"	m	struct:TriangleContest::CandidateSet
noexcept	src/Engine/Contest/Solvers/TriangleContest.hpp	/^                 unsigned first, unsigned last) noexcept$/;"	m	struct:TriangleContest::CandidateSet
noexcept	src/Engine/Contest/Solvers/TriangleContest.hpp	/^    explicit CandidateSet(TurnPointRange tp) noexcept$/;"	m	struct:TriangleContest::CandidateSet
noexcept	src/Engine/Contest/Solvers/XContestFree.hpp	/^               const bool _is_dhv=false) noexcept;$/;"	m	class:XContestFree
noexcept	src/Engine/Contest/Solvers/XContestTriangle.hpp	/^  XContestTriangle(const Trace &_trace, bool predict, bool _is_dhv) noexcept;$/;"	m	class:XContestTriangle
noexcept	src/Engine/GlideSolvers/PolarCoefficients.hpp	/^                                   double w1, double w2, double w3) noexcept;$/;"	m	struct:PolarCoefficients
noexcept	src/Engine/GlideSolvers/PolarCoefficients.hpp	/^  PolarCoefficients() noexcept = default;$/;"	m	struct:PolarCoefficients
noexcept	src/Engine/GlideSolvers/PolarCoefficients.hpp	/^  bool IsValid() const noexcept;$/;"	m	struct:PolarCoefficients
noexcept	src/Engine/GlideSolvers/PolarCoefficients.hpp	/^  constexpr PolarCoefficients(double _a, double _b, double _c) noexcept$/;"	m	struct:PolarCoefficients
noexcept	src/Engine/GlideSolvers/PolarCoefficients.hpp	/^  static PolarCoefficients From2VW(double v1, double v2, double w1, double w2) noexcept;$/;"	m	struct:PolarCoefficients
noexcept	src/Engine/PathSolvers/Dijkstra.hpp	/^    constexpr Edge(Node _parent, unsigned _value) noexcept$/;"	m	struct:Dijkstra::Edge
noexcept	src/Engine/PathSolvers/Dijkstra.hpp	/^    constexpr Value(unsigned _edge_value, edge_iterator _iterator) noexcept$/;"	m	struct:Dijkstra::Value
noexcept	src/Engine/PathSolvers/NavDijkstra.hpp	/^  virtual void AddEdges(const ScanTaskPoint curNode) noexcept = 0;$/;"	m	class:NavDijkstra
noexcept	src/Engine/Route/AStar.hpp	/^              node_value_iterator _iterator) noexcept$/;"	m	struct:AStar::NodeValue
noexcept	src/Engine/Route/AStar.hpp	/^  constexpr AStarPriorityValue(const unsigned _g, const unsigned _h) noexcept$/;"	m	struct:AStarPriorityValue
noexcept	src/Engine/Route/AStar.hpp	/^  explicit constexpr AStarPriorityValue(unsigned _g) noexcept:g(_g), h(0) {}$/;"	m	struct:AStarPriorityValue
noexcept	src/Engine/Route/FlatTriangleFanTree.hpp	/^                           int &arrival_height) const noexcept;$/;"	m	class:FlatTriangleFanTree
noexcept	src/Engine/Route/FlatTriangleFanTree.hpp	/^                     FlatTriangleFanVisitor &visitor) const noexcept;$/;"	m	class:FlatTriangleFanTree
noexcept	src/Engine/Route/FlatTriangleFanTree.hpp	/^                    const ReachFanParms &parms) const noexcept;$/;"	m	class:FlatTriangleFanTree
noexcept	src/Engine/Route/FlatTriangleFanTree.hpp	/^                 const ReachFanParms &parms) noexcept;$/;"	m	class:FlatTriangleFanTree
noexcept	src/Engine/Route/FlatTriangleFanTree.hpp	/^                const RouteLink &e_2, ReachFanParms &parms) noexcept;$/;"	m	class:FlatTriangleFanTree
noexcept	src/Engine/Route/FlatTriangleFanTree.hpp	/^  bool FillDepth(const AFlatGeoPoint &origin, ReachFanParms &parms) noexcept;$/;"	m	class:FlatTriangleFanTree
noexcept	src/Engine/Route/FlatTriangleFanTree.hpp	/^  void CalcBB() noexcept;$/;"	m	class:FlatTriangleFanTree
noexcept	src/Engine/Route/FlatTriangleFanTree.hpp	/^  void DummyReach(const AFlatGeoPoint &origin) noexcept;$/;"	m	class:FlatTriangleFanTree
noexcept	src/Engine/Route/FlatTriangleFanTree.hpp	/^  void FillGaps(const AFlatGeoPoint &origin, ReachFanParms &parms) noexcept;$/;"	m	class:FlatTriangleFanTree
noexcept	src/Engine/Route/FlatTriangleFanTree.hpp	/^  void FillReach(const AFlatGeoPoint &origin, ReachFanParms &parms) noexcept;$/;"	m	class:FlatTriangleFanTree
noexcept	src/Engine/Route/FlatTriangleFanTree.hpp	/^  void UpdateTerrainBase(FlatGeoPoint origin, ReachFanParms &parms) noexcept;$/;"	m	class:FlatTriangleFanTree
noexcept	src/Engine/Route/RouteLink.hpp	/^                          const RoutePoint _origin) noexcept$/;"	m	struct:RouteLinkBase
noexcept	src/Engine/Route/RouteLink.hpp	/^            const FlatProjection &proj) noexcept;$/;"	m	struct:RouteLink
noexcept	src/Engine/Route/RouteLink.hpp	/^  RouteLink Flat() const noexcept;$/;"	m	struct:RouteLink
noexcept	src/Engine/Route/RouteLink.hpp	/^  RouteLink(const RouteLinkBase &link, const FlatProjection &proj) noexcept;$/;"	m	struct:RouteLink
noexcept	src/Engine/Route/RouteLink.hpp	/^  bool IsShort() const noexcept;$/;"	m	struct:RouteLinkBase
noexcept	src/Engine/Route/RouteLink.hpp	/^  void CalcSpeedups(const FlatProjection &proj) noexcept;$/;"	m	struct:RouteLink
noexcept	src/Engine/Task/AbstractTask.hpp	/^                                      GlideResult &total, GlideResult &leg) noexcept = 0;$/;"	m	class:AbstractTask
noexcept	src/Engine/Task/AbstractTask.hpp	/^                                    const GlideResult &solution_remaining_leg) noexcept = 0;$/;"	m	class:AbstractTask
noexcept	src/Engine/Task/AbstractTask.hpp	/^                                   const GlidePolar &glide_polar) const noexcept = 0;$/;"	m	class:AbstractTask
noexcept	src/Engine/Task/AbstractTask.hpp	/^                                  double *dmin, double *dmax) noexcept = 0;$/;"	m	class:AbstractTask
noexcept	src/Engine/Task/AbstractTask.hpp	/^                                const AircraftState &state_last) noexcept = 0;$/;"	m	class:AbstractTask
noexcept	src/Engine/Task/AbstractTask.hpp	/^                               double &val) const noexcept;$/;"	m	class:AbstractTask
noexcept	src/Engine/Task/AbstractTask.hpp	/^                            const GlidePolar &glide_polar) noexcept;$/;"	m	class:AbstractTask
noexcept	src/Engine/Task/AbstractTask.hpp	/^                            const bool full_update) noexcept = 0;$/;"	m	class:AbstractTask
noexcept	src/Engine/Task/AbstractTask.hpp	/^                          double &best) const noexcept = 0;$/;"	m	class:AbstractTask
noexcept	src/Engine/Task/AbstractTask.hpp	/^                        const GlidePolar &glide_polar) noexcept;$/;"	m	class:AbstractTask
noexcept	src/Engine/Task/AbstractTask.hpp	/^                    double fallback_mc) noexcept;$/;"	m	class:AbstractTask
noexcept	src/Engine/Task/AbstractTask.hpp	/^  AbstractTask(TaskType _type, const TaskBehaviour &tb) noexcept;$/;"	m	class:AbstractTask
noexcept	src/Engine/Task/AbstractTask.hpp	/^  double CalcLegGradient(const AircraftState &state_now) const noexcept;$/;"	m	class:AbstractTask
noexcept	src/Engine/Task/AbstractTask.hpp	/^  virtual TaskValidationErrorSet CheckTask() const noexcept = 0;$/;"	m	class:AbstractTask
noexcept	src/Engine/Task/AbstractTask.hpp	/^  virtual bool IsScored() const noexcept = 0;$/;"	m	class:AbstractTask
noexcept	src/Engine/Task/AbstractTask.hpp	/^  virtual double CalcGradient(const AircraftState &state_now) const noexcept = 0;$/;"	m	class:AbstractTask
noexcept	src/Engine/Task/AbstractTask.hpp	/^  virtual double ScanDistanceNominal() noexcept = 0;$/;"	m	class:AbstractTask
noexcept	src/Engine/Task/AbstractTask.hpp	/^  virtual double ScanDistancePlanned() noexcept = 0;$/;"	m	class:AbstractTask
noexcept	src/Engine/Task/AbstractTask.hpp	/^  virtual double ScanDistanceRemaining(const GeoPoint &ref) noexcept = 0;$/;"	m	class:AbstractTask
noexcept	src/Engine/Task/AbstractTask.hpp	/^  virtual double ScanDistanceScored(const GeoPoint &ref) noexcept = 0;$/;"	m	class:AbstractTask
noexcept	src/Engine/Task/AbstractTask.hpp	/^  virtual double ScanDistanceTravelled(const GeoPoint &ref) noexcept = 0;$/;"	m	class:AbstractTask
noexcept	src/Engine/Task/AbstractTask.hpp	/^  virtual double ScanLegStartTime() noexcept = 0;$/;"	m	class:AbstractTask
noexcept	src/Engine/Task/AbstractTask.hpp	/^  virtual double ScanTotalStartTime() noexcept = 0;$/;"	m	class:AbstractTask
noexcept	src/Engine/Task/AbstractTask.hpp	/^  virtual void Reset() noexcept;$/;"	m	class:AbstractTask
noexcept	src/Engine/Task/AbstractTask.hpp	/^  void ResetAutoMC() noexcept;$/;"	m	class:AbstractTask
noexcept	src/Engine/Task/AbstractTask.hpp	/^  void UpdateFlightMode() noexcept;$/;"	m	class:AbstractTask
noexcept	src/Engine/Task/AbstractTask.hpp	/^  void UpdateStatsDistances(const GeoPoint &location, const bool full_update) noexcept;$/;"	m	class:AbstractTask
noexcept	src/Engine/Task/AbstractTask.hpp	/^  void UpdateStatsSpeeds(double time) noexcept;$/;"	m	class:AbstractTask
noexcept	src/Engine/Task/AbstractTask.hpp	/^  void UpdateStatsTimes(double time) noexcept;$/;"	m	class:AbstractTask
noexcept	src/Engine/Task/Factory/AbstractTaskFactory.hpp	/^                                                            WaypointPtr wp) const noexcept;$/;"	m	class:AbstractTaskFactory
noexcept	src/Engine/Task/Factory/AbstractTaskFactory.hpp	/^                                                       const TaskPointFactoryType newtype) const noexcept;$/;"	m	class:AbstractTaskFactory
noexcept	src/Engine/Task/Factory/AbstractTaskFactory.hpp	/^                                                WaypointPtr wp) const noexcept;$/;"	m	class:AbstractTaskFactory
noexcept	src/Engine/Task/Factory/AbstractTaskFactory.hpp	/^                                                double finish_radius) const noexcept;$/;"	m	class:AbstractTaskFactory
noexcept	src/Engine/Task/Factory/AbstractTaskFactory.hpp	/^                                            WaypointPtr wp) const noexcept;$/;"	m	class:AbstractTaskFactory
noexcept	src/Engine/Task/Factory/AbstractTaskFactory.hpp	/^                                           WaypointPtr wp) const noexcept;$/;"	m	class:AbstractTaskFactory
noexcept	src/Engine/Task/Factory/AbstractTaskFactory.hpp	/^                                          WaypointPtr wp) const noexcept;$/;"	m	class:AbstractTaskFactory
noexcept	src/Engine/Task/Factory/AbstractTaskFactory.hpp	/^  TaskValidationErrorSet ValidateFAIOZs() const noexcept;$/;"	m	class:AbstractTaskFactory
noexcept	src/Engine/Task/Factory/AbstractTaskFactory.hpp	/^  TaskValidationErrorSet ValidateMATOZs() const noexcept;$/;"	m	class:AbstractTaskFactory
noexcept	src/Engine/Task/Factory/AbstractTaskFactory.hpp	/^  std::unique_ptr<FinishPoint> CreateFinish(WaypointPtr wp) const noexcept;$/;"	m	class:AbstractTaskFactory
noexcept	src/Engine/Task/Factory/AbstractTaskFactory.hpp	/^  std::unique_ptr<IntermediateTaskPoint> CreateIntermediate(WaypointPtr wp) const noexcept;$/;"	m	class:AbstractTaskFactory
noexcept	src/Engine/Task/Factory/AbstractTaskFactory.hpp	/^  std::unique_ptr<StartPoint> CreateStart(WaypointPtr wp) const noexcept;$/;"	m	class:AbstractTaskFactory
noexcept	src/Engine/Task/Factory/AbstractTaskFactory.hpp	/^  virtual TaskValidationErrorSet Validate() const noexcept;$/;"	m	class:AbstractTaskFactory
noexcept	src/Engine/Task/ObservationZones/ObservationZoneClient.hpp	/^  explicit ObservationZoneClient(std::unique_ptr<ObservationZonePoint> _oz_point) noexcept;$/;"	m	class:ObservationZoneClient
noexcept	src/Engine/Task/ObservationZones/ObservationZoneClient.hpp	/^  ~ObservationZoneClient() noexcept;$/;"	m	class:ObservationZoneClient
noexcept	src/Engine/Task/ObservationZones/ObservationZonePoint.hpp	/^  virtual std::unique_ptr<ObservationZonePoint> Clone(const GeoPoint &_reference) const noexcept = 0;$/;"	m	class:ObservationZonePoint
noexcept	src/Engine/Task/Ordered/AATIsoline.hpp	/^  AATIsoline(const AATPoint &ap, const FlatProjection &projection) noexcept;$/;"	m	class:AATIsoline
noexcept	src/Engine/Task/Ordered/AATIsolineSegment.hpp	/^                    const FlatProjection &projection) noexcept;$/;"	m	class:AATIsolineSegment
noexcept	src/Engine/Task/Ordered/AATIsolineSegment.hpp	/^  GeoPoint Parametric(double t) const noexcept;$/;"	m	class:AATIsolineSegment
noexcept	src/Engine/Task/Ordered/AATIsolineSegment.hpp	/^  bool IsValid() const noexcept;$/;"	m	class:AATIsolineSegment
noexcept	src/Engine/Task/Ordered/OrderedTask.hpp	/^  explicit OrderedTask(const TaskBehaviour &tb) noexcept;$/;"	m	class:final
noexcept	src/Engine/Task/Ordered/OrderedTask.hpp	/^  std::unique_ptr<OrderedTask> Clone(const TaskBehaviour &tb) const noexcept;$/;"	m	class:final
noexcept	src/Engine/Task/Ordered/OrderedTask.hpp	/^  ~OrderedTask() noexcept;$/;"	m	class:final
noexcept	src/Engine/Task/PathSolvers/IsolineCrossingFinder.hpp	/^                        const double xmin, const double xmax) noexcept;$/;"	m	class:final
noexcept	src/Engine/Task/PathSolvers/IsolineCrossingFinder.hpp	/^  bool valid(const double t) noexcept;$/;"	m	class:final
noexcept	src/Engine/Task/PathSolvers/IsolineCrossingFinder.hpp	/^  double f(const double t) noexcept;$/;"	m	class:final
noexcept	src/Engine/Task/PathSolvers/IsolineCrossingFinder.hpp	/^  double solve() noexcept;$/;"	m	class:final
noexcept	src/Engine/Task/PathSolvers/TaskDijkstra.hpp	/^  bool Run() noexcept;$/;"	m	class:TaskDijkstra
noexcept	src/Engine/Task/PathSolvers/TaskDijkstra.hpp	/^  const SearchPoint &GetPoint(ScanTaskPoint sp) const noexcept;$/;"	m	class:TaskDijkstra
noexcept	src/Engine/Task/PathSolvers/TaskDijkstra.hpp	/^  explicit TaskDijkstra(const bool is_min) noexcept;$/;"	m	class:TaskDijkstra
noexcept	src/Engine/Task/PathSolvers/TaskDijkstra.hpp	/^  unsigned GetStageSize(const unsigned stage) const noexcept;$/;"	m	class:TaskDijkstra
noexcept	src/Engine/Task/PathSolvers/TaskDijkstra.hpp	/^  void AddStartEdges(unsigned stage, const SearchPoint &loc) noexcept;$/;"	m	class:TaskDijkstra
noexcept	src/Engine/Task/PathSolvers/TaskDijkstra.hpp	/^  void AddZeroStartEdges() noexcept;$/;"	m	class:TaskDijkstra
noexcept	src/Engine/Task/PathSolvers/TaskDijkstraMax.hpp	/^  bool DistanceMax() noexcept;$/;"	m	class:final
noexcept	src/Engine/Task/PathSolvers/TaskDijkstraMin.hpp	/^  bool DistanceMin(const SearchPoint &location) noexcept;$/;"	m	class:final
noexcept	src/Engine/Task/Shapes/FAITriangleRules.hpp	/^                   const FAITriangleSettings &settings) noexcept;$/;"	m	namespace:FAITriangleRules
noexcept	src/Engine/Task/TaskInterface.hpp	/^                          const GlidePolar &glide_polar) noexcept = 0;$/;"	m	class:TaskInterface
noexcept	src/Engine/Task/TaskInterface.hpp	/^                      const GlidePolar &glide_polar) noexcept = 0;$/;"	m	class:TaskInterface
noexcept	src/Engine/Task/TaskInterface.hpp	/^  virtual TaskWaypoint* GetActiveTaskPoint() const noexcept = 0;$/;"	m	class:TaskInterface
noexcept	src/Engine/Task/TaskInterface.hpp	/^  virtual bool IsValidTaskPoint(const int index_offset) const noexcept = 0;$/;"	m	class:TaskInterface
noexcept	src/Engine/Task/TaskInterface.hpp	/^  virtual unsigned TaskSize() const noexcept = 0;$/;"	m	class:TaskInterface
noexcept	src/Engine/Task/TaskInterface.hpp	/^  virtual void SetActiveTaskPoint(unsigned new_index) noexcept = 0;$/;"	m	class:TaskInterface
noexcept	src/Engine/Task/TaskManager.hpp	/^  std::unique_ptr<OrderedTask> Clone(const TaskBehaviour &tb) const noexcept;$/;"	m	class:TaskManager
noexcept	src/Engine/Task/TaskManager.hpp	/^  ~TaskManager() noexcept;$/;"	m	class:TaskManager
noexcept	src/Engine/Task/Unordered/AbortTask.hpp	/^                            bool reachable) noexcept;$/;"	m	class:AbortTask
noexcept	src/Engine/Task/Unordered/AbortTask.hpp	/^                       const GlidePolar &glide_polar) const noexcept;$/;"	m	class:AbortTask
noexcept	src/Engine/Task/Unordered/AbortTask.hpp	/^                       const GlideResult &_solution) noexcept$/;"	m	struct:AbortTask::AlternateTaskPoint
noexcept	src/Engine/Task/Unordered/AbortTask.hpp	/^                     bool final_glide, bool safety) noexcept;$/;"	m	class:AbortTask
noexcept	src/Engine/Task/Unordered/AbortTask.hpp	/^            const Waypoints &wps) noexcept;$/;"	m	class:AbortTask
noexcept	src/Engine/Task/Unordered/AbortTask.hpp	/^  GeoVector GetHomeVector(const AircraftState &state) const noexcept;$/;"	m	class:AbortTask
noexcept	src/Engine/Task/Unordered/AbortTask.hpp	/^  WaypointPtr GetHome() const noexcept;$/;"	m	class:AbortTask
noexcept	src/Engine/Task/Unordered/AbortTask.hpp	/^  virtual void Clear() noexcept;$/;"	m	class:AbortTask
noexcept	src/Engine/Task/Unordered/AbortTask.hpp	/^  void SetTaskBehaviour(const TaskBehaviour &tb) noexcept;$/;"	m	class:AbortTask
noexcept	src/Engine/Task/Unordered/AlternateTask.hpp	/^                const Waypoints &wps) noexcept;$/;"	m	class:final
noexcept	src/Engine/Task/Unordered/AlternateTask.hpp	/^           double _delta) noexcept$/;"	m	struct:final::Divert
noexcept	src/Engine/Task/Unordered/AlternateTask.hpp	/^  bool IsWaypointInAlternates(const Waypoint &waypoint) const noexcept;$/;"	m	class:final
noexcept	src/Engine/Task/Unordered/AlternateTask.hpp	/^  void SetTaskDestination(const GeoPoint &_destination) noexcept;$/;"	m	class:final
noexcept	src/Form/Button.hpp	/^              Callback _callback) noexcept;$/;"	m	class:Button
noexcept	src/Form/Button.hpp	/^         Callback _callback) noexcept;$/;"	m	class:Button
noexcept	src/Form/ButtonPanel.hpp	/^              Button::Callback callback) noexcept;$/;"	m	class:ButtonPanel
noexcept	src/Form/ButtonPanel.hpp	/^  Button *Add(const TCHAR *caption, Button::Callback callback) noexcept;$/;"	m	class:ButtonPanel
noexcept	src/Form/ButtonPanel.hpp	/^  Button *AddSymbol(const TCHAR *caption, Button::Callback callback) noexcept;$/;"	m	class:ButtonPanel
noexcept	src/Form/CheckBox.hpp	/^                                  tstring::const_pointer caption) noexcept;$/;"	m	class:CheckBoxControl
noexcept	src/Form/CheckBox.hpp	/^              Callback _callback) noexcept;$/;"	m	class:CheckBoxControl
noexcept	src/Form/Control.hpp	/^  WindowControl() noexcept;$/;"	m	class:WindowControl
noexcept	src/Form/Control.hpp	/^  bool OnHelp() noexcept;$/;"	m	class:WindowControl
noexcept	src/Form/Control.hpp	/^  void SetCaption(const TCHAR *Value) noexcept;$/;"	m	class:WindowControl
noexcept	src/Form/Edit.hpp	/^              const WindowStyle style) noexcept;$/;"	m	class:WndProperty
noexcept	src/Form/Edit.hpp	/^  WndProperty(const DialogLook &_look) noexcept;$/;"	m	class:WndProperty
noexcept	src/Form/Edit.hpp	/^  bool BeginEditing() noexcept;$/;"	m	class:WndProperty
noexcept	src/Form/Edit.hpp	/^  int DecValue() noexcept;$/;"	m	class:WndProperty
noexcept	src/Form/Edit.hpp	/^  int IncValue() noexcept;$/;"	m	class:WndProperty
noexcept	src/Form/Edit.hpp	/^  unsigned GetRecommendedCaptionWidth() const noexcept;$/;"	m	class:WndProperty
noexcept	src/Form/Edit.hpp	/^  void RefreshDisplay() noexcept;$/;"	m	class:WndProperty
noexcept	src/Form/Edit.hpp	/^  void SetCaptionWidth(int caption_width) noexcept;$/;"	m	class:WndProperty
noexcept	src/Form/Edit.hpp	/^  void SetDataField(DataField *Value) noexcept;$/;"	m	class:WndProperty
noexcept	src/Form/Edit.hpp	/^  void SetText(const TCHAR *_value) noexcept;$/;"	m	class:WndProperty
noexcept	src/Form/Edit.hpp	/^  void UpdateLayout() noexcept;$/;"	m	class:WndProperty
noexcept	src/Form/Edit.hpp	/^  ~WndProperty() noexcept;$/;"	m	class:WndProperty
noexcept	src/Form/Form.hpp	/^          const WindowStyle style={}) noexcept;$/;"	m	class:WndForm
noexcept	src/Form/Frame.hpp	/^           const WindowStyle style=WindowStyle()) noexcept;$/;"	m	class:WndFrame
noexcept	src/Form/Frame.hpp	/^  explicit WndFrame(const DialogLook &look) noexcept;$/;"	m	class:WndFrame
noexcept	src/Form/Frame.hpp	/^  unsigned GetTextHeight() const noexcept;$/;"	m	class:WndFrame
noexcept	src/Form/Frame.hpp	/^  void SetAlignCenter() noexcept;$/;"	m	class:WndFrame
noexcept	src/Form/Frame.hpp	/^  void SetText(const TCHAR *_text) noexcept;$/;"	m	class:WndFrame
noexcept	src/Form/Frame.hpp	/^  void SetVAlignCenter() noexcept;$/;"	m	class:WndFrame
noexcept	src/Form/List.hpp	/^                           unsigned idx) noexcept = 0;$/;"	m	class:ListItemRenderer
noexcept	src/Form/List.hpp	/^              unsigned _item_height) noexcept;$/;"	m	class:ListControl
noexcept	src/Form/List.hpp	/^  bool CanActivateItem() const noexcept;$/;"	m	class:ListControl
noexcept	src/Form/List.hpp	/^  bool SetCursorIndex(unsigned i) noexcept;$/;"	m	class:ListControl
noexcept	src/Form/List.hpp	/^  explicit ListControl(const DialogLook &_look) noexcept;$/;"	m	class:ListControl
noexcept	src/Form/List.hpp	/^  void ActivateItem() noexcept;$/;"	m	class:ListControl
noexcept	src/Form/List.hpp	/^  void DrawItems(Canvas &canvas, unsigned start, unsigned end) const noexcept;$/;"	m	class:ListControl
noexcept	src/Form/List.hpp	/^  void DrawScrollBar(Canvas &canvas) noexcept;$/;"	m	class:ListControl
noexcept	src/Form/List.hpp	/^  void EnsureVisible(unsigned i) noexcept;$/;"	m	class:ListControl
noexcept	src/Form/List.hpp	/^  void MoveCursor(int delta) noexcept;$/;"	m	class:ListControl
noexcept	src/Form/List.hpp	/^  void MoveOrigin(int delta) noexcept;$/;"	m	class:ListControl
noexcept	src/Form/List.hpp	/^  void OnKineticTimer() noexcept;$/;"	m	class:ListControl
noexcept	src/Form/List.hpp	/^  void SetItemHeight(unsigned _item_height) noexcept;$/;"	m	class:ListControl
noexcept	src/Form/List.hpp	/^  void SetLength(unsigned n) noexcept;$/;"	m	class:ListControl
noexcept	src/Form/List.hpp	/^  void SetOrigin(int i) noexcept;$/;"	m	class:ListControl
noexcept	src/Form/List.hpp	/^  void SetPixelOrigin(int pixel_origin) noexcept;$/;"	m	class:ListControl
noexcept	src/Form/List.hpp	/^  void SetPixelPan(unsigned _pixel_pan) noexcept;$/;"	m	class:ListControl
noexcept	src/Form/List.hpp	/^  void drag_end() noexcept;$/;"	m	class:ListControl
noexcept	src/Form/List.hpp	/^  void show_or_hide_scroll_bar() noexcept;$/;"	m	class:ListControl
noexcept	src/Gauge/BigThermalAssistantWidget.hpp	/^                            const ThermalAssistantLook &_look) noexcept;$/;"	m	class:BigThermalAssistantWidget
noexcept	src/Gauge/BigThermalAssistantWidget.hpp	/^              const DerivedInfo &calculated) noexcept;$/;"	m	class:BigThermalAssistantWidget
noexcept	src/Gauge/BigThermalAssistantWidget.hpp	/^  void UpdateLayout() noexcept;$/;"	m	class:BigThermalAssistantWidget
noexcept	src/Gauge/BigThermalAssistantWidget.hpp	/^  ~BigThermalAssistantWidget() noexcept;$/;"	m	class:BigThermalAssistantWidget
noexcept	src/Gauge/BigTrafficWidget.cpp	/^  void UpdateLayout(const PixelRect &rc) noexcept;$/;"	m	struct:TrafficWidget::Windows	file:
noexcept	src/Gauge/BigTrafficWidget.hpp	/^  TrafficWidget() noexcept;$/;"	m	class:TrafficWidget
noexcept	src/Gauge/BigTrafficWidget.hpp	/^  bool GetAutoZoom() const noexcept;$/;"	m	class:TrafficWidget
noexcept	src/Gauge/BigTrafficWidget.hpp	/^  bool GetNorthUp() const noexcept;$/;"	m	class:TrafficWidget
noexcept	src/Gauge/BigTrafficWidget.hpp	/^  void NextTarget() noexcept;$/;"	m	class:TrafficWidget
noexcept	src/Gauge/BigTrafficWidget.hpp	/^  void OpenDetails() noexcept;$/;"	m	class:TrafficWidget
noexcept	src/Gauge/BigTrafficWidget.hpp	/^  void PreviousTarget() noexcept;$/;"	m	class:TrafficWidget
noexcept	src/Gauge/BigTrafficWidget.hpp	/^  void SetAutoZoom(bool value) noexcept;$/;"	m	class:TrafficWidget
noexcept	src/Gauge/BigTrafficWidget.hpp	/^  void SetNorthUp(bool value) noexcept;$/;"	m	class:TrafficWidget
noexcept	src/Gauge/BigTrafficWidget.hpp	/^  void SwitchData() noexcept;$/;"	m	class:TrafficWidget
noexcept	src/Gauge/BigTrafficWidget.hpp	/^  void ToggleAutoZoom() noexcept;$/;"	m	class:TrafficWidget
noexcept	src/Gauge/BigTrafficWidget.hpp	/^  void ToggleNorthUp() noexcept;$/;"	m	class:TrafficWidget
noexcept	src/Gauge/BigTrafficWidget.hpp	/^  void Update() noexcept;$/;"	m	class:TrafficWidget
noexcept	src/Gauge/BigTrafficWidget.hpp	/^  void UpdateButtons() noexcept;$/;"	m	class:TrafficWidget
noexcept	src/Gauge/BigTrafficWidget.hpp	/^  void UpdateLayout() noexcept;$/;"	m	class:TrafficWidget
noexcept	src/Gauge/BigTrafficWidget.hpp	/^  void ZoomIn() noexcept;$/;"	m	class:TrafficWidget
noexcept	src/Gauge/BigTrafficWidget.hpp	/^  void ZoomOut() noexcept;$/;"	m	class:TrafficWidget
noexcept	src/Gauge/BigTrafficWidget.hpp	/^  ~TrafficWidget() noexcept;$/;"	m	class:TrafficWidget
noexcept	src/Gauge/GaugeFLARM.cpp	/^                     const WindowStyle style=WindowStyle()) noexcept;$/;"	m	class:SmallTrafficWindow	file:
noexcept	src/Gauge/GaugeFLARM.cpp	/^              const TeamCodeSettings &settings) noexcept;$/;"	m	class:SmallTrafficWindow	file:
noexcept	src/Gauge/GaugeFLARM.hpp	/^  void Update(const NMEAInfo &basic) noexcept;$/;"	m	class:final
noexcept	src/Gauge/GaugeThermalAssistant.hpp	/^              const DerivedInfo &calculated) noexcept;$/;"	m	class:final
noexcept	src/Gauge/GaugeVario.hpp	/^                   double Value, const TCHAR *Label) noexcept;$/;"	m	class:GaugeVario
noexcept	src/Gauge/GaugeVario.hpp	/^             PixelRect rc, const WindowStyle style=WindowStyle()) noexcept;$/;"	m	class:GaugeVario
noexcept	src/Gauge/GaugeVario.hpp	/^    BallastGeometry(const VarioLook &look, const PixelRect &rc) noexcept;$/;"	m	struct:GaugeVario::BallastGeometry
noexcept	src/Gauge/GaugeVario.hpp	/^    BugsGeometry(const VarioLook &look, const PixelRect &rc) noexcept;$/;"	m	struct:GaugeVario::BugsGeometry
noexcept	src/Gauge/GaugeVario.hpp	/^    Geometry(const VarioLook &look, const PixelRect &rc) noexcept;$/;"	m	struct:GaugeVario::Geometry
noexcept	src/Gauge/GaugeVario.hpp	/^    LabelValueGeometry(const VarioLook &look, PixelPoint position) noexcept;$/;"	m	struct:GaugeVario::LabelValueGeometry
noexcept	src/Gauge/GaugeVario.hpp	/^    static unsigned GetHeight(const VarioLook &look) noexcept;$/;"	m	struct:GaugeVario::LabelValueGeometry
noexcept	src/Gauge/GaugeVario.hpp	/^  BulkPixelPoint *getPolygon(const int i) noexcept;$/;"	m	class:GaugeVario
noexcept	src/Gauge/GaugeVario.hpp	/^  int  ValueToNeedlePos(double Value) noexcept;$/;"	m	class:GaugeVario
noexcept	src/Gauge/GaugeVario.hpp	/^  void MakeAllPolygons() noexcept;$/;"	m	class:GaugeVario
noexcept	src/Gauge/GaugeVario.hpp	/^  void MakePolygon(const int i) noexcept;$/;"	m	class:GaugeVario
noexcept	src/Gauge/GaugeVario.hpp	/^  void RenderBallast(Canvas &canvas) noexcept;$/;"	m	class:GaugeVario
noexcept	src/Gauge/GaugeVario.hpp	/^  void RenderBugs(Canvas &canvas) noexcept;$/;"	m	class:GaugeVario
noexcept	src/Gauge/GaugeVario.hpp	/^  void RenderClimb(Canvas &canvas) noexcept;$/;"	m	class:GaugeVario
noexcept	src/Gauge/GaugeVario.hpp	/^  void RenderNeedle(Canvas &canvas, int i, bool average, bool clear) noexcept;$/;"	m	class:GaugeVario
noexcept	src/Gauge/GaugeVario.hpp	/^  void RenderSpeedToFly(Canvas &canvas, int x, int y) noexcept;$/;"	m	class:GaugeVario
noexcept	src/Gauge/GaugeVario.hpp	/^  void RenderVarioLine(Canvas &canvas, int i, int sink, bool clear) noexcept;$/;"	m	class:GaugeVario
noexcept	src/Gauge/GaugeVario.hpp	/^  void RenderZero(Canvas &canvas) noexcept;$/;"	m	class:GaugeVario
noexcept	src/Geo/Quadrilateral.hpp	/^  GeoBounds GetBounds() const noexcept;$/;"	m	struct:GeoQuadrilateral
noexcept	src/Hardware/DisplayDPI.hpp	/^             unsigned width_mm, unsigned height_mm) noexcept;$/;"	m	namespace:Display
noexcept	src/Hardware/DisplayDPI.hpp	/^ProvideDPI(unsigned x_dpi, unsigned y_dpi) noexcept;$/;"	m	namespace:Display
noexcept	src/HorizonWidget.hpp	/^  void Update(const MoreData &basic) noexcept;$/;"	m	class:final
noexcept	src/InfoBoxes/InfoBoxWindow.hpp	/^  void OnDialogTimer() noexcept;$/;"	m	class:InfoBoxWindow
noexcept	src/InfoBoxes/Panel/ATCReference.cpp	/^  void UpdateValues() noexcept;$/;"	m	class:ATCReferencePanel	file:
noexcept	src/InfoBoxes/Panel/AltitudeInfo.cpp	/^  void Refresh() noexcept;$/;"	m	class:AltitudeInfoPanel	file:
noexcept	src/MainWindow.hpp	/^  void OnCalculatedNotify() noexcept;$/;"	m	class:MainWindow
noexcept	src/MainWindow.hpp	/^  void OnGpsNotify() noexcept;$/;"	m	class:MainWindow
noexcept	src/MainWindow.hpp	/^  void OnRestorePageNotify() noexcept;$/;"	m	class:MainWindow
noexcept	src/MainWindow.hpp	/^  void RunTimer() noexcept;$/;"	m	class:MainWindow
noexcept	src/MapWindow/GlueMapWindow.hpp	/^  void OnKineticTimer() noexcept;$/;"	m	class:GlueMapWindow
noexcept	src/MapWindow/GlueMapWindow.hpp	/^  void OnMapItemTimer() noexcept;$/;"	m	class:GlueMapWindow
noexcept	src/MapWindow/GlueMapWindow.hpp	/^  void PartialRedraw() noexcept;$/;"	m	class:GlueMapWindow
noexcept	src/MapWindow/GlueMapWindow.hpp	/^  void SetBottomMargin(unsigned margin) noexcept;$/;"	m	class:GlueMapWindow
noexcept	src/MapWindow/GlueMapWindow.hpp	/^  void SetBottomMarginFactor(unsigned margin_factor) noexcept;$/;"	m	class:GlueMapWindow
noexcept	src/MapWindow/MapCanvas.hpp	/^                      BulkPixelPoint *screen) noexcept;$/;"	m	class:MapCanvas
noexcept	src/MapWindow/MapCanvas.hpp	/^  bool PreparePolygon(const SearchPointVector &points) noexcept;$/;"	m	class:MapCanvas
noexcept	src/MapWindow/MapCanvas.hpp	/^  void DrawCircle(const GeoPoint &center, double radius) noexcept;$/;"	m	class:MapCanvas
noexcept	src/MapWindow/MapCanvas.hpp	/^  void DrawLine(GeoPoint a, GeoPoint b) noexcept;$/;"	m	class:MapCanvas
noexcept	src/MapWindow/MapCanvas.hpp	/^  void DrawLineWithOffset(GeoPoint a, GeoPoint b) noexcept;$/;"	m	class:MapCanvas
noexcept	src/MapWindow/MapCanvas.hpp	/^  void DrawPrepared() noexcept;$/;"	m	class:MapCanvas
noexcept	src/MapWindow/Overlay.hpp	/^                    const WindowProjection &projection) noexcept = 0;$/;"	m	class:MapOverlay
noexcept	src/MapWindow/Overlay.hpp	/^  virtual ~MapOverlay() noexcept = default;$/;"	m	class:MapOverlay
noexcept	src/Math/ARange.hpp	/^  AngleRange() noexcept = default;$/;"	m	struct:AngleRange
noexcept	src/Math/ARange.hpp	/^  bool Extend(Angle value) noexcept;$/;"	m	struct:AngleRange
noexcept	src/Math/ARange.hpp	/^  bool IntersectWith(const AngleRange &other) noexcept;$/;"	m	struct:AngleRange
noexcept	src/Math/ARange.hpp	/^  constexpr AngleRange(Angle _start, Angle _end) noexcept$/;"	m	struct:AngleRange
noexcept	src/Math/ConvexFilter.hpp	/^  double GetLastY() const noexcept;$/;"	m	class:ConvexFilter
noexcept	src/Math/ConvexFilter.hpp	/^  void UpdateConvex(double x, double y, int csign) noexcept;$/;"	m	class:ConvexFilter
noexcept	src/Math/DiffFilter.hpp	/^  DiffFilter() noexcept = default;$/;"	m	class:DiffFilter
noexcept	src/Math/DiffFilter.hpp	/^  double Update(double x0) noexcept;$/;"	m	class:DiffFilter
noexcept	src/Math/DiffFilter.hpp	/^  void Reset(double x0=0, double y0=0) noexcept;$/;"	m	class:DiffFilter
noexcept	src/Math/FastRotation.hpp	/^  FastIntegerRotation() noexcept = default;$/;"	m	class:FastIntegerRotation
noexcept	src/Math/FastRotation.hpp	/^  FastRotation() noexcept = default;$/;"	m	class:FastRotation
noexcept	src/Math/Filter.hpp	/^  Filter() noexcept = default;$/;"	m	class:Filter
noexcept	src/Math/Filter.hpp	/^  bool Design(double cutoff_wavelength, bool bessel = true) noexcept;$/;"	m	class:Filter
noexcept	src/Math/Filter.hpp	/^  double Reset(double x0) noexcept;$/;"	m	class:Filter
noexcept	src/Math/Filter.hpp	/^  double Update(double x0) noexcept;$/;"	m	class:Filter
noexcept	src/Math/Histogram.hpp	/^  double GetPercentile(double p) const noexcept;$/;"	m	class:Histogram
noexcept	src/Math/Histogram.hpp	/^  size_type SlotNumber(double x) const noexcept;$/;"	m	class:Histogram
noexcept	src/Math/Histogram.hpp	/^  void Clear() noexcept;$/;"	m	class:Histogram
noexcept	src/Math/Histogram.hpp	/^  void IncrementSlot(size_type i, double mag) noexcept;$/;"	m	class:Histogram
noexcept	src/Math/Histogram.hpp	/^  void Reset(double smin, double smax) noexcept;$/;"	m	class:Histogram
noexcept	src/Math/Histogram.hpp	/^  void UpdateHistogram(double x) noexcept;$/;"	m	class:Histogram
noexcept	src/Math/LeastSquares.hpp	/^  ErrorEllipse GetErrorEllipse() const noexcept;$/;"	m	class:LeastSquares
noexcept	src/Math/LeastSquares.hpp	/^  void Add(double x, double y, double weight=1) noexcept;$/;"	m	class:LeastSquares
noexcept	src/Math/LeastSquares.hpp	/^  void Compute() noexcept;$/;"	m	class:LeastSquares
noexcept	src/Math/LeastSquares.hpp	/^  void Remove(unsigned i) noexcept;$/;"	m	class:LeastSquares
noexcept	src/Math/LeastSquares.hpp	/^  void Reset() noexcept;$/;"	m	class:LeastSquares
noexcept	src/Math/LeastSquares.hpp	/^  void Update(double x, double y, double weight=1) noexcept;$/;"	m	class:LeastSquares
noexcept	src/Math/LeastSquares.hpp	/^  void Update(double y) noexcept;$/;"	m	class:LeastSquares
noexcept	src/Math/LeastSquares.hpp	/^  void UpdateError() noexcept;$/;"	m	class:LeastSquares
noexcept	src/Math/Point2D.hpp	/^  constexpr Point2D(scalar_type _x, scalar_type _y) noexcept$/;"	m	struct:Point2D
noexcept	src/Math/Point2D.hpp	/^  constexpr UnsignedPoint2D(Point2D<unsigned> src) noexcept$/;"	m	struct:UnsignedPoint2D
noexcept	src/Math/XYDataStore.hpp	/^    constexpr Slot(double _x, double _y, double _weight) noexcept$/;"	m	struct:XYDataStore::Slot
noexcept	src/Math/XYDataStore.hpp	/^  void StoreAdd(double x, double y, double weight=1) noexcept;$/;"	m	class:XYDataStore
noexcept	src/Math/XYDataStore.hpp	/^  void StoreRemove(const unsigned i) noexcept;$/;"	m	class:XYDataStore
noexcept	src/Math/XYDataStore.hpp	/^  void StoreReset() noexcept;$/;"	m	class:XYDataStore
noexcept	src/Math/ZeroFinder.hpp	/^  bool solution_within_tolerance(double xstart, double tol_act) noexcept;$/;"	m	class:ZeroFinder
noexcept	src/Math/ZeroFinder.hpp	/^  double find_min(double xstart) noexcept;$/;"	m	class:ZeroFinder
noexcept	src/Math/ZeroFinder.hpp	/^  double find_min_actual(double xstart) noexcept;$/;"	m	class:ZeroFinder
noexcept	src/Math/ZeroFinder.hpp	/^  double find_zero(double xstart) noexcept;$/;"	m	class:ZeroFinder
noexcept	src/Math/ZeroFinder.hpp	/^  double find_zero_actual(double xstart) noexcept;$/;"	m	class:ZeroFinder
noexcept	src/Math/ZeroFinder.hpp	/^  double tolerance_actual_min(double x) const noexcept;$/;"	m	class:ZeroFinder
noexcept	src/Math/ZeroFinder.hpp	/^  double tolerance_actual_zero(double x) const noexcept;$/;"	m	class:ZeroFinder
noexcept	src/Math/ZeroFinder.hpp	/^  virtual double f(const double x) noexcept = 0;$/;"	m	class:ZeroFinder
noexcept	src/Operation/Operation.hpp	/^  virtual bool IsCancelled() const noexcept = 0;$/;"	m	class:OperationEnvironment
noexcept	src/Operation/Operation.hpp	/^  virtual void SetCancelHandler(std::function<void()> handler) noexcept = 0;$/;"	m	class:OperationEnvironment
noexcept	src/Operation/Operation.hpp	/^  virtual void SetErrorMessage(const TCHAR *text) noexcept = 0;$/;"	m	class:OperationEnvironment
noexcept	src/Operation/Operation.hpp	/^  virtual void SetProgressPosition(unsigned position) noexcept = 0;$/;"	m	class:OperationEnvironment
noexcept	src/Operation/Operation.hpp	/^  virtual void SetProgressRange(unsigned range) noexcept = 0;$/;"	m	class:OperationEnvironment
noexcept	src/Operation/Operation.hpp	/^  virtual void SetText(const TCHAR *text) noexcept = 0;$/;"	m	class:OperationEnvironment
noexcept	src/Operation/Operation.hpp	/^  virtual void Sleep(std::chrono::steady_clock::duration duration) noexcept = 0;$/;"	m	class:OperationEnvironment
noexcept	src/Operation/ThreadedOperationEnvironment.hpp	/^    Data() noexcept$/;"	m	struct:ThreadedOperationEnvironment::Data
noexcept	src/Operation/ThreadedOperationEnvironment.hpp	/^  explicit ThreadedOperationEnvironment(OperationEnvironment &_other) noexcept;$/;"	m	class:ThreadedOperationEnvironment
noexcept	src/Operation/ThreadedOperationEnvironment.hpp	/^  void Cancel() noexcept;$/;"	m	class:ThreadedOperationEnvironment
noexcept	src/Operation/VerboseOperationEnvironment.hpp	/^  void Hide() noexcept;$/;"	m	class:VerboseOperationEnvironment
noexcept	src/Operation/VerboseOperationEnvironment.hpp	/^  void UpdateLayout() noexcept;$/;"	m	class:VerboseOperationEnvironment
noexcept	src/Polar/Shape.hpp	/^  PolarCoefficients CalculateCoefficients() const noexcept;$/;"	m	struct:PolarShape
noexcept	src/Polar/Shape.hpp	/^  bool IsValid() const noexcept;$/;"	m	struct:PolarShape
noexcept	src/PopupMessage.hpp	/^                  const TCHAR *Text) noexcept;$/;"	m	class:PopupMessage
noexcept	src/PopupMessage.hpp	/^                  std::chrono::steady_clock::time_point now) noexcept;$/;"	m	struct:PopupMessage::Message
noexcept	src/PopupMessage.hpp	/^             std::chrono::steady_clock::time_point now) noexcept;$/;"	m	struct:PopupMessage::Message
noexcept	src/PopupMessage.hpp	/^    bool Update(std::chrono::steady_clock::time_point now) noexcept;$/;"	m	struct:PopupMessage::Message
noexcept	src/Profile/Profile.hpp	/^  void Save() noexcept;$/;"	m	namespace:Profile
noexcept	src/Projection/ChartProjection.hpp	/^           double radius_factor=1.1) noexcept;$/;"	m	class:ChartProjection
noexcept	src/Projection/ChartProjection.hpp	/^  void Set(const PixelRect &rc, const GeoPoint &center, double radius) noexcept;$/;"	m	class:ChartProjection
noexcept	src/Projection/ChartProjection.hpp	/^  void Set(const PixelRect &rc, const OrderedTask &task) noexcept;$/;"	m	class:ChartProjection
noexcept	src/Projection/ChartProjection.hpp	/^  void Set(const PixelRect &rc, const OrderedTaskPoint &point) noexcept;$/;"	m	class:ChartProjection
noexcept	src/Projection/CompareProjection.hpp	/^    FourCorners(const WindowProjection &projection) noexcept;$/;"	m	struct:CompareProjection::FourCorners
noexcept	src/Projection/CompareProjection.hpp	/^  CompareProjection() noexcept = default;$/;"	m	class:CompareProjection
noexcept	src/Projection/CompareProjection.hpp	/^  bool Compare(const CompareProjection &other) const noexcept;$/;"	m	class:CompareProjection
noexcept	src/Projection/CompareProjection.hpp	/^  bool CompareAndUpdate(const CompareProjection &other) noexcept;$/;"	m	class:CompareProjection
noexcept	src/Projection/CompareProjection.hpp	/^  explicit CompareProjection(const WindowProjection &projection) noexcept;$/;"	m	class:CompareProjection
noexcept	src/Projection/MapWindowProjection.hpp	/^  bool WaypointInScaleFilter(const Waypoint &way_point) const noexcept;$/;"	m	class:MapWindowProjection
noexcept	src/Projection/MapWindowProjection.hpp	/^  double CalculateMapScale(unsigned scale) const noexcept;$/;"	m	class:MapWindowProjection
noexcept	src/Projection/MapWindowProjection.hpp	/^  double LimitMapScale(double value) const noexcept;$/;"	m	class:MapWindowProjection
noexcept	src/Projection/MapWindowProjection.hpp	/^  double StepMapScale(double scale, int Step) const noexcept;$/;"	m	class:MapWindowProjection
noexcept	src/Projection/MapWindowProjection.hpp	/^  unsigned FindMapScale(double Value) const noexcept;$/;"	m	class:MapWindowProjection
noexcept	src/Projection/MapWindowProjection.hpp	/^  void SetFreeMapScale(double x) noexcept;$/;"	m	class:MapWindowProjection
noexcept	src/Projection/MapWindowProjection.hpp	/^  void SetMapScale(double x) noexcept;$/;"	m	class:MapWindowProjection
noexcept	src/Projection/Projection.hpp	/^  GeoPoint ScreenToGeo(PixelPoint p) const noexcept;$/;"	m	class:Projection
noexcept	src/Projection/Projection.hpp	/^  PixelPoint GeoToScreen(const GeoPoint &g) const noexcept;$/;"	m	class:Projection
noexcept	src/Projection/Projection.hpp	/^  Projection() noexcept;$/;"	m	class:Projection
noexcept	src/Projection/Projection.hpp	/^  void SetScale(double _scale) noexcept;$/;"	m	class:Projection
noexcept	src/Projection/WindowProjection.hpp	/^  GeoPoint GetGeoScreenCenter() const noexcept;$/;"	m	class:WindowProjection
noexcept	src/Projection/WindowProjection.hpp	/^  GeoQuadrilateral GetGeoQuadrilateral() const noexcept;$/;"	m	class:WindowProjection
noexcept	src/Projection/WindowProjection.hpp	/^  double GetMapScale() const noexcept;$/;"	m	class:WindowProjection
noexcept	src/Projection/WindowProjection.hpp	/^  double GetScreenDistanceMeters() const noexcept;$/;"	m	class:WindowProjection
noexcept	src/Projection/WindowProjection.hpp	/^  std::optional<PixelPoint> GeoToScreenIfVisible(const GeoPoint &loc) const noexcept;$/;"	m	class:WindowProjection
noexcept	src/Projection/WindowProjection.hpp	/^  void SetScaleFromRadius(double radius) noexcept;$/;"	m	class:WindowProjection
noexcept	src/Projection/WindowProjection.hpp	/^  void UpdateScreenBounds() noexcept;$/;"	m	class:WindowProjection
noexcept	src/RateLimiter.hpp	/^              std::chrono::steady_clock::duration _delay={}) noexcept;$/;"	m	class:RateLimiter
noexcept	src/Renderer/ChartRenderer.hpp	/^                                                    UnitFormat units) noexcept;$/;"	m	class:ChartRenderer
noexcept	src/Renderer/ChartRenderer.hpp	/^                          double x_max, double y_max) noexcept;$/;"	m	class:ChartRenderer
noexcept	src/Renderer/ChartRenderer.hpp	/^                      const Brush &brush) noexcept;$/;"	m	class:ChartRenderer
noexcept	src/Renderer/ChartRenderer.hpp	/^                     ChartLook::Style style, bool swap=false) noexcept;$/;"	m	class:ChartRenderer
noexcept	src/Renderer/ChartRenderer.hpp	/^                     const Pen &pen, bool swap=false) noexcept;$/;"	m	class:ChartRenderer
noexcept	src/Renderer/ChartRenderer.hpp	/^                   const Pen *pen=nullptr) noexcept;$/;"	m	class:ChartRenderer
noexcept	src/Renderer/ChartRenderer.hpp	/^                 UnitFormat units = UnitFormat::NONE) noexcept;$/;"	m	class:ChartRenderer
noexcept	src/Renderer/ChartRenderer.hpp	/^                const bool has_padding=true) noexcept;$/;"	m	class:ChartRenderer
noexcept	src/Renderer/ChartRenderer.hpp	/^                double xmax, double ymax, ChartLook::Style style) noexcept;$/;"	m	class:ChartRenderer
noexcept	src/Renderer/ChartRenderer.hpp	/^                double xmax, double ymax, const Pen &pen) noexcept;$/;"	m	class:ChartRenderer
noexcept	src/Renderer/ChartRenderer.hpp	/^    int ToScreen(double value) const noexcept;$/;"	m	struct:ChartRenderer::Axis
noexcept	src/Renderer/ChartRenderer.hpp	/^  int ScreenX(double x) const noexcept;$/;"	m	class:ChartRenderer
noexcept	src/Renderer/ChartRenderer.hpp	/^  int ScreenY(double y) const noexcept;$/;"	m	class:ChartRenderer
noexcept	src/Renderer/ChartRenderer.hpp	/^  void Begin() noexcept;$/;"	m	class:ChartRenderer
noexcept	src/Renderer/ChartRenderer.hpp	/^  void DrawBarChart(const XYDataStore &lsdata) noexcept;$/;"	m	class:ChartRenderer
noexcept	src/Renderer/ChartRenderer.hpp	/^  void DrawDot(double x, double y, const unsigned width) noexcept;$/;"	m	class:ChartRenderer
noexcept	src/Renderer/ChartRenderer.hpp	/^  void DrawFilledLineGraph(ConstBuffer<DoublePoint2D> src, bool swap=false) noexcept;$/;"	m	class:ChartRenderer
noexcept	src/Renderer/ChartRenderer.hpp	/^  void DrawFilledLineGraph(const XYDataStore &lsdata, bool swap=false) noexcept;$/;"	m	class:ChartRenderer
noexcept	src/Renderer/ChartRenderer.hpp	/^  void DrawImpulseGraph(const XYDataStore &lsdata, ChartLook::Style style) noexcept;$/;"	m	class:ChartRenderer
noexcept	src/Renderer/ChartRenderer.hpp	/^  void DrawImpulseGraph(const XYDataStore &lsdata, const Pen &pen) noexcept;$/;"	m	class:ChartRenderer
noexcept	src/Renderer/ChartRenderer.hpp	/^  void DrawLabel(const TCHAR *text, double xv, double yv) noexcept;$/;"	m	class:ChartRenderer
noexcept	src/Renderer/ChartRenderer.hpp	/^  void DrawLineGraph(const XYDataStore &lsdata, ChartLook::Style style, bool swap=false) noexcept;$/;"	m	class:ChartRenderer
noexcept	src/Renderer/ChartRenderer.hpp	/^  void DrawLineGraph(const XYDataStore &lsdata, const Pen &pen, bool swap=false) noexcept;$/;"	m	class:ChartRenderer
noexcept	src/Renderer/ChartRenderer.hpp	/^  void DrawNoData() noexcept;$/;"	m	class:ChartRenderer
noexcept	src/Renderer/ChartRenderer.hpp	/^  void DrawNoData(const TCHAR *text) noexcept;$/;"	m	class:ChartRenderer
noexcept	src/Renderer/ChartRenderer.hpp	/^  void DrawTrend(const LeastSquares &lsdata, ChartLook::Style style) noexcept;$/;"	m	class:ChartRenderer
noexcept	src/Renderer/ChartRenderer.hpp	/^  void DrawTrendN(const LeastSquares &lsdata, ChartLook::Style style) noexcept;$/;"	m	class:ChartRenderer
noexcept	src/Renderer/ChartRenderer.hpp	/^  void DrawWeightBarGraph(const XYDataStore &lsdata) noexcept;$/;"	m	class:ChartRenderer
noexcept	src/Renderer/ChartRenderer.hpp	/^  void Finish() noexcept;$/;"	m	class:ChartRenderer
noexcept	src/Renderer/ChartRenderer.hpp	/^  void ScaleXFromData(const LeastSquares &lsdata) noexcept;$/;"	m	class:ChartRenderer
noexcept	src/Renderer/ChartRenderer.hpp	/^  void ScaleXFromValue(double val) noexcept;$/;"	m	class:ChartRenderer
noexcept	src/Renderer/ChartRenderer.hpp	/^  void ScaleYFromData(const LeastSquares &lsdata) noexcept;$/;"	m	class:ChartRenderer
noexcept	src/Renderer/ChartRenderer.hpp	/^  void ScaleYFromValue(double val) noexcept;$/;"	m	class:ChartRenderer
noexcept	src/Renderer/ChartRenderer.hpp	/^  void SetXLabel(const TCHAR *text) noexcept;$/;"	m	class:ChartRenderer
noexcept	src/Renderer/ChartRenderer.hpp	/^  void SetXLabel(const TCHAR *text, const TCHAR *unit) noexcept;$/;"	m	class:ChartRenderer
noexcept	src/Renderer/ChartRenderer.hpp	/^  void SetYLabel(const TCHAR *text) noexcept;$/;"	m	class:ChartRenderer
noexcept	src/Renderer/ChartRenderer.hpp	/^  void SetYLabel(const TCHAR *text, const TCHAR *unit) noexcept;$/;"	m	class:ChartRenderer
noexcept	src/Renderer/TextButtonRenderer.hpp	/^                                        const TCHAR *caption) noexcept;$/;"	m	class:TextButtonRenderer
noexcept	src/Renderer/UnitSymbolRenderer.hpp	/^            const Pen &unit_fraction_pen) noexcept;$/;"	m	namespace:UnitSymbolRenderer
noexcept	src/Renderer/UnitSymbolRenderer.hpp	/^  PixelSize GetSize(const Canvas &canvas, const Unit unit) noexcept;$/;"	m	namespace:UnitSymbolRenderer
noexcept	src/Renderer/UnitSymbolRenderer.hpp	/^  PixelSize GetSize(const Font &font, const Unit unit) noexcept;$/;"	m	namespace:UnitSymbolRenderer
noexcept	src/Renderer/UnitSymbolRenderer.hpp	/^  unsigned GetAscentHeight(const Font &font, const Unit unit) noexcept;$/;"	m	namespace:UnitSymbolRenderer
noexcept	src/Screen/Layout.hpp	/^           unsigned custom_dpi=0) noexcept;$/;"	m	namespace:Layout
noexcept	src/Task/ProtectedTaskManager.hpp	/^  std::unique_ptr<OrderedTask> TaskClone() const noexcept;$/;"	m	class:ProtectedTaskManager
noexcept	src/Task/TaskFile.hpp	/^  virtual unsigned Count() noexcept = 0;$/;"	m	class:TaskFile
noexcept	src/Task/TaskStore.hpp	/^    const OrderedTask *GetTask(const TaskBehaviour &task_behaviour) noexcept;$/;"	m	struct:TaskStore::Item
noexcept	src/Task/TaskStore.hpp	/^    ~Item() noexcept;$/;"	m	struct:TaskStore::Item
noexcept	src/Tracking/SkyLines/Client.hpp	/^  void InternalClose() noexcept;$/;"	m	class:SkyLinesTracking::final
noexcept	src/Tracking/SkyLines/Client.hpp	/^  void OnSocketReady(unsigned events) noexcept;$/;"	m	class:SkyLinesTracking::final
noexcept	src/Tracking/SkyLines/Server.hpp	/^  void OnSocketReady(unsigned events) noexcept;$/;"	m	class:SkyLinesTracking::Server
noexcept	src/Tracking/SkyLines/Server.hpp	/^  void SendBuffer(SocketAddress address, ConstBuffer<void> buffer) noexcept;$/;"	m	class:SkyLinesTracking::Server
noexcept	src/Tracking/TrackingGlue.hpp	/^  TrackingGlue(EventLoop &event_loop, CurlGlobal &curl) noexcept;$/;"	m	class:final
noexcept	src/Waypoint/WaypointListBuilder.hpp	/^  void operator()(const WaypointPtr &waypoint) noexcept;$/;"	m	class:final
noexcept	src/Widget/ArrowPagerWidget.hpp	/^           const Widget *extra) noexcept;$/;"	m	struct:ArrowPagerWidget::Layout
noexcept	src/Widget/ButtonPanelWidget.hpp	/^  PixelRect UpdateLayout(const PixelRect &rc) noexcept;$/;"	m	class:ButtonPanelWidget
noexcept	src/Widget/ButtonWidget.hpp	/^               std::function<void()> _callback) noexcept;$/;"	m	class:ButtonWidget
noexcept	src/Widget/ButtonWidget.hpp	/^  ButtonRenderer &GetRenderer() noexcept;$/;"	m	class:ButtonWidget
noexcept	src/Widget/ButtonWidget.hpp	/^  const ButtonRenderer &GetRenderer() const noexcept;$/;"	m	class:ButtonWidget
noexcept	src/Widget/ButtonWidget.hpp	/^  void Invalidate() noexcept;$/;"	m	class:ButtonWidget
noexcept	src/Widget/LargeTextWidget.hpp	/^  void SetText(const TCHAR *text) noexcept;$/;"	m	class:LargeTextWidget
noexcept	src/Widget/ListWidget.hpp	/^                          const PixelRect &rc, unsigned row_height) noexcept;$/;"	m	class:ListWidget
noexcept	src/Widget/ManagedWidget.hpp	/^  ManagedWidget() noexcept = default;$/;"	m	class:ManagedWidget
noexcept	src/Widget/ManagedWidget.hpp	/^  bool KeyPress(unsigned key_code) noexcept;$/;"	m	class:ManagedWidget
noexcept	src/Widget/ManagedWidget.hpp	/^  bool SetFocus() noexcept;$/;"	m	class:ManagedWidget
noexcept	src/Widget/ManagedWidget.hpp	/^  void Clear() noexcept;$/;"	m	class:ManagedWidget
noexcept	src/Widget/ManagedWidget.hpp	/^  void Hide() noexcept;$/;"	m	class:ManagedWidget
noexcept	src/Widget/ManagedWidget.hpp	/^  void Move(const PixelRect &position) noexcept;$/;"	m	class:ManagedWidget
noexcept	src/Widget/ManagedWidget.hpp	/^  void Set(Widget *widget) noexcept;$/;"	m	class:ManagedWidget
noexcept	src/Widget/ManagedWidget.hpp	/^  void Set(std::unique_ptr<Widget> widget) noexcept;$/;"	m	class:ManagedWidget
noexcept	src/Widget/ManagedWidget.hpp	/^  void SetVisible(bool _visible) noexcept;$/;"	m	class:ManagedWidget
noexcept	src/Widget/ManagedWidget.hpp	/^  void Show() noexcept;$/;"	m	class:ManagedWidget
noexcept	src/Widget/ManagedWidget.hpp	/^  void Unprepare() noexcept;$/;"	m	class:ManagedWidget
noexcept	src/Widget/OffsetButtonsWidget.hpp	/^                                    const PixelRect &r) noexcept;$/;"	m	class:OffsetButtonsWidget
noexcept	src/Widget/OffsetButtonsWidget.hpp	/^                    unsigned i) noexcept;$/;"	m	class:OffsetButtonsWidget
noexcept	src/Widget/OffsetButtonsWidget.hpp	/^  virtual void OnOffset(double offset) noexcept = 0;$/;"	m	class:OffsetButtonsWidget
noexcept	src/Widget/OverlappedWidget.hpp	/^  void Raise() noexcept;$/;"	m	class:OverlappedWidget
noexcept	src/Widget/PagerWidget.hpp	/^    Child(std::unique_ptr<Widget> &&_widget) noexcept$/;"	m	struct:PagerWidget::Child
noexcept	src/Widget/PagerWidget.hpp	/^  bool Next(bool wrap) noexcept;$/;"	m	class:PagerWidget
noexcept	src/Widget/PagerWidget.hpp	/^  bool Previous(bool wrap) noexcept;$/;"	m	class:PagerWidget
noexcept	src/Widget/PagerWidget.hpp	/^  bool SetCurrent(unsigned i, bool click=false) noexcept;$/;"	m	class:PagerWidget
noexcept	src/Widget/PagerWidget.hpp	/^  virtual void OnPageFlipped() noexcept;$/;"	m	class:PagerWidget
noexcept	src/Widget/PagerWidget.hpp	/^  void Add(std::unique_ptr<Widget> w) noexcept;$/;"	m	class:PagerWidget
noexcept	src/Widget/PagerWidget.hpp	/^  void Clear() noexcept;$/;"	m	class:PagerWidget
noexcept	src/Widget/PagerWidget.hpp	/^  void PrepareWidget(unsigned i) noexcept;$/;"	m	class:PagerWidget
noexcept	src/Widget/QuestionWidget.hpp	/^  explicit QuestionWidget(const TCHAR *_message) noexcept;$/;"	m	class:QuestionWidget
noexcept	src/Widget/QuestionWidget.hpp	/^  void SetMessage(const TCHAR *_message) noexcept;$/;"	m	class:QuestionWidget
noexcept	src/Widget/RowFormWidget.hpp	/^                                          bool read_only=false) noexcept;$/;"	m	class:RowFormWidget
noexcept	src/Widget/RowFormWidget.hpp	/^                              bool vertical) const noexcept;$/;"	m	struct:RowFormWidget::Row
noexcept	src/Widget/RowFormWidget.hpp	/^                            DataFieldListener *listener=nullptr) noexcept;$/;"	m	class:RowFormWidget
noexcept	src/Widget/RowFormWidget.hpp	/^                           const TCHAR *content) noexcept;$/;"	m	class:RowFormWidget
noexcept	src/Widget/RowFormWidget.hpp	/^                          DataFieldListener *listener=nullptr) noexcept;$/;"	m	class:RowFormWidget
noexcept	src/Widget/RowFormWidget.hpp	/^                        DataFieldListener *listener=nullptr) noexcept;$/;"	m	class:RowFormWidget
noexcept	src/Widget/RowFormWidget.hpp	/^                       DataFieldListener *listener=nullptr) noexcept;$/;"	m	class:RowFormWidget
noexcept	src/Widget/RowFormWidget.hpp	/^                       bool nullable = true) noexcept;$/;"	m	class:RowFormWidget
noexcept	src/Widget/RowFormWidget.hpp	/^                      int caption_width) noexcept;$/;"	m	struct:RowFormWidget::Row
noexcept	src/Widget/RowFormWidget.hpp	/^                   DataField *df) noexcept;$/;"	m	class:RowFormWidget
noexcept	src/Widget/RowFormWidget.hpp	/^                   UnitGroup unit_group, double value) noexcept;$/;"	m	class:RowFormWidget
noexcept	src/Widget/RowFormWidget.hpp	/^                   bool read_only=false) noexcept;$/;"	m	class:RowFormWidget
noexcept	src/Widget/RowFormWidget.hpp	/^                   bool value) noexcept;$/;"	m	class:RowFormWidget
noexcept	src/Widget/RowFormWidget.hpp	/^                   const TCHAR *text=nullptr) noexcept;$/;"	m	class:RowFormWidget
noexcept	src/Widget/RowFormWidget.hpp	/^                   double value) noexcept;$/;"	m	class:RowFormWidget
noexcept	src/Widget/RowFormWidget.hpp	/^                 TCHAR *string, size_t max_size) const noexcept;$/;"	m	class:RowFormWidget
noexcept	src/Widget/RowFormWidget.hpp	/^                 bool negated = false) const noexcept;$/;"	m	class:RowFormWidget
noexcept	src/Widget/RowFormWidget.hpp	/^                 const char *profile_key, double &value) const noexcept;$/;"	m	class:RowFormWidget
noexcept	src/Widget/RowFormWidget.hpp	/^                 const char *profile_key, unsigned int &value) const noexcept;$/;"	m	class:RowFormWidget
noexcept	src/Widget/RowFormWidget.hpp	/^    Row(Type _type) noexcept$/;"	m	struct:RowFormWidget::Row
noexcept	src/Widget/RowFormWidget.hpp	/^    Row(Type _type, std::unique_ptr<Window> &&_window) noexcept$/;"	m	struct:RowFormWidget::Row
noexcept	src/Widget/RowFormWidget.hpp	/^    Row(std::unique_ptr<Widget> &&_widget) noexcept$/;"	m	struct:RowFormWidget::Row
noexcept	src/Widget/RowFormWidget.hpp	/^    void Hide() noexcept;$/;"	m	struct:RowFormWidget::Row
noexcept	src/Widget/RowFormWidget.hpp	/^    void SetVisible(ContainerWindow &parent, bool _visible) noexcept;$/;"	m	struct:RowFormWidget::Row
noexcept	src/Widget/RowFormWidget.hpp	/^    void Show(ContainerWindow &parent) noexcept;$/;"	m	struct:RowFormWidget::Row
noexcept	src/Widget/RowFormWidget.hpp	/^  Angle GetValueAngle(unsigned i) const noexcept;$/;"	m	class:RowFormWidget
noexcept	src/Widget/RowFormWidget.hpp	/^  Button *AddButton(const TCHAR *label, std::function<void()> callback) noexcept;$/;"	m	class:RowFormWidget
noexcept	src/Widget/RowFormWidget.hpp	/^  RoughTime GetValueRoughTime(unsigned i) const noexcept;$/;"	m	class:RowFormWidget
noexcept	src/Widget/RowFormWidget.hpp	/^  RowFormWidget(const DialogLook &look, bool vertical=false) noexcept;$/;"	m	class:RowFormWidget
noexcept	src/Widget/RowFormWidget.hpp	/^  Window &Add(Row::Type type, std::unique_ptr<Window> window) noexcept;$/;"	m	class:RowFormWidget
noexcept	src/Widget/RowFormWidget.hpp	/^  bool GetValueBoolean(unsigned i) const noexcept;$/;"	m	class:RowFormWidget
noexcept	src/Widget/RowFormWidget.hpp	/^  bool SaveValue(unsigned i, Angle &value_r) const noexcept;$/;"	m	class:RowFormWidget
noexcept	src/Widget/RowFormWidget.hpp	/^  bool SaveValue(unsigned i, RoughTime &value_r) const noexcept;$/;"	m	class:RowFormWidget
noexcept	src/Widget/RowFormWidget.hpp	/^  bool SaveValue(unsigned i, TCHAR *string, size_t max_size) const noexcept;$/;"	m	class:RowFormWidget
noexcept	src/Widget/RowFormWidget.hpp	/^  bool SaveValue(unsigned i, UnitGroup unit_group, double &value) const noexcept;$/;"	m	class:RowFormWidget
noexcept	src/Widget/RowFormWidget.hpp	/^  bool SaveValue(unsigned i, bool &value, bool negated = false) const noexcept;$/;"	m	class:RowFormWidget
noexcept	src/Widget/RowFormWidget.hpp	/^  bool SaveValue(unsigned i, const char *profile_key, double &value) const noexcept;$/;"	m	class:RowFormWidget
noexcept	src/Widget/RowFormWidget.hpp	/^  bool SaveValue(unsigned i, const char *profile_key, int &value) const noexcept;$/;"	m	class:RowFormWidget
noexcept	src/Widget/RowFormWidget.hpp	/^  bool SaveValue(unsigned i, const char *profile_key, uint16_t &value) const noexcept;$/;"	m	class:RowFormWidget
noexcept	src/Widget/RowFormWidget.hpp	/^  bool SaveValue(unsigned i, const char *profile_key, uint8_t &value) const noexcept;$/;"	m	class:RowFormWidget
noexcept	src/Widget/RowFormWidget.hpp	/^  bool SaveValue(unsigned i, double &value) const noexcept;$/;"	m	class:RowFormWidget
noexcept	src/Widget/RowFormWidget.hpp	/^  bool SaveValue(unsigned i, int &value) const noexcept;$/;"	m	class:RowFormWidget
noexcept	src/Widget/RowFormWidget.hpp	/^  bool SaveValue(unsigned i, uint16_t &value) const noexcept;$/;"	m	class:RowFormWidget
noexcept	src/Widget/RowFormWidget.hpp	/^  bool SaveValue(unsigned i, uint8_t &value) const noexcept;$/;"	m	class:RowFormWidget
noexcept	src/Widget/RowFormWidget.hpp	/^  bool SaveValueFileReader(unsigned i, const char *profile_key) noexcept;$/;"	m	class:RowFormWidget
noexcept	src/Widget/RowFormWidget.hpp	/^  double GetValueFloat(unsigned i) const noexcept;$/;"	m	class:RowFormWidget
noexcept	src/Widget/RowFormWidget.hpp	/^  int GetValueInteger(unsigned i) const noexcept;$/;"	m	class:RowFormWidget
noexcept	src/Widget/RowFormWidget.hpp	/^  unsigned GetRecommendedCaptionWidth() const noexcept;$/;"	m	class:RowFormWidget
noexcept	src/Widget/RowFormWidget.hpp	/^  unsigned GetValueIntegerAngle(unsigned i) const noexcept;$/;"	m	class:RowFormWidget
noexcept	src/Widget/RowFormWidget.hpp	/^  void AddMultiLine(const TCHAR *text=nullptr) noexcept;$/;"	m	class:RowFormWidget
noexcept	src/Widget/RowFormWidget.hpp	/^  void AddSpacer() noexcept;$/;"	m	class:RowFormWidget
noexcept	src/Widget/RowFormWidget.hpp	/^  void LoadValue(unsigned i, Angle value) noexcept;$/;"	m	class:RowFormWidget
noexcept	src/Widget/RowFormWidget.hpp	/^  void LoadValue(unsigned i, RoughTime value) noexcept;$/;"	m	class:RowFormWidget
noexcept	src/Widget/RowFormWidget.hpp	/^  void LoadValue(unsigned i, bool value) noexcept;$/;"	m	class:RowFormWidget
noexcept	src/Widget/RowFormWidget.hpp	/^  void LoadValue(unsigned i, const TCHAR *value) noexcept;$/;"	m	class:RowFormWidget
noexcept	src/Widget/RowFormWidget.hpp	/^  void LoadValue(unsigned i, double value) noexcept;$/;"	m	class:RowFormWidget
noexcept	src/Widget/RowFormWidget.hpp	/^  void LoadValue(unsigned i, double value, UnitGroup unit_group) noexcept;$/;"	m	class:RowFormWidget
noexcept	src/Widget/RowFormWidget.hpp	/^  void LoadValue(unsigned i, int value) noexcept;$/;"	m	class:RowFormWidget
noexcept	src/Widget/RowFormWidget.hpp	/^  void LoadValueEnum(unsigned i, unsigned value) noexcept;$/;"	m	class:RowFormWidget
noexcept	src/Widget/RowFormWidget.hpp	/^  void LoadValueTime(unsigned i, int value) noexcept;$/;"	m	class:RowFormWidget
noexcept	src/Widget/RowFormWidget.hpp	/^  void SetExpertRow(unsigned i) noexcept;$/;"	m	class:RowFormWidget
noexcept	src/Widget/RowFormWidget.hpp	/^  void SetMultiLineText(unsigned i, const TCHAR *text) noexcept;$/;"	m	class:RowFormWidget
noexcept	src/Widget/RowFormWidget.hpp	/^  void SetRowAvailable(unsigned i, bool available) noexcept;$/;"	m	class:RowFormWidget
noexcept	src/Widget/RowFormWidget.hpp	/^  void SetRowVisible(unsigned i, bool visible) noexcept;$/;"	m	class:RowFormWidget
noexcept	src/Widget/RowFormWidget.hpp	/^  void UpdateLayout() noexcept;$/;"	m	class:RowFormWidget
noexcept	src/Widget/TextListWidget.hpp	/^  virtual const TCHAR *GetRowText(unsigned i) const noexcept = 0;$/;"	m	class:TextListWidget
noexcept	src/Widget/TextWidget.hpp	/^  void SetColor(Color _color) noexcept;$/;"	m	class:TextWidget
noexcept	src/Widget/TextWidget.hpp	/^  void SetText(const TCHAR *text) noexcept;$/;"	m	class:TextWidget
noexcept	src/Widget/TwoWidgets.hpp	/^  int CalculateSplit(const PixelRect &rc) const noexcept;$/;"	m	class:TwoWidgets
noexcept	src/Widget/TwoWidgets.hpp	/^  std::pair<PixelRect,PixelRect> CalculateLayout(const PixelRect &rc) const noexcept;$/;"	m	class:TwoWidgets
noexcept	src/Widget/TwoWidgets.hpp	/^  void UpdateLayout() noexcept;$/;"	m	class:TwoWidgets
noexcept	src/Widget/Widget.hpp	/^                          const PixelRect &rc) noexcept = 0;$/;"	m	class:Widget
noexcept	src/Widget/Widget.hpp	/^                       const PixelRect &rc) noexcept = 0;$/;"	m	class:Widget
noexcept	src/Widget/Widget.hpp	/^  virtual PixelSize GetMaximumSize() const noexcept = 0;$/;"	m	class:Widget
noexcept	src/Widget/Widget.hpp	/^  virtual PixelSize GetMinimumSize() const noexcept = 0;$/;"	m	class:Widget
noexcept	src/Widget/Widget.hpp	/^  virtual bool Click() noexcept = 0;$/;"	m	class:Widget
noexcept	src/Widget/Widget.hpp	/^  virtual bool KeyPress(unsigned key_code) noexcept = 0;$/;"	m	class:Widget
noexcept	src/Widget/Widget.hpp	/^  virtual bool Leave() noexcept = 0;$/;"	m	class:Widget
noexcept	src/Widget/Widget.hpp	/^  virtual bool Save(bool &changed) noexcept = 0;$/;"	m	class:Widget
noexcept	src/Widget/Widget.hpp	/^  virtual bool SetFocus() noexcept = 0;$/;"	m	class:Widget
noexcept	src/Widget/Widget.hpp	/^  virtual void Hide() noexcept = 0;$/;"	m	class:Widget
noexcept	src/Widget/Widget.hpp	/^  virtual void Move(const PixelRect &rc) noexcept = 0;$/;"	m	class:Widget
noexcept	src/Widget/Widget.hpp	/^  virtual void ReClick() noexcept = 0;$/;"	m	class:Widget
noexcept	src/Widget/Widget.hpp	/^  virtual void Show(const PixelRect &rc) noexcept = 0;$/;"	m	class:Widget
noexcept	src/Widget/Widget.hpp	/^  virtual void Unprepare() noexcept = 0;$/;"	m	class:Widget
noexcept	src/Widget/Widget.hpp	/^  virtual ~Widget() noexcept = default;$/;"	m	class:Widget
noexcept	src/Widget/WindowWidget.hpp	/^  WindowWidget() noexcept;$/;"	m	class:WindowWidget
noexcept	src/Widget/WindowWidget.hpp	/^  WindowWidget(std::unique_ptr<Window> _window) noexcept;$/;"	m	class:WindowWidget
noexcept	src/Widget/WindowWidget.hpp	/^  void DeleteWindow() noexcept;$/;"	m	class:WindowWidget
noexcept	src/Widget/WindowWidget.hpp	/^  void SetWindow(std::unique_ptr<Window> &&_window) noexcept;$/;"	m	class:WindowWidget
noexcept	src/XML/DataNode.hpp	/^                                          const TCHAR *end_name) const noexcept;$/;"	m	class:ConstDataNode
noexcept	src/XML/DataNode.hpp	/^  ConstDataNode() noexcept = default;$/;"	m	class:ConstDataNode
noexcept	src/XML/DataNode.hpp	/^  RoughTime GetAttributeRoughTime(const TCHAR *name) const noexcept;$/;"	m	class:ConstDataNode
noexcept	src/XML/DataNode.hpp	/^  WritableDataNode() noexcept = default;$/;"	m	class:WritableDataNode
noexcept	src/XML/DataNode.hpp	/^  bool GetAttribute(const TCHAR *name, Angle &value) const noexcept;$/;"	m	class:ConstDataNode
noexcept	src/XML/DataNode.hpp	/^  bool GetAttribute(const TCHAR *name, bool &value) const noexcept;$/;"	m	class:ConstDataNode
noexcept	src/XML/DataNode.hpp	/^  bool GetAttribute(const TCHAR *name, double &value) const noexcept;$/;"	m	class:ConstDataNode
noexcept	src/XML/DataNode.hpp	/^  bool GetAttribute(const TCHAR *name, int &value) const noexcept;$/;"	m	class:ConstDataNode
noexcept	src/XML/DataNode.hpp	/^  bool GetAttribute(const TCHAR *name, unsigned &value) const noexcept;$/;"	m	class:ConstDataNode
noexcept	src/XML/DataNode.hpp	/^  virtual List ListChildren() const noexcept = 0;$/;"	m	class:ConstDataNode
noexcept	src/XML/DataNode.hpp	/^  virtual List ListChildrenNamed(const TCHAR *name) const noexcept = 0;$/;"	m	class:ConstDataNode
noexcept	src/XML/DataNode.hpp	/^  virtual const TCHAR *GetAttribute(const TCHAR *name) const noexcept = 0;$/;"	m	class:ConstDataNode
noexcept	src/XML/DataNode.hpp	/^  virtual const TCHAR *GetName() const noexcept = 0;$/;"	m	class:ConstDataNode
noexcept	src/XML/DataNode.hpp	/^  virtual std::unique_ptr<ConstDataNode> GetChildNamed(const TCHAR *name) const noexcept = 0;$/;"	m	class:ConstDataNode
noexcept	src/XML/DataNode.hpp	/^  virtual std::unique_ptr<WritableDataNode> AppendChild(const TCHAR *name) noexcept = 0;$/;"	m	class:WritableDataNode
noexcept	src/XML/DataNode.hpp	/^  virtual void SetAttribute(const TCHAR *name, const TCHAR *value) noexcept = 0;$/;"	m	class:WritableDataNode
noexcept	src/XML/DataNode.hpp	/^  virtual ~ConstDataNode() noexcept;$/;"	m	class:ConstDataNode
noexcept	src/XML/DataNode.hpp	/^  virtual ~WritableDataNode() noexcept;$/;"	m	class:WritableDataNode
noexcept	src/XML/DataNode.hpp	/^  void SetAttribute(const TCHAR *name, Angle value) noexcept;$/;"	m	class:WritableDataNode
noexcept	src/XML/DataNode.hpp	/^  void SetAttribute(const TCHAR *name, RoughTime value) noexcept;$/;"	m	class:WritableDataNode
noexcept	src/XML/DataNode.hpp	/^  void SetAttribute(const TCHAR *name, bool value) noexcept;$/;"	m	class:WritableDataNode
noexcept	src/XML/DataNode.hpp	/^  void SetAttribute(const TCHAR *name, double value) noexcept;$/;"	m	class:WritableDataNode
noexcept	src/XML/DataNode.hpp	/^  void SetAttribute(const TCHAR *name, int value) noexcept;$/;"	m	class:WritableDataNode
noexcept	src/XML/DataNode.hpp	/^  void SetAttribute(const TCHAR *name, unsigned value) noexcept;$/;"	m	class:WritableDataNode
noexcept	src/event/CoarseTimerEvent.hxx	/^	void Schedule(Event::Duration d) noexcept;$/;"	m	class:final
noexcept	src/event/CoarseTimerEvent.hxx	/^	void ScheduleEarlier(Event::Duration d) noexcept;$/;"	m	class:final
noexcept	src/event/DeferEvent.hxx	/^	void Schedule() noexcept;$/;"	m	class:final
noexcept	src/event/DeferEvent.hxx	/^	void ScheduleIdle() noexcept;$/;"	m	class:final
noexcept	src/event/FineTimerEvent.hxx	/^	void Schedule(Event::Duration d) noexcept;$/;"	m	class:final
noexcept	src/event/FineTimerEvent.hxx	/^	void ScheduleEarlier(Event::Duration d) noexcept;$/;"	m	class:final
noexcept	src/event/InjectEvent.hxx	/^	void Cancel() noexcept;$/;"	m	class:final
noexcept	src/event/InjectEvent.hxx	/^	void Schedule() noexcept;$/;"	m	class:final
noexcept	src/event/Loop.hxx	/^	Event::Duration HandleTimers() noexcept;$/;"	m	class:final
noexcept	src/event/Loop.hxx	/^	Uring::Queue *GetUring() noexcept;$/;"	m	class:final
noexcept	src/event/Loop.hxx	/^	bool AbandonFD(SocketEvent &event) noexcept;$/;"	m	class:final
noexcept	src/event/Loop.hxx	/^	bool AddFD(int fd, unsigned events, SocketEvent &event) noexcept;$/;"	m	class:final
noexcept	src/event/Loop.hxx	/^	bool ModifyFD(int fd, unsigned events, SocketEvent &event) noexcept;$/;"	m	class:final
noexcept	src/event/Loop.hxx	/^	bool RemoveFD(int fd, SocketEvent &event) noexcept;$/;"	m	class:final
noexcept	src/event/Loop.hxx	/^	bool RunOneIdle() noexcept;$/;"	m	class:final
noexcept	src/event/Loop.hxx	/^	bool Wait(Event::Duration timeout) noexcept;$/;"	m	class:final
noexcept	src/event/Loop.hxx	/^	void AddDefer(DeferEvent &d) noexcept;$/;"	m	class:final
noexcept	src/event/Loop.hxx	/^	void AddIdle(DeferEvent &e) noexcept;$/;"	m	class:final
noexcept	src/event/Loop.hxx	/^	void AddInject(InjectEvent &d) noexcept;$/;"	m	class:final
noexcept	src/event/Loop.hxx	/^	void Break() noexcept;$/;"	m	class:final
noexcept	src/event/Loop.hxx	/^	void HandleInject() noexcept;$/;"	m	class:final
noexcept	src/event/Loop.hxx	/^	void Insert(CoarseTimerEvent &t) noexcept;$/;"	m	class:final
noexcept	src/event/Loop.hxx	/^	void Insert(FineTimerEvent &t) noexcept;$/;"	m	class:final
noexcept	src/event/Loop.hxx	/^	void OnSocketReady(unsigned flags) noexcept;$/;"	m	class:final
noexcept	src/event/Loop.hxx	/^	void RemoveInject(InjectEvent &d) noexcept;$/;"	m	class:final
noexcept	src/event/Loop.hxx	/^	void Run() noexcept;$/;"	m	class:final
noexcept	src/event/Loop.hxx	/^	void RunDeferred() noexcept;$/;"	m	class:final
noexcept	src/event/Loop.hxx	/^	~EventLoop() noexcept;$/;"	m	class:final
noexcept	src/event/PollBackend.hxx	/^		constexpr Item(std::size_t _index, void *_obj) noexcept$/;"	m	struct:PollBackend::Item
noexcept	src/event/PollBackend.hxx	/^	PollBackend() noexcept;$/;"	m	class:PollBackend
noexcept	src/event/PollBackend.hxx	/^	PollResultGeneric ReadEvents(int timeout_ms) noexcept;$/;"	m	class:PollBackend
noexcept	src/event/PollBackend.hxx	/^	bool Add(int fd, unsigned events, void *obj) noexcept;$/;"	m	class:PollBackend
noexcept	src/event/PollBackend.hxx	/^	bool Modify(int fd, unsigned events, void *obj) noexcept;$/;"	m	class:PollBackend
noexcept	src/event/PollBackend.hxx	/^	bool Remove(int fd) noexcept;$/;"	m	class:PollBackend
noexcept	src/event/PollBackend.hxx	/^	~PollBackend() noexcept;$/;"	m	class:PollBackend
noexcept	src/event/PollResultGeneric.hxx	/^		constexpr Item(unsigned _events, void *_obj) noexcept$/;"	m	struct:PollResultGeneric::Item
noexcept	src/event/SignalMonitor.cxx	/^	void OnSocketReady(unsigned flags) noexcept;$/;"	m	class:final	file:
noexcept	src/event/SocketEvent.hxx	/^	bool Schedule(unsigned flags) noexcept;$/;"	m	class:final
noexcept	src/event/SocketEvent.hxx	/^	void Abandon() noexcept;$/;"	m	class:final
noexcept	src/event/SocketEvent.hxx	/^	void Close() noexcept;$/;"	m	class:final
noexcept	src/event/SocketEvent.hxx	/^	void Dispatch() noexcept;$/;"	m	class:final
noexcept	src/event/SocketEvent.hxx	/^	void Open(SocketDescriptor fd) noexcept;$/;"	m	class:final
noexcept	src/event/TimerList.hxx	/^					  const FineTimerEvent &b) const noexcept;$/;"	m	struct:final::Compare
noexcept	src/event/TimerList.hxx	/^	Event::Duration Run(Event::TimePoint now) noexcept;$/;"	m	class:final
noexcept	src/event/TimerList.hxx	/^	void Insert(FineTimerEvent &t) noexcept;$/;"	m	class:final
noexcept	src/event/TimerList.hxx	/^	~TimerList() noexcept;$/;"	m	class:final
noexcept	src/event/TimerWheel.hxx	/^				    Event::TimePoint bucket_start_time) const noexcept;$/;"	m	class:final
noexcept	src/event/TimerWheel.hxx	/^		    Event::TimePoint now) noexcept;$/;"	m	class:final
noexcept	src/event/TimerWheel.hxx	/^	Event::Duration GetSleep(Event::TimePoint now) const noexcept;$/;"	m	class:final
noexcept	src/event/TimerWheel.hxx	/^	Event::Duration Run(Event::TimePoint now) noexcept;$/;"	m	class:final
noexcept	src/event/TimerWheel.hxx	/^	TimerWheel() noexcept;$/;"	m	class:final
noexcept	src/event/TimerWheel.hxx	/^	static void Run(List &list, Event::TimePoint now) noexcept;$/;"	m	class:final
noexcept	src/event/TimerWheel.hxx	/^	~TimerWheel() noexcept;$/;"	m	class:final
noexcept	src/event/WinSelectBackend.hxx	/^		       int event_id) const noexcept;$/;"	m	class:WinSelectBackend
noexcept	src/event/WinSelectBackend.hxx	/^		    int event_id) noexcept;$/;"	m	class:WinSelectBackend
noexcept	src/event/WinSelectBackend.hxx	/^		explicit constexpr Item(void *_obj) noexcept$/;"	m	struct:WinSelectBackend::Item
noexcept	src/event/WinSelectBackend.hxx	/^	PollResultGeneric ReadEvents(int timeout_ms) noexcept;$/;"	m	class:WinSelectBackend
noexcept	src/event/WinSelectBackend.hxx	/^	WinSelectBackend() noexcept;$/;"	m	class:WinSelectBackend
noexcept	src/event/WinSelectBackend.hxx	/^	bool Add(SOCKET fd, unsigned events, void *obj) noexcept;$/;"	m	class:WinSelectBackend
noexcept	src/event/WinSelectBackend.hxx	/^	bool Modify(SOCKET fd, unsigned events, void *obj) noexcept;$/;"	m	class:WinSelectBackend
noexcept	src/event/WinSelectBackend.hxx	/^	bool Remove(SOCKET fd) noexcept;$/;"	m	class:WinSelectBackend
noexcept	src/event/WinSelectBackend.hxx	/^	void ApplyReady(const SocketSet &src, unsigned events) noexcept;$/;"	m	class:WinSelectBackend
noexcept	src/event/WinSelectBackend.hxx	/^	~WinSelectBackend() noexcept;$/;"	m	class:WinSelectBackend
noexcept	src/event/net/ConnectSocket.hxx	/^			   Event::Duration timeout=Event::Duration(-1)) noexcept;$/;"	m	class:final
noexcept	src/event/net/ConnectSocket.hxx	/^		      ConnectSocketHandler &_handler) noexcept;$/;"	m	class:final
noexcept	src/event/net/ConnectSocket.hxx	/^		     Event::Duration timeout) noexcept;$/;"	m	class:final
noexcept	src/event/net/ConnectSocket.hxx	/^	virtual void OnSocketConnectError(std::exception_ptr ep) noexcept = 0;$/;"	m	class:ConnectSocketHandler
noexcept	src/event/net/ConnectSocket.hxx	/^	virtual void OnSocketConnectSuccess(UniqueSocketDescriptor &&fd) noexcept = 0;$/;"	m	class:ConnectSocketHandler
noexcept	src/event/net/ConnectSocket.hxx	/^	virtual void OnSocketConnectTimeout() noexcept;$/;"	m	class:ConnectSocketHandler
noexcept	src/event/net/ConnectSocket.hxx	/^	void OnEvent(unsigned events) noexcept;$/;"	m	class:final
noexcept	src/event/net/ConnectSocket.hxx	/^	void OnTimeout() noexcept;$/;"	m	class:final
noexcept	src/event/net/ConnectSocket.hxx	/^	~ConnectSocket() noexcept;$/;"	m	class:final
noexcept	src/event/net/cares/Channel.cxx	/^	void HostCallback(int status, struct hostent *he) noexcept;$/;"	m	class:Cares::final	file:
noexcept	src/event/net/cares/Channel.hxx	/^		    CancellablePointer &cancel_ptr) noexcept;$/;"	m	class:Cares::Channel
noexcept	src/event/net/cares/Channel.hxx	/^	void DeferredProcess() noexcept;$/;"	m	class:Cares::Channel
noexcept	src/event/net/cares/Channel.hxx	/^	void OnSocket(SocketDescriptor fd, unsigned events) noexcept;$/;"	m	class:Cares::Channel
noexcept	src/event/net/cares/Channel.hxx	/^	void OnTimeout() noexcept;$/;"	m	class:Cares::Channel
noexcept	src/event/net/cares/Channel.hxx	/^	void UpdateSockets() noexcept;$/;"	m	class:Cares::Channel
noexcept	src/event/net/cares/Channel.hxx	/^	~Channel() noexcept;$/;"	m	class:Cares::Channel
noexcept	src/event/net/cares/CoLookup.hxx	/^	CoLookup(Channel &channel, const char *name) noexcept;$/;"	m	class:Cares::final
noexcept	src/event/net/cares/CoLookup.hxx	/^	CoLookup(Channel &channel, const char *name, int family) noexcept;$/;"	m	class:Cares::final
noexcept	src/event/net/cares/Error.hxx	/^	Error(int _code, const char *msg) noexcept;$/;"	m	class:Cares::Error
noexcept	src/event/net/cares/Handler.hxx	/^	virtual void OnCaresAddress(SocketAddress address) noexcept = 0;$/;"	m	class:Cares::Handler
noexcept	src/event/net/cares/Handler.hxx	/^	virtual void OnCaresError(std::exception_ptr e) noexcept = 0;$/;"	m	class:Cares::Handler
noexcept	src/event/net/cares/Handler.hxx	/^	virtual void OnCaresSuccess() noexcept = 0;$/;"	m	class:Cares::Handler
noexcept	src/event/net/cares/Init.hxx	/^	~Init() noexcept;$/;"	m	class:Cares::Init
noexcept	src/event/net/cares/SimpleResolver.hxx	/^		       const char *name, unsigned _port=0) noexcept;$/;"	m	class:Cares::final
noexcept	src/event/net/cares/SimpleResolver.hxx	/^	virtual void OnResolverError(std::exception_ptr error) noexcept = 0;$/;"	m	class:Cares::SimpleHandler
noexcept	src/event/net/cares/SimpleResolver.hxx	/^	virtual void OnResolverSuccess(std::forward_list<AllocatedSocketAddress> addresses) noexcept = 0;$/;"	m	class:Cares::SimpleHandler
noexcept	src/io/BufferedOutputStream.hxx	/^	bool AppendToBuffer(const void *data, size_t size) noexcept;$/;"	m	class:BufferedOutputStream
noexcept	src/io/BufferedReader.hxx	/^	size_t ReadFromBuffer(WritableBuffer<void> dest) noexcept;$/;"	m	class:BufferedReader
noexcept	src/io/DataHandler.hpp	/^  virtual bool DataReceived(const void *data, size_t length) noexcept = 0;$/;"	m	class:DataHandler
noexcept	src/io/FileDescriptor.hxx	/^				       FileDescriptor &w) noexcept;$/;"	m	class:FileDescriptor
noexcept	src/io/FileDescriptor.hxx	/^			       int flags) noexcept;$/;"	m	class:FileDescriptor
noexcept	src/io/FileDescriptor.hxx	/^		  int flags, mode_t mode=0666) noexcept;$/;"	m	class:FileDescriptor
noexcept	src/io/FileDescriptor.hxx	/^	bool CheckDuplicate(FileDescriptor new_fd) noexcept;$/;"	m	class:FileDescriptor
noexcept	src/io/FileDescriptor.hxx	/^	bool CreateEventFD(unsigned initval=0) noexcept;$/;"	m	class:FileDescriptor
noexcept	src/io/FileDescriptor.hxx	/^	bool CreateInotify() noexcept;$/;"	m	class:FileDescriptor
noexcept	src/io/FileDescriptor.hxx	/^	bool CreateSignalFD(const sigset_t *mask) noexcept;$/;"	m	class:FileDescriptor
noexcept	src/io/FileDescriptor.hxx	/^	bool IsPipe() const noexcept;$/;"	m	class:FileDescriptor
noexcept	src/io/FileDescriptor.hxx	/^	bool IsReadyForWriting() const noexcept;$/;"	m	class:FileDescriptor
noexcept	src/io/FileDescriptor.hxx	/^	bool IsRegularFile() const noexcept;$/;"	m	class:FileDescriptor
noexcept	src/io/FileDescriptor.hxx	/^	bool IsSocket() const noexcept;$/;"	m	class:FileDescriptor
noexcept	src/io/FileDescriptor.hxx	/^	bool IsValid() const noexcept;$/;"	m	class:FileDescriptor
noexcept	src/io/FileDescriptor.hxx	/^	bool Open(const char *pathname, int flags, mode_t mode=0666) noexcept;$/;"	m	class:FileDescriptor
noexcept	src/io/FileDescriptor.hxx	/^	bool Open(const wchar_t *pathname, int flags, mode_t mode=0666) noexcept;$/;"	m	class:FileDescriptor
noexcept	src/io/FileDescriptor.hxx	/^	bool OpenNonBlocking(const char *pathname) noexcept;$/;"	m	class:FileDescriptor
noexcept	src/io/FileDescriptor.hxx	/^	bool OpenReadOnly(const char *pathname) noexcept;$/;"	m	class:FileDescriptor
noexcept	src/io/FileDescriptor.hxx	/^	bool Rewind() noexcept;$/;"	m	class:FileDescriptor
noexcept	src/io/FileDescriptor.hxx	/^	int Poll(short events, int timeout) const noexcept;$/;"	m	class:FileDescriptor
noexcept	src/io/FileDescriptor.hxx	/^	int WaitReadable(int timeout) const noexcept;$/;"	m	class:FileDescriptor
noexcept	src/io/FileDescriptor.hxx	/^	int WaitWritable(int timeout) const noexcept;$/;"	m	class:FileDescriptor
noexcept	src/io/FileDescriptor.hxx	/^	off_t GetSize() const noexcept;$/;"	m	class:FileDescriptor
noexcept	src/io/FileDescriptor.hxx	/^	static bool CreatePipe(FileDescriptor &r, FileDescriptor &w) noexcept;$/;"	m	class:FileDescriptor
noexcept	src/io/FileDescriptor.hxx	/^	void DisableCloseOnExec() noexcept;$/;"	m	class:FileDescriptor
noexcept	src/io/FileDescriptor.hxx	/^	void EnableCloseOnExec() noexcept;$/;"	m	class:FileDescriptor
noexcept	src/io/FileDescriptor.hxx	/^	void SetBlocking() noexcept;$/;"	m	class:FileDescriptor
noexcept	src/io/FileDescriptor.hxx	/^	void SetNonBlocking() noexcept;$/;"	m	class:FileDescriptor
noexcept	src/io/FileOutputStream.hxx	/^	uint64_t Tell() const noexcept;$/;"	m	class:final
noexcept	src/io/FileOutputStream.hxx	/^	void Cancel() noexcept;$/;"	m	class:final
noexcept	src/io/FileReader.hxx	/^	void Close() noexcept;$/;"	m	class:final
noexcept	src/io/Reader.hxx	/^	virtual ~Reader() noexcept = default;$/;"	m	class:Reader
noexcept	src/io/UniqueFileDescriptor.hxx	/^	static bool CreatePipe(FileDescriptor &r, FileDescriptor &w) noexcept;$/;"	m	class:UniqueFileDescriptor
noexcept	src/java/Exception.hxx	/^	explicit Exception(JNIEnv *env, jthrowable e) noexcept;$/;"	m	class:Java::Exception
noexcept	src/java/File.hxx	/^	static void Initialise(JNIEnv *env) noexcept;$/;"	m	class:Java::File
noexcept	src/java/Global.hxx	/^void Init(JNIEnv *env) noexcept;$/;"	m	namespace:Java
noexcept	src/java/Path.hxx	/^ToPath(JNIEnv *env, jstring s) noexcept;$/;"	m	namespace:Java
noexcept	src/java/Ref.hxx	/^	LocalRef() noexcept = default;$/;"	m	class:Java::LocalRef
noexcept	src/java/String.hxx	/^			    char *buffer, size_t max_size) noexcept;$/;"	m	class:Java::String
noexcept	src/java/String.hxx	/^	String(JNIEnv *_env, StringView _value) noexcept;$/;"	m	class:Java::String
noexcept	src/java/String.hxx	/^	static std::string ToString(JNIEnv *env, jstring s) noexcept;$/;"	m	class:Java::String
noexcept	src/lua/Error.hxx	/^Push(lua_State *L, std::exception_ptr e) noexcept;$/;"	m	namespace:Lua
noexcept	src/lua/Util.hxx	/^	explicit constexpr LightUserData(void *_value) noexcept$/;"	m	struct:Lua::StackIndex::LightUserData
noexcept	src/lua/Util.hxx	/^	explicit constexpr StackIndex(int _idx) noexcept$/;"	m	struct:Lua::StackIndex
noexcept	src/net/AllocatedSocketAddress.hxx	/^	AllocatedSocketAddress &operator=(SocketAddress src) noexcept;$/;"	m	class:AllocatedSocketAddress
noexcept	src/net/AllocatedSocketAddress.hxx	/^	StringView GetLocalRaw() const noexcept;$/;"	m	class:AllocatedSocketAddress
noexcept	src/net/AllocatedSocketAddress.hxx	/^	bool SetPort(unsigned port) noexcept;$/;"	m	class:AllocatedSocketAddress
noexcept	src/net/AllocatedSocketAddress.hxx	/^	void SetLocal(const char *path) noexcept;$/;"	m	class:AllocatedSocketAddress
noexcept	src/net/AllocatedSocketAddress.hxx	/^	void SetSize(size_type new_size) noexcept;$/;"	m	class:AllocatedSocketAddress
noexcept	src/net/IPv4Address.hxx	/^	const char *ToString(char *buffer, size_t buffer_size) const noexcept;$/;"	m	class:IPv4Address
noexcept	src/net/IPv4Address.hxx	/^	explicit IPv4Address(SocketAddress src) noexcept;$/;"	m	class:IPv4Address
noexcept	src/net/IPv4Address.hxx	/^	static IPv4Address GetDeviceAddress(const char *device) noexcept;$/;"	m	class:IPv4Address
noexcept	src/net/IPv6Address.hxx	/^	IPv4Address UnmapV4() const noexcept;$/;"	m	class:IPv6Address
noexcept	src/net/IPv6Address.hxx	/^	bool IsAny() const noexcept;$/;"	m	class:IPv6Address
noexcept	src/net/IPv6Address.hxx	/^	explicit IPv6Address(SocketAddress src) noexcept;$/;"	m	class:IPv6Address
noexcept	src/net/SocketAddress.hxx	/^	ConstBuffer<void> GetSteadyPart() const noexcept;$/;"	m	class:SocketAddress
noexcept	src/net/SocketAddress.hxx	/^	IPv4Address UnmapV4() const noexcept;$/;"	m	class:SocketAddress
noexcept	src/net/SocketAddress.hxx	/^	StringView GetLocalRaw() const noexcept;$/;"	m	class:SocketAddress
noexcept	src/net/SocketAddress.hxx	/^	bool IsV4Mapped() const noexcept;$/;"	m	class:SocketAddress
noexcept	src/net/SocketAddress.hxx	/^	bool IsV6Any() const noexcept;$/;"	m	class:SocketAddress
noexcept	src/net/SocketAddress.hxx	/^	bool operator==(const SocketAddress other) const noexcept;$/;"	m	class:SocketAddress
noexcept	src/net/SocketAddress.hxx	/^	const char *GetLocalPath() const noexcept;$/;"	m	class:SocketAddress
noexcept	src/net/SocketAddress.hxx	/^	unsigned GetPort() const noexcept;$/;"	m	class:SocketAddress
noexcept	src/net/SocketDescriptor.hxx	/^					     SocketDescriptor &b) noexcept;$/;"	m	class:SocketDescriptor
noexcept	src/net/SocketDescriptor.hxx	/^				     SocketDescriptor &b) noexcept;$/;"	m	class:SocketDescriptor
noexcept	src/net/SocketDescriptor.hxx	/^			      void *value, std::size_t size) const noexcept;$/;"	m	class:SocketDescriptor
noexcept	src/net/SocketDescriptor.hxx	/^		       const void *value, std::size_t size) noexcept;$/;"	m	class:SocketDescriptor
noexcept	src/net/SocketDescriptor.hxx	/^		      SocketAddress address) noexcept;$/;"	m	class:SocketDescriptor
noexcept	src/net/SocketDescriptor.hxx	/^		     StaticSocketAddress &address) noexcept;$/;"	m	class:SocketDescriptor
noexcept	src/net/SocketDescriptor.hxx	/^	SocketDescriptor Accept() noexcept;$/;"	m	class:SocketDescriptor
noexcept	src/net/SocketDescriptor.hxx	/^	SocketDescriptor AcceptNonBlock() const noexcept;$/;"	m	class:SocketDescriptor
noexcept	src/net/SocketDescriptor.hxx	/^	SocketDescriptor AcceptNonBlock(StaticSocketAddress &address) const noexcept;$/;"	m	class:SocketDescriptor
noexcept	src/net/SocketDescriptor.hxx	/^	StaticSocketAddress GetLocalAddress() const noexcept;$/;"	m	class:SocketDescriptor
noexcept	src/net/SocketDescriptor.hxx	/^	StaticSocketAddress GetPeerAddress() const noexcept;$/;"	m	class:SocketDescriptor
noexcept	src/net/SocketDescriptor.hxx	/^	bool AddMembership(SocketAddress address) noexcept;$/;"	m	class:SocketDescriptor
noexcept	src/net/SocketDescriptor.hxx	/^	bool AddMembership(const IPv4Address &address) noexcept;$/;"	m	class:SocketDescriptor
noexcept	src/net/SocketDescriptor.hxx	/^	bool AddMembership(const IPv6Address &address) noexcept;$/;"	m	class:SocketDescriptor
noexcept	src/net/SocketDescriptor.hxx	/^	bool AutoBind() noexcept;$/;"	m	class:SocketDescriptor
noexcept	src/net/SocketDescriptor.hxx	/^	bool Bind(SocketAddress address) noexcept;$/;"	m	class:SocketDescriptor
noexcept	src/net/SocketDescriptor.hxx	/^	bool Connect(SocketAddress address) noexcept;$/;"	m	class:SocketDescriptor
noexcept	src/net/SocketDescriptor.hxx	/^	bool Create(int domain, int type, int protocol) noexcept;$/;"	m	class:SocketDescriptor
noexcept	src/net/SocketDescriptor.hxx	/^	bool CreateNonBlock(int domain, int type, int protocol) noexcept;$/;"	m	class:SocketDescriptor
noexcept	src/net/SocketDescriptor.hxx	/^	bool IsStream() const noexcept;$/;"	m	class:SocketDescriptor
noexcept	src/net/SocketDescriptor.hxx	/^	bool Listen(int backlog) noexcept;$/;"	m	class:SocketDescriptor
noexcept	src/net/SocketDescriptor.hxx	/^	bool SetBindToDevice(const char *name) noexcept;$/;"	m	class:SocketDescriptor
noexcept	src/net/SocketDescriptor.hxx	/^	bool SetCork(bool value=true) noexcept;$/;"	m	class:SocketDescriptor
noexcept	src/net/SocketDescriptor.hxx	/^	bool SetFreeBind(bool value=true) noexcept;$/;"	m	class:SocketDescriptor
noexcept	src/net/SocketDescriptor.hxx	/^	bool SetKeepAlive(bool value=true) noexcept;$/;"	m	class:SocketDescriptor
noexcept	src/net/SocketDescriptor.hxx	/^	bool SetNoDelay(bool value=true) noexcept;$/;"	m	class:SocketDescriptor
noexcept	src/net/SocketDescriptor.hxx	/^	bool SetReuseAddress(bool value=true) noexcept;$/;"	m	class:SocketDescriptor
noexcept	src/net/SocketDescriptor.hxx	/^	bool SetReusePort(bool value=true) noexcept;$/;"	m	class:SocketDescriptor
noexcept	src/net/SocketDescriptor.hxx	/^	bool SetTcpDeferAccept(const int &seconds) noexcept;$/;"	m	class:SocketDescriptor
noexcept	src/net/SocketDescriptor.hxx	/^	bool SetTcpFastOpen(int qlen=16) noexcept;$/;"	m	class:SocketDescriptor
noexcept	src/net/SocketDescriptor.hxx	/^	bool SetTcpUserTimeout(const unsigned &milliseconds) noexcept;$/;"	m	class:SocketDescriptor
noexcept	src/net/SocketDescriptor.hxx	/^	bool SetV6Only(bool value) noexcept;$/;"	m	class:SocketDescriptor
noexcept	src/net/SocketDescriptor.hxx	/^	int GetError() noexcept;$/;"	m	class:SocketDescriptor
noexcept	src/net/SocketDescriptor.hxx	/^	int GetType() const noexcept;$/;"	m	class:SocketDescriptor
noexcept	src/net/SocketDescriptor.hxx	/^	int WaitReadable(int timeout_ms) const noexcept;$/;"	m	class:SocketDescriptor
noexcept	src/net/SocketDescriptor.hxx	/^	int WaitWritable(int timeout_ms) const noexcept;$/;"	m	class:SocketDescriptor
noexcept	src/net/SocketDescriptor.hxx	/^	ssize_t Read(void *buffer, std::size_t length) noexcept;$/;"	m	class:SocketDescriptor
noexcept	src/net/SocketDescriptor.hxx	/^	ssize_t Write(const void *buffer, std::size_t length) noexcept;$/;"	m	class:SocketDescriptor
noexcept	src/net/SocketDescriptor.hxx	/^	struct ucred GetPeerCredentials() const noexcept;$/;"	m	class:SocketDescriptor
noexcept	src/net/SocketDescriptor.hxx	/^	void Shutdown() noexcept;$/;"	m	class:SocketDescriptor
noexcept	src/net/SocketDescriptor.hxx	/^	void ShutdownRead() noexcept;$/;"	m	class:SocketDescriptor
noexcept	src/net/SocketDescriptor.hxx	/^	void ShutdownWrite() noexcept;$/;"	m	class:SocketDescriptor
noexcept	src/net/SocketError.hxx	/^	explicit SocketErrorMessage(socket_error_t code=GetSocketError()) noexcept;$/;"	m	class:SocketErrorMessage
noexcept	src/net/StaticSocketAddress.hxx	/^	StaticSocketAddress &operator=(SocketAddress other) noexcept;$/;"	m	class:StaticSocketAddress
noexcept	src/net/StaticSocketAddress.hxx	/^	StringView GetLocalRaw() const noexcept;$/;"	m	class:StaticSocketAddress
noexcept	src/net/StaticSocketAddress.hxx	/^	bool SetPort(unsigned port) noexcept;$/;"	m	class:StaticSocketAddress
noexcept	src/net/http/DownloadManager.cpp	/^    Item(Item &&other) noexcept = default;$/;"	m	struct:final::Item	file:
noexcept	src/net/http/DownloadManager.cpp	/^    Item(const char *_uri, Path _path_relative) noexcept$/;"	m	struct:final::Item	file:
noexcept	src/net/http/DownloadManager.cpp	/^  void FailQueue() noexcept;$/;"	m	class:final	file:
noexcept	src/net/http/DownloadManager.cpp	/^  void ProcessQueue(CurlGlobal &curl) noexcept;$/;"	m	class:final	file:
noexcept	src/net/http/DownloadManager.hpp	/^                               int64_t size, int64_t position) noexcept = 0;$/;"	m	class:Net::DownloadListener
noexcept	src/net/http/DownloadManager.hpp	/^                               std::exception_ptr error) noexcept = 0;$/;"	m	class:Net::DownloadListener
noexcept	src/net/http/DownloadManager.hpp	/^  virtual void OnDownloadComplete(Path path_relative) noexcept = 0;$/;"	m	class:Net::DownloadListener
noexcept	src/net/http/DownloadManager.hpp	/^bool Initialise() noexcept;$/;"	m	namespace:Net::DownloadManager
noexcept	src/net/http/DownloadManager.hpp	/^bool IsAvailable() noexcept;$/;"	m	namespace:Net::DownloadManager
noexcept	src/net/http/DownloadManager.hpp	/^void AddListener(DownloadListener &listener) noexcept;$/;"	m	namespace:Net::DownloadManager
noexcept	src/net/http/DownloadManager.hpp	/^void BeginDeinitialise() noexcept;$/;"	m	namespace:Net::DownloadManager
noexcept	src/net/http/DownloadManager.hpp	/^void Cancel(Path relative_path) noexcept;$/;"	m	namespace:Net::DownloadManager
noexcept	src/net/http/DownloadManager.hpp	/^void Deinitialise() noexcept;$/;"	m	namespace:Net::DownloadManager
noexcept	src/net/http/DownloadManager.hpp	/^void Enqueue(const char *uri, Path relative_path) noexcept;$/;"	m	namespace:Net::DownloadManager
noexcept	src/net/http/DownloadManager.hpp	/^void Enumerate(DownloadListener &listener) noexcept;$/;"	m	namespace:Net::DownloadManager
noexcept	src/net/http/DownloadManager.hpp	/^void RemoveListener(DownloadListener &listener) noexcept;$/;"	m	namespace:Net::DownloadManager
noexcept	src/net/http/Global.cxx	/^				  void *userp, void *socketp) noexcept;$/;"	m	class:final	file:
noexcept	src/net/http/Global.cxx	/^	void OnSocketReady(unsigned events) noexcept;$/;"	m	class:final	file:
noexcept	src/net/http/Global.hxx	/^				 void *userp) noexcept;$/;"	m	class:final
noexcept	src/net/http/Global.hxx	/^	void OnTimeout() noexcept;$/;"	m	class:final
noexcept	src/net/http/Global.hxx	/^	void ReadInfo() noexcept;$/;"	m	class:final
noexcept	src/net/http/Global.hxx	/^	void Remove(CurlRequest &r) noexcept;$/;"	m	class:final
noexcept	src/net/http/Global.hxx	/^	void SocketAction(curl_socket_t fd, int ev_bitmask) noexcept;$/;"	m	class:final
noexcept	src/net/http/Global.hxx	/^	void UpdateTimeout(long timeout_ms) noexcept;$/;"	m	class:final
noexcept	src/net/http/Handler.hpp	/^  virtual bool ResponseReceived(int64_t content_length) noexcept = 0;$/;"	m	class:Net::ResponseHandler
noexcept	src/net/http/Handler.hxx	/^	virtual void OnError(std::exception_ptr e) noexcept = 0;$/;"	m	class:CurlResponseHandler
noexcept	src/net/http/Request.hxx	/^				      void *stream) noexcept;$/;"	m	class:final
noexcept	src/net/http/Request.hxx	/^				    void *stream) noexcept;$/;"	m	class:final
noexcept	src/net/http/Request.hxx	/^	size_t DataReceived(const void *ptr, size_t size) noexcept;$/;"	m	class:final
noexcept	src/net/http/Request.hxx	/^	void Done(CURLcode result) noexcept;$/;"	m	class:final
noexcept	src/net/http/Request.hxx	/^	void FreeEasy() noexcept;$/;"	m	class:final
noexcept	src/net/http/Request.hxx	/^	void HeaderFunction(StringView s) noexcept;$/;"	m	class:final
noexcept	src/net/http/Request.hxx	/^	void Resume() noexcept;$/;"	m	class:final
noexcept	src/net/http/Request.hxx	/^	void Stop() noexcept;$/;"	m	class:final
noexcept	src/net/http/Request.hxx	/^	~CurlRequest() noexcept;$/;"	m	class:final
noexcept	src/net/http/Slist.hxx	/^	CurlSlist() noexcept = default;$/;"	m	class:CurlSlist
noexcept	src/system/EventFD.hxx	/^	bool Read() noexcept;$/;"	m	class:EventFD
noexcept	src/system/EventFD.hxx	/^	void Write() noexcept;$/;"	m	class:EventFD
noexcept	src/system/EventPipe.hxx	/^	bool Read() noexcept;$/;"	m	class:EventPipe
noexcept	src/system/EventPipe.hxx	/^	void Write() noexcept;$/;"	m	class:EventPipe
noexcept	src/system/EventPipe.hxx	/^	~EventPipe() noexcept;$/;"	m	class:EventPipe
noexcept	src/system/SignalFD.hxx	/^	int Read() noexcept;$/;"	m	class:SignalFD
noexcept	src/thread/Id.hxx	/^	ThreadId() noexcept = default;$/;"	m	class:ThreadId
noexcept	src/thread/StandbyThread.hpp	/^  virtual void Tick() noexcept = 0;$/;"	m	class:StandbyThread
noexcept	src/thread/StandbyThread.hpp	/^  void WaitDone(std::unique_lock<Mutex> &lock) noexcept;$/;"	m	class:StandbyThread
noexcept	src/thread/SuspensibleThread.hpp	/^                       std::chrono::steady_clock::duration timeout) noexcept;$/;"	m	class:SuspensibleThread
noexcept	src/thread/SuspensibleThread.hpp	/^  bool CheckStoppedOrSuspended() noexcept;$/;"	m	class:SuspensibleThread
noexcept	src/thread/SuspensibleThread.hpp	/^  bool IsCommandPending() noexcept;$/;"	m	class:SuspensibleThread
noexcept	src/thread/SuspensibleThread.hpp	/^  bool Start(bool suspended=false) noexcept;$/;"	m	class:SuspensibleThread
noexcept	src/thread/SuspensibleThread.hpp	/^  bool WaitForStopped(std::chrono::steady_clock::duration timeout) noexcept;$/;"	m	class:SuspensibleThread
noexcept	src/thread/SuspensibleThread.hpp	/^  bool _CheckStoppedOrSuspended(std::unique_lock<Mutex> &lock) noexcept;$/;"	m	class:SuspensibleThread
noexcept	src/thread/SuspensibleThread.hpp	/^  bool _IsCommandPending() const noexcept;$/;"	m	class:SuspensibleThread
noexcept	src/thread/SuspensibleThread.hpp	/^  void BeginStop() noexcept;$/;"	m	class:SuspensibleThread
noexcept	src/thread/SuspensibleThread.hpp	/^  void BeginSuspend() noexcept;$/;"	m	class:SuspensibleThread
noexcept	src/thread/SuspensibleThread.hpp	/^  void Resume() noexcept;$/;"	m	class:SuspensibleThread
noexcept	src/thread/SuspensibleThread.hpp	/^  void Suspend() noexcept;$/;"	m	class:SuspensibleThread
noexcept	src/thread/SuspensibleThread.hpp	/^  void WaitUntilSuspended() noexcept;$/;"	m	class:SuspensibleThread
noexcept	src/thread/SuspensibleThread.hpp	/^  void _BeginStop() noexcept;$/;"	m	class:SuspensibleThread
noexcept	src/thread/SuspensibleThread.hpp	/^  void _BeginSuspend() noexcept;$/;"	m	class:SuspensibleThread
noexcept	src/thread/SuspensibleThread.hpp	/^  void _WaitUntilSuspended(std::unique_lock<Mutex> &lock) noexcept;$/;"	m	class:SuspensibleThread
noexcept	src/thread/Thread.hpp	/^  bool Join(unsigned timeout_ms) noexcept;$/;"	m	class:Thread
noexcept	src/thread/Thread.hpp	/^  bool Start() noexcept;$/;"	m	class:Thread
noexcept	src/thread/Thread.hpp	/^  static DWORD WINAPI ThreadProc(LPVOID lpParameter) noexcept;$/;"	m	class:Thread
noexcept	src/thread/Thread.hpp	/^  static void *ThreadProc(void *lpParameter) noexcept;$/;"	m	class:Thread
noexcept	src/thread/Thread.hpp	/^  virtual void Run() noexcept = 0;$/;"	m	class:Thread
noexcept	src/thread/Thread.hpp	/^  void Join() noexcept;$/;"	m	class:Thread
noexcept	src/thread/Thread.hpp	/^  void SetIdlePriority() noexcept;$/;"	m	class:Thread
noexcept	src/thread/WorkerThread.hpp	/^  virtual void Run() noexcept;$/;"	m	class:WorkerThread
noexcept	src/thread/WorkerThread.hpp	/^  virtual void Tick() noexcept = 0;$/;"	m	class:WorkerThread
noexcept	src/ui/canvas/Font.hpp	/^                    PixelSize &allocated_size) const noexcept;$/;"	m	class:Font
noexcept	src/ui/canvas/Font.hpp	/^              void *buffer) const noexcept;$/;"	m	class:Font
noexcept	src/ui/canvas/Font.hpp	/^  Font() noexcept = default;$/;"	m	class:Font
noexcept	src/ui/canvas/Font.hpp	/^  PixelSize TextSize(TStringView text) const noexcept;$/;"	m	class:Font
noexcept	src/ui/canvas/Font.hpp	/^  PixelSize TextSize(const TCHAR *text) const noexcept;$/;"	m	class:Font
noexcept	src/ui/canvas/Font.hpp	/^  static void Deinitialise() noexcept;$/;"	m	class:Font
noexcept	src/ui/canvas/Font.hpp	/^  void CalculateHeights() noexcept;$/;"	m	class:Font
noexcept	src/ui/canvas/Font.hpp	/^  void Destroy() noexcept;$/;"	m	class:Font
noexcept	src/ui/canvas/custom/Cache.cpp	/^  TextCacheKey(const Font &_font, StringView _text) noexcept$/;"	m	struct:TextCacheKey	file:
noexcept	src/ui/canvas/custom/Cache.hpp	/^  PixelSize GetSize(const Font &font, StringView text) noexcept;$/;"	m	namespace:TextCache
noexcept	src/ui/canvas/custom/Cache.hpp	/^  PixelSize LookupSize(const Font &font, StringView text) noexcept;$/;"	m	namespace:TextCache
noexcept	src/ui/canvas/custom/Cache.hpp	/^  Result Get(const Font &font, StringView text) noexcept;$/;"	m	namespace:TextCache
noexcept	src/ui/canvas/gdi/Canvas.hpp	/^                            PixelPoint src_position) noexcept;$/;"	m	class:Canvas
noexcept	src/ui/canvas/gdi/Canvas.hpp	/^                       BasicStringView<TCHAR> text) noexcept;$/;"	m	class:Canvas
noexcept	src/ui/canvas/gdi/Canvas.hpp	/^                      BasicStringView<TCHAR> text) noexcept;$/;"	m	class:Canvas
noexcept	src/ui/canvas/gdi/Canvas.hpp	/^                 PixelPoint src_position, PixelSize src_size) noexcept;$/;"	m	class:Canvas
noexcept	src/ui/canvas/gdi/Canvas.hpp	/^               PixelPoint src_position, PixelSize src_size) noexcept;$/;"	m	class:Canvas
noexcept	src/ui/canvas/gdi/Canvas.hpp	/^  const PixelSize CalcTextSize(BasicStringView<TCHAR> text) const noexcept;$/;"	m	class:Canvas
noexcept	src/ui/canvas/gdi/Canvas.hpp	/^  void Copy(const Canvas &src, PixelPoint src_position) noexcept;$/;"	m	class:Canvas
noexcept	src/ui/canvas/gdi/Canvas.hpp	/^  void DrawText(PixelPoint p, BasicStringView<TCHAR> text) noexcept;$/;"	m	class:Canvas
noexcept	src/ui/canvas/memory/Canvas.hpp	/^                               PixelSize src_size) noexcept;$/;"	m	class:Canvas
noexcept	src/ui/canvas/memory/Canvas.hpp	/^                             unsigned format) noexcept;$/;"	m	class:Canvas
noexcept	src/ui/canvas/memory/Canvas.hpp	/^                            PixelPoint src_position) noexcept;$/;"	m	class:Canvas
noexcept	src/ui/canvas/memory/Canvas.hpp	/^                       BasicStringView<TCHAR> text) noexcept;$/;"	m	class:Canvas
noexcept	src/ui/canvas/memory/Canvas.hpp	/^                      BasicStringView<TCHAR> text) noexcept;$/;"	m	class:Canvas
noexcept	src/ui/canvas/memory/Canvas.hpp	/^                 ConstImageBuffer src, PixelPoint src_position) noexcept;$/;"	m	class:Canvas
noexcept	src/ui/canvas/memory/Canvas.hpp	/^                 PixelPoint src_position, PixelSize src_size) noexcept;$/;"	m	class:Canvas
noexcept	src/ui/canvas/memory/Canvas.hpp	/^                 const Bitmap &src, PixelPoint src_position) noexcept;$/;"	m	class:Canvas
noexcept	src/ui/canvas/memory/Canvas.hpp	/^               ConstImageBuffer src, PixelPoint src_position) noexcept;$/;"	m	class:Canvas
noexcept	src/ui/canvas/memory/Canvas.hpp	/^               PixelPoint src_position, PixelSize src_size) noexcept;$/;"	m	class:Canvas
noexcept	src/ui/canvas/memory/Canvas.hpp	/^               const Bitmap &src, PixelPoint src_position) noexcept;$/;"	m	class:Canvas
noexcept	src/ui/canvas/memory/Canvas.hpp	/^              ConstImageBuffer src, PixelPoint src_position) noexcept;$/;"	m	class:Canvas
noexcept	src/ui/canvas/memory/Canvas.hpp	/^              const Bitmap &src, PixelPoint src_position) noexcept;$/;"	m	class:Canvas
noexcept	src/ui/canvas/memory/Canvas.hpp	/^            ConstImageBuffer src, PixelPoint src_position) noexcept;$/;"	m	class:Canvas
noexcept	src/ui/canvas/memory/Canvas.hpp	/^            const Bitmap &src, PixelPoint src_position) noexcept;$/;"	m	class:Canvas
noexcept	src/ui/canvas/memory/Canvas.hpp	/^  const PixelSize CalcTextSize(BasicStringView<TCHAR> text) const noexcept;$/;"	m	class:Canvas
noexcept	src/ui/canvas/memory/Canvas.hpp	/^  void Copy(const Canvas &src, PixelPoint src_position) noexcept;$/;"	m	class:Canvas
noexcept	src/ui/canvas/memory/Canvas.hpp	/^  void DrawCircle(PixelPoint center, unsigned radius) noexcept;$/;"	m	class:Canvas
noexcept	src/ui/canvas/memory/Canvas.hpp	/^  void DrawFilledRectangle(PixelRect r, Color color) noexcept;$/;"	m	class:Canvas
noexcept	src/ui/canvas/memory/Canvas.hpp	/^  void DrawLine(PixelPoint a, PixelPoint b) noexcept;$/;"	m	class:Canvas
noexcept	src/ui/canvas/memory/Canvas.hpp	/^  void DrawOutlineRectangle(PixelRect r, Color color) noexcept;$/;"	m	class:Canvas
noexcept	src/ui/canvas/memory/Canvas.hpp	/^  void DrawRaisedEdge(PixelRect &rc) noexcept;$/;"	m	class:Canvas
noexcept	src/ui/canvas/memory/Canvas.hpp	/^  void DrawRoundRectangle(PixelRect r, PixelSize ellipse_size) noexcept;$/;"	m	class:Canvas
noexcept	src/ui/canvas/memory/Canvas.hpp	/^  void DrawText(PixelPoint p, BasicStringView<TCHAR> text) noexcept;$/;"	m	class:Canvas
noexcept	src/ui/canvas/memory/Canvas.hpp	/^  void DrawTransparentText(PixelPoint p, BasicStringView<TCHAR> text) noexcept;$/;"	m	class:Canvas
noexcept	src/ui/canvas/opengl/Canvas.hpp	/^                             unsigned format) noexcept;$/;"	m	class:Canvas
noexcept	src/ui/canvas/opengl/Canvas.hpp	/^                       BasicStringView<TCHAR> text) noexcept;$/;"	m	class:Canvas
noexcept	src/ui/canvas/opengl/Canvas.hpp	/^                      BasicStringView<TCHAR> text) noexcept;$/;"	m	class:Canvas
noexcept	src/ui/canvas/opengl/Canvas.hpp	/^                 PixelPoint src_position, PixelSize src_size) noexcept;$/;"	m	class:Canvas
noexcept	src/ui/canvas/opengl/Canvas.hpp	/^               PixelPoint src_position, PixelSize src_size) noexcept;$/;"	m	class:Canvas
noexcept	src/ui/canvas/opengl/Canvas.hpp	/^            const Bitmap &src, PixelPoint src_position) noexcept;$/;"	m	class:Canvas
noexcept	src/ui/canvas/opengl/Canvas.hpp	/^  const PixelSize CalcTextSize(BasicStringView<TCHAR> text) const noexcept;$/;"	m	class:Canvas
noexcept	src/ui/canvas/opengl/Canvas.hpp	/^  void DrawCircle(PixelPoint center, unsigned radius) noexcept;$/;"	m	class:Canvas
noexcept	src/ui/canvas/opengl/Canvas.hpp	/^  void DrawExactLine(PixelPoint a, PixelPoint b) noexcept;$/;"	m	class:Canvas
noexcept	src/ui/canvas/opengl/Canvas.hpp	/^  void DrawFilledRectangle(PixelRect r, const Color color) noexcept;$/;"	m	class:Canvas
noexcept	src/ui/canvas/opengl/Canvas.hpp	/^  void DrawLine(PixelPoint a, PixelPoint b) noexcept;$/;"	m	class:Canvas
noexcept	src/ui/canvas/opengl/Canvas.hpp	/^  void DrawOutlineRectangleGL(PixelRect r) noexcept;$/;"	m	class:Canvas
noexcept	src/ui/canvas/opengl/Canvas.hpp	/^  void DrawRaisedEdge(PixelRect &rc) noexcept;$/;"	m	class:Canvas
noexcept	src/ui/canvas/opengl/Canvas.hpp	/^  void DrawRoundRectangle(PixelRect r, PixelSize ellipse_size) noexcept;$/;"	m	class:Canvas
noexcept	src/ui/canvas/opengl/Canvas.hpp	/^  void DrawText(PixelPoint p, BasicStringView<TCHAR> text) noexcept;$/;"	m	class:Canvas
noexcept	src/ui/canvas/opengl/Canvas.hpp	/^  void DrawTransparentText(PixelPoint p, BasicStringView<TCHAR> text) noexcept;$/;"	m	class:Canvas
noexcept	src/ui/canvas/opengl/Canvas.hpp	/^  void DrawTwoLines(PixelPoint a, PixelPoint b, PixelPoint c) noexcept;$/;"	m	class:Canvas
noexcept	src/ui/canvas/opengl/Canvas.hpp	/^  void DrawTwoLinesExact(PixelPoint a, PixelPoint b, PixelPoint c) noexcept;$/;"	m	class:Canvas
noexcept	src/ui/canvas/opengl/Init.hpp	/^UnsignedPoint2D SetupViewport(UnsignedPoint2D size) noexcept;$/;"	m	class:DisplayOrientation
noexcept	src/ui/canvas/opengl/Init.hpp	/^void Deinitialise() noexcept;$/;"	m	class:DisplayOrientation
noexcept	src/ui/canvas/opengl/Shaders.hpp	/^void DeinitShaders() noexcept;$/;"	m	namespace:OpenGL
noexcept	src/ui/canvas/opengl/Shaders.hpp	/^void UpdateShaderProjectionMatrix() noexcept;$/;"	m	namespace:OpenGL
noexcept	src/ui/canvas/opengl/Shapes.hpp	/^void DeinitShapes() noexcept;$/;"	m	namespace:OpenGL
noexcept	src/ui/canvas/opengl/Shapes.hpp	/^void InitShapes() noexcept;$/;"	m	namespace:OpenGL
noexcept	src/ui/canvas/opengl/Texture.hpp	/^            bool _flipped = false) noexcept;$/;"	m	class:GLTexture
noexcept	src/ui/canvas/opengl/Texture.hpp	/^  explicit GLTexture(PixelSize _size, bool _flipped = false) noexcept;$/;"	m	class:GLTexture
noexcept	src/ui/canvas/opengl/Texture.hpp	/^  static void Configure() noexcept;$/;"	m	class:GLTexture
noexcept	src/ui/canvas/opengl/Texture.hpp	/^  static void EnableInterpolation() noexcept;$/;"	m	class:GLTexture
noexcept	src/ui/canvas/opengl/Texture.hpp	/^  void Draw(PixelRect dest, PixelRect src) const noexcept;$/;"	m	class:GLTexture
noexcept	src/ui/canvas/opengl/Texture.hpp	/^  void DrawOES(PixelRect dest, PixelRect src) const noexcept;$/;"	m	class:GLTexture
noexcept	src/ui/canvas/opengl/Texture.hpp	/^  void Initialise() noexcept;$/;"	m	class:GLTexture
noexcept	src/ui/canvas/opengl/Texture.hpp	/^  void ResizeDiscard(PixelSize new_size) noexcept;$/;"	m	class:GLTexture
noexcept	src/ui/canvas/opengl/VertexArray.hpp	/^                  GLvalue radius_inner, GLvalue radius_outer) noexcept;$/;"	m	struct:GLDonutVertices
noexcept	src/ui/dim/Point.hpp	/^  constexpr PixelPoint(IntPoint2D src) noexcept$/;"	m	struct:PixelPoint
noexcept	src/ui/dim/Rect.hpp	/^  constexpr PixelRect(PixelPoint origin, PixelSize size) noexcept$/;"	m	struct:PixelRect
noexcept	src/ui/dim/Rect.hpp	/^  constexpr PixelRect(RECT src) noexcept$/;"	m	struct:PixelRect
noexcept	src/ui/dim/Rect.hpp	/^  constexpr PixelRect(int _left, int _top, int _right, int _bottom) noexcept$/;"	m	struct:PixelRect
noexcept	src/ui/dim/Rect.hpp	/^  explicit constexpr PixelRect(PixelPoint origin) noexcept$/;"	m	struct:PixelRect
noexcept	src/ui/dim/Rect.hpp	/^  explicit constexpr PixelRect(PixelSize size) noexcept$/;"	m	struct:PixelRect
noexcept	src/ui/dim/Size.hpp	/^  constexpr PixelSize(int _width, int _height) noexcept$/;"	m	struct:PixelSize
noexcept	src/ui/dim/Size.hpp	/^  constexpr PixelSize(long _width, long _height) noexcept$/;"	m	struct:PixelSize
noexcept	src/ui/dim/Size.hpp	/^  constexpr PixelSize(unsigned _width, unsigned _height) noexcept$/;"	m	struct:PixelSize
noexcept	src/ui/dim/Size.hpp	/^  explicit constexpr PixelSize(unsigned _size) noexcept$/;"	m	struct:PixelSize
noexcept	src/ui/dim/opengl/BulkPoint.hpp	/^  constexpr BulkPixelPoint(int _x, int _y) noexcept$/;"	m	struct:BulkPixelPoint
noexcept	src/ui/event/Notify.hpp	/^  explicit Notify(CallbackFunction _callback) noexcept;$/;"	m	class:UI::final
noexcept	src/ui/event/Timer.hpp	/^  explicit Timer(Callback _callback) noexcept;$/;"	m	class:UI::final
noexcept	src/ui/event/Timer.hpp	/^  void OnTimer() noexcept;$/;"	m	class:UI::final
noexcept	src/ui/event/Timer.hpp	/^  void Schedule(std::chrono::steady_clock::duration d) noexcept;$/;"	m	class:UI::final
noexcept	src/ui/event/Timer.hpp	/^  void SchedulePreserve(std::chrono::steady_clock::duration d) noexcept;$/;"	m	class:UI::final
noexcept	src/ui/event/android/Queue.hpp	/^  void AddTimer(Timer &timer, std::chrono::steady_clock::duration d) noexcept;$/;"	m	class:UI::EventQueue
noexcept	src/ui/event/poll/WaylandQueue.hpp	/^  void OnSocketReady(unsigned events) noexcept;$/;"	m	class:UI::final
noexcept	src/ui/event/poll/X11Queue.hpp	/^  void OnSocketReady(unsigned events) noexcept;$/;"	m	class:UI::X11EventQueue
noexcept	src/ui/event/poll/libinput/LibInputHandler.hpp	/^  explicit LibInputHandler(EventQueue &_queue) noexcept;$/;"	m	class:UI::final
noexcept	src/ui/event/poll/libinput/LibInputHandler.hpp	/^  void OnSocketReady(unsigned events) noexcept;$/;"	m	class:UI::final
noexcept	src/ui/event/poll/linux/Input.hpp	/^  void OnSocketReady(unsigned events) noexcept;$/;"	m	class:UI::final
noexcept	src/ui/event/sdl/Queue.hpp	/^  void AddTimer(Timer &timer, std::chrono::steady_clock::duration d) noexcept;$/;"	m	class:UI::EventQueue
noexcept	src/ui/event/shared/TimerQueue.hpp	/^                          std::chrono::steady_clock::time_point _due) noexcept$/;"	m	struct:UI::TimerQueue::TimerRecord
noexcept	src/ui/event/shared/TimerQueue.hpp	/^  Timer *Pop(std::chrono::steady_clock::time_point now) noexcept;$/;"	m	class:UI::TimerQueue
noexcept	src/ui/event/shared/TimerQueue.hpp	/^  std::chrono::steady_clock::duration GetTimeout(std::chrono::steady_clock::time_point now) const noexcept;$/;"	m	class:UI::TimerQueue
noexcept	src/ui/event/shared/TimerQueue.hpp	/^  void Add(Timer &timer, std::chrono::steady_clock::time_point due) noexcept;$/;"	m	class:UI::TimerQueue
noexcept	src/ui/event/windows/Queue.hpp	/^  void AddTimer(Timer &timer, std::chrono::steady_clock::duration d) noexcept;$/;"	m	class:UI::EventQueue
noexcept	src/ui/window/ContainerWindow.hpp	/^  Window *EventChildAt(PixelPoint p) noexcept;$/;"	m	class:ContainerWindow
noexcept	src/ui/window/ContainerWindow.hpp	/^  Window *FindNextControl(Window *reference) noexcept;$/;"	m	class:ContainerWindow
noexcept	src/ui/window/ContainerWindow.hpp	/^  Window *FindPreviousControl(Window *reference) noexcept;$/;"	m	class:ContainerWindow
noexcept	src/ui/window/ContainerWindow.hpp	/^  WindowReference GetFocusedWindowReference() noexcept;$/;"	m	class:ContainerWindow
noexcept	src/ui/window/ContainerWindow.hpp	/^  bool FocusFirstControl() noexcept;$/;"	m	class:ContainerWindow
noexcept	src/ui/window/ContainerWindow.hpp	/^  bool FocusNextControl() noexcept;$/;"	m	class:ContainerWindow
noexcept	src/ui/window/ContainerWindow.hpp	/^  bool FocusPreviousControl() noexcept;$/;"	m	class:ContainerWindow
noexcept	src/ui/window/ContainerWindow.hpp	/^  void AddChild(Window &child) noexcept;$/;"	m	class:ContainerWindow
noexcept	src/ui/window/ContainerWindow.hpp	/^  void InvalidateChild(const Window &child) noexcept;$/;"	m	class:ContainerWindow
noexcept	src/ui/window/ContainerWindow.hpp	/^  void ReleaseChildCapture(Window *window) noexcept;$/;"	m	class:ContainerWindow
noexcept	src/ui/window/ContainerWindow.hpp	/^  void RemoveChild(Window &child) noexcept;$/;"	m	class:ContainerWindow
noexcept	src/ui/window/ContainerWindow.hpp	/^  void SetActiveChild(Window &child) noexcept;$/;"	m	class:ContainerWindow
noexcept	src/ui/window/ContainerWindow.hpp	/^  void SetChildCapture(Window *window) noexcept;$/;"	m	class:ContainerWindow
noexcept	src/ui/window/PaintWindow.hpp	/^  static bool register_class(HINSTANCE hInstance) noexcept;$/;"	m	class:PaintWindow
noexcept	src/ui/window/SingleWindow.hpp	/^  bool FilterEvent(const Event &event, Window *allowed) const noexcept;$/;"	m	class:UI::SingleWindow
noexcept	src/ui/window/SingleWindow.hpp	/^  bool FilterMouseEvent(PixelPoint pt, Window *allowed) const noexcept;$/;"	m	class:UI::SingleWindow
noexcept	src/ui/window/SingleWindow.hpp	/^  static bool RegisterClass(HINSTANCE hInstance) noexcept;$/;"	m	class:UI::SingleWindow
noexcept	src/ui/window/SingleWindow.hpp	/^  void AddDialog(WndForm *dialog) noexcept;$/;"	m	class:UI::SingleWindow
noexcept	src/ui/window/SingleWindow.hpp	/^  void CancelDialog() noexcept;$/;"	m	class:UI::SingleWindow
noexcept	src/ui/window/SingleWindow.hpp	/^  void RemoveDialog(WndForm *dialog) noexcept;$/;"	m	class:UI::SingleWindow
noexcept	src/ui/window/TopWindow.hpp	/^  bool CheckResumeSurface() noexcept;$/;"	m	class:UI::TopWindow
noexcept	src/ui/window/TopWindow.hpp	/^  bool IsVisible() const noexcept;$/;"	m	class:UI::TopWindow
noexcept	src/ui/window/TopWindow.hpp	/^  bool ResumeSurface() noexcept;$/;"	m	class:UI::TopWindow
noexcept	src/ui/window/TopWindow.hpp	/^  int RunEventLoop() noexcept;$/;"	m	class:UI::TopWindow
noexcept	src/ui/window/TopWindow.hpp	/^  virtual bool OnActivate() noexcept;$/;"	m	class:UI::TopWindow
noexcept	src/ui/window/TopWindow.hpp	/^  virtual bool OnClose() noexcept;$/;"	m	class:UI::TopWindow
noexcept	src/ui/window/TopWindow.hpp	/^  virtual bool OnDeactivate() noexcept;$/;"	m	class:UI::TopWindow
noexcept	src/ui/window/TopWindow.hpp	/^  virtual void OnPause() noexcept;$/;"	m	class:UI::TopWindow
noexcept	src/ui/window/TopWindow.hpp	/^  virtual void OnResume() noexcept;$/;"	m	class:UI::TopWindow
noexcept	src/ui/window/TopWindow.hpp	/^  void AnnounceResize(PixelSize _new_size) noexcept;$/;"	m	class:UI::TopWindow
noexcept	src/ui/window/TopWindow.hpp	/^  void CancelMode() noexcept;$/;"	m	class:UI::TopWindow
noexcept	src/ui/window/TopWindow.hpp	/^  void CheckResize() noexcept;$/;"	m	class:UI::TopWindow
noexcept	src/ui/window/TopWindow.hpp	/^  void Expose() noexcept;$/;"	m	class:UI::TopWindow
noexcept	src/ui/window/TopWindow.hpp	/^  void Pause() noexcept;$/;"	m	class:UI::TopWindow
noexcept	src/ui/window/TopWindow.hpp	/^  void PostQuit() noexcept;$/;"	m	class:UI::TopWindow
noexcept	src/ui/window/TopWindow.hpp	/^  void Refresh() noexcept;$/;"	m	class:UI::TopWindow
noexcept	src/ui/window/TopWindow.hpp	/^  void RefreshSize() noexcept;$/;"	m	class:UI::TopWindow
noexcept	src/ui/window/TopWindow.hpp	/^  void Resume() noexcept;$/;"	m	class:UI::TopWindow
noexcept	src/ui/window/TopWindow.hpp	/^  void SetCaption(const TCHAR *caption) noexcept;$/;"	m	class:UI::TopWindow
noexcept	src/ui/window/TopWindow.hpp	/^  void SetDisplayOrientation(DisplayOrientation orientation) noexcept;$/;"	m	class:UI::TopWindow
noexcept	src/ui/window/Window.hpp	/^                                  WPARAM wParam, LPARAM lParam) noexcept;$/;"	m	class:Window
noexcept	src/ui/window/Window.hpp	/^                            WPARAM wParam, LPARAM lParam) noexcept;$/;"	m	class:Window
noexcept	src/ui/window/Window.hpp	/^              const WindowStyle window_style=WindowStyle()) noexcept;$/;"	m	class:Window
noexcept	src/ui/window/Window.hpp	/^  ContainerWindow *GetRootOwner() noexcept;$/;"	m	class:Window
noexcept	src/ui/window/Window.hpp	/^  PixelRect GetParentClientRect() const noexcept;$/;"	m	class:Window
noexcept	src/ui/window/Window.hpp	/^  bool IsMaximised() const noexcept;$/;"	m	class:Window
noexcept	src/ui/window/Window.hpp	/^  virtual Window *GetFocusedWindow() noexcept;$/;"	m	class:Window
noexcept	src/ui/window/Window.hpp	/^  virtual void ClearCapture() noexcept;$/;"	m	class:Window
noexcept	src/ui/window/Window.hpp	/^  virtual void ClearFocus() noexcept;$/;"	m	class:Window
noexcept	src/ui/window/Window.hpp	/^  virtual void Invalidate() noexcept;$/;"	m	class:Window
noexcept	src/ui/window/Window.hpp	/^  virtual void SetFocus() noexcept;$/;"	m	class:Window
noexcept	src/ui/window/Window.hpp	/^  virtual ~Window() noexcept;$/;"	m	class:Window
noexcept	src/ui/window/Window.hpp	/^  void AssertThread() const noexcept;$/;"	m	class:Window
noexcept	src/ui/window/Window.hpp	/^  void AssertThreadOrUndefined() const noexcept;$/;"	m	class:Window
noexcept	src/ui/window/Window.hpp	/^  void BringToBottom() noexcept;$/;"	m	class:Window
noexcept	src/ui/window/Window.hpp	/^  void BringToTop() noexcept;$/;"	m	class:Window
noexcept	src/ui/window/Window.hpp	/^  void CreateMessageWindow() noexcept;$/;"	m	class:Window
noexcept	src/ui/window/Window.hpp	/^  void Created(HWND _hWnd) noexcept;$/;"	m	class:Window
noexcept	src/ui/window/Window.hpp	/^  void Destroy() noexcept;$/;"	m	class:Window
noexcept	src/ui/window/Window.hpp	/^  void FocusParent() noexcept;$/;"	m	class:Window
noexcept	src/ui/window/Window.hpp	/^  void Hide() noexcept;$/;"	m	class:Window
noexcept	src/ui/window/Window.hpp	/^  void ReleaseCapture() noexcept;$/;"	m	class:Window
noexcept	src/ui/window/Window.hpp	/^  void SetCapture() noexcept;$/;"	m	class:Window
noexcept	src/ui/window/Window.hpp	/^  void SetEnabled(bool enabled) noexcept;$/;"	m	class:Window
noexcept	src/ui/window/Window.hpp	/^  void SetFont(const Font &_font) noexcept;$/;"	m	class:Window
noexcept	src/ui/window/Window.hpp	/^  void Show() noexcept;$/;"	m	class:Window
noexcept	src/ui/window/Window.hpp	/^  void ToScreen(PixelRect &rc) const noexcept;$/;"	m	class:Window
noexcept	src/util/AllocatedString.hxx	/^	AllocatedString() noexcept = default;$/;"	m	class:AllocatedString
noexcept	src/util/AllocatedString.hxx	/^	BasicAllocatedString() noexcept = default;$/;"	m	class:BasicAllocatedString
noexcept	src/util/BindMethod.hxx	/^		noexcept(NoExcept)$/;"	t	class:BoundMethod
noexcept	src/util/BindMethod.hxx	/^		noexcept(NoExcept)$/;"	t	struct:BindMethodDetail::FunctionTraits
noexcept	src/util/BindMethod.hxx	/^		noexcept(NoExcept)$/;"	t	struct:BindMethodDetail::MethodSignatureHelper
noexcept	src/util/BindMethod.hxx	/^		noexcept(NoExcept)$/;"	t	struct:BindMethodDetail::MethodWithSignature
noexcept	src/util/BindMethod.hxx	/^		noexcept(NoExcept)$/;"	t	struct:BindMethodDetail::MethodWrapperWithSignature
noexcept	src/util/BindMethod.hxx	/^	static R Invoke(void *, Args... args) noexcept(NoExcept) {$/;"	f	struct:BindMethodDetail::BindFunctionWrapperGenerator2
noexcept	src/util/BindMethod.hxx	/^	static R Invoke(void *_instance, Args... args) noexcept(NoExcept) {$/;"	f	struct:BindMethodDetail::BindMethodWrapperGenerator2
noexcept	src/util/Cancellable.hxx	/^	virtual void Cancel() noexcept = 0;$/;"	m	class:Cancellable
noexcept	src/util/ConstBuffer.hxx	/^	constexpr ConstBuffer(const T (&_data)[_size]) noexcept$/;"	m	struct:ConstBuffer
noexcept	src/util/ConstBuffer.hxx	/^	constexpr ConstBuffer(pointer _data, pointer _end) noexcept$/;"	m	struct:ConstBuffer
noexcept	src/util/ConstBuffer.hxx	/^	constexpr ConstBuffer(pointer _data, size_type _size) noexcept$/;"	m	struct:ConstBuffer
noexcept	src/util/ConstBuffer.hxx	/^	constexpr ConstBuffer(std::nullptr_t) noexcept$/;"	m	struct:ConstBuffer
noexcept	src/util/IntrusiveList.hxx	/^		const_iterator() noexcept = default;$/;"	m	class:IntrusiveList::final
noexcept	src/util/IntrusiveList.hxx	/^		iterator() noexcept = default;$/;"	m	class:IntrusiveList::final
noexcept	src/util/IntrusiveList.hxx	/^	constexpr IntrusiveList() noexcept = default;$/;"	m	class:IntrusiveList
noexcept	src/util/QuadTree.hxx	/^			  position_type _right, position_type _bottom) noexcept$/;"	m	struct:QuadTree::Rectangle
noexcept	src/util/QuadTree.hxx	/^		Bucket() noexcept$/;"	m	struct:Bucket
noexcept	src/util/QuadTree.hxx	/^		LeafList() noexcept:head(nullptr), size(0) {}$/;"	m	struct:LeafList
noexcept	src/util/QuadTree.hxx	/^		Point(position_type _x, position_type _y) noexcept$/;"	m	struct:QuadTree::Point
noexcept	src/util/QuadTree.hxx	/^		explicit Leaf(U &&_value) noexcept$/;"	m	struct:QuadTree::Leaf
noexcept	src/util/StringView.hxx	/^	BasicStringView(pointer _data) noexcept$/;"	m	struct:BasicStringView
noexcept	src/util/StringView.hxx	/^	constexpr BasicStringView(pointer _begin, pointer _end) noexcept$/;"	m	struct:BasicStringView
noexcept	src/util/StringView.hxx	/^	constexpr BasicStringView(pointer _data, size_type _size) noexcept$/;"	m	struct:BasicStringView
noexcept	src/util/StringView.hxx	/^	constexpr BasicStringView(std::nullptr_t n) noexcept$/;"	m	struct:BasicStringView
noexcept	src/util/StringView.hxx	/^	constexpr StringView(BasicStringView<value_type> src) noexcept$/;"	m	struct:StringView
noexcept	src/util/StringView.hxx	/^	void StripLeft() noexcept;$/;"	m	struct:BasicStringView
noexcept	src/util/StringView.hxx	/^	void StripRight() noexcept;$/;"	m	struct:BasicStringView
noexcept	src/util/TStringView.hxx	/^	constexpr TStringView(StringView src) noexcept$/;"	m	struct:TStringView::TStringView
noexcept	src/util/TStringView.hxx	/^	constexpr TStringView(WStringView src) noexcept$/;"	m	struct:TStringView
noexcept	src/util/TrivialArray.hxx	/^	TrivialArray() noexcept = default;$/;"	m	class:TrivialArray
noexcept	src/util/WStringView.hxx	/^	constexpr WStringView(BasicStringView<value_type> src) noexcept$/;"	m	struct:WStringView
noexcept	src/util/WritableBuffer.hxx	/^	constexpr WritableBuffer(T (&_data)[_size]) noexcept$/;"	m	struct:WritableBuffer
noexcept	src/util/WritableBuffer.hxx	/^	constexpr WritableBuffer(pointer _data, pointer _end) noexcept$/;"	m	struct:WritableBuffer
noexcept	src/util/WritableBuffer.hxx	/^	constexpr WritableBuffer(pointer _data, size_type _size) noexcept$/;"	m	struct:WritableBuffer
noexcept	src/util/WritableBuffer.hxx	/^	constexpr WritableBuffer(std::nullptr_t) noexcept$/;"	m	struct:WritableBuffer
nominal_points	src/Engine/Task/Points/SampledTaskPoint.hpp	/^  SearchPointVector nominal_points;$/;"	m	class:SampledTaskPoint
noncircling_climb_percentage	src/NMEA/CirclingInfo.hpp	/^  double noncircling_climb_percentage;$/;"	m	struct:CirclingInfo
noncomp_vario	src/NMEA/Info.hpp	/^  double noncomp_vario;$/;"	m	struct:NMEAInfo
noncomp_vario_available	src/NMEA/Info.hpp	/^  Validity noncomp_vario_available;$/;"	m	struct:NMEAInfo
nonexpiring_internal_gps	src/NMEA/GPSState.hpp	/^  bool nonexpiring_internal_gps;$/;"	m	struct:GPSState
norm	src/Geo/SpeedVector.hpp	/^  double norm;$/;"	m	struct:SpeedVector
norm	src/Topography/shapelib/mapsearch.c	375;"	d	file:
normal	src/Computer/WaveResult.hpp	/^  Angle normal;$/;"	m	struct:WaveInfo
north_up	src/Gauge/TrafficSettings.hpp	/^  bool north_up;$/;"	m	struct:TrafficSettings
northing	src/Geo/UTM.hpp	/^  double easting, northing;$/;"	m	struct:UTM
notify	src/Job/Async.hpp	/^  UI::Notify *notify;$/;"	m	class:final
notrack	src/Dialogs/Device/FLARM/ConfigWidget.hpp	/^  unsigned baud, priv, thre, range, acft, log_int, notrack;$/;"	m	class:final
now_reachable	src/Computer/ConditionMonitor/ConditionMonitorLandableReachable.hpp	/^  bool now_reachable;$/;"	m	class:final
npilots	src/Device/Driver/Volkslogger/vlapi2.h	/^    int npilots;$/;"	m	struct:VLAPI_DATA::DATABASE
nroutes	src/Device/Driver/Volkslogger/vlapi2.h	/^    int nroutes;$/;"	m	struct:VLAPI_DATA::DATABASE
ntiles	src/Topography/shapelib/mapserver.h	/^    int ntiles;$/;"	m	struct:imageObj
nturnpoints	src/Device/Driver/Volkslogger/vlapi2.h	/^      unsigned nturnpoints;$/;"	m	struct:VLAPI_DATA::DECLARATION::TASK
null_acktime	src/Engine/Airspace/AirspaceWarning.hpp	/^  static constexpr unsigned null_acktime = -1;$/;"	m	class:AirspaceWarning
null_delta	src/Engine/Trace/Trace.hpp	/^  static constexpr unsigned null_delta = 0 - 1;$/;"	m	class:Trace
null_stats	src/Engine/Task/TaskManager.hpp	/^  TaskStats null_stats;$/;"	m	class:TaskManager
null_time	src/Engine/Trace/Trace.hpp	/^  static constexpr unsigned null_time = 0 - 1;$/;"	m	class:Trace
nullptr	src/Engine/Airspace/Minimum.hpp	/^         typename Result=decltype(((Func *)nullptr)->operator()(*(const AbstractAirspace *)nullptr)),$/;"	v
num	src/Device/Driver/LX/LXN.hpp	/^    unsigned num;$/;"	m	struct:LXN::ExtensionConfig
num	src/Replay/CatmullRomInterpolator.hpp	/^  unsigned num;$/;"	m	class:CatmullRomInterpolator
num_allocated_rendered_members	src/Topography/shapelib/mapserver.h	/^    int num_allocated_rendered_members;$/;"	m	struct:__anon42
num_available	src/util/SliceAllocator.hxx	/^		unsigned num_available;$/;"	m	struct:SliceAllocator::Area
num_blocks	src/Device/Driver/CAI302/Protocol.hpp	/^    PackedBE16 num_blocks;$/;"	m	struct:CAI302::FileASCII
num_buffers	src/ui/canvas/opengl/Buffer.cpp	/^unsigned num_buffers;$/;"	v
num_buttons	src/Widget/KeyboardWidget.hpp	/^  unsigned num_buttons;$/;"	m	class:KeyboardWidget
num_bytes	src/Device/Driver/CAI302/Protocol.hpp	/^    uint8_t num_bytes[3];$/;"	m	struct:CAI302::FileBinary
num_columns	src/Form/GridView.hpp	/^  unsigned num_columns;$/;"	m	class:GridView
num_files	src/Device/Driver/CAI302/Protocol.hpp	/^    uint8_t num_files;$/;"	m	struct:CAI302::FileList
num_follow_labels	src/Topography/shapelib/mapserver.h	/^    int num_follow_labels;$/;"	m	struct:label_follow_result
num_items	src/Dialogs/ListPicker.cpp	/^  unsigned num_items;$/;"	m	class:ListPickerWidget	file:
num_label_points	src/Topography/shapelib/mapserver.h	/^    int num_label_points;$/;"	m	struct:label_auto_result
num_lines	src/Topography/XShape.hpp	/^  uint8_t num_lines;$/;"	m	class:XShape
num_marker_segments	src/Terrain/RasterTileCache.hpp	/^    unsigned num_marker_segments;$/;"	m	struct:RasterTileCache::CacheHeader
num_points	src/Topography/ShapeRenderer.hpp	/^  unsigned num_points;$/;"	m	class:ShapeRenderer
num_port_types	src/Dialogs/Device/DeviceEditWidget.cpp	/^static constexpr unsigned num_port_types = ARRAY_SIZE(port_types) - 1;$/;"	v	file:
num_raster_points	src/MapWindow/MapCanvas.hpp	/^  unsigned num_raster_points;$/;"	m	class:MapCanvas
num_rendered_members	src/Topography/shapelib/mapserver.h	/^    int num_rendered_members;$/;"	m	struct:__anon42
num_rows	src/Form/GridView.hpp	/^  unsigned num_rows;$/;"	m	class:GridView
num_stages	src/Engine/PathSolvers/NavDijkstra.hpp	/^  unsigned num_stages;$/;"	m	class:NavDijkstra
num_strings	src/Language/MOFile.hpp	/^    uint32_t num_strings;$/;"	m	struct:MOFile::mo_header
num_textures	src/ui/canvas/opengl/Texture.cpp	/^unsigned num_textures;$/;"	v
num_tps	src/Device/Driver/LX/LXN.hpp	/^    int8_t num_tps;$/;"	m	struct:LXN::Task
num_turnpoints	src/IGC/IGCDeclaration.hpp	/^  unsigned num_turnpoints;$/;"	m	struct:IGCDeclarationHeader
numbands	src/Terrain/jasper/jpc/jpc_dec.h	/^	unsigned numbands;$/;"	m	struct:__anon125
numbindings	src/Topography/shapelib/mapserver.h	/^    int numbindings;$/;"	m	struct:labelObj
numbindings	src/Topography/shapelib/mapserver.h	/^    int numbindings;$/;"	m	struct:styleObj
numbps	src/Terrain/jasper/jpc/jpc_dec.h	/^	unsigned numbps;$/;"	m	struct:__anon124
numcblks	src/Terrain/jasper/jpc/jpc_dec.h	/^	unsigned numcblks;$/;"	m	struct:__anon123
numchans	src/Terrain/jasper/jp2/jp2_cod.h	/^	uint_fast16_t numchans;$/;"	m	struct:__anon91
numchans	src/Terrain/jasper/jp2/jp2_cod.h	/^	uint_fast16_t numchans;$/;"	m	struct:__anon93
numchans	src/Terrain/jasper/jp2/jp2_cod.h	/^	uint_fast8_t numchans;$/;"	m	struct:__anon89
numclasses	src/Topography/shapelib/mapserver.h	/^    int numclasses;$/;"	m	struct:layerObj
numcmpts	src/Terrain/jasper/jp2/jp2_cod.h	/^	uint_fast16_t numcmpts;$/;"	m	struct:__anon86
numcmpts	src/Terrain/jasper/jp2/jp2_cod.h	/^	uint_fast16_t numcmpts;$/;"	m	struct:__anon87
numcmpts_	src/Terrain/jasper/jas_image.h	/^	unsigned numcmpts_;$/;"	m	struct:__anon101
numcolors	src/Topography/shapelib/mapserver.h	/^    int numcolors;$/;"	m	struct:__anon25
numcols_	src/Terrain/jasper/jas_seq.h	/^	jas_matind_t numcols_;$/;"	m	struct:jas_matrix
numcompatcodes	src/Terrain/jasper/jp2/jp2_cod.h	/^	uint_fast32_t numcompatcodes;$/;"	m	struct:__anon85
numcomps	src/Terrain/jasper/jpc/jpc_cs.h	/^	int numcomps;$/;"	m	struct:__anon153
numcomps	src/Terrain/jasper/jpc/jpc_cs.h	/^	uint_fast16_t numcomps;$/;"	m	struct:__anon134
numcomps	src/Terrain/jasper/jpc/jpc_cs.h	/^	uint_fast16_t numcomps;$/;"	m	struct:__anon137
numcomps	src/Terrain/jasper/jpc/jpc_dec.h	/^	unsigned numcomps;$/;"	m	struct:__anon120
numcomps	src/Terrain/jasper/jpc/jpc_dec.h	/^	unsigned numcomps;$/;"	m	struct:__anon129
numcomps	src/Terrain/jasper/jpc/jpc_t2cod.h	/^	unsigned numcomps;$/;"	m	struct:__anon115
numdecimals	src/Topography/shapelib/mapprimitive.h	/^  short numdecimals;$/;"	m	struct:__anon73
numdlvls	src/Terrain/jasper/jpc/jpc_cs.h	/^	uint_fast8_t numdlvls;$/;"	m	struct:__anon139
numents	src/Terrain/jasper/jpc/jpc_dec.h	/^	unsigned numents;$/;"	m	struct:__anon117
numfonts	src/Topography/shapelib/mapserver.h	/^    int numfonts;$/;"	m	struct:__anon24
numfonts	src/Topography/shapelib/mapserver.h	/^    int numfonts;$/;"	m	struct:__anon64
numformatoptions	src/Topography/shapelib/mapserver.h	/^    int  numformatoptions;$/;"	m	struct:__anon32
numglyphs	src/Topography/shapelib/mapserver.h	/^  int numglyphs;$/;"	m	struct:textPathObj
numguard	src/Terrain/jasper/jpc/jpc_cs.h	/^	uint_fast8_t numguard;$/;"	m	struct:__anon143
numguardbits	src/Terrain/jasper/jpc/jpc_dec.h	/^	uint_fast8_t numguardbits;$/;"	m	struct:__anon119
numhcblks	src/Terrain/jasper/jpc/jpc_dec.h	/^	unsigned numhcblks;$/;"	m	struct:__anon123
numhprcs	src/Terrain/jasper/jpc/jpc_dec.h	/^	unsigned numhprcs;$/;"	m	struct:__anon125
numhprcs	src/Terrain/jasper/jpc/jpc_t2cod.h	/^	unsigned numhprcs;$/;"	m	struct:__anon113
numhtiles	src/Terrain/jasper/jpc/jpc_dec.h	/^	unsigned numhtiles;$/;"	m	struct:__anon129
numimsbs	src/Terrain/jasper/jpc/jpc_dec.h	/^	unsigned numimsbs;$/;"	m	struct:__anon122
numimsbstagtree	src/Terrain/jasper/jpc/jpc_dec.h	/^	jpc_tagtree_t *numimsbstagtree;$/;"	m	struct:__anon123
numitems	src/Topography/shapelib/mapserver.h	/^    int numitems;$/;"	m	struct:__anon31
numitems	src/Topography/shapelib/mapserver.h	/^    int numitems;$/;"	m	struct:layerObj
numjoins	src/Topography/shapelib/mapserver.h	/^    int numjoins;$/;"	m	struct:layerObj
numlabels	src/Topography/shapelib/mapserver.h	/^    int numlabels;$/;"	m	struct:__anon41
numlabels	src/Topography/shapelib/mapserver.h	/^    int numlabels;$/;"	m	struct:classObj
numlayers	src/Topography/shapelib/mapserver.h	/^    int numlayers; \/* number of layers in mapfile *\/$/;"	m	struct:mapObj
numleafsh_	src/Terrain/jasper/jpc/jpc_tagtree.h	/^	int numleafsh_;$/;"	m	struct:__anon109
numleafsv_	src/Terrain/jasper/jpc/jpc_tagtree.h	/^	int numleafsv_;$/;"	m	struct:__anon109
numlenbits	src/Terrain/jasper/jpc/jpc_dec.h	/^	unsigned numlenbits;$/;"	m	struct:__anon122
numlines	src/Topography/shapelib/mapprimitive.h	/^  int numlines;$/;"	m	struct:__anon72
numlines	src/Topography/shapelib/mapserver.h	/^  int numlines;$/;"	m	struct:textPathObj
numlutents	src/Terrain/jasper/jp2/jp2_cod.h	/^	uint_fast16_t numlutents;$/;"	m	struct:__anon89
numlvls	src/Terrain/jasper/jpc/jpc_tsfb.h	/^	unsigned numlvls;$/;"	m	struct:__anon108
numlyrs	src/Terrain/jasper/jpc/jpc_cs.h	/^	uint_fast16_t numlyrs;$/;"	m	struct:__anon140
numlyrs	src/Terrain/jasper/jpc/jpc_dec.h	/^	uint_fast16_t numlyrs;$/;"	m	struct:__anon120
numlyrs	src/Terrain/jasper/jpc/jpc_t2cod.h	/^	unsigned numlyrs;$/;"	m	struct:__anon115
nummarkers	src/Topography/shapelib/mapserver.h	/^    int nummarkers;$/;"	m	struct:__anon41
numnodes_	src/Terrain/jasper/jpc/jpc_tagtree.h	/^	int numnodes_;$/;"	m	struct:__anon109
numoutputformats	src/Topography/shapelib/mapserver.h	/^    int numoutputformats;$/;"	m	struct:mapObj
numparts	src/Terrain/jasper/jpc/jpc_cs.h	/^	uint_fast8_t numparts;$/;"	m	struct:__anon135
numparts	src/Terrain/jasper/jpc/jpc_dec.h	/^	unsigned numparts;$/;"	m	struct:__anon127
numpasses	src/Terrain/jasper/jpc/jpc_dec.h	/^	unsigned numpasses;$/;"	m	struct:__anon122
numpasses	src/Terrain/jasper/jpc/jpc_dec.h	/^	unsigned numpasses;$/;"	m	struct:jpc_dec_seg_s
numpchgs	src/Terrain/jasper/jpc/jpc_cs.h	/^	int numpchgs;$/;"	m	struct:__anon147
numpchgs	src/Terrain/jasper/jpc/jpc_t2cod.h	/^	unsigned numpchgs;$/;"	m	struct:__anon112
numpkts	src/Terrain/jasper/jpc/jpc_dec.h	/^	unsigned numpkts;$/;"	m	struct:__anon129
numpoints	src/Topography/shapelib/mapprimitive.h	/^  int numpoints;$/;"	m	struct:__anon71
numprcs	src/Terrain/jasper/jpc/jpc_dec.h	/^	unsigned numprcs;$/;"	m	struct:__anon125
numprcs	src/Terrain/jasper/jpc/jpc_t2cod.h	/^	unsigned numprcs;$/;"	m	struct:__anon113
numprocessing	src/Topography/shapelib/mapserver.h	/^    int numprocessing;$/;"	m	struct:layerObj
numresults	src/Topography/shapelib/mapserver.h	/^    int numresults;$/;"	m	struct:__anon44
numrlvls	src/Terrain/jasper/jpc/jpc_cs.h	/^	int numrlvls;$/;"	m	struct:__anon139
numrlvls	src/Terrain/jasper/jpc/jpc_dec.h	/^	uint_fast8_t numrlvls;$/;"	m	struct:__anon119
numrlvls	src/Terrain/jasper/jpc/jpc_dec.h	/^	unsigned numrlvls;$/;"	m	struct:__anon126
numrlvls	src/Terrain/jasper/jpc/jpc_t2cod.h	/^	unsigned numrlvls;$/;"	m	struct:__anon114
numrows_	src/Terrain/jasper/jas_seq.h	/^	jas_matind_t numrows_;$/;"	m	struct:jas_matrix
numscaletokens	src/Topography/shapelib/mapserver.h	/^    int numscaletokens;$/;"	m	struct:layerObj
numshapes	src/Topography/shapelib/mapshape.h	/^    int numshapes; \/* number of shapes *\/$/;"	m	struct:__anon78
numshapes	src/Topography/shapelib/maptree.h	/^    ms_int32 numshapes;$/;"	m	struct:__anon80
numshapes	src/Topography/shapelib/maptree.h	/^    ms_int32 numshapes;$/;"	m	struct:shape_tree_node
numstepsizes	src/Terrain/jasper/jpc/jpc_cs.h	/^	int numstepsizes;$/;"	m	struct:__anon143
numstepsizes	src/Terrain/jasper/jpc/jpc_dec.h	/^	uint_fast16_t numstepsizes;$/;"	m	struct:__anon119
numstreams	src/Terrain/jasper/jpc/jpc_dec.h	/^	unsigned numstreams;$/;"	m	struct:__anon118
numstyles	src/Topography/shapelib/mapserver.h	/^    int numstyles;$/;"	m	struct:__anon36
numstyles	src/Topography/shapelib/mapserver.h	/^    int numstyles;$/;"	m	struct:__anon39
numstyles	src/Topography/shapelib/mapserver.h	/^    int numstyles;$/;"	m	struct:classObj
numstyles	src/Topography/shapelib/mapserver.h	/^    int numstyles;$/;"	m	struct:labelObj
numsubnodes	src/Topography/shapelib/maptree.h	/^    int numsubnodes;$/;"	m	struct:shape_tree_node
numsymbols	src/Topography/shapelib/mapserver.h	/^    int numsymbols;$/;"	m	struct:__anon45
numtextsymbols	src/Topography/shapelib/mapserver.h	/^    int numtextsymbols;$/;"	m	struct:__anon39
numtiles	src/Terrain/jasper/jpc/jpc_dec.h	/^	unsigned numtiles;$/;"	m	struct:__anon129
numtps	src/Device/Driver/LX/Protocol.hpp	/^    uint8_t numtps;$/;"	m	struct:LX::Declaration
numvalues	src/Topography/shapelib/mapprimitive.h	/^  int numvalues;$/;"	m	struct:__anon72
numvcblks	src/Terrain/jasper/jpc/jpc_dec.h	/^	unsigned numvcblks;$/;"	m	struct:__anon123
numvprcs	src/Terrain/jasper/jpc/jpc_dec.h	/^	unsigned numvprcs;$/;"	m	struct:__anon125
numvtiles	src/Terrain/jasper/jpc/jpc_dec.h	/^	unsigned numvtiles;$/;"	m	struct:__anon129
nunchuck	src/Device/Descriptor.hpp	/^  NunchuckDevice *nunchuck;$/;"	m	class:final
nunchuck_class	src/Android/NunchuckDevice.cpp	/^static Java::TrivialClass nunchuck_class;$/;"	v	file:
nunchuck_ctor	src/Android/NunchuckDevice.cpp	/^static jmethodID nunchuck_ctor, close_method;$/;"	v	file:
nwidth	src/Gauge/GaugeVario.hpp	/^    int nlength0, nlength1, nwidth, nline;$/;"	m	struct:GaugeVario::Geometry
nwpts	src/Device/Driver/Volkslogger/vlapi2.h	/^    int nwpts;$/;"	m	struct:VLAPI_DATA::DATABASE
obj	src/Android/BMP085Device.hpp	/^  Java::GlobalObject obj;$/;"	m	class:final
obj	src/Android/GliderLink.hpp	/^  Java::GlobalObject obj;$/;"	m	class:GliderLink
obj	src/Android/I2CbaroDevice.hpp	/^  Java::GlobalObject obj;$/;"	m	class:final
obj	src/Android/NativeView.hpp	/^  Java::GlobalObject obj;$/;"	m	class:NativeView
obj	src/Android/NunchuckDevice.hpp	/^  Java::GlobalObject obj;$/;"	m	class:final
obj	src/Android/VoltageDevice.hpp	/^  Java::GlobalObject obj;$/;"	m	class:final
obj	src/event/PollBackend.hxx	/^			:index(_index), obj(_obj) {}$/;"	f	struct:PollBackend::Item
obj	src/event/PollBackend.hxx	/^		void *obj;$/;"	m	struct:PollBackend::Item
obj	src/event/PollResultGeneric.hxx	/^			: events(_events), obj(_obj) { }$/;"	f	struct:PollResultGeneric::Item
obj	src/event/PollResultGeneric.hxx	/^		void *obj;$/;"	m	struct:PollResultGeneric::Item
obj	src/event/WinSelectBackend.hxx	/^		void *obj;$/;"	m	struct:WinSelectBackend::Item
obj_	src/Terrain/jasper/jas_stream.h	/^	jas_stream_obj_t *obj_;$/;"	m	struct:__anon97
obj_InternalGPS_	src/Android/InternalSensors.hpp	/^  Java::GlobalObject obj_InternalGPS_;$/;"	m	class:InternalSensors
obj_NonGPSSensors_	src/Android/InternalSensors.hpp	/^  Java::GlobalObject obj_NonGPSSensors_;$/;"	m	class:InternalSensors
object	src/Android/DownloadManager.hpp	/^  AndroidDownloadManager(JNIEnv *env, jobject obj) noexcept:object(env, obj) {}$/;"	f	class:AndroidDownloadManager
object	src/Android/DownloadManager.hpp	/^  Java::GlobalObject object;$/;"	m	class:AndroidDownloadManager
object	src/Android/Vibrator.hpp	/^  Java::GlobalObject object;$/;"	m	class:Vibrator
object	src/Audio/SLES/Object.hpp	/^    SLObjectItf object;$/;"	m	class:SLES::Object
observer	src/Device/Driver/LX/LXN.hpp	/^    char observer[10];$/;"	m	struct:LXN::FlightInfo
obstacle_icon	src/Look/WaypointLook.hpp	/^  MaskedIcon mountain_top_icon, bridge_icon, obstacle_icon;$/;"	m	struct:WaypointLook
obstacle_version	src/FLARM/Version.hpp	/^  NarrowString<19> obstacle_version;$/;"	m	struct:FlarmVersion
oct2	src/ui/canvas/memory/Murphy.hpp	/^  int oct2;$/;"	m	struct:MurphyIterator
oes_draw_texture	src/ui/canvas/opengl/Globals.cpp	/^bool oes_draw_texture;$/;"	m	namespace:OpenGL	file:
off	src/Terrain/jasper/jpc/jpc_cs.h	/^	uint_fast32_t off;$/;"	m	struct:__anon156
offset	src/Android/VoltageDevice.hpp	/^  double offset;$/;"	m	class:final
offset	src/Audio/PCMBufferDataSource.hpp	/^  unsigned offset;$/;"	m	class:PCMBufferDataSource
offset	src/Gauge/GaugeVario.hpp	/^    PixelPoint offset;$/;"	m	struct:GaugeVario::Geometry
offset	src/Language/MOFile.hpp	/^    uint32_t offset;$/;"	m	struct:MOFile::mo_table_entry
offset	src/Topography/XShape.hpp	/^  mutable unsigned offset;$/;"	m	class:XShape
offset	src/ui/canvas/opengl/Canvas.hpp	/^  PixelPoint offset = {0, 0};$/;"	m	class:Canvas
offset	src/zzip/file.h	/^    zzip_off_t offset; \/* offset from the start of zipfile... *\/$/;"	m	struct:zzip_file
offset_history	src/MapWindow/GlueMapWindow.hpp	/^  OffsetHistory offset_history;$/;"	m	class:GlueMapWindow
offset_to_user	src/Units/Descriptor.hpp	/^  double offset_to_user;$/;"	m	struct:UnitDescriptor
offsets	src/MapWindow/GlueMapWindow.hpp	/^  std::array<PixelPoint, 30> offsets;$/;"	m	class:OffsetHistory
offsets	src/Widget/OffsetButtonsWidget.hpp	/^  const double offsets[4];$/;"	m	class:OffsetButtonsWidget
offsetx	src/Topography/shapelib/mapserver.h	/^    double offsetx, offsety; \/* for shadows, hollow symbols, etc... *\/$/;"	m	struct:styleObj
offsetx	src/Topography/shapelib/mapserver.h	/^    int offsetx, offsety;$/;"	m	struct:labelObj
offsetx	src/Topography/shapelib/mapserver.h	/^    int offsetx;$/;"	m	struct:__anon47
offsety	src/Topography/shapelib/mapserver.h	/^    double offsetx, offsety; \/* for shadows, hollow symbols, etc... *\/$/;"	m	struct:styleObj
offsety	src/Topography/shapelib/mapserver.h	/^    int offsetx, offsety;$/;"	m	struct:labelObj
offsety	src/Topography/shapelib/mapserver.h	/^    int offsety;$/;"	m	struct:__anon47
offsite	src/Topography/shapelib/mapserver.h	/^    colorObj offsite; \/* transparent pixel value for raster images *\/$/;"	m	struct:layerObj
ok	src/Math/Filter.hpp	/^  bool ok = false;$/;"	m	class:Filter
olc_classic	src/Engine/Contest/ContestManager.hpp	/^  OLCClassic olc_classic;$/;"	m	class:ContestManager
olc_fai	src/Engine/Contest/ContestManager.hpp	/^  OLCFAI olc_fai;$/;"	m	class:ContestManager
olc_league	src/Engine/Contest/ContestManager.hpp	/^  OLCLeague olc_league;$/;"	m	class:ContestManager
olc_plus	src/Engine/Contest/ContestManager.hpp	/^  OLCPlus olc_plus;$/;"	m	class:ContestManager
olc_sprint	src/Engine/Contest/ContestManager.hpp	/^  OLCSprint olc_sprint;$/;"	m	class:ContestManager
old	src/Device/SettingsMap.hpp	/^    bool old;$/;"	m	struct:DeviceSettingsMap::Item
old_baud_rate	src/Device/Driver/LX/Internal.hpp	/^  unsigned old_baud_rate;$/;"	m	class:LXDevice
old_configured	src/Kobo/WifiDialog.cpp	/^    bool old_visible, old_configured;$/;"	m	struct:final::NetworkInfo	file:
old_orientation	src/ui/canvas/opengl/BufferCanvas.hpp	/^  DisplayOrientation old_orientation;$/;"	m	class:DisplayOrientation
old_projection_matrix	src/ui/canvas/opengl/BufferCanvas.hpp	/^  glm::mat4 old_projection_matrix;$/;"	m	class:DisplayOrientation
old_size	src/ui/canvas/opengl/BufferCanvas.hpp	/^  UnsignedPoint2D old_size;$/;"	m	class:DisplayOrientation
old_temperatur_units	src/Device/Driver/CAI302/Protocol.hpp	/^    uint8_t old_temperatur_units; \/\/ 0 = Celcius, 1 = Farenheight$/;"	m	struct:CAI302::Pilot
old_translate	src/ui/canvas/opengl/BufferCanvas.hpp	/^  PixelPoint old_translate;$/;"	m	class:DisplayOrientation
old_units	src/Device/Driver/CAI302/Protocol.hpp	/^    uint8_t old_units; \/\/ old unit$/;"	m	struct:CAI302::Pilot
old_viewport	src/ui/canvas/opengl/BufferCanvas.hpp	/^  GLint old_viewport[4];$/;"	m	class:DisplayOrientation
old_visible	src/Kobo/WifiDialog.cpp	/^    bool old_visible, old_configured;$/;"	m	struct:final::NetworkInfo	file:
oldest_path	src/Logger/IGCFileCleanup.cpp	/^  StaticString<MAX_PATH> oldest_path;$/;"	m	class:OldIGCFileFinder	file:
oldest_time	src/Logger/IGCFileCleanup.cpp	/^  time_t oldest_time;$/;"	m	class:OldIGCFileFinder	file:
onBMP085Error	src/Android/BMP085Device.cpp	/^BMP085Device::onBMP085Error()$/;"	f	class:BMP085Device
onBMP085Values	src/Android/BMP085Device.cpp	/^BMP085Device::onBMP085Values(double temperature,$/;"	f	class:BMP085Device
onI2CbaroError	src/Android/I2CbaroDevice.cpp	/^I2CbaroDevice::onI2CbaroError()$/;"	f	class:I2CbaroDevice
onI2CbaroValues	src/Android/I2CbaroDevice.cpp	/^I2CbaroDevice::onI2CbaroValues(unsigned sensor, AtmosphericPressure pressure)$/;"	f	class:I2CbaroDevice
onNunchuckError	src/Android/NunchuckDevice.cpp	/^NunchuckDevice::onNunchuckError()$/;"	f	class:NunchuckDevice
onNunchuckValues	src/Android/NunchuckDevice.cpp	/^NunchuckDevice::onNunchuckValues(int joy_x, int joy_y, int acc_x, int acc_y, int acc_z, int switches)$/;"	f	class:NunchuckDevice
onVoltageError	src/Android/VoltageDevice.cpp	/^VoltageDevice::onVoltageError()$/;"	f	class:VoltageDevice
onVoltageValues	src/Android/VoltageDevice.cpp	/^VoltageDevice::onVoltageValues(int temp_adc, int voltage_index, int volt_adc)$/;"	f	class:VoltageDevice
on_character	src/Form/CharacterButton.hpp	/^  OnCharacterCallback on_character;$/;"	m	class:CharacterButton
on_character	src/Widget/KeyboardWidget.hpp	/^  OnCharacterCallback_t on_character;$/;"	m	class:KeyboardWidget
on_ground	src/NMEA/FlyingState.hpp	/^  bool on_ground;$/;"	m	struct:FlyingState
ones	src/Terrain/jasper/jp2/jp2_cod.c	/^static inline uint_fast32_t ones(int n)$/;"	f	file:
only_cache_result_count	src/Topography/shapelib/mapserver.h	/^    int  only_cache_result_count; \/* set to 1 sometimes by WFS 2.0 GetFeature request *\/$/;"	m	struct:__anon33
opacity	src/Topography/shapelib/mapserver.h	/^    int opacity;$/;"	m	struct:_LayerCompositer
opacity	src/Topography/shapelib/mapserver.h	/^    int opacity;$/;"	m	struct:styleObj
open	src/Dialogs/Device/DeviceListDialog.cpp	/^    bool open:1, error:1;$/;"	m	struct:final::Flags	file:
open	src/zzip/plugin.h	/^    int          (*open)(zzip_char_t* name, int flags, ...);$/;"	m	struct:zzip_plugin_io
openConnection	src/java/URL.cxx	/^Java::URL::openConnection(JNIEnv *env, const char *url)$/;"	f	class:Java::URL
openConnection	src/java/URL.hxx	/^	static jobject openConnection(JNIEnv *env, jobject url) {$/;"	f	class:Java::URL
openConnection_method	src/java/URL.cxx	/^jmethodID Java::URL::openConnection_method;$/;"	m	class:Java::URL	file:
openConnection_method	src/java/URL.hxx	/^	static jmethodID ctor, openConnection_method;$/;"	m	class:Java::URL
openFile	src/Android/NativeView.hpp	/^  void openFile(const char *pathName) {$/;"	f	class:NativeView
openUart	src/Android/IOIOHelper.cpp	/^IOIOHelper::openUart(JNIEnv *env, unsigned ID, unsigned baud)$/;"	f	class:IOIOHelper
openUart_method	src/Android/IOIOHelper.cpp	/^  IOIOHelper::openUart_method,$/;"	m	class:IOIOHelper	file:
openUart_method	src/Android/IOIOHelper.hpp	/^  static jmethodID openUart_method;$/;"	m	class:IOIOHelper
open_dbb	src/Device/Driver/Volkslogger/dbbconv.cpp	/^void DBB::open_dbb() {$/;"	f	class:DBB
open_file_method	src/Android/NativeView.cpp	/^jmethodID NativeView::open_file_method;$/;"	m	class:NativeView	file:
open_file_method	src/Android/NativeView.hpp	/^  static jmethodID open_file_method;$/;"	m	class:NativeView
open_job	src/Device/Descriptor.hpp	/^  OpenDeviceJob *open_job;$/;"	m	class:final
open_method	src/Android/IOIOHelper.hpp	/^  static jmethodID open_method;$/;"	m	class:IOIOHelper
open_time_span	src/Engine/Task/Ordered/StartConstraints.hpp	/^  RoughTimeSpan open_time_span;$/;"	m	struct:StartConstraints
open_vario_driver	src/Device/Driver/OpenVario.cpp	/^const struct DeviceRegister open_vario_driver = {$/;"	v	typeref:struct:DeviceRegister
openmode_	src/Terrain/jasper/jas_stream.h	/^	int openmode_;$/;"	m	struct:__anon97
openmode_	src/Terrain/jasper/jpc/jpc_bs.h	/^	int openmode_;$/;"	m	struct:__anon106
operator !=	src/Atmosphere/Temperature.hpp	/^  constexpr bool operator!=(Temperature other) const {$/;"	f	class:Temperature
operator !=	src/Device/SettingsMap.hpp	/^    bool operator!=(const const_iterator &other) const {$/;"	f	class:DeviceSettingsMap::const_iterator
operator !=	src/Dialogs/Device/DeviceListDialog.cpp	/^    bool operator!=(const Item &other) const {$/;"	f	union:final::Item
operator !=	src/Engine/Trace/Trace.cpp	/^  bool operator!=(const PointerIterator<I> &other) const {$/;"	f	class:PointerIterator
operator !=	src/Form/TabMenuDisplay.hpp	/^    bool operator!=(const MenuTabIndex &other) const {$/;"	f	struct:final::MenuTabIndex
operator !=	src/Geo/GeoPoint.hpp	/^  bool operator !=(const GeoPoint &other) const {$/;"	f	struct:GeoPoint
operator !=	src/Math/Angle.hpp	/^  operator!=(const Angle x) const$/;"	f	class:Angle
operator !=	src/NMEA/Validity.hpp	/^  constexpr bool operator!=(const Validity &other) const {$/;"	f	class:Validity
operator !=	src/PageSettings.hpp	/^    bool operator!=(const InfoBoxConfig &other) const {$/;"	f	struct:PageLayout::InfoBoxConfig
operator !=	src/PageSettings.hpp	/^  bool operator!=(const PageLayout &other) const {$/;"	f	struct:PageLayout
operator !=	src/ResourceId.hpp	/^  constexpr bool operator!=(ResourceId other) const {$/;"	f	class:ResourceId
operator !=	src/Rough/RoughAltitude.hpp	/^  bool operator !=(const RoughAltitude other) const {$/;"	f	class:RoughAltitude
operator !=	src/Terrain/TerrainSettings.hpp	/^  bool operator!=(const TerrainRendererSettings &other) const {$/;"	f	struct:TerrainRendererSettings
operator !=	src/Topography/TopographyFile.hpp	/^    bool operator!=(const const_iterator &other) const {$/;"	f	class:TopographyFile::const_iterator
operator !=	src/io/FileCache.cpp	/^  bool operator!=(const FileInfo &other) const {$/;"	f	struct:FileInfo
operator !=	src/net/AddressInfo.hxx	/^		constexpr bool operator!=(const_iterator other) const {$/;"	f	class:AddressInfoList::const_iterator
operator !=	src/system/Path.hpp	/^  bool operator!=(Path other) const {$/;"	f	class:AllocatedPath
operator !=	src/system/Path.hpp	/^  bool operator!=(Path other) const {$/;"	f	class:Path
operator !=	src/system/Path.hpp	/^  bool operator!=(std::nullptr_t) const {$/;"	f	class:AllocatedPath
operator !=	src/system/Path.hpp	/^  constexpr bool operator!=(std::nullptr_t) const {$/;"	f	class:Path
operator !=	src/time/RoughTime.hpp	/^  constexpr bool operator !=(RoughTime other) const {$/;"	f	class:RoughTime
operator !=	src/time/RoughTime.hpp	/^  constexpr bool operator!=(RoughTimeDelta other) const {$/;"	f	class:RoughTimeDelta
operator !=	src/ui/canvas/PortableColor.hpp	/^  constexpr bool operator !=(const BGR8Color other) const {$/;"	f	class:BGR8Color
operator !=	src/ui/canvas/PortableColor.hpp	/^  constexpr bool operator !=(const BGRA8Color other) const {$/;"	f	class:BGRA8Color
operator !=	src/ui/canvas/PortableColor.hpp	/^  constexpr bool operator !=(const Luminosity8 other) const {$/;"	f	class:Luminosity8
operator !=	src/ui/canvas/PortableColor.hpp	/^  constexpr bool operator !=(const RGB8Color other) const {$/;"	f	class:RGB8Color
operator !=	src/ui/canvas/gdi/Color.hpp	/^operator !=(const Color a, const Color b)$/;"	f
operator !=	src/ui/canvas/memory/Color.hpp	/^  bool operator !=(const Color other) const$/;"	f	class:Color
operator !=	src/ui/canvas/opengl/Color.hpp	/^  bool operator !=(const Color other) const$/;"	f	class:Color
operator !=	src/util/CastIterator.hpp	/^  bool operator!=(const CastIterator<VT,IT> &other) const {$/;"	f	class:CastIterator
operator !=	src/util/IterableSplitString.hxx	/^		constexpr bool operator!=(Iterator other) const {$/;"	f	class:BasicIterableSplitString::final
operator !=	src/util/OverwritingRingBuffer.hpp	/^    bool operator!=(const const_iterator &other) const {$/;"	f	class:TrivialOverwritingRingBuffer::const_iterator
operator !=	src/util/Serial.hpp	/^  bool operator!=(const Serial other) const {$/;"	f	class:Serial
operator !=	src/util/StaticString.hxx	/^	bool operator !=(const_pointer value) const {$/;"	f	class:StaticStringBase
operator &	src/net/IPv6Address.cxx	/^IPv6Address::operator&(const IPv6Address &other) const$/;"	f	class:IPv6Address
operator ()	src/Airspace/ActivePredicate.cpp	/^ActiveAirspacePredicate::operator()(const AbstractAirspace &airspace) const$/;"	f	class:ActiveAirspacePredicate
operator ()	src/Airspace/AirspaceVisibility.cpp	/^AirspaceVisibility::operator()(const AbstractAirspace &airspace) const$/;"	f	class:AirspaceVisibility
operator ()	src/Airspace/NearestAirspace.cpp	/^  bool operator()(const NearestAirspace &a, const NearestAirspace &b) const {$/;"	f	struct:CompareNearestAirspace
operator ()	src/Cloud/Client.hpp	/^    bool operator()(const CloudClient &a, const CloudClient &b) const {$/;"	f	struct:CloudClient::IdCompare
operator ()	src/Cloud/Client.hpp	/^    bool operator()(const CloudClient &a, const CloudClient &b) const {$/;"	f	struct:CloudClient::KeyEqual
operator ()	src/Cloud/Client.hpp	/^    bool operator()(uint64_t a, const CloudClient &b) const {$/;"	f	struct:CloudClient::KeyEqual
operator ()	src/Cloud/Client.hpp	/^    bool operator()(unsigned a, const CloudClient &b) const {$/;"	f	struct:CloudClient::IdCompare
operator ()	src/Cloud/Client.hpp	/^    constexpr std::size_t operator()(uint64_t key) const {$/;"	f	struct:CloudClient::KeyHash
operator ()	src/Cloud/Client.hpp	/^    std::size_t operator()(const CloudClient &client) const {$/;"	f	struct:CloudClient::KeyHash
operator ()	src/Cloud/Client.hpp	/^  result_type operator()(const CloudClientPtr &client) const {$/;"	f	struct:CloudClientIndexable
operator ()	src/Cloud/Thermal.hpp	/^  result_type operator()(const CloudThermalPtr &client) const {$/;"	f	struct:CloudThermalIndexable
operator ()	src/Engine/Airspace/AirspaceIntersectSort.hpp	/^    bool operator()(const Intersection& x, const Intersection& y) const {$/;"	f	struct:AirspaceIntersectSort::Rank
operator ()	src/Engine/Airspace/AirspacesInterface.hpp	/^    result_type operator()(const Airspace &airspace) const {$/;"	f	struct:AirspacesInterface::AirspaceIndexable
operator ()	src/Engine/Airspace/Predicate/AirspacePredicate.hpp	/^  bool operator()(const T &t) const {$/;"	f	class:AndPredicate
operator ()	src/Engine/Airspace/Predicate/AirspacePredicateHeightRange.cpp	/^AirspacePredicateHeightRange::operator()(const AbstractAirspace& t) const$/;"	f	class:AirspacePredicateHeightRange
operator ()	src/Engine/Airspace/Predicate/AirspacePredicateHeightRange.cpp	/^AirspacePredicateHeightRangeExcludeTwo::operator()(const AbstractAirspace& t) const$/;"	f	class:AirspacePredicateHeightRangeExcludeTwo
operator ()	src/Engine/Airspace/Predicate/OutsideAirspacePredicate.cpp	/^OutsideAirspacePredicate::operator()(const AbstractAirspace &airspace) const$/;"	f	class:OutsideAirspacePredicate
operator ()	src/Engine/Airspace/SoonestAirspace.cpp	/^  bool operator()(const SoonestAirspace &a, const SoonestAirspace &b) const {$/;"	f	struct:CompareSoonestAirspace
operator ()	src/Engine/Route/RoutePlanner.hpp	/^    result_type operator()(const argument_type l) const {$/;"	f	struct:RoutePlanner::RouteLinkBaseHasher
operator ()	src/Engine/Route/RoutePlanner.hpp	/^    result_type operator()(const argument_type p) const {$/;"	f	struct:RoutePlanner::RoutePointHasher
operator ()	src/Engine/Trace/Trace.hpp	/^      bool operator()(const TraceDelta &s1, const TraceDelta &s2) const {$/;"	f	struct:Trace::TraceDelta::DeltaRankOp
operator ()	src/Engine/Trace/Trace.hpp	/^    void operator()(typename Alloc::pointer td) {$/;"	f	struct:Trace::Disposer
operator ()	src/MapWindow/Items/AirspaceBuilder.cpp	/^  bool operator()(const AbstractAirspace& airspace) const {$/;"	f	class:AirspaceAtPointPredicate
operator ()	src/Renderer/AirspaceLabelList.cpp	/^  bool operator() (const AirspaceLabelList::Label &label1,$/;"	f	class:AirspaceLabelListCompare
operator ()	src/Renderer/AirspaceLabelRenderer.cpp	/^  bool operator()(const AbstractAirspace& airspace) const {$/;"	f	class:AirspaceMapVisible
operator ()	src/Renderer/AirspaceRenderer.cpp	/^  bool operator()(const AbstractAirspace& airspace) const {$/;"	f	class:AirspaceMapVisible
operator ()	src/Repository/FileRepository.cpp	/^  bool operator()(const AvailableFile &file) const {$/;"	f	struct:AvailableFileNameComparator
operator ()	src/Terrain/RasterTileCache.cpp	/^  bool operator()(unsigned short ai, unsigned short bi) const {$/;"	f	struct:RTDistanceSort
operator ()	src/Waypoint/WaypointList.cpp	/^  bool operator()(const WaypointListItem &a,$/;"	f	class:WaypointDistanceCompare
operator ()	src/lua/Ptr.cpp	/^Lua::StateDeleter::operator()(lua_State *state) const$/;"	f	class:Lua::StateDeleter
operator ()	src/ui/canvas/custom/Cache.cpp	/^    size_t operator()(StringView s) const {$/;"	f	struct:TextCacheKey::StringHash
operator ()	src/ui/canvas/custom/Cache.cpp	/^    size_t operator()(const TextCacheKey &key) const {$/;"	f	struct:TextCacheKey::Hash
operator ()	src/ui/canvas/memory/PixelOperations.hpp	/^  T operator()(T a, T b) const {$/;"	f	class:PixelAlphaOperation
operator ()	src/ui/canvas/memory/PixelOperations.hpp	/^  constexpr bool operator()(color_type c) const {$/;"	f	struct:NotWhiteCondition
operator ()	src/ui/canvas/memory/PixelOperations.hpp	/^  constexpr color_type operator()(Luminosity8 alpha) const {$/;"	f	struct:PixelOpaqueAlpha
operator ()	src/ui/canvas/memory/PixelOperations.hpp	/^  constexpr color_type operator()(color_type a, Luminosity8 alpha) const {$/;"	f	struct:PixelColoredAlpha
operator ()	src/ui/canvas/memory/PixelOperations.hpp	/^  constexpr color_type operator()(color_type a, color_type b) const {$/;"	f	struct:PixelPerChannelAdapter
operator ()	src/ui/canvas/memory/PixelOperations.hpp	/^  constexpr color_type operator()(color_type x) const {$/;"	f	struct:PixelPerChannelAdapter
operator ()	src/ui/canvas/memory/PixelOperations.hpp	/^  constexpr integer_type operator()(integer_type a, integer_type b) const {$/;"	f	struct:PixelBitNotOr
operator ()	src/ui/canvas/memory/PixelOperations.hpp	/^  constexpr integer_type operator()(integer_type x) const {$/;"	f	struct:PixelBitNot
operator ()	src/ui/canvas/memory/PixelOperations.hpp	/^  constexpr result_type operator()(argument_type x) const {$/;"	f	struct:PixelIntegerAdapter
operator ()	src/ui/canvas/memory/PixelOperations.hpp	/^  constexpr result_type operator()(first_argument_type a,$/;"	f	struct:PixelIntegerAdapter
operator ()	src/ui/canvas/memory/PixelOperations.hpp	/^  inline color_type operator()(typename SPT::color_type x) const {$/;"	f	struct:PixelOpaqueText
operator ()	src/ui/canvas/memory/PixelOperations.hpp	/^  result_type operator()(argument_type c) const {$/;"	f	struct:ColorKey
operator ()	src/util/BindMethod.hxx	/^	R operator()(Args... args) const {$/;"	f	class:BoundMethod
operator ()	src/util/Cache.hxx	/^		bool operator()(const Item &a, const Item &b) const {$/;"	f	struct:Cache::ItemEqual
operator ()	src/util/Cache.hxx	/^		bool operator()(const Key &a, const Item &b) const {$/;"	f	struct:Cache::ItemEqual
operator ()	src/util/Cache.hxx	/^		std::size_t operator()(const Item &a) const {$/;"	f	struct:Cache::ItemHash
operator ()	src/util/DeleteDisposer.hxx	/^	void operator()(T *t) {$/;"	f	class:DeleteDisposer
operator ()	src/util/EnumCast.hpp	/^  constexpr U &operator()(T &x) const {$/;"	f	struct:EnumCastHelper
operator ()	src/util/RadixTree.hpp	/^    void operator()(const T &value) const {$/;"	f	struct:RadixTree::KeyVisitorAdapter
operator *	src/Atmosphere/Temperature.hpp	/^  constexpr Temperature operator*(double other) const {$/;"	f	class:Temperature
operator *	src/Device/SettingsMap.hpp	/^    const V &operator*() const {$/;"	f	class:DeviceSettingsMap::const_iterator
operator *	src/Dialogs/Device/DeviceListDialog.cpp	/^    const Flags &operator*() const {$/;"	f	union:final::Item
operator *	src/Engine/Trace/Trace.cpp	/^  typename I::pointer operator*() {$/;"	f	class:PointerIterator
operator *	src/Engine/Trace/Trace.hpp	/^    const TracePoint &operator*() const {$/;"	f	class:Trace::const_iterator
operator *	src/Geo/Flat/FlatGeoPoint.hpp	/^  FlatGeoPoint operator*(const double t) const {$/;"	f	struct:FlatGeoPoint
operator *	src/Geo/Flat/FlatPoint.hpp	/^  constexpr FlatPoint operator*(double p) const {$/;"	f	struct:FlatPoint
operator *	src/Geo/GeoPoint.hpp	/^  GeoPoint operator* (const double x) const {$/;"	f	struct:GeoPoint
operator *	src/Math/Angle.hpp	/^  operator*(const double x) const$/;"	f	class:Angle
operator *	src/Math/Angle.hpp	/^  operator*(const int x) const$/;"	f	class:Angle
operator *	src/Math/Angle.hpp	/^  operator*(const unsigned x) const$/;"	f	class:Angle
operator *	src/Rough/RoughAltitude.hpp	/^  double operator*(const double other) const {$/;"	f	class:RoughAltitude
operator *	src/Rough/RoughAltitude.hpp	/^double operator*(const double a, const RoughAltitude b) {$/;"	f
operator *	src/Topography/TopographyFile.hpp	/^    const XShape &operator*() const {$/;"	f	class:TopographyFile::const_iterator
operator *	src/net/AddressInfo.hxx	/^		constexpr const AddressInfo &operator*() const {$/;"	f	class:AddressInfoList::const_iterator
operator *	src/util/CastIterator.hpp	/^  reference operator*() const {$/;"	f	class:CastIterator
operator *	src/util/IterableSplitString.hxx	/^		constexpr StringView operator*() const {$/;"	f	class:BasicIterableSplitString::final
operator *	src/util/OverwritingRingBuffer.hpp	/^    const T &operator*() const {$/;"	f	class:TrivialOverwritingRingBuffer::const_iterator
operator *=	src/Atmosphere/Temperature.hpp	/^  Temperature &operator*=(double other) {$/;"	f	class:Temperature
operator *=	src/Math/Angle.hpp	/^  operator*=(const double x)$/;"	f	class:Angle
operator +	src/Atmosphere/Temperature.hpp	/^  constexpr Temperature operator+(Temperature other) const {$/;"	f	class:Temperature
operator +	src/Device/Driver/FLARM/Logger.cpp	/^operator+(BrokenTime &a, BrokenTime &b)$/;"	f	file:
operator +	src/Device/Driver/Flytec/Logger.cpp	/^operator+(BrokenTime &a, BrokenTime &b)$/;"	f	file:
operator +	src/Geo/Flat/FlatLine.hpp	/^  constexpr FlatLine operator+(FlatPoint delta) const {$/;"	f	class:FlatLine
operator +	src/Geo/GeoPoint.hpp	/^  GeoPoint operator+ (const GeoPoint &delta) const {$/;"	f	struct:GeoPoint
operator +	src/Math/Angle.hpp	/^  operator+(const Angle x) const$/;"	f	class:Angle
operator +	src/Rough/RoughAltitude.hpp	/^  RoughAltitude operator+(const RoughAltitude other) const {$/;"	f	class:RoughAltitude
operator +	src/system/Path.cpp	/^Path::operator+(const_pointer other) const$/;"	f	class:Path
operator +	src/system/Path.hpp	/^  AllocatedPath operator+(const_pointer other) const {$/;"	f	class:AllocatedPath
operator +	src/time/BrokenDateTime.cpp	/^BrokenDateTime::operator+(int seconds) const$/;"	f	class:BrokenDateTime
operator +	src/time/BrokenTime.cpp	/^BrokenTime::operator+(int seconds) const$/;"	f	class:BrokenTime
operator +	src/time/BrokenTime.cpp	/^BrokenTime::operator+(unsigned seconds) const$/;"	f	class:BrokenTime
operator +	src/time/RoughTime.hpp	/^operator+(RoughTime t, RoughTimeDelta delta)$/;"	f
operator +	src/ui/dim/gdi/BulkPoint.hpp	/^  constexpr BulkPixelPoint operator+(BulkPixelPoint other) const {$/;"	f	struct:BulkPixelPoint
operator +	src/util/ScopeExit.hxx	/^	ScopeExitGuard<F> operator+(F &&f) {$/;"	f	struct:ScopeExitTag
operator ++	src/Engine/Trace/Trace.cpp	/^  PointerIterator<I> &operator++() {$/;"	f	class:PointerIterator
operator ++	src/Topography/TopographyFile.hpp	/^    const_iterator &operator++() {$/;"	f	class:TopographyFile::const_iterator
operator ++	src/net/AddressInfo.hxx	/^		const_iterator &operator++() {$/;"	f	class:AddressInfoList::const_iterator
operator ++	src/time/RoughTime.hpp	/^  RoughTime &operator++() {$/;"	f	class:RoughTime
operator ++	src/util/CastIterator.hpp	/^  CastIterator<VT,IT> &operator++() {$/;"	f	class:CastIterator
operator ++	src/util/CastIterator.hpp	/^  CastIterator<VT,IT> operator++(int) {$/;"	f	class:CastIterator
operator ++	src/util/IterableSplitString.hxx	/^		Iterator &operator++() {$/;"	f	class:BasicIterableSplitString::final
operator ++	src/util/OverwritingRingBuffer.hpp	/^    typename TrivialOverwritingRingBuffer::const_iterator &operator++() {$/;"	f	class:TrivialOverwritingRingBuffer::const_iterator
operator ++	src/util/Serial.hpp	/^  Serial &operator++() {$/;"	f	class:Serial
operator +=	src/Atmosphere/Temperature.hpp	/^  Temperature &operator+=(Temperature other) {$/;"	f	class:Temperature
operator +=	src/Geo/GeoPoint.hpp	/^  const GeoPoint& operator+= (const GeoPoint &delta) {$/;"	f	struct:GeoPoint
operator +=	src/Math/Angle.hpp	/^  operator+=(Angle x)$/;"	f	class:Angle
operator +=	src/Math/Line2D.hpp	/^  Line2D<P> &operator+=(P delta) {$/;"	f	struct:Line2D
operator +=	src/Rough/RoughAltitude.hpp	/^  RoughAltitude &operator+=(const RoughAltitude other) {$/;"	f	class:RoughAltitude
operator +=	src/util/StaticString.hxx	/^	NarrowString<max> &operator +=(const_pointer new_value) {$/;"	f	class:NarrowString
operator +=	src/util/StaticString.hxx	/^	NarrowString<max> &operator +=(value_type ch) {$/;"	f	class:NarrowString
operator +=	src/util/StaticString.hxx	/^	StaticString<max> &operator +=(const_pointer new_value) {$/;"	f	class:StaticString
operator +=	src/util/StaticString.hxx	/^	StaticString<max> &operator +=(value_type ch) {$/;"	f	class:StaticString
operator +=	src/util/StaticString.hxx	/^	StaticStringBase<T, max> &operator +=(const_pointer new_value) {$/;"	f	class:StaticStringBase
operator +=	src/util/StaticString.hxx	/^	StaticStringBase<T, max> &operator +=(value_type ch) {$/;"	f	class:StaticStringBase
operator -	src/Atmosphere/Temperature.hpp	/^  constexpr Temperature operator-() const {$/;"	f	class:Temperature
operator -	src/Atmosphere/Temperature.hpp	/^  constexpr Temperature operator-(Temperature other) const {$/;"	f	class:Temperature
operator -	src/Geo/Flat/FlatLine.hpp	/^  constexpr FlatLine operator-(FlatPoint delta) const {$/;"	f	class:FlatLine
operator -	src/Geo/GeoPoint.hpp	/^  GeoPoint operator- (const GeoPoint &delta) const {$/;"	f	struct:GeoPoint
operator -	src/Math/Angle.hpp	/^  operator-() const$/;"	f	class:Angle
operator -	src/Math/Angle.hpp	/^  operator-(const Angle x) const$/;"	f	class:Angle
operator -	src/Rough/RoughAltitude.hpp	/^  RoughAltitude operator-(const RoughAltitude other) const {$/;"	f	class:RoughAltitude
operator -	src/Rough/RoughAngle.hpp	/^  RoughAngle operator-(RoughAngle other) const {$/;"	f	class:RoughAngle
operator -	src/time/BrokenDateTime.cpp	/^BrokenDateTime::operator-(const BrokenDateTime &other) const$/;"	f	class:BrokenDateTime
operator -	src/time/BrokenDateTime.hpp	/^  BrokenDateTime operator-(int seconds) const {$/;"	f	struct:BrokenDateTime
operator -	src/time/BrokenTime.hpp	/^  BrokenTime operator-(int seconds) const {$/;"	f	struct:BrokenTime
operator -	src/time/BrokenTime.hpp	/^  BrokenTime operator-(unsigned seconds) const {$/;"	f	struct:BrokenTime
operator -	src/time/RoughTime.hpp	/^  constexpr RoughTimeDelta operator-() const {$/;"	f	class:RoughTimeDelta
operator -	src/time/RoughTime.hpp	/^operator-(RoughTime t, RoughTimeDelta delta)$/;"	f
operator -	src/ui/dim/gdi/BulkPoint.hpp	/^  constexpr BulkPixelPoint operator-(BulkPixelPoint other) const {$/;"	f	struct:BulkPixelPoint
operator --	src/Engine/Trace/Trace.cpp	/^  PointerIterator<I> &operator--() {$/;"	f	class:PointerIterator
operator --	src/time/RoughTime.hpp	/^  RoughTime &operator--() {$/;"	f	class:RoughTime
operator --	src/util/CastIterator.hpp	/^  CastIterator<VT,IT> &operator--() {$/;"	f	class:CastIterator
operator --	src/util/CastIterator.hpp	/^  CastIterator<VT,IT> operator--(int) {$/;"	f	class:CastIterator
operator -=	src/Atmosphere/Temperature.hpp	/^  Temperature &operator-=(Temperature other) {$/;"	f	class:Temperature
operator -=	src/Math/Angle.hpp	/^  operator-=(Angle x)$/;"	f	class:Angle
operator -=	src/Math/Line2D.hpp	/^  Line2D<P> &operator-=(P delta) {$/;"	f	struct:Line2D
operator -=	src/Rough/RoughAltitude.hpp	/^  RoughAltitude &operator-=(const RoughAltitude other) {$/;"	f	class:RoughAltitude
operator ->	src/Device/SettingsMap.hpp	/^    const V *operator->() const {$/;"	f	class:DeviceSettingsMap::const_iterator
operator ->	src/Dialogs/Device/DeviceListDialog.cpp	/^    const Flags &operator->() const {$/;"	f	union:final::Item
operator ->	src/Engine/Trace/Trace.hpp	/^    const TracePoint *operator->() const {$/;"	f	class:Trace::const_iterator
operator ->	src/Topography/TopographyFile.hpp	/^    const XShape *operator->() const {$/;"	f	class:TopographyFile::const_iterator
operator ->	src/net/AddressInfo.hxx	/^		constexpr const AddressInfo *operator->() const {$/;"	f	class:AddressInfoList::const_iterator
operator ->	src/util/CastIterator.hpp	/^  pointer operator->() const {$/;"	f	class:CastIterator
operator ->	src/util/IterableSplitString.hxx	/^		constexpr const StringView *operator->() const {$/;"	f	class:BasicIterableSplitString::final
operator ->	src/util/Manual.hxx	/^	T *operator->() {$/;"	f	class:Manual
operator ->	src/util/Manual.hxx	/^	const T *operator->() const {$/;"	f	class:Manual
operator /	src/Atmosphere/Temperature.hpp	/^  constexpr Temperature operator\/(double other) const {$/;"	f	class:Temperature
operator /	src/Math/Angle.hpp	/^  operator\/(const Angle x) const$/;"	f	class:Angle
operator /	src/Math/Angle.hpp	/^  operator\/(const double x) const$/;"	f	class:Angle
operator /	src/Math/Angle.hpp	/^  operator\/(const int x) const$/;"	f	class:Angle
operator /	src/Math/Angle.hpp	/^  operator\/(const unsigned x) const$/;"	f	class:Angle
operator /	src/Rough/RoughAltitude.hpp	/^  double operator\/(const RoughAltitude other) const {$/;"	f	class:RoughAltitude
operator /	src/Rough/RoughAltitude.hpp	/^  double operator\/(const double other) const {$/;"	f	class:RoughAltitude
operator /=	src/Atmosphere/Temperature.hpp	/^  Temperature &operator\/=(double other) {$/;"	f	class:Temperature
operator <	src/Atmosphere/Temperature.hpp	/^  constexpr bool operator<(Temperature other) const {$/;"	f	class:Temperature
operator <	src/Dialogs/Plane/PlaneListDialog.cpp	/^    bool operator<(const ListItem &i2) const {$/;"	f	struct:final::ListItem
operator <	src/Dialogs/ProfileListDialog.cpp	/^    bool operator<(const ListItem &i2) const {$/;"	f	struct:final::ListItem
operator <	src/Dialogs/Weather/MapOverlayWidget.cpp	/^    bool operator<(const Item &other) const {$/;"	f	struct:final::Item
operator <	src/Dialogs/Weather/NOAAList.cpp	/^    bool operator<(const ListItem &i2) const {$/;"	f	struct:final::ListItem
operator <	src/Engine/Airspace/AirspaceWarning.cpp	/^AirspaceWarning::operator<(const AirspaceWarning &other) const$/;"	f	class:AirspaceWarning
operator <	src/FLARM/FlarmId.hpp	/^  bool operator<(FlarmId other) const {$/;"	f	class:FlarmId
operator <	src/GliderLink/GliderLinkId.hpp	/^  bool operator<(GliderLinkId other) const {$/;"	f	class:GliderLinkId
operator <	src/Kobo/ToolsDialog.cpp	/^  bool operator<(const ListItem &i2) const {$/;"	f	struct:ListItem
operator <	src/Math/Angle.hpp	/^  operator<(const Angle x) const$/;"	f	class:Angle
operator <	src/Rough/RoughAltitude.hpp	/^  bool operator <(const RoughAltitude other) const {$/;"	f	class:RoughAltitude
operator <	src/Rough/RoughDistance.hpp	/^  bool operator <(const RoughDistance other) const {$/;"	f	class:RoughDistance
operator <	src/Task/TaskStore.hpp	/^    bool operator<(const TaskStore::Item &other) const {$/;"	f	struct:TaskStore::Item
operator <	src/time/BrokenDate.hpp	/^  bool operator<(const BrokenDate other) const {$/;"	f	struct:BrokenDate
operator <	src/time/BrokenTime.hpp	/^  bool operator<(const BrokenTime other) const {$/;"	f	struct:BrokenTime
operator <	src/time/RoughTime.hpp	/^  constexpr bool operator <(RoughTime other) const {$/;"	f	class:RoughTime
operator <	src/ui/event/shared/TimerQueue.hpp	/^    bool operator<(const TimerRecord &other) const {$/;"	f	struct:UI::TimerQueue::TimerRecord
operator <<	src/Cloud/Client.cpp	/^operator<<(Serialiser &s, SocketAddress address)$/;"	f
operator <<	src/Cloud/Dump.hpp	/^operator<<(std::ostream &stream, SocketAddress address)$/;"	f
operator <<	src/Cloud/Dump.hpp	/^operator<<(std::ostream &stream, const AllocatedSocketAddress &address)$/;"	f
operator <<	src/Cloud/Dump.hpp	/^operator<<(std::ostream &stream, const GeoAngle<positive, negative> value)$/;"	f
operator <<	src/Cloud/Dump.hpp	/^operator<<(std::ostream &stream, const GeoPoint &p)$/;"	f
operator <<	src/Cloud/Serialiser.hpp	/^  Serialiser &operator<<(std::chrono::steady_clock::time_point t) {$/;"	f	class:Serialiser
operator <<	src/Cloud/Serialiser.hpp	/^  Serialiser &operator<<(std::chrono::system_clock::time_point t) {$/;"	f	class:Serialiser
operator <<	src/Terrain/RasterLocation.hpp	/^  constexpr RasterLocation operator<<(unsigned bits) const {$/;"	f	struct:RasterLocation
operator <<	src/Terrain/RasterLocation.hpp	/^  constexpr SignedRasterLocation operator<<(int bits) const {$/;"	f	struct:SignedRasterLocation
operator <<	src/util/RadixTree.hpp	/^    operator<<(typename std::basic_ostream<Char, Traits>& out,$/;"	f	struct:RadixTree::Node
operator <<	src/util/RadixTree.hpp	/^  operator<<(typename std::basic_ostream<Char, Traits>& out,$/;"	f	class:RadixTree
operator <=	src/Atmosphere/Temperature.hpp	/^  constexpr bool operator<=(Temperature other) const {$/;"	f	class:Temperature
operator <=	src/Math/Angle.hpp	/^  operator<=(const Angle x) const$/;"	f	class:Angle
operator <=	src/Rough/RoughAltitude.hpp	/^  bool operator <=(const RoughAltitude other) const {$/;"	f	class:RoughAltitude
operator <=	src/time/RoughTime.hpp	/^  constexpr bool operator <=(RoughTime other) const {$/;"	f	class:RoughTime
operator =	src/Config/Registry.hpp	/^  RegistryKey &operator=(RegistryKey &&other) {$/;"	f	class:RegistryKey
operator =	src/Device/Driver/LX/Protocol.hpp	/^    MemoryAddress24 &operator=(const MemoryAddress32 &other) {$/;"	f	struct:LX::MemoryAddress24
operator =	src/Device/Driver/LX/Protocol.hpp	/^    MemoryAddress24 &operator=(const uint8_t other[3]) {$/;"	f	struct:LX::MemoryAddress24
operator =	src/Engine/Route/Route.hpp	/^  StaticRoute &operator=(const Route &src) {$/;"	f	struct:StaticRoute
operator =	src/Form/DataField/Enum.hpp	/^    Entry &operator=(Entry &&other) {$/;"	f	class:final::Entry
operator =	src/Form/DataField/File.hpp	/^    Item &operator=(Item &&src) {$/;"	f	struct:final::Item
operator =	src/Logger/LoggerImpl.cpp	/^LoggerImpl::PreTakeoffBuffer::operator=(const NMEAInfo &src)$/;"	f	class:LoggerImpl::PreTakeoffBuffer
operator =	src/Rough/RoughAltitude.hpp	/^  RoughAltitude &operator=(double other) {$/;"	f	class:RoughAltitude
operator =	src/Rough/RoughAltitude.hpp	/^  RoughAltitude &operator=(int other) {$/;"	f	class:RoughAltitude
operator =	src/Rough/RoughAltitude.hpp	/^  RoughAltitude &operator=(short other) {$/;"	f	class:RoughAltitude
operator =	src/Rough/RoughAngle.hpp	/^  RoughAngle &operator=(Angle other) {$/;"	f	class:RoughAngle
operator =	src/Rough/RoughDistance.hpp	/^  RoughDistance &operator=(double other) {$/;"	f	class:RoughDistance
operator =	src/Rough/RoughSpeed.hpp	/^  RoughSpeed &operator=(double other) {$/;"	f	class:RoughSpeed
operator =	src/Rough/RoughVSpeed.hpp	/^  RoughVSpeed &operator=(double other) {$/;"	f	class:RoughVSpeed
operator =	src/XML/Node.hpp	/^  XMLNode &operator=(XMLNode &&other) {$/;"	f	class:XMLNode
operator =	src/io/FileHandle.hpp	/^  FileHandle &operator=(FileHandle &&other) {$/;"	f	class:FileHandle
operator =	src/io/TextWriter.hpp	/^  TextWriter &operator=(TextWriter &&other) {$/;"	f	class:TextWriter
operator =	src/io/ZipArchive.hpp	/^  ZipArchive &operator=(ZipArchive &&src) {$/;"	f	class:ZipArchive
operator =	src/net/AddressInfo.hxx	/^	AddressInfoList &operator=(AddressInfoList &&src) {$/;"	f	class:AddressInfoList
operator =	src/net/http/FormData.hpp	/^  MultiPartFormData &operator=(MultiPartFormData &&src) {$/;"	f	class:Net::MultiPartFormData
operator =	src/system/Path.hpp	/^  AllocatedPath &operator=(Path src) {$/;"	f	class:AllocatedPath
operator =	src/system/Path.hpp	/^  AllocatedPath &operator=(std::nullptr_t n) {$/;"	f	class:AllocatedPath
operator =	src/ui/canvas/custom/Cache.cpp	/^  RenderedText &operator=(RenderedText &&other) {$/;"	f	struct:RenderedText
operator =	src/ui/canvas/custom/Cache.cpp	/^  TextCacheKey &operator=(TextCacheKey &&other) {$/;"	f	struct:TextCacheKey
operator =	src/ui/canvas/gdi/Color.hpp	/^  &operator =(COLORREF c)$/;"	f	class:Color
operator =	src/ui/event/poll/libinput/UdevContext.cpp	/^UdevContext::operator=(const UdevContext &other)$/;"	f	class:UdevContext
operator =	src/util/ReusableArray.hpp	/^  ReusableArray<T> &operator=(ReusableArray<T> &&other) {$/;"	f	class:ReusableArray
operator =	src/util/StaticString.hxx	/^	NarrowString<max> &operator =(const_pointer new_value) {$/;"	f	class:NarrowString
operator =	src/util/StaticString.hxx	/^	StaticString<max> &operator =(const_pointer new_value) {$/;"	f	class:StaticString
operator =	src/util/StaticString.hxx	/^	StaticStringBase<T, max> &operator =(const_pointer new_value) {$/;"	f	class:StaticStringBase
operator ==	src/Atmosphere/Temperature.hpp	/^  constexpr bool operator==(Temperature other) const {$/;"	f	class:Temperature
operator ==	src/Device/SettingsMap.hpp	/^    bool operator==(const const_iterator &other) const {$/;"	f	class:DeviceSettingsMap::const_iterator
operator ==	src/Dialogs/Airspace/dlgAirspaceWarnings.cpp	/^  bool operator==(const AbstractAirspace &other) const {$/;"	f	struct:WarningItem
operator ==	src/Dialogs/Device/DeviceListDialog.cpp	/^    bool operator==(const Item &other) const {$/;"	f	union:final::Item
operator ==	src/Engine/Airspace/Airspace.hpp	/^  bool operator==(Airspace const &a) const {$/;"	f	class:final
operator ==	src/Engine/Trace/Trace.cpp	/^  bool operator==(const PointerIterator<I> &other) const {$/;"	f	class:PointerIterator
operator ==	src/Engine/Waypoint/Waypoint.hpp	/^  operator==(const Waypoint&wp) const$/;"	f	struct:Waypoint
operator ==	src/FLARM/FlarmId.hpp	/^  bool operator==(FlarmId other) const {$/;"	f	class:FlarmId
operator ==	src/Form/TabMenuDisplay.hpp	/^    bool operator==(const MenuTabIndex &other) const {$/;"	f	struct:final::MenuTabIndex
operator ==	src/Geo/GeoPoint.hpp	/^  bool operator== (const GeoPoint other) const {$/;"	f	struct:GeoPoint
operator ==	src/GliderLink/GliderLinkId.hpp	/^  bool operator==(GliderLinkId other) const {$/;"	f	class:GliderLinkId
operator ==	src/Math/Angle.hpp	/^  operator==(const Angle x) const$/;"	f	class:Angle
operator ==	src/NMEA/Validity.hpp	/^  constexpr bool operator==(const Validity &other) const {$/;"	f	class:Validity
operator ==	src/PageSettings.hpp	/^    bool operator==(const InfoBoxConfig &other) const {$/;"	f	struct:PageLayout::InfoBoxConfig
operator ==	src/PageSettings.hpp	/^  bool operator==(const PageLayout &other) const {$/;"	f	struct:PageLayout
operator ==	src/ResourceId.hpp	/^  constexpr bool operator==(ResourceId other) const {$/;"	f	class:ResourceId
operator ==	src/Rough/RoughAltitude.hpp	/^  bool operator ==(const RoughAltitude other) const {$/;"	f	class:RoughAltitude
operator ==	src/Terrain/TerrainSettings.hpp	/^  bool operator==(const TerrainRendererSettings &other) const {$/;"	f	struct:TerrainRendererSettings
operator ==	src/Topography/TopographyFile.hpp	/^    bool operator==(const const_iterator &other) const {$/;"	f	class:TopographyFile::const_iterator
operator ==	src/Units/Settings.cpp	/^UnitSetting::operator==(const UnitSetting &right) const$/;"	f	class:UnitSetting
operator ==	src/io/FileCache.cpp	/^  bool operator==(const FileInfo &other) const {$/;"	f	struct:FileInfo
operator ==	src/net/AddressInfo.hxx	/^		constexpr bool operator==(const_iterator other) const {$/;"	f	class:AddressInfoList::const_iterator
operator ==	src/system/Path.cpp	/^Path::operator==(Path other) const$/;"	f	class:Path
operator ==	src/system/Path.hpp	/^  bool operator==(Path other) const {$/;"	f	class:AllocatedPath
operator ==	src/system/Path.hpp	/^  bool operator==(std::nullptr_t) const {$/;"	f	class:AllocatedPath
operator ==	src/system/Path.hpp	/^  constexpr bool operator==(std::nullptr_t) const {$/;"	f	class:Path
operator ==	src/time/BrokenDate.hpp	/^  bool operator==(const BrokenDate other) const {$/;"	f	struct:BrokenDate
operator ==	src/time/BrokenDateTime.hpp	/^  bool operator==(const BrokenDateTime other) const {$/;"	f	struct:BrokenDateTime
operator ==	src/time/BrokenTime.hpp	/^  bool operator==(const BrokenTime other) const {$/;"	f	struct:BrokenTime
operator ==	src/time/RoughTime.hpp	/^  constexpr bool operator ==(RoughTime other) const {$/;"	f	class:RoughTime
operator ==	src/time/RoughTime.hpp	/^  constexpr bool operator==(RoughTimeDelta other) const {$/;"	f	class:RoughTimeDelta
operator ==	src/ui/canvas/PortableColor.hpp	/^  constexpr bool operator ==(const BGR8Color other) const {$/;"	f	class:BGR8Color
operator ==	src/ui/canvas/PortableColor.hpp	/^  constexpr bool operator ==(const BGRA8Color other) const {$/;"	f	class:BGRA8Color
operator ==	src/ui/canvas/PortableColor.hpp	/^  constexpr bool operator ==(const Luminosity8 other) const {$/;"	f	class:Luminosity8
operator ==	src/ui/canvas/PortableColor.hpp	/^  constexpr bool operator ==(const RGB8Color other) const {$/;"	f	class:RGB8Color
operator ==	src/ui/canvas/custom/Cache.cpp	/^  bool operator==(const TextCacheKey &other) const {$/;"	f	struct:TextCacheKey
operator ==	src/ui/canvas/gdi/Color.hpp	/^operator ==(const Color a, const Color b)$/;"	f
operator ==	src/ui/canvas/memory/Color.hpp	/^  bool operator ==(const Color other) const$/;"	f	class:Color
operator ==	src/ui/canvas/opengl/Color.hpp	/^  bool operator ==(const Color other) const$/;"	f	class:Color
operator ==	src/util/CastIterator.hpp	/^  bool operator==(const CastIterator<VT,IT> &other) const {$/;"	f	class:CastIterator
operator ==	src/util/IterableSplitString.hxx	/^		constexpr bool operator==(Iterator other) const {$/;"	f	class:BasicIterableSplitString::final
operator ==	src/util/OverwritingRingBuffer.hpp	/^    bool operator==(const const_iterator &other) const {$/;"	f	class:TrivialOverwritingRingBuffer::const_iterator
operator ==	src/util/Serial.hpp	/^  bool operator==(const Serial other) const {$/;"	f	class:Serial
operator ==	src/util/StaticString.hxx	/^	bool operator ==(const_pointer value) const {$/;"	f	class:StaticStringBase
operator >	src/Atmosphere/Temperature.hpp	/^  constexpr bool operator>(Temperature other) const {$/;"	f	class:Temperature
operator >	src/Math/Angle.hpp	/^  operator>(const Angle x) const$/;"	f	class:Angle
operator >	src/Rough/RoughAltitude.hpp	/^  bool operator >(const RoughAltitude other) const {$/;"	f	class:RoughAltitude
operator >	src/Rough/RoughDistance.hpp	/^  bool operator >(const RoughDistance other) const {$/;"	f	class:RoughDistance
operator >	src/time/BrokenDate.hpp	/^  bool operator>(const BrokenDate other) const {$/;"	f	struct:BrokenDate
operator >	src/time/BrokenTime.hpp	/^  bool operator>(const BrokenTime other) const {$/;"	f	struct:BrokenTime
operator >	src/time/RoughTime.hpp	/^  constexpr bool operator >(RoughTime other) const {$/;"	f	class:RoughTime
operator >=	src/Atmosphere/Temperature.hpp	/^  constexpr bool operator>=(Temperature other) const {$/;"	f	class:Temperature
operator >=	src/Computer/StateClock.hpp	/^  bool operator>=(double other) const {$/;"	f	class:StateClock
operator >=	src/Math/Angle.hpp	/^  operator>=(const Angle x) const$/;"	f	class:Angle
operator >=	src/Rough/RoughAltitude.hpp	/^  bool operator >=(const RoughAltitude other) const {$/;"	f	class:RoughAltitude
operator >=	src/time/RoughTime.hpp	/^  constexpr bool operator >=(RoughTime other) const {$/;"	f	class:RoughTime
operator >>	src/Cloud/Client.cpp	/^operator>>(Deserialiser &s, AllocatedSocketAddress &address)$/;"	f
operator >>	src/Cloud/Serialiser.hpp	/^  Deserialiser &operator>>(std::chrono::steady_clock::time_point &t) {$/;"	f	class:Deserialiser
operator >>	src/Cloud/Serialiser.hpp	/^  Deserialiser &operator>>(std::chrono::system_clock::time_point &t) {$/;"	f	class:Deserialiser
operator >>	src/Terrain/RasterLocation.hpp	/^  constexpr RasterLocation operator>>(unsigned bits) const {$/;"	f	struct:RasterLocation
operator >>	src/Terrain/RasterLocation.hpp	/^  constexpr SignedRasterLocation operator>>(int bits) const {$/;"	f	struct:SignedRasterLocation
operator Angle	src/Rough/RoughAngle.hpp	/^  operator Angle() const {$/;"	f	class:RoughAngle
operator COLORREF	src/ui/canvas/gdi/Color.hpp	/^  constexpr operator COLORREF() const { return value; }$/;"	f	class:HWColor
operator COLORREF	src/ui/canvas/gdi/Color.hpp	/^  operator COLORREF() const { return value; }$/;"	f	class:Color
operator ConstBuffer<void>	src/ResourceId.hpp	/^  operator ConstBuffer<void>() const {$/;"	f	class:ResourceId
operator HDC	src/ui/canvas/gdi/Canvas.hpp	/^  operator HDC() const {$/;"	f	class:Canvas
operator HDC	src/ui/canvas/gdi/RootDC.hpp	/^  operator HDC() {$/;"	f	class:RootDC
operator HKEY	src/Config/Registry.hpp	/^  operator HKEY() const {$/;"	f	class:RegistryKey
operator Mutex &	src/Computer/TraceComputer.hpp	/^  operator Mutex &() const {$/;"	f	class:TraceComputer
operator Mutex &	src/Device/SettingsMap.hpp	/^  operator Mutex &() const {$/;"	f	class:DeviceSettingsMap
operator Path	src/system/ConvertPathName.hpp	/^  operator Path() const {$/;"	f	class:PathName
operator Path	src/system/Path.hpp	/^  operator Path() const {$/;"	f	class:AllocatedPath
operator PixelPoint	src/ui/dim/gdi/BulkPoint.hpp	/^  constexpr operator PixelPoint() const {$/;"	f	struct:BulkPixelPoint
operator PixelPoint	src/ui/dim/opengl/BulkPoint.hpp	/^  constexpr operator PixelPoint() const {$/;"	f	struct:BulkPixelPoint
operator RasterLocation	src/Terrain/RasterLocation.hpp	/^  constexpr operator RasterLocation() const {$/;"	f	struct:SignedRasterLocation
operator SLObjectItf	src/Audio/SLES/Object.hpp	/^    operator SLObjectItf() {$/;"	f	class:SLES::Object
operator SocketAddress	src/net/AddressInfo.hxx	/^	constexpr operator SocketAddress() const {$/;"	f	class:AddressInfo
operator T &	src/util/Manual.hxx	/^	operator T &() {$/;"	f	class:Manual
operator TextCache::Result	src/ui/canvas/custom/Cache.cpp	/^  operator TextCache::Result() const {$/;"	f	struct:RenderedText
operator Value::const_pointer	src/system/ConvertPathName.hpp	/^  operator Value::const_pointer() const {$/;"	f	class:NarrowPathName
operator []	src/Device/MultipleDevices.hpp	/^  DeviceDescriptor &operator[](unsigned i) const {$/;"	f	class:final
operator []	src/Form/DataField/ComboList.hpp	/^  const Item& operator[](unsigned i) const {$/;"	f	class:ComboList
operator []	src/Menu/MenuData.hpp	/^  const MenuItem &operator[](unsigned i) const {$/;"	f	class:Menu
operator []	src/Renderer/AirspaceLabelList.hpp	/^  const Label &operator[](unsigned i) const {$/;"	f	class:AirspaceLabelList
operator []	src/Topography/TopographyStore.hpp	/^  const TopographyFile &operator [](unsigned i) const {$/;"	f	class:TopographyStore
operator []	src/util/StaticString.hxx	/^	reference operator[](size_type i) {$/;"	f	class:StaticStringBase
operator []	src/util/StaticString.hxx	/^	value_type operator[](size_type i) const {$/;"	f	class:StaticStringBase
operator bool	src/NMEA/Validity.hpp	/^  constexpr operator bool() const {$/;"	f	class:Validity
operator const LOGFONT &	src/Look/FontDescription.hpp	/^  explicit operator const LOGFONT &() const {$/;"	f	class:FontDescription
operator const T &	src/util/Manual.hxx	/^	operator const T &() const {$/;"	f	class:Manual
operator const char *	src/net/SocketError.hxx	/^	operator const char *() const {$/;"	f	class:SocketErrorMessage
operator const_pointer	src/util/StaticString.hxx	/^	operator const_pointer() const {$/;"	f	class:StaticStringBase
operator double	src/Rough/RoughAltitude.hpp	/^  operator double() const {$/;"	f	class:RoughAltitude
operator double	src/Rough/RoughDistance.hpp	/^  operator double() const {$/;"	f	class:RoughDistance
operator double	src/Rough/RoughSpeed.hpp	/^  constexpr operator double() const {$/;"	f	class:RoughSpeed
operator double	src/Rough/RoughVSpeed.hpp	/^  operator double() const {$/;"	f	class:RoughVSpeed
operator int	src/Rough/RoughAltitude.hpp	/^  operator int() const {$/;"	f	class:RoughAltitude
operator short	src/Rough/RoughAltitude.hpp	/^  operator short() const {$/;"	f	class:RoughAltitude
operator unsigned	src/ResourceId.hpp	/^  constexpr explicit operator unsigned() const {$/;"	f	class:ResourceId
ops	src/Terrain/jasper/jas_image.h	/^	jas_image_fmtops_t ops;$/;"	m	struct:__anon104
ops	src/Terrain/jasper/jp2/jp2_cod.h	/^	const struct jp2_boxops_s *ops;$/;"	m	struct:__anon94	typeref:struct:__anon94::jp2_boxops_s
ops	src/Terrain/jasper/jp2/jp2_cod.h	/^	jp2_boxops_t ops;$/;"	m	struct:jp2_boxinfo_s
ops	src/Terrain/jasper/jpc/jpc_cs.c	/^	jpc_msops_t ops;$/;"	m	struct:__anon133	file:
ops	src/Terrain/jasper/jpc/jpc_cs.h	/^	const struct jpc_msops_s *ops;$/;"	m	struct:__anon156	typeref:struct:__anon156::jpc_msops_s
ops_	src/Terrain/jasper/jas_stream.h	/^	const jas_stream_ops_t *ops_;$/;"	m	struct:__anon97
opt_size	src/Engine/Trace/Trace.hpp	/^  const unsigned opt_size;$/;"	m	class:Trace
optid_t	src/Terrain/jasper/jpc/jpc_dec.c	/^} optid_t;$/;"	t	typeref:enum:__anon132	file:
optimise_targets_bearing	src/Engine/Task/TaskBehaviour.hpp	/^  bool optimise_targets_bearing;$/;"	m	struct:TaskBehaviour
optimise_targets_margin	src/Engine/Task/TaskBehaviour.hpp	/^  unsigned optimise_targets_margin;$/;"	m	struct:TaskBehaviour
optimise_targets_range	src/Engine/Task/TaskBehaviour.hpp	/^  bool optimise_targets_range;$/;"	m	struct:TaskBehaviour
optimized	src/Dialogs/Task/TargetDialog.cpp	/^    PixelRect optimized;$/;"	m	struct:TargetWidget::Layout	file:
optimized	src/Dialogs/Task/TargetDialog.cpp	/^  CheckBoxControl optimized;$/;"	m	class:TargetWidget	file:
optional_start_points	src/Engine/Task/Ordered/OrderedTask.hpp	/^  OrderedTaskPointVector optional_start_points;$/;"	m	class:final
optional_starts	src/Dialogs/Task/TaskPointDialog.cpp	/^    PixelRect optional_starts, score_exit;$/;"	m	struct:final::Layout	file:
optional_starts	src/Dialogs/Task/TaskPointDialog.cpp	/^  Button optional_starts;$/;"	m	class:final	file:
orange_brush	src/Look/WaypointLook.hpp	/^  Brush white_brush, light_gray_brush, magenta_brush, orange_brush;$/;"	m	struct:WaypointLook
ordered_defaults	src/Engine/Task/TaskBehaviour.hpp	/^  OrderedTaskSettings ordered_defaults;$/;"	m	struct:TaskBehaviour
ordered_settings	src/Engine/Task/Ordered/OrderedTask.cpp	/^   ordered_settings(tb.ordered_defaults)$/;"	f
ordered_settings	src/Engine/Task/Ordered/OrderedTask.hpp	/^  OrderedTaskSettings ordered_settings;$/;"	m	class:final
ordered_summary	src/Engine/Task/Stats/CommonStats.hpp	/^  TaskSummary ordered_summary;$/;"	m	class:CommonStats
ordered_task	src/Dialogs/Task/Manager/TaskEditPanel.cpp	/^  OrderedTask *ordered_task;$/;"	m	class:TaskEditPanel	file:
ordered_task	src/Dialogs/Task/Manager/TaskPropertiesPanel.hpp	/^  OrderedTask *ordered_task;$/;"	m	class:final
ordered_task	src/Dialogs/Task/TaskPointDialog.cpp	/^  OrderedTask &ordered_task;$/;"	m	class:final	file:
ordered_task	src/Dialogs/Waypoint/WaypointList.cpp	/^  OrderedTask *const ordered_task;$/;"	m	class:final	file:
ordered_task	src/Engine/Task/TaskManager.hpp	/^  const std::unique_ptr<OrderedTask> ordered_task;$/;"	m	class:TaskManager
ordered_task_index	src/Dialogs/Waypoint/WaypointList.cpp	/^  const unsigned ordered_task_index;$/;"	m	class:final	file:
ordered_task_pointer	src/Dialogs/Task/Manager/TaskEditPanel.cpp	/^  std::unique_ptr<OrderedTask> &ordered_task_pointer;$/;"	m	class:TaskEditPanel	file:
ordered_task_pointer	src/Dialogs/Task/Manager/TaskPropertiesPanel.hpp	/^  std::unique_ptr<OrderedTask> &ordered_task_pointer;$/;"	m	class:final
ordered_task_stats	src/NMEA/Derived.hpp	/^  TaskStats ordered_task_stats;$/;"	m	struct:DerivedInfo
orient	src/Terrain/jasper/jpc/jpc_dec.h	/^	enum jpc_tsfb_orient orient;$/;"	m	struct:__anon124	typeref:enum:__anon124::jpc_tsfb_orient
orient	src/Terrain/jasper/jpc/jpc_tsfb.h	/^	enum jpc_tsfb_orient orient;$/;"	m	struct:__anon107	typeref:enum:__anon107::jpc_tsfb_orient
orientation	src/DisplaySettings.hpp	/^  DisplayOrientation orientation;$/;"	m	struct:DisplaySettings
orientation	src/Widget/TabWidget.hpp	/^  const Orientation orientation;$/;"	m	class:TabWidget
orientation_list	src/Dialogs/Settings/Panels/MapDisplayConfigPanel.cpp	/^static constexpr StaticEnumChoice orientation_list[] = {$/;"	v	file:
orig_st	src/Topography/shapelib/mapserver.h	/^    originalScaleTokenStrings *orig_st;$/;"	m	struct:layerObj
orig_taskType	src/Dialogs/Task/Manager/TaskPropertiesPanel.hpp	/^  TaskFactoryType orig_taskType;$/;"	m	class:final
origin	src/Device/Driver/LX/LXN.hpp	/^    const struct Origin *origin;$/;"	m	union:LXN::Packet	typeref:struct:LXN::Packet::Origin
origin	src/Engine/Waypoint/Waypoint.hpp	/^  WaypointOrigin origin;$/;"	m	struct:Waypoint
origin	src/Form/List.hpp	/^  unsigned origin = 0;$/;"	m	class:ListControl
origin	src/Geo/Memento/DistanceMemento.hpp	/^  mutable GeoPoint origin;$/;"	m	class:DistanceMemento
origin	src/Geo/Memento/GeoVectorMemento.hpp	/^  mutable GeoPoint origin;$/;"	m	class:GeoVectorMemento
origin	src/Screen/LargeTextWindow.hpp	/^  unsigned origin;$/;"	m	class:LargeTextWindow
origin	src/Waypoint/Factory.hpp	/^  WaypointOrigin origin;$/;"	m	class:WaypointFactory
origin	src/ui/canvas/Icon.hpp	/^  PixelPoint origin;$/;"	m	class:MaskedIcon
origin_last	src/Engine/Route/RoutePlanner.hpp	/^  AFlatGeoPoint origin_last;$/;"	m	class:RoutePlanner
origin_latitude	src/Device/Driver/LX/Convert.cpp	/^  int origin_latitude, origin_longitude;$/;"	m	struct:Context	file:
origin_longitude	src/Device/Driver/LX/Convert.cpp	/^  int origin_latitude, origin_longitude;$/;"	m	struct:Context	file:
origin_time	src/Device/Driver/LX/Convert.cpp	/^  unsigned time, origin_time;$/;"	m	struct:Context	file:
original	src/Language/MOFile.hpp	/^    const char *original, *translation;$/;"	m	struct:MOFile::string_pair
original	src/util/DereferenceIterator.hxx	/^		:original(_original) {}$/;"	f	class:DereferenceContainerAdapter
original	src/util/DereferenceIterator.hxx	/^		:original(_original) {}$/;"	f	class:DereferenceIterator
original	src/util/DereferenceIterator.hxx	/^	CT &original;$/;"	m	class:DereferenceContainerAdapter
originalScaleTokenStrings	src/Topography/shapelib/mapserver.h	/^  } originalScaleTokenStrings;$/;"	t	typeref:struct:__anon57
original_id	src/Engine/Waypoint/Waypoint.hpp	/^  unsigned original_id;$/;"	m	struct:Waypoint
original_table_offset	src/Language/MOFile.hpp	/^    uint32_t original_table_offset, translation_table_offset;$/;"	m	struct:MOFile::mo_header
os	src/io/BufferedOutputStream.hxx	/^	OutputStream &os;$/;"	m	class:BufferedOutputStream
os	src/io/KeyValueFileWriter.hpp	/^  BufferedOutputStream &os;$/;"	m	class:KeyValueFileWriter
os	src/system/OverlappedEvent.hpp	/^  OVERLAPPED os;$/;"	m	class:OverlappedEvent
os_haptic_feedback_enabled	src/Android/Main.cpp	/^bool os_haptic_feedback_enabled;$/;"	v
ostype	src/zzip/format.h	/^    zzip_byte_t   ostype[1];$/;"	m	struct:zzip_version
other	src/Engine/Trace/Trace.cpp	/^  PointerIterator<I> &operator=(const PointerIterator<I> &other) = default;$/;"	m	class:PointerIterator	file:
other	src/Form/DataField/ComboList.hpp	/^    Item &operator=(const Item &other) = delete;$/;"	m	struct:ComboList::Item
other	src/Form/DataField/ComboList.hpp	/^    Item(const Item &other) = delete;$/;"	m	struct:ComboList::Item
other	src/Form/DataField/ComboList.hpp	/^  ComboList &operator=(const ComboList &other) = delete;$/;"	m	class:ComboList
other	src/Form/DataField/ComboList.hpp	/^  ComboList(ComboList &&other) = default;$/;"	m	class:ComboList
other	src/Form/DataField/ComboList.hpp	/^  ComboList(const ComboList &other) = delete;$/;"	m	class:ComboList
other	src/Operation/ProxyOperationEnvironment.hpp	/^    :other(_other) {}$/;"	f	class:ProxyOperationEnvironment
other	src/Operation/ProxyOperationEnvironment.hpp	/^  OperationEnvironment &other;$/;"	m	class:ProxyOperationEnvironment
other	src/Operation/ThreadedOperationEnvironment.cpp	/^  :other(_other)$/;"	f
other	src/Operation/ThreadedOperationEnvironment.hpp	/^  OperationEnvironment &other;$/;"	m	class:ThreadedOperationEnvironment
other	src/event/Loop.hxx	/^	EventLoop &operator=(const EventLoop &other) = delete;$/;"	m	class:final
other	src/event/Loop.hxx	/^	EventLoop(const EventLoop &other) = delete;$/;"	m	class:final
other	src/event/TimerList.hxx	/^	TimerList &operator=(const TimerList &other) = delete;$/;"	m	class:final
other	src/event/TimerList.hxx	/^	TimerList(const TimerList &other) = delete;$/;"	m	class:final
other	src/io/FileHandle.hpp	/^  FileHandle &operator=(const FileHandle &other) = delete;$/;"	m	class:FileHandle
other	src/io/FileHandle.hpp	/^  FileHandle(const FileHandle &other) = delete;$/;"	m	class:FileHandle
other	src/java/Ref.hxx	/^	GlobalRef &operator=(const GlobalRef &other) = delete;$/;"	m	class:Java::GlobalRef
other	src/java/Ref.hxx	/^	GlobalRef(const GlobalRef &other) = delete;$/;"	m	class:Java::GlobalRef
other	src/java/Ref.hxx	/^	TrivialRef &operator=(const TrivialRef &other) = delete;$/;"	m	class:Java::TrivialRef
other	src/java/Ref.hxx	/^	TrivialRef(const TrivialRef &other) = delete;$/;"	m	class:Java::TrivialRef
other	src/net/http/DownloadManager.cpp	/^    Item &operator=(const Item &other) = delete;$/;"	m	struct:final::Item	file:
other	src/net/http/DownloadManager.cpp	/^    Item(const Item &other) = delete;$/;"	m	struct:final::Item	file:
other	src/system/Args.hpp	/^  Args &operator=(const Args &other) = delete;$/;"	m	class:Args
other	src/system/Args.hpp	/^  Args(const Args &other) = delete;$/;"	m	class:Args
other	src/system/EventPipe.hxx	/^	EventPipe &operator=(const EventPipe &other) = delete;$/;"	m	class:EventPipe
other	src/system/EventPipe.hxx	/^	EventPipe(const EventPipe &other) = delete;$/;"	m	class:EventPipe
other	src/thread/CriticalSection.hxx	/^	CriticalSection &operator=(const CriticalSection &other) = delete;$/;"	m	class:CriticalSection
other	src/thread/CriticalSection.hxx	/^	CriticalSection(const CriticalSection &other) = delete;$/;"	m	class:CriticalSection
other	src/thread/Mutex.hxx	/^	ScopeUnlock &operator=(const ScopeUnlock &other) = delete;$/;"	m	class:ScopeUnlock
other	src/thread/Mutex.hxx	/^	ScopeUnlock(const ScopeUnlock &other) = delete;$/;"	m	class:ScopeUnlock
other	src/thread/Thread.hpp	/^  Thread &operator=(const Thread &other) = delete;$/;"	m	class:Thread
other	src/thread/Thread.hpp	/^  Thread(const Thread &other) = delete;$/;"	m	class:Thread
other	src/thread/Trigger.hpp	/^  Trigger &operator=(const Trigger &other) = delete;$/;"	m	class:Trigger
other	src/thread/Trigger.hpp	/^  Trigger(const Trigger &other) = delete;$/;"	m	class:Trigger
other	src/thread/WindowsCond.hxx	/^	WindowsCond &operator=(const WindowsCond &other) = delete;$/;"	m	class:WindowsCond
other	src/thread/WindowsCond.hxx	/^	WindowsCond(const WindowsCond &other) = delete;$/;"	m	class:WindowsCond
other	src/thread/WindowsSharedMutex.hxx	/^	WindowsSharedMutex &operator=(const WindowsSharedMutex &other) = delete;$/;"	m	class:WindowsSharedMutex
other	src/thread/WindowsSharedMutex.hxx	/^	WindowsSharedMutex(const WindowsSharedMutex &other) = delete;$/;"	m	class:WindowsSharedMutex
other	src/ui/canvas/Bitmap.hpp	/^  Bitmap &operator=(const Bitmap &other) = delete;$/;"	m	class:final
other	src/ui/canvas/Bitmap.hpp	/^  Bitmap(const Bitmap &other) = delete;$/;"	m	class:final
other	src/ui/canvas/Brush.hpp	/^  Brush &operator=(const Brush &other) = delete;$/;"	m	class:Brush
other	src/ui/canvas/Brush.hpp	/^  Brush(const Brush &other) = delete;$/;"	m	class:Brush
other	src/ui/canvas/Font.hpp	/^  Font &operator=(const Font &other) = delete;$/;"	m	class:Font
other	src/ui/canvas/Font.hpp	/^  Font(const Font &other) = delete;$/;"	m	class:Font
other	src/ui/canvas/Pen.hpp	/^  Pen &operator=(const Pen &other) = delete;$/;"	m	class:Pen
other	src/ui/canvas/Pen.hpp	/^  Pen(const Pen &other) = delete;$/;"	m	class:Pen
other	src/ui/canvas/custom/Cache.cpp	/^  RenderedText &operator=(const RenderedText &other) = delete;$/;"	m	struct:RenderedText	file:
other	src/ui/canvas/custom/Cache.cpp	/^  RenderedText(const RenderedText &other) = delete;$/;"	m	struct:RenderedText	file:
other	src/ui/canvas/custom/Cache.cpp	/^  TextCacheKey &operator=(const TextCacheKey &other) = delete;$/;"	m	struct:TextCacheKey	file:
other	src/ui/canvas/custom/Cache.cpp	/^  TextCacheKey(const TextCacheKey &other) = delete;$/;"	m	struct:TextCacheKey	file:
other	src/ui/canvas/custom/UncompressedImage.hpp	/^  UncompressedImage &operator=(const UncompressedImage &other) = delete;$/;"	m	class:UncompressedImage
other	src/ui/canvas/custom/UncompressedImage.hpp	/^  UncompressedImage(UncompressedImage &&other) = default;$/;"	m	class:UncompressedImage
other	src/ui/canvas/custom/UncompressedImage.hpp	/^  UncompressedImage(const UncompressedImage &other) = delete;$/;"	m	class:UncompressedImage
other	src/ui/canvas/gdi/Canvas.hpp	/^  Canvas &operator=(const Canvas &other) = delete;$/;"	m	class:Canvas
other	src/ui/canvas/gdi/Canvas.hpp	/^  Canvas(const Canvas &other) = delete;$/;"	m	class:Canvas
other	src/ui/canvas/opengl/Canvas.hpp	/^  Canvas &operator=(const Canvas &other) = delete;$/;"	m	class:Canvas
other	src/ui/canvas/opengl/Canvas.hpp	/^  Canvas(const Canvas &other) = delete;$/;"	m	class:Canvas
other	src/ui/event/Timer.hpp	/^  Timer(const Timer &other) = delete;$/;"	m	class:UI::final
other	src/ui/event/shared/TimerQueue.hpp	/^    TimerRecord &operator=(const TimerRecord &other) = delete;$/;"	m	struct:UI::TimerQueue::TimerRecord
other	src/ui/event/shared/TimerQueue.hpp	/^    TimerRecord(TimerRecord &&other) = default;$/;"	m	struct:UI::TimerQueue::TimerRecord
other	src/ui/event/shared/TimerQueue.hpp	/^    TimerRecord(const TimerRecord &other) = delete;$/;"	m	struct:UI::TimerQueue::TimerRecord
other	src/ui/event/shared/TimerQueue.hpp	/^  TimerQueue &operator=(const TimerQueue &other) = delete;$/;"	m	class:UI::TimerQueue
other	src/ui/event/shared/TimerQueue.hpp	/^  TimerQueue(const TimerQueue &other) = delete;$/;"	m	class:UI::TimerQueue
other	src/ui/window/Window.hpp	/^  Window &operator=(const Window &other) = delete;$/;"	m	class:Window
other	src/ui/window/Window.hpp	/^  Window(const Window &other) = delete;$/;"	m	class:Window
other	src/util/ConvertString.hpp	/^  UTF8ToWideConverter &operator=(const UTF8ToWideConverter &other) = delete;$/;"	m	class:UTF8ToWideConverter
other	src/util/ConvertString.hpp	/^  UTF8ToWideConverter(const UTF8ToWideConverter &other) = delete;$/;"	m	class:UTF8ToWideConverter
other	src/util/ConvertString.hpp	/^  WideToACPConverter &operator=(const WideToACPConverter &other) = delete;$/;"	m	class:WideToACPConverter
other	src/util/ConvertString.hpp	/^  WideToACPConverter(const WideToACPConverter &other) = delete;$/;"	m	class:WideToACPConverter
other	src/util/ConvertString.hpp	/^  WideToUTF8Converter &operator=(const WideToUTF8Converter &other) = delete;$/;"	m	class:WideToUTF8Converter
other	src/util/ConvertString.hpp	/^  WideToUTF8Converter(const WideToUTF8Converter &other) = delete;$/;"	m	class:WideToUTF8Converter
other	src/util/SliceAllocator.hxx	/^		typedef GlobalSliceAllocator<O, size> other;$/;"	t	struct:GlobalSliceAllocator::rebind
other	src/util/SliceAllocator.hxx	/^		typedef SliceAllocator<O, size> other;$/;"	t	struct:SliceAllocator::rebind
out	src/net/http/ToFile.cpp	/^  OutputStream &out;$/;"	m	class:final	file:
out_of_date	src/Dialogs/FileManager.cpp	/^    bool downloading, failed, out_of_date;$/;"	m	struct:ManagedFileListWidget::FileItem	file:
outer_circle_pen	src/Look/ThermalAssistantLook.hpp	/^  Pen outer_circle_pen;$/;"	m	struct:ThermalAssistantLook
outlinecolor	src/Topography/shapelib/mapserver.h	/^    colorObj *outlinecolor;$/;"	m	struct:__anon63
outlinecolor	src/Topography/shapelib/mapserver.h	/^    colorObj *outlinecolor;$/;"	m	struct:__anon64
outlinecolor	src/Topography/shapelib/mapserver.h	/^    colorObj color, outlinecolor, backgroundcolor;$/;"	m	struct:tileCacheObj
outlinecolor	src/Topography/shapelib/mapserver.h	/^    colorObj outlinecolor; \/* Color of outline of box, -1 for no outline *\/$/;"	m	struct:__anon48
outlinecolor	src/Topography/shapelib/mapserver.h	/^    colorObj outlinecolor;$/;"	m	struct:__anon46
outlinecolor	src/Topography/shapelib/mapserver.h	/^    colorObj outlinecolor;$/;"	m	struct:__anon47
outlinecolor	src/Topography/shapelib/mapserver.h	/^    colorObj outlinecolor;$/;"	m	struct:labelObj
outlinecolor	src/Topography/shapelib/mapserver.h	/^    colorObj outlinecolor;$/;"	m	struct:styleObj
outlinewidth	src/Topography/shapelib/mapserver.h	/^    double outlinewidth, rotation,scale;$/;"	m	struct:tileCacheObj
outlinewidth	src/Topography/shapelib/mapserver.h	/^    double outlinewidth;$/;"	m	struct:__anon63
outlinewidth	src/Topography/shapelib/mapserver.h	/^    double outlinewidth;$/;"	m	struct:__anon64
outlinewidth	src/Topography/shapelib/mapserver.h	/^    double outlinewidth;$/;"	m	struct:styleObj
outlinewidth	src/Topography/shapelib/mapserver.h	/^    int outlinewidth;$/;"	m	struct:labelObj
output	src/Device/Driver/Volkslogger/vlconv.cpp	/^  output(FILE *ausgabe, int version, bool oo_fillin)$/;"	f	struct:IGCHEADER
outputFormatObj	src/Topography/shapelib/mapserver.h	/^  } outputFormatObj;$/;"	t	typeref:struct:__anon32
output_buffer	src/Form/DataField/Integer.hpp	/^  mutable TCHAR output_buffer[OUTBUFFERSIZE + 1];$/;"	m	class:final
output_mode	src/Device/Driver/BlueFly/Internal.hpp	/^    unsigned output_mode;$/;"	m	struct:BlueFlyDevice::BlueFlySettings
outputformat	src/Topography/shapelib/mapserver.h	/^    outputFormatObj *outputformat;$/;"	m	struct:mapObj
outputformatlist	src/Topography/shapelib/mapserver.h	/^    outputFormatObj **outputformatlist;$/;"	m	struct:mapObj
outputs	src/NMEA/VegaSwitchState.hpp	/^  unsigned inputs, outputs;$/;"	m	struct:VegaSwitchState
outside1	src/Engine/Airspace/Predicate/AirspacePredicateHeightRange.hpp	/^  const OutsideAirspacePredicate outside1, outside2;$/;"	m	class:AirspacePredicateHeightRangeExcludeTwo
outside2	src/Engine/Airspace/Predicate/AirspacePredicateHeightRange.hpp	/^  const OutsideAirspacePredicate outside1, outside2;$/;"	m	class:AirspacePredicateHeightRangeExcludeTwo
overlay	src/Look/MapLook.hpp	/^  OverlayLook overlay;$/;"	m	struct:MapLook
overlay	src/MapWindow/MapWindow.hpp	/^  std::unique_ptr<MapOverlay> overlay;$/;"	m	class:MapWindow
overlay_font	src/Look/OverlayLook.hpp	/^  const Font *overlay_font;$/;"	m	struct:OverlayLook
overlay_font	src/Look/ThermalAssistantLook.hpp	/^  Font circle_label_font, overlay_font;$/;"	m	struct:ThermalAssistantLook
overlay_look	src/MapWindow/TargetMapWindow.hpp	/^  const OverlayLook &overlay_look;$/;"	m	class:TargetMapWindow
overlay_mode	src/Input/InputEvents.cpp	/^  static Mode overlay_mode = MODE_DEFAULT;$/;"	m	namespace:InputEvents	file:
override	src/Android/BMP085Device.hpp	/^                              AtmosphericPressure pressure) override;$/;"	m	class:final
override	src/Android/BMP085Device.hpp	/^  virtual void onBMP085Error() override;$/;"	m	class:final
override	src/Android/I2CbaroDevice.hpp	/^  virtual void onI2CbaroError() override;$/;"	m	class:final
override	src/Android/I2CbaroDevice.hpp	/^  virtual void onI2CbaroValues(unsigned sensor, AtmosphericPressure pressure) override;$/;"	m	class:final
override	src/Android/NunchuckDevice.hpp	/^                                int acc_x, int acc_y, int acc_z, int switches) override;$/;"	m	class:final
override	src/Android/NunchuckDevice.hpp	/^  virtual void onNunchuckError() override;$/;"	m	class:final
override	src/Android/VoltageDevice.hpp	/^  virtual void onVoltageError() override;$/;"	m	class:final
override	src/Android/VoltageDevice.hpp	/^  virtual void onVoltageValues(int temp_adc, int voltage_index, int volt_adc) override;$/;"	m	class:final
override	src/Audio/ALSAPCMPlayer.hpp	/^  bool Start(PCMDataSource &source) override;$/;"	m	class:ALSAPCMPlayer
override	src/Audio/ALSAPCMPlayer.hpp	/^  void Stop() override;$/;"	m	class:ALSAPCMPlayer
override	src/Audio/AndroidPCMPlayer.hpp	/^  bool Start(PCMSynthesiser &source) override;$/;"	m	class:AndroidPCMPlayer
override	src/Audio/AndroidPCMPlayer.hpp	/^  void Stop() override;$/;"	m	class:AndroidPCMPlayer
override	src/Audio/MixerPCMPlayer.hpp	/^  bool Start(PCMDataSource &source) override;$/;"	m	class:MixerPCMPlayer
override	src/Audio/MixerPCMPlayer.hpp	/^  void Stop() override;$/;"	m	class:MixerPCMPlayer
override	src/Audio/PCMBufferDataSource.hpp	/^  size_t GetData(int16_t *buffer, size_t n) override;$/;"	m	class:PCMBufferDataSource
override	src/Audio/PCMMixerDataSource.hpp	/^  size_t GetData(int16_t *buffer, size_t n) override;$/;"	m	class:PCMMixerDataSource
override	src/Audio/SDLPCMPlayer.hpp	/^  bool Start(PCMDataSource &source) override;$/;"	m	class:SDLPCMPlayer
override	src/Audio/SDLPCMPlayer.hpp	/^  void Stop() override;$/;"	m	class:SDLPCMPlayer
override	src/Blackboard/BlackboardListener.hpp	/^                          const DerivedInfo &calculated) override;$/;"	m	class:NullBlackboardListener
override	src/Blackboard/BlackboardListener.hpp	/^  void OnComputerSettingsUpdate(const ComputerSettings &settings) override;$/;"	m	class:NullBlackboardListener
override	src/Blackboard/BlackboardListener.hpp	/^  void OnGPSUpdate(const MoreData &basic) override;$/;"	m	class:NullBlackboardListener
override	src/Blackboard/BlackboardListener.hpp	/^  void OnUISettingsUpdate(const UISettings &settings) override;$/;"	m	class:NullBlackboardListener
override	src/Blackboard/ScopeCalculatedListener.hpp	/^                                  const DerivedInfo &calculated) override;$/;"	m	class:ScopeCalculatedListener
override	src/Blackboard/ScopeGPSListener.hpp	/^  virtual void OnGPSUpdate(const MoreData &basic) override;$/;"	m	class:ScopeGPSListener
override	src/CalculationThread.hpp	/^  void Tick() noexcept override;$/;"	m	class:final
override	src/Cloud/Main.cpp	/^                        bool near) override;$/;"	m	class:final	file:
override	src/Cloud/Main.cpp	/^                       double lift) override;$/;"	m	class:final	file:
override	src/Cloud/Main.cpp	/^                    double lift) override;$/;"	m	class:final	file:
override	src/Cloud/Main.cpp	/^             const ::GeoPoint &location, int altitude) override;$/;"	m	class:final	file:
override	src/Cloud/Main.cpp	/^  void OnThermalRequest(const Client &client) override;$/;"	m	class:final	file:
override	src/Computer/ConditionMonitor/ConditionMonitorAATTime.hpp	/^                              const ComputerSettings &settings) override;$/;"	m	class:final
override	src/Computer/ConditionMonitor/ConditionMonitorAATTime.hpp	/^  void Notify() override;$/;"	m	class:final
override	src/Computer/ConditionMonitor/ConditionMonitorFinalGlide.hpp	/^                      const ComputerSettings &settings) override;$/;"	m	class:final
override	src/Computer/ConditionMonitor/ConditionMonitorFinalGlide.hpp	/^  void Notify() override;$/;"	m	class:final
override	src/Computer/ConditionMonitor/ConditionMonitorFinalGlide.hpp	/^  void SaveLast() override;$/;"	m	class:final
override	src/Computer/ConditionMonitor/ConditionMonitorGlideTerrain.hpp	/^                      const ComputerSettings &settings) override;$/;"	m	class:final
override	src/Computer/ConditionMonitor/ConditionMonitorGlideTerrain.hpp	/^  void Notify() override;$/;"	m	class:final
override	src/Computer/ConditionMonitor/ConditionMonitorLandableReachable.hpp	/^                      const ComputerSettings &settings) override;$/;"	m	class:final
override	src/Computer/ConditionMonitor/ConditionMonitorLandableReachable.hpp	/^  void Notify() override;$/;"	m	class:final
override	src/Computer/ConditionMonitor/ConditionMonitorLandableReachable.hpp	/^  void SaveLast() override;$/;"	m	class:final
override	src/Computer/ConditionMonitor/ConditionMonitorSunset.hpp	/^                      const ComputerSettings &settings) override;$/;"	m	class:final
override	src/Computer/ConditionMonitor/ConditionMonitorSunset.hpp	/^  void Notify() override;$/;"	m	class:final
override	src/Computer/ConditionMonitor/ConditionMonitorWind.hpp	/^                      const ComputerSettings &settings) override;$/;"	m	class:final
override	src/Computer/ConditionMonitor/ConditionMonitorWind.hpp	/^  void Notify() override;$/;"	m	class:final
override	src/Computer/ConditionMonitor/ConditionMonitorWind.hpp	/^  void SaveLast() override;$/;"	m	class:final
override	src/Computer/GlideComputerInterface.hpp	/^  void ActiveAdvanced(const TaskWaypoint &tp, const int i) noexcept override;$/;"	m	class:final
override	src/Computer/GlideComputerInterface.hpp	/^  void EnterTransition(const TaskWaypoint& tp) noexcept override;$/;"	m	class:final
override	src/Computer/GlideComputerInterface.hpp	/^  void RequestArm(const TaskWaypoint &tp) noexcept override;$/;"	m	class:final
override	src/Computer/GlideComputerInterface.hpp	/^  void TaskFinish() noexcept override;$/;"	m	class:final
override	src/Computer/GlideComputerInterface.hpp	/^  void TaskStart() noexcept override;$/;"	m	class:final
override	src/CrossSection/CrossSectionWidget.hpp	/^                                  const DerivedInfo &calculated) override;$/;"	m	class:CrossSectionWidget
override	src/CrossSection/CrossSectionWidget.hpp	/^  void Hide() noexcept override;$/;"	m	class:CrossSectionWidget
override	src/CrossSection/CrossSectionWidget.hpp	/^  void Prepare(ContainerWindow &parent, const PixelRect &rc) noexcept override;$/;"	m	class:CrossSectionWidget
override	src/CrossSection/CrossSectionWidget.hpp	/^  void Show(const PixelRect &rc) noexcept override;$/;"	m	class:CrossSectionWidget
override	src/CrossSection/CrossSectionWindow.hpp	/^  virtual void OnPaintBuffer(Canvas &canvas) override;$/;"	m	class:CrossSectionWindow
override	src/Device/Descriptor.hpp	/^  bool DataReceived(const void *data, size_t length) noexcept override;$/;"	m	class:final
override	src/Device/Descriptor.hpp	/^  bool LineReceived(const char *line) noexcept override;$/;"	m	class:final
override	src/Device/Descriptor.hpp	/^  void PortError(const char *msg) noexcept override;$/;"	m	class:final
override	src/Device/Descriptor.hpp	/^  void PortStateChanged() noexcept override;$/;"	m	class:final
override	src/Device/Dispatcher.hpp	/^  bool LineReceived(const char *line) noexcept override;$/;"	m	class:final
override	src/Device/Driver.hpp	/^                           OperationEnvironment &env) override;$/;"	m	class:AbstractDevice
override	src/Device/Driver.hpp	/^                          OperationEnvironment &env) override;$/;"	m	class:AbstractDevice
override	src/Device/Driver.hpp	/^                      OperationEnvironment &env) override;$/;"	m	class:AbstractDevice
override	src/Device/Driver.hpp	/^                    struct NMEAInfo &info) override;$/;"	m	class:AbstractDevice
override	src/Device/Driver.hpp	/^                  OperationEnvironment &env) override;$/;"	m	class:AbstractDevice
override	src/Device/Driver.hpp	/^               OperationEnvironment &env) override;$/;"	m	class:AbstractDevice
override	src/Device/Driver.hpp	/^              OperationEnvironment &env) override;$/;"	m	class:AbstractDevice
override	src/Device/Driver.hpp	/^  bool EnableNMEA(OperationEnvironment &env) override;$/;"	m	class:AbstractDevice
override	src/Device/Driver.hpp	/^  bool EnablePassThrough(OperationEnvironment &env) override;$/;"	m	class:AbstractDevice
override	src/Device/Driver.hpp	/^  bool ParseNMEA(const char *line, struct NMEAInfo &info) override;$/;"	m	class:AbstractDevice
override	src/Device/Driver.hpp	/^  bool PutBugs(double bugs, OperationEnvironment &env) override;$/;"	m	class:AbstractDevice
override	src/Device/Driver.hpp	/^  bool PutMacCready(double MacCready, OperationEnvironment &env) override;$/;"	m	class:AbstractDevice
override	src/Device/Driver.hpp	/^  bool PutVolume(unsigned volume, OperationEnvironment &env) override;$/;"	m	class:AbstractDevice
override	src/Device/Driver.hpp	/^  void LinkTimeout() override;$/;"	m	class:AbstractDevice
override	src/Device/Driver.hpp	/^  void OnSysTicker() override;$/;"	m	class:AbstractDevice
override	src/Device/Driver/ATR833.cpp	/^                           OperationEnvironment &env) override;$/;"	m	class:final	file:
override	src/Device/Driver/ATR833.cpp	/^                          OperationEnvironment &env) override;$/;"	m	class:final	file:
override	src/Device/Driver/ATR833.cpp	/^  bool DataReceived(const void *data, size_t length, NMEAInfo &info) override;$/;"	m	class:final	file:
override	src/Device/Driver/AirControlDisplay.cpp	/^                           OperationEnvironment &env) override;$/;"	m	class:ACDDevice	file:
override	src/Device/Driver/AirControlDisplay.cpp	/^              OperationEnvironment &env) override;$/;"	m	class:ACDDevice	file:
override	src/Device/Driver/AirControlDisplay.cpp	/^  bool ParseNMEA(const char *line, struct NMEAInfo &info) override;$/;"	m	class:ACDDevice	file:
override	src/Device/Driver/AirControlDisplay.cpp	/^  bool PutVolume(unsigned volume, OperationEnvironment &env) override;$/;"	m	class:ACDDevice	file:
override	src/Device/Driver/AltairPro.cpp	/^               OperationEnvironment &env) override;$/;"	m	class:AltairProDevice	file:
override	src/Device/Driver/AltairPro.cpp	/^  bool ParseNMEA(const char *line, struct NMEAInfo &info) override;$/;"	m	class:AltairProDevice	file:
override	src/Device/Driver/BlueFly/Internal.hpp	/^  bool ParseNMEA(const char *line, struct NMEAInfo &info) override;$/;"	m	class:BlueFlyDevice
override	src/Device/Driver/BlueFly/Internal.hpp	/^  void LinkTimeout() override;$/;"	m	class:BlueFlyDevice
override	src/Device/Driver/BorgeltB50.cpp	/^                  OperationEnvironment &env) override;$/;"	m	class:B50Device	file:
override	src/Device/Driver/BorgeltB50.cpp	/^  bool ParseNMEA(const char *line, struct NMEAInfo &info) override;$/;"	m	class:B50Device	file:
override	src/Device/Driver/BorgeltB50.cpp	/^  bool PutBugs(double bugs, OperationEnvironment &env) override;$/;"	m	class:B50Device	file:
override	src/Device/Driver/BorgeltB50.cpp	/^  bool PutMacCready(double mc, OperationEnvironment &env) override;$/;"	m	class:B50Device	file:
override	src/Device/Driver/CAI302/Internal.hpp	/^                              OperationEnvironment &env) override;$/;"	m	class:CAI302Device
override	src/Device/Driver/CAI302/Internal.hpp	/^                          OperationEnvironment &env) override;$/;"	m	class:CAI302Device
override	src/Device/Driver/CAI302/Internal.hpp	/^                       OperationEnvironment &env) override;$/;"	m	class:CAI302Device
override	src/Device/Driver/CAI302/Internal.hpp	/^  virtual bool EnableNMEA(OperationEnvironment &env) override;$/;"	m	class:CAI302Device
override	src/Device/Driver/CAI302/Internal.hpp	/^  virtual bool ParseNMEA(const char *line, struct NMEAInfo &info) override;$/;"	m	class:CAI302Device
override	src/Device/Driver/CAI302/Internal.hpp	/^  virtual bool PutBugs(double bugs, OperationEnvironment &env) override;$/;"	m	class:CAI302Device
override	src/Device/Driver/CAI302/Internal.hpp	/^  virtual bool PutMacCready(double mc, OperationEnvironment &env) override;$/;"	m	class:CAI302Device
override	src/Device/Driver/CAI302/Internal.hpp	/^  virtual void LinkTimeout() override;$/;"	m	class:CAI302Device
override	src/Device/Driver/CProbe.cpp	/^  bool ParseNMEA(const char *line, struct NMEAInfo &info) override;$/;"	m	class:CProbeDevice	file:
override	src/Device/Driver/CaiGpsNav.cpp	/^  bool EnableNMEA(OperationEnvironment &env) override;$/;"	m	class:CaiGpsNavDevice	file:
override	src/Device/Driver/CaiLNav.cpp	/^                          const DerivedInfo &calculated) override;$/;"	m	class:final	file:
override	src/Device/Driver/Condor.cpp	/^  bool ParseNMEA(const char *line, struct NMEAInfo &info) override;$/;"	m	class:CondorDevice	file:
override	src/Device/Driver/EW.cpp	/^               OperationEnvironment &env) override;$/;"	m	class:EWDevice	file:
override	src/Device/Driver/EW.cpp	/^  void LinkTimeout() override;$/;"	m	class:EWDevice	file:
override	src/Device/Driver/EWMicroRecorder.cpp	/^               OperationEnvironment &env) override;$/;"	m	class:EWMicroRecorderDevice	file:
override	src/Device/Driver/EWMicroRecorder.cpp	/^  bool ParseNMEA(const char *line, struct NMEAInfo &info) override;$/;"	m	class:EWMicroRecorderDevice	file:
override	src/Device/Driver/Eye.cpp	/^  bool ParseNMEA(const char *line, NMEAInfo &info) override;$/;"	m	class:EyeDevice	file:
override	src/Device/Driver/FLARM/Device.hpp	/^                      OperationEnvironment &env) override;$/;"	m	class:FlarmDevice
override	src/Device/Driver/FLARM/Device.hpp	/^               OperationEnvironment &env) override;$/;"	m	class:FlarmDevice
override	src/Device/Driver/FLARM/Device.hpp	/^  bool EnableNMEA(OperationEnvironment &env) override;$/;"	m	class:FlarmDevice
override	src/Device/Driver/FLARM/Device.hpp	/^  bool ParseNMEA(const char *line, struct NMEAInfo &info) override;$/;"	m	class:FlarmDevice
override	src/Device/Driver/FLARM/Device.hpp	/^  void LinkTimeout() override;$/;"	m	class:FlarmDevice
override	src/Device/Driver/FlyNet.cpp	/^  bool ParseNMEA(const char *line, struct NMEAInfo &info) override;$/;"	m	class:FlyNetDevice	file:
override	src/Device/Driver/FlymasterF1.cpp	/^  bool EnableNMEA(OperationEnvironment &env) override;$/;"	m	class:FlymasterF1Device	file:
override	src/Device/Driver/FlymasterF1.cpp	/^  bool ParseNMEA(const char *line, struct NMEAInfo &info) override;$/;"	m	class:FlymasterF1Device	file:
override	src/Device/Driver/Flytec/Device.hpp	/^                      OperationEnvironment &env) override;$/;"	m	class:FlytecDevice
override	src/Device/Driver/Flytec/Device.hpp	/^  bool ParseNMEA(const char *line, NMEAInfo &info) override;$/;"	m	class:FlytecDevice
override	src/Device/Driver/ILEC.cpp	/^  bool ParseNMEA(const char *line, struct NMEAInfo &info) override;$/;"	m	class:ILECDevice	file:
override	src/Device/Driver/IMI/Internal.hpp	/^                      OperationEnvironment &env) override;$/;"	m	class:IMIDevice
override	src/Device/Driver/IMI/Internal.hpp	/^                      Path path, OperationEnvironment &env) override;$/;"	m	class:IMIDevice
override	src/Device/Driver/IMI/Internal.hpp	/^               OperationEnvironment &env) override;$/;"	m	class:IMIDevice
override	src/Device/Driver/IMI/Internal.hpp	/^  bool ParseNMEA(const char *line, struct NMEAInfo &info) override;$/;"	m	class:IMIDevice
override	src/Device/Driver/KRT2.cpp	/^                                   OperationEnvironment &env) override;$/;"	m	class:final	file:
override	src/Device/Driver/KRT2.cpp	/^                                  OperationEnvironment &env) override;$/;"	m	class:final	file:
override	src/Device/Driver/KRT2.cpp	/^                            struct NMEAInfo &info) override;$/;"	m	class:final	file:
override	src/Device/Driver/LX/Internal.hpp	/^                      OperationEnvironment &env) override;$/;"	m	class:LXDevice
override	src/Device/Driver/LX/Internal.hpp	/^                  OperationEnvironment &env) override;$/;"	m	class:LXDevice
override	src/Device/Driver/LX/Internal.hpp	/^               OperationEnvironment &env) override;$/;"	m	class:LXDevice
override	src/Device/Driver/LX/Internal.hpp	/^              OperationEnvironment &env) override;$/;"	m	class:LXDevice
override	src/Device/Driver/LX/Internal.hpp	/^  bool EnableNMEA(OperationEnvironment &env) override;$/;"	m	class:LXDevice
override	src/Device/Driver/LX/Internal.hpp	/^  bool EnablePassThrough(OperationEnvironment &env) override;$/;"	m	class:LXDevice
override	src/Device/Driver/LX/Internal.hpp	/^  bool ParseNMEA(const char *line, struct NMEAInfo &info) override;$/;"	m	class:LXDevice
override	src/Device/Driver/LX/Internal.hpp	/^  bool PutBugs(double bugs, OperationEnvironment &env) override;$/;"	m	class:LXDevice
override	src/Device/Driver/LX/Internal.hpp	/^  bool PutMacCready(double mc, OperationEnvironment &env) override;$/;"	m	class:LXDevice
override	src/Device/Driver/LX/Internal.hpp	/^  bool PutVolume(unsigned volume, OperationEnvironment &env) override;$/;"	m	class:LXDevice
override	src/Device/Driver/LX/Internal.hpp	/^  void LinkTimeout() override;$/;"	m	class:LXDevice
override	src/Device/Driver/LX/Internal.hpp	/^  void OnSysTicker() override;$/;"	m	class:LXDevice
override	src/Device/Driver/Leonardo.cpp	/^  bool ParseNMEA(const char *line, struct NMEAInfo &info) override;$/;"	m	class:LeonardoDevice	file:
override	src/Device/Driver/LevilAHRS_G.cpp	/^  bool ParseNMEA(const char *line, struct NMEAInfo &info) override;$/;"	m	class:LevilDevice	file:
override	src/Device/Driver/OpenVario.cpp	/^                  OperationEnvironment &env) override;$/;"	m	class:OpenVarioDevice	file:
override	src/Device/Driver/OpenVario.cpp	/^                  const DerivedInfo &calculated) override;$/;"	m	class:OpenVarioDevice	file:
override	src/Device/Driver/OpenVario.cpp	/^  bool ParseNMEA(const char *line, NMEAInfo &info) override;$/;"	m	class:OpenVarioDevice	file:
override	src/Device/Driver/OpenVario.cpp	/^  bool PutBugs(double bugs, OperationEnvironment &env) override;$/;"	m	class:OpenVarioDevice	file:
override	src/Device/Driver/OpenVario.cpp	/^  bool PutMacCready(double mc, OperationEnvironment &env) override;$/;"	m	class:OpenVarioDevice	file:
override	src/Device/Driver/PosiGraph.cpp	/^  bool ParseNMEA(const char *line, struct NMEAInfo &info) override;$/;"	m	class:PGDevice	file:
override	src/Device/Driver/ThermalExpress/Driver.hpp	/^  bool ParseNMEA(const char *line, NMEAInfo &info) override;$/;"	m	class:ThermalExpressDevice
override	src/Device/Driver/Vaulter.cpp	/^                  OperationEnvironment &env) override;$/;"	m	class:VaulterDevice	file:
override	src/Device/Driver/Vaulter.cpp	/^  bool ParseNMEA(const char *line, struct NMEAInfo &info) override;$/;"	m	class:VaulterDevice	file:
override	src/Device/Driver/Vaulter.cpp	/^  bool PutMacCready(double mc, OperationEnvironment &env) override;$/;"	m	class:VaulterDevice	file:
override	src/Device/Driver/Vega/Internal.hpp	/^                          const DerivedInfo &calculated) override;$/;"	m	class:VegaDevice
override	src/Device/Driver/Vega/Internal.hpp	/^              OperationEnvironment &env) override;$/;"	m	class:VegaDevice
override	src/Device/Driver/Vega/Internal.hpp	/^  bool ParseNMEA(const char *line, struct NMEAInfo &info) override;$/;"	m	class:VegaDevice
override	src/Device/Driver/Vega/Internal.hpp	/^  bool PutMacCready(double mc, OperationEnvironment &env) override;$/;"	m	class:VegaDevice
override	src/Device/Driver/Vega/Internal.hpp	/^  void LinkTimeout() override;$/;"	m	class:VegaDevice
override	src/Device/Driver/Volkslogger/Internal.hpp	/^                      OperationEnvironment &env) override;$/;"	m	class:VolksloggerDevice
override	src/Device/Driver/Volkslogger/Internal.hpp	/^               OperationEnvironment &env) override;$/;"	m	class:VolksloggerDevice
override	src/Device/Driver/Volkslogger/Internal.hpp	/^  bool ParseNMEA(const char *line, struct NMEAInfo &info) override;$/;"	m	class:VolksloggerDevice
override	src/Device/Driver/Westerboer.cpp	/^  bool ParseNMEA(const char *line, struct NMEAInfo &info) override;$/;"	m	class:WesterboerDevice	file:
override	src/Device/Driver/Westerboer.cpp	/^  bool PutBugs(double bugs, OperationEnvironment &env) override;$/;"	m	class:WesterboerDevice	file:
override	src/Device/Driver/Westerboer.cpp	/^  bool PutMacCready(double mac_cready, OperationEnvironment &env) override;$/;"	m	class:WesterboerDevice	file:
override	src/Device/Driver/XCOM760.cpp	/^                           OperationEnvironment &env) override;$/;"	m	class:XCOM760Device	file:
override	src/Device/Driver/XCOM760.cpp	/^                          OperationEnvironment &env) override;$/;"	m	class:XCOM760Device	file:
override	src/Device/Driver/XCOM760.cpp	/^  bool PutVolume(unsigned volume, OperationEnvironment &env) override;$/;"	m	class:XCOM760Device	file:
override	src/Device/Driver/XCTracer/Internal.hpp	/^  bool ParseNMEA(const char *line, struct NMEAInfo &info) override;$/;"	m	class:final
override	src/Device/Driver/XCVario.cpp	/^  bool ParseNMEA(const char *line, struct NMEAInfo &info) override;$/;"	m	class:XVCDevice	file:
override	src/Device/Driver/XCVario.cpp	/^  bool PutBallast(double fraction, double overload, OperationEnvironment &env) override;$/;"	m	class:XVCDevice	file:
override	src/Device/Driver/XCVario.cpp	/^  bool PutBugs(double bugs, OperationEnvironment &env) override;$/;"	m	class:XVCDevice	file:
override	src/Device/Driver/XCVario.cpp	/^  bool PutMacCready(double mc, OperationEnvironment &env) override;$/;"	m	class:XVCDevice	file:
override	src/Device/Driver/Zander.cpp	/^  bool ParseNMEA(const char *line, struct NMEAInfo &info) override;$/;"	m	class:ZanderDevice	file:
override	src/Device/MultipleDevices.hpp	/^  void PortError(const char *msg) noexcept override;$/;"	m	class:final
override	src/Device/MultipleDevices.hpp	/^  void PortStateChanged() noexcept override;$/;"	m	class:final
override	src/Device/Port/AndroidPort.hpp	/^  virtual PortState GetState() const override;$/;"	m	class:AndroidPort
override	src/Device/Port/AndroidPort.hpp	/^  virtual bool Drain() override;$/;"	m	class:AndroidPort
override	src/Device/Port/AndroidPort.hpp	/^  virtual bool SetBaudrate(unsigned baud_rate) override;$/;"	m	class:AndroidPort
override	src/Device/Port/AndroidPort.hpp	/^  virtual size_t Write(const void *data, size_t length) override;$/;"	m	class:AndroidPort
override	src/Device/Port/AndroidPort.hpp	/^  virtual unsigned GetBaudrate() const override;$/;"	m	class:AndroidPort
override	src/Device/Port/BufferedPort.hpp	/^  bool DataReceived(const void *data, size_t length) noexcept override;$/;"	m	class:BufferedPort
override	src/Device/Port/BufferedPort.hpp	/^  virtual WaitResult WaitRead(std::chrono::steady_clock::duration timeout) override;$/;"	m	class:BufferedPort
override	src/Device/Port/BufferedPort.hpp	/^  virtual bool StartRxThread() override;$/;"	m	class:BufferedPort
override	src/Device/Port/BufferedPort.hpp	/^  virtual bool StopRxThread() override;$/;"	m	class:BufferedPort
override	src/Device/Port/BufferedPort.hpp	/^  virtual int Read(void *Buffer, size_t Size) override;$/;"	m	class:BufferedPort
override	src/Device/Port/BufferedPort.hpp	/^  virtual void Flush() override;$/;"	m	class:BufferedPort
override	src/Device/Port/DumpPort.hpp	/^  PortState GetState() const override;$/;"	m	class:final
override	src/Device/Port/DumpPort.hpp	/^  WaitResult WaitRead(std::chrono::steady_clock::duration timeout) override;$/;"	m	class:final
override	src/Device/Port/DumpPort.hpp	/^  bool Drain() override;$/;"	m	class:final
override	src/Device/Port/DumpPort.hpp	/^  bool SetBaudrate(unsigned baud_rate) override;$/;"	m	class:final
override	src/Device/Port/DumpPort.hpp	/^  bool StartRxThread() override;$/;"	m	class:final
override	src/Device/Port/DumpPort.hpp	/^  bool StopRxThread() override;$/;"	m	class:final
override	src/Device/Port/DumpPort.hpp	/^  bool WaitConnected(OperationEnvironment &env) override;$/;"	m	class:final
override	src/Device/Port/DumpPort.hpp	/^  int Read(void *buffer, size_t size) override;$/;"	m	class:final
override	src/Device/Port/DumpPort.hpp	/^  size_t Write(const void *data, size_t length) override;$/;"	m	class:final
override	src/Device/Port/DumpPort.hpp	/^  unsigned GetBaudrate() const override;$/;"	m	class:final
override	src/Device/Port/DumpPort.hpp	/^  void Flush() override;$/;"	m	class:final
override	src/Device/Port/K6BtPort.hpp	/^  PortState GetState() const override;$/;"	m	class:K6BtPort
override	src/Device/Port/K6BtPort.hpp	/^  WaitResult WaitRead(std::chrono::steady_clock::duration timeout) override;$/;"	m	class:K6BtPort
override	src/Device/Port/K6BtPort.hpp	/^  bool Drain() override;$/;"	m	class:K6BtPort
override	src/Device/Port/K6BtPort.hpp	/^  bool SetBaudrate(unsigned baud_rate) override;$/;"	m	class:K6BtPort
override	src/Device/Port/K6BtPort.hpp	/^  bool StartRxThread() override;$/;"	m	class:K6BtPort
override	src/Device/Port/K6BtPort.hpp	/^  bool StopRxThread() override;$/;"	m	class:K6BtPort
override	src/Device/Port/K6BtPort.hpp	/^  bool WaitConnected(OperationEnvironment &env) override;$/;"	m	class:K6BtPort
override	src/Device/Port/K6BtPort.hpp	/^  int Read(void *Buffer, size_t Size) override;$/;"	m	class:K6BtPort
override	src/Device/Port/K6BtPort.hpp	/^  size_t Write(const void *data, size_t length) override;$/;"	m	class:K6BtPort
override	src/Device/Port/K6BtPort.hpp	/^  unsigned GetBaudrate() const override;$/;"	m	class:K6BtPort
override	src/Device/Port/K6BtPort.hpp	/^  void Flush() override;$/;"	m	class:K6BtPort
override	src/Device/Port/NullPort.hpp	/^  PortState GetState() const override;$/;"	m	class:NullPort
override	src/Device/Port/NullPort.hpp	/^  WaitResult WaitRead(std::chrono::steady_clock::duration timeout) override;$/;"	m	class:NullPort
override	src/Device/Port/NullPort.hpp	/^  bool DataReceived(const void *data, size_t length) noexcept override;$/;"	m	class:NullPort
override	src/Device/Port/NullPort.hpp	/^  bool Drain() override;$/;"	m	class:NullPort
override	src/Device/Port/NullPort.hpp	/^  bool SetBaudrate(unsigned baud_rate) override;$/;"	m	class:NullPort
override	src/Device/Port/NullPort.hpp	/^  bool StartRxThread() override;$/;"	m	class:NullPort
override	src/Device/Port/NullPort.hpp	/^  bool StopRxThread() override;$/;"	m	class:NullPort
override	src/Device/Port/NullPort.hpp	/^  int Read(void *Buffer, size_t Size) override;$/;"	m	class:NullPort
override	src/Device/Port/NullPort.hpp	/^  size_t Write(const void *data, size_t length) override;$/;"	m	class:NullPort
override	src/Device/Port/NullPort.hpp	/^  unsigned GetBaudrate() const override;$/;"	m	class:NullPort
override	src/Device/Port/NullPort.hpp	/^  void Flush() override;$/;"	m	class:NullPort
override	src/Device/Port/SerialPort.hpp	/^  virtual PortState GetState() const override;$/;"	m	class:SerialPort
override	src/Device/Port/SerialPort.hpp	/^  virtual bool Drain() override;$/;"	m	class:SerialPort
override	src/Device/Port/SerialPort.hpp	/^  virtual bool SetBaudrate(unsigned baud_rate) override;$/;"	m	class:SerialPort
override	src/Device/Port/SerialPort.hpp	/^  virtual size_t Write(const void *data, size_t length) override;$/;"	m	class:SerialPort
override	src/Device/Port/SerialPort.hpp	/^  virtual unsigned GetBaudrate() const override;$/;"	m	class:SerialPort
override	src/Device/Port/SerialPort.hpp	/^  virtual void Flush() override;$/;"	m	class:SerialPort
override	src/Device/Port/SerialPort.hpp	/^  void Run() noexcept override;$/;"	m	class:SerialPort
override	src/Device/Port/TCPClientPort.hpp	/^  size_t Write(const void *data, size_t length) override;$/;"	m	class:final
override	src/Device/Port/TCPClientPort.hpp	/^  void OnResolverError(std::exception_ptr error) noexcept override;$/;"	m	class:final
override	src/Device/Port/TCPClientPort.hpp	/^  void OnResolverSuccess(std::forward_list<AllocatedSocketAddress> addresses) noexcept override;$/;"	m	class:final
override	src/Device/Port/TCPClientPort.hpp	/^  void OnSocketConnectError(std::exception_ptr ep) noexcept override;$/;"	m	class:final
override	src/Device/Port/TCPClientPort.hpp	/^  void OnSocketConnectSuccess(UniqueSocketDescriptor &&fd) noexcept override;$/;"	m	class:final
override	src/Device/Port/TCPPort.hpp	/^  PortState GetState() const override;$/;"	m	class:final
override	src/Device/Port/TCPPort.hpp	/^  size_t Write(const void *data, size_t length) override;$/;"	m	class:final
override	src/Device/Port/TTYPort.hpp	/^  virtual PortState GetState() const override;$/;"	m	class:TTYPort
override	src/Device/Port/TTYPort.hpp	/^  virtual bool Drain() override;$/;"	m	class:TTYPort
override	src/Device/Port/TTYPort.hpp	/^  virtual bool SetBaudrate(unsigned baud_rate) override;$/;"	m	class:TTYPort
override	src/Device/Port/TTYPort.hpp	/^  virtual size_t Write(const void *data, size_t length) override;$/;"	m	class:TTYPort
override	src/Device/Port/TTYPort.hpp	/^  virtual unsigned GetBaudrate() const override;$/;"	m	class:TTYPort
override	src/Device/Port/TTYPort.hpp	/^  virtual void Flush() override;$/;"	m	class:TTYPort
override	src/Device/Port/UDPPort.hpp	/^  PortState GetState() const override;$/;"	m	class:final
override	src/Device/Port/UDPPort.hpp	/^  size_t Write(const void *data, size_t length) override;$/;"	m	class:final
override	src/Device/Util/LineSplitter.hpp	/^  bool DataReceived(const void *data, size_t length) noexcept override;$/;"	m	class:PortLineSplitter
override	src/Dialogs/Airspace/AirspaceCRendererSettingsPanel.hpp	/^  bool Save(bool &changed) noexcept override;$/;"	m	class:AirspaceClassRendererSettingsPanel
override	src/Dialogs/Airspace/AirspaceCRendererSettingsPanel.hpp	/^  void Prepare(ContainerWindow &parent, const PixelRect &rc) noexcept override;$/;"	m	class:AirspaceClassRendererSettingsPanel
override	src/Dialogs/Airspace/AirspaceList.cpp	/^                   unsigned idx) noexcept override;$/;"	m	class:final	file:
override	src/Dialogs/Airspace/AirspaceList.cpp	/^               const PixelRect &rc) noexcept override;$/;"	m	class:final	file:
override	src/Dialogs/Airspace/AirspaceList.cpp	/^  virtual void OnGPSUpdate(const MoreData &basic) override;$/;"	m	class:final	file:
override	src/Dialogs/Airspace/AirspaceList.cpp	/^  virtual void OnModified(DataField &df) override;$/;"	m	class:final	file:
override	src/Dialogs/Airspace/AirspaceList.cpp	/^  void OnActivateItem(unsigned index) noexcept override;$/;"	m	class:final	file:
override	src/Dialogs/Airspace/dlgAirspace.cpp	/^                   unsigned idx) noexcept override;$/;"	m	class:AirspaceSettingsListWidget	file:
override	src/Dialogs/Airspace/dlgAirspace.cpp	/^  void OnActivateItem(unsigned index) noexcept override;$/;"	m	class:AirspaceSettingsListWidget	file:
override	src/Dialogs/Airspace/dlgAirspaceDetails.cpp	/^  void Prepare(ContainerWindow &parent, const PixelRect &rc) noexcept override;$/;"	m	class:final	file:
override	src/Dialogs/Airspace/dlgAirspaceWarnings.cpp	/^                   unsigned idx) noexcept override;$/;"	m	class:final	file:
override	src/Dialogs/Airspace/dlgAirspaceWarnings.cpp	/^  void Hide() noexcept override;$/;"	m	class:final	file:
override	src/Dialogs/Airspace/dlgAirspaceWarnings.cpp	/^  void OnActivateItem(unsigned index) noexcept override;$/;"	m	class:final	file:
override	src/Dialogs/Airspace/dlgAirspaceWarnings.cpp	/^  void OnCursorMoved(unsigned index) noexcept override;$/;"	m	class:final	file:
override	src/Dialogs/Airspace/dlgAirspaceWarnings.cpp	/^  void Prepare(ContainerWindow &parent, const PixelRect &rc) noexcept override;$/;"	m	class:final	file:
override	src/Dialogs/Airspace/dlgAirspaceWarnings.cpp	/^  void Show(const PixelRect &rc) noexcept override;$/;"	m	class:final	file:
override	src/Dialogs/Device/CAI302/UnitsEditor.hpp	/^  bool Save(bool &changed) noexcept override;$/;"	m	class:final
override	src/Dialogs/Device/CAI302/UnitsEditor.hpp	/^  void Prepare(ContainerWindow &parent, const PixelRect &rc) noexcept override;$/;"	m	class:final
override	src/Dialogs/Device/DeviceEditWidget.hpp	/^  bool Save(bool &changed) noexcept override;$/;"	m	class:DeviceEditWidget
override	src/Dialogs/Device/DeviceEditWidget.hpp	/^  virtual void OnModified(DataField &df) override;$/;"	m	class:DeviceEditWidget
override	src/Dialogs/Device/DeviceEditWidget.hpp	/^  void Prepare(ContainerWindow &parent, const PixelRect &rc) noexcept override;$/;"	m	class:DeviceEditWidget
override	src/Dialogs/Device/DeviceListDialog.cpp	/^                    unsigned idx) noexcept override;$/;"	m	class:final	file:
override	src/Dialogs/Device/DeviceListDialog.cpp	/^  virtual void OnGPSUpdate(const MoreData &basic) override;$/;"	m	class:final	file:
override	src/Dialogs/Device/DeviceListDialog.cpp	/^  void OnCursorMoved(unsigned index) noexcept override;$/;"	m	class:final	file:
override	src/Dialogs/Device/DeviceListDialog.cpp	/^  void Prepare(ContainerWindow &parent, const PixelRect &rc) noexcept override;$/;"	m	class:final	file:
override	src/Dialogs/Device/FLARM/ConfigWidget.hpp	/^  bool Save(bool &changed) noexcept override;$/;"	m	class:final
override	src/Dialogs/Device/FLARM/ConfigWidget.hpp	/^  void Prepare(ContainerWindow &parent, const PixelRect &rc) noexcept override;$/;"	m	class:final
override	src/Dialogs/Device/LX/ManageNanoDialog.cpp	/^  void Prepare(ContainerWindow &parent, const PixelRect &rc) noexcept override;$/;"	m	class:final	file:
override	src/Dialogs/Device/LX/ManageV7Dialog.cpp	/^  void Prepare(ContainerWindow &parent, const PixelRect &rc) noexcept override;$/;"	m	class:final	file:
override	src/Dialogs/Device/LX/NanoConfigWidget.hpp	/^  bool Save(bool &changed) noexcept override;$/;"	m	class:final
override	src/Dialogs/Device/LX/NanoConfigWidget.hpp	/^  void Prepare(ContainerWindow &parent, const PixelRect &rc) noexcept override;$/;"	m	class:final
override	src/Dialogs/Device/LX/V7ConfigWidget.hpp	/^  bool Save(bool &changed) noexcept override;$/;"	m	class:final
override	src/Dialogs/Device/LX/V7ConfigWidget.hpp	/^  void Prepare(ContainerWindow &parent, const PixelRect &rc) noexcept override;$/;"	m	class:final
override	src/Dialogs/Device/ManageCAI302Dialog.cpp	/^  void Prepare(ContainerWindow &parent, const PixelRect &rc) noexcept override;$/;"	m	class:final	file:
override	src/Dialogs/Device/ManageFlarmDialog.cpp	/^  void Prepare(ContainerWindow &parent, const PixelRect &rc) noexcept override;$/;"	m	class:final	file:
override	src/Dialogs/Device/ScanBluetoothLeDialog.cpp	/^                   unsigned idx) noexcept override;$/;"	m	class:final	file:
override	src/Dialogs/Device/ScanBluetoothLeDialog.cpp	/^  void Prepare(ContainerWindow &parent, const PixelRect &rc) noexcept override;$/;"	m	class:final	file:
override	src/Dialogs/Device/Vega/VegaDemoDialog.cpp	/^  virtual void OnModified(DataField &df) override;$/;"	m	class:final	file:
override	src/Dialogs/Device/Vega/VegaDemoDialog.cpp	/^  void Prepare(ContainerWindow &parent, const PixelRect &rc) noexcept override;$/;"	m	class:final	file:
override	src/Dialogs/Device/Vega/VegaParametersWidget.hpp	/^  bool Save(bool &changed) noexcept override;$/;"	m	class:VegaParametersWidget
override	src/Dialogs/Device/Vega/VegaParametersWidget.hpp	/^  void Prepare(ContainerWindow &parent, const PixelRect &rc) noexcept override;$/;"	m	class:VegaParametersWidget
override	src/Dialogs/Device/Vega/VegaParametersWidget.hpp	/^  void Show(const PixelRect &rc) noexcept override;$/;"	m	class:VegaParametersWidget
override	src/Dialogs/DownloadFilePicker.cpp	/^                       int64_t size, int64_t position) noexcept override;$/;"	m	class:final	file:
override	src/Dialogs/DownloadFilePicker.cpp	/^                       std::exception_ptr error) noexcept override;$/;"	m	class:final	file:
override	src/Dialogs/DownloadFilePicker.cpp	/^                   unsigned idx) noexcept override;$/;"	m	class:final	file:
override	src/Dialogs/DownloadFilePicker.cpp	/^  void OnDownloadComplete(Path path_relative) noexcept override;$/;"	m	class:final	file:
override	src/Dialogs/DownloadFilePicker.cpp	/^  void Prepare(ContainerWindow &parent, const PixelRect &rc) noexcept override;$/;"	m	class:final	file:
override	src/Dialogs/DownloadFilePicker.cpp	/^  void Unprepare() noexcept override;$/;"	m	class:final	file:
override	src/Dialogs/FileManager.cpp	/^                       int64_t size, int64_t position) noexcept override;$/;"	m	class:ManagedFileListWidget	file:
override	src/Dialogs/FileManager.cpp	/^                       std::exception_ptr error) noexcept override;$/;"	m	class:ManagedFileListWidget	file:
override	src/Dialogs/FileManager.cpp	/^                   unsigned idx) noexcept override;$/;"	m	class:ManagedFileListWidget	file:
override	src/Dialogs/FileManager.cpp	/^  void OnCursorMoved(unsigned index) noexcept override;$/;"	m	class:ManagedFileListWidget	file:
override	src/Dialogs/FileManager.cpp	/^  void OnDownloadComplete(Path path_relative) noexcept override;$/;"	m	class:ManagedFileListWidget	file:
override	src/Dialogs/FileManager.cpp	/^  void OnPaintItem(Canvas &canvas, const PixelRect rc, unsigned i) noexcept override;$/;"	m	class:final	file:
override	src/Dialogs/FileManager.cpp	/^  void Prepare(ContainerWindow &parent, const PixelRect &rc) noexcept override;$/;"	m	class:ManagedFileListWidget	file:
override	src/Dialogs/FileManager.cpp	/^  void Unprepare() noexcept override;$/;"	m	class:ManagedFileListWidget	file:
override	src/Dialogs/JobDialog.hpp	/^  bool Run(Job &job) override;$/;"	m	class:DialogJobRunner
override	src/Dialogs/KnobTextEntry.cpp	/^  void OnPaint(Canvas &canvas) override;$/;"	m	class:final	file:
override	src/Dialogs/MapItemListDialog.cpp	/^                   unsigned idx) noexcept override;$/;"	m	class:final	file:
override	src/Dialogs/MapItemListDialog.cpp	/^  void OnActivateItem(unsigned index) noexcept override;$/;"	m	class:final	file:
override	src/Dialogs/MapItemListDialog.cpp	/^  void Prepare(ContainerWindow &parent, const PixelRect &rc) noexcept override;$/;"	m	class:final	file:
override	src/Dialogs/MapItemListSettingsPanel.hpp	/^  bool Save(bool &changed) noexcept override;$/;"	m	class:final
override	src/Dialogs/MapItemListSettingsPanel.hpp	/^  void Prepare(ContainerWindow &parent, const PixelRect &rc) noexcept override;$/;"	m	class:final
override	src/Dialogs/Plane/PlaneDetailsDialog.cpp	/^  bool Save(bool &changed) noexcept override;$/;"	m	class:final	file:
override	src/Dialogs/Plane/PlaneDetailsDialog.cpp	/^  virtual void OnModified(DataField &df) override;$/;"	m	class:final	file:
override	src/Dialogs/Plane/PlaneDetailsDialog.cpp	/^  void Prepare(ContainerWindow &parent, const PixelRect &rc) noexcept override;$/;"	m	class:final	file:
override	src/Dialogs/Plane/PlaneListDialog.cpp	/^                   unsigned idx) noexcept override;$/;"	m	class:final	file:
override	src/Dialogs/Plane/PlaneListDialog.cpp	/^  void OnActivateItem(unsigned index) noexcept override;$/;"	m	class:final	file:
override	src/Dialogs/Plane/PlaneListDialog.cpp	/^  void Prepare(ContainerWindow &parent, const PixelRect &rc) noexcept override;$/;"	m	class:final	file:
override	src/Dialogs/Plane/PlanePolarDialog.cpp	/^  bool Save(bool &changed) noexcept override;$/;"	m	class:final	file:
override	src/Dialogs/Plane/PlanePolarDialog.cpp	/^  virtual void OnModified(DataField &df) override;$/;"	m	class:final	file:
override	src/Dialogs/Plane/PlanePolarDialog.cpp	/^  void Prepare(ContainerWindow &parent, const PixelRect &rc) noexcept override;$/;"	m	class:final	file:
override	src/Dialogs/Plane/PlanePolarDialog.cpp	/^  void Show(const PixelRect &rc) noexcept override;$/;"	m	class:final	file:
override	src/Dialogs/Plane/PolarShapeEditWidget.hpp	/^  PixelSize GetMaximumSize() const noexcept override;$/;"	m	class:PolarShapeEditWidget
override	src/Dialogs/Plane/PolarShapeEditWidget.hpp	/^  PixelSize GetMinimumSize() const noexcept override;$/;"	m	class:PolarShapeEditWidget
override	src/Dialogs/Plane/PolarShapeEditWidget.hpp	/^  bool Save(bool &changed) noexcept override;$/;"	m	class:PolarShapeEditWidget
override	src/Dialogs/Plane/PolarShapeEditWidget.hpp	/^  void Prepare(ContainerWindow &parent, const PixelRect &rc) noexcept override;$/;"	m	class:PolarShapeEditWidget
override	src/Dialogs/ProfileListDialog.cpp	/^               const PixelRect &rc) noexcept override;$/;"	m	class:final	file:
override	src/Dialogs/ProgressDialog.hpp	/^  void SetModalResult(int id) noexcept override;$/;"	m	class:ProgressDialog
override	src/Dialogs/ReplayDialog.cpp	/^               const PixelRect &rc) noexcept override;$/;"	m	class:final	file:
override	src/Dialogs/ReplayDialog.cpp	/^  virtual void OnModified(DataField &df) override;$/;"	m	class:final	file:
override	src/Dialogs/Settings/Panels/AirspaceConfigPanel.cpp	/^  bool Save(bool &changed) noexcept override;$/;"	m	class:final	file:
override	src/Dialogs/Settings/Panels/AirspaceConfigPanel.cpp	/^  virtual void OnModified(DataField &df) override;$/;"	m	class:final	file:
override	src/Dialogs/Settings/Panels/AirspaceConfigPanel.cpp	/^  void Hide() noexcept override;$/;"	m	class:final	file:
override	src/Dialogs/Settings/Panels/AirspaceConfigPanel.cpp	/^  void Prepare(ContainerWindow &parent, const PixelRect &rc) noexcept override;$/;"	m	class:final	file:
override	src/Dialogs/Settings/Panels/AirspaceConfigPanel.cpp	/^  void Show(const PixelRect &rc) noexcept override;$/;"	m	class:final	file:
override	src/Dialogs/Settings/Panels/AudioConfigPanel.cpp	/^  bool Save(bool &changed) noexcept override;$/;"	m	class:final	file:
override	src/Dialogs/Settings/Panels/AudioConfigPanel.cpp	/^  void Prepare(ContainerWindow &parent, const PixelRect &rc) noexcept override;$/;"	m	class:final	file:
override	src/Dialogs/Settings/Panels/AudioVarioConfigPanel.cpp	/^  bool Save(bool &changed) noexcept override;$/;"	m	class:final	file:
override	src/Dialogs/Settings/Panels/AudioVarioConfigPanel.cpp	/^  void Prepare(ContainerWindow &parent, const PixelRect &rc) noexcept override;$/;"	m	class:final	file:
override	src/Dialogs/Settings/Panels/CloudConfigPanel.cpp	/^  bool Save(bool &changed) noexcept override;$/;"	m	class:final	file:
override	src/Dialogs/Settings/Panels/CloudConfigPanel.cpp	/^  void OnModified(DataField &df) override;$/;"	m	class:final	file:
override	src/Dialogs/Settings/Panels/CloudConfigPanel.cpp	/^  void Prepare(ContainerWindow &parent, const PixelRect &rc) noexcept override;$/;"	m	class:final	file:
override	src/Dialogs/Settings/Panels/GaugesConfigPanel.cpp	/^  bool Save(bool &changed) noexcept override;$/;"	m	class:final	file:
override	src/Dialogs/Settings/Panels/GaugesConfigPanel.cpp	/^  virtual void OnModified(DataField &df) override;$/;"	m	class:final	file:
override	src/Dialogs/Settings/Panels/GaugesConfigPanel.cpp	/^  void Prepare(ContainerWindow &parent, const PixelRect &rc) noexcept override;$/;"	m	class:final	file:
override	src/Dialogs/Settings/Panels/GlideComputerConfigPanel.cpp	/^  bool Save(bool &changed) noexcept override;$/;"	m	class:final	file:
override	src/Dialogs/Settings/Panels/GlideComputerConfigPanel.cpp	/^  void Prepare(ContainerWindow &parent, const PixelRect &rc) noexcept override;$/;"	m	class:final	file:
override	src/Dialogs/Settings/Panels/InfoBoxesConfigPanel.cpp	/^  bool Save(bool &changed) noexcept override;$/;"	m	class:final	file:
override	src/Dialogs/Settings/Panels/InfoBoxesConfigPanel.cpp	/^  void Prepare(ContainerWindow &parent, const PixelRect &rc) noexcept override;$/;"	m	class:final	file:
override	src/Dialogs/Settings/Panels/InterfaceConfigPanel.cpp	/^  bool Save(bool &changed) noexcept override;$/;"	m	class:final	file:
override	src/Dialogs/Settings/Panels/InterfaceConfigPanel.cpp	/^  void Prepare(ContainerWindow &parent, const PixelRect &rc) noexcept override;$/;"	m	class:final	file:
override	src/Dialogs/Settings/Panels/LayoutConfigPanel.cpp	/^  bool Save(bool &changed) noexcept override;$/;"	m	class:final	file:
override	src/Dialogs/Settings/Panels/LayoutConfigPanel.cpp	/^  void Prepare(ContainerWindow &parent, const PixelRect &rc) noexcept override;$/;"	m	class:final	file:
override	src/Dialogs/Settings/Panels/LoggerConfigPanel.cpp	/^  bool Save(bool &changed) noexcept override;$/;"	m	class:final	file:
override	src/Dialogs/Settings/Panels/LoggerConfigPanel.cpp	/^  void Prepare(ContainerWindow &parent, const PixelRect &rc) noexcept override;$/;"	m	class:final	file:
override	src/Dialogs/Settings/Panels/MapDisplayConfigPanel.cpp	/^  bool Save(bool &changed) noexcept override;$/;"	m	class:final	file:
override	src/Dialogs/Settings/Panels/MapDisplayConfigPanel.cpp	/^  virtual void OnModified(DataField &df) override;$/;"	m	class:final	file:
override	src/Dialogs/Settings/Panels/MapDisplayConfigPanel.cpp	/^  void Prepare(ContainerWindow &parent, const PixelRect &rc) noexcept override;$/;"	m	class:final	file:
override	src/Dialogs/Settings/Panels/PagesConfigPanel.cpp	/^                   unsigned idx) noexcept override;$/;"	m	class:PageListWidget	file:
override	src/Dialogs/Settings/Panels/PagesConfigPanel.cpp	/^                  const PixelRect &rc) noexcept override;$/;"	m	class:PageListWidget	file:
override	src/Dialogs/Settings/Panels/PagesConfigPanel.cpp	/^  bool Save(bool &changed) noexcept override;$/;"	m	class:PageListWidget	file:
override	src/Dialogs/Settings/Panels/PagesConfigPanel.cpp	/^  virtual void OnModified(DataField &df) override;$/;"	m	class:final	file:
override	src/Dialogs/Settings/Panels/PagesConfigPanel.cpp	/^  virtual void OnModified(const PageLayout &new_value) override;$/;"	m	class:PageListWidget	file:
override	src/Dialogs/Settings/Panels/PagesConfigPanel.cpp	/^  void OnActivateItem(unsigned index) noexcept override;$/;"	m	class:PageListWidget	file:
override	src/Dialogs/Settings/Panels/PagesConfigPanel.cpp	/^  void OnCursorMoved(unsigned index) noexcept override;$/;"	m	class:PageListWidget	file:
override	src/Dialogs/Settings/Panels/PagesConfigPanel.cpp	/^  void Prepare(ContainerWindow &parent, const PixelRect &rc) noexcept override;$/;"	m	class:final	file:
override	src/Dialogs/Settings/Panels/PagesConfigPanel.cpp	/^  void Show(const PixelRect &rc) noexcept override;$/;"	m	class:PageListWidget	file:
override	src/Dialogs/Settings/Panels/RouteConfigPanel.cpp	/^  bool Save(bool &changed) noexcept override;$/;"	m	class:final	file:
override	src/Dialogs/Settings/Panels/RouteConfigPanel.cpp	/^  virtual void OnModified(DataField &df) override;$/;"	m	class:final	file:
override	src/Dialogs/Settings/Panels/RouteConfigPanel.cpp	/^  void Prepare(ContainerWindow &parent, const PixelRect &rc) noexcept override;$/;"	m	class:final	file:
override	src/Dialogs/Settings/Panels/SafetyFactorsConfigPanel.cpp	/^  bool Save(bool &changed) noexcept override;$/;"	m	class:final	file:
override	src/Dialogs/Settings/Panels/SafetyFactorsConfigPanel.cpp	/^  void Prepare(ContainerWindow &parent, const PixelRect &rc) noexcept override;$/;"	m	class:final	file:
override	src/Dialogs/Settings/Panels/ScoringConfigPanel.cpp	/^  bool Save(bool &changed) noexcept override;$/;"	m	class:final	file:
override	src/Dialogs/Settings/Panels/ScoringConfigPanel.cpp	/^  virtual void OnModified(DataField &df) override;$/;"	m	class:final	file:
override	src/Dialogs/Settings/Panels/ScoringConfigPanel.cpp	/^  void Prepare(ContainerWindow &parent, const PixelRect &rc) noexcept override;$/;"	m	class:final	file:
override	src/Dialogs/Settings/Panels/SiteConfigPanel.cpp	/^  bool Save(bool &changed) noexcept override;$/;"	m	class:final	file:
override	src/Dialogs/Settings/Panels/SiteConfigPanel.cpp	/^  void Prepare(ContainerWindow &parent, const PixelRect &rc) noexcept override;$/;"	m	class:final	file:
override	src/Dialogs/Settings/Panels/SymbolsConfigPanel.cpp	/^  bool Save(bool &changed) noexcept override;$/;"	m	class:final	file:
override	src/Dialogs/Settings/Panels/SymbolsConfigPanel.cpp	/^  virtual void OnModified(DataField &df) override;$/;"	m	class:final	file:
override	src/Dialogs/Settings/Panels/SymbolsConfigPanel.cpp	/^  void Prepare(ContainerWindow &parent, const PixelRect &rc) noexcept override;$/;"	m	class:final	file:
override	src/Dialogs/Settings/Panels/TaskDefaultsConfigPanel.cpp	/^  bool Save(bool &changed) noexcept override;$/;"	m	class:final	file:
override	src/Dialogs/Settings/Panels/TaskDefaultsConfigPanel.cpp	/^  virtual void OnModified(DataField &df) override;$/;"	m	class:final	file:
override	src/Dialogs/Settings/Panels/TaskDefaultsConfigPanel.cpp	/^  void Prepare(ContainerWindow &parent, const PixelRect &rc) noexcept override;$/;"	m	class:final	file:
override	src/Dialogs/Settings/Panels/TaskRulesConfigPanel.cpp	/^  bool Save(bool &changed) noexcept override;$/;"	m	class:final	file:
override	src/Dialogs/Settings/Panels/TaskRulesConfigPanel.cpp	/^  void Prepare(ContainerWindow &parent, const PixelRect &rc) noexcept override;$/;"	m	class:final	file:
override	src/Dialogs/Settings/Panels/TerrainDisplayConfigPanel.cpp	/^  bool Save(bool &changed) noexcept override;$/;"	m	class:final	file:
override	src/Dialogs/Settings/Panels/TerrainDisplayConfigPanel.cpp	/^  virtual void OnModified(DataField &df) override;$/;"	m	class:final	file:
override	src/Dialogs/Settings/Panels/TerrainDisplayConfigPanel.cpp	/^  virtual void OnPaint(Canvas &canvas) override;$/;"	m	class:TerrainPreviewWindow	file:
override	src/Dialogs/Settings/Panels/TerrainDisplayConfigPanel.cpp	/^  void Prepare(ContainerWindow &parent, const PixelRect &rc) noexcept override;$/;"	m	class:final	file:
override	src/Dialogs/Settings/Panels/TimeConfigPanel.cpp	/^  bool Save(bool &changed) noexcept override;$/;"	m	class:final	file:
override	src/Dialogs/Settings/Panels/TimeConfigPanel.cpp	/^  virtual void OnModified(DataField &df) override;$/;"	m	class:final	file:
override	src/Dialogs/Settings/Panels/TimeConfigPanel.cpp	/^  void Prepare(ContainerWindow &parent, const PixelRect &rc) noexcept override;$/;"	m	class:final	file:
override	src/Dialogs/Settings/Panels/TrackingConfigPanel.cpp	/^  bool Save(bool &changed) noexcept override;$/;"	m	class:final	file:
override	src/Dialogs/Settings/Panels/TrackingConfigPanel.cpp	/^  virtual void OnModified(DataField &df) override;$/;"	m	class:final	file:
override	src/Dialogs/Settings/Panels/TrackingConfigPanel.cpp	/^  void Prepare(ContainerWindow &parent, const PixelRect &rc) noexcept override;$/;"	m	class:final	file:
override	src/Dialogs/Settings/Panels/UnitsConfigPanel.cpp	/^  bool Save(bool &changed) noexcept override;$/;"	m	class:final	file:
override	src/Dialogs/Settings/Panels/UnitsConfigPanel.cpp	/^  virtual void OnModified(DataField &df) override;$/;"	m	class:final	file:
override	src/Dialogs/Settings/Panels/UnitsConfigPanel.cpp	/^  void Prepare(ContainerWindow &parent, const PixelRect &rc) noexcept override;$/;"	m	class:final	file:
override	src/Dialogs/Settings/Panels/VarioConfigPanel.cpp	/^  bool Save(bool &changed) noexcept override;$/;"	m	class:final	file:
override	src/Dialogs/Settings/Panels/VarioConfigPanel.cpp	/^  void Prepare(ContainerWindow &parent, const PixelRect &rc) noexcept override;$/;"	m	class:final	file:
override	src/Dialogs/Settings/Panels/WaypointDisplayConfigPanel.cpp	/^  bool Save(bool &changed) noexcept override;$/;"	m	class:final	file:
override	src/Dialogs/Settings/Panels/WaypointDisplayConfigPanel.cpp	/^  virtual void OnModified(DataField &df) override;$/;"	m	class:final	file:
override	src/Dialogs/Settings/Panels/WaypointDisplayConfigPanel.cpp	/^  void Prepare(ContainerWindow &parent, const PixelRect &rc) noexcept override;$/;"	m	class:final	file:
override	src/Dialogs/Settings/Panels/WeatherConfigPanel.cpp	/^  bool Save(bool &changed) noexcept override;$/;"	m	class:final	file:
override	src/Dialogs/Settings/Panels/WeatherConfigPanel.cpp	/^  void Prepare(ContainerWindow &parent, const PixelRect &rc) noexcept override;$/;"	m	class:final	file:
override	src/Dialogs/Settings/WindSettingsPanel.hpp	/^                                  const DerivedInfo &calculated) override;$/;"	m	class:final
override	src/Dialogs/Settings/WindSettingsPanel.hpp	/^  bool Save(bool &changed) noexcept override;$/;"	m	class:final
override	src/Dialogs/Settings/WindSettingsPanel.hpp	/^  virtual void OnModified(DataField &df) override;$/;"	m	class:final
override	src/Dialogs/Settings/WindSettingsPanel.hpp	/^  void Hide() noexcept override;$/;"	m	class:final
override	src/Dialogs/Settings/WindSettingsPanel.hpp	/^  void Prepare(ContainerWindow &parent, const PixelRect &rc) noexcept override;$/;"	m	class:final
override	src/Dialogs/Settings/WindSettingsPanel.hpp	/^  void Show(const PixelRect &rc) noexcept override;$/;"	m	class:final
override	src/Dialogs/Settings/dlgBasicSettings.cpp	/^               const PixelRect &rc) noexcept override;$/;"	m	class:final	file:
override	src/Dialogs/Settings/dlgBasicSettings.cpp	/^  bool Save(bool &changed) noexcept override;$/;"	m	class:final	file:
override	src/Dialogs/Settings/dlgBasicSettings.cpp	/^  virtual void OnModified(DataField &df) override;$/;"	m	class:final	file:
override	src/Dialogs/Settings/dlgConfigInfoboxes.cpp	/^  bool OnMouseDouble(PixelPoint p) override;$/;"	m	class:InfoBoxPreview	file:
override	src/Dialogs/Settings/dlgConfigInfoboxes.cpp	/^  bool OnMouseDown(PixelPoint p) override;$/;"	m	class:InfoBoxPreview	file:
override	src/Dialogs/Settings/dlgConfigInfoboxes.cpp	/^  bool Save(bool &changed) noexcept override;$/;"	m	class:final	file:
override	src/Dialogs/Settings/dlgConfigInfoboxes.cpp	/^  virtual void OnPaint(Canvas &canvas) override;$/;"	m	class:InfoBoxPreview	file:
override	src/Dialogs/Settings/dlgConfigInfoboxes.cpp	/^  void Prepare(ContainerWindow &parent, const PixelRect &rc) noexcept override;$/;"	m	class:final	file:
override	src/Dialogs/SimulatorPromptWindow.hpp	/^  virtual void OnCreate() override;$/;"	m	class:final
override	src/Dialogs/SimulatorPromptWindow.hpp	/^  virtual void OnPaint(Canvas &canvas) override;$/;"	m	class:final
override	src/Dialogs/SimulatorPromptWindow.hpp	/^  virtual void OnResize(PixelSize new_size) override;$/;"	m	class:final
override	src/Dialogs/StartupDialog.cpp	/^               const PixelRect &rc) noexcept override;$/;"	m	class:final	file:
override	src/Dialogs/StartupDialog.cpp	/^  bool Save(bool &changed) noexcept override;$/;"	m	class:final	file:
override	src/Dialogs/StatusPanels/FlightStatusPanel.hpp	/^  void Prepare(ContainerWindow &parent, const PixelRect &rc) noexcept override;$/;"	m	class:FlightStatusPanel
override	src/Dialogs/StatusPanels/FlightStatusPanel.hpp	/^  void Refresh() noexcept override;$/;"	m	class:FlightStatusPanel
override	src/Dialogs/StatusPanels/RulesStatusPanel.hpp	/^  void Prepare(ContainerWindow &parent, const PixelRect &rc) noexcept override;$/;"	m	class:RulesStatusPanel
override	src/Dialogs/StatusPanels/RulesStatusPanel.hpp	/^  void Refresh() noexcept override;$/;"	m	class:RulesStatusPanel
override	src/Dialogs/StatusPanels/StatusPanel.hpp	/^  void Show(const PixelRect &rc) noexcept override;$/;"	m	class:StatusPanel
override	src/Dialogs/StatusPanels/SystemStatusPanel.hpp	/^  void Hide() noexcept override;$/;"	m	class:final
override	src/Dialogs/StatusPanels/SystemStatusPanel.hpp	/^  void OnGPSUpdate(const MoreData &basic) override;$/;"	m	class:final
override	src/Dialogs/StatusPanels/SystemStatusPanel.hpp	/^  void Prepare(ContainerWindow &parent, const PixelRect &rc) noexcept override;$/;"	m	class:final
override	src/Dialogs/StatusPanels/SystemStatusPanel.hpp	/^  void Refresh() noexcept override;$/;"	m	class:final
override	src/Dialogs/StatusPanels/SystemStatusPanel.hpp	/^  void Show(const PixelRect &rc) noexcept override;$/;"	m	class:final
override	src/Dialogs/StatusPanels/TaskStatusPanel.hpp	/^  void OnModified(DataField &df) override;$/;"	m	class:TaskStatusPanel
override	src/Dialogs/StatusPanels/TaskStatusPanel.hpp	/^  void Prepare(ContainerWindow &parent, const PixelRect &rc) noexcept override;$/;"	m	class:TaskStatusPanel
override	src/Dialogs/StatusPanels/TaskStatusPanel.hpp	/^  void Refresh() noexcept override;$/;"	m	class:TaskStatusPanel
override	src/Dialogs/StatusPanels/TimesStatusPanel.hpp	/^  void Prepare(ContainerWindow &parent, const PixelRect &rc) noexcept override;$/;"	m	class:TimesStatusPanel
override	src/Dialogs/StatusPanels/TimesStatusPanel.hpp	/^  void Refresh() noexcept override;$/;"	m	class:TimesStatusPanel
override	src/Dialogs/Task/AlternatesListDialog.cpp	/^  void OnActivateItem(unsigned index) noexcept override;$/;"	m	class:final	file:
override	src/Dialogs/Task/AlternatesListDialog.cpp	/^  void Prepare(ContainerWindow &parent, const PixelRect &rc) noexcept override;$/;"	m	class:final	file:
override	src/Dialogs/Task/Manager/Internal.hpp	/^  bool KeyPress(unsigned key_code) noexcept override;$/;"	m	class:final
override	src/Dialogs/Task/Manager/Internal.hpp	/^  void Initialise(ContainerWindow &parent, const PixelRect &rc) noexcept override;$/;"	m	class:final
override	src/Dialogs/Task/Manager/Internal.hpp	/^  void OnPageFlipped() noexcept override;$/;"	m	class:final
override	src/Dialogs/Task/Manager/Internal.hpp	/^  void Show(const PixelRect &rc) noexcept override;$/;"	m	class:final
override	src/Dialogs/Task/Manager/Internal.hpp	/^  ~TaskManagerDialog() noexcept override;$/;"	m	class:final
override	src/Dialogs/Task/Manager/TaskActionsPanel.hpp	/^  void Prepare(ContainerWindow &parent, const PixelRect &rc) noexcept override;$/;"	m	class:TaskActionsPanel
override	src/Dialogs/Task/Manager/TaskActionsPanel.hpp	/^  void ReClick() noexcept override;$/;"	m	class:TaskActionsPanel
override	src/Dialogs/Task/Manager/TaskClosePanel.hpp	/^  bool Click() noexcept override;$/;"	m	class:final
override	src/Dialogs/Task/Manager/TaskClosePanel.hpp	/^  bool SetFocus() noexcept override;$/;"	m	class:final
override	src/Dialogs/Task/Manager/TaskClosePanel.hpp	/^  void Hide() noexcept override;$/;"	m	class:final
override	src/Dialogs/Task/Manager/TaskClosePanel.hpp	/^  void Move(const PixelRect &rc) noexcept override;$/;"	m	class:final
override	src/Dialogs/Task/Manager/TaskClosePanel.hpp	/^  void Prepare(ContainerWindow &parent, const PixelRect &rc) noexcept override;$/;"	m	class:final
override	src/Dialogs/Task/Manager/TaskClosePanel.hpp	/^  void ReClick() noexcept override;$/;"	m	class:final
override	src/Dialogs/Task/Manager/TaskClosePanel.hpp	/^  void Show(const PixelRect &rc) noexcept override;$/;"	m	class:final
override	src/Dialogs/Task/Manager/TaskEditPanel.cpp	/^                   unsigned idx) noexcept override;$/;"	m	class:TaskEditPanel	file:
override	src/Dialogs/Task/Manager/TaskEditPanel.cpp	/^  bool CanActivateItem(unsigned index) const noexcept override;$/;"	m	class:TaskEditPanel	file:
override	src/Dialogs/Task/Manager/TaskEditPanel.cpp	/^  void OnActivateItem(unsigned index) noexcept override;$/;"	m	class:TaskEditPanel	file:
override	src/Dialogs/Task/Manager/TaskEditPanel.cpp	/^  void OnCursorMoved(unsigned index) noexcept override;$/;"	m	class:TaskEditPanel	file:
override	src/Dialogs/Task/Manager/TaskEditPanel.cpp	/^  void Prepare(ContainerWindow &parent, const PixelRect &rc) noexcept override;$/;"	m	class:TaskEditPanel	file:
override	src/Dialogs/Task/Manager/TaskEditPanel.cpp	/^  void ReClick() noexcept override;$/;"	m	class:TaskEditPanel	file:
override	src/Dialogs/Task/Manager/TaskEditPanel.cpp	/^  void Show(const PixelRect &rc) noexcept override;$/;"	m	class:TaskEditPanel	file:
override	src/Dialogs/Task/Manager/TaskListPanel.cpp	/^                   unsigned idx) noexcept override;$/;"	m	class:final	file:
override	src/Dialogs/Task/Manager/TaskListPanel.cpp	/^  void Hide() noexcept override;$/;"	m	class:final	file:
override	src/Dialogs/Task/Manager/TaskListPanel.cpp	/^  void Prepare(ContainerWindow &parent, const PixelRect &rc) noexcept override;$/;"	m	class:final	file:
override	src/Dialogs/Task/Manager/TaskListPanel.cpp	/^  void Show(const PixelRect &rc) noexcept override;$/;"	m	class:final	file:
override	src/Dialogs/Task/Manager/TaskMapButtonRenderer.hpp	/^                  bool enabled, bool focused, bool pressed) const override;$/;"	m	class:TaskMapButtonRenderer
override	src/Dialogs/Task/Manager/TaskMiscPanel.hpp	/^  void ReClick() noexcept override;$/;"	m	class:final
override	src/Dialogs/Task/Manager/TaskMiscPanel.hpp	/^  void Show(const PixelRect &rc) noexcept override;$/;"	m	class:final
override	src/Dialogs/Task/Manager/TaskPropertiesPanel.hpp	/^  bool Leave() noexcept override;$/;"	m	class:final
override	src/Dialogs/Task/Manager/TaskPropertiesPanel.hpp	/^  void OnModified(DataField &df) override;$/;"	m	class:final
override	src/Dialogs/Task/Manager/TaskPropertiesPanel.hpp	/^  void Prepare(ContainerWindow &parent, const PixelRect &rc) noexcept override;$/;"	m	class:final
override	src/Dialogs/Task/Manager/TaskPropertiesPanel.hpp	/^  void ReClick() noexcept override;$/;"	m	class:final
override	src/Dialogs/Task/Manager/TaskPropertiesPanel.hpp	/^  void Show(const PixelRect &rc) noexcept override;$/;"	m	class:final
override	src/Dialogs/Task/MutateTaskPointDialog.cpp	/^                   unsigned i) noexcept override;$/;"	m	class:final	file:
override	src/Dialogs/Task/OptionalStartsDialog.cpp	/^                   unsigned idx) noexcept override;$/;"	m	class:OptionStartsWidget	file:
override	src/Dialogs/Task/OptionalStartsDialog.cpp	/^  void Prepare(ContainerWindow &parent, const PixelRect &rc) noexcept override;$/;"	m	class:OptionStartsWidget	file:
override	src/Dialogs/Task/TargetDialog.cpp	/^  bool KeyPress(unsigned key_code) noexcept override;$/;"	m	class:TargetWidget	file:
override	src/Dialogs/Task/TargetDialog.cpp	/^  void OnTaskModified() override;$/;"	m	class:TargetDialogMapWindow	file:
override	src/Dialogs/Task/TargetDialog.cpp	/^  void Prepare(ContainerWindow &parent, const PixelRect &rc) noexcept override;$/;"	m	class:TargetWidget	file:
override	src/Dialogs/Task/TaskPointDialog.cpp	/^  void OnModified(ObservationZoneEditWidget &widget) override;$/;"	m	class:final	file:
override	src/Dialogs/Task/TaskPointDialog.cpp	/^  void Prepare(ContainerWindow &parent, const PixelRect &rc) noexcept override;$/;"	m	class:final	file:
override	src/Dialogs/Task/Widgets/CylinderZoneEditWidget.hpp	/^  bool Save(bool &changed) noexcept override;$/;"	m	class:CylinderZoneEditWidget
override	src/Dialogs/Task/Widgets/CylinderZoneEditWidget.hpp	/^  void Prepare(ContainerWindow &parent, const PixelRect &rc) noexcept override;$/;"	m	class:CylinderZoneEditWidget
override	src/Dialogs/Task/Widgets/KeyholeZoneEditWidget.hpp	/^  bool Save(bool &changed) noexcept override;$/;"	m	class:KeyholeZoneEditWidget
override	src/Dialogs/Task/Widgets/KeyholeZoneEditWidget.hpp	/^  void Prepare(ContainerWindow &parent, const PixelRect &rc) noexcept override;$/;"	m	class:KeyholeZoneEditWidget
override	src/Dialogs/Task/Widgets/LineSectorZoneEditWidget.hpp	/^  bool Save(bool &changed) noexcept override;$/;"	m	class:LineSectorZoneEditWidget
override	src/Dialogs/Task/Widgets/LineSectorZoneEditWidget.hpp	/^  void Prepare(ContainerWindow &parent, const PixelRect &rc) noexcept override;$/;"	m	class:LineSectorZoneEditWidget
override	src/Dialogs/Task/Widgets/ObservationZoneEditWidget.hpp	/^  void OnModified(DataField &df) override;$/;"	m	class:ObservationZoneEditWidget
override	src/Dialogs/Task/Widgets/SectorZoneEditWidget.hpp	/^  bool Save(bool &changed) noexcept override;$/;"	m	class:SectorZoneEditWidget
override	src/Dialogs/Task/Widgets/SectorZoneEditWidget.hpp	/^  void Prepare(ContainerWindow &parent, const PixelRect &rc) noexcept override;$/;"	m	class:SectorZoneEditWidget
override	src/Dialogs/Traffic/FlarmTrafficDetails.cpp	/^  void Hide() noexcept override;$/;"	m	class:final	file:
override	src/Dialogs/Traffic/FlarmTrafficDetails.cpp	/^  void Prepare(ContainerWindow &parent, const PixelRect &rc) noexcept override;$/;"	m	class:final	file:
override	src/Dialogs/Traffic/FlarmTrafficDetails.cpp	/^  void Show(const PixelRect &rc) noexcept override;$/;"	m	class:final	file:
override	src/Dialogs/Traffic/TeamCodeDialog.cpp	/^                                  const DerivedInfo &calculated) override;$/;"	m	class:final	file:
override	src/Dialogs/Traffic/TeamCodeDialog.cpp	/^               const PixelRect &rc) noexcept override;$/;"	m	class:final	file:
override	src/Dialogs/Traffic/TeamCodeDialog.cpp	/^  void Hide() noexcept override;$/;"	m	class:final	file:
override	src/Dialogs/Traffic/TeamCodeDialog.cpp	/^  void Show(const PixelRect &rc) noexcept override;$/;"	m	class:final	file:
override	src/Dialogs/Traffic/TrafficList.cpp	/^                           unsigned idx) noexcept override;$/;"	m	class:TrafficListWidget	file:
override	src/Dialogs/Traffic/TrafficList.cpp	/^               const PixelRect &rc) noexcept override;$/;"	m	class:TrafficListWidget	file:
override	src/Dialogs/Traffic/TrafficList.cpp	/^  virtual void OnActivateItem(unsigned index) noexcept override;$/;"	m	class:TrafficListWidget	file:
override	src/Dialogs/Waypoint/Manager.cpp	/^                   unsigned idx) noexcept override;$/;"	m	class:final	file:
override	src/Dialogs/Waypoint/Manager.cpp	/^  void OnActivateItem(unsigned index) noexcept override;$/;"	m	class:final	file:
override	src/Dialogs/Waypoint/Manager.cpp	/^  void Prepare(ContainerWindow &parent, const PixelRect &rc) noexcept override;$/;"	m	class:final	file:
override	src/Dialogs/Waypoint/WaypointCommandsWidget.hpp	/^  void Prepare(ContainerWindow &parent, const PixelRect &rc) noexcept override;$/;"	m	class:final
override	src/Dialogs/Waypoint/WaypointInfoWidget.hpp	/^  void Prepare(ContainerWindow &parent, const PixelRect &rc) noexcept override;$/;"	m	struct:WaypointInfoWidget
override	src/Dialogs/Waypoint/WaypointList.cpp	/^                       const PixelRect &rc) noexcept override;$/;"	m	class:WaypointFilterWidget	file:
override	src/Dialogs/Waypoint/WaypointList.cpp	/^                   unsigned idx) noexcept override;$/;"	m	class:final	file:
override	src/Dialogs/Waypoint/WaypointList.cpp	/^  void OnActivateItem(unsigned index) noexcept override;$/;"	m	class:final	file:
override	src/Dialogs/Waypoint/WaypointList.cpp	/^  void OnGPSUpdate(const MoreData &basic) override;$/;"	m	class:final	file:
override	src/Dialogs/Waypoint/WaypointList.cpp	/^  void OnModified(DataField &df) override;$/;"	m	class:final	file:
override	src/Dialogs/Waypoint/WaypointList.cpp	/^  void Prepare(ContainerWindow &parent, const PixelRect &rc) noexcept override;$/;"	m	class:final	file:
override	src/Dialogs/Waypoint/dlgWaypointDetails.cpp	/^                   unsigned idx) noexcept override;$/;"	m	class:final	file:
override	src/Dialogs/Waypoint/dlgWaypointDetails.cpp	/^  bool KeyPress(unsigned key_code) noexcept override;$/;"	m	class:final	file:
override	src/Dialogs/Waypoint/dlgWaypointDetails.cpp	/^  void OnActivateItem(unsigned index) noexcept override;$/;"	m	class:final	file:
override	src/Dialogs/Waypoint/dlgWaypointDetails.cpp	/^  void Prepare(ContainerWindow &parent, const PixelRect &rc) noexcept override;$/;"	m	class:final	file:
override	src/Dialogs/Waypoint/dlgWaypointDetails.cpp	/^  void Unprepare() noexcept override;$/;"	m	class:final	file:
override	src/Dialogs/Waypoint/dlgWaypointEdit.cpp	/^  bool Save(bool &changed) noexcept override;$/;"	m	class:final	file:
override	src/Dialogs/Waypoint/dlgWaypointEdit.cpp	/^  void Prepare(ContainerWindow &parent, const PixelRect &rc) noexcept override;$/;"	m	class:final	file:
override	src/Dialogs/Weather/NOAADetails.cpp	/^  void Show(const PixelRect &rc) noexcept override;$/;"	m	class:final	file:
override	src/Dialogs/Weather/NOAAList.cpp	/^                   unsigned idx) noexcept override;$/;"	m	class:final	file:
override	src/Dialogs/Weather/NOAAList.cpp	/^               const PixelRect &rc) noexcept override;$/;"	m	class:final	file:
override	src/Dialogs/Weather/NOAAList.cpp	/^  void OnActivateItem(unsigned index) noexcept override;$/;"	m	class:final	file:
override	src/Dialogs/Weather/RASPDialog.cpp	/^  bool Save(bool &changed) noexcept override;$/;"	m	class:final	file:
override	src/Dialogs/Weather/RASPDialog.cpp	/^  void Prepare(ContainerWindow &parent, const PixelRect &rc) noexcept override;$/;"	m	class:final	file:
override	src/Dialogs/WidgetDialog.hpp	/^  virtual bool OnAnyKeyDown(unsigned key_code) override;$/;"	m	class:WidgetDialog
override	src/Dialogs/WidgetDialog.hpp	/^  virtual void OnDestroy() override;$/;"	m	class:WidgetDialog
override	src/Dialogs/WidgetDialog.hpp	/^  virtual void OnResize(PixelSize new_size) override;$/;"	m	class:WidgetDialog
override	src/Dialogs/WidgetDialog.hpp	/^  virtual void ReinitialiseLayout(const PixelRect &parent_rc) override;$/;"	m	class:WidgetDialog
override	src/Dialogs/WidgetDialog.hpp	/^  virtual void SetDefaultFocus() override;$/;"	m	class:WidgetDialog
override	src/Dialogs/WidgetDialog.hpp	/^  void SetModalResult(int id) noexcept override;$/;"	m	class:WidgetDialog
override	src/Dialogs/dlgAnalysis.cpp	/^  bool KeyPress(unsigned key_code) noexcept override;$/;"	m	class:final	file:
override	src/Dialogs/dlgAnalysis.cpp	/^  bool OnMouseDown(PixelPoint p) override;$/;"	m	class:ChartControl	file:
override	src/Dialogs/dlgAnalysis.cpp	/^  bool OnMouseMove(PixelPoint p, unsigned keys) override;$/;"	m	class:ChartControl	file:
override	src/Dialogs/dlgAnalysis.cpp	/^  bool OnMouseUp(PixelPoint p) override;$/;"	m	class:ChartControl	file:
override	src/Dialogs/dlgAnalysis.cpp	/^  virtual void OnPaint(Canvas &canvas) override;$/;"	m	class:ChartControl	file:
override	src/Dialogs/dlgAnalysis.cpp	/^  void Prepare(ContainerWindow &parent, const PixelRect &rc) noexcept override;$/;"	m	class:final	file:
override	src/Dialogs/dlgCredits.cpp	/^  virtual void OnPaint(Canvas &canvas) override;$/;"	m	class:final	file:
override	src/Dialogs/dlgQuickMenu.cpp	/^                  bool enabled, bool focused, bool pressed) const override;$/;"	m	class:final	file:
override	src/Dialogs/dlgQuickMenu.cpp	/^  bool KeyPress(unsigned key_code) noexcept override;$/;"	m	class:final	file:
override	src/Dialogs/dlgQuickMenu.cpp	/^  bool SetFocus() noexcept override;$/;"	m	class:final	file:
override	src/Dialogs/dlgQuickMenu.cpp	/^  unsigned GetMinimumButtonWidth() const override;$/;"	m	class:final	file:
override	src/Dialogs/dlgQuickMenu.cpp	/^  void Prepare(ContainerWindow &parent, const PixelRect &rc) noexcept override;$/;"	m	class:final	file:
override	src/DrawThread.hpp	/^  void Run() noexcept override;$/;"	m	class:final
override	src/Engine/Airspace/AirspaceCircle.hpp	/^                                        const FlatProjection &projection) const override;$/;"	m	class:final
override	src/Engine/Airspace/AirspaceCircle.hpp	/^                        const FlatProjection &projection) const override;$/;"	m	class:final
override	src/Engine/Airspace/AirspaceCircle.hpp	/^  bool Inside(const GeoPoint &loc) const override;$/;"	m	class:final
override	src/Engine/Airspace/AirspacePolygon.hpp	/^                                        const FlatProjection &projection) const override;$/;"	m	class:final
override	src/Engine/Airspace/AirspacePolygon.hpp	/^                        const FlatProjection &projection) const override;$/;"	m	class:final
override	src/Engine/Airspace/AirspacePolygon.hpp	/^  bool Inside(const GeoPoint &loc) const override;$/;"	m	class:final
override	src/Engine/Airspace/AirspacePolygon.hpp	/^  const GeoPoint GetCenter() const override;$/;"	m	class:final
override	src/Engine/Airspace/AirspacePolygon.hpp	/^  const GeoPoint GetReferenceLocation() const override;$/;"	m	class:final
override	src/Engine/Contest/Solvers/ContestDijkstra.hpp	/^  ContestResult CalculateResult() const noexcept override;$/;"	m	class:ContestDijkstra
override	src/Engine/Contest/Solvers/ContestDijkstra.hpp	/^  SolverResult Solve(bool exhaustive) noexcept override;$/;"	m	class:ContestDijkstra
override	src/Engine/Contest/Solvers/ContestDijkstra.hpp	/^  void AddEdges(ScanTaskPoint curNode) noexcept override;$/;"	m	class:ContestDijkstra
override	src/Engine/Contest/Solvers/ContestDijkstra.hpp	/^  void CopySolution(ContestTraceVector &vec) const noexcept override;$/;"	m	class:ContestDijkstra
override	src/Engine/Contest/Solvers/ContestDijkstra.hpp	/^  void Reset() noexcept override;$/;"	m	class:ContestDijkstra
override	src/Engine/Contest/Solvers/ContestDijkstra.hpp	/^  void UpdateTrace(bool force) noexcept override;$/;"	m	class:ContestDijkstra
override	src/Engine/Contest/Solvers/NetCoupe.hpp	/^  ContestResult CalculateResult() const noexcept override;$/;"	m	class:NetCoupe
override	src/Engine/Contest/Solvers/OLCFAI.hpp	/^  ContestResult CalculateResult() const noexcept override;$/;"	m	class:OLCFAI
override	src/Engine/Contest/Solvers/OLCLeague.hpp	/^  ContestResult CalculateResult() const noexcept override;$/;"	m	class:OLCLeague
override	src/Engine/Contest/Solvers/OLCLeague.hpp	/^  SolverResult Solve(bool exhaustive) noexcept override;$/;"	m	class:OLCLeague
override	src/Engine/Contest/Solvers/OLCLeague.hpp	/^  void CopySolution(ContestTraceVector &vec) const noexcept override;$/;"	m	class:OLCLeague
override	src/Engine/Contest/Solvers/OLCLeague.hpp	/^  void Reset() noexcept override;$/;"	m	class:OLCLeague
override	src/Engine/Contest/Solvers/OLCPlus.hpp	/^  ContestResult CalculateResult() const noexcept override;$/;"	m	class:OLCPlus
override	src/Engine/Contest/Solvers/OLCPlus.hpp	/^  SolverResult Solve(bool exhaustive) noexcept override;$/;"	m	class:OLCPlus
override	src/Engine/Contest/Solvers/OLCPlus.hpp	/^  void CopySolution(ContestTraceVector &vec) const noexcept override;$/;"	m	class:OLCPlus
override	src/Engine/Contest/Solvers/OLCPlus.hpp	/^  void Reset() noexcept override;$/;"	m	class:OLCPlus
override	src/Engine/Contest/Solvers/OLCSISAT.hpp	/^  ContestResult CalculateResult(const ContestTraceVector &solution) const noexcept override;$/;"	m	class:OLCSISAT
override	src/Engine/Contest/Solvers/OLCSprint.hpp	/^  ContestResult CalculateResult() const noexcept override;$/;"	m	class:OLCSprint
override	src/Engine/Contest/Solvers/OLCSprint.hpp	/^  void AddEdges(ScanTaskPoint origin) noexcept override;$/;"	m	class:OLCSprint
override	src/Engine/Contest/Solvers/OLCSprint.hpp	/^  void AddStartEdges() noexcept override;$/;"	m	class:OLCSprint
override	src/Engine/Contest/Solvers/OLCSprint.hpp	/^  void UpdateTrace(bool force) noexcept override;$/;"	m	class:OLCSprint
override	src/Engine/Contest/Solvers/TriangleContest.hpp	/^  ContestResult CalculateResult() const noexcept override;$/;"	v
override	src/Engine/Contest/Solvers/TriangleContest.hpp	/^  SolverResult Solve(bool exhaustive) noexcept override;$/;"	v
override	src/Engine/Contest/Solvers/TriangleContest.hpp	/^  bool UpdateScore() noexcept override;$/;"	v
override	src/Engine/Contest/Solvers/TriangleContest.hpp	/^  void CopySolution(ContestTraceVector &vec) const noexcept override;$/;"	v
override	src/Engine/Contest/Solvers/TriangleContest.hpp	/^  void Reset() noexcept override;$/;"	v
override	src/Engine/Contest/Solvers/TriangleContest.hpp	/^  void UpdateTrace(bool force) noexcept override;$/;"	v
override	src/Engine/Contest/Solvers/XContestFree.hpp	/^  ContestResult CalculateResult() const noexcept override;$/;"	m	class:XContestFree
override	src/Engine/Contest/Solvers/XContestTriangle.hpp	/^  ContestResult CalculateResult() const noexcept override;$/;"	m	class:XContestTriangle
override	src/Engine/Contest/Solvers/XContestTriangle.hpp	/^  SolverResult Solve(bool exhaustive) noexcept override;$/;"	m	class:XContestTriangle
override	src/Engine/Route/AirspaceRoute.hpp	/^  bool CheckClearance(const RouteLink &e, RoutePoint &inp) const override;$/;"	m	class:AirspaceRoute
override	src/Engine/Route/AirspaceRoute.hpp	/^  bool CheckSecondary(const RouteLink &e) override;$/;"	m	class:AirspaceRoute
override	src/Engine/Route/AirspaceRoute.hpp	/^  void AddNearby(const RouteLink &e) override;$/;"	m	class:AirspaceRoute
override	src/Engine/Route/AirspaceRoute.hpp	/^  void OnSolve(const AGeoPoint &origin, const AGeoPoint &destination) override;$/;"	m	class:AirspaceRoute
override	src/Engine/Route/AirspaceRoute.hpp	/^  void Reset() override;$/;"	m	class:AirspaceRoute
override	src/Engine/Task/AbstractTask.hpp	/^                  const GlidePolar &glide_polar) noexcept override;$/;"	m	class:AbstractTask
override	src/Engine/Task/AbstractTask.hpp	/^              const GlidePolar &glide_polar) noexcept override;$/;"	m	class:AbstractTask
override	src/Engine/Task/Factory/AATTaskFactory.hpp	/^  TaskPointFactoryType GetMutatedPointType(const OrderedTaskPoint &tp) const override;$/;"	m	class:final
override	src/Engine/Task/Factory/FAITaskFactory.hpp	/^                            double &finish_radius) const override;$/;"	m	class:FAITaskFactory
override	src/Engine/Task/Factory/FAITaskFactory.hpp	/^  TaskPointFactoryType GetMutatedPointType(const OrderedTaskPoint &tp) const override;$/;"	m	class:FAITaskFactory
override	src/Engine/Task/Factory/FAITaskFactory.hpp	/^  TaskValidationErrorSet Validate() const noexcept override;$/;"	m	class:FAITaskFactory
override	src/Engine/Task/Factory/FAITaskFactory.hpp	/^  void UpdateOrderedTaskSettings(OrderedTaskSettings& to) override;$/;"	m	class:FAITaskFactory
override	src/Engine/Task/Factory/FAITriangleTaskFactory.hpp	/^  TaskValidationErrorSet Validate() const noexcept override;$/;"	m	class:FAITriangleTaskFactory
override	src/Engine/Task/Factory/MatTaskFactory.hpp	/^  TaskPointFactoryType GetMutatedPointType(const OrderedTaskPoint &tp) const override;$/;"	m	class:final
override	src/Engine/Task/Factory/TouringTaskFactory.hpp	/^  void UpdateOrderedTaskSettings(OrderedTaskSettings &to) override;$/;"	m	class:TouringTaskFactory
override	src/Engine/Task/ObservationZones/AnnularSectorZone.hpp	/^  OZBoundary GetBoundary() const override;$/;"	m	class:AnnularSectorZone
override	src/Engine/Task/ObservationZones/AnnularSectorZone.hpp	/^  bool Equals(const ObservationZonePoint &other) const override;$/;"	m	class:AnnularSectorZone
override	src/Engine/Task/ObservationZones/AnnularSectorZone.hpp	/^  bool IsInSector(const GeoPoint &location) const override;$/;"	m	class:AnnularSectorZone
override	src/Engine/Task/ObservationZones/CylinderZone.hpp	/^  GeoPoint GetRandomPointInSector(const double mag) const override;$/;"	m	class:CylinderZone
override	src/Engine/Task/ObservationZones/CylinderZone.hpp	/^  OZBoundary GetBoundary() const override;$/;"	m	class:CylinderZone
override	src/Engine/Task/ObservationZones/CylinderZone.hpp	/^  bool Equals(const ObservationZonePoint &other) const override;$/;"	m	class:CylinderZone
override	src/Engine/Task/ObservationZones/CylinderZone.hpp	/^  double ScoreAdjustment() const override;$/;"	m	class:CylinderZone
override	src/Engine/Task/ObservationZones/KeyholeZone.hpp	/^  OZBoundary GetBoundary() const override;$/;"	m	class:final
override	src/Engine/Task/ObservationZones/KeyholeZone.hpp	/^  bool IsInSector(const GeoPoint &location) const override;$/;"	m	class:final
override	src/Engine/Task/ObservationZones/KeyholeZone.hpp	/^  double ScoreAdjustment() const override;$/;"	m	class:final
override	src/Engine/Task/ObservationZones/LineSectorZone.hpp	/^  double ScoreAdjustment() const override;$/;"	m	class:LineSectorZone
override	src/Engine/Task/ObservationZones/SectorZone.hpp	/^  OZBoundary GetBoundary() const override;$/;"	m	class:SectorZone
override	src/Engine/Task/ObservationZones/SectorZone.hpp	/^  bool Equals(const ObservationZonePoint &other) const override;$/;"	m	class:SectorZone
override	src/Engine/Task/ObservationZones/SectorZone.hpp	/^  bool IsInSector(const GeoPoint &location) const override;$/;"	m	class:SectorZone
override	src/Engine/Task/ObservationZones/SectorZone.hpp	/^  double ScoreAdjustment() const override;$/;"	m	class:SectorZone
override	src/Engine/Task/ObservationZones/SymmetricSectorZone.hpp	/^  bool Equals(const ObservationZonePoint &other) const override;$/;"	m	class:SymmetricSectorZone
override	src/Engine/Task/ObservationZones/SymmetricSectorZone.hpp	/^  void SetLegs(const GeoPoint *previous, const GeoPoint *next) override;$/;"	m	class:SymmetricSectorZone
override	src/Engine/Task/Ordered/OrderedTask.hpp	/^                              GlideResult &total, GlideResult &leg) noexcept override;$/;"	m	class:final
override	src/Engine/Task/Ordered/OrderedTask.hpp	/^                            const GlideResult &solution_remaining_leg) noexcept override;$/;"	m	class:final
override	src/Engine/Task/Ordered/OrderedTask.hpp	/^                            double &value) const noexcept override;$/;"	m	class:final
override	src/Engine/Task/Ordered/OrderedTask.hpp	/^                           const GlidePolar &glide_polar) const noexcept override;$/;"	m	class:final
override	src/Engine/Task/Ordered/OrderedTask.hpp	/^                          double *dmin, double *dmax) noexcept override;$/;"	m	class:final
override	src/Engine/Task/Ordered/OrderedTask.hpp	/^                        const AircraftState &state_last) noexcept override;$/;"	m	class:final
override	src/Engine/Task/Ordered/OrderedTask.hpp	/^                       double &value) const noexcept override;$/;"	m	class:final
override	src/Engine/Task/Ordered/OrderedTask.hpp	/^                    const bool full_update) noexcept override;$/;"	m	class:final
override	src/Engine/Task/Ordered/OrderedTask.hpp	/^                  const GlidePolar &glide_polar) noexcept override;$/;"	m	class:final
override	src/Engine/Task/Ordered/OrderedTask.hpp	/^                  double &best) const noexcept override;$/;"	m	class:final
override	src/Engine/Task/Ordered/OrderedTask.hpp	/^  TaskValidationErrorSet CheckTask() const noexcept override;$/;"	m	class:final
override	src/Engine/Task/Ordered/OrderedTask.hpp	/^  TaskWaypoint *GetActiveTaskPoint() const noexcept override;$/;"	m	class:final
override	src/Engine/Task/Ordered/OrderedTask.hpp	/^  bool IsScored() const noexcept override;$/;"	m	class:final
override	src/Engine/Task/Ordered/OrderedTask.hpp	/^  bool IsValidTaskPoint(const int index_offset=0) const noexcept override;$/;"	m	class:final
override	src/Engine/Task/Ordered/OrderedTask.hpp	/^  bool TaskStarted(bool soft=false) const noexcept override;$/;"	m	class:final
override	src/Engine/Task/Ordered/OrderedTask.hpp	/^  double CalcGradient(const AircraftState &state_now) const noexcept override;$/;"	m	class:final
override	src/Engine/Task/Ordered/OrderedTask.hpp	/^  double ScanDistanceNominal() noexcept override;$/;"	m	class:final
override	src/Engine/Task/Ordered/OrderedTask.hpp	/^  double ScanDistancePlanned() noexcept override;$/;"	m	class:final
override	src/Engine/Task/Ordered/OrderedTask.hpp	/^  double ScanDistanceRemaining(const GeoPoint &ref) noexcept override;$/;"	m	class:final
override	src/Engine/Task/Ordered/OrderedTask.hpp	/^  double ScanDistanceScored(const GeoPoint &ref) noexcept override;$/;"	m	class:final
override	src/Engine/Task/Ordered/OrderedTask.hpp	/^  double ScanDistanceTravelled(const GeoPoint &ref) noexcept override;$/;"	m	class:final
override	src/Engine/Task/Ordered/OrderedTask.hpp	/^  double ScanLegStartTime() noexcept override;$/;"	m	class:final
override	src/Engine/Task/Ordered/OrderedTask.hpp	/^  double ScanTotalStartTime() noexcept override;$/;"	m	class:final
override	src/Engine/Task/Ordered/OrderedTask.hpp	/^  void AcceptTaskPointVisitor(TaskPointConstVisitor &visitor) const override;$/;"	m	class:final
override	src/Engine/Task/Ordered/OrderedTask.hpp	/^  void Reset() noexcept override;$/;"	m	class:final
override	src/Engine/Task/Ordered/OrderedTask.hpp	/^  void SetActiveTaskPoint(unsigned desired) noexcept override;$/;"	m	class:final
override	src/Engine/Task/Ordered/Points/AATPoint.hpp	/^                        const FlatProjection &projection) override;$/;"	m	class:final
override	src/Engine/Task/Ordered/Points/AATPoint.hpp	/^                       const FlatProjection &projection) override;$/;"	m	class:final
override	src/Engine/Task/Ordered/Points/AATPoint.hpp	/^  bool Equals(const OrderedTaskPoint &other) const override;$/;"	m	class:final
override	src/Engine/Task/Ordered/Points/AATPoint.hpp	/^  const GeoPoint& GetLocationRemaining() const override;$/;"	m	class:final
override	src/Engine/Task/Ordered/Points/ASTPoint.hpp	/^  bool Equals(const OrderedTaskPoint &_other) const override;$/;"	m	class:final
override	src/Engine/Task/Ordered/Points/FinishPoint.hpp	/^                            const AircraftState &ref_last) const override;$/;"	m	class:final
override	src/Engine/Task/Ordered/Points/FinishPoint.hpp	/^                     OrderedTaskPoint *next) override;$/;"	m	class:final
override	src/Engine/Task/Ordered/Points/FinishPoint.hpp	/^  bool EntryPrecondition() const override;$/;"	m	class:final
override	src/Engine/Task/Ordered/Points/FinishPoint.hpp	/^  bool IsInSector(const AircraftState &ref) const override;$/;"	m	class:final
override	src/Engine/Task/Ordered/Points/FinishPoint.hpp	/^  double GetElevation() const override;$/;"	m	class:final
override	src/Engine/Task/Ordered/Points/FinishPoint.hpp	/^  void Reset() override;$/;"	m	class:final
override	src/Engine/Task/Ordered/Points/FinishPoint.hpp	/^  void SetOrderedTaskSettings(const OrderedTaskSettings &otb) override;$/;"	m	class:final
override	src/Engine/Task/Ordered/Points/FinishPoint.hpp	/^  void SetTaskBehaviour(const TaskBehaviour &tb) override;$/;"	m	class:final
override	src/Engine/Task/Ordered/Points/IntermediatePoint.hpp	/^  double GetElevation() const override;$/;"	m	class:IntermediateTaskPoint
override	src/Engine/Task/Ordered/Points/IntermediatePoint.hpp	/^  void SetTaskBehaviour(const TaskBehaviour &tb) override;$/;"	m	class:IntermediateTaskPoint
override	src/Engine/Task/Ordered/Points/OrderedTaskPoint.hpp	/^                            const AircraftState &ref_last) const override;$/;"	m	class:OrderedTaskPoint
override	src/Engine/Task/Ordered/Points/OrderedTaskPoint.hpp	/^  GeoVector GetNextLegVector() const override;$/;"	m	class:OrderedTaskPoint
override	src/Engine/Task/Ordered/Points/StartPoint.hpp	/^                           const AircraftState &ref_last) const override;$/;"	m	class:final
override	src/Engine/Task/Ordered/Points/StartPoint.hpp	/^                     OrderedTaskPoint *next) override;$/;"	m	class:final
override	src/Engine/Task/Ordered/Points/StartPoint.hpp	/^  bool IsInSector(const AircraftState &ref) const override;$/;"	m	class:final
override	src/Engine/Task/Ordered/Points/StartPoint.hpp	/^  double GetElevation() const override;$/;"	m	class:final
override	src/Engine/Task/Ordered/Points/StartPoint.hpp	/^  void SetOrderedTaskSettings(const OrderedTaskSettings &s) override;$/;"	m	class:final
override	src/Engine/Task/Ordered/Points/StartPoint.hpp	/^  void SetTaskBehaviour(const TaskBehaviour &tb) override;$/;"	m	class:final
override	src/Engine/Task/Solvers/TaskBestMc.hpp	/^  virtual double f(double mc) noexcept override;$/;"	m	class:final
override	src/Engine/Task/Solvers/TaskCruiseEfficiency.hpp	/^  double f(double x) noexcept override;$/;"	m	class:final
override	src/Engine/Task/Solvers/TaskEffectiveMacCready.hpp	/^  double f(double x) noexcept override;$/;"	m	class:final
override	src/Engine/Task/Solvers/TaskGlideRequired.hpp	/^  double f(double mc) noexcept override;$/;"	m	class:final
override	src/Engine/Task/Solvers/TaskMacCreadyRemaining.hpp	/^                         double minH) const override;$/;"	m	class:final
override	src/Engine/Task/Solvers/TaskMacCreadyRemaining.hpp	/^  AircraftState get_aircraft_start(const AircraftState &aircraft) const override;$/;"	m	class:final
override	src/Engine/Task/Solvers/TaskMacCreadyTotal.hpp	/^                         double minH) const override;$/;"	m	class:final
override	src/Engine/Task/Solvers/TaskMacCreadyTotal.hpp	/^  AircraftState get_aircraft_start(const AircraftState &aircraft) const override;$/;"	m	class:final
override	src/Engine/Task/Solvers/TaskMacCreadyTravelled.hpp	/^                                 double minH) const override;$/;"	m	class:final
override	src/Engine/Task/Solvers/TaskMacCreadyTravelled.hpp	/^  virtual AircraftState get_aircraft_start(const AircraftState &aircraft) const override;$/;"	m	class:final
override	src/Engine/Task/Solvers/TaskMacCreadyTravelled.hpp	/^  virtual double get_min_height(const AircraftState &aircraft) const override;$/;"	m	class:final
override	src/Engine/Task/Solvers/TaskMinTarget.hpp	/^  double f(double p) noexcept override;$/;"	m	class:final
override	src/Engine/Task/Solvers/TaskOptTarget.hpp	/^  double f(double p) noexcept override;$/;"	m	class:final
override	src/Engine/Task/Unordered/AbortTask.hpp	/^                            bool full_update) noexcept override;$/;"	m	class:AbortTask
override	src/Engine/Task/Unordered/AbortTask.hpp	/^  TaskWaypoint *GetActiveTaskPoint() const noexcept override;$/;"	m	class:AbortTask
override	src/Engine/Task/Unordered/AbortTask.hpp	/^  bool IsValidTaskPoint(int index_offset) const noexcept override;$/;"	m	class:AbortTask
override	src/Engine/Task/Unordered/AbortTask.hpp	/^  unsigned TaskSize() const noexcept override;$/;"	m	class:AbortTask
override	src/Engine/Task/Unordered/AbortTask.hpp	/^  virtual void Reset() noexcept override;$/;"	m	class:AbortTask
override	src/Engine/Task/Unordered/AbortTask.hpp	/^  void AcceptTaskPointVisitor(TaskPointConstVisitor &visitor) const noexcept override;$/;"	m	class:AbortTask
override	src/Engine/Task/Unordered/AbortTask.hpp	/^  void SetActiveTaskPoint(unsigned index) noexcept override;$/;"	m	class:AbortTask
override	src/Engine/Task/Unordered/AlternateTask.hpp	/^                            bool reachable) noexcept override;$/;"	m	class:final
override	src/Engine/Task/Unordered/AlternateTask.hpp	/^  virtual void Clear() noexcept override;$/;"	m	class:final
override	src/Engine/Task/Unordered/AlternateTask.hpp	/^  virtual void Reset() noexcept override;$/;"	m	class:final
override	src/Engine/Task/Unordered/GotoTask.hpp	/^                    bool full_update) noexcept override;$/;"	m	class:final
override	src/Engine/Task/Unordered/GotoTask.hpp	/^  TaskWaypoint *GetActiveTaskPoint() const noexcept override;$/;"	m	class:final
override	src/Engine/Task/Unordered/GotoTask.hpp	/^  bool IsValidTaskPoint(const int index_offset) const noexcept override;$/;"	m	class:final
override	src/Engine/Task/Unordered/GotoTask.hpp	/^  unsigned TaskSize() const noexcept override;$/;"	m	class:final
override	src/Engine/Task/Unordered/GotoTask.hpp	/^  void AcceptTaskPointVisitor(TaskPointConstVisitor& visitor) const override;$/;"	m	class:final
override	src/Engine/Task/Unordered/GotoTask.hpp	/^  void SetActiveTaskPoint(unsigned index) noexcept override;$/;"	m	class:final
override	src/Engine/Task/Unordered/UnorderedTask.hpp	/^                              GlideResult &total, GlideResult &leg) noexcept override;$/;"	m	class:UnorderedTask
override	src/Engine/Task/Unordered/UnorderedTask.hpp	/^                            const GlideResult &solution_remaining_leg) noexcept override;$/;"	m	class:UnorderedTask
override	src/Engine/Task/Unordered/UnorderedTask.hpp	/^                           const GlidePolar &glide_polar) const noexcept override;$/;"	m	class:UnorderedTask
override	src/Engine/Task/Unordered/UnorderedTask.hpp	/^                          double *dmin, double *dmax) noexcept override;$/;"	m	class:UnorderedTask
override	src/Engine/Task/Unordered/UnorderedTask.hpp	/^                        const AircraftState &state_last) noexcept override;$/;"	m	class:UnorderedTask
override	src/Engine/Task/Unordered/UnorderedTask.hpp	/^                  double& best) const noexcept override;$/;"	m	class:UnorderedTask
override	src/Engine/Task/Unordered/UnorderedTask.hpp	/^  TaskValidationErrorSet CheckTask() const noexcept override;$/;"	m	class:UnorderedTask
override	src/Engine/Task/Unordered/UnorderedTask.hpp	/^  double CalcGradient(const AircraftState &state_now) const noexcept override;$/;"	m	class:UnorderedTask
override	src/Engine/Task/Unordered/UnorderedTask.hpp	/^  double ScanDistanceNominal() noexcept override;$/;"	m	class:UnorderedTask
override	src/Engine/Task/Unordered/UnorderedTask.hpp	/^  double ScanDistancePlanned() noexcept override;$/;"	m	class:UnorderedTask
override	src/Engine/Task/Unordered/UnorderedTask.hpp	/^  double ScanDistanceRemaining(const GeoPoint &ref) noexcept override;$/;"	m	class:UnorderedTask
override	src/Engine/Task/Unordered/UnorderedTask.hpp	/^  double ScanDistanceScored(const GeoPoint &ref) noexcept override;$/;"	m	class:UnorderedTask
override	src/Engine/Task/Unordered/UnorderedTask.hpp	/^  double ScanDistanceTravelled(const GeoPoint &ref) noexcept override;$/;"	m	class:UnorderedTask
override	src/Engine/Task/Unordered/UnorderedTask.hpp	/^  double ScanLegStartTime() noexcept override;$/;"	m	class:UnorderedTask
override	src/Engine/Task/Unordered/UnorderedTask.hpp	/^  double ScanTotalStartTime() noexcept override;$/;"	m	class:UnorderedTask
override	src/Engine/Task/Unordered/UnorderedTaskPoint.hpp	/^  virtual GeoVector GetVectorRemaining(const GeoPoint &reference) const override;$/;"	m	class:final
override	src/Engine/Task/Unordered/UnorderedTaskPoint.hpp	/^  virtual double GetElevation() const override;$/;"	m	class:final
override	src/Form/Button.hpp	/^  bool OnKeyCheck(unsigned key_code) const override;$/;"	m	class:Button
override	src/Form/Button.hpp	/^  bool OnKeyDown(unsigned key_code) override;$/;"	m	class:Button
override	src/Form/Button.hpp	/^  bool OnMouseDown(PixelPoint p) override;$/;"	m	class:Button
override	src/Form/Button.hpp	/^  bool OnMouseMove(PixelPoint p, unsigned keys) override;$/;"	m	class:Button
override	src/Form/Button.hpp	/^  bool OnMouseUp(PixelPoint p) override;$/;"	m	class:Button
override	src/Form/Button.hpp	/^  void OnCancelMode() override;$/;"	m	class:Button
override	src/Form/Button.hpp	/^  void OnKillFocus() override;$/;"	m	class:Button
override	src/Form/Button.hpp	/^  void OnPaint(Canvas &canvas) override;$/;"	m	class:Button
override	src/Form/Button.hpp	/^  void OnSetFocus() override;$/;"	m	class:Button
override	src/Form/Button.hpp	/^  ~Button() noexcept override;$/;"	m	class:Button
override	src/Form/CheckBox.hpp	/^  bool OnKeyCheck(unsigned key_code) const override;$/;"	m	class:CheckBoxControl
override	src/Form/CheckBox.hpp	/^  bool OnKeyDown(unsigned key_code) override;$/;"	m	class:CheckBoxControl
override	src/Form/CheckBox.hpp	/^  bool OnMouseDown(PixelPoint p) override;$/;"	m	class:CheckBoxControl
override	src/Form/CheckBox.hpp	/^  bool OnMouseMove(PixelPoint p, unsigned keys) override;$/;"	m	class:CheckBoxControl
override	src/Form/CheckBox.hpp	/^  bool OnMouseUp(PixelPoint p) override;$/;"	m	class:CheckBoxControl
override	src/Form/CheckBox.hpp	/^  void OnCancelMode() override;$/;"	m	class:CheckBoxControl
override	src/Form/CheckBox.hpp	/^  void OnKillFocus() override;$/;"	m	class:CheckBoxControl
override	src/Form/CheckBox.hpp	/^  void OnPaint(Canvas &canvas) override;$/;"	m	class:CheckBoxControl
override	src/Form/CheckBox.hpp	/^  void OnSetFocus() override;$/;"	m	class:CheckBoxControl
override	src/Form/DataField/Angle.hpp	/^  ComboList CreateComboList(const TCHAR *reference) const override;$/;"	m	class:final
override	src/Form/DataField/Angle.hpp	/^  const TCHAR *GetAsDisplayString() const override;$/;"	m	class:final
override	src/Form/DataField/Angle.hpp	/^  const TCHAR *GetAsString() const override;$/;"	m	class:final
override	src/Form/DataField/Angle.hpp	/^  int GetAsInteger() const override;$/;"	m	class:final
override	src/Form/DataField/Angle.hpp	/^  void Dec() override;$/;"	m	class:final
override	src/Form/DataField/Angle.hpp	/^  void Inc() override;$/;"	m	class:final
override	src/Form/DataField/Angle.hpp	/^  void SetAsInteger(int value) override;$/;"	m	class:final
override	src/Form/DataField/Angle.hpp	/^  void SetAsString(const TCHAR *value) override;$/;"	m	class:final
override	src/Form/DataField/Angle.hpp	/^  void SetFromCombo(int i, const TCHAR *s) override;$/;"	m	class:final
override	src/Form/DataField/Boolean.hpp	/^  ComboList CreateComboList(const TCHAR *reference) const override;$/;"	m	class:final
override	src/Form/DataField/Boolean.hpp	/^  const TCHAR *GetAsString() const override;$/;"	m	class:final
override	src/Form/DataField/Boolean.hpp	/^  int GetAsInteger() const override;$/;"	m	class:final
override	src/Form/DataField/Boolean.hpp	/^  void Dec() override;$/;"	m	class:final
override	src/Form/DataField/Boolean.hpp	/^  void Inc() override;$/;"	m	class:final
override	src/Form/DataField/Boolean.hpp	/^  void SetAsInteger(int Value) override;$/;"	m	class:final
override	src/Form/DataField/Boolean.hpp	/^  void SetAsString(const TCHAR *Value) override;$/;"	m	class:final
override	src/Form/DataField/Enum.hpp	/^  ComboList CreateComboList(const TCHAR *reference) const override;$/;"	m	class:final
override	src/Form/DataField/Enum.hpp	/^  const TCHAR *GetAsDisplayString() const override;$/;"	m	class:final
override	src/Form/DataField/Enum.hpp	/^  const TCHAR *GetAsString() const override;$/;"	m	class:final
override	src/Form/DataField/Enum.hpp	/^  int GetAsInteger() const override;$/;"	m	class:final
override	src/Form/DataField/Enum.hpp	/^  void Dec() override;$/;"	m	class:final
override	src/Form/DataField/Enum.hpp	/^  void Inc() override;$/;"	m	class:final
override	src/Form/DataField/Enum.hpp	/^  void SetAsInteger(int value) override;$/;"	m	class:final
override	src/Form/DataField/Enum.hpp	/^  void SetAsString(const TCHAR *value) override;$/;"	m	class:final
override	src/Form/DataField/File.hpp	/^  ComboList CreateComboList(const TCHAR *reference) const override;$/;"	m	class:final
override	src/Form/DataField/File.hpp	/^  const TCHAR *GetAsDisplayString() const override;$/;"	m	class:final
override	src/Form/DataField/File.hpp	/^  const TCHAR *GetAsString() const override;$/;"	m	class:final
override	src/Form/DataField/File.hpp	/^  int GetAsInteger() const override;$/;"	m	class:final
override	src/Form/DataField/File.hpp	/^  void Dec() override;$/;"	m	class:final
override	src/Form/DataField/File.hpp	/^  void Inc() override;$/;"	m	class:final
override	src/Form/DataField/File.hpp	/^  void SetAsInteger(int value) override;$/;"	m	class:final
override	src/Form/DataField/Float.hpp	/^  ComboList CreateComboList(const TCHAR *reference) const override;$/;"	m	class:final
override	src/Form/DataField/Float.hpp	/^  const TCHAR *GetAsDisplayString() const override;$/;"	m	class:final
override	src/Form/DataField/Float.hpp	/^  const TCHAR *GetAsString() const override;$/;"	m	class:final
override	src/Form/DataField/Float.hpp	/^  int GetAsInteger() const override;$/;"	m	class:final
override	src/Form/DataField/Float.hpp	/^  void Dec() override;$/;"	m	class:final
override	src/Form/DataField/Float.hpp	/^  void Inc() override;$/;"	m	class:final
override	src/Form/DataField/Float.hpp	/^  void SetAsInteger(int value) override;$/;"	m	class:final
override	src/Form/DataField/Float.hpp	/^  void SetAsString(const TCHAR *value) override;$/;"	m	class:final
override	src/Form/DataField/Float.hpp	/^  void SetFromCombo(int iDataFieldIndex, const TCHAR *sValue) override;$/;"	m	class:final
override	src/Form/DataField/GeoPoint.hpp	/^  const TCHAR *GetAsString() const override;$/;"	m	class:final
override	src/Form/DataField/Integer.hpp	/^  ComboList CreateComboList(const TCHAR *reference) const override;$/;"	m	class:final
override	src/Form/DataField/Integer.hpp	/^  const TCHAR *GetAsDisplayString() const override;$/;"	m	class:final
override	src/Form/DataField/Integer.hpp	/^  const TCHAR *GetAsString() const override;$/;"	m	class:final
override	src/Form/DataField/Integer.hpp	/^  int GetAsInteger() const override;$/;"	m	class:final
override	src/Form/DataField/Integer.hpp	/^  void Dec() override;$/;"	m	class:final
override	src/Form/DataField/Integer.hpp	/^  void Inc() override;$/;"	m	class:final
override	src/Form/DataField/Integer.hpp	/^  void SetAsInteger(int value) override;$/;"	m	class:final
override	src/Form/DataField/Integer.hpp	/^  void SetAsString(const TCHAR *value) override;$/;"	m	class:final
override	src/Form/DataField/Integer.hpp	/^  void SetFromCombo(int iDataFieldIndex, const TCHAR *sValue) override;$/;"	m	class:final
override	src/Form/DataField/Password.hpp	/^  const TCHAR *GetAsDisplayString() const override;$/;"	m	class:final
override	src/Form/DataField/Prefix.hpp	/^  const TCHAR *GetAsDisplayString() const override;$/;"	m	class:final
override	src/Form/DataField/Prefix.hpp	/^  void Dec() override;$/;"	m	class:final
override	src/Form/DataField/Prefix.hpp	/^  void Inc() override;$/;"	m	class:final
override	src/Form/DataField/RoughTime.hpp	/^  const TCHAR *GetAsDisplayString() const override;$/;"	m	class:final
override	src/Form/DataField/RoughTime.hpp	/^  const TCHAR *GetAsString() const override;$/;"	m	class:final
override	src/Form/DataField/RoughTime.hpp	/^  int GetAsInteger() const override;$/;"	m	class:final
override	src/Form/DataField/RoughTime.hpp	/^  void Dec() override;$/;"	m	class:final
override	src/Form/DataField/RoughTime.hpp	/^  void Inc() override;$/;"	m	class:final
override	src/Form/DataField/String.hpp	/^  const TCHAR *GetAsString() const override;$/;"	m	class:DataFieldString
override	src/Form/DataField/String.hpp	/^  void SetAsString(const TCHAR *Value) override;$/;"	m	class:DataFieldString
override	src/Form/DataField/Time.hpp	/^  ComboList CreateComboList(const TCHAR *reference) const override;$/;"	m	class:final
override	src/Form/DataField/Time.hpp	/^  const TCHAR *GetAsDisplayString() const override;$/;"	m	class:final
override	src/Form/DataField/Time.hpp	/^  const TCHAR *GetAsString() const override;$/;"	m	class:final
override	src/Form/DataField/Time.hpp	/^  void Dec() override;$/;"	m	class:final
override	src/Form/DataField/Time.hpp	/^  void Inc() override;$/;"	m	class:final
override	src/Form/DataField/Time.hpp	/^  void SetFromCombo(int data_field_index, const TCHAR *value_string) override;$/;"	m	class:final
override	src/Form/DigitEntry.hpp	/^  bool OnKeyCheck(unsigned key_code) const override;$/;"	m	class:CoordinateFormat
override	src/Form/DigitEntry.hpp	/^  bool OnKeyDown(unsigned key_code) override;$/;"	m	class:CoordinateFormat
override	src/Form/DigitEntry.hpp	/^  bool OnMouseDown(PixelPoint p) override;$/;"	m	class:CoordinateFormat
override	src/Form/DigitEntry.hpp	/^  void OnKillFocus() override;$/;"	m	class:CoordinateFormat
override	src/Form/DigitEntry.hpp	/^  void OnPaint(Canvas &canvas) override;$/;"	m	class:CoordinateFormat
override	src/Form/DigitEntry.hpp	/^  void OnSetFocus() override;$/;"	m	class:CoordinateFormat
override	src/Form/Draw.hpp	/^  void OnPaint(Canvas &canvas) override;$/;"	m	class:WndOwnerDrawFrame
override	src/Form/Edit.hpp	/^  bool OnKeyCheck(unsigned key_code) const override;$/;"	m	class:WndProperty
override	src/Form/Edit.hpp	/^  bool OnKeyDown(unsigned key_code) override;$/;"	m	class:WndProperty
override	src/Form/Edit.hpp	/^  bool OnMouseDown(PixelPoint p) override;$/;"	m	class:WndProperty
override	src/Form/Edit.hpp	/^  bool OnMouseMove(PixelPoint p, unsigned keys) override;$/;"	m	class:WndProperty
override	src/Form/Edit.hpp	/^  bool OnMouseUp(PixelPoint p) override;$/;"	m	class:WndProperty
override	src/Form/Edit.hpp	/^  void OnCancelMode() override;$/;"	m	class:WndProperty
override	src/Form/Edit.hpp	/^  void OnKillFocus() override;$/;"	m	class:WndProperty
override	src/Form/Edit.hpp	/^  void OnPaint(Canvas &canvas) override;$/;"	m	class:WndProperty
override	src/Form/Edit.hpp	/^  void OnResize(PixelSize new_size) override;$/;"	m	class:WndProperty
override	src/Form/Edit.hpp	/^  void OnSetFocus() override;$/;"	m	class:WndProperty
override	src/Form/Form.hpp	/^  bool OnCommand(unsigned id, unsigned code) override;$/;"	m	class:WndForm
override	src/Form/Form.hpp	/^  bool OnMouseDown(PixelPoint p) override;$/;"	m	class:WndForm
override	src/Form/Form.hpp	/^  bool OnMouseMove(PixelPoint p, unsigned keys) override;$/;"	m	class:WndForm
override	src/Form/Form.hpp	/^  bool OnMouseUp(PixelPoint p) override;$/;"	m	class:WndForm
override	src/Form/Form.hpp	/^  void OnCancelMode() override;$/;"	m	class:WndForm
override	src/Form/Form.hpp	/^  void OnCreate() override;$/;"	m	class:WndForm
override	src/Form/Form.hpp	/^  void OnDestroy() override;$/;"	m	class:WndForm
override	src/Form/Form.hpp	/^  void OnPaint(Canvas &canvas) override;$/;"	m	class:WndForm
override	src/Form/Form.hpp	/^  void OnResize(PixelSize new_size) override;$/;"	m	class:WndForm
override	src/Form/Frame.hpp	/^  void OnPaint(Canvas &canvas) override;$/;"	m	class:WndFrame
override	src/Form/GridView.hpp	/^  void OnResize(PixelSize new_size) override;$/;"	m	class:GridView
override	src/Form/HLine.hpp	/^  void OnPaint(Canvas &canvas) override;$/;"	m	class:HLine
override	src/Form/List.hpp	/^  bool OnKeyCheck(unsigned key_code) const override;$/;"	m	class:ListControl
override	src/Form/List.hpp	/^  bool OnKeyDown(unsigned key_code) override;$/;"	m	class:ListControl
override	src/Form/List.hpp	/^  bool OnMouseDown(PixelPoint p) override;$/;"	m	class:ListControl
override	src/Form/List.hpp	/^  bool OnMouseMove(PixelPoint p, unsigned keys) override;$/;"	m	class:ListControl
override	src/Form/List.hpp	/^  bool OnMouseUp(PixelPoint p) override;$/;"	m	class:ListControl
override	src/Form/List.hpp	/^  bool OnMouseWheel(PixelPoint p, int delta) override;$/;"	m	class:ListControl
override	src/Form/List.hpp	/^  void OnCancelMode() override;$/;"	m	class:ListControl
override	src/Form/List.hpp	/^  void OnDestroy() override;$/;"	m	class:ListControl
override	src/Form/List.hpp	/^  void OnKillFocus() override;$/;"	m	class:ListControl
override	src/Form/List.hpp	/^  void OnPaint(Canvas &canvas) override;$/;"	m	class:ListControl
override	src/Form/List.hpp	/^  void OnPaint(Canvas &canvas, const PixelRect &dirty) override;$/;"	m	class:ListControl
override	src/Form/List.hpp	/^  void OnResize(PixelSize new_size) override;$/;"	m	class:ListControl
override	src/Form/List.hpp	/^  void OnSetFocus() override;$/;"	m	class:ListControl
override	src/Form/TabDisplay.hpp	/^  bool OnKeyCheck(unsigned key_code) const override;$/;"	m	class:final
override	src/Form/TabDisplay.hpp	/^  bool OnKeyDown(unsigned key_code) override;$/;"	m	class:final
override	src/Form/TabDisplay.hpp	/^  bool OnMouseDown(PixelPoint p) override;$/;"	m	class:final
override	src/Form/TabDisplay.hpp	/^  bool OnMouseMove(PixelPoint p, unsigned keys) override;$/;"	m	class:final
override	src/Form/TabDisplay.hpp	/^  bool OnMouseUp(PixelPoint p) override;$/;"	m	class:final
override	src/Form/TabDisplay.hpp	/^  void OnCancelMode() override;$/;"	m	class:final
override	src/Form/TabDisplay.hpp	/^  void OnKillFocus() override;$/;"	m	class:final
override	src/Form/TabDisplay.hpp	/^  void OnPaint(Canvas &canvas) override;$/;"	m	class:final
override	src/Form/TabDisplay.hpp	/^  void OnResize(PixelSize new_size) override;$/;"	m	class:final
override	src/Form/TabDisplay.hpp	/^  void OnSetFocus() override;$/;"	m	class:final
override	src/Form/TabMenuDisplay.hpp	/^  bool OnKeyCheck(unsigned key_code) const override;$/;"	m	class:final
override	src/Form/TabMenuDisplay.hpp	/^  bool OnKeyDown(unsigned key_code) override;$/;"	m	class:final
override	src/Form/TabMenuDisplay.hpp	/^  bool OnMouseDown(PixelPoint p) override;$/;"	m	class:final
override	src/Form/TabMenuDisplay.hpp	/^  bool OnMouseMove(PixelPoint p, unsigned keys) override;$/;"	m	class:final
override	src/Form/TabMenuDisplay.hpp	/^  bool OnMouseUp(PixelPoint p) override;$/;"	m	class:final
override	src/Form/TabMenuDisplay.hpp	/^  void OnKillFocus() override;$/;"	m	class:final
override	src/Form/TabMenuDisplay.hpp	/^  void OnPaint(Canvas &canvas) override;$/;"	m	class:final
override	src/Form/TabMenuDisplay.hpp	/^  void OnResize(PixelSize new_size) override;$/;"	m	class:final
override	src/Form/TabMenuDisplay.hpp	/^  void OnSetFocus() override;$/;"	m	class:final
override	src/Gauge/BigThermalAssistantWidget.hpp	/^                                  const DerivedInfo &calculated) override;$/;"	m	class:BigThermalAssistantWidget
override	src/Gauge/BigThermalAssistantWidget.hpp	/^                       const PixelRect &rc) noexcept override;$/;"	m	class:BigThermalAssistantWidget
override	src/Gauge/BigThermalAssistantWidget.hpp	/^  virtual bool SetFocus() noexcept override;$/;"	m	class:BigThermalAssistantWidget
override	src/Gauge/BigThermalAssistantWidget.hpp	/^  virtual void Hide() noexcept override;$/;"	m	class:BigThermalAssistantWidget
override	src/Gauge/BigThermalAssistantWidget.hpp	/^  virtual void Move(const PixelRect &rc) noexcept override;$/;"	m	class:BigThermalAssistantWidget
override	src/Gauge/BigThermalAssistantWidget.hpp	/^  virtual void Show(const PixelRect &rc) noexcept override;$/;"	m	class:BigThermalAssistantWidget
override	src/Gauge/BigThermalAssistantWindow.hpp	/^  bool OnMouseDouble(PixelPoint p) override;$/;"	m	class:BigThermalAssistantWindow
override	src/Gauge/BigThermalAssistantWindow.hpp	/^  bool OnMouseDown(PixelPoint p) override;$/;"	m	class:BigThermalAssistantWindow
override	src/Gauge/BigThermalAssistantWindow.hpp	/^  bool OnMouseMove(PixelPoint p, unsigned keys) override;$/;"	m	class:BigThermalAssistantWindow
override	src/Gauge/BigThermalAssistantWindow.hpp	/^  bool OnMouseUp(PixelPoint p) override;$/;"	m	class:BigThermalAssistantWindow
override	src/Gauge/BigThermalAssistantWindow.hpp	/^  virtual bool OnKeyDown(unsigned key_code) override;$/;"	m	class:BigThermalAssistantWindow
override	src/Gauge/BigThermalAssistantWindow.hpp	/^  virtual void OnCancelMode() override;$/;"	m	class:BigThermalAssistantWindow
override	src/Gauge/BigTrafficWidget.cpp	/^  bool OnMouseDouble(PixelPoint p) override;$/;"	m	class:FlarmTrafficControl	file:
override	src/Gauge/BigTrafficWidget.cpp	/^  bool OnMouseDown(PixelPoint p) override;$/;"	m	class:FlarmTrafficControl	file:
override	src/Gauge/BigTrafficWidget.cpp	/^  bool OnMouseMove(PixelPoint p, unsigned keys) override;$/;"	m	class:FlarmTrafficControl	file:
override	src/Gauge/BigTrafficWidget.cpp	/^  bool OnMouseUp(PixelPoint p) override;$/;"	m	class:FlarmTrafficControl	file:
override	src/Gauge/BigTrafficWidget.cpp	/^  virtual bool OnKeyDown(unsigned key_code) override;$/;"	m	class:FlarmTrafficControl	file:
override	src/Gauge/BigTrafficWidget.cpp	/^  virtual void OnCancelMode() override;$/;"	m	class:FlarmTrafficControl	file:
override	src/Gauge/BigTrafficWidget.cpp	/^  virtual void OnCreate() override;$/;"	m	class:FlarmTrafficControl	file:
override	src/Gauge/BigTrafficWidget.cpp	/^  virtual void OnPaint(Canvas &canvas) override;$/;"	m	class:FlarmTrafficControl	file:
override	src/Gauge/BigTrafficWidget.hpp	/^               const PixelRect &rc) noexcept override;$/;"	m	class:TrafficWidget
override	src/Gauge/BigTrafficWidget.hpp	/^  bool SetFocus() noexcept override;$/;"	m	class:TrafficWidget
override	src/Gauge/BigTrafficWidget.hpp	/^  virtual void OnGPSUpdate(const MoreData &basic) override;$/;"	m	class:TrafficWidget
override	src/Gauge/BigTrafficWidget.hpp	/^  void Hide() noexcept override;$/;"	m	class:TrafficWidget
override	src/Gauge/BigTrafficWidget.hpp	/^  void Move(const PixelRect &rc) noexcept override;$/;"	m	class:TrafficWidget
override	src/Gauge/BigTrafficWidget.hpp	/^  void Show(const PixelRect &rc) noexcept override;$/;"	m	class:TrafficWidget
override	src/Gauge/FlarmTrafficWindow.hpp	/^  virtual void OnPaint(Canvas &canvas) override;$/;"	m	class:FlarmTrafficWindow
override	src/Gauge/FlarmTrafficWindow.hpp	/^  virtual void OnResize(PixelSize new_size) override;$/;"	m	class:FlarmTrafficWindow
override	src/Gauge/GaugeFLARM.cpp	/^  bool OnMouseDown(PixelPoint p) override;$/;"	m	class:SmallTrafficWindow	file:
override	src/Gauge/GaugeFLARM.cpp	/^  bool OnMouseMove(PixelPoint p, unsigned keys) override;$/;"	m	class:SmallTrafficWindow	file:
override	src/Gauge/GaugeFLARM.cpp	/^  bool OnMouseUp(PixelPoint p) override;$/;"	m	class:SmallTrafficWindow	file:
override	src/Gauge/GaugeFLARM.cpp	/^  virtual void OnCancelMode() override;$/;"	m	class:SmallTrafficWindow	file:
override	src/Gauge/GaugeFLARM.cpp	/^  virtual void OnPaint(Canvas &canvas) override;$/;"	m	class:SmallTrafficWindow	file:
override	src/Gauge/GaugeFLARM.hpp	/^  void Hide() noexcept override;$/;"	m	class:final
override	src/Gauge/GaugeFLARM.hpp	/^  void OnGPSUpdate(const MoreData &basic) override;$/;"	m	class:final
override	src/Gauge/GaugeFLARM.hpp	/^  void Prepare(ContainerWindow &parent, const PixelRect &rc) noexcept override;$/;"	m	class:final
override	src/Gauge/GaugeFLARM.hpp	/^  void Show(const PixelRect &rc) noexcept override;$/;"	m	class:final
override	src/Gauge/GaugeThermalAssistant.cpp	/^  bool OnMouseDown(PixelPoint p) override;$/;"	m	class:GaugeThermalAssistantWindow	file:
override	src/Gauge/GaugeThermalAssistant.cpp	/^  bool OnMouseMove(PixelPoint p, unsigned keys) override;$/;"	m	class:GaugeThermalAssistantWindow	file:
override	src/Gauge/GaugeThermalAssistant.cpp	/^  bool OnMouseUp(PixelPoint p) override;$/;"	m	class:GaugeThermalAssistantWindow	file:
override	src/Gauge/GaugeThermalAssistant.cpp	/^  virtual void OnCancelMode() override;$/;"	m	class:GaugeThermalAssistantWindow	file:
override	src/Gauge/GaugeThermalAssistant.cpp	/^  virtual void OnPaint(Canvas &canvas) override;$/;"	m	class:GaugeThermalAssistantWindow	file:
override	src/Gauge/GaugeThermalAssistant.hpp	/^                                  const DerivedInfo &calculated) override;$/;"	m	class:final
override	src/Gauge/GaugeThermalAssistant.hpp	/^  bool SetFocus() noexcept override;$/;"	m	class:final
override	src/Gauge/GaugeThermalAssistant.hpp	/^  void Hide() noexcept override;$/;"	m	class:final
override	src/Gauge/GaugeThermalAssistant.hpp	/^  void Prepare(ContainerWindow &parent, const PixelRect &rc) noexcept override;$/;"	m	class:final
override	src/Gauge/GaugeThermalAssistant.hpp	/^  void Show(const PixelRect &rc) noexcept override;$/;"	m	class:final
override	src/Gauge/GaugeVario.hpp	/^  virtual void OnPaintBuffer(Canvas &canvas) override;$/;"	m	class:GaugeVario
override	src/Gauge/GaugeVario.hpp	/^  virtual void OnResize(PixelSize new_size) override;$/;"	m	class:GaugeVario
override	src/Gauge/GlueGaugeVario.hpp	/^  virtual void OnGPSUpdate(const MoreData &basic) override;$/;"	m	class:final
override	src/Gauge/GlueGaugeVario.hpp	/^  void Hide() noexcept override;$/;"	m	class:final
override	src/Gauge/GlueGaugeVario.hpp	/^  void Prepare(ContainerWindow &parent, const PixelRect &rc) noexcept override;$/;"	m	class:final
override	src/Gauge/GlueGaugeVario.hpp	/^  void Show(const PixelRect &rc) noexcept override;$/;"	m	class:final
override	src/Gauge/ThermalAssistantWindow.hpp	/^  virtual void OnPaintBuffer(Canvas &canvas) override;$/;"	m	class:ThermalAssistantWindow
override	src/Gauge/ThermalAssistantWindow.hpp	/^  virtual void OnResize(PixelSize new_size) override;$/;"	m	class:ThermalAssistantWindow
override	src/HorizonWidget.hpp	/^  void Hide() noexcept override;$/;"	m	class:final
override	src/HorizonWidget.hpp	/^  void OnGPSUpdate(const MoreData &basic) noexcept override;$/;"	m	class:final
override	src/HorizonWidget.hpp	/^  void Prepare(ContainerWindow &parent, const PixelRect &rc) noexcept override;$/;"	m	class:final
override	src/HorizonWidget.hpp	/^  void Show(const PixelRect &rc) noexcept override;$/;"	m	class:final
override	src/InfoBoxes/Content/Alternate.hpp	/^  virtual const InfoBoxPanel *GetDialogContent() override;$/;"	m	class:InfoBoxContentAlternateGR
override	src/InfoBoxes/Content/Alternate.hpp	/^  virtual const InfoBoxPanel *GetDialogContent() override;$/;"	m	class:InfoBoxContentAlternateName
override	src/InfoBoxes/Content/Alternate.hpp	/^  virtual void Update(InfoBoxData &data) override;$/;"	m	class:InfoBoxContentAlternateGR
override	src/InfoBoxes/Content/Alternate.hpp	/^  virtual void Update(InfoBoxData &data) override;$/;"	m	class:InfoBoxContentAlternateName
override	src/InfoBoxes/Content/Altitude.hpp	/^  virtual const InfoBoxPanel *GetDialogContent() override;$/;"	m	class:InfoBoxContentAltitude
override	src/InfoBoxes/Content/Altitude.hpp	/^  virtual void Update(InfoBoxData &data) override;$/;"	m	class:InfoBoxContentAltitudeGPS
override	src/InfoBoxes/Content/Contest.hpp	/^  virtual const InfoBoxPanel *GetDialogContent() override;$/;"	m	class:InfoBoxContentOLC
override	src/InfoBoxes/Content/Contest.hpp	/^  virtual const InfoBoxPanel *GetDialogContent() override;$/;"	m	class:InfoBoxContentOLCSpeed
override	src/InfoBoxes/Content/Contest.hpp	/^  virtual void Update(InfoBoxData &data) override;$/;"	m	class:InfoBoxContentOLC
override	src/InfoBoxes/Content/Contest.hpp	/^  virtual void Update(InfoBoxData &data) override;$/;"	m	class:InfoBoxContentOLCSpeed
override	src/InfoBoxes/Content/Direction.hpp	/^  virtual bool HandleKey(const InfoBoxKeyCodes keycode) override;$/;"	m	class:InfoBoxContentTrack
override	src/InfoBoxes/Content/Direction.hpp	/^  virtual void Update(InfoBoxData &data) override;$/;"	m	class:InfoBoxContentTrack
override	src/InfoBoxes/Content/MacCready.hpp	/^  virtual const InfoBoxPanel *GetDialogContent() override;$/;"	m	class:InfoBoxContentMacCready
override	src/InfoBoxes/Content/MacCready.hpp	/^  virtual void Update(InfoBoxData &data) override;$/;"	m	class:InfoBoxContentMacCready
override	src/InfoBoxes/Content/Other.hpp	/^  virtual void OnCustomPaint(Canvas &canvas, const PixelRect &rc) override;$/;"	m	class:InfoBoxContentHorizon
override	src/InfoBoxes/Content/Other.hpp	/^  virtual void Update(InfoBoxData &data) override;$/;"	m	class:InfoBoxContentHorizon
override	src/InfoBoxes/Content/Radio.hpp	/^  virtual const InfoBoxPanel *GetDialogContent() override;$/;"	m	class:InfoBoxContentActiveRadioFrequency
override	src/InfoBoxes/Content/Radio.hpp	/^  virtual const InfoBoxPanel *GetDialogContent() override;$/;"	m	class:InfoBoxContentStandbyRadioFrequency
override	src/InfoBoxes/Content/Radio.hpp	/^  virtual void Update(InfoBoxData & data) override;$/;"	m	class:InfoBoxContentActiveRadioFrequency
override	src/InfoBoxes/Content/Radio.hpp	/^  virtual void Update(InfoBoxData & data) override;$/;"	m	class:InfoBoxContentStandbyRadioFrequency
override	src/InfoBoxes/Content/Speed.hpp	/^  virtual bool HandleKey(const InfoBoxKeyCodes keycode) override;$/;"	m	class:InfoBoxContentSpeedGround
override	src/InfoBoxes/Content/Speed.hpp	/^  virtual void Update(InfoBoxData &data) override;$/;"	m	class:InfoBoxContentSpeedGround
override	src/InfoBoxes/Content/Task.hpp	/^  virtual const InfoBoxPanel *GetDialogContent() override;$/;"	m	class:InfoBoxContentNextWaypoint
override	src/InfoBoxes/Content/Task.hpp	/^  virtual void OnCustomPaint(Canvas &canvas, const PixelRect &rc) override;$/;"	m	class:InfoBoxContentNextArrow
override	src/InfoBoxes/Content/Task.hpp	/^  virtual void Update(InfoBoxData &data) override;$/;"	m	class:InfoBoxContentNextArrow
override	src/InfoBoxes/Content/Task.hpp	/^  virtual void Update(InfoBoxData &data) override;$/;"	m	class:InfoBoxContentNextWaypoint
override	src/InfoBoxes/Content/Team.hpp	/^  virtual bool HandleKey(const InfoBoxKeyCodes keycode) override;$/;"	m	class:InfoBoxContentTeamCode
override	src/InfoBoxes/Content/Team.hpp	/^  virtual const InfoBoxPanel *GetDialogContent() override;$/;"	m	class:InfoBoxContentTeamCode
override	src/InfoBoxes/Content/Team.hpp	/^  virtual void Update(InfoBoxData &data) override;$/;"	m	class:InfoBoxContentTeamCode
override	src/InfoBoxes/Content/Thermal.hpp	/^  virtual void OnCustomPaint(Canvas &canvas, const PixelRect &rc) override;$/;"	m	class:InfoBoxContentClimbPercent
override	src/InfoBoxes/Content/Thermal.hpp	/^  virtual void OnCustomPaint(Canvas &canvas, const PixelRect &rc) override;$/;"	m	class:InfoBoxContentThermalAssistant
override	src/InfoBoxes/Content/Thermal.hpp	/^  virtual void Update(InfoBoxData &data) override;$/;"	m	class:InfoBoxContentClimbPercent
override	src/InfoBoxes/Content/Thermal.hpp	/^  virtual void Update(InfoBoxData &data) override;$/;"	m	class:InfoBoxContentThermalAssistant
override	src/InfoBoxes/Content/Trace.hpp	/^  virtual const InfoBoxPanel *GetDialogContent() override;$/;"	m	class:InfoBoxContentBarogram
override	src/InfoBoxes/Content/Trace.hpp	/^  virtual void OnCustomPaint(Canvas &canvas, const PixelRect &rc) override;$/;"	m	class:InfoBoxContentBarogram
override	src/InfoBoxes/Content/Trace.hpp	/^  virtual void OnCustomPaint(Canvas &canvas, const PixelRect &rc) override;$/;"	m	class:InfoBoxContentCirclingAverageSpark
override	src/InfoBoxes/Content/Trace.hpp	/^  virtual void OnCustomPaint(Canvas &canvas, const PixelRect &rc) override;$/;"	m	class:InfoBoxContentNettoVarioSpark
override	src/InfoBoxes/Content/Trace.hpp	/^  virtual void OnCustomPaint(Canvas &canvas, const PixelRect &rc) override;$/;"	m	class:InfoBoxContentTaskProgress
override	src/InfoBoxes/Content/Trace.hpp	/^  virtual void OnCustomPaint(Canvas &canvas, const PixelRect &rc) override;$/;"	m	class:InfoBoxContentThermalBand
override	src/InfoBoxes/Content/Trace.hpp	/^  virtual void OnCustomPaint(Canvas &canvas, const PixelRect &rc) override;$/;"	m	class:InfoBoxContentVarioSpark
override	src/InfoBoxes/Content/Trace.hpp	/^  virtual void Update(InfoBoxData &data) override;$/;"	m	class:InfoBoxContentBarogram
override	src/InfoBoxes/Content/Trace.hpp	/^  virtual void Update(InfoBoxData &data) override;$/;"	m	class:InfoBoxContentCirclingAverageSpark
override	src/InfoBoxes/Content/Trace.hpp	/^  virtual void Update(InfoBoxData &data) override;$/;"	m	class:InfoBoxContentNettoVarioSpark
override	src/InfoBoxes/Content/Trace.hpp	/^  virtual void Update(InfoBoxData &data) override;$/;"	m	class:InfoBoxContentTaskProgress
override	src/InfoBoxes/Content/Trace.hpp	/^  virtual void Update(InfoBoxData &data) override;$/;"	m	class:InfoBoxContentThermalBand
override	src/InfoBoxes/Content/Trace.hpp	/^  virtual void Update(InfoBoxData &data) override;$/;"	m	class:InfoBoxContentVarioSpark
override	src/InfoBoxes/Content/Weather.hpp	/^  virtual bool HandleKey(const InfoBoxKeyCodes keycode) override;$/;"	m	class:InfoBoxContentTemperatureForecast
override	src/InfoBoxes/Content/Weather.hpp	/^  virtual const InfoBoxPanel *GetDialogContent() override;$/;"	m	class:InfoBoxContentWindArrow
override	src/InfoBoxes/Content/Weather.hpp	/^  virtual void OnCustomPaint(Canvas &canvas, const PixelRect &rc) override;$/;"	m	class:InfoBoxContentWindArrow
override	src/InfoBoxes/Content/Weather.hpp	/^  virtual void Update(InfoBoxData &data) override;$/;"	m	class:InfoBoxContentTemperatureForecast
override	src/InfoBoxes/Content/Weather.hpp	/^  virtual void Update(InfoBoxData &data) override;$/;"	m	class:InfoBoxContentWindArrow
override	src/InfoBoxes/InfoBoxWindow.hpp	/^  bool OnMouseDouble(PixelPoint p) override;$/;"	m	class:InfoBoxWindow
override	src/InfoBoxes/InfoBoxWindow.hpp	/^  bool OnMouseDown(PixelPoint p) override;$/;"	m	class:InfoBoxWindow
override	src/InfoBoxes/InfoBoxWindow.hpp	/^  bool OnMouseMove(PixelPoint p, unsigned keys) override;$/;"	m	class:InfoBoxWindow
override	src/InfoBoxes/InfoBoxWindow.hpp	/^  bool OnMouseUp(PixelPoint p) override;$/;"	m	class:InfoBoxWindow
override	src/InfoBoxes/InfoBoxWindow.hpp	/^  virtual bool OnKeyDown(unsigned key_code) override;$/;"	m	class:InfoBoxWindow
override	src/InfoBoxes/InfoBoxWindow.hpp	/^  virtual void OnCancelMode() override;$/;"	m	class:InfoBoxWindow
override	src/InfoBoxes/InfoBoxWindow.hpp	/^  virtual void OnDestroy() override;$/;"	m	class:InfoBoxWindow
override	src/InfoBoxes/InfoBoxWindow.hpp	/^  virtual void OnKillFocus() override;$/;"	m	class:InfoBoxWindow
override	src/InfoBoxes/InfoBoxWindow.hpp	/^  virtual void OnResize(PixelSize new_size) override;$/;"	m	class:InfoBoxWindow
override	src/InfoBoxes/InfoBoxWindow.hpp	/^  virtual void OnSetFocus() override;$/;"	m	class:InfoBoxWindow
override	src/InfoBoxes/InfoBoxWindow.hpp	/^  void OnPaintBuffer(Canvas &canvas) override;$/;"	m	class:InfoBoxWindow
override	src/InfoBoxes/Panel/ATCReference.cpp	/^  void Prepare(ContainerWindow &parent, const PixelRect &rc) noexcept override;$/;"	m	class:ATCReferencePanel	file:
override	src/InfoBoxes/Panel/AltitudeInfo.cpp	/^                  const PixelRect &rc) noexcept override;$/;"	m	class:AltitudeInfoPanel	file:
override	src/InfoBoxes/Panel/AltitudeInfo.cpp	/^  void Hide() noexcept override;$/;"	m	class:AltitudeInfoPanel	file:
override	src/InfoBoxes/Panel/AltitudeInfo.cpp	/^  void OnGPSUpdate(const MoreData &basic) override;$/;"	m	class:AltitudeInfoPanel	file:
override	src/InfoBoxes/Panel/AltitudeInfo.cpp	/^  void Show(const PixelRect &rc) noexcept override;$/;"	m	class:AltitudeInfoPanel	file:
override	src/InfoBoxes/Panel/AltitudeSetup.cpp	/^               const PixelRect &rc) noexcept override;$/;"	m	class:AltitudeSetupPanel	file:
override	src/InfoBoxes/Panel/AltitudeSetup.cpp	/^  virtual void OnModified(DataField &df) override;$/;"	m	class:AltitudeSetupPanel	file:
override	src/InfoBoxes/Panel/AltitudeSimulator.cpp	/^  void OnOffset(double offset) noexcept override;$/;"	m	class:final	file:
override	src/InfoBoxes/Panel/MacCreadyEdit.cpp	/^  void OnOffset(double offset) noexcept override;$/;"	m	class:final	file:
override	src/InfoBoxes/Panel/MacCreadySetup.cpp	/^               const PixelRect &rc) noexcept override;$/;"	m	class:MacCreadySetupPanel	file:
override	src/InfoBoxes/Panel/MacCreadySetup.cpp	/^  void Show(const PixelRect &rc) noexcept override;$/;"	m	class:MacCreadySetupPanel	file:
override	src/InfoBoxes/Panel/RadioEdit.cpp	/^  void OnOffset(double offset) noexcept override;$/;"	m	class:final	file:
override	src/Job/Async.hpp	/^  void Run() noexcept override;$/;"	m	class:final
override	src/Job/Thread.hpp	/^  void OnNotification() override;$/;"	m	class:JobThread
override	src/Job/Thread.hpp	/^  void Run() noexcept override;$/;"	m	class:JobThread
override	src/Kobo/KoboMenu.cpp	/^               const PixelRect &rc) noexcept override;$/;"	m	class:final	file:
override	src/Kobo/KoboMenu.cpp	/^  bool KeyPress(unsigned key_code) noexcept override;$/;"	m	class:final	file:
override	src/Kobo/NetworkDialog.cpp	/^               const PixelRect &rc) noexcept override;$/;"	m	class:final	file:
override	src/Kobo/SystemDialog.cpp	/^               const PixelRect &rc) noexcept override;$/;"	m	class:final	file:
override	src/Kobo/ToolsDialog.cpp	/^               const PixelRect &rc) noexcept override;$/;"	m	class:final	file:
override	src/Kobo/WifiDialog.cpp	/^                   unsigned idx) noexcept override;$/;"	m	class:final	file:
override	src/MainWindow.hpp	/^  bool OnMouseDouble(PixelPoint p) override;$/;"	m	class:MainWindow
override	src/MainWindow.hpp	/^  bool OnMouseDown(PixelPoint p) override;$/;"	m	class:MainWindow
override	src/MainWindow.hpp	/^  bool OnMouseMove(PixelPoint p, unsigned keys) override;$/;"	m	class:MainWindow
override	src/MainWindow.hpp	/^  bool OnMouseUp(PixelPoint p) override;$/;"	m	class:MainWindow
override	src/MainWindow.hpp	/^  virtual bool OnClose() noexcept override;$/;"	m	class:MainWindow
override	src/MainWindow.hpp	/^  virtual bool OnKeyDown(unsigned key_code) override;$/;"	m	class:MainWindow
override	src/MainWindow.hpp	/^  virtual void OnCancelMode() override;$/;"	m	class:MainWindow
override	src/MainWindow.hpp	/^  virtual void OnDestroy() override;$/;"	m	class:MainWindow
override	src/MainWindow.hpp	/^  virtual void OnPaint(Canvas &canvas) override;$/;"	m	class:MainWindow
override	src/MainWindow.hpp	/^  virtual void OnPause() noexcept override;$/;"	m	class:MainWindow
override	src/MainWindow.hpp	/^  virtual void OnResize(PixelSize new_size) override;$/;"	m	class:MainWindow
override	src/MainWindow.hpp	/^  virtual void OnSetFocus() override;$/;"	m	class:MainWindow
override	src/MapWindow/GlueMapWindow.hpp	/^                                  const PixelPoint aircraft_pos) override;$/;"	m	class:GlueMapWindow
override	src/MapWindow/GlueMapWindow.hpp	/^                           const PixelPoint aircraft_pos) override;$/;"	m	class:GlueMapWindow
override	src/MapWindow/GlueMapWindow.hpp	/^  bool OnMouseDouble(PixelPoint p) override;$/;"	m	class:GlueMapWindow
override	src/MapWindow/GlueMapWindow.hpp	/^  bool OnMouseDown(PixelPoint p) override;$/;"	m	class:GlueMapWindow
override	src/MapWindow/GlueMapWindow.hpp	/^  bool OnMouseMove(PixelPoint p, unsigned keys) override;$/;"	m	class:GlueMapWindow
override	src/MapWindow/GlueMapWindow.hpp	/^  bool OnMouseUp(PixelPoint p) override;$/;"	m	class:GlueMapWindow
override	src/MapWindow/GlueMapWindow.hpp	/^  bool OnMouseWheel(PixelPoint p, int delta) override;$/;"	m	class:GlueMapWindow
override	src/MapWindow/GlueMapWindow.hpp	/^  virtual bool OnKeyDown(unsigned key_code) override;$/;"	m	class:GlueMapWindow
override	src/MapWindow/GlueMapWindow.hpp	/^  virtual bool OnMultiTouchDown() override;$/;"	m	class:GlueMapWindow
override	src/MapWindow/GlueMapWindow.hpp	/^  virtual void DrawThermalEstimate(Canvas &canvas) const override;$/;"	m	class:GlueMapWindow
override	src/MapWindow/GlueMapWindow.hpp	/^  virtual void OnCancelMode() override;$/;"	m	class:GlueMapWindow
override	src/MapWindow/GlueMapWindow.hpp	/^  virtual void OnCreate() override;$/;"	m	class:GlueMapWindow
override	src/MapWindow/GlueMapWindow.hpp	/^  virtual void OnDestroy() override;$/;"	m	class:GlueMapWindow
override	src/MapWindow/GlueMapWindow.hpp	/^  virtual void OnPaint(Canvas &canvas) override;$/;"	m	class:GlueMapWindow
override	src/MapWindow/GlueMapWindow.hpp	/^  virtual void OnPaintBuffer(Canvas& canvas) override;$/;"	m	class:GlueMapWindow
override	src/MapWindow/GlueMapWindow.hpp	/^  virtual void Render(Canvas &canvas, const PixelRect &rc) override;$/;"	m	class:GlueMapWindow
override	src/MapWindow/Items/MapItem.hpp	/^  ~TaskOZMapItem() noexcept override;$/;"	m	struct:TaskOZMapItem
override	src/MapWindow/MapWindow.hpp	/^  virtual void OnCreate() override;$/;"	m	class:MapWindow
override	src/MapWindow/MapWindow.hpp	/^  virtual void OnDestroy() override;$/;"	m	class:MapWindow
override	src/MapWindow/MapWindow.hpp	/^  virtual void OnPaint(Canvas& canvas) override;$/;"	m	class:MapWindow
override	src/MapWindow/MapWindow.hpp	/^  virtual void OnPaintBuffer(Canvas& canvas) override;$/;"	m	class:MapWindow
override	src/MapWindow/MapWindow.hpp	/^  virtual void OnResize(PixelSize new_size) override;$/;"	m	class:MapWindow
override	src/MapWindow/OverlayBitmap.hpp	/^            const WindowProjection &projection) noexcept override;$/;"	m	class:final
override	src/MapWindow/OverlayBitmap.hpp	/^  bool IsInside(GeoPoint p) const override;$/;"	m	class:final
override	src/MapWindow/TargetMapWindow.hpp	/^  bool OnMouseDown(PixelPoint p) override;$/;"	m	class:TargetMapWindow
override	src/MapWindow/TargetMapWindow.hpp	/^  bool OnMouseMove(PixelPoint p, unsigned keys) override;$/;"	m	class:TargetMapWindow
override	src/MapWindow/TargetMapWindow.hpp	/^  bool OnMouseUp(PixelPoint p) override;$/;"	m	class:TargetMapWindow
override	src/MapWindow/TargetMapWindow.hpp	/^  virtual void OnCancelMode() override;$/;"	m	class:TargetMapWindow
override	src/MapWindow/TargetMapWindow.hpp	/^  virtual void OnCreate() override;$/;"	m	class:TargetMapWindow
override	src/MapWindow/TargetMapWindow.hpp	/^  virtual void OnDestroy() override;$/;"	m	class:TargetMapWindow
override	src/MapWindow/TargetMapWindow.hpp	/^  virtual void OnPaint(Canvas& canvas) override;$/;"	m	class:TargetMapWindow
override	src/MapWindow/TargetMapWindow.hpp	/^  virtual void OnPaintBuffer(Canvas& canvas) override;$/;"	m	class:TargetMapWindow
override	src/MapWindow/TargetMapWindow.hpp	/^  virtual void OnResize(PixelSize new_size) override;$/;"	m	class:TargetMapWindow
override	src/Menu/ShowMenuButton.cpp	/^                  bool enabled, bool focused, bool pressed) const override;$/;"	m	class:ShowMenuButtonRenderer	file:
override	src/Menu/ShowMenuButton.hpp	/^  bool OnClicked() override;$/;"	m	class:ShowMenuButton
override	src/MergeThread.hpp	/^  void Tick() noexcept override;$/;"	m	class:final
override	src/Operation/ConsoleOperationEnvironment.hpp	/^  void SetProgressPosition(unsigned position) noexcept override;$/;"	m	class:ConsoleOperationEnvironment
override	src/Operation/ConsoleOperationEnvironment.hpp	/^  void SetProgressRange(unsigned range) noexcept override;$/;"	m	class:ConsoleOperationEnvironment
override	src/Operation/ConsoleOperationEnvironment.hpp	/^  void SetText(const TCHAR *text) noexcept override;$/;"	m	class:ConsoleOperationEnvironment
override	src/Operation/MessageOperationEnvironment.hpp	/^  void SetErrorMessage(const TCHAR *text) noexcept override;$/;"	m	class:MessageOperationEnvironment
override	src/Operation/NoCancelOperationEnvironment.hpp	/^  bool IsCancelled() const noexcept override;$/;"	m	class:NoCancelOperationEnvironment
override	src/Operation/NoCancelOperationEnvironment.hpp	/^  void SetCancelHandler(std::function<void()> handler) noexcept override;$/;"	m	class:NoCancelOperationEnvironment
override	src/Operation/NoCancelOperationEnvironment.hpp	/^  void Sleep(std::chrono::steady_clock::duration duration) noexcept override;$/;"	m	class:NoCancelOperationEnvironment
override	src/Operation/Operation.hpp	/^  bool IsCancelled() const noexcept override;$/;"	m	class:NullOperationEnvironment
override	src/Operation/Operation.hpp	/^  void SetCancelHandler(std::function<void()> handler) noexcept override;$/;"	m	class:NullOperationEnvironment
override	src/Operation/Operation.hpp	/^  void SetErrorMessage(const TCHAR *text) noexcept override;$/;"	m	class:NullOperationEnvironment
override	src/Operation/Operation.hpp	/^  void SetProgressPosition(unsigned position) noexcept override;$/;"	m	class:NullOperationEnvironment
override	src/Operation/Operation.hpp	/^  void SetProgressRange(unsigned range) noexcept override;$/;"	m	class:NullOperationEnvironment
override	src/Operation/Operation.hpp	/^  void SetText(const TCHAR *text) noexcept override;$/;"	m	class:NullOperationEnvironment
override	src/Operation/Operation.hpp	/^  void Sleep(std::chrono::steady_clock::duration duration) noexcept override;$/;"	m	class:NullOperationEnvironment
override	src/Operation/Operation.hpp	/^  void Sleep(std::chrono::steady_clock::duration duration) noexcept override;$/;"	m	class:QuietOperationEnvironment
override	src/Operation/PopupOperationEnvironment.hpp	/^  void SetErrorMessage(const TCHAR *text) noexcept override;$/;"	m	class:PopupOperationEnvironment
override	src/Operation/ProxyOperationEnvironment.hpp	/^  bool IsCancelled() const noexcept override;$/;"	m	class:ProxyOperationEnvironment
override	src/Operation/ProxyOperationEnvironment.hpp	/^  void SetCancelHandler(std::function<void()> handler) noexcept override;$/;"	m	class:ProxyOperationEnvironment
override	src/Operation/ProxyOperationEnvironment.hpp	/^  void SetErrorMessage(const TCHAR *text) noexcept override;$/;"	m	class:ProxyOperationEnvironment
override	src/Operation/ProxyOperationEnvironment.hpp	/^  void SetProgressPosition(unsigned position) noexcept override;$/;"	m	class:ProxyOperationEnvironment
override	src/Operation/ProxyOperationEnvironment.hpp	/^  void SetProgressRange(unsigned range) noexcept override;$/;"	m	class:ProxyOperationEnvironment
override	src/Operation/ProxyOperationEnvironment.hpp	/^  void SetText(const TCHAR *text) noexcept override;$/;"	m	class:ProxyOperationEnvironment
override	src/Operation/ProxyOperationEnvironment.hpp	/^  void Sleep(std::chrono::steady_clock::duration duration) noexcept override;$/;"	m	class:ProxyOperationEnvironment
override	src/Operation/ThreadedOperationEnvironment.hpp	/^  bool IsCancelled() const noexcept override;$/;"	m	class:ThreadedOperationEnvironment
override	src/Operation/ThreadedOperationEnvironment.hpp	/^  void SetCancelHandler(std::function<void()> handler) noexcept override;$/;"	m	class:ThreadedOperationEnvironment
override	src/Operation/ThreadedOperationEnvironment.hpp	/^  void SetErrorMessage(const TCHAR *error) noexcept override;$/;"	m	class:ThreadedOperationEnvironment
override	src/Operation/ThreadedOperationEnvironment.hpp	/^  void SetProgressPosition(unsigned position) noexcept override;$/;"	m	class:ThreadedOperationEnvironment
override	src/Operation/ThreadedOperationEnvironment.hpp	/^  void SetProgressRange(unsigned range) noexcept override;$/;"	m	class:ThreadedOperationEnvironment
override	src/Operation/ThreadedOperationEnvironment.hpp	/^  void SetText(const TCHAR *text) noexcept override;$/;"	m	class:ThreadedOperationEnvironment
override	src/Operation/ThreadedOperationEnvironment.hpp	/^  void Sleep(std::chrono::steady_clock::duration duration) noexcept override;$/;"	m	class:ThreadedOperationEnvironment
override	src/Operation/VerboseOperationEnvironment.hpp	/^  void SetProgressPosition(unsigned position) noexcept override;$/;"	m	class:VerboseOperationEnvironment
override	src/Operation/VerboseOperationEnvironment.hpp	/^  void SetProgressRange(unsigned range) noexcept override;$/;"	m	class:VerboseOperationEnvironment
override	src/Operation/VerboseOperationEnvironment.hpp	/^  void SetText(const TCHAR *text) noexcept override;$/;"	m	class:VerboseOperationEnvironment
override	src/PopupMessage.hpp	/^  bool OnMouseDown(PixelPoint p) override;$/;"	m	class:PopupMessage
override	src/PopupMessage.hpp	/^  void OnPaint(Canvas &canvas) override;$/;"	m	class:PopupMessage
override	src/ProgressWindow.hpp	/^  virtual void OnPaint(Canvas &canvas) override;$/;"	m	class:ProgressWindow
override	src/ProgressWindow.hpp	/^  virtual void OnResize(PixelSize new_size) override;$/;"	m	class:ProgressWindow
override	src/Renderer/BitmapButtonRenderer.hpp	/^                  bool enabled, bool focused, bool pressed) const override;$/;"	m	class:BitmapButtonRenderer
override	src/Renderer/BitmapButtonRenderer.hpp	/^  unsigned GetMinimumButtonWidth() const override;$/;"	m	class:BitmapButtonRenderer
override	src/Renderer/ColorButtonRenderer.hpp	/^                  bool enabled, bool focused, bool pressed) const override;$/;"	m	class:ColorButtonRenderer
override	src/Renderer/SymbolButtonRenderer.hpp	/^                  bool enabled, bool focused, bool pressed) const override;$/;"	m	class:SymbolButtonRenderer
override	src/Renderer/TextButtonRenderer.hpp	/^                  bool enabled, bool focused, bool pressed) const override;$/;"	m	class:TextButtonRenderer
override	src/Renderer/TextButtonRenderer.hpp	/^  unsigned GetMinimumButtonWidth() const override;$/;"	m	class:TextButtonRenderer
override	src/Replay/DemoReplayGlue.hpp	/^  bool Update(NMEAInfo &data) override;$/;"	m	class:DemoReplayGlue
override	src/Replay/IgcReplay.hpp	/^  bool Update(NMEAInfo &data) override;$/;"	m	class:IgcReplay
override	src/Replay/IgcReplay.hpp	/^  ~IgcReplay() override;$/;"	m	class:IgcReplay
override	src/Replay/NmeaReplay.hpp	/^  bool Update(NMEAInfo &data) override;$/;"	m	class:NmeaReplay
override	src/Screen/LargeTextWindow.hpp	/^  bool OnKeyCheck(unsigned key_code) const override;$/;"	m	class:LargeTextWindow
override	src/Screen/LargeTextWindow.hpp	/^  bool OnKeyDown(unsigned key_code) override;$/;"	m	class:LargeTextWindow
override	src/Screen/LargeTextWindow.hpp	/^  void OnPaint(Canvas &canvas) override;$/;"	m	class:LargeTextWindow
override	src/Screen/LargeTextWindow.hpp	/^  void OnResize(PixelSize new_size) override;$/;"	m	class:LargeTextWindow
override	src/Screen/ProgressBar.hpp	/^  void OnPaint(Canvas &canvas) override;$/;"	m	class:ProgressBar
override	src/Screen/TerminalWindow.hpp	/^  virtual void OnCreate() override;$/;"	m	class:TerminalWindow
override	src/Screen/TerminalWindow.hpp	/^  virtual void OnPaint(Canvas &canvas) override;$/;"	m	class:TerminalWindow
override	src/Screen/TerminalWindow.hpp	/^  virtual void OnPaint(Canvas &canvas, const PixelRect &dirty) override;$/;"	m	class:TerminalWindow
override	src/Screen/TerminalWindow.hpp	/^  virtual void OnResize(PixelSize new_size) override;$/;"	m	class:TerminalWindow
override	src/Task/TaskFileIGC.hpp	/^                                       unsigned index) const override;$/;"	m	class:TaskFileIGC
override	src/Task/TaskFileIGC.hpp	/^  unsigned Count() noexcept override;$/;"	m	class:TaskFileIGC
override	src/Task/TaskFileSeeYou.hpp	/^                                       unsigned index) const override;$/;"	m	class:TaskFileSeeYou
override	src/Task/TaskFileSeeYou.hpp	/^  unsigned Count() noexcept override;$/;"	m	class:TaskFileSeeYou
override	src/Task/TaskFileXCSoar.hpp	/^                                       unsigned index) const override;$/;"	m	class:TaskFileXCSoar
override	src/Terrain/Thread.hpp	/^  void Tick() noexcept override;$/;"	m	class:final
override	src/Topography/Thread.hpp	/^  void Tick() noexcept override;$/;"	m	class:final
override	src/Topography/TopographyFileRenderer.hpp	/^  virtual void SurfaceCreated() override;$/;"	m	class:final
override	src/Topography/TopographyFileRenderer.hpp	/^  virtual void SurfaceDestroyed() override;$/;"	m	class:final
override	src/Tracking/SkyLines/Client.hpp	/^  void OnResolverError(std::exception_ptr error) noexcept override;$/;"	m	class:SkyLinesTracking::final
override	src/Tracking/SkyLines/Client.hpp	/^  void OnResolverSuccess(std::forward_list<AllocatedSocketAddress> addresses) noexcept override;$/;"	m	class:SkyLinesTracking::final
override	src/Tracking/TrackingGlue.hpp	/^                         const GeoPoint &location, int altitude) override;$/;"	m	class:final
override	src/Tracking/TrackingGlue.hpp	/^                 double lift) override;$/;"	m	class:final
override	src/Tracking/TrackingGlue.hpp	/^              const GeoPoint &a, const GeoPoint &b) override;$/;"	m	class:final
override	src/Tracking/TrackingGlue.hpp	/^    virtual void OnUserName(uint32_t user_id, const TCHAR *name) override;$/;"	m	class:final
override	src/Tracking/TrackingGlue.hpp	/^  void OnSkyLinesError(std::exception_ptr e) override;$/;"	m	class:final
override	src/Tracking/TrackingGlue.hpp	/^  void Tick() noexcept override;$/;"	m	class:final
override	src/Waypoint/WaypointReaderCompeGPS.hpp	/^  bool ParseLine(const TCHAR *line, Waypoints &way_points) override;$/;"	m	class:final
override	src/Waypoint/WaypointReaderFS.hpp	/^  bool ParseLine(const TCHAR *line, Waypoints &way_points) override;$/;"	m	class:final
override	src/Waypoint/WaypointReaderOzi.hpp	/^  bool ParseLine(const TCHAR *line, Waypoints &way_points) override;$/;"	m	class:final
override	src/Waypoint/WaypointReaderSeeYou.hpp	/^  bool ParseLine(const TCHAR* line, Waypoints &way_points) override;$/;"	m	class:final
override	src/Waypoint/WaypointReaderWinPilot.hpp	/^  bool ParseLine(const TCHAR *line, Waypoints &way_points) override;$/;"	m	class:final
override	src/Waypoint/WaypointReaderZander.hpp	/^  bool ParseLine(const TCHAR *line, Waypoints &way_points) override;$/;"	m	class:final
override	src/Widget/ActionWidget.hpp	/^  bool Click() noexcept override;$/;"	m	class:ActionWidget
override	src/Widget/ActionWidget.hpp	/^  void Hide() noexcept override;$/;"	m	class:ActionWidget
override	src/Widget/ActionWidget.hpp	/^  void ReClick() noexcept override;$/;"	m	class:ActionWidget
override	src/Widget/ActionWidget.hpp	/^  void Show(const PixelRect &rc) noexcept override;$/;"	m	class:ActionWidget
override	src/Widget/ArrowPagerWidget.hpp	/^  PixelSize GetMaximumSize() const noexcept override;$/;"	m	class:ArrowPagerWidget
override	src/Widget/ArrowPagerWidget.hpp	/^  PixelSize GetMinimumSize() const noexcept override;$/;"	m	class:ArrowPagerWidget
override	src/Widget/ArrowPagerWidget.hpp	/^  bool KeyPress(unsigned key_code) noexcept override;$/;"	m	class:ArrowPagerWidget
override	src/Widget/ArrowPagerWidget.hpp	/^  bool SetFocus() noexcept override;$/;"	m	class:ArrowPagerWidget
override	src/Widget/ArrowPagerWidget.hpp	/^  void Hide() noexcept override;$/;"	m	class:ArrowPagerWidget
override	src/Widget/ArrowPagerWidget.hpp	/^  void Initialise(ContainerWindow &parent, const PixelRect &rc) noexcept override;$/;"	m	class:ArrowPagerWidget
override	src/Widget/ArrowPagerWidget.hpp	/^  void Move(const PixelRect &rc) noexcept override;$/;"	m	class:ArrowPagerWidget
override	src/Widget/ArrowPagerWidget.hpp	/^  void Prepare(ContainerWindow &parent, const PixelRect &rc) noexcept override;$/;"	m	class:ArrowPagerWidget
override	src/Widget/ArrowPagerWidget.hpp	/^  void Show(const PixelRect &rc) noexcept override;$/;"	m	class:ArrowPagerWidget
override	src/Widget/ButtonPanelWidget.hpp	/^  PixelSize GetMaximumSize() const noexcept override;$/;"	m	class:ButtonPanelWidget
override	src/Widget/ButtonPanelWidget.hpp	/^  PixelSize GetMinimumSize() const noexcept override;$/;"	m	class:ButtonPanelWidget
override	src/Widget/ButtonPanelWidget.hpp	/^  bool Click() noexcept override;$/;"	m	class:ButtonPanelWidget
override	src/Widget/ButtonPanelWidget.hpp	/^  bool KeyPress(unsigned key_code) noexcept override;$/;"	m	class:ButtonPanelWidget
override	src/Widget/ButtonPanelWidget.hpp	/^  bool Leave() noexcept override;$/;"	m	class:ButtonPanelWidget
override	src/Widget/ButtonPanelWidget.hpp	/^  bool Save(bool &changed) noexcept override;$/;"	m	class:ButtonPanelWidget
override	src/Widget/ButtonPanelWidget.hpp	/^  bool SetFocus() noexcept override;$/;"	m	class:ButtonPanelWidget
override	src/Widget/ButtonPanelWidget.hpp	/^  void Hide() noexcept override;$/;"	m	class:ButtonPanelWidget
override	src/Widget/ButtonPanelWidget.hpp	/^  void Initialise(ContainerWindow &parent, const PixelRect &rc) noexcept override;$/;"	m	class:ButtonPanelWidget
override	src/Widget/ButtonPanelWidget.hpp	/^  void Move(const PixelRect &rc) noexcept override;$/;"	m	class:ButtonPanelWidget
override	src/Widget/ButtonPanelWidget.hpp	/^  void Prepare(ContainerWindow &parent, const PixelRect &rc) noexcept override;$/;"	m	class:ButtonPanelWidget
override	src/Widget/ButtonPanelWidget.hpp	/^  void ReClick() noexcept override;$/;"	m	class:ButtonPanelWidget
override	src/Widget/ButtonPanelWidget.hpp	/^  void Show(const PixelRect &rc) noexcept override;$/;"	m	class:ButtonPanelWidget
override	src/Widget/ButtonPanelWidget.hpp	/^  void Unprepare() noexcept override;$/;"	m	class:ButtonPanelWidget
override	src/Widget/ButtonPanelWidget.hpp	/^  ~ButtonPanelWidget() noexcept override;$/;"	m	class:ButtonPanelWidget
override	src/Widget/ButtonWidget.hpp	/^  PixelSize GetMaximumSize() const noexcept override;$/;"	m	class:ButtonWidget
override	src/Widget/ButtonWidget.hpp	/^  PixelSize GetMinimumSize() const noexcept override;$/;"	m	class:ButtonWidget
override	src/Widget/ButtonWidget.hpp	/^  bool SetFocus() noexcept override;$/;"	m	class:ButtonWidget
override	src/Widget/ButtonWidget.hpp	/^  void Initialise(ContainerWindow &parent, const PixelRect &rc) noexcept override;$/;"	m	class:ButtonWidget
override	src/Widget/ButtonWidget.hpp	/^  ~ButtonWidget() noexcept override;$/;"	m	class:ButtonWidget
override	src/Widget/CallbackWidget.hpp	/^  bool Click() noexcept override;$/;"	m	class:CallbackWidget
override	src/Widget/CallbackWidget.hpp	/^  void Hide() noexcept override;$/;"	m	class:CallbackWidget
override	src/Widget/CallbackWidget.hpp	/^  void ReClick() noexcept override;$/;"	m	class:CallbackWidget
override	src/Widget/CallbackWidget.hpp	/^  void Show(const PixelRect &rc) noexcept override;$/;"	m	class:CallbackWidget
override	src/Widget/ContainerWidget.hpp	/^  void Prepare(ContainerWindow &parent, const PixelRect &rc) noexcept override;$/;"	m	class:ContainerWidget
override	src/Widget/CreateWindowWidget.hpp	/^  void Prepare(ContainerWindow &parent, const PixelRect &rc) noexcept override;$/;"	m	class:final
override	src/Widget/KeyboardWidget.hpp	/^  void Hide() noexcept override;$/;"	m	class:KeyboardWidget
override	src/Widget/KeyboardWidget.hpp	/^  void Move(const PixelRect &rc) noexcept override;$/;"	m	class:KeyboardWidget
override	src/Widget/KeyboardWidget.hpp	/^  void Prepare(ContainerWindow &parent, const PixelRect &rc) noexcept override;$/;"	m	class:KeyboardWidget
override	src/Widget/KeyboardWidget.hpp	/^  void Show(const PixelRect &rc) noexcept override;$/;"	m	class:KeyboardWidget
override	src/Widget/LargeTextWidget.hpp	/^  bool KeyPress(unsigned key_code) noexcept override;$/;"	m	class:LargeTextWidget
override	src/Widget/LargeTextWidget.hpp	/^  void Prepare(ContainerWindow &parent, const PixelRect &rc) noexcept override;$/;"	m	class:LargeTextWidget
override	src/Widget/ListWidget.hpp	/^  PixelSize GetMaximumSize() const noexcept override;$/;"	m	class:ListWidget
override	src/Widget/ListWidget.hpp	/^  PixelSize GetMinimumSize() const noexcept override;$/;"	m	class:ListWidget
override	src/Widget/OffsetButtonsWidget.hpp	/^  PixelSize GetMaximumSize() const noexcept override;$/;"	m	class:OffsetButtonsWidget
override	src/Widget/OffsetButtonsWidget.hpp	/^  PixelSize GetMinimumSize() const noexcept override;$/;"	m	class:OffsetButtonsWidget
override	src/Widget/OffsetButtonsWidget.hpp	/^  bool SetFocus() noexcept override;$/;"	m	class:OffsetButtonsWidget
override	src/Widget/OffsetButtonsWidget.hpp	/^  void Hide() noexcept override;$/;"	m	class:OffsetButtonsWidget
override	src/Widget/OffsetButtonsWidget.hpp	/^  void Move(const PixelRect &rc) noexcept override;$/;"	m	class:OffsetButtonsWidget
override	src/Widget/OffsetButtonsWidget.hpp	/^  void Prepare(ContainerWindow &parent, const PixelRect &rc) noexcept override;$/;"	m	class:OffsetButtonsWidget
override	src/Widget/OffsetButtonsWidget.hpp	/^  void Show(const PixelRect &rc) noexcept override;$/;"	m	class:OffsetButtonsWidget
override	src/Widget/OverlappedWidget.hpp	/^  void Hide() noexcept override;$/;"	m	class:OverlappedWidget
override	src/Widget/PagerWidget.hpp	/^  PixelSize GetMaximumSize() const noexcept override;$/;"	m	class:PagerWidget
override	src/Widget/PagerWidget.hpp	/^  PixelSize GetMinimumSize() const noexcept override;$/;"	m	class:PagerWidget
override	src/Widget/PagerWidget.hpp	/^  bool Click() noexcept override;$/;"	m	class:PagerWidget
override	src/Widget/PagerWidget.hpp	/^  bool KeyPress(unsigned key_code) noexcept override;$/;"	m	class:PagerWidget
override	src/Widget/PagerWidget.hpp	/^  bool Leave() noexcept override;$/;"	m	class:PagerWidget
override	src/Widget/PagerWidget.hpp	/^  bool Save(bool &changed) noexcept override;$/;"	m	class:PagerWidget
override	src/Widget/PagerWidget.hpp	/^  bool SetFocus() noexcept override;$/;"	m	class:PagerWidget
override	src/Widget/PagerWidget.hpp	/^  void Hide() noexcept override;$/;"	m	class:PagerWidget
override	src/Widget/PagerWidget.hpp	/^  void Initialise(ContainerWindow &parent, const PixelRect &rc) noexcept override;$/;"	m	class:PagerWidget
override	src/Widget/PagerWidget.hpp	/^  void Move(const PixelRect &rc) noexcept override;$/;"	m	class:PagerWidget
override	src/Widget/PagerWidget.hpp	/^  void Prepare(ContainerWindow &parent, const PixelRect &rc) noexcept override;$/;"	m	class:PagerWidget
override	src/Widget/PagerWidget.hpp	/^  void ReClick() noexcept override;$/;"	m	class:PagerWidget
override	src/Widget/PagerWidget.hpp	/^  void Show(const PixelRect &rc) noexcept override;$/;"	m	class:PagerWidget
override	src/Widget/PagerWidget.hpp	/^  void Unprepare() noexcept override;$/;"	m	class:PagerWidget
override	src/Widget/PagerWidget.hpp	/^  ~PagerWidget() noexcept override;$/;"	m	class:PagerWidget
override	src/Widget/PanelWidget.hpp	/^  void Prepare(ContainerWindow &parent, const PixelRect &rc) noexcept override;$/;"	m	class:PanelWidget
override	src/Widget/QuestionWidget.hpp	/^  void Prepare(ContainerWindow &parent, const PixelRect &rc) noexcept override;$/;"	m	class:QuestionWidget
override	src/Widget/RowFormWidget.hpp	/^  PixelSize GetMaximumSize() const noexcept override;$/;"	m	class:RowFormWidget
override	src/Widget/RowFormWidget.hpp	/^  PixelSize GetMinimumSize() const noexcept override;$/;"	m	class:RowFormWidget
override	src/Widget/RowFormWidget.hpp	/^  bool SetFocus() noexcept override;$/;"	m	class:RowFormWidget
override	src/Widget/RowFormWidget.hpp	/^  void Initialise(ContainerWindow &parent, const PixelRect &rc) noexcept override;$/;"	m	class:RowFormWidget
override	src/Widget/RowFormWidget.hpp	/^  void Move(const PixelRect &rc) noexcept override;$/;"	m	class:RowFormWidget
override	src/Widget/RowFormWidget.hpp	/^  void Show(const PixelRect &rc) noexcept override;$/;"	m	class:RowFormWidget
override	src/Widget/RowFormWidget.hpp	/^  void Unprepare() noexcept override;$/;"	m	class:RowFormWidget
override	src/Widget/RowFormWidget.hpp	/^  ~RowFormWidget() noexcept override;$/;"	m	class:RowFormWidget
override	src/Widget/SolidWidget.hpp	/^  PixelSize GetMaximumSize() const noexcept override;$/;"	m	class:SolidWidget
override	src/Widget/SolidWidget.hpp	/^  PixelSize GetMinimumSize() const noexcept override;$/;"	m	class:SolidWidget
override	src/Widget/SolidWidget.hpp	/^  bool Click() noexcept override;$/;"	m	class:SolidWidget
override	src/Widget/SolidWidget.hpp	/^  bool KeyPress(unsigned key_code) noexcept override;$/;"	m	class:SolidWidget
override	src/Widget/SolidWidget.hpp	/^  bool Leave() noexcept override;$/;"	m	class:SolidWidget
override	src/Widget/SolidWidget.hpp	/^  bool Save(bool &changed) noexcept override;$/;"	m	class:SolidWidget
override	src/Widget/SolidWidget.hpp	/^  bool SetFocus() noexcept override;$/;"	m	class:SolidWidget
override	src/Widget/SolidWidget.hpp	/^  void Hide() noexcept override;$/;"	m	class:SolidWidget
override	src/Widget/SolidWidget.hpp	/^  void Initialise(ContainerWindow &parent, const PixelRect &rc) noexcept override;$/;"	m	class:SolidWidget
override	src/Widget/SolidWidget.hpp	/^  void Move(const PixelRect &rc) noexcept override;$/;"	m	class:SolidWidget
override	src/Widget/SolidWidget.hpp	/^  void Prepare(ContainerWindow &parent, const PixelRect &rc) noexcept override;$/;"	m	class:SolidWidget
override	src/Widget/SolidWidget.hpp	/^  void ReClick() noexcept override;$/;"	m	class:SolidWidget
override	src/Widget/SolidWidget.hpp	/^  void Show(const PixelRect &rc) noexcept override;$/;"	m	class:SolidWidget
override	src/Widget/SolidWidget.hpp	/^  void Unprepare() noexcept override;$/;"	m	class:SolidWidget
override	src/Widget/SolidWidget.hpp	/^  ~SolidWidget() noexcept override;$/;"	m	class:SolidWidget
override	src/Widget/TabWidget.hpp	/^  PixelSize GetMaximumSize() const noexcept override;$/;"	m	class:TabWidget
override	src/Widget/TabWidget.hpp	/^  PixelSize GetMinimumSize() const noexcept override;$/;"	m	class:TabWidget
override	src/Widget/TabWidget.hpp	/^  bool KeyPress(unsigned key_code) noexcept override;$/;"	m	class:TabWidget
override	src/Widget/TabWidget.hpp	/^  bool SetFocus() noexcept override;$/;"	m	class:TabWidget
override	src/Widget/TabWidget.hpp	/^  void Hide() noexcept override;$/;"	m	class:TabWidget
override	src/Widget/TabWidget.hpp	/^  void Initialise(ContainerWindow &parent, const PixelRect &rc) noexcept override;$/;"	m	class:TabWidget
override	src/Widget/TabWidget.hpp	/^  void Move(const PixelRect &rc) noexcept override;$/;"	m	class:TabWidget
override	src/Widget/TabWidget.hpp	/^  void OnPageFlipped() noexcept override;$/;"	m	class:TabWidget
override	src/Widget/TabWidget.hpp	/^  void Prepare(ContainerWindow &parent, const PixelRect &rc) noexcept override;$/;"	m	class:TabWidget
override	src/Widget/TabWidget.hpp	/^  void Show(const PixelRect &rc) noexcept override;$/;"	m	class:TabWidget
override	src/Widget/TabWidget.hpp	/^  void Unprepare() noexcept override;$/;"	m	class:TabWidget
override	src/Widget/TabWidget.hpp	/^  ~TabWidget() noexcept override;$/;"	m	class:TabWidget
override	src/Widget/TextListWidget.hpp	/^                   unsigned i) noexcept override;$/;"	m	class:TextListWidget
override	src/Widget/TextListWidget.hpp	/^  void Prepare(ContainerWindow &parent, const PixelRect &rc) noexcept override;$/;"	m	class:TextListWidget
override	src/Widget/TextWidget.hpp	/^  PixelSize GetMaximumSize() const noexcept override;$/;"	m	class:TextWidget
override	src/Widget/TextWidget.hpp	/^  PixelSize GetMinimumSize() const noexcept override;$/;"	m	class:TextWidget
override	src/Widget/TextWidget.hpp	/^  void Prepare(ContainerWindow &parent, const PixelRect &rc) noexcept override;$/;"	m	class:TextWidget
override	src/Widget/TwoWidgets.hpp	/^  PixelSize GetMaximumSize() const noexcept override;$/;"	m	class:TwoWidgets
override	src/Widget/TwoWidgets.hpp	/^  PixelSize GetMinimumSize() const noexcept override;$/;"	m	class:TwoWidgets
override	src/Widget/TwoWidgets.hpp	/^  bool Click() noexcept override;$/;"	m	class:TwoWidgets
override	src/Widget/TwoWidgets.hpp	/^  bool KeyPress(unsigned key_code) noexcept override;$/;"	m	class:TwoWidgets
override	src/Widget/TwoWidgets.hpp	/^  bool Leave() noexcept override;$/;"	m	class:TwoWidgets
override	src/Widget/TwoWidgets.hpp	/^  bool Save(bool &changed) noexcept override;$/;"	m	class:TwoWidgets
override	src/Widget/TwoWidgets.hpp	/^  bool SetFocus() noexcept override;$/;"	m	class:TwoWidgets
override	src/Widget/TwoWidgets.hpp	/^  void Hide() noexcept override;$/;"	m	class:TwoWidgets
override	src/Widget/TwoWidgets.hpp	/^  void Initialise(ContainerWindow &parent, const PixelRect &rc) noexcept override;$/;"	m	class:TwoWidgets
override	src/Widget/TwoWidgets.hpp	/^  void Move(const PixelRect &rc) noexcept override;$/;"	m	class:TwoWidgets
override	src/Widget/TwoWidgets.hpp	/^  void Prepare(ContainerWindow &parent, const PixelRect &rc) noexcept override;$/;"	m	class:TwoWidgets
override	src/Widget/TwoWidgets.hpp	/^  void ReClick() noexcept override;$/;"	m	class:TwoWidgets
override	src/Widget/TwoWidgets.hpp	/^  void Show(const PixelRect &rc) noexcept override;$/;"	m	class:TwoWidgets
override	src/Widget/TwoWidgets.hpp	/^  void Unprepare() noexcept override;$/;"	m	class:TwoWidgets
override	src/Widget/ViewImageWidget.cpp	/^  void OnPaint(Canvas &canvas) override;$/;"	m	class:final	file:
override	src/Widget/ViewImageWidget.hpp	/^  void Prepare(ContainerWindow &parent, const PixelRect &rc) noexcept override;$/;"	m	class:ViewImageWidget
override	src/Widget/Widget.hpp	/^                  const PixelRect &rc) noexcept override;$/;"	m	class:NullWidget
override	src/Widget/Widget.hpp	/^               const PixelRect &rc) noexcept override;$/;"	m	class:NullWidget
override	src/Widget/Widget.hpp	/^  PixelSize GetMaximumSize() const noexcept override;$/;"	m	class:NullWidget
override	src/Widget/Widget.hpp	/^  PixelSize GetMinimumSize() const noexcept override;$/;"	m	class:NullWidget
override	src/Widget/Widget.hpp	/^  bool Click() noexcept override;$/;"	m	class:NullWidget
override	src/Widget/Widget.hpp	/^  bool KeyPress(unsigned key_code) noexcept override;$/;"	m	class:NullWidget
override	src/Widget/Widget.hpp	/^  bool Leave() noexcept override;$/;"	m	class:NullWidget
override	src/Widget/Widget.hpp	/^  bool Save(bool &changed) noexcept override;$/;"	m	class:NullWidget
override	src/Widget/Widget.hpp	/^  bool SetFocus() noexcept override;$/;"	m	class:NullWidget
override	src/Widget/Widget.hpp	/^  void Move(const PixelRect &rc) noexcept override;$/;"	m	class:NullWidget
override	src/Widget/Widget.hpp	/^  void ReClick() noexcept override;$/;"	m	class:NullWidget
override	src/Widget/Widget.hpp	/^  void Unprepare() noexcept override;$/;"	m	class:NullWidget
override	src/Widget/WindowWidget.hpp	/^  void Hide() noexcept override;$/;"	m	class:WindowWidget
override	src/Widget/WindowWidget.hpp	/^  void Move(const PixelRect &rc) noexcept override;$/;"	m	class:WindowWidget
override	src/Widget/WindowWidget.hpp	/^  void Show(const PixelRect &rc) noexcept override;$/;"	m	class:WindowWidget
override	src/Widget/WindowWidget.hpp	/^  ~WindowWidget() noexcept override;$/;"	m	class:WindowWidget
override	src/XML/DataNodeXML.hpp	/^  List ListChildren() const noexcept override;$/;"	m	class:final
override	src/XML/DataNodeXML.hpp	/^  List ListChildrenNamed(const TCHAR *name) const noexcept override;$/;"	m	class:final
override	src/XML/DataNodeXML.hpp	/^  const TCHAR *GetAttribute(const TCHAR *name) const noexcept override;$/;"	m	class:final
override	src/XML/DataNodeXML.hpp	/^  const TCHAR *GetName() const noexcept override;$/;"	m	class:final
override	src/XML/DataNodeXML.hpp	/^  std::unique_ptr<ConstDataNode> GetChildNamed(const TCHAR *name) const noexcept override;$/;"	m	class:final
override	src/XML/DataNodeXML.hpp	/^  std::unique_ptr<WritableDataNode> AppendChild(const TCHAR *name) noexcept override;$/;"	m	class:final
override	src/XML/DataNodeXML.hpp	/^  void SetAttribute(const TCHAR *name, const TCHAR *value) noexcept override;$/;"	m	class:final
override	src/event/net/ConnectSocket.hxx	/^	void Cancel() noexcept override;$/;"	m	class:final
override	src/io/ConvertLineReader.hpp	/^  TCHAR *ReadLine() override;$/;"	m	class:ConvertLineReader
override	src/io/ConvertLineReader.hpp	/^  long GetSize() const override;$/;"	m	class:ConvertLineReader
override	src/io/ConvertLineReader.hpp	/^  long Tell() const override;$/;"	m	class:ConvertLineReader
override	src/io/FileLineReader.hpp	/^  char *ReadLine() override;$/;"	m	class:FileLineReaderA
override	src/io/FileLineReader.hpp	/^  long GetSize() const override;$/;"	m	class:FileLineReaderA
override	src/io/FileLineReader.hpp	/^  long Tell() const override;$/;"	m	class:FileLineReaderA
override	src/io/FileOutputStream.hxx	/^	void Write(const void *data, size_t size) override;$/;"	m	class:final
override	src/io/FileReader.hxx	/^	size_t Read(void *data, size_t size) override;$/;"	m	class:final
override	src/io/GunzipReader.hxx	/^	size_t Read(void *data, size_t size) override;$/;"	m	class:final
override	src/io/ZipLineReader.hpp	/^  char *ReadLine() override;$/;"	m	class:ZipLineReaderA
override	src/io/ZipLineReader.hpp	/^  long GetSize() const override;$/;"	m	class:ZipLineReaderA
override	src/io/ZipLineReader.hpp	/^  long Tell() const override;$/;"	m	class:ZipLineReaderA
override	src/io/ZipReader.hpp	/^  size_t Read(void *data, size_t size) override;$/;"	m	class:final
override	src/io/ZlibError.hxx	/^	const char *what() const noexcept override;$/;"	m	class:final
override	src/io/async/AsioThread.hpp	/^  void Run() noexcept override;$/;"	m	class:final
override	src/net/http/DownloadManager.cpp	/^  void Tick() noexcept override;$/;"	m	class:final	file:
override	src/net/http/ToBuffer.hpp	/^  void Run(OperationEnvironment &env) override;$/;"	m	class:Net::DownloadToBufferJob
override	src/thread/StandbyThread.hpp	/^  void Run() noexcept override;$/;"	m	class:StandbyThread
override	src/ui/canvas/Bitmap.hpp	/^  virtual void SurfaceCreated() override;$/;"	m	class:final
override	src/ui/canvas/Bitmap.hpp	/^  virtual void SurfaceDestroyed() override;$/;"	m	class:final
override	src/ui/canvas/RawBitmap.hpp	/^  void SurfaceCreated() override;$/;"	m	class:final
override	src/ui/canvas/RawBitmap.hpp	/^  void SurfaceDestroyed() override;$/;"	m	class:final
override	src/ui/canvas/opengl/BufferCanvas.hpp	/^  void SurfaceCreated() override;$/;"	m	class:DisplayOrientation
override	src/ui/canvas/opengl/BufferCanvas.hpp	/^  void SurfaceDestroyed() override;$/;"	m	class:DisplayOrientation
override	src/ui/event/Notify.hpp	/^  virtual bool OnUser(unsigned id) override;$/;"	m	class:UI::final
override	src/ui/window/BufferWindow.hpp	/^  void OnPaint(Canvas &canvas) override;$/;"	m	class:BufferWindow
override	src/ui/window/BufferWindow.hpp	/^  void OnResize(PixelSize new_size) override;$/;"	m	class:BufferWindow
override	src/ui/window/ContainerWindow.hpp	/^  Window *GetFocusedWindow() noexcept override;$/;"	m	class:ContainerWindow
override	src/ui/window/ContainerWindow.hpp	/^  bool OnMouseDouble(PixelPoint p) override;$/;"	m	class:ContainerWindow
override	src/ui/window/ContainerWindow.hpp	/^  bool OnMouseDown(PixelPoint p) override;$/;"	m	class:ContainerWindow
override	src/ui/window/ContainerWindow.hpp	/^  bool OnMouseMove(PixelPoint p, unsigned keys) override;$/;"	m	class:ContainerWindow
override	src/ui/window/ContainerWindow.hpp	/^  bool OnMouseUp(PixelPoint p) override;$/;"	m	class:ContainerWindow
override	src/ui/window/ContainerWindow.hpp	/^  bool OnMouseWheel(PixelPoint p, int delta) override;$/;"	m	class:ContainerWindow
override	src/ui/window/ContainerWindow.hpp	/^  bool OnMultiTouchDown() override;$/;"	m	class:ContainerWindow
override	src/ui/window/ContainerWindow.hpp	/^  bool OnMultiTouchUp() override;$/;"	m	class:ContainerWindow
override	src/ui/window/ContainerWindow.hpp	/^  void ClearCapture() noexcept override;$/;"	m	class:ContainerWindow
override	src/ui/window/ContainerWindow.hpp	/^  void ClearFocus() noexcept override;$/;"	m	class:ContainerWindow
override	src/ui/window/ContainerWindow.hpp	/^  void OnCancelMode() override;$/;"	m	class:ContainerWindow
override	src/ui/window/ContainerWindow.hpp	/^  void OnDestroy() override;$/;"	m	class:ContainerWindow
override	src/ui/window/ContainerWindow.hpp	/^  void OnPaint(Canvas &canvas) override;$/;"	m	class:ContainerWindow
override	src/ui/window/ContainerWindow.hpp	/^  void SetFocus() noexcept override;$/;"	m	class:ContainerWindow
override	src/ui/window/ContainerWindow.hpp	/^  ~ContainerWindow() noexcept override;$/;"	m	class:ContainerWindow
override	src/ui/window/DoubleBufferWindow.hpp	/^  virtual void OnCreate() override;$/;"	m	class:DoubleBufferWindow
override	src/ui/window/DoubleBufferWindow.hpp	/^  virtual void OnDestroy() override;$/;"	m	class:DoubleBufferWindow
override	src/ui/window/DoubleBufferWindow.hpp	/^  virtual void OnPaint(Canvas &canvas) override;$/;"	m	class:DoubleBufferWindow
override	src/ui/window/PaintWindow.hpp	/^                    WPARAM wParam, LPARAM lParam) noexcept override;$/;"	m	class:PaintWindow
override	src/ui/window/SingleWindow.hpp	/^  bool OnClose() noexcept override;$/;"	m	class:UI::SingleWindow
override	src/ui/window/SingleWindow.hpp	/^  void OnDestroy() override;$/;"	m	class:UI::SingleWindow
override	src/ui/window/SingleWindow.hpp	/^  void OnResize(PixelSize new_size) override;$/;"	m	class:UI::SingleWindow
override	src/ui/window/SolidContainerWindow.hpp	/^  void OnPaint(Canvas &canvas) override;$/;"	m	class:SolidContainerWindow
override	src/ui/window/TopWindow.hpp	/^                    WPARAM wParam, LPARAM lParam) noexcept override;$/;"	m	class:UI::TopWindow
override	src/ui/window/TopWindow.hpp	/^  void DisableCapture() noexcept override;$/;"	m	class:UI::TopWindow
override	src/ui/window/TopWindow.hpp	/^  void EnableCapture() noexcept override;$/;"	m	class:UI::TopWindow
override	src/ui/window/TopWindow.hpp	/^  void Invalidate() noexcept override;$/;"	m	class:UI::TopWindow
override	src/ui/window/TopWindow.hpp	/^  void OnDestroy() override;$/;"	m	class:UI::TopWindow
override	src/ui/window/TopWindow.hpp	/^  void OnPaint(Canvas &canvas) override;$/;"	m	class:UI::TopWindow
override	src/ui/window/TopWindow.hpp	/^  void OnResize(PixelSize new_size) override;$/;"	m	class:UI::TopWindow
override	src/ui/window/TopWindow.hpp	/^  ~TopWindow() noexcept override;$/;"	m	class:UI::TopWindow
overview	src/Terrain/RasterTileCache.hpp	/^  RasterBuffer overview;$/;"	m	class:RasterTileCache
overview_height_fine	src/Terrain/RasterTileCache.hpp	/^  unsigned int overview_width_fine, overview_height_fine;$/;"	m	class:RasterTileCache
overview_width_fine	src/Terrain/RasterTileCache.hpp	/^  unsigned int overview_width_fine, overview_height_fine;$/;"	m	class:RasterTileCache
own_teammate_code	src/NMEA/Derived.hpp	/^  TeamCode own_teammate_code;$/;"	m	struct:TeamInfo
owns_children	src/Engine/Airspace/Airspaces.hpp	/^  const bool owns_children;$/;"	m	class:Airspaces
oz	src/Device/Driver/IMI/Protocol/Types.hpp	/^    TObservationZone oz;$/;"	m	struct:IMI::TWaypoint
oz	src/Dialogs/Task/Widgets/ObservationZoneEditWidget.hpp	/^  ObservationZone &oz;$/;"	m	class:ObservationZoneEditWidget
oz	src/MapWindow/Items/MapItem.hpp	/^  std::unique_ptr<ObservationZonePoint> oz;$/;"	m	struct:TaskOZMapItem
oz_active_pen	src/Look/TaskLook.hpp	/^  Pen oz_active_pen;$/;"	m	struct:TaskLook
oz_current_pen	src/Look/TaskLook.hpp	/^  Pen oz_current_pen;$/;"	m	struct:TaskLook
oz_inactive_pen	src/Look/TaskLook.hpp	/^  Pen oz_inactive_pen;$/;"	m	struct:TaskLook
oz_parameter	src/Device/Driver/Volkslogger/Database.hpp	/^    uint8_t oz_parameter;$/;"	m	struct:Volkslogger::DeclarationWaypoint
oz_point	src/Engine/Task/ObservationZones/ObservationZoneClient.hpp	/^  std::unique_ptr<ObservationZonePoint> oz_point;$/;"	m	class:ObservationZoneClient
oz_shape	src/Device/Driver/Volkslogger/Database.hpp	/^    uint8_t oz_shape;$/;"	m	struct:Volkslogger::DeclarationWaypoint
oztyp	src/Device/Driver/Volkslogger/vlapi2.h	/^    OZTYP oztyp;$/;"	m	struct:VLAPI_DATA::DCLWPT
ozv	src/Renderer/TaskPointRenderer.hpp	/^  OZRenderer &ozv;$/;"	m	class:TaskPointRenderer
p	src/Engine/Task/Stats/TaskSummary.hpp	/^  double p;$/;"	m	struct:TaskSummaryPoint
p	src/Geo/Flat/FlatEllipse.hpp	/^  FlatPoint p;$/;"	m	class:FlatEllipse
p	src/Replay/CatmullRomInterpolator.hpp	/^  Record p[4];$/;"	m	class:CatmullRomInterpolator
p	src/ui/canvas/memory/UncompressedImage.hpp	/^  const uint8_t *p;$/;"	m	struct:GrayPixelReader
p	src/ui/canvas/memory/UncompressedImage.hpp	/^  const uint8_t *p;$/;"	m	struct:RGBPixelReader
p	src/ui/canvas/opengl/Buffer.hpp	/^  GLvoid *p;$/;"	m	class:GLBuffer
p	src/util/StringBuilder.hxx	/^	pointer p;$/;"	m	class:StringBuilder
p	src/util/StringParser.hxx	/^	const_pointer p;$/;"	m	class:StringParser
pOther	src/Topography/shapelib/mapserver.h	/^    void                *pOther;$/;"	m	struct:_FilterNode
pStr	src/XML/Parser.cpp	/^    const TCHAR *pStr;$/;"	m	struct:XML::NextToken	file:
p_abs_abs_	src/Math/KalmanFilter1d.hpp	/^  double p_abs_abs_;$/;"	m	class:KalmanFilter1d
p_abs_vel_	src/Math/KalmanFilter1d.hpp	/^  double p_abs_vel_;$/;"	m	class:KalmanFilter1d
p_remaining	src/Engine/Task/Stats/TaskSummary.hpp	/^  double p_remaining;$/;"	m	struct:TaskSummary
p_vel_vel_	src/Math/KalmanFilter1d.hpp	/^  double p_vel_vel_;$/;"	m	class:KalmanFilter1d
pabyRec	src/Topography/shapelib/mapshape.h	/^    uchar   *pabyRec;$/;"	m	struct:__anon75
pachFieldType	src/Topography/shapelib/mapshape.h	/^    char  *pachFieldType;$/;"	m	struct:__anon76
packed2unpacked	src/Device/Driver/Volkslogger/vlconv.cpp	/^  packed2unpacked(const uint8_t *packed)$/;"	f	class:C2
packet_id	src/Tracking/TrackingGlue.hpp	/^    unsigned packet_id;$/;"	m	struct:final::LiveTrack24State
padding	src/Device/Driver/IMI/Protocol/Types.hpp	/^    IMIDWORD padding:12;$/;"	m	struct:IMI::Fix
padding	src/Gauge/ThermalAssistantRenderer.hpp	/^  unsigned padding;$/;"	m	class:ThermalAssistantRenderer
padding	src/util/SliceAllocator.hxx	/^		char padding[sizeof(T) - sizeof(void *)];$/;"	m	struct:SliceAllocator::Item
padding	src/zzip/plugin.h	/^    struct { void* padding[8]; } ptr;$/;"	m	struct:_zzip_plugin_io::__anon185
page	src/Dialogs/Waypoint/dlgWaypointDetails.cpp	/^  int page = 0, last_page = 0;$/;"	m	class:final	file:
page	src/Dialogs/dlgAnalysis.cpp	/^static AnalysisPage page = AnalysisPage::BAROGRAPH;$/;"	v	file:
page_flipped_callback	src/Widget/PagerWidget.hpp	/^  PageFlippedCallback page_flipped_callback;$/;"	m	class:PagerWidget
pager	src/Dialogs/Device/Vega/VegaConfigurationDialog.cpp	/^  PagerWidget &pager;$/;"	m	class:VegaSchemeButtonsPage	file:
pager	src/Dialogs/Settings/dlgConfiguration.cpp	/^static ArrowPagerWidget *pager;$/;"	v	file:
pager	src/Form/TabDisplay.hpp	/^  TabWidget &pager;$/;"	m	class:final
pager	src/Form/TabMenuDisplay.hpp	/^  PagerWidget &pager;$/;"	m	class:final
pager	src/Widget/TabWidget.hpp	/^    PixelRect tab_display, extra, pager;$/;"	m	struct:TabWidget::Layout
pages	src/Form/TabMenuData.hpp	/^  const TabMenuPage *pages;$/;"	m	struct:TabMenuGroup
pages	src/PageSettings.hpp	/^  std::array<PageLayout, MAX_PAGES> pages;$/;"	m	struct:PageSettings
pages	src/PageState.hpp	/^  std::array<PageState, MAX_PAGES> pages;$/;"	m	struct:PagesState
pages	src/UISettings.hpp	/^  PageSettings pages;$/;"	m	struct:UISettings
pages	src/UIState.hpp	/^  PagesState pages;$/;"	m	struct:UIState
pair	src/util/Cache.hxx	/^		Manual<Pair> pair;$/;"	m	class:Cache::Item
palette	src/Topography/shapelib/mapserver.h	/^    paletteObj palette; \/* holds a map palette *\/$/;"	m	struct:mapObj
paletteObj	src/Topography/shapelib/mapserver.h	/^  } paletteObj;$/;"	t	typeref:struct:__anon25
panFieldDecimals	src/Topography/shapelib/mapshape.h	/^    int   *panFieldDecimals;$/;"	m	struct:__anon76
panFieldOffset	src/Topography/shapelib/mapshape.h	/^    int   *panFieldOffset;$/;"	m	struct:__anon76
panFieldSize	src/Topography/shapelib/mapshape.h	/^    int   *panFieldSize;$/;"	m	struct:__anon76
panParts	src/Topography/shapelib/mapshape.h	/^    int   *panParts;$/;"	m	struct:__anon75
panRecAllLoaded	src/Topography/shapelib/mapshape.h	/^    int   panRecAllLoaded;$/;"	m	struct:__anon75
panRecLoaded	src/Topography/shapelib/mapshape.h	/^    ms_bitarray panRecLoaded;$/;"	m	struct:__anon75
panRecOffset	src/Topography/shapelib/mapshape.h	/^    int   *panRecOffset;$/;"	m	struct:__anon75
panRecSize	src/Topography/shapelib/mapshape.h	/^    int   *panRecSize;$/;"	m	struct:__anon75
panel	src/PageSettings.hpp	/^    unsigned panel;$/;"	m	struct:PageLayout::InfoBoxConfig
panel_index	src/UIState.hpp	/^  unsigned panel_index;$/;"	m	struct:UIState
panel_name	src/UIState.hpp	/^  StaticString<32u> panel_name;$/;"	m	struct:UIState
panels	src/InfoBoxes/Content/Factory.cpp	/^  const InfoBoxPanel *panels;$/;"	m	class:InfoBoxContentCallback	file:
panels	src/InfoBoxes/Content/Factory.cpp	/^  const InfoBoxPanel *panels;$/;"	m	struct:MetaData	file:
panels	src/InfoBoxes/Content/MacCready.cpp	/^static constexpr InfoBoxPanel panels[] = {$/;"	v	file:
panels	src/InfoBoxes/InfoBoxSettings.hpp	/^  Panel panels[MAX_PANELS];$/;"	m	struct:InfoBoxSettings
papszBottomLabels	src/Topography/shapelib/mapserver.h	/^    char  **papszBottomLabels;$/;"	m	struct:__anon50
papszLeftLabels	src/Topography/shapelib/mapserver.h	/^    char  **papszLeftLabels;$/;"	m	struct:__anon50
papszRightLabels	src/Topography/shapelib/mapserver.h	/^    char  **papszRightLabels;$/;"	m	struct:__anon50
papszTopLabels	src/Topography/shapelib/mapserver.h	/^    char  **papszTopLabels;$/;"	m	struct:__anon50
param	src/ui/event/shared/Event.hpp	/^  unsigned param;$/;"	m	struct:UI::Event
parameter	src/Weather/Rasp/RaspCache.hpp	/^  const unsigned parameter;$/;"	m	class:RaspCache
parameter1	src/Device/Driver/IMI/Protocol/Types.hpp	/^    IMIBYTE msgID, parameter1;$/;"	m	struct:IMI::TMsg
parameter2	src/Device/Driver/IMI/Protocol/Types.hpp	/^    IMIWORD parameter2;$/;"	m	struct:IMI::TMsg
parameter3	src/Device/Driver/IMI/Protocol/Types.hpp	/^    IMIWORD parameter3;$/;"	m	struct:IMI::TMsg
parameters	src/Dialogs/Device/Vega/VegaParametersWidget.hpp	/^  StaticArray<Parameter, 32> parameters;$/;"	m	class:VegaParametersWidget
params	src/Dialogs/Device/BlueFly/BlueFlyConfigurationDialog.cpp	/^  BlueFlyDevice::BlueFlySettings params;$/;"	m	class:final	file:
parent	src/Dialogs/JobDialog.hpp	/^  UI::SingleWindow &parent;$/;"	m	class:DialogJobRunner
parent	src/Dialogs/Settings/dlgConfigInfoboxes.cpp	/^  InfoBoxesConfigWidget *parent;$/;"	m	class:InfoBoxPreview	file:
parent	src/Dialogs/Task/Manager/TaskActionsPanel.hpp	/^  TaskMiscPanel &parent;$/;"	m	class:TaskActionsPanel
parent	src/Engine/PathSolvers/Dijkstra.hpp	/^    Node parent;$/;"	m	struct:Dijkstra::Edge
parent	src/Form/ButtonPanel.hpp	/^  ContainerWindow &parent;$/;"	m	class:ButtonPanel
parent	src/PopupMessage.hpp	/^  UI::SingleWindow &parent;$/;"	m	class:PopupMessage
parent	src/Widget/ManagedWidget.hpp	/^  ContainerWindow *parent = nullptr;$/;"	m	class:ManagedWidget
parent	src/Widget/PagerWidget.hpp	/^  ContainerWindow *parent;$/;"	m	class:PagerWidget
parent	src/ui/window/Window.hpp	/^  ContainerWindow *parent = nullptr;$/;"	m	class:Window
parent	src/util/QuadTree.hxx	/^		Bucket *parent;$/;"	m	struct:Bucket
parent_	src/Terrain/jasper/jpc/jpc_tagtree.h	/^	struct jpc_tagtreenode_ *parent_;$/;"	m	struct:jpc_tagtreenode_	typeref:struct:jpc_tagtreenode_::jpc_tagtreenode_
parents	src/ui/window/custom/Reference.hpp	/^  StaticArray<const ContainerWindow*, 6> parents;$/;"	m	class:WindowReference
parheightval	src/Terrain/jasper/jpc/jpc_cs.h	/^	uint_fast8_t parheightval;$/;"	m	struct:__anon138
parms	src/Replay/DemoReplay.hpp	/^  AutopilotParameters parms;$/;"	m	class:DemoReplay
parms	src/Replay/TaskAutoPilot.hpp	/^  const AutopilotParameters &parms;$/;"	m	class:TaskAutoPilot
parms	src/Terrain/jasper/jpc/jpc_cs.h	/^	jpc_msparms_t parms;$/;"	m	struct:__anon156
parseObj	src/Topography/shapelib/mapserver.h	/^  } parseObj;$/;"	t	typeref:struct:__anon29
parseResultObj	src/Topography/shapelib/mapserver.h	/^  } parseResultObj;$/;"	t	typeref:union:__anon26
parse_assignment	src/Input/InputParser.cpp	/^parse_assignment(TCHAR *buffer, const TCHAR *&key, const TCHAR *&value)$/;"	f	file:
parsed_metar	src/Weather/NOAAStore.hpp	/^    ParsedMETAR parsed_metar;$/;"	m	struct:NOAAStore::Item
parsed_metar_available	src/Weather/NOAAStore.hpp	/^    bool parsed_metar_available;$/;"	m	struct:NOAAStore::Item
parser	src/Device/Descriptor.hpp	/^  NMEAParser parser;$/;"	m	class:final
parser	src/Replay/NmeaReplay.hpp	/^  NMEAParser *parser;$/;"	m	class:NmeaReplay
partials	src/Topography/shapelib/mapserver.h	/^    int partials; \/* can labels run of an image *\/$/;"	m	struct:labelObj
partno	src/Terrain/jasper/jpc/jpc_cs.h	/^	uint_fast8_t partno;$/;"	m	struct:__anon135
partno	src/Terrain/jasper/jpc/jpc_dec.h	/^	unsigned partno;$/;"	m	struct:__anon127
parwidthval	src/Terrain/jasper/jpc/jpc_cs.h	/^	uint_fast8_t parwidthval;$/;"	m	struct:__anon138
pasBottom	src/Topography/shapelib/mapserver.h	/^    pointObj *pasBottom;$/;"	m	struct:__anon50
pasLeft	src/Topography/shapelib/mapserver.h	/^    pointObj *pasLeft;$/;"	m	struct:__anon50
pasRight	src/Topography/shapelib/mapserver.h	/^    pointObj *pasRight;$/;"	m	struct:__anon50
pasTop	src/Topography/shapelib/mapserver.h	/^    pointObj *pasTop;$/;"	m	struct:__anon50
passive_brush	src/Look/FlarmTrafficLook.hpp	/^  Brush passive_brush;$/;"	m	struct:FlarmTrafficLook
passive_color	src/Look/FlarmTrafficLook.hpp	/^  Color passive_color;$/;"	m	struct:FlarmTrafficLook
passive_pen	src/Look/FlarmTrafficLook.hpp	/^  Pen passive_pen;$/;"	m	struct:FlarmTrafficLook
passno	src/Terrain/jasper/jpc/jpc_dec.h	/^	unsigned passno;$/;"	m	struct:jpc_dec_seg_s
password	src/Tracking/LiveTrack24/Settings.hpp	/^  StaticString<64> password;$/;"	m	struct:LiveTrack24::Settings
password	src/Weather/PCMet/Settings.hpp	/^    StaticString<64> password;$/;"	m	struct:PCMetSettings::Credentials
password	src/net/http/ToBuffer.hpp	/^  const char *username = nullptr, *password = nullptr;$/;"	m	class:Net::DownloadToBufferJob
password	src/net/http/ToFile.hpp	/^  const char *username = nullptr, *password = nullptr;$/;"	m	class:Net::DownloadToFileJob
password_button	src/Dialogs/ProfileListDialog.cpp	/^  Button *password_button;$/;"	m	class:final	file:
past	src/Engine/Task/Points/SampledTaskPoint.hpp	/^  bool past;$/;"	m	class:SampledTaskPoint
paste_button	src/Dialogs/Settings/dlgConfigInfoboxes.cpp	/^    PixelRect copy_button, paste_button, close_button;$/;"	m	struct:final::Layout	file:
paste_button	src/Dialogs/Settings/dlgConfigInfoboxes.cpp	/^  Button copy_button, paste_button, close_button;$/;"	m	class:final	file:
path	src/Device/Config.hpp	/^  StaticString<64> path;$/;"	m	struct:DeviceConfig
path	src/Device/Port/TTYEnumerator.hpp	/^  char path[64];$/;"	m	class:TTYEnumerator
path	src/Dialogs/Device/CAI302/WaypointUploader.hpp	/^  const Path path;$/;"	m	class:CAI302WaypointUploader
path	src/Dialogs/DownloadFilePicker.cpp	/^  AllocatedPath path = AllocatedPath(nullptr);$/;"	m	class:final	file:
path	src/Dialogs/Plane/PlaneListDialog.cpp	/^    AllocatedPath path;$/;"	m	struct:final::ListItem	file:
path	src/Dialogs/ProfileListDialog.cpp	/^    AllocatedPath path;$/;"	m	struct:final::ListItem	file:
path	src/Dialogs/Weather/MapOverlayWidget.cpp	/^    AllocatedPath path;$/;"	m	struct:final::Item	file:
path	src/Form/DataField/File.hpp	/^    AllocatedPath path;$/;"	m	struct:final::Item
path	src/Kobo/ToolsDialog.cpp	/^  AllocatedPath path;$/;"	m	struct:ListItem	file:
path	src/Logger/ExternalLogger.cpp	/^  const Path path;$/;"	m	class:DownloadFlightJob	file:
path	src/Logger/FlightLogger.hpp	/^  AllocatedPath path = nullptr;$/;"	m	class:FlightLogger
path	src/Replay/Replay.hpp	/^  AllocatedPath path = nullptr;$/;"	m	class:final
path	src/Task/TaskFile.hpp	/^  AllocatedPath path;$/;"	m	class:TaskFile
path	src/Topography/shapelib/mapserver.h	/^    multipointObj path;$/;"	m	struct:__anon23
path	src/Weather/PCMet/Overlays.hpp	/^  AllocatedPath path;$/;"	m	struct:PCMet::Overlay
path	src/Weather/PCMet/Overlays.hpp	/^  AllocatedPath path;$/;"	m	struct:PCMet::OverlayInfo
path	src/Weather/Rasp/RaspStore.hpp	/^  const AllocatedPath path;$/;"	m	class:RaspStore
path	src/io/FileOutputStream.hxx	/^	const AllocatedPath path;$/;"	m	class:final
path	src/io/FileReader.hxx	/^	AllocatedPath path;$/;"	m	class:final
path	src/net/http/ToFile.hpp	/^  const Path path;$/;"	m	class:Net::DownloadToFileJob
path_relative	src/Dialogs/DownloadFilePicker.cpp	/^  const Path path_relative;$/;"	m	class:final	file:
path_relative	src/net/http/DownloadManager.cpp	/^      :uri(_uri), path_relative(_path_relative) {}$/;"	f	struct:final::Item
path_relative	src/net/http/DownloadManager.cpp	/^    AllocatedPath path_relative;$/;"	m	struct:final::Item	file:
pathname	src/Terrain/jasper/jas_stream.h	/^	char pathname[L_tmpnam + 1];$/;"	m	struct:__anon98
pattern	src/Topography/shapelib/mapserver.h	/^    double pattern[MS_MAXPATTERNLENGTH]; \/*moved from symbolObj in version 6.0*\/$/;"	m	struct:styleObj
pattern	src/Topography/shapelib/mapserver.h	/^    double pattern[MS_MAXPATTERNLENGTH];$/;"	m	struct:__anon62
patternlength	src/Topography/shapelib/mapserver.h	/^    int patternlength;  \/*moved from symbolObj in version 6.0*\/$/;"	m	struct:styleObj
patternlength	src/Topography/shapelib/mapserver.h	/^    int patternlength;$/;"	m	struct:__anon62
patternoffset	src/Topography/shapelib/mapserver.h	/^    double patternoffset;$/;"	m	struct:__anon62
pause_button	src/Dialogs/Device/PortMonitor.cpp	/^  Button *pause_button;$/;"	m	class:final	file:
paused	src/Dialogs/Device/PortMonitor.cpp	/^    :device(_device), look(_look), paused(false) {}$/;"	f	class:final
paused	src/Dialogs/Device/PortMonitor.cpp	/^  bool paused;$/;"	m	class:final	file:
paused	src/ui/window/TopWindow.hpp	/^  bool paused = false;$/;"	m	class:UI::TopWindow
paused_cond	src/ui/window/TopWindow.hpp	/^  Cond paused_cond;$/;"	m	class:UI::TopWindow
paused_mutex	src/ui/window/TopWindow.hpp	/^  Mutex paused_mutex;$/;"	m	class:UI::TopWindow
payload	src/Device/Driver/IMI/Protocol/Types.hpp	/^    IMIBYTE payload[COMM_MAX_PAYLOAD_SIZE];$/;"	m	struct:IMI::TMsg
payloadSize	src/Device/Driver/IMI/Protocol/Types.hpp	/^    IMIWORD payloadSize;$/;"	m	struct:IMI::TMsg
pboundinglines	src/Topography/shapelib/mapserver.h	/^    lineObj   *pboundinglines;$/;"	m	struct:__anon49
pboundingpoints	src/Topography/shapelib/mapserver.h	/^    pointObj  *pboundingpoints;$/;"	m	struct:__anon49
pc_met	src/Dialogs/Weather/MapOverlayWidget.cpp	/^    std::unique_ptr<PCMet::OverlayInfo> pc_met;$/;"	m	struct:final::Item	file:
pchg	src/Terrain/jasper/jpc/jpc_t2cod.h	/^	const jpc_pchg_t *pchg;$/;"	m	struct:__anon115
pchglist	src/Terrain/jasper/jpc/jpc_dec.h	/^	jpc_pchglist_t *pchglist;$/;"	m	struct:__anon120
pchglist	src/Terrain/jasper/jpc/jpc_t2cod.h	/^	jpc_pchglist_t *pchglist;$/;"	m	struct:__anon115
pchgno	src/Terrain/jasper/jpc/jpc_t2cod.h	/^	int pchgno;$/;"	m	struct:__anon115
pchgs	src/Terrain/jasper/jpc/jpc_cs.h	/^	jpc_pocpchg_t *pchgs;$/;"	m	struct:__anon147
pchgs	src/Terrain/jasper/jpc/jpc_t2cod.h	/^	jpc_pchg_t **pchgs;$/;"	m	struct:__anon112
pclr	src/Terrain/jasper/jp2/jp2_cod.h	/^		jp2_pclr_t pclr;$/;"	m	union:__anon94::__anon95
pcm_mixer	src/Audio/GlobalPCMMixer.cpp	/^PCMMixer *pcm_mixer = nullptr;$/;"	v
pcm_resource_player	src/Audio/GlobalPCMResourcePlayer.cpp	/^PCMResourcePlayer *pcm_resource_player = nullptr;$/;"	v
pcmet	src/Weather/Settings.hpp	/^  PCMetSettings pcmet;$/;"	m	struct:WeatherSettings
pcol	src/Terrain/jasper/jp2/jp2_cod.h	/^	uint_fast8_t pcol;$/;"	m	struct:__anon92
pdop	src/NMEA/GPSState.hpp	/^  double pdop;$/;"	m	struct:GPSState
peek	src/util/OverwritingRingBuffer.hpp	/^  const T &peek() const {$/;"	f	class:TrivialOverwritingRingBuffer
pen	src/Look/GestureLook.hpp	/^  Pen pen, invalid_pen;$/;"	m	struct:GestureLook
pen	src/Look/WaveLook.hpp	/^  Pen pen;$/;"	m	struct:WaveLook
pen	src/Topography/ShapeRenderer.hpp	/^  const Pen *pen;$/;"	m	class:ShapeRenderer
pen	src/Topography/TopographyFileRenderer.hpp	/^  Pen pen;$/;"	m	class:final
pen	src/ui/canvas/Pen.hpp	/^  HPEN pen = nullptr;$/;"	m	class:Pen
pen	src/ui/canvas/memory/Canvas.hpp	/^  Pen pen;$/;"	m	class:Canvas
pen	src/ui/canvas/opengl/Canvas.hpp	/^  Pen pen;$/;"	m	class:Canvas
pen_above	src/Look/FinalGlideBarLook.hpp	/^  Pen pen_above;$/;"	m	struct:FinalGlideBarLook
pen_active	src/Look/ThermalBandLook.hpp	/^  Pen pen_active;$/;"	m	struct:ThermalBandLook
pen_below	src/Look/FinalGlideBarLook.hpp	/^  Pen pen_below;$/;"	m	struct:FinalGlideBarLook
pen_below_landable	src/Look/FinalGlideBarLook.hpp	/^  Pen pen_below_landable;$/;"	m	struct:FinalGlideBarLook
pen_climb	src/Look/VarioBarLook.hpp	/^  Pen pen_climb;$/;"	m	struct:VarioBarLook
pen_inactive	src/Look/ThermalBandLook.hpp	/^  Pen pen_inactive;$/;"	m	struct:ThermalBandLook
pen_mc	src/Look/VarioBarLook.hpp	/^  Pen pen_mc;$/;"	m	struct:VarioBarLook
pen_sink	src/Look/VarioBarLook.hpp	/^  Pen pen_sink;$/;"	m	struct:VarioBarLook
pen_width	src/Topography/TopographyFile.hpp	/^  const unsigned pen_width;$/;"	m	class:TopographyFile
pen_width_scale	src/Screen/Layout.cpp	/^  unsigned pen_width_scale = 1024;$/;"	m	namespace:Layout	file:
pending	src/DrawThread.hpp	/^  bool pending = true;$/;"	m	class:final
pending	src/event/net/cares/Channel.cxx	/^	unsigned pending;$/;"	m	class:Cares::final	file:
pending	src/thread/StandbyThread.hpp	/^  bool pending = false;$/;"	m	class:StandbyThread
pens	src/Look/ChartLook.hpp	/^  Pen pens[STYLE_COUNT];$/;"	m	struct:ChartLook
per_device_data	src/Blackboard/DeviceBlackboard.hpp	/^  NMEAInfo per_device_data[NUMDEV];$/;"	m	class:DeviceBlackboard
percent_delta_time	src/Computer/CirclingComputer.hpp	/^  DeltaTime percent_delta_time;$/;"	m	class:CirclingComputer
perf	src/Engine/Airspace/AirspaceWarningManager.cpp	/^  const AirspaceAircraftPerformance &perf;$/;"	m	class:final	file:
period	src/RateLimiter.hpp	/^  std::chrono::steady_clock::duration period, delay;$/;"	m	class:RateLimiter
period_min	src/thread/WorkerThread.hpp	/^  const std::chrono::steady_clock::duration period_min, idle_min, delay;$/;"	m	class:WorkerThread
period_scale	src/Dialogs/Device/Vega/Schemes.hpp	/^    int beep_type, pitch_scheme, pitch_scale, period_scheme, period_scale;$/;"	m	struct:VEGA_SCHEME::Audio
period_scheme	src/Dialogs/Device/Vega/Schemes.hpp	/^    int beep_type, pitch_scheme, pitch_scale, period_scheme, period_scale;$/;"	m	struct:VEGA_SCHEME::Audio
period_schemes	src/Dialogs/Device/Vega/AudioParameters.hpp	/^static constexpr StaticEnumChoice period_schemes[] = {$/;"	v
persistent_callback	src/lua/Persistent.cpp	/^static constexpr char persistent_callback[] = "xcsoar.persistent_callback";$/;"	v	file:
persistent_table	src/lua/Persistent.cpp	/^static constexpr char persistent_table[] = "xcsoar.persistent_table";$/;"	v	file:
phys_addr	src/ui/canvas/fb/mxcfb.h	/^	__u32 phys_addr;$/;"	m	struct:mxcfb_alt_buffer_data
pi	src/Terrain/jasper/jpc/jpc_dec.h	/^	jpc_pi_t *pi;$/;"	m	struct:__anon127
picomp	src/Terrain/jasper/jpc/jpc_t2cod.h	/^	jpc_picomp_t *picomp;$/;"	m	struct:__anon115
picomps	src/Terrain/jasper/jpc/jpc_t2cod.h	/^	jpc_picomp_t *picomps;$/;"	m	struct:__anon115
pilot	src/Device/Driver/LX/LXN.hpp	/^    char pilot[19];$/;"	m	struct:LXN::FlightInfo
pilot	src/Device/Driver/LX/Protocol.hpp	/^    char pilot[52];$/;"	m	struct:LX::FlightInfo
pilot	src/Device/Driver/Volkslogger/vlapi2.h	/^      char pilot[65];$/;"	m	struct:VLAPI_DATA::DECLARATION::FLIGHTINFO
pilot	src/Device/Driver/Volkslogger/vlconv.h	/^  char pilot[65];					\/\/ flight-info, can be enhanced by all$/;"	m	struct:DIRENTRY
pilot	src/FLARM/FlarmNetRecord.hpp	/^  StaticString<LatinBufferSize(22)> pilot;$/;"	m	struct:FlarmNetRecord
pilot_id	src/Tracking/SkyLines/Protocol.hpp	/^    uint32_t pilot_id;$/;"	m	struct:SkyLinesTracking::TrafficResponsePacket::Traffic
pilot_name	src/Device/Declaration.hpp	/^  StaticString<64> pilot_name;$/;"	m	struct:Declaration
pilot_name	src/Device/Driver/CAI302/Protocol.hpp	/^      char pilot_name[24];$/;"	m	struct:CAI302::FileList::FileInfo
pilot_name	src/Logger/Settings.hpp	/^  StaticString<64> pilot_name;$/;"	m	struct:LoggerSettings
pilots	src/Device/Driver/Volkslogger/vlapi2.h	/^    PILOT *pilots;$/;"	m	struct:VLAPI_DATA::DATABASE
pirker	src/Engine/Task/Stats/ElementStat.hpp	/^  DistanceStat pirker;$/;"	m	struct:ElementStat
pirlvl	src/Terrain/jasper/jpc/jpc_t2cod.h	/^	jpc_pirlvl_t *pirlvl;$/;"	m	struct:__anon115
pirlvl_destroy	src/Terrain/jasper/jpc/jpc_t2cod.c	/^static void pirlvl_destroy(jpc_pirlvl_t *rlvl)$/;"	f	file:
pirlvls	src/Terrain/jasper/jpc/jpc_t2cod.h	/^	jpc_pirlvl_t *pirlvls;$/;"	m	struct:__anon114
pitch	src/ui/canvas/custom/UncompressedImage.hpp	/^  unsigned pitch, width, height;$/;"	m	class:UncompressedImage
pitch	src/ui/canvas/memory/Buffer.hpp	/^  unsigned pitch, width, height;$/;"	m	struct:ConstImageBuffer
pitch	src/ui/canvas/memory/Buffer.hpp	/^  unsigned pitch, width, height;$/;"	m	struct:WritableImageBuffer
pitch_and_period_scales	src/Dialogs/Device/Vega/AudioParameters.hpp	/^static constexpr StaticEnumChoice pitch_and_period_scales[] = {$/;"	v
pitch_angle	src/NMEA/Attitude.hpp	/^  Angle pitch_angle;$/;"	m	struct:AttitudeState
pitch_angle_available	src/NMEA/Attitude.hpp	/^  Validity pitch_angle_available;$/;"	m	struct:AttitudeState
pitch_angle_computed	src/NMEA/Attitude.hpp	/^  bool pitch_angle_computed;$/;"	m	struct:AttitudeState
pitch_scale	src/Dialogs/Device/Vega/Schemes.hpp	/^    int beep_type, pitch_scheme, pitch_scale, period_scheme, period_scale;$/;"	m	struct:VEGA_SCHEME::Audio
pitch_scheme	src/Dialogs/Device/Vega/Schemes.hpp	/^    int beep_type, pitch_scheme, pitch_scale, period_scheme, period_scale;$/;"	m	struct:VEGA_SCHEME::Audio
pitch_schemes	src/Dialogs/Device/Vega/AudioParameters.hpp	/^static constexpr StaticEnumChoice pitch_schemes[] = {$/;"	v
pitot_offset	src/Android/I2CbaroDevice.hpp	/^  double pitot_offset;$/;"	m	class:final
pitot_pressure	src/NMEA/Info.hpp	/^  AtmosphericPressure pitot_pressure;$/;"	m	struct:NMEAInfo
pitot_pressure_available	src/NMEA/Info.hpp	/^  Validity pitot_pressure_available;$/;"	m	struct:NMEAInfo
pixel	src/Topography/shapelib/mapserver.h	/^    colorObj *pixel; \/* for raster layers *\/$/;"	m	struct:__anon29
pixel_pan	src/Form/List.hpp	/^  unsigned pixel_pan = 0;$/;"	m	class:ListControl
pixel_points_buffer	src/MapWindow/StencilMapCanvas.hpp	/^  ReusableArray<BulkPixelPoint> pixel_points_buffer;$/;"	m	class:StencilMapCanvas
pixel_size	src/Terrain/RasterRenderer.hpp	/^  double pixel_size;$/;"	m	class:RasterRenderer
pkthdrstream	src/Terrain/jasper/jpc/jpc_dec.h	/^	jas_stream_t *pkthdrstream;$/;"	m	struct:__anon127
pkthdrstreams	src/Terrain/jasper/jpc/jpc_dec.h	/^	jpc_streamlist_t *pkthdrstreams;$/;"	m	struct:__anon129
pktno	src/Terrain/jasper/jpc/jpc_t2cod.h	/^	int pktno;$/;"	m	struct:__anon115
plane	src/Computer/Settings.hpp	/^  Plane plane;$/;"	m	struct:ComputerSettings
plane	src/Dialogs/Plane/PlaneDetailsDialog.cpp	/^  Plane plane;$/;"	m	class:final	file:
plane	src/Dialogs/Plane/PlanePolarDialog.cpp	/^  Plane plane;$/;"	m	class:final	file:
plane_pen	src/Look/FlarmTrafficLook.hpp	/^  Pen plane_pen, radar_pen;$/;"	m	struct:FlarmTrafficLook
plane_pen	src/Look/ThermalAssistantLook.hpp	/^  Pen plane_pen, polygon_pen;$/;"	m	struct:ThermalAssistantLook
plane_type	src/FLARM/FlarmNetRecord.hpp	/^  StaticString<LatinBufferSize(22)> plane_type;$/;"	m	struct:FlarmNetRecord
planned	src/Engine/Task/Computer/ElementStatComputer.hpp	/^  DistanceStatComputer planned;$/;"	m	class:ElementStatComputer
planned	src/Engine/Task/Stats/ElementStat.hpp	/^  DistanceStat planned;$/;"	m	struct:ElementStat
planned_route	src/NMEA/Derived.hpp	/^  StaticRoute planned_route;$/;"	m	struct:DerivedInfo
planner	src/Engine/Route/RoutePlanner.hpp	/^  AStar<RoutePoint, RoutePointHasher> planner;$/;"	m	class:RoutePlanner
planner	src/Task/RoutePlannerGlue.hpp	/^  AirspaceRoute planner;$/;"	m	class:RoutePlannerGlue
play	src/Audio/AndroidPCMPlayer.hpp	/^  SLES::Play play;$/;"	m	class:AndroidPCMPlayer
play	src/Audio/SLES/Play.hpp	/^    SLPlayItf play;$/;"	m	class:SLES::Play
playExternal_method	src/Android/SoundUtil.cpp	/^static jmethodID playExternal_method;$/;"	m	namespace:SoundUtil	file:
play_method	src/Android/SoundUtil.cpp	/^static jmethodID play_method;$/;"	m	namespace:SoundUtil	file:
play_object	src/Audio/AndroidPCMPlayer.hpp	/^  SLES::Object play_object;$/;"	m	class:AndroidPCMPlayer
player	src/Audio/PCMMixer.hpp	/^  std::unique_ptr<PCMPlayer> player;$/;"	m	class:final
player	src/Audio/PCMResourcePlayer.hpp	/^  std::unique_ptr<PCMPlayer> player;$/;"	m	class:PCMResourcePlayer
player	src/Audio/VarioGlue.cpp	/^static PCMPlayer *player;$/;"	v	file:
plt	src/Device/Driver/IMI/Protocol/Types.hpp	/^    IMICHAR plt[IMIDECL_PLT_LENGTH];$/;"	m	struct:IMI::FlightInfo
plt	src/Device/Driver/IMI/Protocol/Types.hpp	/^    IMICHAR plt[IMIDECL_PLT_LENGTH];$/;"	m	struct:IMI::TDeclarationHeader
plugin	src/Topography/shapelib/mapserver.h	/^      void *plugin;$/;"	m	union:imageObj::__anon51
plugin_library	src/Topography/shapelib/mapserver.h	/^    char *plugin_library;$/;"	m	struct:layerObj
plugin_library_original	src/Topography/shapelib/mapserver.h	/^    char *plugin_library_original; \/* this is needed for mapfile writing *\/$/;"	m	struct:layerObj
pnt	src/Topography/shapelib/mapserver.h	/^  pointObj pnt;$/;"	m	struct:__anon59
poc	src/Terrain/jasper/jpc/jpc_cs.h	/^	jpc_poc_t poc;$/;"	m	union:__anon155
poi	src/Computer/Settings.hpp	/^  PlacesOfInterestSettings poi;$/;"	m	struct:ComputerSettings
point	src/Engine/Route/AirspaceRoute.hpp	/^    RoutePoint point;$/;"	m	struct:AirspaceRoute::RouteAirspaceIntersection
point	src/Engine/Task/Unordered/AbortTask.hpp	/^    UnorderedTaskPoint point;$/;"	m	struct:AbortTask::AlternateTaskPoint
point	src/Engine/Trace/Trace.hpp	/^    TracePoint point;$/;"	m	struct:Trace::TraceDelta
point	src/Geo/Flat/FlatRay.hpp	/^  FlatGeoPoint point;$/;"	m	class:FlatRay
point	src/Renderer/WaypointRenderer.cpp	/^  PixelPoint point;$/;"	m	struct:VisibleWaypoint	file:
point	src/Topography/shapelib/mapprimitive.h	/^  pointObj *point;$/;"	m	struct:__anon71
point	src/Topography/shapelib/mapserver.h	/^    pointObj point; \/* by point *\/$/;"	m	struct:__anon33
point	src/Topography/shapelib/mapserver.h	/^    pointObj point; \/* label point *\/$/;"	m	struct:__anon39
point	src/ui/event/shared/Event.hpp	/^  PixelPoint point;$/;"	m	struct:UI::Event
pointObj	src/Topography/shapelib/mapprimitive.h	/^} pointObj;$/;"	t	typeref:struct:__anon70
point_buffer	src/Renderer/ChartRenderer.hpp	/^  ReusableArray<BulkPixelPoint> point_buffer;$/;"	m	class:ChartRenderer
point_to_real_x	src/ui/window/TopWindow.hpp	/^  float point_to_real_x = 1, point_to_real_y = 1;$/;"	m	class:UI::TopWindow
point_to_real_y	src/ui/window/TopWindow.hpp	/^  float point_to_real_x = 1, point_to_real_y = 1;$/;"	m	class:UI::TopWindow
point_types	src/Dialogs/Task/MutateTaskPointDialog.cpp	/^static TrivialArray<TaskPointFactoryType, LegalPointSet::N> point_types;$/;"	v	file:
pointer	src/Engine/Trace/Trace.cpp	/^  typedef typename I::pointer *pointer;$/;"	t	class:PointerIterator	file:
pointer	src/Engine/Trace/Trace.hpp	/^    typedef const TracePoint *pointer;$/;"	t	class:Trace::const_iterator
pointer	src/system/Path.hpp	/^  typedef Path::pointer pointer;$/;"	t	class:AllocatedPath
pointer	src/system/Path.hpp	/^  typedef value_type::pointer pointer;$/;"	t	class:Path
pointer	src/ui/canvas/memory/Buffer.hpp	/^  typedef typename PixelTraits::const_pointer pointer;$/;"	t	struct:ConstImageBuffer
pointer	src/ui/canvas/memory/Buffer.hpp	/^  typedef typename PixelTraits::pointer pointer;$/;"	t	struct:WritableImageBuffer
pointer	src/ui/canvas/memory/PixelOperations.hpp	/^  typedef typename PixelTraits::pointer pointer;$/;"	t	class:TransparentInvertPixelOperations
pointer	src/ui/canvas/memory/PixelOperations.hpp	/^  typedef typename PixelTraits::pointer pointer;$/;"	t	struct:BinaryWritePixel
pointer	src/ui/canvas/memory/PixelOperations.hpp	/^  typedef typename PixelTraits::pointer pointer;$/;"	t	struct:PerPixelOperations
pointer	src/ui/canvas/memory/PixelOperations.hpp	/^  typedef typename PixelTraits::pointer pointer;$/;"	t	struct:UnaryWritePixel
pointer	src/ui/canvas/memory/PixelTraits.hpp	/^  typedef color_type *pointer;$/;"	t	struct:BGRAPixelTraits
pointer	src/ui/canvas/memory/PixelTraits.hpp	/^  typedef color_type *pointer;$/;"	t	struct:GreyscalePixelTraits
pointer	src/ui/event/poll/WaylandQueue.hpp	/^  struct wl_pointer *pointer = nullptr;$/;"	m	class:UI::final	typeref:struct:UI::final::wl_pointer
pointer	src/util/CastIterator.hpp	/^  typedef VT *pointer;$/;"	t	class:CastIterator
pointer	src/util/LightString.hxx	/^	typedef typename StringPointer<T>::pointer pointer;$/;"	t	class:LightString
pointer	src/util/QuadTree.hxx	/^		typedef T *pointer;$/;"	t	class:iterator
pointer	src/util/QuadTree.hxx	/^		typedef const T *pointer;$/;"	t	class:const_iterator
pointer	src/util/SliceAllocator.hxx	/^	typedef T *pointer;$/;"	t	class:GlobalSliceAllocator
pointer	src/util/SliceAllocator.hxx	/^	typedef T *pointer;$/;"	t	class:SliceAllocator
pointer	src/util/StringBuilder.hxx	/^	typedef T *pointer;$/;"	t	class:StringBuilder
pointer	src/util/StringParser.hxx	/^	typedef T *pointer;$/;"	t	class:StringParser
pointer_listener	src/ui/event/poll/WaylandQueue.cpp	/^static constexpr struct wl_pointer_listener pointer_listener = {$/;"	m	namespace:UI	typeref:struct:UI::wl_pointer_listener	file:
pointer_position	src/ui/event/poll/WaylandQueue.hpp	/^  IntPoint2D pointer_position = {0, 0};$/;"	m	class:UI::final
points	src/Airspace/AirspaceParser.cpp	/^  std::vector<GeoPoint> points;$/;"	m	struct:TempAirspaceType	file:
points	src/Computer/ThermalLocator.hpp	/^  Point points[TLOCATOR_NMAX];$/;"	m	class:ThermalLocator
points	src/Dialogs/Plane/PolarShapeEditWidget.hpp	/^  PointEditor points[3];$/;"	m	class:PolarShapeEditWidget
points	src/Engine/Route/RoutePolar.hpp	/^  RoutePolarPoint points[ROUTEPOLAR_POINTS];$/;"	m	class:RoutePolar
points	src/Engine/Task/Solvers/TaskMacCready.hpp	/^  StaticArray<TaskPoint *, MAX_SIZE> points;$/;"	m	class:TaskMacCready
points	src/MapWindow/MapWindowGlideRange.cpp	/^  BulkPixelPointVector points;$/;"	m	struct:ProjectedFans	file:
points	src/Polar/Shape.hpp	/^  std::array<PolarPoint, 3> points;$/;"	m	struct:PolarShape
points	src/Renderer/RotatedPolygonRenderer.hpp	/^  const BulkPixelPoint *points;$/;"	m	class:RotatedPolygonRenderer
points	src/Renderer/TrailRenderer.hpp	/^  AllocatedArray<BulkPixelPoint> points;$/;"	m	class:TrailRenderer
points	src/Topography/ShapeRenderer.hpp	/^  AllocatedArray<BulkPixelPoint> points;$/;"	m	class:ShapeRenderer
points	src/Topography/XShape.hpp	/^  GeoPoint *points;$/;"	m	class:XShape
points	src/Topography/XShape.hpp	/^  ShapePoint *points;$/;"	m	class:XShape
points	src/UIUtil/TrackingGestureManager.hpp	/^  PointVector points;$/;"	m	class:TrackingGestureManager
polar	src/Computer/Settings.hpp	/^  PolarSettings polar;$/;"	m	struct:ComputerSettings
polar	src/Engine/GlideSolvers/GlidePolar.cpp	/^  const GlidePolar &polar;$/;"	m	class:final	file:
polar	src/Engine/GlideSolvers/GlidePolar.hpp	/^  PolarCoefficients polar;$/;"	m	class:GlidePolar
polar_cruise	src/Engine/Route/RoutePolars.hpp	/^  RoutePolar polar_cruise;$/;"	m	class:RoutePolars
polar_glide	src/Engine/Route/RoutePolars.hpp	/^  RoutePolar polar_glide;$/;"	m	class:RoutePolars
polar_index	src/Engine/Route/RouteLink.hpp	/^  unsigned polar_index;$/;"	m	struct:RouteLink
polar_name	src/Plane/Plane.hpp	/^  StaticString<32> polar_name;$/;"	m	struct:Plane
polar_settings	src/Dialogs/Settings/dlgBasicSettings.cpp	/^  PolarSettings &polar_settings;$/;"	m	class:final	file:
polar_shape	src/Plane/Plane.hpp	/^  PolarShape polar_shape;$/;"	m	struct:Plane
polaroffsetangle	src/Topography/shapelib/mapserver.h	/^    double polaroffsetpixel, polaroffsetangle;$/;"	m	struct:styleObj
polaroffsetpixel	src/Topography/shapelib/mapserver.h	/^    double polaroffsetpixel, polaroffsetangle;$/;"	m	struct:styleObj
poll_backend	src/event/Loop.hxx	/^	EventPollBackend poll_backend;$/;"	m	class:final
poll_events	src/Audio/ALSAPCMPlayer.hpp	/^  std::forward_list<SocketEvent> poll_events;$/;"	m	class:ALSAPCMPlayer
poll_events	src/event/PollBackend.hxx	/^	std::vector<pollfd> poll_events;$/;"	m	class:PollBackend
poly	src/Topography/shapelib/mapserver.h	/^    lineObj *poly;$/;"	m	struct:__anon37
polygon_border_color	src/Look/ThermalAssistantLook.hpp	/^  Color polygon_border_color;$/;"	m	struct:ThermalAssistantLook
polygon_brush	src/Look/ThermalAssistantLook.hpp	/^  Brush polygon_brush;$/;"	m	struct:ThermalAssistantLook
polygon_buffer	src/ui/canvas/memory/RasterCanvas.hpp	/^  AllocatedArray<int> polygon_buffer;$/;"	m	class:RasterCanvas
polygon_fill_color	src/Look/ThermalAssistantLook.hpp	/^  Color polygon_fill_color;$/;"	m	struct:ThermalAssistantLook
polygon_pen	src/Look/ThermalAssistantLook.hpp	/^  Pen plane_pen, polygon_pen;$/;"	m	struct:ThermalAssistantLook
polyline_lengths	src/Topography/shapelib/mapserver.h	/^  struct polyline_lengths {$/;"	s
polys	src/Gauge/GaugeVario.hpp	/^  BulkPixelPoint polys[(gmax * 2 + 1) * 3];$/;"	m	class:GaugeVario
pop	src/util/OverwritingRingBuffer.hpp	/^  T pop() {$/;"	f	class:TrivialOverwritingRingBuffer
pop	src/util/ReservablePriorityQueue.hpp	/^  void pop() {$/;"	f	class:reservable_priority_queue
pop_front	src/util/StringParser.hxx	/^	value_type pop_front() {$/;"	f	class:StringParser
popup	src/MainWindow.hpp	/^  PopupMessage *popup = nullptr;$/;"	m	class:MainWindow
popup_message_position	src/UISettings.hpp	/^  } popup_message_position;$/;"	m	struct:UISettings	typeref:class:UISettings::PopupMessagePosition
popup_msg_position_list	src/Dialogs/Settings/Panels/LayoutConfigPanel.cpp	/^static constexpr StaticEnumChoice popup_msg_position_list[] = {$/;"	v	file:
port	src/Device/Descriptor.hpp	/^  std::unique_ptr<DumpPort> port;$/;"	m	class:final
port	src/Device/Driver/ATR833.cpp	/^  Port &port;$/;"	m	class:final	file:
port	src/Device/Driver/AirControlDisplay.cpp	/^  Port &port;$/;"	m	class:ACDDevice	file:
port	src/Device/Driver/AltairPro.cpp	/^  Port &port;$/;"	m	class:AltairProDevice	file:
port	src/Device/Driver/BlueFly/Internal.hpp	/^  Port &port;$/;"	m	class:BlueFlyDevice
port	src/Device/Driver/BorgeltB50.cpp	/^  Port &port;$/;"	m	class:B50Device	file:
port	src/Device/Driver/CAI302/Internal.hpp	/^  Port &port;$/;"	m	class:CAI302Device
port	src/Device/Driver/CaiGpsNav.cpp	/^  Port &port;$/;"	m	class:CaiGpsNavDevice	file:
port	src/Device/Driver/CaiLNav.cpp	/^  Port &port;$/;"	m	class:final	file:
port	src/Device/Driver/EW.cpp	/^  Port &port;$/;"	m	class:EWDevice	file:
port	src/Device/Driver/EWMicroRecorder.cpp	/^  Port &port;$/;"	m	class:EWMicroRecorderDevice	file:
port	src/Device/Driver/FLARM/Device.hpp	/^  Port &port;$/;"	m	class:FlarmDevice
port	src/Device/Driver/FlymasterF1.cpp	/^  Port &port;$/;"	m	class:FlymasterF1Device	file:
port	src/Device/Driver/Flytec/Device.hpp	/^  Port &port;$/;"	m	class:FlytecDevice
port	src/Device/Driver/IMI/Internal.hpp	/^  Port &port;$/;"	m	class:IMIDevice
port	src/Device/Driver/KRT2.cpp	/^  Port &port;$/;"	m	class:final	file:
port	src/Device/Driver/LX/Internal.hpp	/^  Port &port;$/;"	m	class:LXDevice
port	src/Device/Driver/LX/Protocol.hpp	/^    Port &port;$/;"	m	class:LX::CRCWriter
port	src/Device/Driver/OpenVario.cpp	/^  Port &port;$/;"	m	class:OpenVarioDevice	file:
port	src/Device/Driver/Vaulter.cpp	/^  Port &port;$/;"	m	class:VaulterDevice	file:
port	src/Device/Driver/Vega/Internal.hpp	/^  Port &port;$/;"	m	class:VegaDevice
port	src/Device/Driver/Volkslogger/Internal.hpp	/^  Port &port;$/;"	m	class:VolksloggerDevice
port	src/Device/Driver/Westerboer.cpp	/^  Port &port;$/;"	m	class:WesterboerDevice	file:
port	src/Device/Driver/XCOM760.cpp	/^  Port &port;$/;"	m	class:XCOM760Device	file:
port	src/Device/Driver/XCVario.cpp	/^  Port &port;$/;"	m	class:XVCDevice	file:
port	src/Device/Port/DumpPort.hpp	/^  std::unique_ptr<Port> port;$/;"	m	class:final
port	src/Device/Port/K6BtPort.hpp	/^  std::unique_ptr<Port> port;$/;"	m	class:K6BtPort
port	src/Device/Util/NMEAReader.hpp	/^  Port &port;$/;"	m	class:PortNMEAReader
port	src/Replay/NmeaReplay.hpp	/^  NullPort port;$/;"	m	class:NmeaReplay
port	src/event/net/cares/SimpleResolver.cxx	/^	:handler(_handler), port(_port)$/;"	f	namespace:Cares
port	src/event/net/cares/SimpleResolver.hxx	/^	const unsigned port;$/;"	m	class:Cares::final
port	src/net/IPv6Address.hxx	/^			     port, scope_id) {}$/;"	m	class:IPv6Address
port_is_nano	src/Device/Driver/LX/Internal.hpp	/^  const bool port_is_nano;$/;"	m	class:LXDevice
port_listener	src/Device/Descriptor.hpp	/^  PortListener *const port_listener;$/;"	m	class:final
port_type	src/Device/Config.hpp	/^  PortType port_type;$/;"	m	struct:DeviceConfig
port_type_strings	src/Profile/DeviceConfig.cpp	/^static const char *const port_type_strings[] = {$/;"	v	file:
port_types	src/Dialogs/Device/DeviceEditWidget.cpp	/^} port_types[] = {$/;"	v	typeref:struct:__anon3	file:
pos	src/MapWindow/GlueMapWindow.hpp	/^  unsigned int pos;$/;"	m	class:OffsetHistory
pos	src/Renderer/AirspaceLabelList.hpp	/^    GeoPoint pos;$/;"	m	struct:AirspaceLabelList::Label
pos_	src/Terrain/jasper/jas_stream.h	/^	uint_fast32_t pos_;$/;"	m	struct:__anon99
pos_ds_size	src/Device/Driver/Volkslogger/vlconv.cpp	/^const int  pos_ds_size[max_bfv+1][2] = {$/;"	v
posigraph_driver	src/Device/Driver/PosiGraph.cpp	/^const struct DeviceRegister posigraph_driver = {$/;"	v	typeref:struct:DeviceRegister
position	src/Device/Driver/LX/LXN.hpp	/^    const struct Position *position;$/;"	m	union:LXN::Packet	typeref:struct:LXN::Packet::Position
position	src/Dialogs/FileManager.cpp	/^    int64_t size, position;$/;"	m	struct:ManagedFileListWidget::DownloadStatus	file:
position	src/Topography/shapelib/mapserver.h	/^    int position; \/* for embeded legends *\/$/;"	m	struct:__anon48
position	src/Topography/shapelib/mapserver.h	/^    int position; \/* for embeded scalebars *\/$/;"	m	struct:__anon47
position	src/Topography/shapelib/mapserver.h	/^    int position; \/*moved from symbolObj in version 6.0*\/$/;"	m	struct:styleObj
position	src/Topography/shapelib/mapserver.h	/^    int position;$/;"	m	struct:labelObj
position	src/Widget/ManagedWidget.hpp	/^  PixelRect position;$/;"	m	class:ManagedWidget
position	src/Widget/PagerWidget.hpp	/^  PixelRect position;$/;"	m	class:PagerWidget
position	src/Widget/RowFormWidget.hpp	/^    PixelRect position;$/;"	m	struct:RowFormWidget::Row
position	src/ui/window/Window.hpp	/^  PixelPoint position;$/;"	m	class:Window
position_type	src/util/QuadTree.hxx	/^	typedef int position_type;$/;"	t	class:QuadTree
positions	src/InfoBoxes/InfoBoxLayout.hpp	/^    PixelRect positions[InfoBoxSettings::Panel::MAX_CONTENTS];$/;"	m	struct:InfoBoxLayout::Layout
postlabelcache	src/Topography/shapelib/mapserver.h	/^    int labelcache, postlabelcache; \/* on or off *\/$/;"	m	struct:layerObj
postlabelcache	src/Topography/shapelib/mapserver.h	/^    int postlabelcache;$/;"	m	struct:__anon47
postlabelcache	src/Topography/shapelib/mapserver.h	/^    int postlabelcache;$/;"	m	struct:__anon48
postponed_patterns	src/Form/DataField/File.hpp	/^  PatternList postponed_patterns;$/;"	m	class:final
postponed_sort	src/Form/DataField/File.hpp	/^  bool postponed_sort;$/;"	m	class:final
postponed_value	src/Form/DataField/File.hpp	/^  AllocatedPath postponed_value;$/;"	m	class:final
power_off_location	src/NMEA/FlyingState.hpp	/^  GeoPoint power_off_location;$/;"	m	struct:FlyingState
power_off_time	src/NMEA/FlyingState.hpp	/^  double power_off_time;$/;"	m	struct:FlyingState
power_on_location	src/NMEA/FlyingState.hpp	/^  GeoPoint power_on_location;$/;"	m	struct:FlyingState
power_on_time	src/NMEA/FlyingState.hpp	/^  double power_on_time;$/;"	m	struct:FlyingState
power_plant_icon	src/Look/WaypointLook.hpp	/^  MaskedIcon tower_icon, power_plant_icon, tunnel_icon, thermal_hotspot_icon;$/;"	m	struct:WaypointLook
powered	src/NMEA/FlyingState.hpp	/^  bool powered;$/;"	m	struct:FlyingState
powered_at	src/Computer/FlyingComputer.hpp	/^  GeoPoint powered_at;$/;"	m	class:FlyingComputer
powered_since	src/Computer/FlyingComputer.hpp	/^  double powered_since;$/;"	m	class:FlyingComputer
ppm	src/Terrain/jasper/jpc/jpc_cs.h	/^	jpc_ppm_t ppm;$/;"	m	union:__anon155
ppmseqno	src/Terrain/jasper/jpc/jpc_dec.h	/^	unsigned ppmseqno;$/;"	m	struct:__anon129
ppmstab	src/Terrain/jasper/jpc/jpc_dec.h	/^	jpc_ppxstab_t *ppmstab;$/;"	m	struct:__anon129
ppt	src/Terrain/jasper/jpc/jpc_cs.h	/^	jpc_ppt_t ppt;$/;"	m	union:__anon155
pptstab	src/Terrain/jasper/jpc/jpc_dec.h	/^	jpc_ppxstab_t *pptstab;$/;"	m	struct:__anon127
prcheightexpn	src/Terrain/jasper/jpc/jpc_dec.h	/^	unsigned prcheightexpn;$/;"	m	struct:__anon125
prcheightexpn	src/Terrain/jasper/jpc/jpc_t2cod.h	/^	unsigned prcheightexpn;$/;"	m	struct:__anon113
prcheightexpns	src/Terrain/jasper/jpc/jpc_dec.h	/^	uint_fast8_t prcheightexpns[JPC_MAXRLVLS];$/;"	m	struct:__anon119
prclyrnos	src/Terrain/jasper/jpc/jpc_t2cod.h	/^	unsigned *prclyrnos;$/;"	m	struct:__anon113
prcno	src/Terrain/jasper/jpc/jpc_t2cod.h	/^	unsigned prcno;$/;"	m	struct:__anon115
prcs	src/Terrain/jasper/jpc/jpc_dec.h	/^	jpc_dec_prc_t *prcs;$/;"	m	struct:__anon124
prcwidthexpn	src/Terrain/jasper/jpc/jpc_dec.h	/^	unsigned prcwidthexpn;$/;"	m	struct:__anon125
prcwidthexpn	src/Terrain/jasper/jpc/jpc_t2cod.h	/^	unsigned prcwidthexpn;$/;"	m	struct:__anon113
prcwidthexpns	src/Terrain/jasper/jpc/jpc_dec.h	/^	uint_fast8_t prcwidthexpns[JPC_MAXRLVLS];$/;"	m	struct:__anon119
pre_takeoff_buffer	src/Logger/LoggerImpl.hpp	/^  OverwritingRingBuffer<PreTakeoffBuffer, PRETAKEOFF_BUFFER_MAX> pre_takeoff_buffer;$/;"	m	class:LoggerImpl
prec	src/Terrain/jasper/jas_image.h	/^	unsigned prec;$/;"	m	struct:__anon102
prec	src/Terrain/jasper/jpc/jpc_cs.h	/^	uint_fast8_t prec;$/;"	m	struct:__anon136
prec	src/Terrain/jasper/jpc/jpc_dec.h	/^	uint_fast16_t prec;$/;"	m	struct:__anon128
prec_	src/Terrain/jasper/jas_image.h	/^	unsigned prec_;$/;"	m	struct:__anon100
predict	src/Engine/Contest/Settings.hpp	/^  bool predict;$/;"	m	struct:ContestSettings
predict	src/Engine/Contest/Solvers/TriangleContest.cpp	/^   predict(_predict)$/;"	f
predict	src/Engine/Contest/Solvers/TriangleContest.hpp	/^  const bool predict;$/;"	m	class:TriangleContest
predict_wind_drift	src/Engine/GlideSolvers/GlideSettings.hpp	/^  bool predict_wind_drift;$/;"	m	struct:GlideSettings
predicted	src/Engine/Contest/Solvers/TraceManager.hpp	/^  TracePoint predicted;$/;"	m	class:TraceManager
predicted_index	src/Engine/Contest/Solvers/TraceManager.hpp	/^  static constexpr unsigned predicted_index = 0xffff;$/;"	m	class:TraceManager
prediction_time_filter	src/Engine/Airspace/AirspaceWarningManager.hpp	/^  double prediction_time_filter;$/;"	m	class:AirspaceWarningManager
prediction_time_glide	src/Engine/Airspace/AirspaceWarningManager.hpp	/^  double prediction_time_glide;$/;"	m	class:AirspaceWarningManager
prepared	src/Widget/PagerWidget.hpp	/^    bool prepared = false;$/;"	m	struct:PagerWidget::Child
prepared	src/Widget/PagerWidget.hpp	/^  bool initialised = false, prepared, visible;$/;"	m	class:PagerWidget
prepared	src/Widget/RowFormWidget.hpp	/^    bool initialised, prepared, shown;$/;"	m	struct:RowFormWidget::Row
preset_colors	src/Look/AirspaceLook.cpp	/^const RGB8Color AirspaceLook::preset_colors[] = {$/;"	m	class:AirspaceLook	file:
preset_colors	src/Look/AirspaceLook.hpp	/^  static const RGB8Color preset_colors[NUMAIRSPACECOLORS];$/;"	m	struct:AirspaceLook
press_use	src/Android/I2CbaroDevice.hpp	/^  DeviceConfig::PressureUse press_use;$/;"	m	class:final
press_use	src/Device/Config.hpp	/^  } press_use;$/;"	m	struct:DeviceConfig	typeref:class:DeviceConfig::PressureUse
pressed	src/Form/CheckBox.hpp	/^  bool checked, dragging, pressed;$/;"	m	class:CheckBoxControl
pressed	src/Form/Edit.hpp	/^  bool dragging = false, pressed = false;$/;"	m	class:WndProperty
pressed	src/Gauge/GaugeFLARM.cpp	/^   dragging(false), pressed(false)$/;"	f
pressed	src/Gauge/GaugeFLARM.cpp	/^  bool dragging, pressed;$/;"	m	class:SmallTrafficWindow	file:
pressed	src/Gauge/GaugeThermalAssistant.cpp	/^     dragging(false), pressed(false)$/;"	f	class:GaugeThermalAssistantWindow
pressed	src/Gauge/GaugeThermalAssistant.cpp	/^  bool dragging, pressed;$/;"	m	class:GaugeThermalAssistantWindow	file:
pressed	src/InfoBoxes/InfoBoxWindow.hpp	/^  bool pressed = false;$/;"	m	class:InfoBoxWindow
pressed	src/Look/CheckBoxLook.hpp	/^  } standard, focused, pressed, disabled;$/;"	m	struct:CheckBoxLook	typeref:struct:CheckBoxLook::StateLook
pressed	src/Look/DialogLook.hpp	/^    } pressed;$/;"	m	struct:DialogLook::__anon13	typeref:struct:DialogLook::__anon13::__anon16
pressed	src/ui/event/poll/linux/MergeMouse.hpp	/^  bool moved = false, pressed = false, released = false;$/;"	m	class:UI::final
pressed_background_color	src/Look/InfoBoxLook.hpp	/^  Color background_color, focused_background_color, pressed_background_color;$/;"	m	struct:InfoBoxLook
pressing	src/ui/event/poll/linux/Input.hpp	/^  bool pressing, releasing;$/;"	m	class:UI::final
pressure	src/Computer/Settings.hpp	/^  AtmosphericPressure pressure;$/;"	m	struct:ComputerSettings
pressure	src/Device/Driver/IMI/Protocol/Types.hpp	/^    IMIDWORD pressure:14;$/;"	m	struct:IMI::FixK
pressure	src/NMEA/Derived.hpp	/^  AtmosphericPressure pressure;$/;"	m	struct:DerivedInfo
pressure2altitude	src/Device/Driver/Volkslogger/vlapihlp.cpp	/^long pressure2altitude(unsigned druck) {$/;"	f
pressure_altitude	src/IGC/IGCFix.hpp	/^  int gps_altitude, pressure_altitude;$/;"	m	struct:IGCFix
pressure_altitude	src/Logger/LoggerImpl.hpp	/^    double pressure_altitude;$/;"	m	struct:LoggerImpl::PreTakeoffBuffer
pressure_altitude	src/NMEA/Info.hpp	/^  double pressure_altitude;$/;"	m	struct:NMEAInfo
pressure_altitude_available	src/Logger/LoggerImpl.hpp	/^    bool pressure_altitude_available;$/;"	m	struct:LoggerImpl::PreTakeoffBuffer
pressure_altitude_available	src/NMEA/Info.hpp	/^  Validity pressure_altitude_available;$/;"	m	struct:NMEAInfo
pressure_altitude_weak	src/NMEA/Info.hpp	/^  bool pressure_altitude_weak;$/;"	m	struct:NMEAInfo
pressure_available	src/Computer/Settings.hpp	/^  Validity pressure_available;$/;"	m	struct:ComputerSettings
pressure_available	src/NMEA/Derived.hpp	/^  Validity pressure_available;$/;"	m	struct:DerivedInfo
pressure_unit	src/Units/Settings.hpp	/^  Unit pressure_unit;$/;"	m	struct:UnitSetting
prev	src/Terrain/jasper/jpc/jpc_dec.h	/^	struct jpc_dec_seg_s *prev;$/;"	m	struct:jpc_dec_seg_s	typeref:struct:jpc_dec_seg_s::jpc_dec_seg_s
prev	src/util/IntrusiveList.hxx	/^	IntrusiveListNode *next, *prev;$/;"	m	struct:IntrusiveListNode
preview_bitmap	src/Dialogs/Weather/MapOverlayWidget.cpp	/^  Bitmap preview_bitmap;$/;"	m	class:final	file:
preview_widget	src/Dialogs/Weather/MapOverlayWidget.cpp	/^  ViewImageWidget *preview_widget;$/;"	m	class:final	file:
previews	src/Dialogs/Settings/dlgConfigInfoboxes.cpp	/^  StaticArray<InfoBoxPreview, InfoBoxSettings::Panel::MAX_CONTENTS> previews;$/;"	m	class:final	file:
previous	src/util/OverwritingRingBuffer.hpp	/^  static unsigned previous(unsigned i) {$/;"	f	class:TrivialOverwritingRingBuffer
previousBounds	src/Topography/shapelib/mapserver.h	/^    rectObj previousBounds; \/* bounds at previous iteration *\/$/;"	m	struct:__anon44
previous_button	src/Dialogs/Task/TargetDialog.cpp	/^    PixelRect previous_button, next_button;$/;"	m	struct:TargetWidget::Layout	file:
previous_button	src/Dialogs/Task/TargetDialog.cpp	/^  Button previous_button;$/;"	m	class:TargetWidget	file:
previous_button	src/Dialogs/Task/TaskPointDialog.cpp	/^  Button *previous_button, *next_button;$/;"	m	class:final	file:
previous_button	src/Dialogs/Waypoint/dlgWaypointDetails.cpp	/^    PixelRect previous_button, next_button;$/;"	m	struct:final::Layout	file:
previous_button	src/Dialogs/Waypoint/dlgWaypointDetails.cpp	/^  Button previous_button, next_button;$/;"	m	class:final	file:
previous_button	src/Dialogs/dlgAnalysis.cpp	/^    PixelRect details_button, previous_button, next_button, close_button;$/;"	m	struct:final::Layout	file:
previous_button	src/Dialogs/dlgAnalysis.cpp	/^  Button details_button, previous_button, next_button, close_button;$/;"	m	class:final	file:
previous_button	src/Widget/ArrowPagerWidget.hpp	/^    PixelRect previous_button, next_button;$/;"	m	struct:ArrowPagerWidget::Layout
previous_button	src/Widget/ArrowPagerWidget.hpp	/^  Button previous_button, next_button;$/;"	m	class:ArrowPagerWidget
previous_is_first	src/Engine/Task/Stats/CommonStats.hpp	/^  bool previous_is_first;$/;"	m	class:CommonStats
previous_item_button	src/Gauge/BigTrafficWidget.cpp	/^  Button previous_item_button, next_item_button;$/;"	m	struct:TrafficWidget::Windows	file:
prg	src/Terrain/jasper/jpc/jpc_cs.h	/^	uint_fast8_t prg;$/;"	m	struct:__anon140
prgord	src/Terrain/jasper/jpc/jpc_cs.h	/^	uint_fast8_t prgord;$/;"	m	struct:__anon146
prgord	src/Terrain/jasper/jpc/jpc_dec.h	/^	uint_fast8_t prgord;$/;"	m	struct:__anon120
prgvolfirst	src/Terrain/jasper/jpc/jpc_t2cod.h	/^	bool prgvolfirst;$/;"	m	struct:__anon115
pri	src/Terrain/jasper/jp2/jp2_cod.h	/^	uint_fast8_t pri;$/;"	m	struct:__anon88
print	src/Device/Driver/Volkslogger/vlconv.cpp	/^  print(FILE *aus)$/;"	f	class:KOORD
print	src/Device/Driver/Volkslogger/vlconv.cpp	/^  print(int version, FILE *aus)$/;"	f	class:C_RECORD
print	src/Device/Driver/Volkslogger/vlconv.cpp	/^  print(int version, FILE *aus, const char *descr)$/;"	f	class:C2
print_g_record	src/Device/Driver/Volkslogger/grecord.cpp	/^print_g_record(FILE *datei, const uint8_t *puffer, size_t puflen)$/;"	f
priority	src/Engine/Route/AStar.hpp	/^    AStarPriorityValue priority;$/;"	m	struct:AStar::NodeValue
priority	src/Topography/shapelib/mapserver.h	/^    int priority;  \/* Priority level 1 to MS_MAX_LABEL_PRIORITY, default=1 *\/$/;"	m	struct:labelObj
priv	src/Dialogs/Device/FLARM/ConfigWidget.hpp	/^  unsigned baud, priv, thre, range, acft, log_int, notrack;$/;"	m	class:final
processGesture	src/Input/InputEvents.cpp	/^InputEvents::processGesture(const TCHAR *data)$/;"	f	class:InputEvents
processGlideComputer	src/Input/InputQueue.cpp	/^InputEvents::processGlideComputer(unsigned gce_id)$/;"	f	class:InputEvents
processGlideComputer_real	src/Input/InputEvents.cpp	/^InputEvents::processGlideComputer_real(unsigned gce_id)$/;"	f	class:InputEvents
processGo	src/Input/InputEvents.cpp	/^InputEvents::processGo(unsigned eventid)$/;"	f	class:InputEvents
processKey	src/Input/InputEvents.cpp	/^InputEvents::processKey(unsigned key_code)$/;"	f	class:InputEvents
processNmea	src/Input/InputQueue.cpp	/^InputEvents::processNmea(unsigned ne_id)$/;"	f	class:InputEvents
processNmea_real	src/Input/InputEvents.cpp	/^InputEvents::processNmea_real(unsigned ne_id)$/;"	f	class:InputEvents
processing	src/Topography/shapelib/mapserver.h	/^    char **processing;$/;"	m	struct:__anon57
processing	src/Topography/shapelib/mapserver.h	/^    char **processing;$/;"	m	struct:layerObj
processing_idx	src/Topography/shapelib/mapserver.h	/^    int *processing_idx;$/;"	m	struct:__anon57
product	src/Android/NativeView.hpp	/^  char product[20];$/;"	m	class:NativeView
product	src/NMEA/DeviceInfo.hpp	/^  NarrowString<16> product;$/;"	m	struct:DeviceInfo
product_type	src/Math/Line2D.hpp	/^  typedef typename Point::product_type product_type;$/;"	t	struct:Line2D
product_type	src/Math/Point2D.hpp	/^  typedef PT product_type;$/;"	t	struct:Point2D
progress	src/Dialogs/ProgressDialog.hpp	/^  ProgressWindow progress;$/;"	m	class:ProgressDialog
progress_bar	src/ProgressWindow.hpp	/^  ProgressBar progress_bar;$/;"	m	class:ProgressWindow
progress_bar_position	src/ProgressWindow.hpp	/^  PixelRect bottom_position, progress_bar_position;$/;"	m	class:ProgressWindow
progress_position	src/Operation/ThreadedOperationEnvironment.hpp	/^    unsigned progress_range, progress_position;$/;"	m	struct:ThreadedOperationEnvironment::Data
progress_range	src/Operation/ThreadedOperationEnvironment.hpp	/^    unsigned progress_range, progress_position;$/;"	m	struct:ThreadedOperationEnvironment::Data
proj	src/Engine/Route/AirspaceRoute.cpp	/^  const FlatProjection &proj;$/;"	m	class:final	file:
proj	src/MapWindow/MapWindowGlideRange.cpp	/^  const MapWindowProjection &proj;$/;"	m	class:final	file:
proj	src/MapWindow/StencilMapCanvas.hpp	/^  const WindowProjection &proj;$/;"	m	class:StencilMapCanvas
projContext	src/Topography/shapelib/mapserver.h	/^    projectionContext* projContext;$/;"	m	struct:mapObj
project	src/Topography/shapelib/mapserver.h	/^    int project; \/* boolean variable, do we need to project this layer or not *\/$/;"	m	struct:layerObj
projected	src/Geo/SearchPoint.hpp	/^  bool projected = false;$/;"	m	class:SearchPoint
projection	src/Computer/WaveComputer.hpp	/^  FlatProjection projection;$/;"	m	class:WaveComputer
projection	src/Engine/Airspace/AirspaceSorter.cpp	/^  const FlatProjection &projection;$/;"	m	class:final	file:
projection	src/Engine/Route/ReachFan.hpp	/^  FlatProjection projection;$/;"	m	class:ReachFan
projection	src/Engine/Route/ReachFanParms.hpp	/^  const FlatProjection &projection;$/;"	m	struct:ReachFanParms
projection	src/Engine/Route/RoutePlanner.hpp	/^  FlatProjection projection;$/;"	m	class:RoutePlanner
projection	src/Geo/GeoEllipse.hpp	/^  FlatProjection projection;$/;"	m	class:GeoEllipse
projection	src/MapWindow/MapCanvas.hpp	/^  const Projection &projection;$/;"	m	class:MapCanvas
projection	src/MapWindow/TargetMapWindow.hpp	/^  MapWindowProjection projection;$/;"	m	class:TargetMapWindow
projection	src/Renderer/WaypointRenderer.cpp	/^  const MapWindowProjection &projection;$/;"	m	class:final	file:
projection	src/Terrain/RasterMap.hpp	/^  RasterProjection projection;$/;"	m	class:RasterMap
projection	src/Topography/shapelib/mapserver.h	/^    projectionObj projection; \/* projection information for output map *\/$/;"	m	struct:mapObj
projection	src/Topography/shapelib/mapserver.h	/^    projectionObj projection; \/* projection information for the layer *\/$/;"	m	struct:layerObj
projection_matrix	src/ui/canvas/opengl/Globals.cpp	/^glm::mat4 projection_matrix;$/;"	m	namespace:OpenGL	file:
properties	src/Dialogs/Task/TaskPointDialog.cpp	/^    PixelRect map, properties;$/;"	m	struct:final::Layout	file:
properties	src/Topography/shapelib/mapserver.h	/^      sortByProperties* properties;$/;"	m	struct:__anon56
protected_manager	src/Computer/WarningComputer.hpp	/^  ProtectedAirspaceWarningManager protected_manager;$/;"	m	class:WarningComputer
protected_route_planner	src/Computer/RouteComputer.hpp	/^  ProtectedRoutePlanner protected_route_planner;$/;"	m	class:RouteComputer
protected_task_manager	src/Components.cpp	/^ProtectedTaskManager *protected_task_manager;$/;"	v
ps	src/ui/canvas/gdi/PaintCanvas.hpp	/^  PAINTSTRUCT ps;$/;"	m	class:PaintCanvas
psLeftNode	src/Topography/shapelib/mapserver.h	/^    struct _FilterNode  *psLeftNode;$/;"	m	struct:_FilterNode	typeref:struct:_FilterNode::_FilterNode
psRightNode	src/Topography/shapelib/mapserver.h	/^    struct _FilterNode  *psRightNode;$/;"	m	struct:_FilterNode	typeref:struct:_FilterNode::_FilterNode
pszCurrentRecord	src/Topography/shapelib/mapshape.h	/^    char  *pszCurrentRecord;$/;"	m	struct:__anon76
pszHeader	src/Topography/shapelib/mapshape.h	/^    char  *pszHeader;$/;"	m	struct:__anon76
pszSRS	src/Topography/shapelib/mapserver.h	/^    char                *pszSRS;$/;"	m	struct:_FilterNode
pszStringField	src/Topography/shapelib/mapshape.h	/^    char  *pszStringField;$/;"	m	struct:__anon76
pszValue	src/Topography/shapelib/mapserver.h	/^    char                *pszValue;$/;"	m	struct:_FilterNode
pt2Event	src/Input/InputConfig.hpp	/^  typedef void (*pt2Event)(const TCHAR *);$/;"	t	struct:InputConfig
pt2Event	src/Input/InputEvents.hpp	/^typedef void (*pt2Event)(const TCHAR *);$/;"	t
pt2Event	src/Input/InputLookup.hpp	/^typedef void (*pt2Event)(const TCHAR *);$/;"	t
pt2Event	src/Input/InputQueue.hpp	/^typedef void (*pt2Event)(const TCHAR *);$/;"	t
pt_scale	src/Screen/Layout.cpp	/^  unsigned pt_scale = 1024;$/;"	m	namespace:Layout	file:
ptr	src/ui/event/shared/Event.hpp	/^  void *ptr;$/;"	m	struct:UI::Event
ptr	src/zzip/plugin.h	/^    struct { void* padding[8]; } ptr;$/;"	m	union:_zzip_plugin_io	typeref:struct:_zzip_plugin_io::__anon185
ptr_	src/Terrain/jasper/jas_stream.h	/^	jas_uchar *ptr_;$/;"	m	struct:__anon97
ptr_field	src/Android/NativeBMP085Listener.cpp	/^static jfieldID ptr_field;$/;"	m	namespace:NativeBMP085Listener	file:
ptr_field	src/Android/NativeI2CbaroListener.cpp	/^static jfieldID ptr_field;$/;"	m	namespace:NativeI2CbaroListener	file:
ptr_field	src/Android/NativeInputListener.cpp	/^static jfieldID ptr_field;$/;"	m	namespace:NativeInputListener	file:
ptr_field	src/Android/NativeLeScanCallback.cpp	/^static jfieldID ptr_field;$/;"	m	namespace:NativeLeScanCallback	file:
ptr_field	src/Android/NativeNunchuckListener.cpp	/^static jfieldID ptr_field;$/;"	m	namespace:NativeNunchuckListener	file:
ptr_field	src/Android/NativePortListener.cpp	/^static jfieldID ptr_field;$/;"	m	namespace:NativePortListener	file:
ptr_field	src/Android/NativeVoltageListener.cpp	/^static jfieldID ptr_field;$/;"	m	namespace:NativeVoltageListener	file:
public_position	src/ui/event/poll/linux/Input.hpp	/^  Position public_position;$/;"	m	class:UI::final
pure_glide_altitude_difference	src/Engine/GlideSolvers/GlideResult.hpp	/^  double pure_glide_altitude_difference;$/;"	m	struct:GlideResult
pure_glide_height	src/Engine/GlideSolvers/GlideResult.hpp	/^  double pure_glide_height;$/;"	m	struct:GlideResult
pure_glide_min_arrival_altitude	src/Engine/GlideSolvers/GlideResult.hpp	/^  double pure_glide_min_arrival_altitude;$/;"	m	struct:GlideResult
push	src/util/OverwritingRingBuffer.hpp	/^  void push(const T &value) {$/;"	f	class:TrivialOverwritingRingBuffer
push_back	src/Engine/Trace/Trace.cpp	/^Trace::push_back(const TracePoint &point)$/;"	f	class:Trace
push_back	src/util/StaticString.hxx	/^	bool push_back(value_type ch) {$/;"	f	class:StaticStringBase
push_back	src/util/TrivialArray.hxx	/^	void push_back(const_reference value) {$/;"	f	class:TrivialArray
put	src/Device/Driver/Volkslogger/vlapi2.cpp	/^VLAPI_DATA::DECLARATION::put(DBB *dbb) const$/;"	f	class:VLAPI_DATA::DECLARATION
put	src/Device/Driver/Volkslogger/vlapi2.cpp	/^VLAPI_DATA::PILOT::put(void * p) const$/;"	f	class:VLAPI_DATA::PILOT
put	src/Device/Driver/Volkslogger/vlapi2.cpp	/^void VLAPI_DATA::DCLWPT::put(void *p) const {$/;"	f	class:VLAPI_DATA::DCLWPT
put	src/Device/Driver/Volkslogger/vlapi2.cpp	/^void VLAPI_DATA::ROUTE::put(void *p) const {$/;"	f	class:VLAPI_DATA::ROUTE
put	src/Device/Driver/Volkslogger/vlapi2.cpp	/^void VLAPI_DATA::WPT::put(void *p) const {$/;"	f	class:VLAPI_DATA::WPT
putdata	src/Terrain/jasper/jp2/jp2_cod.h	/^	int (*putdata)(const jp2_box_t *box, jas_stream_t *out);$/;"	m	struct:jp2_boxops_s
putparms	src/Terrain/jasper/jpc/jpc_cs.h	/^	int (*putparms)(jpc_ms_t *ms, jpc_cstate_t *cstate, jas_stream_t *out);$/;"	m	struct:jpc_msops_s
q	src/Engine/PathSolvers/Dijkstra.hpp	/^  reservable_priority_queue<Value, std::vector<Value>, Rank> q;$/;"	m	class:Dijkstra
q	src/Engine/Route/AStar.hpp	/^  reservable_priority_queue<NodeValue, std::vector<NodeValue>, Rank> q;$/;"	m	class:AStar
qcc	src/Terrain/jasper/jpc/jpc_cs.h	/^	jpc_qcc_t qcc;$/;"	m	union:__anon155
qcd	src/Terrain/jasper/jpc/jpc_cs.h	/^	jpc_qcd_t qcd;$/;"	m	union:__anon155
qeval	src/Terrain/jasper/jpc/jpc_mqcod.h	/^	uint_least16_t qeval;$/;"	m	struct:jpc_mqstate_s
qmfb	src/Terrain/jasper/jpc/jpc_tsfb.h	/^	const jpc_qmfb2d_t *qmfb;$/;"	m	struct:__anon108
qmfbid	src/Terrain/jasper/jpc/jpc_cs.h	/^	uint_fast8_t qmfbid;$/;"	m	struct:__anon139
qmfbid	src/Terrain/jasper/jpc/jpc_dec.h	/^	uint_fast8_t qmfbid;$/;"	m	struct:__anon119
qnh	src/Device/Driver/Vega/Volatile.hpp	/^    unsigned qnh;$/;"	m	struct:Vega::VolatileData
qnh	src/Engine/Airspace/Airspaces.hpp	/^  AtmosphericPressure qnh;$/;"	m	class:Airspaces
qnh	src/NMEA/ExternalSettings.hpp	/^  AtmosphericPressure qnh;$/;"	m	struct:ExternalSettings
qnh	src/Weather/ParsedMETAR.hpp	/^  AtmosphericPressure qnh;$/;"	m	struct:ParsedMETAR
qnh_available	src/NMEA/ExternalSettings.hpp	/^  Validity qnh_available;$/;"	m	struct:ExternalSettings
qnh_available	src/Weather/ParsedMETAR.hpp	/^  bool qnh_available;$/;"	m	struct:ParsedMETAR
qntsty	src/Terrain/jasper/jpc/jpc_cs.h	/^	uint_fast8_t qntsty;$/;"	m	struct:__anon143
qsty	src/Terrain/jasper/jpc/jpc_dec.h	/^	uint_fast8_t qsty;$/;"	m	struct:__anon119
quad4	src/ui/canvas/memory/Murphy.hpp	/^  bool quad4;$/;"	m	struct:MurphyIterator
quality	src/Computer/Wind/CirclingWind.hpp	/^    unsigned quality;$/;"	m	struct:CirclingWind::Result
quality	src/Computer/Wind/MeasurementList.hpp	/^  unsigned quality;$/;"	m	struct:WindMeasurement
quality	src/Computer/Wind/WindEKFGlue.hpp	/^    int quality;$/;"	m	struct:WindEKFGlue::Result
quantisation_effective	src/Terrain/RasterRenderer.hpp	/^  unsigned quantisation_effective;$/;"	m	class:RasterRenderer
quantisation_pixels	src/Terrain/RasterRenderer.hpp	/^  unsigned quantisation_pixels = 2;$/;"	m	class:RasterRenderer
query	src/Topography/shapelib/mapserver.h	/^    queryObj query;$/;"	m	struct:mapObj
queryMapObj	src/Topography/shapelib/mapserver.h	/^  } queryMapObj;$/;"	t	typeref:struct:__anon34
queryObj	src/Topography/shapelib/mapserver.h	/^  } queryObj;$/;"	t	typeref:struct:__anon33
query_iterator	src/Cloud/Client.hpp	/^  typedef Tree::const_query_iterator query_iterator;$/;"	t	class:CloudClientContainer
query_iterator	src/Cloud/Thermal.hpp	/^  typedef Tree::const_query_iterator query_iterator;$/;"	t	class:CloudThermalContainer
query_iterator_range	src/Cloud/Client.hpp	/^  typedef boost::iterator_range<query_iterator> query_iterator_range;$/;"	t	class:CloudClientContainer
query_iterator_range	src/Cloud/Thermal.hpp	/^  typedef boost::iterator_range<query_iterator> query_iterator_range;$/;"	t	class:CloudThermalContainer
queryformat	src/Topography/shapelib/mapserver.h	/^    char *queryformat; \/* what format is the query to be returned, given as a MIME type *\/$/;"	m	struct:__anon35
querymap	src/Topography/shapelib/mapserver.h	/^    queryMapObj querymap;$/;"	m	struct:mapObj
queue	src/Audio/AndroidPCMPlayer.hpp	/^  SLES::AndroidSimpleBufferQueue queue;$/;"	m	class:AndroidPCMPlayer
queue	src/Audio/SLES/AndroidSimpleBufferQueue.hpp	/^    SLAndroidSimpleBufferQueueItf queue;$/;"	m	class:SLES::AndroidSimpleBufferQueue
queue	src/Tracking/SkyLines/Glue.hpp	/^  Queue *queue = nullptr;$/;"	m	class:SkyLinesTracking::Glue
queue	src/Tracking/SkyLines/Queue.hpp	/^  OverwritingRingBuffer<FixPacket, 256> queue;$/;"	m	class:SkyLinesTracking::Queue
queue	src/net/http/DownloadManager.cpp	/^  std::list<Item> queue;$/;"	m	class:final	file:
queue	src/ui/event/android/Loop.hpp	/^  EventQueue &queue;$/;"	m	class:UI::EventLoop
queue	src/ui/event/poll/Loop.hpp	/^  EventQueue &queue;$/;"	m	class:UI::EventLoop
queue	src/ui/event/poll/WaylandQueue.hpp	/^  EventQueue &queue;$/;"	m	class:UI::final
queue	src/ui/event/poll/X11Queue.hpp	/^  EventQueue &queue;$/;"	m	class:UI::X11EventQueue
queue	src/ui/event/poll/libinput/LibInputHandler.hpp	/^  EventQueue &queue;$/;"	m	class:UI::final
queue	src/ui/event/poll/linux/Input.hpp	/^  EventQueue &queue;$/;"	m	class:UI::final
queue	src/ui/event/sdl/Loop.hpp	/^  EventQueue &queue;$/;"	m	class:UI::EventLoop
queue	src/ui/event/windows/Loop.hpp	/^  EventQueue &queue;$/;"	m	class:UI::EventLoop
queued_data	src/Audio/PCMBufferDataSource.hpp	/^  std::list<PCMData> queued_data;$/;"	m	class:PCMBufferDataSource
quit	src/Dialogs/StartupDialog.cpp	/^  Button quit;$/;"	m	class:final	file:
quit	src/ui/event/android/Queue.hpp	/^  bool quit = false;$/;"	m	class:UI::EventQueue
quit	src/ui/event/poll/Queue.hpp	/^  bool quit;$/;"	m	class:DisplayOrientation::final
quit	src/ui/event/sdl/Queue.hpp	/^  bool quit;$/;"	m	class:UI::EventQueue
quit_button	src/Dialogs/SimulatorPromptWindow.hpp	/^  Button quit_button;$/;"	m	class:final
r	src/system/EventPipe.hxx	/^	UniqueSocketDescriptor r, w;$/;"	m	class:EventPipe
r	src/ui/canvas/PortableColor.hpp	/^  uint8_t b, g, r;$/;"	m	class:BGR8Color
r	src/ui/canvas/PortableColor.hpp	/^  uint8_t r, g, b;$/;"	m	class:RGB8Color
r	src/ui/canvas/opengl/Color.hpp	/^  Component r, g, b, a;$/;"	m	class:Color
r	src/util/MD5.cpp	/^static constexpr uint32_t r[64] = {$/;"	v	file:
r_cos	src/Geo/Flat/FlatProjection.hpp	/^  double r_cos;$/;"	m	class:FlatProjection
rad_areas	src/Weather/PCMet/Images.cpp	/^static constexpr PCMet::ImageArea rad_areas[] = {$/;"	v	file:
rad_lokal_areas	src/Weather/PCMet/Images.cpp	/^static constexpr PCMet::ImageArea rad_lokal_areas[] = {$/;"	v	file:
radar_brush	src/Look/FlarmTrafficLook.hpp	/^  Brush radar_brush;$/;"	m	struct:FlarmTrafficLook
radar_color	src/Look/FlarmTrafficLook.hpp	/^  Color radar_color;$/;"	m	struct:FlarmTrafficLook
radar_mid	src/Gauge/FlarmTrafficWindow.hpp	/^  PixelPoint radar_mid;$/;"	m	class:FlarmTrafficWindow
radar_pen	src/Look/FlarmTrafficLook.hpp	/^  Pen plane_pen, radar_pen;$/;"	m	struct:FlarmTrafficLook
radial	src/Dialogs/Task/TargetDialog.cpp	/^    PixelRect range, radial, ete, delta_t, speed_remaining, speed_achieved;$/;"	m	struct:TargetWidget::Layout	file:
radial	src/Dialogs/Task/TargetDialog.cpp	/^  WndProperty range, radial, ete, delta_t, speed_remaining, speed_achieved;$/;"	m	class:TargetWidget	file:
radial	src/Engine/Task/Ordered/Points/AATPoint.hpp	/^  Angle radial;$/;"	m	struct:RangeAndRadial
radio	src/Airspace/AirspaceParser.cpp	/^  tstring radio;$/;"	m	struct:TempAirspaceType	file:
radio	src/Computer/Settings.hpp	/^  RadioSettings radio;$/;"	m	struct:ComputerSettings
radio	src/Engine/Airspace/AbstractAirspace.hpp	/^  tstring radio;$/;"	m	class:AbstractAirspace
radio_frequency	src/Engine/Waypoint/Waypoint.hpp	/^  RadioFrequency radio_frequency;$/;"	m	struct:Waypoint
radius	src/Airspace/AirspaceParser.cpp	/^  double radius;$/;"	m	struct:TempAirspaceType	file:
radius	src/Device/Declaration.hpp	/^    unsigned radius;$/;"	m	struct:Declaration::TurnPoint
radius	src/Engine/Task/ObservationZones/CylinderZone.hpp	/^  double radius;$/;"	m	class:CylinderZone
radius	src/Gauge/FlarmTrafficWindow.hpp	/^  unsigned radius;$/;"	m	class:FlarmTrafficWindow
radius	src/Gauge/ThermalAssistantRenderer.hpp	/^  unsigned radius;$/;"	m	class:ThermalAssistantRenderer
radius1	src/Task/TaskFileSeeYou.cpp	/^  double radius1, radius2, max_altitude;$/;"	m	struct:SeeYouTurnpointInformation	file:
radius2	src/Task/TaskFileSeeYou.cpp	/^  double radius1, radius2, max_altitude;$/;"	m	struct:SeeYouTurnpointInformation	file:
radius_editable	src/Dialogs/Task/Widgets/CylinderZoneEditWidget.cpp	/^   radius_editable(_radius_editable) {}$/;"	f
radius_editable	src/Dialogs/Task/Widgets/CylinderZoneEditWidget.hpp	/^  const bool radius_editable;$/;"	m	class:CylinderZoneEditWidget
ramp	src/Terrain/TerrainSettings.hpp	/^  unsigned short ramp;$/;"	m	struct:TerrainRendererSettings
range	src/Dialogs/Device/FLARM/ConfigWidget.hpp	/^  unsigned baud, priv, thre, range, acft, log_int, notrack;$/;"	m	class:final
range	src/Dialogs/Task/TargetDialog.cpp	/^    PixelRect range, radial, ete, delta_t, speed_remaining, speed_achieved;$/;"	m	struct:TargetWidget::Layout	file:
range	src/Dialogs/Task/TargetDialog.cpp	/^  WndProperty range, radial, ete, delta_t, speed_remaining, speed_achieved;$/;"	m	class:TargetWidget	file:
range	src/Engine/Contest/Solvers/Retrospective.hpp	/^    double range;$/;"	m	struct:Retrospective::NearWaypoint
range	src/Engine/Task/Ordered/Points/AATPoint.hpp	/^  double range;$/;"	m	struct:RangeAndRadial
range	src/MapWindow/Items/Builder.hpp	/^  double range;$/;"	m	class:MapItemListBuilder
range	src/Operation/ConsoleOperationEnvironment.hpp	/^  unsigned range;$/;"	m	class:ConsoleOperationEnvironment
range_and_radial	src/Dialogs/Task/TargetDialog.cpp	/^  RangeAndRadial range_and_radial;$/;"	m	class:TargetWidget	file:
rangeitem	src/Topography/shapelib/mapserver.h	/^    char *rangeitem;$/;"	m	struct:styleObj
rangeitemindex	src/Topography/shapelib/mapserver.h	/^    int rangeitemindex;$/;"	m	struct:styleObj
rasp	src/Dialogs/Weather/RASPDialog.cpp	/^  std::shared_ptr<RaspStore> rasp;$/;"	m	class:final	file:
rasp_colors	src/Weather/Rasp/RaspStyle.cpp	/^static constexpr ColorRamp rasp_colors[6][NUM_COLOR_RAMP_LEVELS] = {$/;"	v	file:
rasp_providers	src/Weather/Rasp/Providers.cpp	/^const RaspProvider rasp_providers[] = {$/;"	v
rasp_renderer	src/MapWindow/MapWindow.hpp	/^  std::unique_ptr<RaspRenderer> rasp_renderer;$/;"	m	class:MapWindow
rasp_store	src/MapWindow/MapWindow.hpp	/^  std::shared_ptr<RaspStore> rasp_store;$/;"	m	class:MapWindow
rasp_styles	src/Weather/Rasp/RaspStyle.cpp	/^const RaspStyle rasp_styles[] = {$/;"	v
raster_points	src/MapWindow/MapCanvas.hpp	/^  AllocatedArray<BulkPixelPoint> raster_points;$/;"	m	class:MapCanvas
raster_renderer	src/Terrain/TerrainRenderer.hpp	/^  RasterRenderer raster_renderer;$/;"	m	class:TerrainRenderer
raster_renderer	src/Weather/Rasp/RaspRenderer.hpp	/^  RasterRenderer raster_renderer;$/;"	m	class:RaspRenderer
raster_tile_cache	src/Terrain/Loader.hpp	/^  RasterTileCache &raster_tile_cache;$/;"	m	class:TerrainLoader
raster_tile_cache	src/Terrain/RasterMap.hpp	/^  RasterTileCache raster_tile_cache;$/;"	m	class:RasterMap
rate_limited_bl	src/Dialogs/Task/TargetDialog.cpp	/^  RateLimitedBlackboardListener rate_limited_bl;$/;"	m	class:TargetWidget	file:
rate_limiter	src/Dialogs/StatusPanels/SystemStatusPanel.hpp	/^  RateLimitedBlackboardListener rate_limiter;$/;"	m	class:final
ratio	src/Computer/WaveComputer.cpp	/^  double ratio, squared_distance;$/;"	m	struct:RatioAndDistance	file:
raw_16bit	src/Topography/shapelib/mapserver.h	/^      short *raw_16bit;$/;"	m	union:imageObj::__anon51
raw_byte	src/Topography/shapelib/mapserver.h	/^      unsigned char *raw_byte;$/;"	m	union:imageObj::__anon51
raw_float	src/Topography/shapelib/mapserver.h	/^      float *raw_float;$/;"	m	union:imageObj::__anon51
raw_points	src/Geo/ConvexHull/GrahamScan.hpp	/^  std::list<SearchPoint> raw_points;$/;"	m	class:GrahamScan
raw_vector	src/Geo/ConvexHull/GrahamScan.hpp	/^  SearchPointVector &raw_vector;$/;"	m	class:GrahamScan
rc	src/Dialogs/Task/TargetDialog.cpp	/^  PixelRect rc;$/;"	m	class:RowLayout	file:
rc	src/Form/ScrollBar.hpp	/^  PixelRect rc;$/;"	m	class:ScrollBar
rc	src/Form/TabDisplay.hpp	/^  PixelRect rc;$/;"	m	class:TabButton
rc	src/Form/TabMenuDisplay.hpp	/^    PixelRect rc;$/;"	m	struct:final::MainMenuButton
rc	src/Form/TabMenuDisplay.hpp	/^    PixelRect rc;$/;"	m	struct:final::SubMenuButton
rc	src/PopupMessage.hpp	/^  PixelRect rc; \/\/ maximum message size$/;"	m	class:PopupMessage
rc	src/Renderer/ChartRenderer.hpp	/^  PixelRect rc;$/;"	m	class:ChartRenderer
rc	src/Widget/TwoWidgets.hpp	/^  PixelRect rc;$/;"	m	class:TwoWidgets
rc_chart	src/Renderer/ChartRenderer.hpp	/^  PixelRect rc_chart;$/;"	m	class:ChartRenderer
rc_slider	src/Form/ScrollBar.hpp	/^  PixelRect rc_slider;$/;"	m	class:ScrollBar
reach	src/MapWindow/Items/MapItem.hpp	/^  ReachResult reach;$/;"	m	struct:ArrivalAltitudeMapItem
reach	src/Renderer/WaypointRenderer.cpp	/^  ReachResult reach;$/;"	m	struct:VisibleWaypoint	file:
reach_calc_mode	src/Engine/Route/Config.hpp	/^  ReachMode reach_calc_mode;$/;"	m	struct:RoutePlannerConfig
reach_clock	src/Computer/RouteComputer.hpp	/^  GPSClock reach_clock;$/;"	m	class:RouteComputer
reach_polar_mode	src/Engine/Route/Config.hpp	/^  Polar reach_polar_mode;$/;"	m	struct:RoutePlannerConfig
reach_polar_mode	src/Engine/Route/RoutePlanner.hpp	/^  RoutePlannerConfig::Polar reach_polar_mode;$/;"	m	class:RoutePlanner
reach_terrain	src/Engine/Route/RoutePlanner.hpp	/^  ReachFan reach_terrain;$/;"	m	class:RoutePlanner
reach_terrain_pen	src/Look/MapLook.hpp	/^  Pen reach_terrain_pen;$/;"	m	struct:MapLook
reach_terrain_pen_thick	src/Look/MapLook.hpp	/^  Pen reach_terrain_pen_thick;$/;"	m	struct:MapLook
reach_working	src/Engine/Route/RoutePlanner.hpp	/^  ReachFan reach_working;$/;"	m	class:RoutePlanner
reach_working_pen	src/Look/MapLook.hpp	/^  Pen reach_working_pen;$/;"	m	struct:MapLook
reach_working_pen_thick	src/Look/MapLook.hpp	/^  Pen reach_working_pen_thick;$/;"	m	struct:MapLook
reachable	src/Renderer/WaypointRenderer.cpp	/^  WaypointRenderer::Reachability reachable;$/;"	m	struct:VisibleWaypoint	file:
reachable_brush	src/Look/WaypointLook.hpp	/^  Brush reachable_brush, terrain_unreachable_brush, unreachable_brush;$/;"	m	struct:WaypointLook
reachable_landable	src/Engine/Task/Unordered/AbortTask.hpp	/^  bool reachable_landable;$/;"	m	class:AbortTask
read	src/java/InputStream.hxx	/^	static int read(JNIEnv *env, jobject is, jbyteArray buffer) {$/;"	f	class:Java::InputStream
read	src/zzip/plugin.h	/^    zzip_ssize_t (*read)(int fd, void* buf, zzip_size_t len);$/;"	m	struct:zzip_plugin_io
readFile	src/Input/InputEvents.cpp	/^InputEvents::readFile()$/;"	f	class:InputEvents
readTreeNode	src/Topography/shapelib/maptree.c	/^treeNodeObj *readTreeNode( SHPTreeHandle disktree )$/;"	f
read_	src/Terrain/jasper/jas_stream.h	/^	int (*read_)(jas_stream_obj_t *obj, char *buf, unsigned cnt);$/;"	m	struct:__anon96
read_method	src/java/InputStream.cxx	/^jmethodID Java::InputStream::read_method;$/;"	m	class:Java::InputStream	file:
read_method	src/java/InputStream.hxx	/^	static jmethodID close_method, read_method;$/;"	m	class:Java::InputStream
read_only	src/Form/Edit.hpp	/^  bool read_only = false;$/;"	m	class:WndProperty
read_ready	src/event/net/cares/Channel.hxx	/^	fd_set read_ready, write_ready;$/;"	m	class:Cares::Channel
reader	src/Logger/FlightParser.hpp	/^  NLineReader &reader;$/;"	m	class:FlightParser
reader	src/Replay/IgcReplay.hpp	/^  std::unique_ptr<NLineReader> reader;$/;"	m	class:IgcReplay
reader	src/Replay/NmeaReplay.hpp	/^  std::unique_ptr<NLineReader> reader;$/;"	m	class:NmeaReplay
reader	src/io/BufferedReader.hxx	/^	Reader &reader;$/;"	m	class:BufferedReader
reader	src/io/KeyValueFileReader.hpp	/^  NLineReader &reader;$/;"	m	class:KeyValueFileReader
ready	src/event/TimerWheel.hxx	/^	List ready;$/;"	m	class:final
ready_flags	src/event/SocketEvent.hxx	/^	unsigned ready_flags = 0;$/;"	m	class:final
ready_sockets	src/event/Loop.hxx	/^	SocketList ready_sockets;$/;"	m	class:final
real	src/Device/Parser.hpp	/^  bool real;$/;"	m	class:NMEAParser
real	src/Logger/LoggerImpl.hpp	/^    bool real;$/;"	m	struct:LoggerImpl::PreTakeoffBuffer
real	src/NMEA/Acceleration.hpp	/^  bool real;$/;"	m	struct:AccelerationState
real	src/NMEA/GPSState.hpp	/^  bool real;$/;"	m	struct:GPSState
real_clock	src/Blackboard/DeviceBlackboard.hpp	/^  WrapClock real_clock, replay_clock;$/;"	m	class:DeviceBlackboard
real_data	src/Blackboard/DeviceBlackboard.hpp	/^  NMEAInfo real_data;$/;"	m	class:DeviceBlackboard
realdir	src/zzip/lib.h	/^    void*  realdir;               \/* e.g. DIR* from posix dirent.h *\/$/;"	m	struct:zzip_dir
realmode	src/Terrain/jasper/jpc/jpc_dec.h	/^	int realmode;$/;"	m	struct:__anon127
realname	src/zzip/lib.h	/^    char*  realname;$/;"	m	struct:zzip_dir
rebind	src/util/SliceAllocator.hxx	/^	struct rebind {$/;"	s	class:GlobalSliceAllocator
rebind	src/util/SliceAllocator.hxx	/^	struct rebind {$/;"	s	class:SliceAllocator
recStartDateTime	src/Device/Driver/IMI/Protocol/Types.hpp	/^    IMIDATETIMESEC recStartDateTime;$/;"	m	struct:IMI::TDeclarationHeader
recStopDateTime	src/Device/Driver/IMI/Protocol/Types.hpp	/^    IMIDATETIMESEC recStopDateTime;$/;"	m	struct:IMI::FlightFinish
recalculateWind	src/Computer/Wind/Store.cpp	/^WindStore::recalculateWind(const MoreData &info, DerivedInfo &derived) const$/;"	f	class:WindStore
received	src/net/http/ToBuffer.cpp	/^  size_t received = 0;$/;"	m	class:final	file:
received	src/net/http/ToFile.cpp	/^  size_t received = 0;$/;"	m	class:final	file:
received_time	src/Tracking/SkyLines/Data.hpp	/^    std::chrono::steady_clock::time_point received_time;$/;"	m	struct:SkyLinesTracking::Data::Thermal
recency_weight	src/Computer/ThermalLocator.hpp	/^    double recency_weight;$/;"	m	struct:ThermalLocator::Point
reconnect_button	src/Dialogs/Device/DeviceListDialog.cpp	/^  Button *reconnect_button, *flight_button;$/;"	m	class:final	file:
record	src/Dialogs/Traffic/TrafficList.cpp	/^    const FlarmNetRecord *record;$/;"	m	struct:TrafficListWidget::Item	file:
record_size	src/Device/Driver/CAI302/Protocol.hpp	/^    uint8_t record_size;$/;"	m	struct:CAI302::NavpointMeta
record_size	src/Device/Driver/CAI302/Protocol.hpp	/^    uint8_t record_size;$/;"	m	struct:CAI302::PilotMeta
record_size	src/Device/Driver/CAI302/Protocol.hpp	/^    uint8_t record_size;$/;"	m	struct:CAI302::PilotMetaActive
record_size	src/Device/Driver/CAI302/Protocol.hpp	/^    uint8_t record_size;$/;"	m	struct:CAI302::PolarMeta
recordingtime	src/Device/Driver/Volkslogger/vlconv.h	/^  long recordingtime; \/\/ length of trace in seconds$/;"	m	struct:DIRENTRY
records	src/Computer/GlideRatioCalculator.hpp	/^  Record records[180];$/;"	m	class:GlideRatioCalculator
rect	src/Topography/shapelib/mapserver.h	/^    rectObj rect; \/* by rect *\/$/;"	m	struct:__anon33
rect	src/Topography/shapelib/maptree.h	/^    rectObj rect;$/;"	m	struct:shape_tree_node
rectObj	src/Topography/shapelib/mapprimitive.h	/^} rectObj;$/;"	t	typeref:struct:__anon68
rectyp_end	src/Device/Driver/Volkslogger/vlconv.cpp	52;"	d	file:
rectyp_fil	src/Device/Driver/Volkslogger/vlconv.cpp	55;"	d	file:
rectyp_msk	src/Device/Driver/Volkslogger/vlconv.cpp	47;"	d	file:
rectyp_poc	src/Device/Driver/Volkslogger/vlconv.cpp	56;"	d	file:
rectyp_pos	src/Device/Driver/Volkslogger/vlconv.cpp	53;"	d	file:
rectyp_sep	src/Device/Driver/Volkslogger/vlconv.cpp	51;"	d	file:
rectyp_tnd	src/Device/Driver/Volkslogger/vlconv.cpp	54;"	d	file:
rectyp_vrb	src/Device/Driver/Volkslogger/vlconv.cpp	50;"	d	file:
rectyp_vrt	src/Device/Driver/Volkslogger/vlconv.cpp	49;"	d	file:
recycle_method	src/Android/Bitmap.cpp	/^jmethodID AndroidBitmap::recycle_method;$/;"	m	class:AndroidBitmap	file:
recycle_method	src/Android/Bitmap.hpp	/^  static jmethodID recycle_method;$/;"	m	class:AndroidBitmap
reduce	src/Device/Driver/IMI/Protocol/Types.hpp	/^    IMIDWORD reduce:1;$/;"	m	struct:IMI::TObservationZone
reduce	src/Task/TaskFileSeeYou.cpp	/^  bool reduce;$/;"	m	struct:SeeYouTurnpointInformation	file:
refcount	src/Topography/shapelib/mapserver.h	/^    int refcount;$/;"	m	struct:__anon32
refcount	src/Topography/shapelib/mapserver.h	/^    int refcount;$/;"	m	struct:__anon45
refcount	src/Topography/shapelib/mapserver.h	/^    int refcount;$/;"	m	struct:classObj
refcount	src/Topography/shapelib/mapserver.h	/^    int refcount;$/;"	m	struct:labelObj
refcount	src/Topography/shapelib/mapserver.h	/^    int refcount;$/;"	m	struct:layerObj
refcount	src/Topography/shapelib/mapserver.h	/^    int refcount;$/;"	m	struct:mapObj
refcount	src/Topography/shapelib/mapserver.h	/^    int refcount;$/;"	m	struct:styleObj
refcount	src/zzip/lib.h	/^    long refcount;$/;"	m	struct:zzip_dir
reference	src/Engine/Airspace/AirspaceAltitude.hpp	/^  AltitudeReference reference;$/;"	m	struct:AirspaceAltitude
reference	src/Engine/Task/ObservationZones/ObservationZonePoint.hpp	/^  GeoPoint reference;$/;"	m	class:ObservationZonePoint
reference	src/Engine/Trace/Trace.cpp	/^  typedef value_type &reference;$/;"	t	class:PointerIterator	file:
reference	src/Engine/Trace/Trace.hpp	/^    typedef const TracePoint &reference;$/;"	t	class:Trace::const_iterator
reference	src/Topography/shapelib/mapserver.h	/^    referenceMapObj reference;$/;"	m	struct:mapObj
reference	src/util/AllocatedGrid.hxx	/^	typedef typename AllocatedArray<T>::reference reference;$/;"	t	class:AllocatedGrid
reference	src/util/CastIterator.hpp	/^  typedef VT &reference;$/;"	t	class:CastIterator
reference	src/util/QuadTree.hxx	/^		typedef T &reference;$/;"	t	class:iterator
reference	src/util/QuadTree.hxx	/^		typedef const T &reference;$/;"	t	class:const_iterator
reference	src/util/SliceAllocator.hxx	/^	typedef T &reference;$/;"	t	class:GlobalSliceAllocator
reference	src/util/SliceAllocator.hxx	/^	typedef T &reference;$/;"	t	class:SliceAllocator
referenceMapObj	src/Topography/shapelib/mapserver.h	/^  } referenceMapObj;$/;"	t	typeref:struct:__anon46
reference_mass	src/Engine/GlideSolvers/GlidePolar.hpp	/^  double reference_mass;$/;"	m	class:GlidePolar
reference_mass	src/Plane/Plane.hpp	/^  double reference_mass;$/;"	m	struct:Plane
reference_mass	src/Polar/Polar.hpp	/^  double reference_mass; \/**< Reference Mass (kg) *\/$/;"	m	struct:PolarInfo
reference_mass	src/Polar/PolarStore.hpp	/^    double reference_mass;$/;"	m	struct:PolarStore::Item
refpt	src/Topography/shapelib/mapserver.h	/^    pointObj refpt;$/;"	m	struct:imageObj
regex	src/Topography/shapelib/mapserver.h	/^    ms_regex_t regex; \/* compiled regular expression to be matched *\/$/;"	m	struct:__anon28
regid	src/Terrain/jasper/jpc/jpc_cs.h	/^	uint_fast16_t regid;$/;"	m	struct:__anon150
region	src/Topography/shapelib/mapserver.h	/^    char* region;       \/* type of the cluster region (rectangle or ellipse) *\/$/;"	m	struct:__anon30
region_code	src/Units/UnitsGlue.cpp	/^  const TCHAR* region_code;$/;"	m	struct:language_unit_map	file:
region_id	src/Units/UnitsGlue.cpp	/^  unsigned region_id;$/;"	m	struct:language_unit_map	file:
register	src/ui/canvas/freetype/Font.cpp	44;"	d	file:
register	src/ui/canvas/freetype/Init.cpp	29;"	d	file:
registered	src/net/http/Request.hxx	/^	bool registered = false;$/;"	m	class:final
registration	src/Device/Driver/LX/LXN.hpp	/^    char registration[8];$/;"	m	struct:LXN::FlightInfo
registration	src/FLARM/FlarmNetRecord.hpp	/^  StaticString<LatinBufferSize(8)> registration;$/;"	m	struct:FlarmNetRecord
registration	src/Plane/Plane.hpp	/^  StaticString<32> registration;$/;"	m	struct:Plane
registry_listener	src/ui/event/poll/WaylandQueue.cpp	/^static constexpr struct wl_registry_listener registry_listener = {$/;"	m	namespace:UI	typeref:struct:UI::wl_registry_listener	file:
registry_table	src/lua/InputEvent.cpp	/^  static constexpr const char *registry_table = "xcsoar.input_events";$/;"	m	class:final	file:
regular_label_font	src/Look/TopographyLook.hpp	/^  Font regular_label_font;$/;"	m	struct:TopographyLook
rel_wheel	src/ui/event/poll/linux/Input.hpp	/^  int rel_x, rel_y, rel_wheel;$/;"	m	class:UI::final
rel_x	src/ui/event/poll/linux/Input.hpp	/^  int rel_x, rel_y, rel_wheel;$/;"	m	class:UI::final
rel_y	src/ui/event/poll/linux/Input.hpp	/^  int rel_x, rel_y, rel_wheel;$/;"	m	class:UI::final
relative	src/ui/canvas/SubCanvas.hpp	/^  PixelPoint relative;$/;"	m	class:SubCanvas
relative_altitude	src/FLARM/Traffic.hpp	/^  RoughAltitude relative_altitude;$/;"	m	class:FlarmTraffic::AircraftType
relative_east	src/FLARM/Traffic.hpp	/^  double relative_east;$/;"	m	class:FlarmTraffic::AircraftType
relative_north	src/FLARM/Traffic.hpp	/^  double relative_north;$/;"	m	class:FlarmTraffic::AircraftType
release_location	src/NMEA/FlyingState.hpp	/^  GeoPoint release_location;$/;"	m	struct:FlyingState
release_time	src/NMEA/FlyingState.hpp	/^  double release_time;$/;"	m	struct:FlyingState
released	src/ui/event/poll/linux/MergeMouse.hpp	/^  bool moved = false, pressed = false, released = false;$/;"	m	class:UI::final
releasing	src/ui/event/poll/linux/Input.hpp	/^  bool pressing, releasing;$/;"	m	class:UI::final
relocate_button	src/Dialogs/Task/OptionalStartsDialog.cpp	/^  Button *relocate_button, *remove_button;$/;"	m	class:OptionStartsWidget	file:
remainder_x	src/Terrain/ScanLine.cpp	/^  unsigned remainder_x, remainder_y;$/;"	m	struct:GridLocation	file:
remainder_y	src/Terrain/ScanLine.cpp	/^  unsigned remainder_x, remainder_y;$/;"	m	struct:GridLocation	file:
remaining	src/Engine/Task/Computer/ElementStatComputer.hpp	/^  DistanceStatComputer remaining;$/;"	m	class:ElementStatComputer
remaining	src/Engine/Task/Stats/ElementStat.hpp	/^  DistanceStat remaining;$/;"	m	struct:ElementStat
remaining	src/InfoBoxes/InfoBoxLayout.hpp	/^    PixelRect remaining;$/;"	m	struct:InfoBoxLayout::Layout
remaining	src/MapWindow/MapWindowGlideRange.cpp	/^  unsigned remaining;$/;"	m	struct:ProjectedFans	file:
remaining_effective	src/Engine/Task/Computer/ElementStatComputer.hpp	/^  DistanceStatComputer remaining_effective;$/;"	m	class:ElementStatComputer
remaining_effective	src/Engine/Task/Stats/ElementStat.hpp	/^  DistanceStat remaining_effective;$/;"	m	struct:ElementStat
remaining_segments	src/Terrain/Loader.hpp	/^  mutable unsigned remaining_segments = 0;$/;"	m	class:TerrainLoader
remark	src/Device/Driver/CAI302/Protocol.hpp	/^    char remark[12];$/;"	m	struct:CAI302::Navpoint
remove_button	src/Dialogs/Task/OptionalStartsDialog.cpp	/^  Button *relocate_button, *remove_button;$/;"	m	class:OptionStartsWidget	file:
remove_button	src/Dialogs/Weather/NOAAList.cpp	/^  Button *details_button, *add_button, *update_button, *remove_button;$/;"	m	class:final	file:
render	src/Renderer/WaypointRenderer.cpp	/^WaypointRenderer::render(Canvas &canvas, LabelBlock &label_block,$/;"	f	class:WaypointRenderer
renderEllipseSymbol	src/Topography/shapelib/mapserver.h	/^    int WARN_UNUSED (*renderEllipseSymbol)(imageObj *image, double x, double y,$/;"	m	struct:rendererVTableObj
renderGlyphs	src/Topography/shapelib/mapserver.h	/^    int WARN_UNUSED (*renderGlyphs)(imageObj *img, textPathObj *tp, colorObj *clr, colorObj *olcolor, int olwidth, int isMarker);$/;"	m	struct:rendererVTableObj
renderLine	src/Topography/shapelib/mapserver.h	/^    int WARN_UNUSED (*renderLine)(imageObj *img, shapeObj *p, strokeStyleObj *style);$/;"	m	struct:rendererVTableObj
renderLineTiled	src/Topography/shapelib/mapserver.h	/^    int WARN_UNUSED (*renderLineTiled)(imageObj *img, shapeObj *p, imageObj *tile);$/;"	m	struct:rendererVTableObj
renderPixmapSymbol	src/Topography/shapelib/mapserver.h	/^    int WARN_UNUSED (*renderPixmapSymbol)(imageObj *img, double x, double y,$/;"	m	struct:rendererVTableObj
renderPolygon	src/Topography/shapelib/mapserver.h	/^    int WARN_UNUSED (*renderPolygon)(imageObj *img, shapeObj *p, colorObj *color);$/;"	m	struct:rendererVTableObj
renderPolygonTiled	src/Topography/shapelib/mapserver.h	/^    int WARN_UNUSED (*renderPolygonTiled)(imageObj *img, shapeObj *p, imageObj *tile);$/;"	m	struct:rendererVTableObj
renderSVGSymbol	src/Topography/shapelib/mapserver.h	/^    int WARN_UNUSED (*renderSVGSymbol)(imageObj *img, double x, double y,$/;"	m	struct:rendererVTableObj
renderText	src/Topography/shapelib/mapserver.h	/^    int WARN_UNUSED (*renderText)(imageObj *img, pointObj *labelpnt, char *text, double angle, colorObj *clr, colorObj *olcolor, int olwidth);$/;"	m	struct:rendererVTableObj
renderTile	src/Topography/shapelib/mapserver.h	/^    int WARN_UNUSED (*renderTile)(imageObj *img, imageObj *tile, double x, double y);$/;"	m	struct:rendererVTableObj
renderVectorSymbol	src/Topography/shapelib/mapserver.h	/^    int WARN_UNUSED (*renderVectorSymbol)(imageObj *img, double x, double y,$/;"	m	struct:rendererVTableObj
render_buffer_depth_stencil	src/ui/canvas/opengl/Globals.cpp	/^GLenum render_buffer_depth_stencil, render_buffer_stencil;$/;"	m	namespace:OpenGL	file:
render_buffer_stencil	src/ui/canvas/opengl/Globals.cpp	/^GLenum render_buffer_depth_stencil, render_buffer_stencil;$/;"	m	namespace:OpenGL	file:
render_filled_posneg	src/Renderer/TraceHistoryRenderer.cpp	/^TraceHistoryRenderer::render_filled_posneg(ChartRenderer &chart,$/;"	f	class:TraceHistoryRenderer
render_mode	src/ui/canvas/freetype/Font.cpp	/^static FT_Render_Mode render_mode = FT_RENDER_MODE_NORMAL;$/;"	v	file:
render_projection	src/MapWindow/MapWindow.hpp	/^  MapWindowProjection render_projection;$/;"	m	class:MapWindow
rendered_text_symbols	src/Topography/shapelib/mapserver.h	/^    labelCacheMemberObj **rendered_text_symbols;$/;"	m	struct:__anon42
renderer	src/CrossSection/CrossSectionWindow.hpp	/^  CrossSectionRenderer renderer;$/;"	m	class:CrossSectionWindow
renderer	src/Dialogs/MapItemListDialog.cpp	/^  MapItemListRenderer renderer;$/;"	m	class:final	file:
renderer	src/Dialogs/Settings/Panels/TerrainDisplayConfigPanel.cpp	/^  TerrainRenderer renderer;$/;"	m	class:TerrainPreviewWindow	file:
renderer	src/Form/Button.hpp	/^  std::unique_ptr<ButtonRenderer> renderer;$/;"	m	class:Button
renderer	src/Form/TabDisplay.hpp	/^  TabRenderer renderer;$/;"	m	class:TabButton
renderer	src/Form/TabMenuDisplay.hpp	/^    TabRenderer renderer;$/;"	m	struct:final::MainMenuButton
renderer	src/Form/TabMenuDisplay.hpp	/^    TabRenderer renderer;$/;"	m	struct:final::SubMenuButton
renderer	src/Gauge/ThermalAssistantWindow.hpp	/^  ThermalAssistantRenderer renderer;$/;"	m	class:ThermalAssistantWindow
renderer	src/InfoBoxes/Content/Thermal.hpp	/^  ThermalAssistantRenderer renderer;$/;"	m	class:InfoBoxContentThermalAssistant
renderer	src/PopupMessage.hpp	/^  TextRenderer renderer;$/;"	m	class:PopupMessage
renderer	src/Renderer/BackgroundRenderer.hpp	/^  std::unique_ptr<TerrainRenderer> renderer;$/;"	m	class:BackgroundRenderer
renderer	src/Screen/LargeTextWindow.hpp	/^  TextRenderer renderer;$/;"	m	class:LargeTextWindow
renderer	src/Topography/CachedTopographyRenderer.hpp	/^  TopographyRenderer renderer;$/;"	m	class:CachedTopographyRenderer
renderer	src/Topography/shapelib/mapserver.h	/^    int  renderer;  \/* MS_RENDER_WITH_* *\/$/;"	m	struct:__anon32
renderer	src/Widget/ButtonWidget.hpp	/^  std::unique_ptr<ButtonRenderer> renderer;$/;"	m	class:ButtonWidget
renderer	src/ui/canvas/custom/TopCanvas.hpp	/^  SDL_Renderer *renderer;$/;"	m	class:DisplayOrientation
rendererVTableObj	src/Topography/shapelib/mapserver.h	/^  struct rendererVTableObj {$/;"	s
rendererVTableObj	src/Topography/shapelib/mapserver.h	/^typedef struct rendererVTableObj rendererVTableObj;$/;"	t	typeref:struct:rendererVTableObj
renderer_cache	src/Topography/shapelib/mapprimitive.h	/^  void *renderer_cache;$/;"	m	struct:__anon72
renderer_data	src/Topography/shapelib/mapserver.h	/^    void *renderer_data;$/;"	m	struct:rendererVTableObj
renderer_settings	src/Airspace/AirspaceVisibility.hpp	/^  const AirspaceRendererSettings &renderer_settings;$/;"	m	class:AirspaceVisibility
rendermode	src/Topography/shapelib/mapserver.h	/^    enum MS_RENDER_MODE rendermode;$/;"	m	struct:layerObj	typeref:enum:layerObj::MS_RENDER_MODE
reopen_clock	src/Device/Descriptor.hpp	/^  PeriodClock reopen_clock;$/;"	m	class:final
repeatdistance	src/Topography/shapelib/mapserver.h	/^    int repeatdistance;$/;"	m	struct:labelObj
repetitive_sound	src/Engine/Airspace/AirspaceWarningConfig.hpp	/^  bool repetitive_sound;$/;"	m	struct:AirspaceWarningConfig
replaceEnumText	src/Form/DataField/Enum.cpp	/^DataFieldEnum::replaceEnumText(unsigned int i, const TCHAR *Text)$/;"	f	class:DataFieldEnum
replay	src/Components.cpp	/^Replay *replay;$/;"	v
replay	src/NMEA/GPSState.hpp	/^  bool replay;$/;"	m	struct:GPSState
replay	src/Replay/Replay.hpp	/^  AbstractReplay *replay;$/;"	m	class:final
replay_clock	src/Blackboard/DeviceBlackboard.hpp	/^  WrapClock real_clock, replay_clock;$/;"	m	class:DeviceBlackboard
replay_data	src/Blackboard/DeviceBlackboard.hpp	/^  NMEAInfo replay_data;$/;"	m	class:DeviceBlackboard
replay_path	src/CommandLine.cpp	/^  const char *replay_path;$/;"	m	namespace:CommandLine	file:
repository	src/Dialogs/FileManager.cpp	/^  FileRepository repository;$/;"	m	class:ManagedFileListWidget	file:
repository_downloaded	src/Repository/Glue.cpp	/^static bool repository_downloaded = false;$/;"	v	file:
repository_error	src/Dialogs/DownloadFilePicker.cpp	/^  std::exception_ptr repository_error;$/;"	m	class:final	file:
repository_failed	src/Dialogs/DownloadFilePicker.cpp	/^  bool repository_failed;$/;"	m	class:final	file:
repository_failed	src/Dialogs/FileManager.cpp	/^  bool repository_failed;$/;"	m	class:ManagedFileListWidget	file:
repository_modified	src/Dialogs/DownloadFilePicker.cpp	/^  bool repository_modified;$/;"	m	class:final	file:
repository_modified	src/Dialogs/FileManager.cpp	/^  bool repository_modified;$/;"	m	class:ManagedFileListWidget	file:
reprojectorFromTileProjToLayerProj	src/Topography/shapelib/mapshape.h	/^    reprojectionObj* reprojectorFromTileProjToLayerProj;$/;"	m	struct:__anon79
reprojectorLayerToMap	src/Topography/shapelib/mapserver.h	/^    reprojectionObj* reprojectorLayerToMap;$/;"	m	struct:layerObj
reprojectorMapToLayer	src/Topography/shapelib/mapserver.h	/^    reprojectionObj* reprojectorMapToLayer;$/;"	m	struct:layerObj
request	src/Terrain/RasterTile.hpp	/^  bool request;$/;"	m	class:RasterTile
request_armed	src/Engine/Task/Ordered/TaskAdvance.hpp	/^  bool request_armed = false;$/;"	m	class:TaskAdvance
request_tiles	src/Terrain/RasterTileCache.hpp	/^  StaticArray<uint16_t, MAX_RTC_TILES> request_tiles;$/;"	m	class:RasterTileCache
require_arm	src/Engine/Task/Ordered/StartConstraints.hpp	/^  bool require_arm;$/;"	m	struct:StartConstraints
require_restart	src/UtilsSettings.cpp	/^bool require_restart;$/;"	v
requires	src/Topography/shapelib/mapserver.h	/^    char *requires; \/* context expressions, simple enough to not use expressionObj *\/$/;"	m	struct:layerObj
res	src/Engine/GlideSolvers/MacCready.cpp	/^  GlideResult res;$/;"	m	class:MacCreadyVopt	file:
res	src/Engine/Task/Solvers/TaskBestMc.hpp	/^  GlideResult res;$/;"	m	class:final
res	src/Engine/Task/Solvers/TaskGlideRequired.hpp	/^  GlideResult res;$/;"	m	class:final
res	src/Engine/Task/Solvers/TaskMinTarget.hpp	/^  GlideResult res;$/;"	m	class:final
res	src/Engine/Task/Solvers/TaskOptTarget.hpp	/^  GlideResult res;$/;"	m	class:final
reservable_priority_queue	src/util/ReservablePriorityQueue.hpp	/^  reservable_priority_queue(size_type capacity = 0) {$/;"	f	class:reservable_priority_queue
reservable_priority_queue	src/util/ReservablePriorityQueue.hpp	/^class reservable_priority_queue:$/;"	c
reserve	src/util/ReservablePriorityQueue.hpp	/^  void reserve(size_type capacity) {$/;"	f	class:reservable_priority_queue
reserved	src/Device/Driver/CAI302/Protocol.hpp	/^    uint8_t reserved[15];$/;"	m	struct:CAI302::GeneralInfo
reserved	src/Device/Driver/IMI/Protocol/Types.hpp	/^    IMIBYTE reserved[160 - (IMIRSA_MAX_BITS \/ 8) - 7];$/;"	m	struct:IMI::Signature
reserved	src/Device/Driver/IMI/Protocol/Types.hpp	/^    IMIBYTE reserved[64 - 22];$/;"	m	struct:IMI::TDeviceInfo
reserved	src/Device/Driver/IMI/Protocol/Types.hpp	/^    IMIBYTE reserved[96 - 82];$/;"	m	struct:IMI::FlightInfo
reserved	src/Device/Driver/IMI/Protocol/Types.hpp	/^    IMIBYTE reserved[sizeof(TWaypoint) - sizeof(IMIWORD)];$/;"	m	struct:IMI::TDeclaration
reserved	src/Device/Driver/IMI/Protocol/Types.hpp	/^    IMIDWORD reserved: 6;$/;"	m	struct:IMI::TObservationZone
reserved	src/Device/Driver/IMI/Protocol/Types.hpp	/^    IMIWORD reserved;$/;"	m	struct:IMI::FlightFinish
reserved	src/Tracking/SkyLines/Protocol.hpp	/^    uint16_t reserved;$/;"	m	struct:SkyLinesTracking::TrafficResponsePacket::Traffic
reserved	src/Tracking/SkyLines/Protocol.hpp	/^  uint16_t reserved;$/;"	m	struct:SkyLinesTracking::ACKPacket
reserved	src/Tracking/SkyLines/Protocol.hpp	/^  uint16_t reserved;$/;"	m	struct:SkyLinesTracking::PingPacket
reserved	src/Tracking/SkyLines/Protocol.hpp	/^  uint16_t reserved;$/;"	m	struct:SkyLinesTracking::TrafficResponsePacket
reserved	src/Tracking/SkyLines/Protocol.hpp	/^  uint32_t reserved;$/;"	m	struct:SkyLinesTracking::FixPacket
reserved	src/Tracking/SkyLines/Protocol.hpp	/^  uint32_t reserved;$/;"	m	struct:SkyLinesTracking::TrafficRequestPacket
reserved	src/Tracking/SkyLines/Protocol.hpp	/^  uint32_t reserved;$/;"	m	struct:SkyLinesTracking::UserNameRequestPacket
reserved1	src/Device/Driver/CAI302/Protocol.hpp	/^    uint8_t reserved1;$/;"	m	struct:CAI302::Polar
reserved1	src/Device/Driver/IMI/Protocol/Types.hpp	/^    IMIDWORD reserved1:23;$/;"	m	struct:IMI::FixK
reserved1	src/Device/Driver/IMI/Protocol/Types.hpp	/^    IMIDWORD reserved1:7;$/;"	m	struct:IMI::TWaypoint
reserved1	src/Device/Driver/IMI/Protocol/Types.hpp	/^    IMIWORD reserved1;$/;"	m	struct:IMI::TDeclarationHeader
reserved1	src/Tracking/SkyLines/Protocol.hpp	/^  uint16_t reserved1;$/;"	m	struct:SkyLinesTracking::ThermalResponsePacket
reserved1	src/Tracking/SkyLines/Protocol.hpp	/^  uint16_t reserved1;$/;"	m	struct:SkyLinesTracking::WaveResponsePacket
reserved1	src/Tracking/SkyLines/Protocol.hpp	/^  uint32_t reserved1;$/;"	m	struct:SkyLinesTracking::Thermal
reserved1	src/Tracking/SkyLines/Protocol.hpp	/^  uint32_t reserved1;$/;"	m	struct:SkyLinesTracking::ThermalRequestPacket
reserved1	src/Tracking/SkyLines/Protocol.hpp	/^  uint32_t reserved1;$/;"	m	struct:SkyLinesTracking::Wave
reserved1	src/Tracking/SkyLines/Protocol.hpp	/^  uint32_t reserved1;$/;"	m	struct:SkyLinesTracking::WaveRequestPacket
reserved1	src/Tracking/SkyLines/Protocol.hpp	/^  uint8_t reserved1, reserved2, reserved3;$/;"	m	struct:SkyLinesTracking::UserNameResponsePacket
reserved2	src/Device/Driver/CAI302/Protocol.hpp	/^    uint16_t reserved2;$/;"	m	struct:CAI302::Pilot
reserved2	src/Device/Driver/CAI302/Protocol.hpp	/^    uint16_t reserved2;$/;"	m	struct:CAI302::Polar
reserved2	src/Device/Driver/CAI302/Protocol.hpp	/^    uint8_t reserved2[5];$/;"	m	struct:CAI302::GeneralInfo
reserved2	src/Device/Driver/IMI/Protocol/Types.hpp	/^    IMIBYTE reserved2[28];$/;"	m	struct:IMI::TDeclarationHeader
reserved2	src/Device/Driver/IMI/Protocol/Types.hpp	/^    IMIBYTE reserved2[3];$/;"	m	struct:IMI::FixK
reserved2	src/Device/Driver/IMI/Protocol/Types.hpp	/^    IMIBYTE reserved2[66];$/;"	m	struct:IMI::FlightFinish
reserved2	src/Device/Driver/IMI/Protocol/Types.hpp	/^    IMIDWORD reserved2:7;$/;"	m	struct:IMI::TWaypoint
reserved2	src/Tracking/SkyLines/Protocol.hpp	/^    uint32_t reserved2;$/;"	m	struct:SkyLinesTracking::TrafficResponsePacket::Traffic
reserved2	src/Tracking/SkyLines/Protocol.hpp	/^  int16_t reserved2;$/;"	m	struct:SkyLinesTracking::Thermal
reserved2	src/Tracking/SkyLines/Protocol.hpp	/^  int16_t reserved2;$/;"	m	struct:SkyLinesTracking::Wave
reserved2	src/Tracking/SkyLines/Protocol.hpp	/^  uint32_t reserved2;$/;"	m	struct:SkyLinesTracking::PingPacket
reserved2	src/Tracking/SkyLines/Protocol.hpp	/^  uint8_t reserved1, reserved2, reserved3;$/;"	m	struct:SkyLinesTracking::UserNameResponsePacket
reserved2	src/Tracking/SkyLines/Protocol.hpp	/^  uint8_t reserved2;$/;"	m	struct:SkyLinesTracking::ThermalResponsePacket
reserved2	src/Tracking/SkyLines/Protocol.hpp	/^  uint8_t reserved2;$/;"	m	struct:SkyLinesTracking::TrafficResponsePacket
reserved2	src/Tracking/SkyLines/Protocol.hpp	/^  uint8_t reserved2;$/;"	m	struct:SkyLinesTracking::WaveResponsePacket
reserved3	src/Device/Driver/CAI302/Protocol.hpp	/^    uint8_t reserved3[2];$/;"	m	struct:CAI302::GeneralInfo
reserved3	src/Tracking/SkyLines/Protocol.hpp	/^  uint32_t reserved3;$/;"	m	struct:SkyLinesTracking::ThermalResponsePacket
reserved3	src/Tracking/SkyLines/Protocol.hpp	/^  uint32_t reserved3;$/;"	m	struct:SkyLinesTracking::TrafficResponsePacket
reserved3	src/Tracking/SkyLines/Protocol.hpp	/^  uint32_t reserved3;$/;"	m	struct:SkyLinesTracking::WaveResponsePacket
reserved3	src/Tracking/SkyLines/Protocol.hpp	/^  uint8_t reserved1, reserved2, reserved3;$/;"	m	struct:SkyLinesTracking::UserNameResponsePacket
reserved4	src/Tracking/SkyLines/Protocol.hpp	/^  uint32_t reserved4, reserved5;$/;"	m	struct:SkyLinesTracking::UserNameResponsePacket
reserved5	src/Tracking/SkyLines/Protocol.hpp	/^  uint32_t reserved4, reserved5;$/;"	m	struct:SkyLinesTracking::UserNameResponsePacket
reserved_vario	src/Device/Driver/CAI302/Protocol.hpp	/^    uint8_t reserved_vario; \/\/ multiplexed w\/ vario mode:$/;"	m	struct:CAI302::Pilot
reset	src/Computer/Wind/Store.cpp	/^WindStore::reset()$/;"	f	class:WindStore
reset	src/Engine/Task/Computer/TaskVarioComputer.cpp	/^TaskVarioComputer::reset(TaskVario &data, const GlideResult& solution)$/;"	f	class:TaskVarioComputer
reset	src/Engine/Task/Stats/TaskStats.cpp	/^TaskStats::reset()$/;"	f	class:TaskStats
reset	src/Renderer/LabelBlock.cpp	/^void LabelBlock::reset()$/;"	f	class:LabelBlock
resetClip	src/Topography/shapelib/mapserver.h	/^    int (*resetClip)(imageObj *img);$/;"	m	struct:rendererVTableObj
reset_gettext_cache	src/Language/Language.cpp	/^reset_gettext_cache()$/;"	f
reset_pending	src/Computer/Wind/WindEKFGlue.hpp	/^  bool reset_pending;$/;"	m	class:WindEKFGlue
resizable	src/ui/window/TopWindow.hpp	/^  bool resizable = false;$/;"	m	class:UI::TopWindowStyle
resized	src/ui/window/TopWindow.hpp	/^  bool resized = false;$/;"	m	class:UI::TopWindow
resolution	src/Topography/shapelib/mapserver.h	/^    double resolution;$/;"	m	struct:imageObj
resolution	src/Topography/shapelib/mapserver.h	/^    double resolution;$/;"	m	struct:mapObj
resolutionfactor	src/Topography/shapelib/mapserver.h	/^    double resolutionfactor;$/;"	m	struct:imageObj
resolutionfactor	src/Topography/shapelib/mapserver.h	/^    double scalefactor,resolutionfactor;$/;"	m	struct:__anon38
resolver	src/Device/Port/TCPClientPort.hpp	/^  std::optional<Cares::SimpleResolver> resolver;$/;"	m	class:final
resolver	src/Tracking/SkyLines/Client.hpp	/^  std::optional<Cares::SimpleResolver> resolver;$/;"	m	class:SkyLinesTracking::final
resource	src/Language/LanguageGlue.hpp	/^  const TCHAR *resource;$/;"	m	struct:BuiltinLanguage
resource_id	src/Topography/TopographyStore.cpp	/^  ResourceId resource_id, big_resource_id;$/;"	m	struct:__anon83	file:
response	src/Device/Driver/KRT2.cpp	/^  uint8_t response;$/;"	m	class:final	file:
response_mutex	src/Device/Driver/KRT2.cpp	/^  Mutex response_mutex;$/;"	m	class:final	file:
rest	src/util/IterableSplitString.hxx	/^		StringView current, rest;$/;"	m	class:BasicIterableSplitString::final
restlen	src/zzip/file.h	/^    zzip_size_t restlen;$/;"	m	struct:zzip_file
restore_page_pending	src/MainWindow.hpp	/^  bool restore_page_pending = false;$/;"	m	class:MainWindow
restrict	src/Terrain/jasper/jpc/jpc_qmfb.c	1854;"	d	file:
result	src/Device/Driver/CAI302/Protocol.hpp	/^    char result;$/;"	m	struct:CAI302::FileASCII
result	src/Device/Driver/CAI302/Protocol.hpp	/^    char result;$/;"	m	struct:CAI302::FileBinary
result	src/Engine/Contest/ContestStatistics.hpp	/^  ContestResult result[3];$/;"	m	struct:ContestStatistics
result	src/Job/TriStateJob.hpp	/^  TriStateJobResult result;$/;"	m	class:final
result	src/Topography/shapelib/mapserver.h	/^    parseResultObj result; \/* parse result *\/$/;"	m	struct:__anon29
resultCacheObj	src/Topography/shapelib/mapserver.h	/^  } resultCacheObj;$/;"	t	typeref:struct:__anon44
resultObj	src/Topography/shapelib/mapserver.h	/^  } resultObj;$/;"	t	typeref:struct:__anon43
result_classic	src/Engine/Contest/Solvers/OLCPlus.hpp	/^  ContestResult result_classic;$/;"	m	class:OLCPlus
result_fai	src/Engine/Contest/Solvers/OLCPlus.hpp	/^  ContestResult result_fai;$/;"	m	class:OLCPlus
result_type	src/Cloud/Client.hpp	/^  typedef GeoPoint result_type;$/;"	t	struct:CloudClientIndexable
result_type	src/Cloud/Thermal.hpp	/^  typedef GeoPoint result_type;$/;"	t	struct:CloudThermalIndexable
result_type	src/Engine/Airspace/AirspacesInterface.hpp	/^    typedef FlatBoundingBox result_type;$/;"	t	struct:AirspacesInterface::AirspaceIndexable
result_type	src/ui/canvas/memory/PixelOperations.hpp	/^  typedef bool result_type;$/;"	t	struct:ColorKey
result_type	src/ui/canvas/memory/PixelOperations.hpp	/^  typedef color_type result_type;$/;"	t	struct:PixelIntegerAdapter
resultcache	src/Topography/shapelib/mapserver.h	/^    resultCacheObj *resultcache; \/* holds the results of a query against this layer *\/$/;"	m	struct:layerObj
resultindex	src/Topography/shapelib/mapprimitive.h	/^  int resultindex; \/* index within a query result set *\/$/;"	m	struct:__anon72
resultindex	src/Topography/shapelib/mapserver.h	/^    int resultindex;$/;"	m	struct:__anon43
results	src/Topography/shapelib/mapserver.h	/^    resultObj *results;$/;"	m	struct:__anon44
results	src/net/http/Multi.hxx	/^	std::map<const CURL *, CURLcode> results;$/;"	m	class:CurlMulti
resumed	src/ui/window/TopWindow.hpp	/^  bool resumed = false;$/;"	m	class:UI::TopWindow
retrospective	src/Computer/GlideComputer.hpp	/^  Retrospective retrospective;$/;"	m	class:GlideComputer
return	src/zzip/zip.c	184;"	d	file:
return	src/zzip/zip.c	387;"	d	file:
reverse_button	src/Dialogs/Task/Manager/TaskEditPanel.cpp	/^  Button *reverse_button, *clear_all_button;$/;"	m	class:TaskEditPanel	file:
revert_button	src/Dialogs/Task/Manager/TaskClosePanel.hpp	/^    PixelRect close_button, message, revert_button;$/;"	m	struct:final::Layout
revert_button	src/Dialogs/Task/Manager/TaskClosePanel.hpp	/^  Button revert_button;$/;"	m	class:final
rgn	src/Terrain/jasper/jpc/jpc_cs.h	/^	jpc_rgn_t rgn;$/;"	m	union:__anon155
right	src/Form/DigitEntry.hpp	/^    unsigned left, right;$/;"	m	struct:CoordinateFormat::Column
right	src/Geo/ConvexHull/GrahamScan.hpp	/^  SearchPoint *right;$/;"	m	class:GrahamScan
right	src/ui/dim/Rect.hpp	/^  int left, top, right, bottom;$/;"	m	struct:PixelRect
right	src/util/QuadTree.hxx	/^		position_type left, top, right, bottom;$/;"	m	struct:QuadTree::Rectangle
risk_gamma	src/Engine/Task/TaskBehaviour.hpp	/^  double risk_gamma;$/;"	m	struct:TaskBehaviour
rlvlno	src/Terrain/jasper/jpc/jpc_t2cod.h	/^	unsigned rlvlno;$/;"	m	struct:__anon115
rlvlnoend	src/Terrain/jasper/jpc/jpc_cs.h	/^	uint_fast8_t rlvlnoend;$/;"	m	struct:__anon146
rlvlnostart	src/Terrain/jasper/jpc/jpc_cs.h	/^	uint_fast8_t rlvlnostart;$/;"	m	struct:__anon146
rlvls	src/Terrain/jasper/jpc/jpc_cs.h	/^	jpc_coxrlvl_t rlvls[JPC_MAXRLVLS];$/;"	m	struct:__anon139
rlvls	src/Terrain/jasper/jpc/jpc_dec.h	/^	jpc_dec_rlvl_t *rlvls;$/;"	m	struct:__anon126
rms_error	src/Math/LeastSquares.hpp	/^  double rms_error;$/;"	m	class:LeastSquares
roaming	src/Tracking/SkyLines/Glue.hpp	/^  bool roaming = true;$/;"	m	class:SkyLinesTracking::Glue
roaming	src/Tracking/SkyLines/Settings.hpp	/^  bool roaming;$/;"	m	struct:SkyLinesTracking::Settings
roishift	src/Terrain/jasper/jpc/jpc_cs.h	/^	uint_fast8_t roishift;$/;"	m	struct:__anon142
roishift	src/Terrain/jasper/jpc/jpc_dec.h	/^	int roishift;$/;"	m	struct:__anon124
roishift	src/Terrain/jasper/jpc/jpc_dec.h	/^	uint_fast8_t roishift;$/;"	m	struct:__anon119
roisty	src/Terrain/jasper/jpc/jpc_cs.h	/^	uint_fast8_t roisty;$/;"	m	struct:__anon142
root	src/Engine/Route/ReachFan.hpp	/^  FlatTriangleFanTree root;$/;"	m	class:ReachFan
root	src/Topography/shapelib/maptree.h	/^    treeNodeObj *root;$/;"	m	struct:__anon80
root	src/util/QuadTree.hxx	/^	Bucket root;$/;"	v
root	src/util/RadixTree.hpp	/^  Node root;$/;"	m	class:RadixTree
rot	src/Topography/shapelib/mapserver.h	/^  double rot;$/;"	m	struct:__anon59
rotate	src/ui/event/poll/linux/MergeMouse.hpp	/^  RotatePointer rotate;$/;"	m	class:UI::final
rotate_shift	src/Renderer/RotatedPolygonRenderer.hpp	/^  CanvasRotateShift rotate_shift;$/;"	m	class:RotatedPolygonRenderer
rotation	src/Airspace/AirspaceParser.cpp	/^  int rotation;$/;"	m	struct:TempAirspaceType	file:
rotation	src/Topography/shapelib/mapserver.h	/^    double outlinewidth, rotation,scale;$/;"	m	struct:tileCacheObj
rotation	src/Topography/shapelib/mapserver.h	/^    double rotation;$/;"	m	struct:__anon38
rotation	src/Topography/shapelib/mapserver.h	/^    double rotation;$/;"	m	struct:__anon63
rotation	src/Topography/shapelib/mapserver.h	/^    double rotation;$/;"	m	struct:__anon64
rotation_angle	src/Topography/shapelib/mapprimitive.h	/^  double rotation_angle;$/;"	m	struct:__anon74
route	src/Computer/TaskComputer.hpp	/^  RouteComputer route;$/;"	m	class:TaskComputer
route	src/Task/ProtectedTaskManager.hpp	/^  const RoutePlannerGlue *route;$/;"	m	class:ReachIntersectionTest
route_clock	src/Computer/RouteComputer.hpp	/^  GPSClock route_clock;$/;"	m	class:RouteComputer
route_planner	src/Computer/RouteComputer.hpp	/^  RoutePlannerGlue route_planner;$/;"	m	class:RouteComputer
route_planner	src/Engine/Task/TaskBehaviour.hpp	/^  RoutePlannerConfig route_planner;$/;"	m	struct:TaskBehaviour
route_planner	src/MapWindow/MapWindow.hpp	/^  const ProtectedRoutePlanner *route_planner = nullptr;$/;"	m	class:MapWindow
routes	src/Device/Driver/Volkslogger/vlapi2.h	/^    ROUTE *routes;$/;"	m	struct:VLAPI_DATA::DATABASE
routine	src/Topography/shapelib/maperror.h	/^    char routine[ROUTINELENGTH];$/;"	m	struct:errorObj
row_height	src/Dialogs/ListPicker.cpp	/^  unsigned row_height;$/;"	m	class:ListPickerWidget	file:
row_height	src/Form/GridView.hpp	/^  unsigned row_height;$/;"	m	class:GridView
row_renderer	src/Dialogs/Airspace/AirspaceList.cpp	/^  TwoTextRowsRenderer row_renderer;$/;"	m	class:final	file:
row_renderer	src/Dialogs/Airspace/dlgAirspace.cpp	/^  TextRowRenderer row_renderer;$/;"	m	class:AirspaceSettingsListWidget	file:
row_renderer	src/Dialogs/Airspace/dlgAirspaceWarnings.cpp	/^  TwoTextRowsRenderer row_renderer;$/;"	m	class:final	file:
row_renderer	src/Dialogs/ComboPicker.cpp	/^  TextRowRenderer row_renderer;$/;"	m	class:ComboPickerSupport	file:
row_renderer	src/Dialogs/Device/ScanBluetoothLeDialog.cpp	/^  TextRowRenderer row_renderer;$/;"	m	class:final	file:
row_renderer	src/Dialogs/DownloadFilePicker.cpp	/^  TextRowRenderer row_renderer;$/;"	m	class:final	file:
row_renderer	src/Dialogs/FileManager.cpp	/^  TextRowRenderer row_renderer;$/;"	m	class:final	file:
row_renderer	src/Dialogs/FileManager.cpp	/^  TwoTextRowsRenderer row_renderer;$/;"	m	class:ManagedFileListWidget	file:
row_renderer	src/Dialogs/Plane/PlaneListDialog.cpp	/^  TwoTextRowsRenderer row_renderer;$/;"	m	class:final	file:
row_renderer	src/Dialogs/Settings/Panels/PagesConfigPanel.cpp	/^  TextRowRenderer row_renderer;$/;"	m	class:PageListWidget	file:
row_renderer	src/Dialogs/Task/AlternatesListDialog.cpp	/^  TwoTextRowsRenderer row_renderer;$/;"	m	class:final	file:
row_renderer	src/Dialogs/Task/Manager/TaskEditPanel.cpp	/^  TwoTextRowsRenderer row_renderer;$/;"	m	class:TaskEditPanel	file:
row_renderer	src/Dialogs/Task/Manager/TaskListPanel.cpp	/^  TextRowRenderer row_renderer;$/;"	m	class:final	file:
row_renderer	src/Dialogs/Task/MutateTaskPointDialog.cpp	/^  TextRowRenderer row_renderer;$/;"	m	class:final	file:
row_renderer	src/Dialogs/Task/OptionalStartsDialog.cpp	/^  TextRowRenderer row_renderer;$/;"	m	class:OptionStartsWidget	file:
row_renderer	src/Dialogs/Traffic/TrafficList.cpp	/^  TwoTextRowsRenderer row_renderer;$/;"	m	class:TrafficListWidget	file:
row_renderer	src/Dialogs/Waypoint/Manager.cpp	/^  TwoTextRowsRenderer row_renderer;$/;"	m	class:final	file:
row_renderer	src/Dialogs/Waypoint/WaypointList.cpp	/^  TwoTextRowsRenderer row_renderer;$/;"	m	class:final	file:
row_renderer	src/Dialogs/Waypoint/dlgWaypointDetails.cpp	/^  TextRowRenderer row_renderer;$/;"	m	class:final	file:
row_renderer	src/Dialogs/Weather/NOAAList.cpp	/^  TwoTextRowsRenderer row_renderer;$/;"	m	class:final	file:
row_renderer	src/Dialogs/Weather/RASPDialog.cpp	/^  TextRowRenderer row_renderer;$/;"	m	class:RaspProviderRenderer	file:
row_renderer	src/Kobo/WifiDialog.cpp	/^  TwoTextRowsRenderer row_renderer;$/;"	m	class:final	file:
row_renderer	src/Renderer/MapItemListRenderer.hpp	/^  TwoTextRowsRenderer row_renderer;$/;"	m	class:MapItemListRenderer
row_renderer	src/Widget/TextListWidget.hpp	/^  TextRowRenderer row_renderer;$/;"	m	class:TextListWidget
rows	src/Widget/RowFormWidget.hpp	/^  boost::container::static_vector<Row, 32u> rows;$/;"	m	class:RowFormWidget
rows_	src/Terrain/jasper/jas_seq.h	/^	jas_seqent_t **rows_;$/;"	m	struct:jas_matrix
rpm	src/IGC/IGCFix.hpp	/^  int16_t rpm;$/;"	m	struct:IGCFix
rpointer	src/ui/canvas/memory/Buffer.hpp	/^  typedef typename PixelTraits::const_rpointer rpointer;$/;"	t	struct:ConstImageBuffer
rpointer	src/ui/canvas/memory/Buffer.hpp	/^  typedef typename PixelTraits::rpointer rpointer;$/;"	t	struct:WritableImageBuffer
rpointer	src/ui/canvas/memory/Optimised.hpp	/^  typedef typename PixelTraits::rpointer rpointer;$/;"	t	class:SelectOptimisedPixelOperations
rpointer	src/ui/canvas/memory/PixelOperations.hpp	/^  typedef typename PixelTraits::rpointer rpointer;$/;"	t	struct:ConditionalWritePixel
rpointer	src/ui/canvas/memory/PixelOperations.hpp	/^  typedef typename PixelTraits::rpointer rpointer;$/;"	t	struct:PerPixelOperations
rpointer	src/ui/canvas/memory/PixelTraits.hpp	/^  typedef color_type *gcc_restrict rpointer;$/;"	t	struct:BGRAPixelTraits
rpointer	src/ui/canvas/memory/PixelTraits.hpp	/^  typedef color_type *gcc_restrict rpointer;$/;"	t	struct:GreyscalePixelTraits
rpolar	src/Engine/Route/AirspaceRoute.cpp	/^  const RoutePolars &rpolar;$/;"	m	class:final	file:
rpolars	src/Engine/Route/ReachFanParms.hpp	/^  const RoutePolars &rpolars;$/;"	m	struct:ReachFanParms
rpolars_reach	src/Engine/Route/RoutePlanner.hpp	/^  RoutePolars rpolars_reach;$/;"	m	class:RoutePlanner
rpolars_reach_working	src/Engine/Route/RoutePlanner.hpp	/^  RoutePolars rpolars_reach_working;$/;"	m	class:RoutePlanner
rpolars_route	src/Engine/Route/RoutePlanner.hpp	/^  RoutePolars rpolars_route;$/;"	m	class:RoutePlanner
rs	src/Device/Driver/Volkslogger/vlapi2.h	/^    unsigned rs;  \/\/ sector radius in meters   (0..15000m)$/;"	m	struct:VLAPI_DATA::DCLWPT
rsaBits	src/Device/Driver/IMI/Protocol/Types.hpp	/^    IMIWORD rsaBits;$/;"	m	struct:IMI::Signature
rt_constraints	src/Engine/Task/Factory/RTTaskFactory.cpp	/^static constexpr TaskFactoryConstraints rt_constraints = {$/;"	v	file:
rtc	src/Terrain/RasterTileCache.cpp	/^  const RasterTileCache &rtc;$/;"	m	struct:RTDistanceSort	file:
rtree	src/Cloud/Client.hpp	/^  Tree rtree;$/;"	m	class:CloudClientContainer
rtree	src/Cloud/Thermal.hpp	/^  Tree rtree;$/;"	m	class:CloudThermalContainer
run_time	src/Weather/PCMet/Overlays.hpp	/^  BrokenDateTime run_time, valid_time;$/;"	m	struct:PCMet::Overlay
running	src/Device/Port/BufferedPort.hpp	/^  bool running;$/;"	m	class:BufferedPort
running	src/Engine/Contest/Solvers/TriangleContest.hpp	/^  bool running;$/;"	m	class:TriangleContest
running	src/Job/Async.hpp	/^  std::atomic<bool> running;$/;"	m	class:final
running	src/Job/Thread.hpp	/^  std::atomic<bool> running;$/;"	m	class:JobThread
running	src/ui/window/TopWindow.hpp	/^  bool running = false;$/;"	m	class:UI::TopWindow
runway	src/Engine/Waypoint/Waypoint.hpp	/^  Runway runway;$/;"	m	struct:Waypoint
rwcnt_	src/Terrain/jasper/jas_stream.h	/^	long rwcnt_;$/;"	m	struct:__anon97
rwlimit_	src/Terrain/jasper/jas_stream.h	/^	long rwlimit_;$/;"	m	struct:__anon97
rx	src/FLARM/Status.hpp	/^  unsigned short rx;$/;"	m	struct:FlarmStatus
rx_buf	src/Device/Driver/KRT2.cpp	/^  StaticFifoBuffer<uint8_t, 256u> rx_buf;$/;"	m	class:final	file:
rx_cond	src/Device/Driver/KRT2.cpp	/^  Cond rx_cond;$/;"	m	class:final	file:
rz	src/Device/Driver/Volkslogger/vlapi2.h	/^    unsigned rz;  \/\/ cylinder radius in meters (0..1500m)$/;"	m	struct:VLAPI_DATA::DCLWPT
s	src/util/IterableSplitString.hxx	/^	StringView s;$/;"	m	class:BasicIterableSplitString
sTDECL	src/Device/Driver/Volkslogger/vlconv.cpp	/^  char sTDECL[20];$/;"	m	class:C_RECORD	file:
sTileProj	src/Topography/shapelib/mapshape.h	/^    projectionObj sTileProj;$/;"	m	struct:__anon79
safe_brush	src/Look/TrafficLook.hpp	/^  Brush safe_brush;$/;"	m	struct:TrafficLook
safe_color	src/Look/TrafficLook.hpp	/^  Color safe_color;$/;"	m	struct:TrafficLook
safe_fseek	src/Topography/shapelib/mapxbase.c	44;"	d	file:
safety_height	src/Engine/Task/Ordered/Points/FinishPoint.hpp	/^  double safety_height;$/;"	m	class:final
safety_height	src/Engine/Task/Ordered/Points/IntermediatePoint.hpp	/^  double safety_height;$/;"	m	class:IntermediateTaskPoint
safety_height	src/Engine/Task/Ordered/Points/StartPoint.hpp	/^  double safety_height;$/;"	m	class:final
safety_height	src/MapWindow/Items/MapItem.hpp	/^  double safety_height;$/;"	m	struct:ArrivalAltitudeMapItem
safety_height_arrival	src/Engine/Task/TaskBehaviour.hpp	/^  double safety_height_arrival;$/;"	m	struct:TaskBehaviour
safety_height_arrival	src/Engine/Task/Unordered/UnorderedTaskPoint.hpp	/^  double safety_height_arrival;$/;"	m	class:final
safety_height_terrain	src/Engine/Route/Config.hpp	/^  double safety_height_terrain;$/;"	m	struct:RoutePlannerConfig
safety_mc	src/Engine/Task/TaskBehaviour.hpp	/^  double safety_mc;$/;"	m	struct:TaskBehaviour
safety_polar	src/Engine/Task/TaskManager.hpp	/^  GlidePolar safety_polar;$/;"	m	class:TaskManager
sample_rate	src/Audio/PCMMixerDataSource.hpp	/^  const unsigned sample_rate;$/;"	m	class:PCMMixerDataSource
sample_rate	src/Audio/ToneSynthesiser.hpp	/^  const unsigned sample_rate;$/;"	m	class:ToneSynthesiser
sample_rate	src/Audio/VarioGlue.cpp	/^static constexpr unsigned sample_rate = 44100;$/;"	v	file:
sampled_points	src/Engine/Task/Points/SampledTaskPoint.hpp	/^  SearchPointVector sampled_points;$/;"	m	class:SampledTaskPoint
samples	src/Computer/Wind/CirclingWind.hpp	/^  StaticArray<Sample, 50> samples;$/;"	m	class:CirclingWind
sat_areas	src/Weather/PCMet/Images.cpp	/^static constexpr PCMet::ImageArea sat_areas[] = {$/;"	v	file:
satellite_ids	src/Logger/LoggerFRecord.hpp	/^  int satellite_ids[GPSState::MAXSATELLITES];$/;"	m	class:LoggerFRecord
satellite_ids	src/Logger/LoggerImpl.hpp	/^    int satellite_ids[GPSState::MAXSATELLITES];$/;"	m	struct:LoggerImpl::PreTakeoffBuffer
satellite_ids	src/NMEA/GPSState.hpp	/^  int satellite_ids[MAXSATELLITES];$/;"	m	struct:GPSState
satellite_ids_available	src/Logger/LoggerFRecord.hpp	/^  bool satellite_ids_available;$/;"	m	class:LoggerFRecord
satellite_ids_available	src/Logger/LoggerImpl.hpp	/^    bool satellite_ids_available;$/;"	m	struct:LoggerImpl::PreTakeoffBuffer
satellite_ids_available	src/NMEA/GPSState.hpp	/^  Validity satellite_ids_available;$/;"	m	struct:GPSState
satellites_used	src/Logger/LoggerImpl.hpp	/^    int satellites_used;$/;"	m	struct:LoggerImpl::PreTakeoffBuffer
satellites_used	src/NMEA/GPSState.hpp	/^  int satellites_used;$/;"	m	struct:GPSState
satellites_used_available	src/Logger/LoggerImpl.hpp	/^    bool satellites_used_available;$/;"	m	struct:LoggerImpl::PreTakeoffBuffer
satellites_used_available	src/NMEA/GPSState.hpp	/^  Validity satellites_used_available;$/;"	m	struct:GPSState
saturday	src/Engine/Airspace/AirspaceActivity.hpp	/^    bool saturday:1;$/;"	m	struct:AirspaceActivity::Days
save	src/Dialogs/Device/Vega/VegaConfigurationDialog.cpp	/^    PixelRect demo, save;$/;"	m	struct:final::Layout	file:
saveImage	src/Topography/shapelib/mapserver.h	/^    int WARN_UNUSED (*saveImage)(imageObj *img, mapObj *map, FILE *fp, outputFormatObj *format);$/;"	m	struct:rendererVTableObj
saveImageBuffer	src/Topography/shapelib/mapserver.h	/^    unsigned char* WARN_UNUSED (*saveImageBuffer)(imageObj *img, int *size_ptr, outputFormatObj *format);$/;"	m	struct:rendererVTableObj
save_button	src/Dialogs/Device/Vega/VegaConfigurationDialog.cpp	/^  Button demo_button, save_button;$/;"	m	class:final	file:
save_button	src/Dialogs/Waypoint/Manager.cpp	/^  Button *new_button, *edit_button, *save_button, *delete_button;$/;"	m	class:final	file:
save_timer	src/Cloud/Main.cpp	/^  CoarseTimerEvent save_timer, expire_timer;$/;"	m	class:final	file:
saved_extent	src/Topography/shapelib/mapserver.h	/^    rectObj saved_extent;$/;"	m	struct:mapObj
saved_targets	src/Engine/Task/Solvers/TaskMacCreadyRemaining.hpp	/^  std::array<GeoPoint, MAX_SIZE> saved_targets;$/;"	m	class:final
sc	src/Gauge/FlarmTrafficWindow.hpp	/^  PixelPoint sc[TrafficList::MAX_COUNT];$/;"	m	class:FlarmTrafficWindow
scalar_type	src/Math/Line2D.hpp	/^  typedef typename Point::scalar_type scalar_type;$/;"	t	struct:Line2D
scalar_type	src/Math/Point2D.hpp	/^  typedef T scalar_type;$/;"	t	struct:Point2D
scale	src/Projection/Projection.hpp	/^  double scale;$/;"	m	class:Projection
scale	src/Renderer/ChartRenderer.hpp	/^    double scale, min, max;$/;"	m	struct:ChartRenderer::Axis
scale	src/Screen/Layout.cpp	/^  unsigned scale = 1;$/;"	m	namespace:Layout	file:
scale	src/Topography/shapelib/mapserver.h	/^    double outlinewidth, rotation,scale;$/;"	m	struct:tileCacheObj
scale	src/Topography/shapelib/mapserver.h	/^    double scale;$/;"	m	struct:__anon63
scale	src/UISettings.hpp	/^  unsigned scale;$/;"	m	struct:UISettings
scaleTokenEntryObj	src/Topography/shapelib/mapserver.h	/^  } scaleTokenEntryObj;$/;"	t	typeref:struct:__anon52
scaleTokenObj	src/Topography/shapelib/mapserver.h	/^  } scaleTokenObj;$/;"	t	typeref:struct:__anon53
scale_1024	src/Screen/Layout.cpp	/^  unsigned scale_1024 = 1024;$/;"	m	namespace:Layout	file:
scale_buffer	src/MapWindow/MapWindow.hpp	/^  unsigned scale_buffer = 0;$/;"	m	class:MapWindow
scale_runway_length	src/Renderer/WaypointRendererSettings.hpp	/^  bool scale_runway_length;$/;"	m	struct:WaypointRendererSettings
scale_threshold	src/Topography/Thread.hpp	/^  double scale_threshold;$/;"	m	class:final
scale_threshold	src/Topography/TopographyFile.hpp	/^  const double scale_threshold;$/;"	m	class:TopographyFile
scalebar	src/Topography/shapelib/mapserver.h	/^    scalebarObj scalebar;$/;"	m	struct:mapObj
scalebarObj	src/Topography/shapelib/mapserver.h	/^  } scalebarObj;$/;"	t	typeref:struct:__anon47
scaled_trail_pens	src/Look/TrailLook.hpp	/^  Pen scaled_trail_pens[NUMSNAILCOLORS];$/;"	m	struct:TrailLook
scaledenom	src/Topography/shapelib/mapserver.h	/^    double scaledenom; \/* scale of the output image *\/$/;"	m	struct:mapObj
scalefactor	src/Topography/shapelib/mapserver.h	/^    double scalefactor,resolutionfactor;$/;"	m	struct:__anon38
scalefactor	src/Topography/shapelib/mapserver.h	/^    double scalefactor; \/* computed, not set *\/$/;"	m	struct:layerObj
scaletokens	src/Topography/shapelib/mapserver.h	/^    scaleTokenObj *scaletokens;$/;"	m	struct:layerObj
scaling_enabled	src/MapSettings.hpp	/^  bool scaling_enabled;$/;"	m	struct:TrailSettings
scan_overview	src/Terrain/Loader.hpp	/^  const bool scan_overview, scan_tiles;$/;"	m	class:TerrainLoader
scan_tiles	src/Terrain/Loader.hpp	/^  const bool scan_overview, scan_tiles;$/;"	m	class:TerrainLoader
scheduled_flags	src/event/SocketEvent.hxx	/^	unsigned scheduled_flags = 0;$/;"	m	class:final
score	src/Engine/Contest/ContestResult.hpp	/^  double score;$/;"	m	struct:ContestResult
score_exit	src/Dialogs/Task/TaskPointDialog.cpp	/^    PixelRect optional_starts, score_exit;$/;"	m	struct:final::Layout	file:
score_exit	src/Dialogs/Task/TaskPointDialog.cpp	/^  CheckBoxControl score_exit;$/;"	m	class:final	file:
score_exit	src/Engine/Task/Ordered/Points/ASTPoint.hpp	/^  bool score_exit = false;$/;"	m	class:final
scratch	src/Topography/shapelib/mapprimitive.h	/^  int scratch;$/;"	m	struct:__anon72
screen	src/ui/window/TopWindow.hpp	/^  TopCanvas *screen = nullptr;$/;"	m	class:UI::TopWindow
screen_angle	src/Projection/Projection.hpp	/^  Angle screen_angle = Angle::Zero();$/;"	m	class:Projection
screen_blanked	src/UIState.hpp	/^  bool screen_blanked;$/;"	m	struct:UIState
screen_bounds	src/Projection/WindowProjection.hpp	/^  GeoBounds screen_bounds;$/;"	m	class:WindowProjection
screen_bounds	src/Renderer/TaskRenderer.hpp	/^  GeoBounds screen_bounds;$/;"	m	class:TaskRenderer
screen_distance_meters	src/CalculationThread.hpp	/^  double screen_distance_meters;$/;"	m	class:final
screen_initialized	src/Screen/Debug.cpp	/^static bool screen_initialized = false;$/;"	v	file:
screen_origin	src/Projection/Projection.hpp	/^  PixelPoint screen_origin = {0, 0};$/;"	m	class:Projection
screen_rotation	src/Projection/Projection.hpp	/^  FastIntegerRotation screen_rotation;$/;"	m	class:Projection
screen_rotation	src/Renderer/WaypointIconRenderer.hpp	/^  Angle screen_rotation;$/;"	m	class:WaypointIconRenderer
screen_size	src/Projection/WindowProjection.hpp	/^  PixelSize screen_size;$/;"	m	class:WindowProjection
screen_size_initialised	src/Projection/WindowProjection.hpp	/^  bool screen_size_initialised = false;$/;"	m	class:WindowProjection
scroll_bar	src/Form/List.cpp	/^   scroll_bar(look.button)$/;"	f
scroll_bar	src/Form/List.hpp	/^  ScrollBar scroll_bar;$/;"	m	class:ListControl
sea_brush	src/Look/CrossSectionLook.hpp	/^  Brush sea_brush;$/;"	m	struct:CrossSectionLook
sea_color	src/Look/CrossSectionLook.hpp	/^  Color sea_color;$/;"	m	struct:CrossSectionLook
search	src/Engine/Task/Solvers/TaskBestMc.cpp	/^TaskBestMc::search(const double mc)$/;"	f	class:TaskBestMc
search	src/Engine/Task/Solvers/TaskBestMc.cpp	/^TaskBestMc::search(const double mc, double &result)$/;"	f	class:TaskBestMc
search	src/Engine/Task/Solvers/TaskGlideRequired.cpp	/^TaskGlideRequired::search(const double S)$/;"	f	class:TaskGlideRequired
search	src/Engine/Task/Solvers/TaskMinTarget.cpp	/^TaskMinTarget::search(const double tp)$/;"	f	class:TaskMinTarget
search	src/Engine/Task/Solvers/TaskOptTarget.cpp	/^TaskOptTarget::search(const double tp)$/;"	f	class:TaskOptTarget
search	src/Engine/Task/Solvers/TaskSolveTravelled.cpp	/^TaskSolveTravelled::search(const double ce)$/;"	f	class:TaskSolveTravelled
searchDiskTreeNode	src/Topography/shapelib/maptree.c	/^static void searchDiskTreeNode(SHPTreeHandle disktree, rectObj aoi, ms_bitarray status)$/;"	f	file:
search_hull	src/Engine/Route/RoutePlanner.hpp	/^  SearchPointVector search_hull;$/;"	m	class:RoutePlanner
search_max	src/Engine/Task/Points/SampledTaskPoint.hpp	/^  SearchPoint search_max;$/;"	m	class:SampledTaskPoint
search_min	src/Engine/Task/Points/SampledTaskPoint.hpp	/^  SearchPoint search_min;$/;"	m	class:SampledTaskPoint
search_range	src/Engine/Contest/Solvers/Retrospective.hpp	/^  double search_range;$/;"	m	class:Retrospective
searchrect	src/Topography/shapelib/mapshape.h	/^    rectObj searchrect;$/;"	m	struct:__anon79
seat	src/ui/event/poll/WaylandQueue.hpp	/^  struct wl_seat *seat = nullptr;$/;"	m	class:UI::final	typeref:struct:UI::final::wl_seat
seat_listener	src/ui/event/poll/WaylandQueue.cpp	/^static constexpr struct wl_seat_listener seat_listener = {$/;"	m	namespace:UI	typeref:struct:UI::wl_seat_listener	file:
second	src/Device/Driver/CAI302/Protocol.hpp	/^    uint8_t year, month, day, hour, minute, second;$/;"	m	struct:CAI302::DateTime
second	src/Engine/Route/RouteLink.hpp	/^    :first(_dest), second(_origin) {}$/;"	f	struct:RouteLinkBase
second	src/Engine/Route/RouteLink.hpp	/^  RoutePoint second;$/;"	m	struct:RouteLinkBase
second	src/Widget/TwoWidgets.hpp	/^  const std::unique_ptr<Widget> first, second;$/;"	m	class:TwoWidgets
second	src/time/BrokenTime.hpp	/^  uint8_t second;$/;"	m	struct:BrokenTime
second_argument_type	src/ui/canvas/memory/PixelOperations.hpp	/^  typedef color_type second_argument_type;$/;"	t	struct:PixelIntegerAdapter
second_device	src/Device/Descriptor.hpp	/^  Device *second_device;$/;"	m	class:final
second_driver	src/Device/Descriptor.hpp	/^  const DeviceRegister *second_driver;$/;"	m	class:final
second_font	src/Renderer/TwoTextRowsRenderer.hpp	/^  const Font *first_font, *second_font;$/;"	m	class:TwoTextRowsRenderer
second_y	src/Renderer/TwoTextRowsRenderer.hpp	/^  int x, first_y, second_y;$/;"	m	class:TwoTextRowsRenderer
secondary_device	src/NMEA/Info.hpp	/^  DeviceInfo secondary_device;$/;"	m	struct:NMEAInfo
secondary_info	src/Dialogs/Device/LX/ManageV7Dialog.cpp	/^  const DeviceInfo secondary_info;$/;"	m	class:final	file:
seconds	src/Math/Angle.hpp	/^    unsigned degrees, minutes, seconds;$/;"	m	struct:Angle::DMS
sector_angle	src/Engine/Task/ObservationZones/SymmetricSectorZone.hpp	/^  Angle sector_angle;$/;"	m	class:SymmetricSectorZone
sector_defaults	src/Engine/Task/TaskBehaviour.hpp	/^  SectorDefaults sector_defaults;$/;"	m	struct:TaskBehaviour
sector_end	src/Engine/Task/ObservationZones/SectorZone.hpp	/^  GeoPoint sector_end;$/;"	m	class:SectorZone
sector_start	src/Engine/Task/ObservationZones/SectorZone.hpp	/^  GeoPoint sector_start;$/;"	m	class:SectorZone
security	src/Device/Driver/LX/LXN.hpp	/^    const struct Security *security;$/;"	m	union:LXN::Packet	typeref:struct:LXN::Packet::Security
security	src/Kobo/WPASupplicant.hpp	/^  enum WifiSecurity security;$/;"	m	struct:WifiVisibleNetwork	typeref:enum:WifiVisibleNetwork::WifiSecurity
security	src/Kobo/WifiDialog.cpp	/^    enum WifiSecurity security;$/;"	m	struct:final::NetworkInfo	typeref:enum:final::NetworkInfo::WifiSecurity	file:
security_7000	src/Device/Driver/LX/LXN.hpp	/^    const Security7000 *security_7000;$/;"	m	union:LXN::Packet
security_old	src/Device/Driver/LX/LXN.hpp	/^    const struct SecurityOld *security_old;$/;"	m	union:LXN::Packet	typeref:struct:LXN::Packet::SecurityOld
seek_	src/Terrain/jasper/jas_stream.h	/^	long (*seek_)(jas_stream_obj_t *obj, long offset, int origin);$/;"	m	struct:__anon96
seeks	src/zzip/plugin.h	/^    zzip_off_t   (*seeks)(int fd, zzip_off_t offset, int whence);$/;"	m	struct:zzip_plugin_io
seen_flying	src/Logger/FlightLogger.hpp	/^  bool seen_on_ground, seen_flying;$/;"	m	class:FlightLogger
seen_on_ground	src/Logger/FlightLogger.hpp	/^  bool seen_on_ground, seen_flying;$/;"	m	class:FlightLogger
segment_lengths	src/Topography/shapelib/mapserver.h	/^    double *segment_lengths;$/;"	m	struct:line_lengths
segments	src/Terrain/RasterTileCache.hpp	/^  StaticArray<MarkerSegmentInfo, 8192> segments;$/;"	m	class:RasterTileCache
segs	src/Terrain/jasper/jpc/jpc_dec.h	/^	jpc_dec_seglist_t segs;$/;"	m	struct:__anon122
select	src/Dialogs/ProfileListDialog.cpp	/^  const bool select;$/;"	m	class:final	file:
select_button	src/Dialogs/Device/ScanBluetoothLeDialog.cpp	/^  Button *select_button;$/;"	m	class:final	file:
selected	src/Form/Button.hpp	/^  bool selected;$/;"	m	class:Button
selected	src/Look/DialogLook.hpp	/^    } selected;$/;"	m	struct:DialogLook::__anon13	typeref:struct:DialogLook::__anon13::__anon14
selected_airspace	src/Dialogs/Airspace/dlgAirspaceWarnings.cpp	/^  const AbstractAirspace *selected_airspace;$/;"	m	class:final	file:
selected_index	src/Form/ButtonPanel.hpp	/^  int selected_index;$/;"	m	class:ButtonPanel
selection	src/Gauge/FlarmTrafficWindow.hpp	/^  int selection;$/;"	m	class:FlarmTrafficWindow
selection_brush	src/Look/FlarmTrafficLook.hpp	/^  Brush selection_brush;$/;"	m	struct:FlarmTrafficLook
selection_color	src/Look/FlarmTrafficLook.hpp	/^  Color selection_color;$/;"	m	struct:FlarmTrafficLook
selection_pen	src/Look/FlarmTrafficLook.hpp	/^  Pen selection_pen;$/;"	m	struct:FlarmTrafficLook
sensor	src/Device/Driver/IMI/Protocol/Types.hpp	/^    IMIBYTE sensor;$/;"	m	struct:IMI::TDeclarationHeader
sensor	src/Device/Driver/IMI/Protocol/Types.hpp	/^    IMIBYTE sensor;$/;"	m	struct:IMI::TDeviceInfo
sensor0Offset	src/Device/Driver/IMI/Protocol/Types.hpp	/^    IMISWORD sensor0Offset;$/;"	m	struct:IMI::TDeviceInfo
sensor8kOffset	src/Device/Driver/IMI/Protocol/Types.hpp	/^    IMISWORD sensor8kOffset;$/;"	m	struct:IMI::TDeviceInfo
sensor_calibration_available	src/NMEA/Info.hpp	/^  Validity sensor_calibration_available;$/;"	m	struct:NMEAInfo
sensor_calibration_factor	src/NMEA/Info.hpp	/^  double sensor_calibration_factor; \/\/ 0 is not a valid factor.$/;"	m	struct:NMEAInfo
sensor_calibration_offset	src/NMEA/Info.hpp	/^  double sensor_calibration_offset;$/;"	m	struct:NMEAInfo
sensor_factor	src/Device/Config.hpp	/^  double sensor_factor;$/;"	m	struct:DeviceConfig
sensor_offset	src/Device/Config.hpp	/^  double sensor_offset;$/;"	m	struct:DeviceConfig
sensors	src/Device/Driver/IMI/Protocol/IGC.cpp	/^static const IMI::IMICHAR *const sensors[] =$/;"	m	class:IMI	file:
sensors_cls	src/Android/InternalSensors.cpp	/^Java::TrivialClass InternalSensors::gps_cls, InternalSensors::sensors_cls;$/;"	m	class:InternalSensors	file:
sensors_cls	src/Android/InternalSensors.hpp	/^  static Java::TrivialClass gps_cls, sensors_cls;$/;"	m	class:InternalSensors
sensors_ctor_id	src/Android/InternalSensors.cpp	/^jmethodID InternalSensors::sensors_ctor_id;$/;"	m	class:InternalSensors	file:
sensors_ctor_id	src/Android/InternalSensors.hpp	/^  static jmethodID sensors_ctor_id;$/;"	m	class:InternalSensors
separator	src/util/IterableSplitString.hxx	/^		value_type separator;$/;"	m	class:BasicIterableSplitString::final
separator	src/util/IterableSplitString.hxx	/^	value_type separator;$/;"	m	class:BasicIterableSplitString
separator_height	src/MainWindow.cpp	/^static constexpr unsigned separator_height = 2;$/;"	v	file:
seqno	src/Terrain/jasper/jpc/jpc_cs.h	/^	uint_fast16_t seqno;$/;"	m	struct:__anon151
sequence_number	src/Device/Driver/FLARM/BinaryProtocol.hpp	/^    PackedLE16 sequence_number;$/;"	m	struct:FLARM::FrameHeader
sequence_number	src/Device/Driver/FLARM/Device.hpp	/^  uint16_t sequence_number = 0;$/;"	m	class:FlarmDevice
serial	src/Airspace/AirspaceWarningCopy.hpp	/^  unsigned serial;$/;"	m	class:AirspaceWarningCopy
serial	src/Device/Driver/LX/LXN.hpp	/^    char serial[9];$/;"	m	struct:LXN::Serial
serial	src/Device/Driver/LX/LXN.hpp	/^    const struct Serial *serial;$/;"	m	union:LXN::Packet	typeref:struct:LXN::Packet::Serial
serial	src/Dialogs/Task/Manager/TaskListPanel.cpp	/^  unsigned serial;$/;"	m	class:final	file:
serial	src/Engine/Airspace/AirspaceWarningManager.hpp	/^  unsigned serial;$/;"	m	class:AirspaceWarningManager
serial	src/Engine/Airspace/Airspaces.hpp	/^  Serial serial;$/;"	m	class:Airspaces
serial	src/Engine/Waypoint/Waypoints.hpp	/^  Serial serial;$/;"	m	class:Waypoints
serial	src/NMEA/DeviceInfo.hpp	/^  NarrowString<16> serial;$/;"	m	struct:DeviceInfo
serial	src/Terrain/RasterTileCache.hpp	/^  Serial serial;$/;"	m	class:RasterTileCache
serial	src/Topography/TopographyFile.hpp	/^  Serial serial;$/;"	m	class:TopographyFile
serial	src/Topography/TopographyStore.hpp	/^  unsigned serial;$/;"	m	class:TopographyStore
serno	src/Device/Driver/Volkslogger/vlconv.h	/^	unsigned int  serno; \/\/ FR serial number$/;"	m	struct:DIRENTRY
server	src/Cloud/Sender.hpp	/^  SkyLinesTracking::Server &server;$/;"	m	class:ThermalResponseSender
server	src/Cloud/Sender.hpp	/^  SkyLinesTracking::Server &server;$/;"	m	class:TrafficResponseSender
server	src/Tracking/LiveTrack24.cpp	/^static NarrowString<256> server;$/;"	m	namespace:LiveTrack24	file:
server	src/Tracking/LiveTrack24/Settings.hpp	/^  StaticString<64> server;$/;"	m	struct:LiveTrack24::Settings
server_list	src/Dialogs/Settings/Panels/TrackingConfigPanel.cpp	/^static constexpr StaticEnumChoice server_list[] = {$/;"	v	file:
session_id	src/Tracking/TrackingGlue.hpp	/^    LiveTrack24::SessionID session_id;$/;"	m	struct:final::LiveTrack24State
set	src/Geo/Boost/GeoPoint.hpp	/^  static inline void set(GeoPoint &p, double value) {$/;"	f	struct:boost::geometry::traits::access
set	src/event/WinSelectBackend.hxx	/^	fd_set set;$/;"	m	class:SocketSet
setBaudRate	src/Android/PortBridge.hpp	/^  bool setBaudRate(JNIEnv *env, int baud_rate) {$/;"	f	class:PortBridge
setBaudRate_method	src/Android/PortBridge.cpp	/^jmethodID PortBridge::setBaudRate_method;$/;"	m	class:PortBridge	file:
setBaudRate_method	src/Android/PortBridge.hpp	/^  static jmethodID getBaudRate_method, setBaudRate_method;$/;"	m	class:PortBridge
setClip	src/Topography/shapelib/mapserver.h	/^    int (*setClip)(imageObj *img, rectObj clipRect);$/;"	m	struct:rendererVTableObj
setConnectTimeout	src/java/URL.hxx	/^	static void setConnectTimeout(JNIEnv *env, jobject connection,$/;"	f	class:Java::URLConnection
setConnectTimeout_method	src/java/URL.cxx	/^jmethodID Java::URLConnection::setConnectTimeout_method;$/;"	m	class:Java::URLConnection	file:
setConnectTimeout_method	src/java/URL.hxx	/^	static jmethodID setConnectTimeout_method;$/;"	m	class:Java::URLConnection
setInputListener	src/Android/PortBridge.cpp	/^PortBridge::setInputListener(JNIEnv *env, DataHandler *handler)$/;"	f	class:PortBridge
setInputListener_method	src/Android/PortBridge.cpp	/^jmethodID PortBridge::setInputListener_method;$/;"	m	class:PortBridge	file:
setInputListener_method	src/Android/PortBridge.hpp	/^  static jmethodID setInputListener_method;$/;"	m	class:PortBridge
setListener	src/Android/PortBridge.cpp	/^PortBridge::setListener(JNIEnv *env, PortListener *_listener)$/;"	f	class:PortBridge
setListener_method	src/Android/PortBridge.cpp	/^jmethodID PortBridge::setListener_method;$/;"	m	class:PortBridge	file:
setListener_method	src/Android/PortBridge.hpp	/^  static jmethodID setListener_method;$/;"	m	class:PortBridge
setMode	src/Input/InputEvents.cpp	/^InputEvents::setMode(Mode mode)$/;"	f	class:InputEvents
setMode	src/Input/InputEvents.cpp	/^InputEvents::setMode(const TCHAR *mode)$/;"	f	class:InputEvents
setReadTimeout	src/java/URL.hxx	/^	static void setReadTimeout(JNIEnv *env, jobject connection,$/;"	f	class:Java::URLConnection
setReadTimeout_method	src/java/URL.cxx	/^jmethodID Java::URLConnection::setReadTimeout_method;$/;"	m	class:Java::URLConnection	file:
setReadTimeout_method	src/java/URL.hxx	/^	static jmethodID setReadTimeout_method;$/;"	m	class:Java::URLConnection
setRequestedOrientation	src/Android/NativeView.hpp	/^  bool setRequestedOrientation(ScreenOrientation so) {$/;"	f	class:NativeView
setRequestedOrientationID	src/Android/NativeView.cpp	/^jmethodID NativeView::setRequestedOrientationID;$/;"	m	class:NativeView	file:
setRequestedOrientationID	src/Android/NativeView.hpp	/^  static jmethodID setRequestedOrientationID;$/;"	m	class:NativeView
set_active_freq	src/InfoBoxes/Panel/RadioEdit.cpp	/^    :OffsetButtonsWidget(UIGlobals::GetDialogLook().button, _T("%.0f KHz"), 5, 1000),set_active_freq(active_freq) {}$/;"	f	class:final
set_active_freq	src/InfoBoxes/Panel/RadioEdit.cpp	/^  bool set_active_freq;$/;"	m	class:final	file:
set_cruise_efficiency	src/Engine/Task/Solvers/TaskMacCready.hpp	/^  void set_cruise_efficiency(double ce) {$/;"	f	class:TaskMacCready
set_depth	src/Engine/Route/ReachFanParms.hpp	/^  unsigned char set_depth = 0;$/;"	m	struct:ReachFanParms
set_mc	src/Engine/Task/Solvers/TaskMacCready.hpp	/^  void set_mc(double mc) {$/;"	f	class:TaskMacCready
set_range	src/Engine/Task/Solvers/TaskMacCreadyRemaining.cpp	/^TaskMacCreadyRemaining::set_range(const double tp, const bool force_current)$/;"	f	class:TaskMacCreadyRemaining
set_range	src/Engine/Task/Solvers/TaskMinTarget.cpp	/^TaskMinTarget::set_range(const double p)$/;"	f	class:TaskMinTarget
set_system_time_from_gps	src/Computer/Settings.hpp	/^  bool set_system_time_from_gps;$/;"	m	struct:ComputerSettings
set_terrain	src/Computer/RouteComputer.cpp	/^RouteComputer::set_terrain(const RasterTerrain* _terrain) {$/;"	f	class:RouteComputer
set_tp_search_achieved	src/Engine/Task/Ordered/OrderedTask.cpp	/^OrderedTask::set_tp_search_achieved(unsigned tp, const SearchPoint &sol)$/;"	f	class:OrderedTask
set_way_points	src/Renderer/WaypointRenderer.hpp	/^  void set_way_points(const Waypoints *_way_points) {$/;"	f	class:WaypointRenderer
settings	src/CrossSection/AirspaceXSRenderer.cpp	/^  const AirspaceRendererSettings &settings;$/;"	m	class:final	file:
settings	src/CrossSection/AirspaceXSRenderer.hpp	/^  AirspaceRendererSettings settings;$/;"	m	class:AirspaceXSRenderer
settings	src/Device/Driver/BlueFly/Internal.hpp	/^  BlueFlySettings settings;$/;"	m	class:BlueFlyDevice
settings	src/Device/Driver/FLARM/Device.hpp	/^  DeviceSettingsMap<std::string> settings;$/;"	m	class:FlarmDevice
settings	src/Device/Driver/Vega/Internal.hpp	/^  DeviceSettingsMap<int> settings;$/;"	m	class:VegaDevice
settings	src/Dialogs/Airspace/AirspaceCRendererSettingsPanel.hpp	/^  AirspaceClassRendererSettings settings;$/;"	m	class:AirspaceClassRendererSettingsPanel
settings	src/Dialogs/MapItemListDialog.cpp	/^  const MapSettings &settings;$/;"	m	class:final	file:
settings	src/Dialogs/Settings/Panels/PagesConfigPanel.cpp	/^  PageSettings settings;$/;"	m	class:PageListWidget	file:
settings	src/Engine/GlideSolvers/MacCready.hpp	/^  gcc_unused_field const GlideSettings &settings;$/;"	m	class:MacCready
settings	src/Engine/Task/Solvers/TaskMacCready.hpp	/^  const GlideSettings &settings;$/;"	m	class:TaskMacCready
settings	src/Gauge/FlarmTrafficWindow.hpp	/^  TeamCodeSettings settings;$/;"	m	class:FlarmTrafficWindow
settings	src/InfoBoxes/InfoBoxWindow.hpp	/^  const InfoBoxSettings &settings;$/;"	m	class:InfoBoxWindow
settings	src/MapWindow/StencilMapCanvas.hpp	/^  const AirspaceRendererSettings &settings;$/;"	m	class:StencilMapCanvas
settings	src/NMEA/Info.hpp	/^  ExternalSettings settings;$/;"	m	struct:NMEAInfo
settings	src/PopupMessage.hpp	/^  const UISettings &settings;$/;"	m	class:PopupMessage
settings	src/Renderer/AirspaceRendererGL.cpp	/^  const AirspaceRendererSettings &settings;$/;"	m	class:final	file:
settings	src/Renderer/AirspaceRendererOther.cpp	/^  const AirspaceRendererSettings &settings;$/;"	m	class:final	file:
settings	src/Renderer/MapItemListRenderer.hpp	/^  const MapSettings &settings;$/;"	m	class:MapItemListRenderer
settings	src/Renderer/OZRenderer.hpp	/^  const AirspaceRendererSettings &settings;$/;"	m	class:OZRenderer
settings	src/Renderer/WaypointIconRenderer.hpp	/^  const WaypointRendererSettings &settings;$/;"	m	class:WaypointIconRenderer
settings	src/Renderer/WaypointRenderer.cpp	/^  const WaypointRendererSettings &settings;$/;"	m	class:final	file:
settings	src/Terrain/TerrainRenderer.hpp	/^  struct TerrainRendererSettings settings;$/;"	m	class:TerrainRenderer	typeref:struct:TerrainRenderer::TerrainRendererSettings
settings	src/Tracking/TrackingGlue.hpp	/^  TrackingSettings settings;$/;"	m	class:final
settings_button	src/Dialogs/MapItemListDialog.cpp	/^  Button *settings_button, *details_button, *cancel_button, *goto_button;$/;"	m	class:final	file:
settings_computer	src/CalculationThread.hpp	/^  ComputerSettings settings_computer;$/;"	m	class:final
settings_cond	src/Device/Driver/BlueFly/Internal.hpp	/^  Cond settings_cond;$/;"	m	class:BlueFlyDevice
settings_funcs	src/lua/Logger.cpp	/^static constexpr struct luaL_Reg settings_funcs[] = {$/;"	v	typeref:struct:luaL_Reg	file:
settings_funcs	src/lua/Replay.cpp	/^static constexpr struct luaL_Reg settings_funcs[] = {$/;"	v	typeref:struct:luaL_Reg	file:
settings_funcs	src/lua/Settings.cpp	/^static constexpr struct luaL_Reg settings_funcs[] = {$/;"	v	typeref:struct:luaL_Reg	file:
settings_funcs	src/lua/Tracking.cpp	/^static constexpr struct luaL_Reg settings_funcs[] = {$/;"	v	typeref:struct:luaL_Reg	file:
settings_funcs	src/lua/Wind.cpp	/^static constexpr struct luaL_Reg settings_funcs[] = {$/;"	v	typeref:struct:luaL_Reg	file:
settings_keys	src/Device/Driver/BlueFly/Internal.hpp	/^  char *settings_keys;$/;"	m	class:BlueFlyDevice
settings_map	src/Blackboard/MapSettingsBlackboard.hpp	/^  MapSettings settings_map;$/;"	m	class:MapSettingsBlackboard
settings_ready	src/Device/Driver/BlueFly/Internal.hpp	/^  bool settings_ready;$/;"	m	class:BlueFlyDevice
settings_received	src/Device/Descriptor.hpp	/^  ExternalSettings settings_received;$/;"	m	class:final
settings_sent	src/Device/Descriptor.hpp	/^  ExternalSettings settings_sent;$/;"	m	class:final
setup_pages	src/Dialogs/Settings/dlgConfiguration.cpp	/^static constexpr TabMenuPage setup_pages[] = {$/;"	v	file:
severity	src/FLARM/Error.hpp	/^  Severity severity;$/;"	v
severity_strings	src/FLARM/Error.cpp	/^static const TCHAR *const severity_strings[] = {$/;"	v	file:
sfile_close	src/Terrain/jasper/base/jas_stream.c	/^static int sfile_close(jas_stream_obj_t *obj)$/;"	f	file:
sfile_read	src/Terrain/jasper/base/jas_stream.c	/^static int sfile_read(jas_stream_obj_t *obj, char *buf, unsigned cnt)$/;"	f	file:
sfile_seek	src/Terrain/jasper/base/jas_stream.c	/^static long sfile_seek(jas_stream_obj_t *obj, long offset, int origin)$/;"	f	file:
sfile_write	src/Terrain/jasper/base/jas_stream.c	/^static int sfile_write(jas_stream_obj_t *obj, const char *buf, unsigned cnt)$/;"	f	file:
sgn	src/Geo/Flat/FlatRay.cpp	28;"	d	file:
sgnd	src/Terrain/jasper/jas_image.h	/^	int sgnd;$/;"	m	struct:__anon102
sgnd	src/Terrain/jasper/jpc/jpc_cs.h	/^	uint_fast8_t sgnd;$/;"	m	struct:__anon136
sgnd	src/Terrain/jasper/jpc/jpc_dec.h	/^	bool sgnd;$/;"	m	struct:__anon128
sgnd_	src/Terrain/jasper/jas_image.h	/^	int sgnd_;$/;"	m	struct:__anon100
sha256	src/net/http/ToFile.cpp	/^  SHA256State sha256;$/;"	m	class:final	file:
sha256	src/net/http/ToFile.hpp	/^  std::array<std::byte, 32> sha256;$/;"	m	class:Net::DownloadToFileJob
sha256_hash	src/Repository/AvailableFile.hpp	/^  std::array<std::byte, 32> sha256_hash;$/;"	m	struct:AvailableFile
shading_angle	src/Renderer/BackgroundRenderer.hpp	/^  Angle shading_angle = DEFAULT_SHADING_ANGLE;$/;"	m	class:BackgroundRenderer
shadowcolor	src/Topography/shapelib/mapserver.h	/^    colorObj shadowcolor;$/;"	m	struct:labelObj
shadowsizex	src/Topography/shapelib/mapserver.h	/^    int shadowsizex, shadowsizey;$/;"	m	struct:labelObj
shadowsizey	src/Topography/shapelib/mapserver.h	/^    int shadowsizex, shadowsizey;$/;"	m	struct:labelObj
shape	src/Device/Declaration.hpp	/^    Shape shape;$/;"	m	struct:Declaration::TurnPoint
shape	src/Dialogs/Plane/PolarShapeEditWidget.hpp	/^  PolarShape shape;$/;"	m	class:PolarShapeEditWidget
shape	src/Engine/Airspace/AbstractAirspace.hpp	/^  const Shape shape;$/;"	m	class:AbstractAirspace
shape	src/Engine/Task/ObservationZones/ObservationZone.hpp	/^  const Shape shape;$/;"	m	class:ObservationZone
shape	src/Polar/Polar.hpp	/^  PolarShape shape;$/;"	m	struct:PolarInfo
shape	src/Renderer/TextInBox.hpp	/^  LabelShape shape = LabelShape::SIMPLE;$/;"	v
shape	src/Topography/TopographyFile.hpp	/^    const XShape *shape;$/;"	m	struct:TopographyFile::ShapeList
shape	src/Topography/shapelib/mapserver.h	/^    shapeObj *shape; \/* by shape & operator (OGC filter) *\/$/;"	m	struct:__anon33
shape	src/Topography/shapelib/mapserver.h	/^    shapeObj *shape; \/* for vector layers *\/$/;"	m	struct:__anon29
shape	src/Topography/shapelib/mapserver.h	/^    shapeObj shape;$/;"	m	struct:listNode
shape	src/Topography/shapelib/mapserver.h	/^    shapeObj* shape;$/;"	m	struct:__anon43
shapeObj	src/Topography/shapelib/mapprimitive.h	/^} shapeObj;$/;"	t	typeref:struct:__anon72
shape_renderer	src/Topography/TopographyFileRenderer.hpp	/^  mutable ShapeRenderer shape_renderer;$/;"	m	class:final
shape_tree_node	src/Topography/shapelib/maptree.h	/^  typedef struct shape_tree_node {$/;"	s
shapefileObj	src/Topography/shapelib/mapshape.h	/^  } shapefileObj;$/;"	t	typeref:struct:__anon78
shapeindex	src/Topography/shapelib/mapserver.h	/^    long shapeindex; \/* by index *\/$/;"	m	struct:__anon33
shapeindex	src/Topography/shapelib/mapserver.h	/^    long shapeindex;$/;"	m	struct:__anon43
shapepath	src/Topography/shapelib/mapserver.h	/^    char *shapepath; \/* where are the shape files located *\/$/;"	m	struct:mapObj
shapes	src/Topography/TopographyFile.hpp	/^  AllocatedArray<ShapeList> shapes;$/;"	m	class:TopographyFile
shapetype	src/Topography/shapelib/mapserver.h	/^    int shapetype; \/* source geometry type, can be removed once annotation layers are dropped *\/$/;"	m	struct:__anon39
shell	src/ui/event/poll/WaylandQueue.hpp	/^  struct wl_shell *shell = nullptr;$/;"	m	class:UI::final	typeref:struct:UI::final::wl_shell
shell_surface_listener	src/ui/window/wayland/TopWindow.cpp	/^static constexpr struct wl_shell_surface_listener shell_surface_listener = {$/;"	m	namespace:UI	typeref:struct:UI::wl_shell_surface_listener	file:
shift	src/util/OverwritingRingBuffer.hpp	/^  const T &shift() {$/;"	f	class:TrivialOverwritingRingBuffer
shift_bias_list	src/Dialogs/Settings/Panels/MapDisplayConfigPanel.cpp	/^static constexpr StaticEnumChoice shift_bias_list[] = {$/;"	v	file:
shift_button	src/Widget/KeyboardWidget.hpp	/^  Button shift_button;$/;"	m	class:KeyboardWidget
shift_state	src/Widget/KeyboardWidget.hpp	/^  bool shift_state;$/;"	m	class:KeyboardWidget
shortest_max	src/Engine/Contest/Solvers/TriangleContest.hpp	/^    unsigned shortest_max, longest_min, longest_max;$/;"	m	struct:TriangleContest::CandidateSet
show_average	src/Gauge/VarioSettings.hpp	/^  bool show_average;$/;"	m	struct:VarioSettings
show_average_needle	src/Gauge/VarioSettings.hpp	/^  bool show_average_needle;$/;"	m	struct:VarioSettings
show_ballast	src/Gauge/VarioSettings.hpp	/^  bool show_ballast;$/;"	m	struct:VarioSettings
show_bugs	src/Gauge/VarioSettings.hpp	/^  bool show_bugs;$/;"	m	struct:VarioSettings
show_fai_triangle_areas	src/MapSettings.hpp	/^  bool show_fai_triangle_areas;$/;"	m	struct:MapSettings
show_final_glide_altitude_difference	src/Device/Driver/CAI302/Protocol.hpp	/^    uint8_t show_final_glide_altitude_difference;$/;"	m	struct:CAI302::Pilot
show_flarm_alarm_level	src/MapSettings.hpp	/^  bool show_flarm_alarm_level;$/;"	m	struct:MapSettings
show_flarm_on_map	src/MapSettings.hpp	/^  bool show_flarm_on_map;$/;"	m	struct:MapSettings
show_gross	src/Gauge/VarioSettings.hpp	/^  bool show_gross;$/;"	m	struct:VarioSettings
show_mc	src/Gauge/VarioSettings.hpp	/^  bool show_mc;$/;"	m	struct:VarioSettings
show_menu_button	src/MainWindow.hpp	/^  ShowMenuButton *show_menu_button = nullptr;$/;"	m	class:MainWindow
show_menu_button	src/UISettings.hpp	/^  bool show_menu_button;$/;"	m	struct:UISettings
show_shift_button	src/Widget/KeyboardWidget.hpp	/^  const bool show_shift_button;$/;"	m	class:KeyboardWidget
show_speed_to_fly	src/Gauge/VarioSettings.hpp	/^  bool show_speed_to_fly;$/;"	m	struct:VarioSettings
show_thermal_average_needle	src/Gauge/VarioSettings.hpp	/^  bool show_thermal_average_needle;$/;"	m	struct:VarioSettings
show_thermal_profile	src/MapSettings.hpp	/^  bool show_thermal_profile;$/;"	m	struct:MapSettings
show_thermals	src/Tracking/SkyLines/CloudSettings.hpp	/^  bool show_thermals;$/;"	m	struct:SkyLinesTracking::CloudSettings
shown	src/Widget/RowFormWidget.hpp	/^    bool initialised, prepared, shown;$/;"	m	struct:RowFormWidget::Row
shpfile	src/Topography/shapelib/mapshape.h	/^    shapefileObj *shpfile;$/;"	m	struct:__anon79
shpval	src/Topography/shapelib/mapserver.h	/^    shapeObj *shpval;$/;"	m	union:__anon26
shpval	src/Topography/shapelib/mapserver.h	/^    shapeObj *shpval;$/;"	m	union:__anon27
shrink_button	src/Dialogs/Waypoint/dlgWaypointDetails.cpp	/^    PixelRect magnify_button, shrink_button;$/;"	m	struct:final::Layout	file:
shrink_button	src/Dialogs/Waypoint/dlgWaypointDetails.cpp	/^  Button magnify_button, shrink_button;$/;"	m	class:final	file:
shutdown	src/Android/IOIOHelper.hpp	/^  void shutdown(JNIEnv *env) {$/;"	f	class:IOIOHelper
shutdown_method	src/Android/IOIOHelper.cpp	/^  IOIOHelper::shutdown_method;$/;"	m	class:IOIOHelper	file:
shutdown_method	src/Android/IOIOHelper.hpp	/^  static jmethodID shutdown_method;$/;"	m	class:IOIOHelper
siblings	src/ui/window/Window.hpp	/^  SiblingsHook siblings;$/;"	m	class:Window
siblings	src/util/IntrusiveList.hxx	/^	IntrusiveListNode siblings;$/;"	m	class:IntrusiveListHook
side_display_type	src/Gauge/FlarmTrafficWindow.hpp	/^  } side_display_type;$/;"	m	class:FlarmTrafficWindow	typeref:enum:FlarmTrafficWindow::SideInfoType
side_info_font	src/Look/FlarmTrafficLook.hpp	/^  Font label_font, side_info_font, no_traffic_font;$/;"	m	struct:FlarmTrafficLook
sign	src/Device/Driver/IMI/Protocol/Conversion.hpp	/^        IMIDWORD sign :1;$/;"	m	struct:IMI::AngleConverter::__anon161::__anon162
signal_handlers	src/event/SignalMonitor.cxx	/^static SignalHandler signal_handlers[MAX_SIGNAL];$/;"	v	file:
signal_level	src/Kobo/WPASupplicant.hpp	/^  unsigned signal_level;$/;"	m	struct:WifiVisibleNetwork
signal_level	src/Kobo/WifiDialog.cpp	/^    int signal_level;$/;"	m	struct:final::NetworkInfo	file:
signal_mask	src/event/SignalMonitor.cxx	/^static sigset_t signal_mask;$/;"	v	file:
signal_pending	src/event/SignalMonitor.cxx	/^static std::atomic_bool signal_pending[MAX_SIGNAL];$/;"	v	file:
signature	src/Device/Driver/CAI302/Protocol.hpp	/^    char signature[201];$/;"	m	struct:CAI302::FileSignatureASCII
signature	src/Device/Driver/IMI/Protocol/Types.hpp	/^    IMIBYTE signature[IMIRSA_MAX_BITS \/ 8];$/;"	m	struct:IMI::Signature
signature	src/Device/Driver/IMI/Protocol/Types.hpp	/^    Signature signature;$/;"	m	struct:IMI::Flight
signature	src/Topography/shapelib/maptree.h	/^    char        signature[3];$/;"	m	struct:__anon81
silence_count	src/Audio/VarioSynthesiser.hpp	/^  size_t silence_count;$/;"	m	class:final
silence_remaining	src/Audio/VarioSynthesiser.hpp	/^  size_t audible_remaining, silence_remaining;$/;"	m	class:final
sim_bitmap	src/Dialogs/SimulatorPromptWindow.hpp	/^  Bitmap fly_bitmap, sim_bitmap;$/;"	m	class:final
sim_button	src/Dialogs/SimulatorPromptWindow.hpp	/^  Button fly_button, sim_button;$/;"	m	class:final
sim_set_in_cmd_line_flag	src/Simulator.cpp	/^bool sim_set_in_cmd_line_flag;$/;"	v
simple_bounds	src/MapWindow/OverlayBitmap.hpp	/^  GeoBounds simple_bounds;$/;"	m	class:final
simulator	src/Blackboard/DeviceBlackboard.hpp	/^  Simulator simulator;$/;"	m	class:DeviceBlackboard
simulator	src/Logger/LoggerImpl.hpp	/^  bool simulator;$/;"	m	class:LoggerImpl
simulator	src/NMEA/GPSState.hpp	/^  bool simulator;$/;"	m	struct:GPSState
simulator_data	src/Blackboard/DeviceBlackboard.hpp	/^  NMEAInfo simulator_data;$/;"	m	class:DeviceBlackboard
sin	src/Math/Angle.hpp	/^  inline double sin() const {$/;"	f	class:Angle
sink_brush	src/Look/VarioLook.hpp	/^  Brush sink_brush, lift_brush;$/;"	m	struct:VarioLook
sink_color	src/Look/VarioLook.hpp	/^  Color sink_color, lift_color;$/;"	m	struct:VarioLook
sink_factor	src/Replay/TaskAutoPilot.hpp	/^  double sink_factor;$/;"	m	struct:AutopilotParameters
sink_rate	src/NMEA/VarioInfo.hpp	/^  double sink_rate;$/;"	m	struct:VarioInfo
sink_tone	src/Device/Driver/CAI302/Protocol.hpp	/^    uint8_t sink_tone;$/;"	m	struct:CAI302::Pilot
sinking_altitude	src/Computer/FlyingComputer.hpp	/^  double sinking_altitude;$/;"	m	class:FlyingComputer
sinking_clock	src/Computer/WaveComputer.hpp	/^  StateClock<20, 5> sinking_clock;$/;"	m	class:WaveComputer
sinking_location	src/Computer/FlyingComputer.hpp	/^  GeoPoint sinking_location;$/;"	m	class:FlyingComputer
sinking_since	src/Computer/FlyingComputer.hpp	/^  double sinking_since;$/;"	m	class:FlyingComputer
sint	src/Math/FastRotation.hpp	/^    :cost(angle.fastcosine()), sint(angle.fastsine()) {}$/;"	f	class:FastRotation
sint	src/Math/FastRotation.hpp	/^    :cost(angle.ifastcosine()), sint(angle.ifastsine()) {}$/;"	f	class:FastIntegerRotation
sint	src/Math/FastRotation.hpp	/^  double cost = 1, sint = 0;$/;"	m	class:FastRotation
sint	src/Math/FastRotation.hpp	/^  int cost = ONE, sint = 0;$/;"	m	class:FastIntegerRotation
sis_at	src/Engine/Contest/ContestManager.hpp	/^  OLCSISAT sis_at;$/;"	m	class:ContestManager
sit	src/Device/Driver/IMI/Protocol/Types.hpp	/^    IMICHAR sit[IMIDECL_SIT_LENGTH];$/;"	m	struct:IMI::TDeclarationHeader
siu	src/Device/Driver/IMI/Protocol/IGC.cpp	/^static unsigned siu = 0;$/;"	v	file:
siu	src/IGC/IGCFix.hpp	/^  int16_t siu;$/;"	m	struct:IGCFix
siz	src/Terrain/jasper/jpc/jpc_cs.h	/^	jpc_siz_t siz;$/;"	m	union:__anon155
size	src/Computer/GlideRatioCalculator.hpp	/^  unsigned short size;$/;"	m	class:GlideRatioCalculator
size	src/Device/Driver/CAI302/Protocol.hpp	/^    uint16_t size;$/;"	m	struct:CAI302::FileSignatureASCII
size	src/Dialogs/FileManager.cpp	/^    StaticString<32u> size;$/;"	m	struct:ManagedFileListWidget::FileItem	file:
size	src/Dialogs/FileManager.cpp	/^    int64_t size, position;$/;"	m	struct:ManagedFileListWidget::DownloadStatus	file:
size	src/Dialogs/Task/Manager/TaskMapButtonRenderer.hpp	/^  mutable PixelSize size;$/;"	m	class:TaskMapButtonRenderer
size	src/Engine/Airspace/AirspaceWarningManager.hpp	/^  AirspaceWarningList::size_type size() const {$/;"	f	class:AirspaceWarningManager
size	src/Engine/ThermalBand/ThermalBand.hpp	/^  unsigned size() const {$/;"	f	class:ThermalBand
size	src/Engine/Trace/Trace.hpp	/^  unsigned size() const {$/;"	f	class:Trace
size	src/Engine/Waypoint/Waypoints.hpp	/^  unsigned size() const {$/;"	f	class:Waypoints
size	src/Form/DataField/ComboList.hpp	/^  unsigned size() const {$/;"	f	class:ComboList
size	src/Form/DataField/File.cpp	/^FileDataField::size() const$/;"	f	class:FileDataField
size	src/Geo/ConvexHull/GrahamScan.hpp	/^  const unsigned size;$/;"	m	class:GrahamScan
size	src/Language/LanguageGlue.hpp	/^  const size_t size;$/;"	m	struct:BuiltinLanguage
size	src/Language/MOFile.hpp	/^  size_t size;$/;"	m	class:MOFile
size	src/MapWindow/MapWindowGlideRange.cpp	/^  ProjectedFanVector::size_type size() const {$/;"	f	struct:ProjectedFans
size	src/MapWindow/MapWindowGlideRange.cpp	/^  unsigned size;$/;"	m	struct:ProjectedFan	file:
size	src/Renderer/WaypointLabelList.hpp	/^    :size(_size) {}$/;"	f	class:WaypointLabelList
size	src/Renderer/WaypointLabelList.hpp	/^  const PixelSize size;$/;"	m	class:WaypointLabelList
size	src/Replay/TaskAccessor.hpp	/^  unsigned size() const {$/;"	f	class:TaskAccessor
size	src/Terrain/ScanLine.cpp	/^  unsigned size;$/;"	m	struct:GridRay	file:
size	src/Terrain/jasper/base/jas_malloc.c	/^	size_t size;$/;"	m	struct:__anon157	file:
size	src/Topography/TopographyStore.hpp	/^  unsigned size() const {$/;"	f	class:TopographyStore
size	src/Topography/shapelib/mapprimitive.h	/^  int size;$/;"	m	struct:__anon73
size	src/Topography/shapelib/mapserver.h	/^    double size;$/;"	m	struct:__anon64
size	src/Topography/shapelib/mapserver.h	/^    double size;$/;"	m	struct:styleObj
size	src/Topography/shapelib/mapserver.h	/^    int size;$/;"	m	struct:imageObj
size	src/Topography/shapelib/mapserver.h	/^    int size;$/;"	m	struct:labelObj
size	src/Topography/shapelib/mapserver.h	/^    size_t size;$/;"	m	struct:_autobuffer
size	src/io/FileCache.cpp	/^  uint64_t size;$/;"	m	struct:FileInfo	file:
size	src/net/AllocatedSocketAddress.hxx	/^		:address(src.address), size(src.size) {$/;"	f	class:AllocatedSocketAddress
size	src/net/AllocatedSocketAddress.hxx	/^	size_type size = 0;$/;"	m	class:AllocatedSocketAddress
size	src/net/SocketAddress.hxx	/^		:address(_address), size(_size) {}$/;"	f	class:SocketAddress
size	src/net/SocketAddress.hxx	/^	size_type size;$/;"	m	class:SocketAddress
size	src/net/StaticSocketAddress.hxx	/^	size_type size;$/;"	m	class:StaticSocketAddress
size	src/system/FileMapping.hpp	/^  size_t size() const {$/;"	f	class:FileMapping
size	src/ui/canvas/Bitmap.hpp	/^  PixelSize size;$/;"	m	class:final
size	src/ui/canvas/Icon.hpp	/^  PixelSize size;$/;"	m	class:MaskedIcon
size	src/ui/canvas/gdi/Canvas.hpp	/^  PixelSize size;$/;"	m	class:Canvas
size	src/ui/canvas/opengl/Canvas.hpp	/^  PixelSize size = {0, 0};$/;"	m	class:Canvas
size	src/ui/canvas/opengl/Texture.hpp	/^  PixelSize size;$/;"	m	class:GLTexture
size	src/ui/window/Window.hpp	/^  PixelSize size = {0, 0};$/;"	m	class:Window
size	src/util/ConstBuffer.hxx	/^		:data(_data), size(_size) {}$/;"	f	struct:ConstBuffer
size	src/util/ConstBuffer.hxx	/^	size_type size;$/;"	m	struct:ConstBuffer
size	src/util/QuadTree.hxx	/^		unsigned size;$/;"	m	struct:LeafList
size	src/util/StringView.hxx	/^		:ConstBuffer<T>(src.data(), src.size()) {}$/;"	f	struct:BasicStringView
size	src/util/WritableBuffer.hxx	/^		:data(_data), size(_size) {}$/;"	f	struct:WritableBuffer
size	src/util/WritableBuffer.hxx	/^	size_type size;$/;"	m	struct:WritableBuffer
size_cache	src/ui/canvas/custom/Cache.cpp	/^static Cache<TextCacheKey, PixelSize, 1024u, 701u, TextCacheKey::Hash> size_cache;$/;"	v	file:
size_type	src/net/AllocatedSocketAddress.hxx	/^	typedef SocketAddress::size_type size_type;$/;"	t	class:AllocatedSocketAddress
size_type	src/net/SocketAddress.hxx	/^	typedef int size_type;$/;"	t	class:SocketAddress
size_type	src/net/StaticSocketAddress.hxx	/^	typedef SocketAddress::size_type size_type;$/;"	t	class:StaticSocketAddress
size_type	src/util/ConstBuffer.hxx	/^	typedef std::size_t size_type;$/;"	t	struct:ConstBuffer
size_type	src/util/ReservablePriorityQueue.hpp	/^  typedef typename std::priority_queue<T, Container, Compare>::size_type size_type;$/;"	t	class:reservable_priority_queue
size_type	src/util/ReusableArray.hpp	/^  typedef typename AllocatedArray<T>::size_type size_type;$/;"	t	class:ReusableArray
size_type	src/util/SliceAllocator.hxx	/^	typedef size_t size_type;$/;"	t	class:GlobalSliceAllocator
size_type	src/util/SliceAllocator.hxx	/^	typedef std::size_t size_type;$/;"	t	class:SliceAllocator
size_type	src/util/StringBuilder.hxx	/^	typedef size_t size_type;$/;"	t	class:StringBuilder
size_type	src/util/StringParser.hxx	/^	typedef size_t size_type;$/;"	t	class:StringParser
size_type	src/util/WritableBuffer.hxx	/^	typedef std::size_t size_type;$/;"	t	struct:WritableBuffer
sizeof	src/ui/canvas/memory/PixelTraits.hpp	/^  static_assert(sizeof(color_type) == sizeof(integer_type),$/;"	m	struct:BGRAPixelTraits
sizeof	src/util/ByteOrder.hxx	/^static_assert(sizeof(PackedBE16) == sizeof(uint16_t), "Wrong size");$/;"	v
sizeof	src/util/ByteOrder.hxx	/^static_assert(sizeof(PackedLE16) == sizeof(uint16_t), "Wrong size");$/;"	v
sizeof	src/util/ByteOrder.hxx	/^static_assert(sizeof(PackedLE32) == sizeof(uint32_t), "Wrong size");$/;"	v
sizeunits	src/Topography/shapelib/mapserver.h	/^    int sizeunits; \/* applies to all classes *\/$/;"	m	struct:layerObj
sky_brush	src/Look/HorizonLook.hpp	/^  Brush sky_brush;$/;"	m	struct:HorizonLook
sky_color	src/Look/CrossSectionLook.hpp	/^  Color sky_color;$/;"	m	struct:CrossSectionLook
sky_color	src/Look/HorizonLook.hpp	/^  Color sky_color;$/;"	m	struct:HorizonLook
sky_pen	src/Look/HorizonLook.hpp	/^  Pen sky_pen;$/;"	m	struct:HorizonLook
skylines	src/Tracking/TrackingGlue.cpp	/^   skylines(event_loop, this)$/;"	f
skylines	src/Tracking/TrackingGlue.hpp	/^  SkyLinesTracking::Glue skylines;$/;"	m	class:final
skylines	src/Tracking/TrackingSettings.hpp	/^  SkyLinesTracking::Settings skylines;$/;"	m	struct:TrackingSettings
skylines_data	src/MapWindow/MapWindow.hpp	/^  const SkyLinesTracking::Data *skylines_data = nullptr;$/;"	m	class:MapWindow
skylines_data	src/Tracking/TrackingGlue.hpp	/^  SkyLinesTracking::Data skylines_data;$/;"	m	class:final
skylines_id	src/Dialogs/Traffic/TrafficList.cpp	/^    uint32_t skylines_id = 0;$/;"	m	struct:TrafficListWidget::Item	file:
skylines_map_mode_list	src/Dialogs/Settings/Panels/SymbolsConfigPanel.cpp	/^static constexpr StaticEnumChoice skylines_map_mode_list[] = {$/;"	v	file:
skylines_traffic_map_mode	src/MapSettings.hpp	/^  DisplaySkyLinesTrafficMapMode skylines_traffic_map_mode;$/;"	m	struct:MapSettings
slayer	src/Topography/shapelib/mapserver.h	/^    int slayer; \/* selection layer, used for msQueryByFeatures() (note this is not a query mode per se) *\/$/;"	m	struct:__anon33
slices	src/Engine/ThermalBand/ThermalBand.hpp	/^  TrivialArray<ThermalSlice, NUM_SLICES> slices;$/;"	m	class:ThermalBand
slope	src/Topography/shapelib/mapsearch.c	377;"	d	file:
slope_shading	src/Terrain/TerrainSettings.hpp	/^  SlopeShading slope_shading;$/;"	m	struct:TerrainRendererSettings
slopek	src/ui/canvas/fb/mxcfb.h	/^	int slopek[16];$/;"	m	struct:mxcfb_gamma
slots	src/Math/Histogram.hpp	/^  std::array<DoublePoint2D, NUM_SLOTS> slots;$/;"	m	class:Histogram
slots	src/Math/XYDataStore.hpp	/^  TrivialArray<Slot, 1000> slots;$/;"	m	class:XYDataStore
slots	src/Topography/shapelib/mapserver.h	/^    labelCacheSlotObj slots[MS_MAX_LABEL_PRIORITY];$/;"	m	struct:__anon42
slowness	src/Engine/Route/RoutePolar.hpp	/^    double slowness;$/;"	m	struct:RoutePolar::RoutePolarPoint
small	src/Gauge/FlarmTrafficWindow.hpp	/^  bool small;$/;"	m	class:FlarmTrafficWindow
small	src/Gauge/ThermalAssistantRenderer.hpp	/^  bool small;$/;"	m	class:ThermalAssistantRenderer
small_circle_buffer	src/ui/canvas/opengl/Shapes.cpp	/^GLArrayBuffer *circle_buffer, *small_circle_buffer;$/;"	m	namespace:OpenGL	file:
small_font	src/Look/DialogLook.hpp	/^  Font text_font, bold_font, small_font;$/;"	m	struct:DialogLook
small_icon	src/Look/WaypointLook.hpp	/^  MaskedIcon small_icon, turn_point_icon, task_turn_point_icon;$/;"	m	struct:WaypointLook
small_icons	src/Renderer/WaypointIconRenderer.hpp	/^  bool small_icons;$/;"	m	class:WaypointIconRenderer
small_value_font	src/Look/InfoBoxLook.hpp	/^  Font value_font, small_value_font;$/;"	m	struct:InfoBoxLook
sn	src/Device/Driver/IMI/Protocol/Types.hpp	/^    IMIWORD sn;$/;"	m	struct:IMI::FlightInfo
sn	src/Device/Driver/IMI/Protocol/Types.hpp	/^    IMIWORD sn;$/;"	m	struct:IMI::TDeclarationHeader
sn	src/Device/Driver/IMI/Protocol/Types.hpp	/^    IMIWORD sn;$/;"	m	struct:IMI::TMsg
snDigits	src/Device/Driver/IMI/Protocol/IGC.cpp	/^static constexpr IMI::IMICHAR snDigits[] = "0123456789ABCDEFHJKLMNPRSTUVWXYZ";$/;"	v	file:
snprintf	src/Topography/shapelib/mapserver.h	183;"	d
soc	src/Terrain/jasper/jpc/jpc_cs.h	/^	int soc;	\/* unused *\/$/;"	m	union:__anon155
socket	src/Device/Port/TCPClientPort.hpp	/^  SocketEvent socket;$/;"	m	class:final
socket	src/Device/Port/TTYPort.hpp	/^  SocketEvent socket;$/;"	m	class:TTYPort
socket	src/Device/Port/UDPPort.hpp	/^  SocketEvent socket;$/;"	m	class:final
socket	src/Tracking/SkyLines/Client.hpp	/^  UniqueSocketDescriptor socket;$/;"	m	class:SkyLinesTracking::final
socket	src/Tracking/SkyLines/Server.hpp	/^  SocketEvent socket;$/;"	m	class:SkyLinesTracking::Server
socket_error_t	src/net/SocketError.hxx	/^typedef DWORD socket_error_t;$/;"	t
socket_error_t	src/net/SocketError.hxx	/^typedef int socket_error_t;$/;"	t
socket_event	src/Tracking/SkyLines/Client.hpp	/^  SocketEvent socket_event;$/;"	m	class:SkyLinesTracking::final
socket_event	src/net/http/Global.cxx	/^	SocketEvent socket_event;$/;"	m	class:final	file:
socket_event	src/ui/event/poll/WaylandQueue.hpp	/^  SocketEvent socket_event;$/;"	m	class:UI::final
socket_event	src/ui/event/poll/X11Queue.hpp	/^  SocketEvent socket_event;$/;"	m	class:UI::X11EventQueue
socket_event	src/ui/event/poll/linux/Input.hpp	/^  SocketEvent socket_event;$/;"	m	class:UI::final
sockets	src/event/net/cares/Channel.hxx	/^	std::forward_list<Socket> sockets;$/;"	m	class:Cares::Channel
sod	src/Terrain/jasper/jpc/jpc_cs.h	/^	int sod;	\/* unused *\/$/;"	m	union:__anon155
software	src/Device/Driver/LX/LXN.hpp	/^    uint8_t hardware, software;$/;"	m	struct:LXN::Version
software_version	src/FLARM/Version.hpp	/^  NarrowString<7> hardware_version, software_version;$/;"	m	struct:FlarmVersion
software_version	src/NMEA/DeviceInfo.hpp	/^  NarrowString<16> software_version;$/;"	m	struct:DeviceInfo
solid_brush	src/Look/AirspaceLook.hpp	/^  Brush solid_brush;$/;"	m	struct:AirspaceClassLook
solid_fragment_shader	src/ui/canvas/opengl/Shaders.cpp	/^static constexpr char solid_fragment_shader[] =$/;"	v	file:
solid_modelview	src/ui/canvas/opengl/Shaders.cpp	/^GLint solid_projection, solid_modelview;$/;"	m	namespace:OpenGL	file:
solid_projection	src/ui/canvas/opengl/Shaders.cpp	/^GLint solid_projection, solid_modelview;$/;"	m	namespace:OpenGL	file:
solid_shader	src/ui/canvas/opengl/Shaders.cpp	/^GLProgram *solid_shader;$/;"	m	namespace:OpenGL	file:
solid_vertex_shader	src/ui/canvas/opengl/Shaders.cpp	/^static constexpr char solid_vertex_shader[] =$/;"	v	file:
solution	src/Dialogs/Airspace/dlgAirspaceWarnings.cpp	/^  AirspaceInterceptSolution solution;$/;"	m	struct:WarningItem	file:
solution	src/Engine/Airspace/AirspaceWarning.hpp	/^  AirspaceInterceptSolution solution;$/;"	m	class:AirspaceWarning
solution	src/Engine/Contest/ContestStatistics.hpp	/^  ContestTraceVector solution[3];$/;"	m	struct:ContestStatistics
solution	src/Engine/Contest/Solvers/ContestDijkstra.hpp	/^  ContestTraceVector solution;$/;"	m	class:ContestDijkstra
solution	src/Engine/Contest/Solvers/OLCLeague.hpp	/^  ContestTraceVector solution;$/;"	m	class:OLCLeague
solution	src/Engine/Contest/Solvers/TriangleContest.hpp	/^  ContestTraceVector solution;$/;"	m	class:TriangleContest
solution	src/Engine/PathSolvers/NavDijkstra.hpp	/^  unsigned solution[MAX_STAGES];$/;"	m	class:NavDijkstra
solution	src/Engine/Task/Unordered/AbortTask.hpp	/^      :point(std::move(waypoint), tb), solution(_solution) {}$/;"	f	struct:AbortTask::AlternateTaskPoint
solution	src/Engine/Task/Unordered/AbortTask.hpp	/^    GlideResult solution;$/;"	m	struct:AbortTask::AlternateTaskPoint
solution	src/Engine/Task/Unordered/AlternatePoint.hpp	/^  GlideResult solution;$/;"	m	struct:AlternatePoint
solution_classic	src/Engine/Contest/Solvers/OLCLeague.hpp	/^  ContestTraceVector solution_classic;$/;"	m	class:OLCLeague
solution_classic	src/Engine/Contest/Solvers/OLCPlus.hpp	/^  ContestTraceVector solution_classic;$/;"	m	class:OLCPlus
solution_fai	src/Engine/Contest/Solvers/OLCPlus.hpp	/^  ContestTraceVector solution_fai;$/;"	m	class:OLCPlus
solution_mc0	src/Engine/Task/Stats/ElementStat.hpp	/^  GlideResult solution_mc0;$/;"	m	struct:ElementStat
solution_planned	src/Engine/Task/Stats/ElementStat.hpp	/^  GlideResult solution_planned;$/;"	m	struct:ElementStat
solution_remaining	src/Engine/Task/Stats/ElementStat.hpp	/^  GlideResult solution_remaining;$/;"	m	struct:ElementStat
solution_route	src/Engine/Route/RoutePlanner.hpp	/^  Route solution_route;$/;"	m	class:RoutePlanner
solution_travelled	src/Engine/Task/Stats/ElementStat.hpp	/^  GlideResult solution_travelled;$/;"	m	struct:ElementStat
solve	src/Engine/Airspace/AirspaceAircraftPerformance.cpp	/^  double solve(double &distance) {$/;"	f	class:final
solve	src/Engine/Airspace/AirspaceAircraftPerformance.cpp	/^  double solve(double &h) {$/;"	f	class:final
solve	src/Engine/GlideSolvers/GlidePolar.cpp	/^  double solve(const double Vstart) {$/;"	f	class:final
some_out_of_date	src/Dialogs/FileManager.cpp	/^  bool some_out_of_date;$/;"	m	class:ManagedFileListWidget	file:
sop	src/Terrain/jasper/jpc/jpc_cs.h	/^	jpc_sop_t sop;$/;"	m	union:__anon155
sortBy	src/Topography/shapelib/mapserver.h	/^    sortByClause sortBy;$/;"	m	struct:layerObj
sortByClause	src/Topography/shapelib/mapserver.h	/^  } sortByClause;$/;"	t	typeref:struct:__anon56
sortByProperties	src/Topography/shapelib/mapserver.h	/^  } sortByProperties;$/;"	t	typeref:struct:__anon55
sortOrder	src/Topography/shapelib/mapserver.h	/^      sortOrderEnum sortOrder;$/;"	m	struct:__anon55
sortOrderEnum	src/Topography/shapelib/mapserver.h	/^  } sortOrderEnum;$/;"	t	typeref:enum:__anon54
sortleft	src/Geo/ConvexHull/GrahamScan.cpp	/^sortleft$/;"	f	file:
sot	src/Terrain/jasper/jpc/jpc_cs.h	/^	jpc_sot_t sot;$/;"	m	union:__anon155
sound	src/StatusMessage.hpp	/^  const TCHAR *sound;$/;"	m	struct:StatusMessage
sound	src/UISettings.hpp	/^  SoundSettings sound;$/;"	m	struct:UISettings
sound_deadband	src/Audio/Settings.hpp	/^  uint8_t sound_deadband;$/;"	m	struct:SoundSettings
sound_interval_counter	src/Dialogs/Airspace/dlgAirspaceWarnings.cpp	/^  unsigned sound_interval_counter;$/;"	m	class:final	file:
sound_modes_enabled	src/Audio/Settings.hpp	/^  bool sound_modes_enabled;$/;"	m	struct:SoundSettings
sound_task_enabled	src/Audio/Settings.hpp	/^  bool sound_task_enabled;$/;"	m	struct:SoundSettings
source	src/Audio/PCMPlayer.hpp	/^  PCMDataSource *source = nullptr;$/;"	m	class:PCMPlayer
source	src/Audio/PCMPlayer.hpp	/^  PCMSynthesiser *source = nullptr;$/;"	m	class:PCMPlayer
source	src/Topography/shapelib/mapshape.h	/^    char source[MS_PATH_LENGTH]; \/* full path to this file data *\/$/;"	m	struct:__anon78
source	src/io/ConvertLineReader.hpp	/^  std::unique_ptr<LineReader<char>> source;$/;"	m	class:ConvertLineReader
source_color_type	src/ui/canvas/memory/PixelOperations.hpp	/^  typedef typename SourcePixelTraits::color_type source_color_type;$/;"	t	struct:BinaryWritePixel
source_color_type	src/ui/canvas/memory/PixelOperations.hpp	/^  typedef typename SourcePixelTraits::color_type source_color_type;$/;"	t	struct:PerPixelOperations
source_color_type	src/ui/canvas/memory/PixelOperations.hpp	/^  typedef typename SourcePixelTraits::color_type source_color_type;$/;"	t	struct:UnaryWritePixel
source_const_rpointer	src/ui/canvas/memory/PixelOperations.hpp	/^  typedef typename SourcePixelTraits::const_rpointer source_const_rpointer;$/;"	t	struct:PerPixelOperations
sources	src/Audio/PCMMixerDataSource.hpp	/^  PCMDataSource *sources[MAX_MIXER_SOURCES_COUNT] = {};$/;"	m	class:PCMMixerDataSource
sources	src/NMEA/ThermalLocator.hpp	/^  TrivialArray<ThermalSource, MAX_SOURCES> sources;$/;"	m	struct:ThermalLocatorInfo
space_size_10	src/Topography/shapelib/mapserver.h	/^    double space_size_10; \/*cached size of a single space character used for label text alignment of rfc40 *\/$/;"	m	struct:labelObj
spacer_1	src/Dialogs/Settings/Panels/TaskDefaultsConfigPanel.cpp	/^  spacer_1,$/;"	e	enum:ControlIndex	file:
spacer_1	src/Dialogs/Settings/Panels/TaskRulesConfigPanel.cpp	/^  spacer_1,$/;"	e	enum:ControlIndex	file:
spacer_1	src/Dialogs/Settings/Panels/UnitsConfigPanel.cpp	/^  spacer_1,$/;"	e	enum:ControlIndex	file:
spacer_2	src/Dialogs/Settings/Panels/TaskDefaultsConfigPanel.cpp	/^  spacer_2,$/;"	e	enum:ControlIndex	file:
spacer_2	src/Dialogs/Settings/Panels/TaskRulesConfigPanel.cpp	/^  spacer_2,$/;"	e	enum:ControlIndex	file:
spacer_2	src/Dialogs/Settings/Panels/UnitsConfigPanel.cpp	/^  spacer_2,$/;"	e	enum:ControlIndex	file:
spacer_3	src/Dialogs/Settings/Panels/TaskDefaultsConfigPanel.cpp	/^  spacer_3,$/;"	e	enum:ControlIndex	file:
special_page	src/PageState.hpp	/^  PageLayout special_page;$/;"	m	struct:PagesState
speed	src/Engine/Task/Stats/DistanceStat.hpp	/^  double speed;$/;"	m	class:DistanceStat
speed	src/Engine/Task/Stats/WindowStats.hpp	/^  double speed;$/;"	m	struct:WindowStats
speed	src/FLARM/Traffic.hpp	/^  RoughSpeed speed;$/;"	m	class:FlarmTraffic::AircraftType
speed	src/GliderLink/Traffic.hpp	/^  RoughSpeed speed;$/;"	m	struct:GliderLinkTraffic
speed_achieved	src/Dialogs/Task/TargetDialog.cpp	/^    PixelRect range, radial, ete, delta_t, speed_remaining, speed_achieved;$/;"	m	struct:TargetWidget::Layout	file:
speed_achieved	src/Dialogs/Task/TargetDialog.cpp	/^  WndProperty range, radial, ete, delta_t, speed_remaining, speed_achieved;$/;"	m	class:TargetWidget	file:
speed_factor	src/Replay/TaskAutoPilot.hpp	/^  double speed_factor;$/;"	m	class:TaskAutoPilot
speed_incremental	src/Engine/Task/Stats/DistanceStat.hpp	/^  double speed_incremental;$/;"	m	class:DistanceStat
speed_received	src/FLARM/Traffic.hpp	/^  bool speed_received;$/;"	m	class:FlarmTraffic::AircraftType
speed_received	src/GliderLink/Traffic.hpp	/^  bool speed_received;$/;"	m	struct:GliderLinkTraffic
speed_remaining	src/Dialogs/Task/TargetDialog.cpp	/^    PixelRect range, radial, ete, delta_t, speed_remaining, speed_achieved;$/;"	m	struct:TargetWidget::Layout	file:
speed_remaining	src/Dialogs/Task/TargetDialog.cpp	/^  WndProperty range, radial, ete, delta_t, speed_remaining, speed_achieved;$/;"	m	class:TargetWidget	file:
speed_unit	src/Units/Settings.hpp	/^  Unit speed_unit;$/;"	m	struct:UnitSetting
speedup	src/Form/DataField/Integer.hpp	/^  int speedup;$/;"	m	class:final
speedup	src/Form/DataField/Time.hpp	/^  uint8_t speedup;$/;"	m	class:final
sprint	src/Computer/TraceComputer.hpp	/^  Trace full, contest, sprint;$/;"	m	class:TraceComputer
sprint_trace_size	src/Computer/TraceComputer.cpp	/^static constexpr unsigned sprint_trace_size =$/;"	v	file:
sqrt_epsilon	src/Math/ZeroFinder.cpp	/^static const double sqrt_epsilon = sqrt(epsilon);$/;"	v	file:
squared_distance	src/Computer/WaveComputer.cpp	/^  double ratio, squared_distance;$/;"	m	struct:RatioAndDistance	file:
src	src/Form/DataField/ComboList.hpp	/^    Item &operator=(Item &&src) = default;$/;"	m	struct:ComboList::Item
src	src/Form/DataField/ComboList.hpp	/^    Item(Item &&src) = default;$/;"	m	struct:ComboList::Item
src	src/ui/canvas/Bitmap.hpp	/^  Bitmap(Bitmap &&src) = default;$/;"	m	class:final
src	src/ui/canvas/custom/UncompressedImage.hpp	/^  UncompressedImage &operator=(UncompressedImage &&src) = default;$/;"	m	class:UncompressedImage
src_counter	src/Terrain/RasterBuffer.cpp	/^  unsigned src_increment, src_counter;$/;"	m	class:PixelIterator	file:
src_increment	src/Terrain/RasterBuffer.cpp	/^  unsigned src_increment, src_counter;$/;"	m	class:PixelIterator	file:
srwlock	src/thread/WindowsSharedMutex.hxx	/^	SRWLOCK srwlock = SRWLOCK_INIT;$/;"	m	class:WindowsSharedMutex
ssid	src/Kobo/WPASupplicant.hpp	/^  StaticString<256> ssid;$/;"	m	struct:WifiConfiguredNetworkInfo
ssid	src/Kobo/WPASupplicant.hpp	/^  StaticString<256> ssid;$/;"	m	struct:WifiStatus
ssid	src/Kobo/WPASupplicant.hpp	/^  StaticString<256> ssid;$/;"	m	struct:WifiVisibleNetwork
ssid	src/Kobo/WifiDialog.cpp	/^    StaticString<256> ssid;$/;"	m	struct:final::NetworkInfo	file:
st_size	src/zzip/zzip.h	/^    int	 	st_size;	\/* file size \/ decompressed size *\/$/;"	m	struct:zzip_dirent
stage_weights	src/Engine/Contest/Solvers/ContestDijkstra.hpp	/^  unsigned stage_weights[MAX_STAGES];$/;"	m	class:ContestDijkstra
stall_ratio	src/NMEA/Info.hpp	/^  double stall_ratio;$/;"	m	struct:NMEAInfo
stall_ratio_available	src/NMEA/Info.hpp	/^  Validity stall_ratio_available;$/;"	m	struct:NMEAInfo
stamp	src/Cloud/Client.hpp	/^  std::chrono::steady_clock::time_point stamp;$/;"	m	struct:CloudClient
standard	src/Look/ButtonLook.hpp	/^  } standard, focused;$/;"	m	struct:ButtonLook	typeref:struct:ButtonLook::StateLook
standard	src/Look/CheckBoxLook.hpp	/^  } standard, focused, pressed, disabled;$/;"	m	struct:CheckBoxLook	typeref:struct:CheckBoxLook::StateLook
standby_freq_name	src/NMEA/ExternalSettings.hpp	/^  StaticString<32> standby_freq_name;$/;"	m	struct:ExternalSettings
standby_frequency	src/Computer/Settings.hpp	/^  RadioFrequency standby_frequency;$/;"	m	struct:RadioSettings
standby_frequency	src/NMEA/ExternalSettings.hpp	/^  RadioFrequency standby_frequency;$/;"	m	struct:ExternalSettings
standby_frequency_panels	src/InfoBoxes/Content/Radio.cpp	/^static constexpr InfoBoxPanel standby_frequency_panels[] = {$/;"	v	file:
standby_name	src/Computer/Settings.hpp	/^  StaticString<32> standby_name;$/;"	m	struct:RadioSettings
start	src/Computer/GlideRatioCalculator.hpp	/^  unsigned short start;$/;"	m	class:GlideRatioCalculator
start	src/CrossSection/AirspaceXSRenderer.cpp	/^  const GeoPoint start;$/;"	m	class:final	file:
start	src/CrossSection/CrossSectionRenderer.hpp	/^  GeoPoint start = GeoPoint::Invalid();$/;"	m	class:CrossSectionRenderer
start	src/Device/Driver/IMI/Protocol/Types.hpp	/^    IMIDATETIMESEC start;$/;"	m	struct:IMI::FlightInfo
start	src/Device/Driver/KRT2.cpp	/^    uint8_t start = STX;$/;"	m	struct:final::stx_msg	file:
start	src/Device/Driver/LX/LXN.hpp	/^    const struct Start *start;$/;"	m	union:LXN::Packet	typeref:struct:LXN::Packet::Start
start	src/Engine/Task/Stats/TaskStats.hpp	/^  StartStats start;$/;"	m	class:TaskStats
start	src/IGC/IGCExtensions.hpp	/^  uint16_t start, finish;$/;"	m	struct:IGCExtension
start	src/Math/ARange.hpp	/^  Angle start, end;$/;"	m	struct:AngleRange
start	src/Terrain/ScanLine.cpp	/^  GridLocation start, end;$/;"	m	struct:GridRay	file:
start	src/Weather/METARParser.cpp	/^  TCHAR *start, *data, *end;$/;"	m	class:METARLine	file:
start	src/Weather/NOAAFormatter.cpp	/^  const TCHAR *start;$/;"	m	class:NOAALineSplitter	file:
start	src/time/RoughTime.hpp	/^  RoughTime start;$/;"	m	class:RoughTimeSpan
startLayer	src/Topography/shapelib/mapserver.h	/^    int (*startLayer)(imageObj *img, mapObj *map, layerObj *layer);$/;"	m	struct:rendererVTableObj
startLeScan_method	src/Android/BluetoothHelper.cpp	/^static jmethodID startLeScan_method, stopLeScan_method;$/;"	m	namespace:BluetoothHelper	file:
startProfileFile	src/Profile/Profile.cpp	/^static AllocatedPath startProfileFile = nullptr;$/;"	v	file:
startShape	src/Topography/shapelib/mapserver.h	/^    int (*startShape)(imageObj *img, shapeObj *shape);$/;"	m	struct:rendererVTableObj
start_address	src/Device/Driver/LX/Protocol.hpp	/^    MemoryAddress24 start_address, end_address;$/;"	m	struct:LX::SeekMemory
start_address	src/Device/Driver/LX/Protocol.hpp	/^    MemoryAddress32 start_address;$/;"	m	struct:LX::FlightInfo
start_address	src/Device/RecordedFlight.hpp	/^      uint8_t start_address[3];$/;"	m	struct:RecordedFlightInfo::__anon159::__anon160
start_alt	src/Replay/TaskAutoPilot.hpp	/^  double start_alt;$/;"	m	struct:AutopilotParameters
start_altitude	src/Engine/GlideSolvers/GlideResult.hpp	/^  double start_altitude;$/;"	m	struct:GlideResult
start_altitude	src/NMEA/ClimbInfo.hpp	/^  double start_altitude;$/;"	m	struct:OneClimbInfo
start_constraints	src/Engine/Task/Ordered/Settings.hpp	/^  StartConstraints start_constraints;$/;"	m	struct:OrderedTaskSettings
start_margins	src/Engine/Task/TaskBehaviour.hpp	/^  TaskStartMargins start_margins;$/;"	m	struct:TaskBehaviour
start_offset	src/Device/Driver/Volkslogger/Database.hpp	/^    uint16_t start_offset;$/;"	m	struct:Volkslogger::TableHeader
start_open_time_span	src/Engine/Task/Stats/CommonStats.hpp	/^  RoughTimeSpan start_open_time_span;$/;"	m	class:CommonStats
start_point	src/Engine/Waypoint/Waypoint.hpp	/^    bool start_point:1;$/;"	m	struct:Waypoint::Flags
start_radial	src/Engine/Task/ObservationZones/SectorZone.hpp	/^  Angle start_radial;$/;"	m	class:SectorZone
start_radius	src/Engine/Task/TaskBehaviour.hpp	/^  double start_radius;$/;"	m	struct:SectorDefaults
start_requires_arm	src/Engine/Task/Factory/Constraints.hpp	/^  bool start_requires_arm;$/;"	m	struct:TaskFactoryConstraints
start_time	src/Device/Driver/LX/Protocol.hpp	/^    char start_time[9];$/;"	m	struct:LX::FlightInfo
start_time	src/FlightInfo.hpp	/^  BrokenTime start_time, end_time;$/;"	m	struct:FlightInfo
start_time	src/Logger/FlightLogger.hpp	/^  BrokenDateTime start_time;$/;"	m	class:FlightLogger
start_time	src/Logger/GlueFlightLogger.hpp	/^  BrokenDateTime start_time;$/;"	m	class:GlueFlightLogger
start_time	src/NMEA/ClimbInfo.hpp	/^  double start_time;$/;"	m	struct:OneClimbInfo
start_type	src/Engine/Task/TaskBehaviour.hpp	/^  TaskPointFactoryType start_type;$/;"	m	struct:SectorDefaults
start_types	src/Engine/Task/Factory/AbstractTaskFactory.hpp	/^  const LegalPointSet start_types;$/;"	m	class:AbstractTaskFactory
start_utc	src/Device/Driver/CAI302/Protocol.hpp	/^      struct DateTime start_utc, end_utc;$/;"	m	struct:CAI302::FileList::FileInfo	typeref:struct:CAI302::FileList::FileInfo::DateTime
startindex	src/Topography/shapelib/mapserver.h	/^    int  startindex;$/;"	m	struct:__anon33
startindex	src/Topography/shapelib/mapserver.h	/^    int startindex;$/;"	m	struct:layerObj
startpoint	src/Device/Driver/Volkslogger/vlapi2.h	/^      DCLWPT startpoint;$/;"	m	struct:VLAPI_DATA::DECLARATION::TASK
state	src/Airspace/AirspaceVisibility.hpp	/^  const AltitudeState &state;$/;"	m	class:AirspaceVisibility
state	src/CrossSection/AirspaceXSRenderer.cpp	/^  const AltitudeState& state;$/;"	m	class:final	file:
state	src/Crypto/SHA256.hxx	/^	crypto_hash_sha256_state state;$/;"	m	class:SHA256State
state	src/Device/Driver/IMI/Protocol/MessageParser.cpp	/^  } state;$/;"	m	namespace:IMI::MessageParser	typeref:enum:IMI::MessageParser::TState	file:
state	src/Device/Port/TCPClientPort.hpp	/^  PortState state = PortState::LIMBO;$/;"	m	class:final
state	src/Dialogs/Airspace/dlgAirspaceWarnings.cpp	/^  AirspaceWarning::State state;$/;"	m	struct:WarningItem	file:
state	src/Engine/Airspace/AirspaceWarning.hpp	/^  State state;$/;"	m	class:AirspaceWarning
state	src/Engine/Airspace/AirspaceWarningManager.cpp	/^  const AircraftState state;$/;"	m	class:final	file:
state	src/Engine/Task/Ordered/SmartTaskAdvance.hpp	/^  State state;$/;"	m	class:final
state	src/Monitor/AirspaceWarningMonitor.cpp	/^  AirspaceWarning::State state;$/;"	m	class:final	file:
state	src/Replay/AircraftSim.hpp	/^  AircraftState state, state_last;$/;"	m	class:AircraftSim
state	src/Terrain/jasper/jpc/jpc_dec.h	/^	int state;$/;"	m	struct:__anon127
state	src/Terrain/jasper/jpc/jpc_dec.h	/^	int state;$/;"	m	struct:__anon129
state	src/Tracking/TrackingGlue.hpp	/^  LiveTrack24State state;$/;"	m	class:final
state	src/Widget/ManagedWidget.hpp	/^    :parent(&_parent), widget(_widget), state(State::NONE) {}$/;"	f	class:ManagedWidget
state	src/Widget/ManagedWidget.hpp	/^    :widget(_widget), state(State::NONE) {}$/;"	f	class:ManagedWidget
state	src/Widget/ManagedWidget.hpp	/^  } state;$/;"	m	class:ManagedWidget	typeref:class:ManagedWidget::State
state	src/lua/Background.cpp	/^  Lua::StatePtr state;$/;"	m	class:final	file:
state	src/net/http/Request.hxx	/^	} state = State::HEADERS;$/;"	m	class:final	typeref:class:final::State
state	src/util/MD5.hpp	/^  State state;$/;"	m	class:MD5
state_entered	src/Engine/Task/Points/ScoredTaskPoint.hpp	/^  AircraftState state_entered;$/;"	m	class:ScoredTaskPoint
state_last	src/Engine/Airspace/AirspaceWarning.hpp	/^  State state_last;$/;"	m	class:AirspaceWarning
state_last	src/Replay/AircraftSim.hpp	/^  AircraftState state, state_last;$/;"	m	class:AircraftSim
static_p	src/Android/I2CbaroDevice.cpp	/^static double static_p = 0;$/;"	v	file:
static_parameters	src/Dialogs/Device/Vega/VegaParametersWidget.hpp	/^  const StaticParameter *static_parameters;$/;"	m	class:VegaParametersWidget
static_pressure	src/NMEA/Info.hpp	/^  AtmosphericPressure static_pressure;$/;"	m	struct:NMEAInfo
static_pressure_available	src/NMEA/Info.hpp	/^  Validity static_pressure_available;$/;"	m	struct:NMEAInfo
station	src/Device/Driver/KRT2.cpp	/^    char station[MAX_NAME_LENGTH];$/;"	m	struct:final::stx_msg	file:
station	src/MapWindow/Items/MapItem.hpp	/^  NOAAStore::iterator station;$/;"	m	struct:WeatherStationMapItem
station_iterator	src/Dialogs/Weather/NOAADetails.cpp	/^  NOAAStore::iterator station_iterator;$/;"	m	class:final	file:
stationary_at	src/Computer/FlyingComputer.hpp	/^  GeoPoint stationary_at;$/;"	m	class:FlyingComputer
stationary_clock	src/Computer/FlyingComputer.hpp	/^  StateClock<60, 5> stationary_clock;$/;"	m	class:FlyingComputer
stationary_since	src/Computer/FlyingComputer.hpp	/^  double stationary_since;$/;"	m	class:FlyingComputer
stations	src/Dialogs/Weather/NOAAList.cpp	/^  TrivialArray<ListItem, 20> stations;$/;"	m	class:final	file:
stations	src/Weather/NOAAStore.hpp	/^  StationContainer stations;$/;"	m	class:NOAAStore
stats	src/Engine/Contest/ContestManager.hpp	/^  ContestStatistics stats;$/;"	m	class:ContestManager
stats	src/Engine/Task/AbstractTask.hpp	/^  TaskStats stats;$/;"	m	class:AbstractTask
stats_clock	src/Computer/StatsComputer.hpp	/^  GPSClock stats_clock;$/;"	m	class:StatsComputer
stats_computer	src/Computer/GlideComputer.hpp	/^  StatsComputer stats_computer;$/;"	m	class:GlideComputer
stats_computer	src/Engine/Task/AbstractTask.hpp	/^  TaskStatsComputer stats_computer;$/;"	m	class:AbstractTask
status	src/FLARM/Data.hpp	/^  FlarmStatus status;$/;"	m	struct:FlarmData
status	src/Kobo/WifiDialog.cpp	/^  WifiStatus status;$/;"	m	class:final	file:
status	src/Topography/shapelib/mapserver.h	/^    int status; \/* ON, OFF or EMBED *\/$/;"	m	struct:__anon47
status	src/Topography/shapelib/mapserver.h	/^    int status; \/* ON, OFF or EMBED *\/$/;"	m	struct:__anon48
status	src/Topography/shapelib/mapserver.h	/^    int status; \/* has this label been drawn or not *\/$/;"	m	struct:__anon39
status	src/Topography/shapelib/mapserver.h	/^    int status; \/* is map creation on or off *\/$/;"	m	struct:mapObj
status	src/Topography/shapelib/mapserver.h	/^    int status; \/* on or off *\/$/;"	m	struct:layerObj
status	src/Topography/shapelib/mapserver.h	/^    int status;$/;"	m	struct:__anon34
status	src/Topography/shapelib/mapserver.h	/^    int status;$/;"	m	struct:__anon46
status	src/Topography/shapelib/mapserver.h	/^    int status;$/;"	m	struct:classObj
status	src/Topography/shapelib/mapshape.h	/^    ms_bitarray status;$/;"	m	struct:__anon78
status_page	src/Dialogs/dlgStatus.cpp	/^static int status_page = 0;$/;"	v	file:
std	src/NMEA/LiftDatabase.hpp	/^namespace std {$/;"	n
steady	src/UIUtil/KineticManager.hpp	/^  bool steady;$/;"	m	class:KineticManager
steady_clock_cache	src/event/Loop.hxx	/^	ClockCache<std::chrono::steady_clock> steady_clock_cache;$/;"	m	class:final
steady_clock_cache	src/ui/event/android/Queue.hpp	/^  ClockCache<std::chrono::steady_clock> steady_clock_cache;$/;"	m	class:UI::EventQueue
steady_clock_cache	src/ui/event/sdl/Queue.hpp	/^  ClockCache<std::chrono::steady_clock> steady_clock_cache;$/;"	m	class:UI::EventQueue
steady_clock_cache	src/ui/event/windows/Queue.hpp	/^  ClockCache<std::chrono::steady_clock> steady_clock_cache;$/;"	m	class:UI::EventQueue
steady_now	src/Cloud/Serialiser.hpp	/^  const std::chrono::steady_clock::time_point steady_now =$/;"	m	class:Deserialiser
steady_now	src/Cloud/Serialiser.hpp	/^  const std::chrono::steady_clock::time_point steady_now =$/;"	m	class:Serialiser
stealth	src/FLARM/Traffic.hpp	/^  bool stealth;$/;"	m	class:FlarmTraffic::AircraftType
stencil	src/MapWindow/StencilMapCanvas.hpp	/^  Canvas &stencil;$/;"	m	class:StencilMapCanvas
stencil_buffer	src/ui/canvas/opengl/BufferCanvas.hpp	/^  GLRenderBuffer *stencil_buffer = nullptr;$/;"	m	class:DisplayOrientation
step	src/Dialogs/Device/Vega/VegaParametersWidget.hpp	/^    int min_value, max_value, step;$/;"	m	struct:VegaParametersWidget::StaticParameter
step	src/Form/DataField/Angle.hpp	/^  unsigned step;$/;"	m	class:final
step	src/Form/DataField/Integer.hpp	/^  int step;$/;"	m	class:final
step	src/Form/DataField/Time.hpp	/^  unsigned step;$/;"	m	class:final
step	src/Weather/PCMet/Overlays.hpp	/^  unsigned step;$/;"	m	struct:PCMet::OverlayInfo
step_size	src/Screen/ProgressBar.hpp	/^  unsigned min_value = 0, max_value = 0, value = 0, step_size = 1;$/;"	m	class:ProgressBar
stepsize	src/Terrain/jasper/jpc/jpc_dec.h	/^	unsigned stepsize;$/;"	m	struct:__anon124
stepsizes	src/Terrain/jasper/jpc/jpc_cs.h	/^	uint_fast16_t *stepsizes;$/;"	m	struct:__anon143
stepsizes	src/Terrain/jasper/jpc/jpc_dec.h	/^	uint_fast16_t stepsizes[3 * JPC_MAXRLVLS + 1];$/;"	m	struct:__anon119
stf	src/Device/Driver/Vega/Volatile.hpp	/^    unsigned stf;$/;"	m	struct:Vega::VolatileData
stf_dead_band	src/Device/Driver/CAI302/Protocol.hpp	/^    uint8_t stf_dead_band; \/\/ (10ths M\/S)$/;"	m	struct:CAI302::Pilot
stop	src/Device/Driver/IMI/Protocol/Types.hpp	/^    IMIWORD stop;$/;"	m	struct:IMI::FlightFinish
stop	src/thread/StandbyThread.hpp	/^  bool stop = false;$/;"	m	class:StandbyThread
stopLeScan_method	src/Android/BluetoothHelper.cpp	/^static jmethodID startLeScan_method, stopLeScan_method;$/;"	m	namespace:BluetoothHelper	file:
stop_received	src/thread/SuspensibleThread.hpp	/^  bool stop_received, suspend_received, suspended;$/;"	m	class:SuspensibleThread
stop_time	src/Device/Driver/LX/Protocol.hpp	/^    char stop_time[9];$/;"	m	struct:LX::FlightInfo
stop_trigger	src/thread/StoppableThread.hpp	/^  Trigger stop_trigger;$/;"	m	class:StoppableThread
stopping_time	src/UIUtil/KineticManager.hpp	/^  const std::chrono::duration<double> stopping_time;$/;"	m	class:KineticManager
store	src/Task/TaskStore.cpp	/^  TaskStore::ItemVector &store;$/;"	m	class:TaskFileVisitor	file:
store	src/Task/TaskStore.hpp	/^  ItemVector store;$/;"	m	class:TaskStore
store	src/Topography/Thread.hpp	/^  TopographyStore &store;$/;"	m	class:final
store	src/Topography/TopographyRenderer.hpp	/^  const TopographyStore &store;$/;"	m	class:TopographyRenderer
store	src/Weather/Rasp/RaspCache.hpp	/^  const RaspStore &store;$/;"	m	class:RaspCache
store_index	src/Units/UnitsGlue.cpp	/^  unsigned store_index;$/;"	m	struct:language_unit_map	file:
str	src/Topography/shapelib/mapstring.c	/^    char  *str;$/;"	m	struct:msStringBuffer	file:
strcasecmp	src/Topography/shapelib/mapstring.c	/^int strcasecmp(const char *s1, const char *s2)$/;"	f
strcasecmp	src/zzip/conf.h	187;"	d
strcasestr	src/Topography/shapelib/mapstring.c	/^char *strcasestr(const char *s, const char *find)$/;"	f
stream	src/Terrain/jasper/jpc/jpc_dec.h	/^	jas_stream_t *stream;$/;"	m	struct:jpc_dec_seg_s
stream_	src/Terrain/jasper/jas_image.h	/^	jas_stream_t *stream_;$/;"	m	struct:__anon100
stream_	src/Terrain/jasper/jpc/jpc_bs.h	/^	jas_stream_t *stream_;$/;"	m	struct:__anon106
streams	src/Terrain/jasper/jpc/jpc_dec.h	/^	jas_stream_t **streams;$/;"	m	struct:__anon118
streraz	src/Device/Driver/LX/LXN.hpp	/^    char streraz[8];$/;"	m	struct:LXN::Start
strerror	src/net/SocketError.cxx	/^	:msg(strerror(code)) {}$/;"	f
string	src/Airspace/AirspaceParser.cpp	/^  const TCHAR *string;$/;"	m	struct:AirspaceClassStringCouple	file:
string	src/Device/Driver/LX/LXN.hpp	/^    const struct String *string;$/;"	m	union:LXN::Packet	typeref:struct:LXN::Packet::String
string	src/FLARM/Error.cpp	/^  const TCHAR *string;$/;"	m	struct:__anon1	file:
string	src/Form/DataField/Enum.hpp	/^    TCHAR *string;$/;"	m	class:final::Entry
string	src/Topography/shapelib/mapserver.h	/^    char *string;$/;"	m	struct:__anon28
string_buffer	src/Form/DataField/Time.hpp	/^  mutable TCHAR string_buffer[OUTBUFFERSIZE + 1];$/;"	m	class:final
string_hash	src/ui/canvas/custom/Cache.cpp	/^    StringHash string_hash;$/;"	m	struct:TextCacheKey::Hash	file:
string_pair	src/Language/MOFile.hpp	/^  struct string_pair {$/;"	s	class:MOFile
string_to_key	src/Input/InputKeys.cpp	/^static constexpr struct string_to_key string_to_key[] = {$/;"	v	typeref:struct:string_to_key	file:
string_to_key	src/Input/InputKeys.cpp	/^struct string_to_key {$/;"	s	file:
string_value	src/Form/DataField/ComboList.hpp	/^    tstring string_value;$/;"	m	struct:ComboList::Item
strings	src/Language/MOFile.hpp	/^  AllocatedArray<string_pair> strings;$/;"	m	class:MOFile
strlcat	src/Topography/shapelib/mapstring.c	/^size_t strlcat(char *dst, const char *src, size_t siz)$/;"	f
strlcpy	src/Topography/shapelib/mapstring.c	/^strlcpy(char *dst, const char *src, size_t siz)$/;"	f
strncasecmp	src/Topography/shapelib/mapstring.c	/^int strncasecmp(const char *s1, const char *s2, int len)$/;"	f
strokeStyleObj	src/Topography/shapelib/mapserver.h	/^  } strokeStyleObj;$/;"	t	typeref:struct:__anon62
strrchr_basename	src/zzip/file.c	/^strrchr_basename(zzip_char_t* name)$/;"	f	file:
strrstr	src/Topography/shapelib/mapstring.c	/^char *strrstr(const char *string, const char *find)$/;"	f
strtoull	src/Terrain/jasper/jas_types.h	111;"	d
strval	src/Topography/shapelib/mapserver.h	/^    char *strval;$/;"	m	union:__anon26
strval	src/Topography/shapelib/mapserver.h	/^    char *strval;$/;"	m	union:__anon27
stx_msg	src/Device/Driver/KRT2.cpp	/^  struct stx_msg {$/;"	s	class:final	file:
style	src/Android/TextUtil.hpp	/^  unsigned line_spacing, style;$/;"	m	class:TextUtil
style	src/Device/Driver/IMI/Protocol/Types.hpp	/^    IMIDWORD style:3;$/;"	m	struct:IMI::TObservationZone
style	src/Form/ButtonPanel.hpp	/^  WindowStyle style;$/;"	m	class:ButtonPanel
style	src/Task/TaskFileSeeYou.cpp	/^  } style;$/;"	m	struct:SeeYouTurnpointInformation	typeref:enum:SeeYouTurnpointInformation::Style	file:
style	src/Topography/shapelib/mapserver.h	/^    int style; \/* HILITE, SELECTED or NORMAL *\/$/;"	m	struct:__anon34
style	src/Topography/shapelib/mapserver.h	/^    int style;$/;"	m	struct:__anon47
style	src/Topography/shapelib/mapserver.h	/^    styleObj *style;$/;"	m	struct:__anon63
style	src/ui/canvas/Pen.hpp	/^  Style style;$/;"	m	class:Pen
styleObj	src/Topography/shapelib/mapserver.h	/^  struct styleObj{$/;"	s
style_bounds	src/Topography/shapelib/mapserver.h	/^    label_bounds **style_bounds;$/;"	m	struct:__anon38
styleitem	src/Topography/shapelib/mapserver.h	/^    char *styleitem; \/* item to be used for style lookup - can also be 'AUTO' *\/$/;"	m	struct:layerObj
styleitemindex	src/Topography/shapelib/mapserver.h	/^    int styleitemindex;$/;"	m	struct:layerObj
styles	src/Topography/shapelib/mapserver.h	/^    styleObj **styles;$/;"	m	struct:__anon36
styles	src/Topography/shapelib/mapserver.h	/^    styleObj **styles;$/;"	m	struct:classObj
styles	src/Topography/shapelib/mapserver.h	/^    styleObj **styles;$/;"	m	struct:labelObj
styles	src/Topography/shapelib/mapserver.h	/^    styleObj *styles; \/* copied from the classObj, only present if there is a marker to be drawn *\/$/;"	m	struct:__anon39
sub_AutoZoom	src/Input/InputEventsMap.cpp	/^InputEvents::sub_AutoZoom(int vswitch)$/;"	f	class:InputEvents
sub_PanCursor	src/Input/InputEventsMap.cpp	/^InputEvents::sub_PanCursor(int dx, int dy)$/;"	f	class:InputEvents
sub_ScaleZoom	src/Input/InputEventsMap.cpp	/^InputEvents::sub_ScaleZoom(int vswitch)$/;"	f	class:InputEvents
sub_SetZoom	src/Input/InputEventsMap.cpp	/^InputEvents::sub_SetZoom(double value)$/;"	f	class:InputEvents
sub_TerrainTopography	src/Input/InputEventsSettings.cpp	/^InputEvents::sub_TerrainTopography(int vswitch)$/;"	f	class:InputEvents
sub_index	src/Form/TabMenuDisplay.hpp	/^    unsigned sub_index;$/;"	m	struct:final::MenuTabIndex
subnode	src/Topography/shapelib/maptree.h	/^    struct shape_tree_node *subnode[MAX_SUBNODES];$/;"	m	struct:shape_tree_node	typeref:struct:shape_tree_node::shape_tree_node
subscribable_sensors_	src/Android/InternalSensors.hpp	/^  std::vector<int> subscribable_sensors_;$/;"	m	class:InternalSensors
subscribeToSensor	src/Android/InternalSensors.cpp	/^InternalSensors::subscribeToSensor(int id)$/;"	f	class:InternalSensors
subscribedToSensor	src/Android/InternalSensors.cpp	/^InternalSensors::subscribedToSensor(int id) const$/;"	f	class:InternalSensors
subtract_start_finish_cylinder_radius	src/Engine/Task/Ordered/OrderedTask.cpp	/^constexpr bool subtract_start_finish_cylinder_radius = true;$/;"	v
success	src/Dialogs/DownloadFilePicker.cpp	/^  bool got_size = false, complete = false, success;$/;"	m	class:final	file:
success	src/event/net/cares/Channel.cxx	/^	bool success = false;$/;"	m	class:Cares::final	file:
sum_error	src/Math/LeastSquares.hpp	/^  double sum_error;$/;"	m	class:LeastSquares
sum_n	src/Math/XYDataStore.hpp	/^  unsigned sum_n;$/;"	m	class:XYDataStore
sum_weights	src/Math/XYDataStore.hpp	/^  double sum_weights;$/;"	m	class:XYDataStore
sum_xw	src/Math/XYDataStore.hpp	/^  double sum_xw, sum_yw;$/;"	m	class:XYDataStore
sum_xxw	src/Math/LeastSquares.hpp	/^  double sum_xxw, sum_xyw;$/;"	m	class:LeastSquares
sum_xyw	src/Math/LeastSquares.hpp	/^  double sum_xxw, sum_xyw;$/;"	m	class:LeastSquares
sum_yw	src/Math/XYDataStore.hpp	/^  double sum_xw, sum_yw;$/;"	m	class:XYDataStore
summary	src/Dialogs/Task/Manager/TaskEditPanel.cpp	/^  TextWidget &summary;$/;"	m	class:TaskEditPanel	file:
summary	src/Dialogs/Task/Manager/TaskListPanel.cpp	/^  TextWidget &summary;$/;"	m	class:final	file:
sun_azimuth	src/NMEA/Derived.hpp	/^  Angle sun_azimuth;$/;"	m	struct:DerivedInfo
sun_data_available	src/NMEA/Derived.hpp	/^  Validity sun_data_available;$/;"	m	struct:DerivedInfo
sunday	src/Engine/Airspace/AirspaceActivity.hpp	/^    bool sunday:1;$/;"	m	struct:AirspaceActivity::Days
supports_clipping	src/Topography/shapelib/mapserver.h	/^    int supports_clipping;$/;"	m	struct:rendererVTableObj
supports_combolist	src/Form/DataField/Base.hpp	/^  const bool supports_combolist;$/;"	m	class:DataField
supports_pixel_buffer	src/Topography/shapelib/mapserver.h	/^    int supports_pixel_buffer;$/;"	m	struct:rendererVTableObj
supports_svg	src/Topography/shapelib/mapserver.h	/^    int supports_svg;$/;"	m	struct:rendererVTableObj
suppress_traffic_gauge	src/MainWindow.hpp	/^  bool suppress_traffic_gauge = false, force_traffic_gauge = false;$/;"	m	class:MainWindow
surface	src/ui/canvas/custom/TopCanvas.hpp	/^  EGLSurface surface;$/;"	m	class:DisplayOrientation
surface_listeners	src/ui/canvas/opengl/Surface.cpp	/^static GLSurfaceListenerList surface_listeners;$/;"	v	file:
surface_valid	src/ui/canvas/opengl/Surface.cpp	/^bool surface_valid = true;$/;"	v
suspend_count	src/thread/RecursivelySuspensibleThread.hpp	/^  unsigned suspend_count;$/;"	m	class:RecursivelySuspensibleThread
suspend_received	src/thread/SuspensibleThread.hpp	/^  bool stop_received, suspend_received, suspended;$/;"	m	class:SuspensibleThread
suspended	src/thread/SuspensibleThread.hpp	/^  bool stop_received, suspend_received, suspended;$/;"	m	class:SuspensibleThread
sval_last	src/Gauge/GaugeVario.hpp	/^  int sval_last = 0;$/;"	m	class:GaugeVario
swVersion	src/Device/Driver/IMI/Protocol/Types.hpp	/^    IMIBYTE swVersion;$/;"	m	struct:IMI::TDeclarationHeader
swVersion	src/Device/Driver/IMI/Protocol/Types.hpp	/^    IMIBYTE swVersion;$/;"	m	struct:IMI::TDeviceInfo
swap	src/Form/DataField/Enum.hpp	/^    friend void swap(Entry &a, Entry &b) {$/;"	f	class:final::Entry
swap	src/ui/event/shared/RotatePointer.hpp	/^  bool swap = false;$/;"	m	class:UI::RotatePointer
swap_frequencies	src/NMEA/ExternalSettings.hpp	/^  Validity swap_frequencies;$/;"	m	struct:ExternalSettings
swapdir	src/ui/canvas/memory/Bresenham.hpp	/^  bool swapdir;$/;"	m	class:BresenhamIterator
switch_state	src/NMEA/Info.hpp	/^  SwitchState switch_state;$/;"	m	struct:NMEAInfo
sx	src/ui/canvas/memory/Bresenham.hpp	/^  int dx, dy, sx, sy, error;$/;"	m	class:BresenhamIterator
sy	src/ui/canvas/memory/Bresenham.hpp	/^  int dx, dy, sx, sy, error;$/;"	m	class:BresenhamIterator
symbol	src/Topography/shapelib/mapserver.h	/^    int symbol;$/;"	m	struct:styleObj
symbol	src/Topography/shapelib/mapserver.h	/^    symbolObj *symbol;$/;"	m	struct:tileCacheObj
symbol	src/Topography/shapelib/mapserver.h	/^    symbolObj** symbol;$/;"	m	struct:__anon45
symbolSetObj	src/Topography/shapelib/mapserver.h	/^  } symbolSetObj;$/;"	t	typeref:struct:__anon45
symbolStyleObj	src/Topography/shapelib/mapserver.h	/^  } symbolStyleObj;$/;"	t	typeref:struct:__anon63
symbol_strings	src/Renderer/UnitSymbolRenderer.cpp	/^static constexpr UnitSymbolStrings symbol_strings[] = {$/;"	v	file:
symbolname	src/Topography/shapelib/mapserver.h	/^    char *symbolname;$/;"	m	struct:styleObj
symbolscaledenom	src/Topography/shapelib/mapserver.h	/^    double symbolscaledenom; \/* scale at which symbols are default size *\/$/;"	m	struct:layerObj
symbolset	src/Topography/shapelib/mapserver.h	/^    symbolSetObj symbolset;$/;"	m	struct:mapObj
syncChar1	src/Device/Driver/IMI/Protocol/Types.hpp	/^    IMIBYTE syncChar1, syncChar2;$/;"	m	struct:IMI::TMsg
syncChar2	src/Device/Driver/IMI/Protocol/Types.hpp	/^    IMIBYTE syncChar1, syncChar2;$/;"	m	struct:IMI::TMsg
sync_from_device	src/Device/Config.hpp	/^  bool sync_from_device;$/;"	m	struct:DeviceConfig
sync_to_device	src/Device/Config.hpp	/^  bool sync_to_device;$/;"	m	struct:DeviceConfig
synenergywt	src/Terrain/jasper/jpc/jpc_tsfb.h	/^	jpc_fix_t synenergywt;$/;"	m	struct:__anon107
synthesiser	src/Audio/VarioGlue.cpp	/^static VarioSynthesiser *synthesiser;$/;"	v	file:
synthesize	src/Terrain/jasper/jpc/jpc_qmfb.h	/^	int (*synthesize)(jpc_fix_t *, int, int, int, int, int);$/;"	m	struct:__anon105
sys	src/zzip/plugin.h	/^    long         sys;$/;"	m	struct:zzip_plugin_io
system_now	src/Cloud/Serialiser.hpp	/^  const std::chrono::system_clock::time_point system_now =$/;"	m	class:Deserialiser
system_now	src/Cloud/Serialiser.hpp	/^  const std::chrono::system_clock::time_point system_now =$/;"	m	class:Serialiser
system_settings	src/Blackboard/SettingsBlackboard.hpp	/^  SystemSettings system_settings;$/;"	m	class:SettingsBlackboard
szFail	src/VALI-XCS.cpp	/^static const char szFail[] = "Validation check failed.  G Record is invalid";$/;"	v	file:
szNoFile	src/VALI-XCS.cpp	/^static const char szNoFile[] = "Validation check failed.  File not found";$/;"	v	file:
szPass	src/VALI-XCS.cpp	/^static const char szPass[] = "Validation check passed, data indicated as correct";$/;"	v	file:
t1dec_cnt	src/Terrain/jasper/jpc/jpc_t1dec.c	/^static long t1dec_cnt = 0;$/;"	v	file:
t_0	src/Computer/ThermalLocator.hpp	/^    double t_0;$/;"	m	struct:ThermalLocator::Point
t_down	src/Engine/Task/Ordered/AATIsolineSegment.hpp	/^  double t_down;$/;"	m	class:AATIsolineSegment
t_index	src/Engine/Task/Shapes/FAITrianglePointValidator.hpp	/^  const unsigned t_index;$/;"	m	class:FAITrianglePointValidator
t_last_update_us_	src/Math/SelfTimingKalmanFilter1d.hpp	/^  uint64_t t_last_update_us_ = 0;$/;"	m	class:SelfTimingKalmanFilter1d
t_remaining	src/Engine/Task/Solvers/TaskMinTarget.hpp	/^  const double t_remaining;$/;"	m	class:final
t_size	src/Engine/Task/Shapes/FAITrianglePointValidator.hpp	/^  unsigned t_size;$/;"	m	class:FAITrianglePointValidator
t_up	src/Engine/Task/Ordered/AATIsolineSegment.hpp	/^  double t_up;$/;"	m	class:AATIsolineSegment
tab_display	src/Widget/TabWidget.hpp	/^    PixelRect tab_display, extra, pager;$/;"	m	struct:TabWidget::Layout
tab_display	src/Widget/TabWidget.hpp	/^  TabDisplay *tab_display = nullptr;$/;"	m	class:TabWidget
tab_line_height	src/Form/TabDisplay.hpp	/^  const unsigned tab_line_height;$/;"	m	class:final
tab_stop	src/ui/window/Window.hpp	/^  bool tab_stop = false, control_parent = false;$/;"	m	class:WindowStyle
tab_stop	src/ui/window/Window.hpp	/^  bool tab_stop, control_parent;$/;"	m	class:Window
tab_style	src/Dialogs/DialogSettings.hpp	/^  TabStyle tab_style;$/;"	m	struct:DialogSettings
tabdialog_style_list	src/Dialogs/Settings/Panels/LayoutConfigPanel.cpp	/^static constexpr StaticEnumChoice tabdialog_style_list[] = {$/;"	v	file:
table	src/Topography/shapelib/mapserver.h	/^    char *table;$/;"	m	struct:__anon31
tad	src/Computer/ConditionMonitor/ConditionMonitorFinalGlide.hpp	/^  double tad;$/;"	m	class:final
taf	src/Weather/NOAAStore.hpp	/^    TAF taf;$/;"	m	struct:NOAAStore::Item
taf_available	src/Weather/NOAAStore.hpp	/^    bool taf_available;$/;"	m	struct:NOAAStore::Item
tail	src/Terrain/jasper/jpc/jpc_dec.h	/^	jpc_dec_seg_t *tail;$/;"	m	struct:__anon121
tail	src/net/http/FormData.hpp	/^  struct curl_httppost *head = nullptr, *tail = nullptr;$/;"	m	class:Net::MultiPartFormData	typeref:struct:Net::MultiPartFormData::
tail	src/util/ForeignFifoBuffer.hxx	/^	size_type head = 0, tail = 0, capacity;$/;"	m	class:ForeignFifoBuffer
tail	src/util/OverwritingRingBuffer.hpp	/^  unsigned head, tail;$/;"	m	class:TrivialOverwritingRingBuffer
tail	src/util/StaticFifoBuffer.hxx	/^	size_type head = 0, tail = 0;$/;"	m	class:StaticFifoBuffer
tail_pen	src/Look/WindArrowLook.hpp	/^  Pen arrow_pen, tail_pen;$/;"	m	struct:WindArrowLook
tailifhead	src/Topography/shapelib/mapserver.h	/^    struct listNode *tailifhead; \/* this is the tail node in the list, if this is the head element, otherwise NULL *\/$/;"	m	struct:listNode	typeref:struct:listNode::listNode
tailifhead	src/Topography/shapelib/mapserver.h	/^    struct tokenListNode *tailifhead; \/* this is the tail node in the list if this is the head element, otherwise NULL *\/$/;"	m	struct:tokenListNode	typeref:struct:tokenListNode::tokenListNode
takeoff	src/Device/Driver/Volkslogger/vlconv.h	/^  int	 takeoff;				\/\/ set to one if VL has detected a takeoff$/;"	m	struct:DIRENTRY
takeoff_location	src/NMEA/FlyingState.hpp	/^  GeoPoint takeoff_location;$/;"	m	struct:FlyingState
takeoff_time	src/NMEA/FlyingState.hpp	/^  double takeoff_time;$/;"	m	struct:FlyingState
tampered	src/Device/Driver/IMI/Protocol/Types.hpp	/^    IMIBYTE tampered;$/;"	m	struct:IMI::Signature
tampered	src/Device/Driver/IMI/Protocol/Types.hpp	/^    IMIBYTE tampered;$/;"	m	struct:IMI::TDeviceInfo
tan	src/Math/Angle.hpp	/^  inline double tan() const {$/;"	f	class:Angle
target_icon	src/Look/TaskLook.hpp	/^  MaskedIcon target_icon;$/;"	m	struct:TaskLook
target_id	src/Dialogs/Traffic/FlarmTrafficDetails.cpp	/^  const FlarmId target_id;$/;"	m	class:final	file:
target_index	src/MapWindow/TargetMapWindow.hpp	/^  unsigned target_index;$/;"	m	class:TargetMapWindow
target_location	src/Engine/Task/Ordered/Points/AATPoint.hpp	/^  GeoPoint target_location;$/;"	m	class:final
target_locked	src/Engine/Task/Ordered/Points/AATPoint.hpp	/^  bool target_locked;$/;"	m	class:final
target_noise	src/Replay/TaskAutoPilot.hpp	/^  double target_noise;$/;"	m	struct:AutopilotParameters
target_point	src/Dialogs/Task/TargetDialog.cpp	/^  unsigned target_point;$/;"	m	class:TargetWidget	file:
target_restore	src/Engine/Task/Solvers/TaskMacCreadyRemaining.cpp	/^TaskMacCreadyRemaining::target_restore()$/;"	f	class:TaskMacCreadyRemaining
target_save	src/Engine/Task/Solvers/TaskMacCreadyRemaining.cpp	/^TaskMacCreadyRemaining::target_save()$/;"	f	class:TaskMacCreadyRemaining
target_visibility	src/Renderer/TaskPointRenderer.hpp	/^  TargetVisibility target_visibility;$/;"	m	class:TaskPointRenderer
tas	src/IGC/IGCFix.hpp	/^  int16_t tas;$/;"	m	struct:IGCFix
task	src/Computer/Settings.hpp	/^  TaskBehaviour task;$/;"	m	struct:ComputerSettings
task	src/Computer/TaskComputer.hpp	/^  ProtectedTaskManager &task;$/;"	m	class:TaskComputer
task	src/Device/Driver/LX/LXN.hpp	/^    const struct Task *task;$/;"	m	union:LXN::Packet	typeref:struct:LXN::Packet::Task
task	src/Device/Driver/Volkslogger/vlapi2.h	/^    } task;$/;"	m	struct:VLAPI_DATA::DECLARATION	typeref:struct:VLAPI_DATA::DECLARATION::TASK
task	src/Dialogs/Task/Manager/Internal.hpp	/^  std::unique_ptr<OrderedTask> task;$/;"	m	class:final
task	src/Dialogs/Task/Manager/TaskMapButtonRenderer.hpp	/^  const OrderedTask *task;$/;"	m	class:TaskMapButtonRenderer
task	src/Dialogs/Task/OptionalStartsDialog.cpp	/^  OrderedTask &task;$/;"	m	class:OptionStartsWidget	file:
task	src/Engine/GlideSolvers/MacCready.cpp	/^  const GlideState &task;$/;"	m	class:MacCreadyVopt	file:
task	src/Engine/Task/Factory/AbstractTaskFactory.hpp	/^  OrderedTask &task;$/;"	m	class:AbstractTaskFactory
task	src/Engine/Task/Shapes/FAITrianglePointValidator.hpp	/^  OrderedTask *const task;$/;"	m	class:FAITrianglePointValidator
task	src/Look/MapLook.hpp	/^  TaskLook task;$/;"	m	struct:MapLook
task	src/MapWindow/MapWindow.hpp	/^  ProtectedTaskManager *task = nullptr;$/;"	m	class:MapWindow
task	src/MapWindow/TargetMapWindow.hpp	/^  ProtectedTaskManager *task = nullptr;$/;"	m	class:TargetMapWindow
task	src/Task/TaskStore.hpp	/^    std::unique_ptr<OrderedTask> task;$/;"	m	struct:TaskStore::Item
task_advance	src/Engine/Task/Ordered/OrderedTask.hpp	/^  SmartTaskAdvance task_advance;$/;"	m	class:final
task_advance	src/Monitor/AllMonitors.hpp	/^  TaskAdvanceMonitor task_advance;$/;"	m	class:final
task_behaviour	src/Engine/Task/AbstractTask.cpp	/^   task_behaviour(tb)$/;"	f
task_behaviour	src/Engine/Task/AbstractTask.hpp	/^  TaskBehaviour task_behaviour;$/;"	m	class:AbstractTask
task_behaviour	src/Engine/Task/TaskManager.hpp	/^  TaskBehaviour task_behaviour;$/;"	m	class:TaskManager
task_behaviour	src/Renderer/WaypointRenderer.cpp	/^  const TaskBehaviour &task_behaviour;$/;"	m	class:final	file:
task_behaviour	src/Task/ProtectedTaskManager.hpp	/^  const TaskBehaviour &task_behaviour;$/;"	m	class:ProtectedTaskManager
task_changed	src/Dialogs/Task/Manager/TaskPropertiesPanel.cpp	/^   task_changed(_task_modified) {}$/;"	f
task_changed	src/Dialogs/Task/Manager/TaskPropertiesPanel.hpp	/^  bool *task_changed;$/;"	m	class:final
task_computer	src/Computer/GlideComputer.hpp	/^  TaskComputer task_computer;$/;"	m	class:GlideComputer
task_constraints	src/Monitor/AllMonitors.hpp	/^  TaskConstraintsMonitor task_constraints;$/;"	m	class:final
task_direction	src/Gauge/BigTrafficWidget.cpp	/^  Angle task_direction;$/;"	m	class:FlarmTrafficControl	file:
task_event_observer	src/UIReceiveBlackboard.cpp	/^static TaskEventObserver task_event_observer;$/;"	v	file:
task_events	src/Engine/Task/AbstractTask.hpp	/^  TaskEvents *task_events = nullptr;$/;"	m	class:AbstractTask
task_events	src/Startup.cpp	/^static GlideComputerTaskEvents *task_events;$/;"	v	file:
task_factory_descriptions	src/Task/TypeStrings.cpp	/^static const TCHAR *const task_factory_descriptions[] = {$/;"	v	file:
task_factory_names	src/Task/TypeStrings.cpp	/^static const TCHAR *const task_factory_names[] = {$/;"	v	file:
task_finished	src/Engine/Task/Stats/TaskStats.hpp	/^  bool task_finished;$/;"	m	class:TaskStats
task_finished	src/Renderer/TaskPointRenderer.hpp	/^  bool task_finished;$/;"	m	class:TaskPointRenderer
task_id	src/Device/Driver/LX/LXN.hpp	/^    uint16_t task_id;$/;"	m	struct:LXN::Task
task_id	src/IGC/IGCDeclaration.hpp	/^  char task_id[4];$/;"	m	struct:IGCDeclarationHeader
task_index	src/Task/TaskStore.hpp	/^    unsigned task_index;$/;"	m	struct:TaskStore::Item
task_list_serial	src/Dialogs/Task/Manager/TaskListPanel.cpp	/^static unsigned task_list_serial;$/;"	v	file:
task_look	src/Dialogs/Task/Manager/TaskEditPanel.cpp	/^  const TaskLook &task_look;$/;"	m	class:TaskEditPanel	file:
task_look	src/MapWindow/TargetMapWindow.hpp	/^  const TaskLook &task_look;$/;"	m	class:TargetMapWindow
task_look	src/Renderer/FinalGlideBarRenderer.hpp	/^  const TaskLook &task_look;$/;"	m	class:FinalGlideBarRenderer
task_look	src/Renderer/OZRenderer.hpp	/^  const TaskLook &task_look;$/;"	m	class:OZRenderer
task_look	src/Renderer/TaskPointRenderer.hpp	/^  const TaskLook &task_look;$/;"	m	class:TaskPointRenderer
task_manager	src/Dialogs/Waypoint/WaypointCommandsWidget.hpp	/^  ProtectedTaskManager *const task_manager;$/;"	m	class:final
task_manager	src/Dialogs/Waypoint/dlgWaypointDetails.cpp	/^  ProtectedTaskManager *const task_manager;$/;"	m	class:final	file:
task_manager	src/Replay/DemoReplayGlue.hpp	/^  ProtectedTaskManager* task_manager;$/;"	m	class:DemoReplayGlue
task_manager	src/Replay/Replay.hpp	/^  ProtectedTaskManager &task_manager;$/;"	m	class:final
task_manager	src/Replay/TaskAccessor.hpp	/^  TaskManager &task_manager;$/;"	m	class:TaskAccessor
task_manager	src/Startup.cpp	/^static TaskManager *task_manager;$/;"	v	file:
task_modified	src/Dialogs/Task/Manager/TaskActionsPanel.cpp	/^   active_task(_active_task), task_modified(_task_modified) {}$/;"	f
task_modified	src/Dialogs/Task/Manager/TaskActionsPanel.hpp	/^  bool *task_modified;$/;"	m	class:TaskActionsPanel
task_modified	src/Dialogs/Task/Manager/TaskClosePanel.hpp	/^  bool *task_modified;$/;"	m	class:final
task_modified	src/Dialogs/Task/Manager/TaskEditPanel.cpp	/^  bool *task_modified;$/;"	m	class:TaskEditPanel	file:
task_modified	src/Dialogs/Task/Manager/TaskListPanel.cpp	/^  bool *task_modified;$/;"	m	class:final	file:
task_modified	src/Dialogs/Task/TaskPointDialog.cpp	/^  bool task_modified;$/;"	m	class:final	file:
task_name	src/IGC/IGCDeclaration.hpp	/^  NarrowString<256> task_name;$/;"	m	struct:IGCDeclarationHeader
task_name	src/Task/TaskStore.hpp	/^    tstring task_name;$/;"	m	struct:TaskStore::Item
task_pages	src/Dialogs/Settings/dlgConfiguration.cpp	/^static constexpr TabMenuPage task_pages[] = {$/;"	v	file:
task_points	src/Engine/Task/Ordered/OrderedTask.hpp	/^  OrderedTaskPointVector task_points;$/;"	m	class:final
task_projection	src/Engine/Airspace/Airspaces.hpp	/^  TaskProjection task_projection;$/;"	m	class:Airspaces
task_projection	src/Engine/Task/Ordered/OrderedTask.hpp	/^  TaskProjection task_projection;$/;"	m	class:final
task_projection	src/Engine/Trace/Trace.hpp	/^  TaskProjection task_projection;$/;"	m	class:Trace
task_projection	src/Engine/Waypoint/Waypoints.hpp	/^  TaskProjection task_projection;$/;"	m	class:Waypoints
task_scored	src/Engine/Task/Factory/Constraints.hpp	/^  bool task_scored;$/;"	m	struct:TaskFactoryConstraints
task_size	src/Dialogs/Task/TargetDialog.cpp	/^  unsigned task_size;$/;"	m	class:TargetWidget	file:
task_speed	src/FlightStatistics.hpp	/^  LeastSquares task_speed;$/;"	m	class:FlightStatistics
task_speed_unit	src/Units/Settings.hpp	/^  Unit task_speed_unit;$/;"	m	struct:UnitSetting
task_started	src/Engine/Task/Stats/StartStats.hpp	/^  bool task_started;$/;"	m	struct:StartStats
task_stats	src/NMEA/Derived.hpp	/^  TaskStats task_stats;$/;"	m	struct:DerivedInfo
task_store	src/Dialogs/Task/Manager/TaskListPanel.cpp	/^  TaskStore task_store;$/;"	m	class:final	file:
task_time	src/Task/TaskFileSeeYou.cpp	/^  double task_time;$/;"	m	struct:SeeYouTaskInformation	file:
task_turn_point_icon	src/Look/WaypointLook.hpp	/^  MaskedIcon small_icon, turn_point_icon, task_turn_point_icon;$/;"	m	struct:WaypointLook
task_type	src/Engine/Task/Stats/CommonStats.hpp	/^  TaskType task_type;$/;"	m	class:CommonStats
task_type_default	src/Engine/Task/TaskBehaviour.hpp	/^  TaskFactoryType task_type_default;$/;"	m	struct:TaskBehaviour
task_valid	src/Engine/Task/Stats/TaskStats.hpp	/^  bool task_valid;$/;"	m	class:TaskStats
task_valid	src/Renderer/WaypointRenderer.cpp	/^  bool task_valid;$/;"	m	class:final	file:
taskid	src/Device/Driver/LX/Protocol.hpp	/^    int16_t taskid;$/;"	m	struct:LX::Declaration
taskpoint_finish	src/Engine/Task/Ordered/OrderedTask.hpp	/^  FinishPoint *taskpoint_finish = nullptr;$/;"	m	class:final
taskpoint_start	src/Engine/Task/Ordered/OrderedTask.hpp	/^  StartPoint *taskpoint_start = nullptr;$/;"	m	class:final
tb	src/Engine/Task/Unordered/AbortTask.hpp	/^      :point(std::move(waypoint), tb), solution(_solution) {}$/;"	m	struct:AbortTask::AlternateTaskPoint
tbuffer	src/io/StringConverter.hpp	/^  ReusableArray<TCHAR> tbuffer;$/;"	m	class:StringConverter
tcomps	src/Terrain/jasper/jpc/jpc_dec.h	/^	jpc_dec_tcomp_t *tcomps;$/;"	m	struct:__anon127
tcp_port	src/Device/Config.hpp	/^  unsigned tcp_port;$/;"	m	struct:DeviceConfig
team_brush_blue	src/Look/FlarmTrafficLook.hpp	/^  Brush team_brush_blue;$/;"	m	struct:FlarmTrafficLook
team_brush_green	src/Look/FlarmTrafficLook.hpp	/^  Brush team_brush_green;$/;"	m	struct:FlarmTrafficLook
team_brush_magenta	src/Look/FlarmTrafficLook.hpp	/^  Brush team_brush_magenta;$/;"	m	struct:FlarmTrafficLook
team_brush_yellow	src/Look/FlarmTrafficLook.hpp	/^  Brush team_brush_yellow;$/;"	m	struct:FlarmTrafficLook
team_code	src/Computer/Settings.hpp	/^  TeamCodeSettings team_code;$/;"	m	struct:ComputerSettings
team_code	src/TeamCode/Settings.hpp	/^  TeamCode team_code;$/;"	m	struct:TeamCodeSettings
team_code_infobox_panels	src/InfoBoxes/Content/Team.cpp	/^static constexpr InfoBoxPanel team_code_infobox_panels[] = {$/;"	v	file:
team_code_ref_found	src/Computer/GlideComputer.hpp	/^  bool team_code_ref_found;$/;"	m	class:GlideComputer
team_code_ref_id	src/Computer/GlideComputer.hpp	/^  int team_code_ref_id;$/;"	m	class:GlideComputer
team_code_ref_location	src/Computer/GlideComputer.hpp	/^  GeoPoint team_code_ref_location;$/;"	m	class:GlideComputer
team_code_reference_waypoint	src/TeamCode/Settings.hpp	/^  int team_code_reference_waypoint;$/;"	m	struct:TeamCodeSettings
team_color_blue	src/Look/TrafficLook.cpp	/^constexpr Color TrafficLook::team_color_blue;$/;"	m	class:TrafficLook	file:
team_color_blue	src/Look/TrafficLook.hpp	/^  static constexpr Color team_color_blue = Color(0, 0x90, 0xff);$/;"	m	struct:TrafficLook
team_color_green	src/Look/TrafficLook.cpp	/^constexpr Color TrafficLook::team_color_green;$/;"	m	class:TrafficLook	file:
team_color_green	src/Look/TrafficLook.hpp	/^  static constexpr Color team_color_green = Color(0x74, 0xff, 0);$/;"	m	struct:TrafficLook
team_color_magenta	src/Look/TrafficLook.cpp	/^constexpr Color TrafficLook::team_color_magenta;$/;"	m	class:TrafficLook	file:
team_color_magenta	src/Look/TrafficLook.hpp	/^  static constexpr Color team_color_magenta = Color(0xff, 0, 0xcb);$/;"	m	struct:TrafficLook
team_color_yellow	src/Look/TrafficLook.cpp	/^constexpr Color TrafficLook::team_color_yellow;$/;"	m	class:TrafficLook	file:
team_color_yellow	src/Look/TrafficLook.hpp	/^  static constexpr Color team_color_yellow = Color(0xff, 0xe8, 0);$/;"	m	struct:TrafficLook
team_flarm_callsign	src/TeamCode/Settings.hpp	/^  StaticString<4> team_flarm_callsign;$/;"	m	struct:TeamCodeSettings
team_flarm_id	src/FLARM/TrafficDatabases.hpp	/^  FlarmId team_flarm_id;$/;"	m	struct:TrafficDatabases
team_flarm_id	src/TeamCode/Settings.hpp	/^  FlarmId team_flarm_id;$/;"	m	struct:TeamCodeSettings
team_pen_blue	src/Look/FlarmTrafficLook.hpp	/^  Pen team_pen_blue;$/;"	m	struct:FlarmTrafficLook
team_pen_blue	src/Look/TrafficLook.hpp	/^  Pen team_pen_blue;$/;"	m	struct:TrafficLook
team_pen_green	src/Look/FlarmTrafficLook.hpp	/^  Pen team_pen_green;$/;"	m	struct:FlarmTrafficLook
team_pen_green	src/Look/TrafficLook.hpp	/^  Pen team_pen_green;$/;"	m	struct:TrafficLook
team_pen_magenta	src/Look/FlarmTrafficLook.hpp	/^  Pen team_pen_magenta;$/;"	m	struct:FlarmTrafficLook
team_pen_magenta	src/Look/TrafficLook.hpp	/^  Pen team_pen_magenta;$/;"	m	struct:TrafficLook
team_pen_yellow	src/Look/FlarmTrafficLook.hpp	/^  Pen team_pen_yellow;$/;"	m	struct:FlarmTrafficLook
team_pen_yellow	src/Look/TrafficLook.hpp	/^  Pen team_pen_yellow;$/;"	m	struct:TrafficLook
teammate_available	src/NMEA/Derived.hpp	/^  bool teammate_available;$/;"	m	struct:TeamInfo
teammate_icon	src/Look/TrafficLook.hpp	/^  MaskedIcon teammate_icon;$/;"	m	struct:TrafficLook
teammate_location	src/NMEA/Derived.hpp	/^  GeoPoint teammate_location;$/;"	m	struct:TeamInfo
teammate_vector	src/NMEA/Derived.hpp	/^  GeoVector teammate_vector;$/;"	m	struct:TeamInfo
tells	src/zzip/file.c	33;"	d	file:
temp	src/Device/Driver/IMI/Protocol/Types.hpp	/^    IMIDWORD temp:12;$/;"	m	struct:IMI::FixK
temp	src/ui/canvas/fb/mxcfb.h	/^	int temp;$/;"	m	struct:mxcfb_update_data
temperature	src/Dialogs/Device/DeviceListDialog.cpp	/^    bool temperature:1;$/;"	m	struct:final::Flags	file:
temperature	src/NMEA/Info.hpp	/^  Temperature temperature;$/;"	m	struct:NMEAInfo
temperature	src/Weather/ParsedMETAR.hpp	/^  double temperature, dew_point;$/;"	m	struct:ParsedMETAR
temperature_available	src/NMEA/Info.hpp	/^  bool temperature_available;$/;"	m	struct:NMEAInfo
temperature_filter	src/Android/VoltageDevice.hpp	/^  WindowFilter<64> temperature_filter;$/;"	m	class:final
temperature_unit	src/Units/Settings.hpp	/^  Unit temperature_unit;$/;"	m	struct:UnitSetting
temperatures_available	src/Weather/ParsedMETAR.hpp	/^  bool temperatures_available;$/;"	m	struct:ParsedMETAR
templatepattern	src/Topography/shapelib/mapserver.h	/^    char *datapattern, *templatepattern; \/* depricated, use VALIDATION ... END block instead *\/$/;"	m	struct:mapObj
temporary_path	src/io/FileTransaction.hpp	/^  AllocatedPath temporary_path;$/;"	m	class:FileTransaction
temppath	src/Topography/shapelib/mapserver.h	/^    char *imagepath, *imageurl, *temppath;$/;"	m	struct:__anon35
tempx	src/ui/canvas/memory/Murphy.hpp	/^  int tempx, tempy;$/;"	m	struct:MurphyIterator
tempy	src/ui/canvas/memory/Murphy.hpp	/^  int tempx, tempy;$/;"	m	struct:MurphyIterator
terminal	src/Dialogs/Device/PortMonitor.cpp	/^  TerminalWindow &terminal;$/;"	m	class:final	file:
terminal	src/Look/Look.hpp	/^  TerminalLook terminal;$/;"	m	struct:Look
terrain	src/Components.cpp	/^RasterTerrain *terrain;$/;"	v
terrain	src/Computer/GlideComputerAirData.hpp	/^  const RasterTerrain *terrain;$/;"	m	class:GlideComputerAirData
terrain	src/Computer/RouteComputer.hpp	/^  const RasterTerrain *terrain;$/;"	m	class:RouteComputer
terrain	src/CrossSection/CrossSectionRenderer.hpp	/^  const RasterTerrain *terrain = nullptr;$/;"	m	class:CrossSectionRenderer
terrain	src/Engine/Route/ReachFanParms.hpp	/^  const RasterMap *terrain;$/;"	m	struct:ReachFanParms
terrain	src/Engine/Route/ReachResult.hpp	/^  int terrain;$/;"	m	struct:ReachResult
terrain	src/Engine/Route/RoutePlanner.hpp	/^  const RasterMap *terrain;$/;"	m	class:RoutePlanner
terrain	src/MapSettings.hpp	/^  TerrainRendererSettings terrain;$/;"	m	struct:MapSettings
terrain	src/MapWindow/MapWindow.hpp	/^  RasterTerrain *terrain = nullptr;$/;"	m	class:MapWindow
terrain	src/Renderer/BackgroundRenderer.hpp	/^  const RasterTerrain *terrain = nullptr;$/;"	m	class:BackgroundRenderer
terrain	src/Task/RoutePlannerGlue.hpp	/^  const RasterTerrain *terrain;$/;"	m	class:RoutePlannerGlue
terrain	src/Terrain/TerrainRenderer.hpp	/^  const RasterTerrain &terrain;$/;"	m	class:TerrainRenderer
terrain	src/Terrain/Thread.hpp	/^  RasterTerrain &terrain;$/;"	m	class:final
terrain	src/Waypoint/Factory.hpp	/^  const RasterTerrain *terrain;$/;"	m	class:WaypointFactory
terrain_altitude	src/Device/Driver/Vega/Volatile.hpp	/^    int terrain_altitude;$/;"	m	struct:Vega::VolatileData
terrain_altitude	src/NMEA/Derived.hpp	/^  double terrain_altitude;$/;"	m	struct:TerrainInfo
terrain_base	src/Engine/Route/ReachFan.hpp	/^  int terrain_base;$/;"	m	class:ReachFan
terrain_base	src/Engine/Route/ReachFanParms.hpp	/^  int terrain_base;$/;"	m	struct:ReachFanParms
terrain_base	src/NMEA/Derived.hpp	/^  double terrain_base;$/;"	m	struct:TerrainInfo
terrain_base_valid	src/NMEA/Derived.hpp	/^  bool terrain_base_valid;$/;"	m	struct:TerrainInfo
terrain_brush	src/Look/CrossSectionLook.hpp	/^  Brush terrain_brush;$/;"	m	struct:CrossSectionLook
terrain_brush	src/Look/HorizonLook.hpp	/^  Brush terrain_brush;$/;"	m	struct:HorizonLook
terrain_cache_name	src/Terrain/RasterTerrain.cpp	/^static const TCHAR *const terrain_cache_name = _T("terrain");$/;"	v	file:
terrain_color	src/Look/CrossSectionLook.hpp	/^  Color terrain_color;$/;"	m	struct:CrossSectionLook
terrain_color	src/Look/HorizonLook.hpp	/^  Color terrain_color;$/;"	m	struct:HorizonLook
terrain_colors	src/Terrain/TerrainRenderer.cpp	/^static constexpr ColorRamp terrain_colors[][NUM_COLOR_RAMP_LEVELS] = {$/;"	v	file:
terrain_counter	src/Engine/Route/ReachFanParms.hpp	/^  unsigned terrain_counter = 0;$/;"	m	struct:ReachFanParms
terrain_pen	src/Look/HorizonLook.hpp	/^  Pen terrain_pen;$/;"	m	struct:HorizonLook
terrain_renderer	src/CrossSection/CrossSectionRenderer.hpp	/^  TerrainXSRenderer terrain_renderer;$/;"	m	class:CrossSectionRenderer
terrain_serial	src/Terrain/TerrainRenderer.hpp	/^  Serial terrain_serial;$/;"	m	class:TerrainRenderer
terrain_settings	src/Dialogs/Settings/Panels/TerrainDisplayConfigPanel.cpp	/^  TerrainRendererSettings terrain_settings;$/;"	m	class:final	file:
terrain_thread	src/MapWindow/GlueMapWindow.hpp	/^  TerrainThread *terrain_thread = nullptr;$/;"	m	class:GlueMapWindow
terrain_unreachable_brush	src/Look/WaypointLook.hpp	/^  Brush reachable_brush, terrain_unreachable_brush, unreachable_brush;$/;"	m	struct:WaypointLook
terrain_valid	src/Engine/Route/ReachResult.hpp	/^  Validity terrain_valid;$/;"	m	struct:ReachResult
terrain_valid	src/NMEA/Derived.hpp	/^  bool terrain_valid;$/;"	m	struct:TerrainInfo
terrain_warning_icon	src/Look/MapLook.hpp	/^  MaskedIcon terrain_warning_icon;$/;"	m	struct:MapLook
terrain_warning_location	src/NMEA/Derived.hpp	/^  GeoPoint terrain_warning_location;$/;"	m	struct:TerrainInfo
text	src/Device/Driver/IMI/Protocol/Types.hpp	/^    IMIBYTE text[12];$/;"	m	struct:IMI::FixE
text	src/Dialogs/KnobTextEntry.cpp	/^  const TCHAR *const text;$/;"	m	class:final	file:
text	src/Form/Frame.hpp	/^  tstring text;$/;"	m	class:WndFrame
text	src/Input/InputLookup.cpp	/^  const TCHAR *text;$/;"	m	struct:Text2EventSTRUCT	file:
text	src/Menu/ButtonLabel.hpp	/^    const TCHAR *text;$/;"	m	struct:ButtonLabel::Expanded
text	src/Operation/ThreadedOperationEnvironment.hpp	/^    StaticString<128u> text;$/;"	m	struct:ThreadedOperationEnvironment::Data
text	src/PopupMessage.hpp	/^    StaticString<256u> text;$/;"	m	struct:PopupMessage::Message
text	src/PopupMessage.hpp	/^  StaticString<2000> text;$/;"	m	class:PopupMessage
text	src/Screen/StopWatch.hpp	/^    const char *text;$/;"	m	struct:ScreenStopWatch::Marker
text	src/Topography/shapelib/mapprimitive.h	/^  char *text;$/;"	m	struct:__anon72
text	src/Topography/shapelib/mapserver.h	/^    expressionObj text;$/;"	m	struct:classObj
text	src/Topography/shapelib/mapserver.h	/^    expressionObj text;$/;"	m	struct:labelObj
text	src/Widget/LargeTextWidget.hpp	/^    :look(_look), text(_text) {}$/;"	f	class:LargeTextWidget
text	src/Widget/LargeTextWidget.hpp	/^  const TCHAR *text;$/;"	m	class:LargeTextWidget
text	src/XML/Node.hpp	/^    tstring text;$/;"	m	struct:XMLNode::Data
text	src/ui/canvas/custom/Cache.cpp	/^  StringView text;$/;"	m	struct:TextCacheKey	file:
textPathObj	src/Topography/shapelib/mapserver.h	/^struct textPathObj{$/;"	s
textPathObj	src/Topography/shapelib/mapserver.h	/^typedef struct textPathObj textPathObj;$/;"	t	typeref:struct:textPathObj
textRunObj	src/Topography/shapelib/mapserver.h	/^typedef struct textRunObj textRunObj;$/;"	t	typeref:struct:textRunObj
textSymbolObj	src/Topography/shapelib/mapserver.h	/^  } textSymbolObj;$/;"	t	typeref:struct:__anon38
text_cache	src/ui/canvas/custom/Cache.cpp	/^static Cache<TextCacheKey, RenderedText, 256u, 211u, TextCacheKey::Hash> text_cache;$/;"	v	file:
text_cache_mutex	src/ui/canvas/custom/Cache.cpp	/^static Mutex text_cache_mutex;$/;"	v	file:
text_color	src/Form/Frame.cpp	/^   text_color(look.text_color)$/;"	f
text_color	src/Form/Frame.hpp	/^  Color text_color;$/;"	m	class:WndFrame
text_color	src/Look/CheckBoxLook.hpp	/^    Color text_color;$/;"	m	struct:CheckBoxLook::StateLook
text_color	src/Look/CrossSectionLook.hpp	/^  Color text_color;$/;"	m	struct:CrossSectionLook
text_color	src/Look/DialogLook.hpp	/^      Color background_color, text_color;$/;"	m	struct:DialogLook::__anon13::__anon14
text_color	src/Look/DialogLook.hpp	/^      Color background_color, text_color;$/;"	m	struct:DialogLook::__anon13::__anon15
text_color	src/Look/DialogLook.hpp	/^      Color background_color, text_color;$/;"	m	struct:DialogLook::__anon13::__anon16
text_color	src/Look/DialogLook.hpp	/^    Color background_color, text_color;$/;"	m	struct:DialogLook::__anon12
text_color	src/Look/DialogLook.hpp	/^    Color background_color, text_color;$/;"	m	struct:DialogLook::__anon13
text_color	src/Look/DialogLook.hpp	/^    Color text_color;$/;"	m	struct:DialogLook::__anon11
text_color	src/Look/DialogLook.hpp	/^  Color background_color, text_color;$/;"	m	struct:DialogLook
text_color	src/Look/TerminalLook.hpp	/^  Color background_color, text_color;$/;"	m	struct:TerminalLook
text_color	src/Look/ThermalAssistantLook.hpp	/^  Color text_color;$/;"	m	struct:ThermalAssistantLook
text_color	src/Look/VarioLook.hpp	/^  Color background_color, text_color, dimmed_text_color;$/;"	m	struct:VarioLook
text_color	src/ui/canvas/memory/Canvas.hpp	/^  Color text_color, background_color;$/;"	m	class:Canvas
text_color	src/ui/canvas/memory/PixelOperations.hpp	/^  const color_type background_color, text_color;$/;"	m	struct:PixelOpaqueText
text_color	src/ui/canvas/opengl/Canvas.hpp	/^  Color text_color, background_color;$/;"	m	class:Canvas
text_font	src/Look/DialogLook.hpp	/^  Font text_font, bold_font, small_font;$/;"	m	struct:DialogLook
text_font	src/Look/VarioLook.hpp	/^  const Font *text_font;$/;"	m	struct:VarioLook
text_height	src/ProgressWindow.hpp	/^  unsigned text_height;$/;"	m	class:ProgressWindow
text_input_style	src/Dialogs/DialogSettings.hpp	/^  TextInputStyle text_input_style;$/;"	m	struct:DialogSettings
text_padding	src/Screen/Layout.cpp	/^  unsigned text_padding = 2;$/;"	m	namespace:Layout	file:
text_renderer	src/Dialogs/dlgQuickMenu.cpp	/^  TextRenderer text_renderer;$/;"	m	class:final	file:
text_renderer	src/Form/Frame.hpp	/^  TextRenderer text_renderer;$/;"	m	class:WndFrame
text_renderer	src/Renderer/TabRenderer.hpp	/^  TextRenderer text_renderer;$/;"	m	class:TabRenderer
text_renderer	src/Renderer/TextButtonRenderer.hpp	/^  TextRenderer text_renderer;$/;"	m	class:TextButtonRenderer
textpath	src/Topography/shapelib/mapserver.h	/^    textPathObj *textpath;$/;"	m	struct:__anon38
textsymbols	src/Topography/shapelib/mapserver.h	/^    textSymbolObj **textsymbols;$/;"	m	struct:__anon39
texture	src/ui/canvas/Bitmap.hpp	/^  GLTexture *texture = nullptr;$/;"	m	class:final
texture	src/ui/canvas/RawBitmap.hpp	/^  GLTexture *texture;$/;"	m	class:final
texture	src/ui/canvas/custom/Cache.cpp	/^  GLTexture *texture;$/;"	m	struct:RenderedText	file:
texture	src/ui/canvas/custom/TopCanvas.hpp	/^  SDL_Texture *texture;$/;"	m	class:DisplayOrientation
texture	src/ui/canvas/opengl/BufferCanvas.hpp	/^  GLTexture *texture = nullptr;$/;"	m	class:DisplayOrientation
textureNonPowerOfTwo_field	src/Android/NativeView.cpp	/^jfieldID NativeView::textureNonPowerOfTwo_field;$/;"	m	class:NativeView	file:
textureNonPowerOfTwo_field	src/Android/NativeView.hpp	/^  static jfieldID textureNonPowerOfTwo_field;$/;"	m	class:NativeView
texture_fragment_shader	src/ui/canvas/opengl/Shaders.cpp	/^static constexpr char texture_fragment_shader[] =$/;"	v	file:
texture_non_power_of_two	src/ui/canvas/opengl/Globals.cpp	/^bool texture_non_power_of_two;$/;"	m	namespace:OpenGL	file:
texture_projection	src/ui/canvas/opengl/Shaders.cpp	/^GLint texture_projection, texture_texture;$/;"	m	namespace:OpenGL	file:
texture_shader	src/ui/canvas/opengl/Shaders.cpp	/^GLProgram *texture_shader;$/;"	m	namespace:OpenGL	file:
texture_texture	src/ui/canvas/opengl/Shaders.cpp	/^GLint texture_projection, texture_texture;$/;"	m	namespace:OpenGL	file:
texture_vertex_shader	src/ui/canvas/opengl/Shaders.cpp	/^static constexpr char texture_vertex_shader[] =$/;"	v	file:
the_size	src/util/TrivialArray.hxx	/^	TrivialArray(size_type _size) noexcept:the_size(_size) {}$/;"	f	class:TrivialArray
the_size	src/util/TrivialArray.hxx	/^	size_type the_size;$/;"	m	class:TrivialArray
thermal	src/Cloud/Sender.hpp	/^    std::array<SkyLinesTracking::Thermal, MAX_THERMAL> thermal;$/;"	m	struct:ThermalResponseSender::Packet
thermal	src/MapWindow/Items/MapItem.hpp	/^  ThermalSource thermal;$/;"	m	struct:ThermalMapItem
thermal	src/Tracking/SkyLines/Protocol.hpp	/^  Thermal thermal;$/;"	m	struct:SkyLinesTracking::ThermalSubmitPacket
thermal_assistant_dialog	src/Look/Look.hpp	/^  ThermalAssistantLook thermal_assistant_dialog;$/;"	m	struct:Look
thermal_assistant_gauge	src/Look/Look.hpp	/^  ThermalAssistantLook thermal_assistant_gauge;$/;"	m	struct:Look
thermal_assistant_position	src/UISettings.hpp	/^  } thermal_assistant_position;$/;"	m	struct:UISettings	typeref:class:UISettings::ThermalAssistantPosition
thermal_assistant_position_list	src/Dialogs/Settings/Panels/GaugesConfigPanel.cpp	/^static constexpr StaticEnumChoice thermal_assistant_position_list[] = {$/;"	v	file:
thermal_average	src/FlightStatistics.hpp	/^  LeastSquares thermal_average;$/;"	m	class:FlightStatistics
thermal_band	src/Look/Look.hpp	/^  ThermalBandLook thermal_band;$/;"	m	struct:Look
thermal_band_computer	src/Computer/GlideComputerAirData.hpp	/^  ThermalBandComputer thermal_band_computer;$/;"	m	class:GlideComputerAirData
thermal_band_renderer	src/Dialogs/dlgAnalysis.cpp	/^  ThermalBandRenderer thermal_band_renderer;$/;"	m	class:ChartControl	file:
thermal_band_renderer	src/MapWindow/GlueMapWindow.hpp	/^  ThermalBandRenderer thermal_band_renderer;$/;"	m	class:GlueMapWindow
thermal_clock	src/Tracking/SkyLines/Glue.hpp	/^  GPSClock thermal_clock;$/;"	m	class:SkyLinesTracking::Glue
thermal_count	src/Tracking/SkyLines/Protocol.hpp	/^  uint8_t thermal_count;$/;"	m	struct:SkyLinesTracking::ThermalResponsePacket
thermal_enabled	src/Tracking/SkyLines/Glue.hpp	/^  bool thermal_enabled = false;$/;"	m	class:SkyLinesTracking::Glue
thermal_encounter_band	src/NMEA/Derived.hpp	/^  ThermalEncounterBand thermal_encounter_band;$/;"	m	struct:DerivedInfo
thermal_encounter_collection	src/NMEA/Derived.hpp	/^  ThermalEncounterCollection thermal_encounter_collection;$/;"	m	struct:DerivedInfo
thermal_height	src/Atmosphere/CuSonde.hpp	/^    double thermal_height;$/;"	m	struct:CuSonde::Level
thermal_height	src/Atmosphere/CuSonde.hpp	/^  double thermal_height;$/;"	m	class:CuSonde
thermal_hotspot_icon	src/Look/WaypointLook.hpp	/^  MaskedIcon tower_icon, power_plant_icon, tunnel_icon, thermal_hotspot_icon;$/;"	m	struct:WaypointLook
thermal_index	src/Atmosphere/CuSonde.hpp	/^    Temperature thermal_index;$/;"	m	struct:CuSonde::Level
thermal_locator	src/NMEA/Derived.hpp	/^  ThermalLocatorInfo thermal_locator;$/;"	m	struct:DerivedInfo
thermal_source_icon	src/Look/MapLook.hpp	/^  MaskedIcon thermal_source_icon;$/;"	m	struct:MapLook
thermalexpress_driver	src/Device/Driver/ThermalExpress/Driver.cpp	/^const struct DeviceRegister thermalexpress_driver = {$/;"	v	typeref:struct:DeviceRegister
thermallocator	src/Computer/GlideComputerAirData.hpp	/^  ThermalLocator thermallocator;$/;"	m	class:GlideComputerAirData
thermals	src/Cloud/Data.hpp	/^  CloudThermalContainer thermals;$/;"	m	struct:CloudData
thermals	src/Tracking/SkyLines/Data.hpp	/^  std::list<Thermal> thermals;$/;"	m	struct:SkyLinesTracking::Data
theta	src/Geo/Flat/FlatEllipse.hpp	/^  Angle theta;$/;"	m	class:FlatEllipse
theta_initial	src/Geo/Flat/FlatEllipse.hpp	/^  Angle theta_initial;$/;"	m	class:FlatEllipse
thick_background_pen	src/Look/VarioLook.hpp	/^  Pen thick_background_pen, thick_sink_pen, thick_lift_pen;$/;"	m	struct:VarioLook
thick_lift_pen	src/Look/VarioLook.hpp	/^  Pen thick_background_pen, thick_sink_pen, thick_lift_pen;$/;"	m	struct:VarioLook
thick_pen	src/Look/AirspaceLook.hpp	/^  Pen thick_pen;$/;"	m	struct:AirspaceLook
thick_sink_pen	src/Look/VarioLook.hpp	/^  Pen thick_background_pen, thick_sink_pen, thick_lift_pen;$/;"	m	struct:VarioLook
thre	src/Dialogs/Device/FLARM/ConfigWidget.hpp	/^  unsigned baud, priv, thre, range, acft, log_int, notrack;$/;"	m	class:final
thread	src/event/Loop.hxx	/^	ThreadId thread = ThreadId::Null();$/;"	m	class:final
thread	src/net/http/DownloadManager.cpp	/^static DownloadManagerThread *thread;$/;"	v	file:
thread	src/ui/canvas/opengl/Globals.cpp	/^pthread_t thread;$/;"	m	namespace:OpenGL	file:
thread_id	src/Topography/shapelib/maperror.h	/^    void* thread_id;$/;"	m	struct:debug_info_obj
threshold	src/Engine/Task/Shapes/FAITriangleSettings.hpp	/^  Threshold threshold;$/;"	m	struct:FAITriangleSettings
threshold	src/UIUtil/GestureManager.hpp	/^  int threshold;$/;"	m	class:GestureManager
throttle_clock	src/ProgressGlue.cpp	/^static PeriodClock throttle_clock;$/;"	v	file:
thursday	src/Engine/Airspace/AirspaceActivity.hpp	/^    bool thursday:1;$/;"	m	struct:AirspaceActivity::Days
tick_iterations	src/Engine/Contest/Solvers/TriangleContest.hpp	/^  unsigned tick_iterations;$/;"	m	class:TriangleContest
ticker	src/Device/Descriptor.hpp	/^  bool ticker;$/;"	m	class:final
tiff	src/ui/canvas/custom/LibTiff.cpp	/^  TIFF *const tiff;$/;"	m	class:TiffLoader	file:
tile	src/Terrain/RasterTileCache.hpp	/^    uint16_t tile;$/;"	m	struct:RasterTileCache::MarkerSegmentInfo
tileCacheObj	src/Topography/shapelib/mapserver.h	/^  struct tileCacheObj {$/;"	s
tileCacheObj	src/Topography/shapelib/mapserver.h	/^typedef struct tileCacheObj tileCacheObj;$/;"	t	typeref:struct:tileCacheObj
tile_columns	src/Terrain/RasterTileCache.hpp	/^    unsigned tile_columns, tile_rows;$/;"	m	struct:RasterTileCache::CacheHeader
tile_height	src/Terrain/RasterTileCache.hpp	/^    unsigned short tile_width, tile_height;$/;"	m	struct:RasterTileCache::CacheHeader
tile_height	src/Terrain/RasterTileCache.hpp	/^  unsigned short tile_width, tile_height;$/;"	m	class:RasterTileCache
tile_height	src/Terrain/ScanLine.cpp	/^  unsigned tile_width, tile_height;$/;"	m	struct:GridRay	file:
tile_rows	src/Terrain/RasterTileCache.hpp	/^    unsigned tile_columns, tile_rows;$/;"	m	struct:RasterTileCache::CacheHeader
tile_width	src/Terrain/RasterTileCache.hpp	/^    unsigned short tile_width, tile_height;$/;"	m	struct:RasterTileCache::CacheHeader
tile_width	src/Terrain/RasterTileCache.hpp	/^  unsigned short tile_width, tile_height;$/;"	m	class:RasterTileCache
tile_width	src/Terrain/ScanLine.cpp	/^  unsigned tile_width, tile_height;$/;"	m	struct:GridRay	file:
tile_x	src/Terrain/ScanLine.cpp	/^  unsigned short tile_x, tile_y;$/;"	m	struct:GridLocation	file:
tile_y	src/Terrain/ScanLine.cpp	/^  unsigned short tile_x, tile_y;$/;"	m	struct:GridLocation	file:
tilecache	src/Topography/shapelib/mapserver.h	/^    tileCacheObj *tilecache;$/;"	m	struct:imageObj
tileheight	src/Terrain/jasper/jpc/jpc_cs.h	/^	uint_fast32_t tileheight;$/;"	m	struct:__anon137
tileheight	src/Terrain/jasper/jpc/jpc_dec.h	/^	uint_fast32_t tileheight;$/;"	m	struct:__anon129
tileindex	src/Topography/shapelib/mapprimitive.h	/^  int tileindex;$/;"	m	struct:__anon72
tileindex	src/Topography/shapelib/mapserver.h	/^    char *tileindex; \/* layer index file for tiling support *\/$/;"	m	struct:layerObj
tileindex	src/Topography/shapelib/mapserver.h	/^    char *tileindex;$/;"	m	struct:__anon57
tileindex	src/Topography/shapelib/mapserver.h	/^    int tileindex;$/;"	m	struct:__anon43
tileindex	src/Topography/shapelib/mapserver.h	/^    long tileindex;$/;"	m	struct:__anon33
tileitem	src/Topography/shapelib/mapserver.h	/^    char *tileitem;$/;"	m	struct:__anon57
tileitem	src/Topography/shapelib/mapserver.h	/^    char *tileitem;$/;"	m	struct:layerObj
tileitemindex	src/Topography/shapelib/mapserver.h	/^    int tileitemindex;$/;"	m	struct:layerObj
tilelayerindex	src/Topography/shapelib/mapshape.h	/^    int tilelayerindex;$/;"	m	struct:__anon79
tileno	src/Terrain/jasper/jpc/jpc_cs.h	/^	uint_fast16_t tileno;$/;"	m	struct:__anon135
tiles	src/Terrain/RasterTileCache.hpp	/^  AllocatedGrid<RasterTile> tiles;$/;"	m	class:RasterTileCache
tiles	src/Terrain/jasper/jpc/jpc_dec.h	/^	jpc_dec_tile_t *tiles;$/;"	m	struct:__anon129
tileshpfile	src/Topography/shapelib/mapshape.h	/^    shapefileObj *tileshpfile;$/;"	m	struct:__anon79
tilesrs	src/Topography/shapelib/mapserver.h	/^    char *tilesrs;$/;"	m	struct:layerObj
tilewidth	src/Terrain/jasper/jpc/jpc_cs.h	/^	uint_fast32_t tilewidth;$/;"	m	struct:__anon137
tilewidth	src/Terrain/jasper/jpc/jpc_dec.h	/^	uint_fast32_t tilewidth;$/;"	m	struct:__anon129
tilexoff	src/Terrain/jasper/jpc/jpc_cs.h	/^	uint_fast32_t tilexoff;$/;"	m	struct:__anon137
tilexoff	src/Terrain/jasper/jpc/jpc_dec.h	/^	uint_fast32_t tilexoff;$/;"	m	struct:__anon129
tileyoff	src/Terrain/jasper/jpc/jpc_cs.h	/^	uint_fast32_t tileyoff;$/;"	m	struct:__anon137
tileyoff	src/Terrain/jasper/jpc/jpc_dec.h	/^	uint_fast32_t tileyoff;$/;"	m	struct:__anon129
time	src/Cloud/Thermal.hpp	/^  std::chrono::steady_clock::time_point time;$/;"	m	struct:CloudThermal
time	src/Computer/ClimbAverageCalculator.hpp	/^    double time;$/;"	m	struct:ClimbAverageCalculator::HistoryItem
time	src/Computer/WaveResult.hpp	/^  double time;$/;"	m	struct:WaveInfo
time	src/Computer/Wind/CirclingWind.hpp	/^    double time;$/;"	m	struct:CirclingWind::Sample
time	src/Computer/Wind/MeasurementList.hpp	/^  unsigned time;$/;"	m	struct:WindMeasurement
time	src/Device/Driver/IMI/Protocol/Types.hpp	/^    IMIDWORD time:17;$/;"	m	struct:IMI::Fix
time	src/Device/Driver/IMI/Protocol/Types.hpp	/^    IMIDWORD time:17;$/;"	m	struct:IMI::FixB
time	src/Device/Driver/IMI/Protocol/Types.hpp	/^    IMIDWORD time:17;$/;"	m	struct:IMI::FixK
time	src/Device/Driver/LX/Convert.cpp	/^  unsigned time, origin_time;$/;"	m	struct:Context	file:
time	src/Device/Driver/LX/LXN.hpp	/^    uint16_t time, dat;$/;"	m	struct:LXN::ExtConfig
time	src/Device/Driver/LX/LXN.hpp	/^    uint16_t time, latitude, longitude, aalt, galt;$/;"	m	struct:LXN::Position
time	src/Device/Driver/LX/LXN.hpp	/^    uint32_t time, latitude, longitude;$/;"	m	struct:LXN::Origin
time	src/Device/Driver/LX/LXN.hpp	/^    uint32_t time;$/;"	m	struct:LXN::Task
time	src/Dialogs/Weather/RASPDialog.cpp	/^  BrokenTime time;$/;"	m	class:final	file:
time	src/Engine/Airspace/SoonestAirspace.cpp	/^  double time = -1;$/;"	m	struct:SoonestAirspace	file:
time	src/Engine/Contest/ContestResult.hpp	/^  double time;$/;"	m	struct:ContestResult
time	src/Engine/Contest/ContestTrace.hpp	/^  unsigned time;$/;"	m	struct:ContestTracePoint
time	src/Engine/Navigation/Aircraft.hpp	/^  double time;$/;"	m	struct:AircraftState
time	src/Engine/Task/Stats/StartStats.hpp	/^  double time;$/;"	m	struct:StartStats
time	src/Engine/ThermalBand/ThermalSlice.hpp	/^  double time;$/;"	m	struct:ThermalSlice
time	src/Engine/Trace/Point.hpp	/^  unsigned time;$/;"	m	class:TracePoint
time	src/IGC/IGCFix.hpp	/^  BrokenTime time;$/;"	m	struct:IGCFix
time	src/Logger/LoggerImpl.hpp	/^    double time;$/;"	m	struct:LoggerImpl::PreTakeoffBuffer
time	src/NMEA/Info.hpp	/^  double time;$/;"	m	struct:NMEAInfo
time	src/NMEA/ThermalLocator.hpp	/^  double time;$/;"	m	struct:ThermalSource
time	src/Replay/CatmullRomInterpolator.hpp	/^    double time;$/;"	m	struct:CatmullRomInterpolator::Record
time	src/Replay/CatmullRomInterpolator.hpp	/^  const double time;$/;"	m	class:CatmullRomInterpolator
time	src/Tracking/SkyLines/Protocol.hpp	/^    uint32_t time;$/;"	m	struct:SkyLinesTracking::TrafficResponsePacket::Traffic
time	src/Tracking/SkyLines/Protocol.hpp	/^  uint32_t time;$/;"	m	struct:SkyLinesTracking::FixPacket
time	src/Tracking/SkyLines/Protocol.hpp	/^  uint32_t time;$/;"	m	struct:SkyLinesTracking::Thermal
time	src/Tracking/SkyLines/Protocol.hpp	/^  uint32_t time;$/;"	m	struct:SkyLinesTracking::Wave
time	src/Weather/Rasp/RaspCache.hpp	/^  unsigned time = 0;$/;"	m	class:RaspCache
time	src/Weather/WeatherUIState.hpp	/^  BrokenTime time;$/;"	m	struct:WeatherUIState
time	src/zzip/format.h	/^    zzip_byte_t   time[2];$/;"	m	struct:zzip_dostime
time1	src/Device/Driver/IMI/Protocol/Types.hpp	/^    IMIBYTE time1:5;$/;"	m	struct:IMI::FixE
time1	src/Device/Driver/IMI/Protocol/Types.hpp	/^    IMIDWORD time1:5;$/;"	m	struct:IMI::FixB2
time2	src/Device/Driver/IMI/Protocol/Types.hpp	/^    IMIBYTE time2:8;$/;"	m	struct:IMI::FixE
time2	src/Device/Driver/IMI/Protocol/Types.hpp	/^    IMIDWORD time2:4;$/;"	m	struct:IMI::FixB2
time3	src/Device/Driver/IMI/Protocol/Types.hpp	/^    IMIBYTE time3:4;$/;"	m	struct:IMI::FixE
time_available	src/NMEA/Info.hpp	/^  Validity time_available;$/;"	m	struct:NMEAInfo
time_between_flight_logs	src/Device/Driver/CAI302/Protocol.hpp	/^    uint16_t time_between_flight_logs; \/\/ [Minutes]$/;"	m	struct:CAI302::Pilot
time_blackout	src/Computer/Wind/WindEKFGlue.hpp	/^  unsigned time_blackout;$/;"	m	class:WindEKFGlue
time_circling	src/NMEA/CirclingInfo.hpp	/^  double time_circling;$/;"	m	struct:CirclingInfo
time_climb_circling	src/NMEA/CirclingInfo.hpp	/^  double time_climb_circling;$/;"	m	struct:CirclingInfo
time_climb_noncircling	src/NMEA/CirclingInfo.hpp	/^  double time_climb_noncircling;$/;"	m	struct:CirclingInfo
time_cruise	src/NMEA/CirclingInfo.hpp	/^  double time_cruise;$/;"	m	struct:CirclingInfo
time_elapsed	src/Engine/GlideSolvers/GlideResult.hpp	/^  double time_elapsed;$/;"	m	struct:GlideResult
time_elapsed	src/Engine/Task/Stats/ElementStat.hpp	/^  double time_elapsed;$/;"	m	struct:ElementStat
time_error	src/Engine/Task/Solvers/TaskSolveTravelled.cpp	/^TaskSolveTravelled::time_error()$/;"	f	class:TaskSolveTravelled
time_of_day_ms	src/Dialogs/Traffic/TrafficList.cpp	/^    uint32_t time_of_day_ms;$/;"	m	struct:TrafficListWidget::Item	file:
time_of_day_ms	src/MapWindow/Items/MapItem.hpp	/^  uint32_t id, time_of_day_ms;$/;"	m	struct:SkyLinesTrafficMapItem
time_of_day_ms	src/Tracking/SkyLines/Data.hpp	/^    uint32_t time_of_day_ms;$/;"	m	struct:SkyLinesTracking::Data::Traffic
time_of_day_ms	src/Tracking/SkyLines/Data.hpp	/^    uint32_t time_of_day_ms;$/;"	m	struct:SkyLinesTracking::Data::Wave
time_of_noon	src/Math/SunEphemeris.hpp	/^    double time_of_noon, time_of_sunset, time_of_sunrise;$/;"	m	struct:SunEphemeris::Result
time_of_sunrise	src/Math/SunEphemeris.hpp	/^    double time_of_noon, time_of_sunset, time_of_sunrise;$/;"	m	struct:SunEphemeris::Result
time_of_sunset	src/Math/SunEphemeris.hpp	/^    double time_of_noon, time_of_sunset, time_of_sunrise;$/;"	m	struct:SunEphemeris::Result
time_planned	src/Engine/Task/Stats/ElementStat.hpp	/^  double time_planned;$/;"	m	struct:ElementStat
time_remaining_now	src/Engine/Task/Stats/ElementStat.hpp	/^  double time_remaining_now;$/;"	m	struct:ElementStat
time_remaining_start	src/Engine/Task/Stats/ElementStat.hpp	/^  double time_remaining_start;$/;"	m	struct:ElementStat
time_scale	src/Replay/Replay.hpp	/^  double time_scale;$/;"	m	class:final
time_scales	src/Dialogs/Device/Vega/AudioModeParameters.hpp	/^static constexpr StaticEnumChoice time_scales[] = {$/;"	v
time_start	src/Engine/ThermalBand/ThermalEncounterBand.hpp	/^  double time_start;$/;"	m	class:ThermalEncounterBand
time_started	src/Engine/Task/Stats/ElementStat.hpp	/^  double time_started;$/;"	m	struct:ElementStat
time_step_circling	src/Logger/Settings.hpp	/^  uint16_t time_step_circling;$/;"	m	struct:LoggerSettings
time_step_cruise	src/Logger/Settings.hpp	/^  uint16_t time_step_cruise;$/;"	m	struct:LoggerSettings
time_virtual	src/Engine/GlideSolvers/GlideResult.hpp	/^  double time_virtual;$/;"	m	struct:GlideResult
time_zone	src/Form/DataField/RoughTime.hpp	/^  RoughTimeDelta time_zone;$/;"	m	class:final
timegm	src/time/BrokenDateTime.cpp	/^timegm (struct tm *tm)$/;"	f	file:
timeout_event	src/event/net/ConnectSocket.cxx	/^	 timeout_event(_event_loop, BIND_THIS_METHOD(OnTimeout))$/;"	f
timeout_event	src/event/net/ConnectSocket.hxx	/^	CoarseTimerEvent timeout_event;$/;"	m	class:final
timeout_event	src/event/net/cares/Channel.hxx	/^	CoarseTimerEvent timeout_event;$/;"	m	class:Cares::Channel
timeout_event	src/net/http/Global.hxx	/^	CoarseTimerEvent timeout_event;$/;"	m	class:final
timer	src/lua/Timer.cpp	/^  Lua::Value timer;$/;"	m	class:final	file:
timer	src/ui/event/shared/TimerQueue.hpp	/^    Timer *timer;$/;"	m	struct:UI::TimerQueue::TimerRecord
timer_event	src/ui/event/Timer.hpp	/^  FineTimerEvent timer_event;$/;"	m	class:UI::final
timer_funcs	src/lua/Timer.cpp	/^static constexpr struct luaL_Reg timer_funcs[] = {$/;"	v	typeref:struct:luaL_Reg	file:
timer_methods	src/lua/Timer.cpp	/^static constexpr struct luaL_Reg timer_methods[] = {$/;"	v	typeref:struct:luaL_Reg	file:
timers	src/event/Loop.hxx	/^	TimerList timers;$/;"	m	class:final
timers	src/event/TimerList.hxx	/^				   boost::intrusive::constant_time_size<false>> timers;$/;"	m	class:final
timers	src/event/TimerList.hxx	/^	IntrusiveList<FineTimerEvent> timers;$/;"	m	class:final
timers	src/ui/event/android/Queue.hpp	/^  TimerQueue timers;$/;"	m	class:UI::EventQueue
timers	src/ui/event/sdl/Queue.hpp	/^  TimerQueue timers;$/;"	m	class:UI::EventQueue
timers	src/ui/event/shared/TimerQueue.hpp	/^  std::multiset<TimerRecord> timers;$/;"	m	class:UI::TimerQueue
timers	src/ui/event/windows/Queue.hpp	/^  TimerQueue timers;$/;"	m	class:UI::EventQueue
times	src/Weather/Rasp/RaspStore.hpp	/^    bool times[MAX_WEATHER_TIMES];$/;"	m	struct:RaspStore::MapItem
tinybuf_	src/Terrain/jasper/jas_stream.h	/^	jas_uchar tinybuf_[JAS_STREAM_MAXPUTBACK + 1];$/;"	m	struct:__anon97
title	src/Gauge/LogoView.hpp	/^  Bitmap logo, big_logo, title, big_title;$/;"	m	class:LogoView
title	src/InfoBoxes/Data.hpp	/^  StaticString<32> title;$/;"	m	struct:InfoBoxData
title	src/Look/InfoBoxLook.hpp	/^  } title, value, comment;$/;"	m	struct:InfoBoxLook	typeref:struct:InfoBoxLook::__anon17
title	src/MainWindow.hpp	/^  static constexpr const TCHAR *title = _T("XCSoar");$/;"	m	class:MainWindow
title	src/Topography/shapelib/mapserver.h	/^    char *title; \/* used for legend labelling *\/$/;"	m	struct:classObj
title_color	src/InfoBoxes/Data.hpp	/^  uint8_t title_color, value_color, comment_color;$/;"	m	struct:InfoBoxData
title_font	src/Look/InfoBoxLook.hpp	/^  Font title_font;$/;"	m	struct:InfoBoxLook
title_rect	src/Form/Form.hpp	/^  PixelRect title_rect;$/;"	m	class:WndForm
title_rect	src/InfoBoxes/InfoBoxWindow.hpp	/^  PixelRect title_rect;$/;"	m	class:InfoBoxWindow
tlEmpty	src/Profile/PageProfile.cpp	/^  tlEmpty,$/;"	e	enum:eTopLayout	file:
tlMap	src/Profile/PageProfile.cpp	/^  tlMap,$/;"	e	enum:eTopLayout	file:
tlMapAndInfoBoxes	src/Profile/PageProfile.cpp	/^  tlMapAndInfoBoxes,$/;"	e	enum:eTopLayout	file:
tlx	src/Terrain/jasper/jas_image.h	/^	jas_image_coord_t tlx;$/;"	m	struct:__anon102
tlx_	src/Terrain/jasper/jas_image.h	/^	jas_image_coord_t tlx_;$/;"	m	struct:__anon100
tlx_	src/Terrain/jasper/jas_image.h	/^	jas_image_coord_t tlx_;$/;"	m	struct:__anon101
tly	src/Terrain/jasper/jas_image.h	/^	jas_image_coord_t tly;$/;"	m	struct:__anon102
tly_	src/Terrain/jasper/jas_image.h	/^	jas_image_coord_t tly_;$/;"	m	struct:__anon100
tly_	src/Terrain/jasper/jas_image.h	/^	jas_image_coord_t tly_;$/;"	m	struct:__anon101
tm	src/Engine/Task/Solvers/TaskBestMc.hpp	/^  TaskMacCreadyRemaining tm;$/;"	m	class:final
tm	src/Engine/Task/Solvers/TaskGlideRequired.hpp	/^  TaskMacCreadyRemaining tm;$/;"	m	class:final
tm	src/Engine/Task/Solvers/TaskMinTarget.hpp	/^  TaskMacCreadyRemaining tm;$/;"	m	class:final
tm	src/Engine/Task/Solvers/TaskOptTarget.hpp	/^  TaskMacCreadyRemaining tm;$/;"	m	class:final
tm	src/Engine/Task/Solvers/TaskSolveTravelled.hpp	/^     tm(tps.begin(), activeTaskPoint, settings, gp)$/;"	f	class:TaskSolveTravelled
tm	src/Engine/Task/Solvers/TaskSolveTravelled.hpp	/^  TaskMacCreadyTravelled tm; \/**< Travelled calculator *\/$/;"	m	class:TaskSolveTravelled
tmp_as	src/Engine/Airspace/Airspaces.hpp	/^  std::deque<AbstractAirspace *> tmp_as;$/;"	m	class:Airspaces
tmsg	src/Device/Driver/IMI/Protocol/MessageParser.cpp	/^    TMsg tmsg;$/;"	m	union:IMI::MessageParser::__anon163	file:
tmval	src/Topography/shapelib/mapserver.h	/^    struct tm tmval;$/;"	m	union:__anon27	typeref:struct:__anon27::tm
to	src/Topography/shapelib/mapserver.h	/^    char *from, *to; \/* item names *\/$/;"	m	struct:__anon31
to	src/ui/event/poll/linux/Translate.hpp	/^  unsigned from, to;$/;"	m	struct:__anon178
toString	src/java/Object.hxx	/^	static jstring toString(JNIEnv *env, jobject o) {$/;"	f	class:Java::Object
toString_method	src/java/Object.cxx	/^jmethodID Java::Object::toString_method;$/;"	m	class:Java::Object	file:
toString_method	src/java/Object.hxx	/^	static jmethodID toString_method;$/;"	m	class:Java::Object
toggle_wifi_button	src/Kobo/NetworkDialog.cpp	/^  Button *toggle_wifi_button, *wifi_button;$/;"	m	class:final	file:
token	src/Topography/shapelib/mapserver.h	/^    int token;$/;"	m	struct:tokenListNode
tokenListNode	src/Topography/shapelib/mapserver.h	/^  typedef struct tokenListNode {$/;"	s
tokenListNodeObj	src/Topography/shapelib/mapserver.h	/^  } tokenListNodeObj;$/;"	t	typeref:struct:tokenListNode
tokenListNodeObjPtr	src/Topography/shapelib/mapserver.h	/^  typedef tokenListNodeObj * tokenListNodeObjPtr;$/;"	t
tokenValueObj	src/Topography/shapelib/mapserver.h	/^  } tokenValueObj;$/;"	t	typeref:union:__anon27
tokens	src/Topography/shapelib/mapserver.h	/^     scaleTokenEntryObj *tokens;$/;"	m	struct:__anon53
tokens	src/Topography/shapelib/mapserver.h	/^    tokenListNodeObjPtr tokens;$/;"	m	struct:__anon28
tokensrc	src/Topography/shapelib/mapserver.h	/^    char *tokensrc; \/* on occassion we may want to access to the original source string (e.g. date\/time) *\/$/;"	m	struct:tokenListNode
tokenval	src/Topography/shapelib/mapserver.h	/^    tokenValueObj tokenval;$/;"	m	struct:tokenListNode
tolerance	src/Geo/ConvexHull/GrahamScan.hpp	/^  const double tolerance;$/;"	m	class:GrahamScan
tolerance	src/Math/ZeroFinder.hpp	/^    :xmin(_xmin), xmax(_xmax), tolerance(_tolerance)$/;"	f	class:ZeroFinder
tolerance	src/Math/ZeroFinder.hpp	/^  const double tolerance;$/;"	m	class:ZeroFinder
tolerance	src/Topography/shapelib/mapserver.h	/^    double tolerance; \/* search buffer for point and line queries (in toleranceunits) *\/$/;"	m	struct:layerObj
toleranceunits	src/Topography/shapelib/mapserver.h	/^    int toleranceunits;$/;"	m	struct:layerObj
tone_climb_comparisons	src/Dialogs/Device/Vega/AudioModeParameters.hpp	/^static constexpr StaticEnumChoice tone_climb_comparisons[] = {$/;"	v
tone_cruise_lift_detection_types	src/Dialogs/Device/Vega/AudioModeParameters.hpp	/^static constexpr StaticEnumChoice tone_cruise_lift_detection_types[] = {$/;"	v
top	src/Airspace/AirspaceParser.cpp	/^  AirspaceAltitude top;$/;"	m	struct:TempAirspaceType	file:
top	src/Engine/Airspace/AirspaceIntersectSort.cpp	/^AirspaceIntersectSort::top(GeoPoint &p) const$/;"	f	class:AirspaceIntersectSort
top	src/Form/DigitEntry.hpp	/^  unsigned top, bottom, max_width;$/;"	m	class:CoordinateFormat
top	src/Renderer/AirspaceLabelList.hpp	/^    AirspaceAltitude top;$/;"	m	struct:AirspaceLabelList::Label
top	src/Terrain/RasterProjection.hpp	/^  int left, top;$/;"	m	class:RasterProjection
top	src/ui/canvas/fb/mxcfb.h	/^	__u32 top;$/;"	m	struct:mxcfb_rect
top	src/ui/dim/Rect.hpp	/^  int left, top, right, bottom;$/;"	m	struct:PixelRect
top	src/util/QuadTree.hxx	/^		position_type left, top, right, bottom;$/;"	m	struct:QuadTree::Rectangle
top_altitude	src/Tracking/SkyLines/Protocol.hpp	/^  int16_t top_altitude;$/;"	m	struct:SkyLinesTracking::Thermal
top_altitude	src/Tracking/SkyLines/Protocol.hpp	/^  int16_t top_altitude;$/;"	m	struct:SkyLinesTracking::Wave
top_left	src/Geo/Quadrilateral.hpp	/^  GeoPoint top_left, top_right, bottom_left, bottom_right;$/;"	m	struct:GeoQuadrilateral
top_location	src/Cloud/Thermal.hpp	/^  AGeoPoint bottom_location, top_location;$/;"	m	struct:CloudThermal
top_location	src/Tracking/SkyLines/Data.hpp	/^    AGeoPoint bottom_location, top_location;$/;"	m	struct:SkyLinesTracking::Data::Thermal
top_location	src/Tracking/SkyLines/Protocol.hpp	/^  GeoPoint top_location;$/;"	m	struct:SkyLinesTracking::Thermal
top_padding	src/Renderer/TextRowRenderer.hpp	/^  unsigned left_padding, top_padding;$/;"	m	class:TextRowRenderer
top_right	src/Geo/Quadrilateral.hpp	/^  GeoPoint top_left, top_right, bottom_left, bottom_right;$/;"	m	struct:GeoQuadrilateral
top_window	src/ui/event/android/Loop.hpp	/^  TopWindow &top_window;$/;"	m	class:UI::EventLoop
top_window	src/ui/event/poll/Loop.hpp	/^  TopWindow *top_window;$/;"	m	class:UI::EventLoop
top_window	src/ui/event/sdl/Loop.hpp	/^  TopWindow *top_window;$/;"	m	class:UI::EventLoop
topography	src/Components.cpp	/^TopographyStore *topography;$/;"	v
topography	src/Look/MapLook.hpp	/^  TopographyLook topography;$/;"	m	struct:MapLook
topography	src/MapWindow/MapWindow.hpp	/^  TopographyStore *topography = nullptr;$/;"	m	class:MapWindow
topography_enabled	src/MapSettings.hpp	/^  bool topography_enabled;$/;"	m	struct:MapSettings
topography_look	src/MapWindow/TargetMapWindow.hpp	/^  const TopographyLook &topography_look;$/;"	m	class:TargetMapWindow
topography_renderer	src/MapWindow/MapWindow.hpp	/^  CachedTopographyRenderer *topography_renderer = nullptr;$/;"	m	class:MapWindow
topography_renderer	src/MapWindow/TargetMapWindow.hpp	/^  TopographyRenderer *topography_renderer = nullptr;$/;"	m	class:TargetMapWindow
topography_thread	src/MapWindow/GlueMapWindow.hpp	/^  TopographyThread *topography_thread = nullptr;$/;"	m	class:GlueMapWindow
total	src/Engine/Task/Computer/TaskStatsComputer.hpp	/^  ElementStatComputer total;$/;"	m	class:TaskStatsComputer
total	src/Engine/Task/Stats/TaskStats.hpp	/^  ElementStat total;$/;"	m	class:TaskStats
total_energy_final_glide	src/Device/Driver/CAI302/Protocol.hpp	/^    uint8_t total_energy_final_glide;$/;"	m	struct:CAI302::Pilot
total_energy_vario	src/NMEA/Info.hpp	/^  double total_energy_vario;$/;"	m	struct:NMEAInfo
total_energy_vario_available	src/NMEA/Info.hpp	/^  Validity total_energy_vario_available;$/;"	m	struct:NMEAInfo
total_height_gain	src/NMEA/CirclingInfo.hpp	/^  double total_height_gain;$/;"	m	struct:CirclingInfo
total_length	src/Topography/shapelib/mapserver.h	/^    double total_length;$/;"	m	struct:line_lengths
total_length	src/Topography/shapelib/mapserver.h	/^    double total_length;$/;"	m	struct:polyline_lengths
totaldistance	src/Computer/GlideRatioCalculator.hpp	/^  unsigned totaldistance;$/;"	m	class:GlideRatioCalculator
touring_constraints	src/Engine/Task/Factory/TouringTaskFactory.cpp	/^static constexpr TaskFactoryConstraints touring_constraints = {$/;"	v	file:
tower_icon	src/Look/WaypointLook.hpp	/^  MaskedIcon tower_icon, power_plant_icon, tunnel_icon, thermal_hotspot_icon;$/;"	m	struct:WaypointLook
tp	src/Engine/Contest/Solvers/TriangleContest.hpp	/^      :CandidateSet(tp, tp, tp) {}$/;"	m	struct:TriangleContest::CandidateSet
tp	src/Engine/Task/Unordered/GotoTask.hpp	/^  std::unique_ptr<UnorderedTaskPoint> tp;$/;"	m	class:final
tp1	src/Engine/Contest/Solvers/TriangleContest.hpp	/^    TurnPointRange tp1, tp2, tp3;$/;"	m	struct:TriangleContest::CandidateSet
tp2	src/Engine/Contest/Solvers/TriangleContest.hpp	/^    TurnPointRange tp1, tp2, tp3;$/;"	m	struct:TriangleContest::CandidateSet
tp3	src/Engine/Contest/Solvers/TriangleContest.hpp	/^      :tp1(_tp1), tp2(_tp2), tp3(_tp3)$/;"	f	struct:TriangleContest::CandidateSet
tp3	src/Engine/Contest/Solvers/TriangleContest.hpp	/^    TurnPointRange tp1, tp2, tp3;$/;"	m	struct:TriangleContest::CandidateSet
tp_current	src/Engine/Task/Solvers/TaskOptTarget.hpp	/^  AATPoint &tp_current;$/;"	m	class:final
tp_factory_descriptions	src/Task/TypeStrings.cpp	/^static const TCHAR *const tp_factory_descriptions[] = {$/;"	v	file:
tp_factory_names	src/Task/TypeStrings.cpp	/^static const TCHAR *const tp_factory_names[] = {$/;"	v	file:
tp_next	src/Engine/Task/Ordered/Points/OrderedTaskPoint.hpp	/^  OrderedTaskPoint* tp_next;$/;"	m	class:OrderedTaskPoint
tp_panel	src/Dialogs/Task/TaskPointDialog.cpp	/^    PixelRect tp_panel;$/;"	m	struct:final::Layout	file:
tp_panel	src/Dialogs/Task/TaskPointDialog.cpp	/^  PanelControl tp_panel;$/;"	m	class:final	file:
tp_previous	src/Engine/Task/Ordered/Points/OrderedTaskPoint.hpp	/^  OrderedTaskPoint* tp_previous;$/;"	m	class:OrderedTaskPoint
tp_start	src/Engine/Task/Solvers/TaskMinTarget.hpp	/^  StartPoint &tp_start;$/;"	m	class:final
tp_start	src/Engine/Task/Solvers/TaskOptTarget.hpp	/^  StartPoint &tp_start;$/;"	m	class:final
tp_type	src/MapWindow/Items/MapItem.hpp	/^  TaskPointType tp_type;$/;"	m	struct:TaskOZMapItem
tptypes	src/Device/Driver/LX/Protocol.hpp	/^    uint8_t tptypes[NUMTPS];$/;"	m	struct:LX::Declaration
tpv	src/Renderer/TaskRenderer.hpp	/^  TaskPointRenderer &tpv;$/;"	m	class:TaskRenderer
trace	src/Computer/TaskComputer.hpp	/^  TraceComputer trace;$/;"	m	class:TaskComputer
trace	src/Engine/Contest/Solvers/OLCLeague.cpp	/^  :AbstractContest(0), trace(_trace)$/;"	f
trace	src/Engine/Contest/Solvers/OLCLeague.hpp	/^  const Trace &trace;$/;"	m	class:OLCLeague
trace	src/Engine/Contest/Solvers/TraceManager.hpp	/^  TracePointerVector trace;$/;"	m	class:TraceManager
trace	src/Renderer/TrailRenderer.hpp	/^  TracePointVector trace;$/;"	m	class:TrailRenderer
trace_dirty	src/Engine/Contest/Solvers/TraceManager.hpp	/^  bool trace_dirty;$/;"	m	class:TraceManager
trace_history	src/Look/Look.hpp	/^  TraceHistoryLook trace_history;$/;"	m	struct:Look
trace_history	src/NMEA/Derived.hpp	/^  TraceHistory trace_history;$/;"	m	struct:DerivedInfo
trace_history_time	src/Computer/GlideComputer.hpp	/^  DeltaTime trace_history_time;$/;"	m	class:GlideComputer
trace_master	src/Engine/Contest/Solvers/TraceManager.hpp	/^  const Trace &trace_master;$/;"	m	class:TraceManager
trace_pen	src/Look/TrailLook.hpp	/^  Pen trace_pen;$/;"	m	struct:TrailLook
track	src/Engine/Navigation/Aircraft.hpp	/^  Angle track;$/;"	m	struct:AircraftState
track	src/FLARM/Traffic.hpp	/^  RoughAngle track;$/;"	m	class:FlarmTraffic::AircraftType
track	src/GliderLink/Traffic.hpp	/^  RoughAngle track;$/;"	m	struct:GliderLinkTraffic
track	src/NMEA/Info.hpp	/^  Angle track;$/;"	m	struct:NMEAInfo
track	src/Tracking/SkyLines/Protocol.hpp	/^  uint16_t track;$/;"	m	struct:SkyLinesTracking::FixPacket
track	src/Tracking/TrackingGlue.hpp	/^  Angle track;$/;"	m	class:final
track_available	src/NMEA/Info.hpp	/^  Validity track_available;$/;"	m	struct:NMEAInfo
track_line_pen	src/Look/MapLook.hpp	/^  Pen track_line_pen;$/;"	m	struct:MapLook
track_received	src/FLARM/Traffic.hpp	/^  bool track_received;$/;"	m	class:FlarmTraffic::AircraftType
track_received	src/GliderLink/Traffic.hpp	/^  bool track_received;$/;"	m	struct:GliderLinkTraffic
tracking	src/Components.cpp	/^TrackingGlue *tracking;$/;"	v
tracking	src/Computer/Settings.hpp	/^  TrackingSettings tracking;$/;"	m	struct:ComputerSettings
tracking_intervals	src/Dialogs/Settings/Panels/TrackingConfigPanel.cpp	/^static constexpr StaticEnumChoice tracking_intervals[] = {$/;"	v	file:
traffic	src/Cloud/Sender.hpp	/^    std::array<SkyLinesTracking::TrafficResponsePacket::Traffic, MAX_TRAFFIC> traffic;$/;"	m	struct:TrafficResponseSender::Packet
traffic	src/Dialogs/Device/DeviceListDialog.cpp	/^    bool alive:1, location:1, gps:1, baro:1, airspeed:1, vario:1, traffic:1;$/;"	m	struct:final::Flags	file:
traffic	src/FLARM/Data.hpp	/^  TrafficList traffic;$/;"	m	struct:FlarmData
traffic	src/GliderLink/GliderLinkData.hpp	/^  GliderLinkTrafficList traffic;$/;"	m	struct:GliderLinkData
traffic	src/Look/Look.hpp	/^  TrafficLook traffic;$/;"	m	struct:Look
traffic	src/Tracking/SkyLines/Data.hpp	/^  std::map<uint32_t, Traffic> traffic;$/;"	m	struct:SkyLinesTracking::Data
traffic	src/UISettings.hpp	/^  TrafficSettings traffic;$/;"	m	struct:UISettings
traffic_alarm_icon	src/Look/MapLook.hpp	/^  MaskedIcon traffic_alarm_icon;$/;"	m	struct:MapLook
traffic_clock	src/Tracking/SkyLines/Glue.hpp	/^  GPSClock traffic_clock;$/;"	m	class:SkyLinesTracking::Glue
traffic_count	src/Tracking/SkyLines/Protocol.hpp	/^  uint8_t traffic_count;$/;"	m	struct:SkyLinesTracking::TrafficResponsePacket
traffic_databases	src/FLARM/Global.cpp	/^TrafficDatabases *traffic_databases;$/;"	v
traffic_enabled	src/Tracking/SkyLines/Glue.hpp	/^  bool traffic_enabled = false;$/;"	m	class:SkyLinesTracking::Glue
traffic_enabled	src/Tracking/SkyLines/Settings.hpp	/^  bool traffic_enabled;$/;"	m	struct:SkyLinesTracking::Settings
traffic_look	src/MapWindow/MapWindow.hpp	/^  const TrafficLook &traffic_look;$/;"	m	class:MapWindow
traffic_look	src/Renderer/MapItemListRenderer.hpp	/^  const TrafficLook &traffic_look;$/;"	m	class:MapItemListRenderer
traffic_safe_icon	src/Look/MapLook.hpp	/^  MaskedIcon traffic_safe_icon;$/;"	m	struct:MapLook
traffic_warning_icon	src/Look/MapLook.hpp	/^  MaskedIcon traffic_warning_icon;$/;"	m	struct:MapLook
trail	src/Look/MapLook.hpp	/^  TrailLook trail;$/;"	m	struct:MapLook
trail	src/MapSettings.hpp	/^  TrailSettings trail;$/;"	m	struct:MapSettings
trail_brushes	src/Look/TrailLook.hpp	/^  Brush trail_brushes[NUMSNAILCOLORS];$/;"	m	struct:TrailLook
trail_length_list	src/Dialogs/Settings/Panels/SymbolsConfigPanel.cpp	/^static constexpr StaticEnumChoice trail_length_list[] = {$/;"	v	file:
trail_pens	src/Look/TrailLook.hpp	/^  Pen trail_pens[NUMSNAILCOLORS];$/;"	m	struct:TrailLook
trail_renderer	src/MapWindow/MapWindow.hpp	/^  TrailRenderer trail_renderer;$/;"	m	class:MapWindow
trail_renderer	src/MapWindow/TargetMapWindow.hpp	/^  TrailRenderer trail_renderer;$/;"	m	class:TargetMapWindow
trail_renderer	src/Renderer/FlightStatisticsRenderer.hpp	/^  mutable TrailRenderer trail_renderer;$/;"	m	class:FlightStatisticsRenderer
trail_type_list	src/Dialogs/Settings/Panels/SymbolsConfigPanel.cpp	/^static constexpr StaticEnumChoice trail_type_list[] = {$/;"	v	file:
trail_widths	src/Look/TrailLook.hpp	/^  unsigned trail_widths[NUMSNAILCOLORS];$/;"	m	struct:TrailLook
traits	src/Geo/Boost/GeoPoint.hpp	/^namespace traits {$/;"	n	namespace:boost::geometry
transform	src/Topography/shapelib/mapserver.h	/^    int transform; \/* does this layer have to be transformed to file coordinates *\/$/;"	m	struct:layerObj
transform_mode	src/Topography/shapelib/mapserver.h	/^    enum MS_TRANSFORM_MODE transform_mode;$/;"	m	struct:rendererVTableObj	typeref:enum:rendererVTableObj::MS_TRANSFORM_MODE
translate	src/ui/canvas/opengl/Globals.cpp	/^PixelPoint translate;$/;"	m	namespace:OpenGL	file:
translation	src/Language/MOFile.hpp	/^    const char *original, *translation;$/;"	m	struct:MOFile::string_pair
translation_map	src/Language/Language.cpp	/^typedef std::map<tstring,tstring> translation_map;$/;"	t	file:
translation_table_offset	src/Language/MOFile.hpp	/^    uint32_t original_table_offset, translation_table_offset;$/;"	m	struct:MOFile::mo_header
translations	src/Language/Language.cpp	/^static translation_map translations;$/;"	v	file:
transparency	src/Renderer/AirspaceRendererSettings.hpp	/^  bool transparency;$/;"	m	struct:AirspaceRendererSettings
transparent	src/Gauge/ThermalAssistantWindow.hpp	/^  const bool transparent;$/;"	m	class:ThermalAssistantWindow
transparent	src/Topography/shapelib/mapserver.h	/^    int  transparent;$/;"	m	struct:__anon32
transparent	src/Topography/shapelib/mapserver.h	/^    int transparent; \/* TODO - Deprecated *\/$/;"	m	struct:mapObj
transparent	src/Topography/shapelib/mapserver.h	/^    int transparent;$/;"	m	struct:__anon47
transparent	src/Topography/shapelib/mapserver.h	/^    int transparent;$/;"	m	struct:__anon48
transparent	src/ui/window/Window.hpp	/^  bool transparent = false;$/;"	m	class:Window
travelled	src/Engine/Task/Computer/ElementStatComputer.hpp	/^  DistanceStatComputer travelled;$/;"	m	class:ElementStatComputer
travelled	src/Engine/Task/Stats/ElementStat.hpp	/^  DistanceStat travelled;$/;"	m	struct:ElementStat
travelled_distance	src/Engine/Task/Computer/WindowStatsComputer.hpp	/^  DifferentialWindowFilter<60> travelled_distance;$/;"	m	class:WindowStatsComputer
treeAddShapeId	src/Topography/shapelib/maptree.c	/^static int treeAddShapeId(treeObj *tree, int id, rectObj rect)$/;"	f	file:
treeCollectShapeIds	src/Topography/shapelib/maptree.c	/^static void treeCollectShapeIds(treeNodeObj *node, rectObj aoi, ms_bitarray status)$/;"	f	file:
treeNodeAddShapeId	src/Topography/shapelib/maptree.c	/^static int treeNodeAddShapeId( treeNodeObj *node, int id, rectObj rect, int maxdepth)$/;"	f	file:
treeNodeCreate	src/Topography/shapelib/maptree.c	/^static treeNodeObj *treeNodeCreate(rectObj rect)$/;"	f	file:
treeNodeObj	src/Topography/shapelib/maptree.h	/^  } treeNodeObj;$/;"	t	typeref:struct:shape_tree_node
treeNodeTrim	src/Topography/shapelib/maptree.c	/^static int treeNodeTrim( treeNodeObj *node )$/;"	f	file:
treeObj	src/Topography/shapelib/maptree.h	/^  } treeObj;$/;"	t	typeref:struct:__anon80
treeSplitBounds	src/Topography/shapelib/maptree.c	/^static void treeSplitBounds( rectObj *in, rectObj *out1, rectObj *out2)$/;"	f	file:
tri_state	src/Dialogs/Device/Vega/HardwareParameters.hpp	/^static constexpr StaticEnumChoice tri_state[] = {$/;"	v
triangle_validator	src/Waypoint/WaypointListBuilder.hpp	/^  const FAITrianglePointValidator triangle_validator;$/;"	m	class:final
tricnt	src/Device/Driver/Volkslogger/grecord.h	/^  int  tricnt;$/;"	m	class:GRECORD
trigger	src/ui/event/windows/Queue.hpp	/^  HANDLE trigger;$/;"	m	class:UI::EventQueue
trigger_cond	src/thread/WorkerThread.hpp	/^  Cond trigger_cond;$/;"	m	class:WorkerThread
trigger_flag	src/thread/WorkerThread.hpp	/^  bool trigger_flag = false;$/;"	m	class:WorkerThread
trigger_redraw	src/Input/InputEventsActions.cpp	/^trigger_redraw()$/;"	f	file:
trigger_redraw	src/Input/InputEventsTask.cpp	/^trigger_redraw()$/;"	f	file:
trim_inplace	src/util/tstring.cpp	/^trim_inplace(tstring &s)$/;"	f
trm	src/IGC/IGCFix.hpp	/^  int16_t trm;$/;"	m	struct:IGCFix
trt	src/IGC/IGCFix.hpp	/^  int16_t trt;$/;"	m	struct:IGCFix
true	src/Dialogs/WidgetDialog.cpp	/^   full(true), auto_size(false)$/;"	v
true	src/Terrain/jasper/jas_types.h	92;"	d
true_airspeed	src/Engine/Navigation/Aircraft.hpp	/^  double true_airspeed;$/;"	m	struct:SpeedState
true_airspeed	src/NMEA/Info.hpp	/^  double true_airspeed;$/;"	m	struct:NMEAInfo
true_text	src/Form/DataField/Boolean.hpp	/^  StaticString<32> true_text;$/;"	m	class:final
try_lock	src/thread/WindowsSharedMutex.hxx	/^	bool try_lock() {$/;"	f	class:WindowsSharedMutex
try_lock_shared	src/thread/WindowsSharedMutex.hxx	/^	bool try_lock_shared() {$/;"	f	class:WindowsSharedMutex
tsfb	src/Terrain/jasper/jpc/jpc_dec.h	/^	jpc_tsfb_t *tsfb;$/;"	m	struct:__anon126
tshow	src/PopupMessage.hpp	/^    std::chrono::steady_clock::duration tshow; \/\/ time message is visible for$/;"	m	struct:PopupMessage::Message
tskDay	src/Device/Driver/IMI/Protocol/Types.hpp	/^    IMIBYTE tskDay, tskMonth;$/;"	m	struct:IMI::TDeclarationHeader
tskMonth	src/Device/Driver/IMI/Protocol/Types.hpp	/^    IMIBYTE tskDay, tskMonth;$/;"	m	struct:IMI::TDeclarationHeader
tskName	src/Device/Driver/IMI/Protocol/Types.hpp	/^    IMICHAR tskName[IMIDECL_TASK_NAME_LENGTH];$/;"	m	struct:IMI::TDeclarationHeader
tskNumber	src/Device/Driver/IMI/Protocol/Types.hpp	/^    IMIWORD tskNumber;$/;"	m	struct:IMI::TDeclarationHeader
tskYear	src/Device/Driver/IMI/Protocol/Types.hpp	/^    IMIWORD tskYear;$/;"	m	struct:IMI::TDeclarationHeader
tty_fd	src/ui/canvas/custom/TopCanvas.hpp	/^  int tty_fd;$/;"	m	class:DisplayOrientation
tuesday	src/Engine/Airspace/AirspaceActivity.hpp	/^    bool tuesday:1;$/;"	m	struct:AirspaceActivity::Days
tunnel_icon	src/Look/WaypointLook.hpp	/^  MaskedIcon tower_icon, power_plant_icon, tunnel_icon, thermal_hotspot_icon;$/;"	m	struct:WaypointLook
tuple_size	src/NMEA/LiftDatabase.hpp	/^  class tuple_size<LiftDatabase> : public integral_constant<size_t, 36> {$/;"	c	namespace:std
turn_mode	src/NMEA/CirclingInfo.hpp	/^  CirclingMode turn_mode;$/;"	m	struct:CirclingInfo
turn_point	src/Engine/Waypoint/Waypoint.hpp	/^    bool turn_point:1;$/;"	m	struct:Waypoint::Flags
turn_point_icon	src/Look/WaypointLook.hpp	/^  MaskedIcon small_icon, turn_point_icon, task_turn_point_icon;$/;"	m	struct:WaypointLook
turn_rate	src/FLARM/Traffic.hpp	/^  double turn_rate;$/;"	m	class:FlarmTraffic::AircraftType
turn_rate	src/NMEA/CirclingInfo.hpp	/^  Angle turn_rate;$/;"	m	struct:CirclingInfo
turn_rate_delta_time	src/Computer/CirclingComputer.hpp	/^  DeltaTime turn_rate_delta_time;$/;"	m	class:CirclingComputer
turn_rate_heading	src/NMEA/CirclingInfo.hpp	/^  Angle turn_rate_heading;$/;"	m	struct:CirclingInfo
turn_rate_heading_smoothed	src/NMEA/CirclingInfo.hpp	/^  Angle turn_rate_heading_smoothed;$/;"	m	struct:CirclingInfo
turn_rate_received	src/FLARM/Traffic.hpp	/^  bool turn_rate_received;$/;"	m	class:FlarmTraffic::AircraftType
turn_rate_smoothed	src/NMEA/CirclingInfo.hpp	/^  Angle turn_rate_smoothed;$/;"	m	struct:CirclingInfo
turn_speed	src/Replay/TaskAutoPilot.hpp	/^  double turn_speed;$/;"	m	struct:AutopilotParameters
turn_start_altitude	src/Computer/CirclingComputer.hpp	/^  double turn_start_altitude;$/;"	m	class:CirclingComputer
turn_start_energy_height	src/Computer/CirclingComputer.hpp	/^  double turn_start_energy_height;$/;"	m	class:CirclingComputer
turn_start_location	src/Computer/CirclingComputer.hpp	/^  GeoPoint turn_start_location;$/;"	m	class:CirclingComputer
turn_start_time	src/Computer/CirclingComputer.hpp	/^  double turn_start_time;$/;"	m	class:CirclingComputer
turning	src/NMEA/CirclingInfo.hpp	/^  bool turning;$/;"	m	struct:CirclingInfo
turning_delta_time	src/Computer/CirclingComputer.hpp	/^  DeltaTime turning_delta_time;$/;"	m	class:CirclingComputer
turnpoint_radius	src/Engine/Task/TaskBehaviour.hpp	/^  double turnpoint_radius;$/;"	m	struct:SectorDefaults
turnpoint_type	src/Engine/Task/TaskBehaviour.hpp	/^  TaskPointFactoryType turnpoint_type;$/;"	m	struct:SectorDefaults
turnpoints	src/Device/Declaration.hpp	/^  std::vector<TurnPoint> turnpoints;$/;"	m	struct:Declaration
turnpoints	src/Device/Driver/Volkslogger/vlapi2.h	/^      DCLWPT turnpoints[12];$/;"	m	struct:VLAPI_DATA::DECLARATION::TASK
two_ms_sink_at_speed	src/Device/Driver/CAI302/Protocol.hpp	/^    uint8_t two_ms_sink_at_speed;$/;"	m	struct:CAI302::Polar
two_widgets	src/Dialogs/ListPicker.cpp	/^  TwoWidgets *two_widgets;$/;"	m	class:ListPickerWidget	file:
two_widgets	src/Dialogs/Task/Manager/TaskEditPanel.cpp	/^     summary(_summary), two_widgets(nullptr) {}$/;"	f	class:TaskEditPanel
two_widgets	src/Dialogs/Task/Manager/TaskEditPanel.cpp	/^  TwoWidgets *two_widgets;$/;"	m	class:TaskEditPanel	file:
two_widgets	src/Dialogs/Task/Manager/TaskListPanel.cpp	/^  TwoWidgets *two_widgets;$/;"	m	class:final	file:
tx	src/FLARM/Status.hpp	/^  bool tx;$/;"	m	struct:FlarmStatus
typ	src/Device/Driver/Volkslogger/vlapi2.h	/^    uint8_t typ; \/\/ type(attributes) of WPT, or-combination of enum WPTTYP$/;"	m	struct:VLAPI_DATA::WPT
typ	src/Device/Driver/Volkslogger/vlconv.cpp	/^  int typ;$/;"	m	class:C2	file:
type	src/Airspace/AirspaceParser.cpp	/^  AirspaceClass type;$/;"	m	struct:AirspaceClassCharCouple	file:
type	src/Airspace/AirspaceParser.cpp	/^  AirspaceClass type;$/;"	m	struct:AirspaceClassStringCouple	file:
type	src/Airspace/AirspaceParser.cpp	/^  AirspaceClass type;$/;"	m	struct:TempAirspaceType	file:
type	src/Device/Driver/CAI302/Protocol.hpp	/^    char type;$/;"	m	struct:CAI302::GeneralInfo
type	src/Device/Driver/FLARM/BinaryProtocol.hpp	/^    uint8_t type;$/;"	m	struct:FLARM::FrameHeader
type	src/Device/Driver/IMI/Protocol/Types.hpp	/^    IMIBYTE type:4;$/;"	m	struct:IMI::FixE
type	src/Device/Driver/LX/LXN.hpp	/^    uint8_t length, type;$/;"	m	struct:LXN::Security
type	src/Dialogs/Airspace/AirspaceCRendererSettingsPanel.cpp	/^   fill_color_changed(false), fill_brush_changed(false), type(_type)$/;"	f
type	src/Dialogs/Airspace/AirspaceCRendererSettingsPanel.hpp	/^  AirspaceClass type;$/;"	m	class:AirspaceClassRendererSettingsPanel
type	src/Dialogs/Airspace/AirspaceList.cpp	/^  unsigned type;$/;"	m	struct:AirspaceListWidgetState	file:
type	src/Dialogs/Device/DeviceEditWidget.cpp	/^  DeviceConfig::PortType type;$/;"	m	struct:__anon3	file:
type	src/Dialogs/Device/Vega/VegaParametersWidget.hpp	/^    DataField::Type type;$/;"	m	struct:VegaParametersWidget::StaticParameter
type	src/Dialogs/Weather/PCMetDialog.cpp	/^  const PCMet::ImageType *type = nullptr;$/;"	m	class:final	file:
type	src/Engine/Airspace/AbstractAirspace.hpp	/^  AirspaceClass type;$/;"	m	class:AbstractAirspace
type	src/Engine/Task/Points/TaskPoint.hpp	/^  TaskPointType type;$/;"	m	class:TaskPoint
type	src/Engine/Task/TaskInterface.hpp	/^  TaskInterface(const TaskType _type) noexcept:type(_type) {}$/;"	f	class:TaskInterface
type	src/Engine/Task/TaskInterface.hpp	/^  const TaskType type;$/;"	m	class:TaskInterface
type	src/Engine/Waypoint/Waypoint.hpp	/^  Type type;$/;"	m	struct:Waypoint
type	src/FLARM/Traffic.hpp	/^  AircraftType type;$/;"	m	class:FlarmTraffic::AircraftType
type	src/Form/DataField/Base.hpp	/^  const Type type;$/;"	m	class:DataField
type	src/Form/DigitEntry.hpp	/^    Type type;$/;"	m	struct:CoordinateFormat::Column
type	src/Input/InputParser.cpp	/^  StaticString<256> type, data, label;$/;"	m	struct:EventBuilder	file:
type	src/MapSettings.hpp	/^  } type;$/;"	m	struct:TrailSettings	typeref:class:TrailSettings::Type
type	src/MapWindow/Items/MapItem.hpp	/^  } type;$/;"	m	class:TaskPointType	typeref:enum:TaskPointType::Type
type	src/Plane/Plane.hpp	/^  StaticString<32> type;$/;"	m	struct:Plane
type	src/PopupMessage.hpp	/^    Type type;$/;"	m	struct:PopupMessage::Message
type	src/Repository/AvailableFile.hpp	/^  FileType type;$/;"	m	struct:AvailableFile
type	src/Terrain/jasper/jp2/jp2_cod.h	/^	int type;$/;"	m	struct:jp2_boxinfo_s
type	src/Terrain/jasper/jp2/jp2_cod.h	/^	uint_fast16_t type;$/;"	m	struct:__anon90
type	src/Terrain/jasper/jp2/jp2_cod.h	/^	uint_fast32_t type;$/;"	m	struct:__anon94
type	src/Terrain/jasper/jpc/jpc_dec.h	/^	enum jpc_segtype type;$/;"	m	struct:jpc_dec_seg_s	typeref:enum:jpc_dec_seg_s::jpc_segtype
type	src/Topography/XShape.hpp	/^  uint8_t type;$/;"	m	class:XShape
type	src/Topography/shapelib/mapprimitive.h	/^  int type; \/* MS_SHAPE_TYPE *\/$/;"	m	struct:__anon72
type	src/Topography/shapelib/mapprimitive.h	/^  long type;$/;"	m	struct:__anon73
type	src/Topography/shapelib/mapserver.h	/^    enum MS_JOIN_TYPE type;$/;"	m	struct:__anon31	typeref:enum:__anon31::MS_JOIN_TYPE
type	src/Topography/shapelib/mapserver.h	/^    enum MS_LAYER_TYPE type;$/;"	m	struct:layerObj	typeref:enum:layerObj::MS_LAYER_TYPE
type	src/Topography/shapelib/mapserver.h	/^    int type; \/* MS_QUERY_TYPE *\/$/;"	m	struct:__anon33
type	src/Topography/shapelib/mapserver.h	/^    int type; \/* type of parse: boolean, string\/text or shape\/geometry *\/$/;"	m	struct:__anon29
type	src/Topography/shapelib/mapserver.h	/^    int type;$/;"	m	struct:__anon28
type	src/Topography/shapelib/mapshape.h	/^    int type; \/* shapefile type *\/$/;"	m	struct:__anon78
type	src/Tracking/SkyLines/Protocol.hpp	/^  uint16_t type;$/;"	m	struct:SkyLinesTracking::Header
type	src/Weather/PCMet/Overlays.hpp	/^  Type type;$/;"	m	struct:PCMet::OverlayInfo
type	src/Widget/RowFormWidget.hpp	/^    const Type type;$/;"	m	struct:RowFormWidget::Row
type	src/XML/Parser.cpp	/^    TokenTypeTag type;$/;"	m	struct:XML::NextToken	file:
type	src/ui/canvas/Bitmap.hpp	/^  Type type;$/;"	m	class:final
type	src/ui/event/shared/Event.hpp	/^  Type type;$/;"	m	struct:UI::Event
type	src/zzip/plugin.h	/^    long         type;$/;"	m	struct:zzip_plugin_io
type_	src/Terrain/jasper/jas_image.h	/^	jas_image_cmpttype_t type_;$/;"	m	struct:__anon100
type_and_longitude_sign	src/Device/Driver/Volkslogger/Database.hpp	/^    uint8_t type_and_longitude_sign;$/;"	m	struct:Volkslogger::Waypoint
type_filter_items	src/Dialogs/Waypoint/WaypointList.cpp	/^static const TCHAR *const type_filter_items[] = {$/;"	v	file:
type_filter_list	src/Dialogs/Airspace/AirspaceList.cpp	/^static constexpr StaticEnumChoice type_filter_list[] = {$/;"	v	file:
type_index	src/Dialogs/Waypoint/WaypointList.cpp	/^  TypeFilter type_index;$/;"	m	struct:WaypointListDialogState	file:
type_index	src/Waypoint/WaypointFilter.hpp	/^  TypeFilter type_index;$/;"	m	struct:WaypointFilter
type_label	src/Dialogs/Task/TaskPointDialog.cpp	/^    PixelRect type_label, change_type;$/;"	m	struct:final::Layout	file:
type_label	src/Dialogs/Task/TaskPointDialog.cpp	/^  WndFrame type_label;$/;"	m	class:final	file:
type_labels	src/Weather/PCMet/Overlays.cpp	/^static constexpr const TCHAR *type_labels[] = {$/;"	v	file:
type_names	src/Weather/PCMet/Overlays.cpp	/^static constexpr const char *type_names[] = {$/;"	v	file:
u	src/ui/canvas/memory/Murphy.hpp	/^  int u, v;$/;"	m	struct:MurphyIterator
uchar	src/Topography/shapelib/mapshape.h	/^  typedef unsigned char uchar;$/;"	t
ud	src/ui/event/poll/libinput/UdevContext.hpp	/^  struct udev *ud;$/;"	m	class:UdevContext	typeref:struct:UdevContext::udev
udev_context	src/ui/event/poll/libinput/LibInputHandler.hpp	/^  UdevContext* udev_context = nullptr;$/;"	m	class:UI::final
udev_context_mutex	src/ui/event/poll/libinput/UdevContext.cpp	/^static Mutex udev_context_mutex;$/;"	v	file:
udev_root_context	src/ui/event/poll/libinput/UdevContext.cpp	/^static UdevContext *udev_root_context = nullptr;$/;"	v	file:
ui_generation	src/MapWindow/MapWindow.hpp	/^  unsigned ui_generation = 1, buffer_generation = 0;$/;"	m	class:MapWindow
ui_settings	src/Blackboard/SettingsBlackboard.hpp	/^  UISettings ui_settings;$/;"	m	class:SettingsBlackboard
ui_state	src/Interface.cpp	/^UIState CommonInterface::Private::ui_state;$/;"	m	class:CommonInterface::Private	file:
ui_state	src/MapWindow/MapWindowBlackboard.hpp	/^  UIState ui_state;$/;"	m	class:MapWindowBlackboard
uint16_t	src/zzip/stdint.h	/^    typedef unsigned int uint16_t;      typedef signed int int16_t;$/;"	t
uint16_t	src/zzip/stdint.h	/^    typedef unsigned short uint16_t;    typedef signed short int16_t;$/;"	t
uint32_t	src/zzip/stdint.h	/^    typedef unsigned int uint32_t;      typedef signed int int32_t;$/;"	t
uint32_t	src/zzip/stdint.h	/^    typedef unsigned long uint32_t;     typedef signed long int32_t;$/;"	t
uint64_t	src/zzip/stdint.h	/^typedef unsigned _zzip___int64 uint64_t; typedef _zzip___int64 int64_t;$/;"	t
uint8_t	src/Engine/Airspace/AirspaceClass.hpp	/^enum AirspaceClass : uint8_t$/;"	g
uint8_t	src/FLARM/Error.hpp	/^  enum Code : uint8_t {$/;"	g
uint8_t	src/Renderer/TextInBox.hpp	/^  enum VerticalPosition : uint8_t {$/;"	g
uint8_t	src/util/ByteOrder.hxx	/^		 lo(uint8_t(src)) {}$/;"	f	class:PackedBE16
uint8_t	src/zzip/stdint.h	/^    typedef unsigned char uint8_t;      typedef signed char int8_t;$/;"	t
unallocated_list	src/util/Cache.hxx	/^	ItemList unallocated_list;$/;"	m	class:Cache
uncompressed	src/ui/canvas/Bitmap.hpp	/^  UncompressedImage uncompressed;$/;"	m	class:final
unique_links	src/Engine/Route/RoutePlanner.hpp	/^  RouteLinkSet unique_links;$/;"	m	class:RoutePlanner
unit	src/Form/DataField/Float.hpp	/^  StaticString<8> unit;$/;"	m	class:final
unit_descriptors	src/Units/Descriptor.cpp	/^const UnitDescriptor Units::unit_descriptors[] = {$/;"	m	class:Units	file:
unit_font	src/Look/InfoBoxLook.hpp	/^  Font unit_font;$/;"	m	struct:InfoBoxLook
unit_font	src/Look/VarioLook.hpp	/^  Font unit_font;$/;"	m	struct:VarioLook
unit_fraction_pen	src/Look/FlarmTrafficLook.hpp	/^  Pen unit_fraction_pen;$/;"	m	struct:FlarmTrafficLook
unit_fraction_pen	src/Look/InfoBoxLook.hpp	/^  Pen unit_fraction_pen;$/;"	m	struct:InfoBoxLook
unit_fraction_pen	src/Look/VarioLook.hpp	/^  Pen unit_fraction_pen;$/;"	m	struct:VarioLook
unit_width	src/InfoBoxes/InfoBoxWindow.hpp	/^  unsigned unit_width = 0;$/;"	m	class:InfoBoxWindow
unit_word	src/Device/Driver/CAI302/Protocol.hpp	/^    uint16_t unit_word;$/;"	m	struct:CAI302::Pilot
units	src/FormatSettings.hpp	/^  UnitSetting units;$/;"	m	struct:FormatSettings
units	src/Topography/shapelib/mapserver.h	/^    enum MS_UNITS units; \/* units of the projection *\/$/;"	m	struct:mapObj	typeref:enum:mapObj::MS_UNITS
units	src/Topography/shapelib/mapserver.h	/^    int units; \/* units of the projection *\/$/;"	m	struct:layerObj
units	src/Topography/shapelib/mapserver.h	/^    int units;$/;"	m	struct:__anon47
unk	src/Terrain/jasper/jpc/jpc_cs.h	/^	jpc_unk_t unk;$/;"	m	union:__anon155
unknown1	src/Device/Driver/LX/Protocol.hpp	/^    uint8_t unknown1[3];$/;"	m	struct:LX::Pilot
unknown1	src/Device/Driver/LX/Protocol.hpp	/^    uint8_t unknown1[5];$/;"	m	struct:LX::Declaration
unknown2	src/Device/Driver/LX/Protocol.hpp	/^    uint8_t unknown2[73];$/;"	m	struct:LX::Pilot
unlock	src/thread/WindowsSharedMutex.hxx	/^	void unlock() {$/;"	f	class:WindowsSharedMutex
unlock_shared	src/thread/WindowsSharedMutex.hxx	/^	void unlock_shared() {$/;"	f	class:WindowsSharedMutex
unmap_buffer	src/ui/canvas/opengl/Dynamic.cpp	/^PFNGLUNMAPBUFFEROESPROC unmap_buffer;$/;"	m	namespace:GLExt	file:
unpowered_at	src/Computer/FlyingComputer.hpp	/^  GeoPoint unpowered_at;$/;"	m	class:FlyingComputer
unpowered_since	src/Computer/FlyingComputer.hpp	/^  double unpowered_since;$/;"	m	class:FlyingComputer
unreachable_brush	src/Look/WaypointLook.hpp	/^  Brush reachable_brush, terrain_unreachable_brush, unreachable_brush;$/;"	m	struct:WaypointLook
unscaled	src/Renderer/ChartRenderer.hpp	/^    bool unscaled = true;$/;"	m	struct:ChartRenderer::Axis
until	src/Device/Port/DumpPort.hpp	/^  std::chrono::steady_clock::time_point until =$/;"	m	class:final
up_button	src/Dialogs/Task/Manager/TaskEditPanel.cpp	/^  Button *down_button, *up_button;$/;"	m	class:TaskEditPanel	file:
update	src/Device/Driver/Volkslogger/grecord.cpp	/^GRECORD::update(uint8_t b)$/;"	f	class:GRECORD
update	src/Engine/Task/Computer/TaskVarioComputer.cpp	/^TaskVarioComputer::update(TaskVario &data, const GlideResult &solution)$/;"	f	class:TaskVarioComputer
update	src/Engine/Task/Stats/TaskSummary.hpp	/^  void update(double d_remaining, double d_planned) {$/;"	f	struct:TaskSummary
update	src/InfoBoxes/Content/Factory.cpp	/^  void (*update)(InfoBoxData &data);$/;"	m	class:InfoBoxContentCallback	file:
update	src/InfoBoxes/Content/Factory.cpp	/^  void (*update)(InfoBoxData &data);$/;"	m	struct:MetaData	file:
update_button	src/Dialogs/FileManager.cpp	/^  Button *download_button, *add_button, *cancel_button, *update_button;$/;"	m	class:ManagedFileListWidget	file:
update_button	src/Dialogs/Weather/MapOverlayWidget.cpp	/^  Button *use_button, *disable_button, *update_button;$/;"	m	class:final	file:
update_button	src/Dialogs/Weather/NOAAList.cpp	/^  Button *details_button, *add_button, *update_button, *remove_button;$/;"	m	class:final	file:
update_clock	src/Computer/Wind/Store.hpp	/^  double update_clock;$/;"	m	class:WindStore
update_date	src/Repository/AvailableFile.hpp	/^  BrokenDate update_date;$/;"	m	struct:AvailableFile
update_error	src/Operation/ThreadedOperationEnvironment.hpp	/^    bool update_error;$/;"	m	struct:ThreadedOperationEnvironment::Data
update_marker	src/ui/canvas/fb/mxcfb.h	/^	__u32 update_marker;$/;"	m	struct:mxcfb_update_data
update_mode	src/ui/canvas/fb/mxcfb.h	/^	__u32 update_mode;$/;"	m	struct:mxcfb_update_data
update_progress_position	src/Operation/ThreadedOperationEnvironment.hpp	/^       update_progress_range(false), update_progress_position(false) {}$/;"	f	struct:ThreadedOperationEnvironment::Data
update_progress_position	src/Operation/ThreadedOperationEnvironment.hpp	/^    bool update_text, update_progress_range, update_progress_position;$/;"	m	struct:ThreadedOperationEnvironment::Data
update_progress_range	src/Operation/ThreadedOperationEnvironment.hpp	/^    bool update_text, update_progress_range, update_progress_position;$/;"	m	struct:ThreadedOperationEnvironment::Data
update_region	src/ui/canvas/fb/mxcfb.h	/^	struct mxcfb_rect update_region;$/;"	m	struct:mxcfb_update_data	typeref:struct:mxcfb_update_data::mxcfb_rect
update_text	src/Operation/ThreadedOperationEnvironment.hpp	/^    bool update_text, update_progress_range, update_progress_position;$/;"	m	struct:ThreadedOperationEnvironment::Data
updated	src/Computer/Wind/Store.hpp	/^  bool updated;$/;"	m	class:WindStore
upper_hull	src/Geo/ConvexHull/GrahamScan.hpp	/^  std::vector<SearchPoint*> upper_hull;$/;"	m	class:GrahamScan
upper_partition_points	src/Geo/ConvexHull/GrahamScan.hpp	/^  std::vector<SearchPoint*> upper_partition_points;$/;"	m	class:GrahamScan
upper_right	src/Geo/Flat/FlatBoundingBox.hpp	/^  FlatGeoPoint upper_right;$/;"	m	struct:FlatBoundingBox
uri	src/Repository/AvailableFile.hpp	/^  std::string uri;$/;"	m	struct:AvailableFile
uri	src/Weather/PCMet/Images.hpp	/^  const char *uri;$/;"	m	struct:PCMet::ImageType
uri	src/net/http/DownloadManager.cpp	/^    std::string uri;$/;"	m	struct:final::Item	file:
uring	src/event/Loop.hxx	/^	std::unique_ptr<Uring::Manager> uring;$/;"	m	class:final
uring_initialized	src/event/Loop.hxx	/^	bool uring_initialized = false;$/;"	m	class:final
url	src/Weather/Rasp/Providers.hpp	/^  const char *url;$/;"	m	struct:RaspProvider
url	src/net/http/ToBuffer.hpp	/^  const char *url;$/;"	m	class:Net::DownloadToBufferJob
url	src/net/http/ToFile.hpp	/^  const char *url;$/;"	m	class:Net::DownloadToFileJob
usage	src/Device/Driver/LX/LXN.hpp	/^    uint8_t usage[12];$/;"	m	struct:LXN::Task
usage	src/system/Args.hpp	/^  const char *name, *usage;$/;"	m	class:Args
use_bitmap_alpha	src/MapWindow/OverlayBitmap.hpp	/^  bool use_bitmap_alpha = true;$/;"	m	class:final
use_button	src/Dialogs/Weather/MapOverlayWidget.cpp	/^  Button *use_button, *disable_button, *update_button;$/;"	m	class:final	file:
use_ceiling	src/Engine/Route/Config.hpp	/^  bool use_ceiling;$/;"	m	struct:RoutePlannerConfig
use_colors	src/InfoBoxes/InfoBoxSettings.hpp	/^  bool inverse, use_colors;$/;"	m	struct:InfoBoxSettings
use_final_glide	src/InfoBoxes/InfoBoxSettings.hpp	/^  bool use_final_glide;$/;"	m	struct:InfoBoxSettings
use_geoid	src/Device/Parser.hpp	/^  bool use_geoid;$/;"	m	class:NMEAParser
use_imagecache	src/Topography/shapelib/mapserver.h	/^    int use_imagecache;$/;"	m	struct:rendererVTableObj
use_second_device	src/Device/Config.hpp	/^  bool use_second_device;$/;"	m	struct:DeviceConfig
use_stencil	src/MapWindow/StencilMapCanvas.hpp	/^  bool use_stencil;$/;"	m	class:StencilMapCanvas
usegetshape	src/Topography/shapelib/mapserver.h	/^    int usegetshape;$/;"	m	struct:__anon44
user_coordinate_format	src/Formatter/UserGeoPointFormatter.cpp	/^static CoordinateFormat user_coordinate_format = CoordinateFormat::DDMMSS;$/;"	v	file:
user_id	src/Tracking/SkyLines/Protocol.hpp	/^  uint32_t user_id;$/;"	m	struct:SkyLinesTracking::UserNameRequestPacket
user_id	src/Tracking/SkyLines/Protocol.hpp	/^  uint32_t user_id;$/;"	m	struct:SkyLinesTracking::UserNameResponsePacket
user_idle_clock	src/ui/event/Idle.cpp	/^static PeriodClock user_idle_clock;$/;"	v	file:
user_names	src/Tracking/SkyLines/Data.hpp	/^  std::map<uint32_t, tstring> user_names;$/;"	m	struct:SkyLinesTracking::Data
user_switch	src/NMEA/SwitchState.hpp	/^  UserSwitch user_switch;$/;"	m	struct:SwitchState
user_switch_list	src/Dialogs/Device/Vega/SwitchesDialog.cpp	/^static constexpr StaticEnumChoice user_switch_list[] = {$/;"	v	file:
username	src/Tracking/LiveTrack24/Settings.hpp	/^  StaticString<64> username;$/;"	m	struct:LiveTrack24::Settings
username	src/Weather/PCMet/Settings.hpp	/^    StaticString<64> username;$/;"	m	struct:PCMetSettings::Credentials
username	src/net/http/ToBuffer.hpp	/^  const char *username = nullptr, *password = nullptr;$/;"	m	class:Net::DownloadToBufferJob
username	src/net/http/ToFile.hpp	/^  const char *username = nullptr, *password = nullptr;$/;"	m	class:Net::DownloadToFileJob
usize	src/zzip/file.h	/^    zzip_size_t usize;$/;"	m	struct:zzip_file
utc_offset	src/Computer/Settings.hpp	/^  RoughTimeDelta utc_offset;$/;"	m	struct:ComputerSettings
utc_offset	src/Renderer/MapItemListRenderer.hpp	/^  const RoughTimeDelta utc_offset;$/;"	m	class:MapItemListRenderer
utfdata	src/Topography/shapelib/mapserver.h	/^    expressionObj utfdata;$/;"	m	struct:layerObj
utfitem	src/Topography/shapelib/mapserver.h	/^    char *utfitem;$/;"	m	struct:layerObj
utfitemindex	src/Topography/shapelib/mapserver.h	/^    int utfitemindex;$/;"	m	struct:layerObj
util_class	src/Android/DownloadManager.cpp	/^static Java::TrivialClass util_class;$/;"	v	file:
v	src/Dialogs/Plane/PolarShapeEditWidget.hpp	/^    std::unique_ptr<WndProperty> v, w;$/;"	m	struct:PolarShapeEditWidget::PointEditor
v	src/Polar/Shape.hpp	/^  double v;$/;"	m	struct:PolarPoint
v	src/UIUtil/KineticManager.hpp	/^  double v;$/;"	m	class:KineticManager
v	src/ui/canvas/memory/Murphy.hpp	/^  int u, v;$/;"	m	struct:MurphyIterator
v	src/ui/canvas/opengl/VertexArray.hpp	/^  BulkPixelPoint v[SIZE];$/;"	m	struct:GLVertexArray
v1	src/Polar/PolarStore.hpp	/^    double v1;$/;"	m	struct:PolarStore::Item
v2	src/Polar/PolarStore.hpp	/^    double v2;$/;"	m	struct:PolarStore::Item
v3	src/Polar/PolarStore.hpp	/^    double v3;$/;"	m	struct:PolarStore::Item
v7_setting_names	src/Dialogs/Device/LX/V7ConfigWidget.cpp	/^static const char *const v7_setting_names[] = {$/;"	v	file:
v7_settings	src/Device/Driver/LX/Internal.hpp	/^  DeviceSettingsMap<std::string> v7_settings;$/;"	m	class:LXDevice
v8context	src/Topography/shapelib/mapserver.h	/^    void *v8context;$/;"	m	struct:mapObj
v_alt	src/Engine/Util/AircraftStateFilter.hpp	/^  double v_x, v_y, v_alt;$/;"	m	class:AircraftStateFilter
v_label	src/Dialogs/Plane/PolarShapeEditWidget.hpp	/^  std::unique_ptr<WndFrame> v_label, w_label;$/;"	m	class:PolarShapeEditWidget
v_lpf	src/Engine/Task/Computer/IncrementalSpeedComputer.hpp	/^  Filter v_lpf;$/;"	m	class:IncrementalSpeedComputer
v_lpf	src/Engine/Task/Computer/TaskVarioComputer.hpp	/^  Filter v_lpf;$/;"	m	class:TaskVarioComputer
v_no	src/Polar/Polar.hpp	/^  double v_no;         \/**< Maximum speed for normal operations (m\/s) *\/$/;"	m	struct:PolarInfo
v_no	src/Polar/PolarStore.hpp	/^    double v_no;$/;"	m	struct:PolarStore::Item
v_opt	src/Engine/GlideSolvers/GlideResult.hpp	/^  double v_opt;$/;"	m	struct:GlideResult
v_padding	src/Gauge/FlarmTrafficWindow.hpp	/^  const unsigned h_padding, v_padding;$/;"	m	class:FlarmTrafficWindow
v_x	src/Engine/Util/AircraftStateFilter.hpp	/^  double v_x, v_y, v_alt;$/;"	m	class:AircraftStateFilter
v_y	src/Engine/Util/AircraftStateFilter.hpp	/^  double v_x, v_y, v_alt;$/;"	m	class:AircraftStateFilter
valid	src/Computer/GlideRatioCalculator.hpp	/^  bool valid;$/;"	m	class:GlideRatioCalculator
valid	src/Device/Driver/LX/Protocol.hpp	/^    uint8_t valid;$/;"	m	struct:LX::FlightInfo
valid	src/Device/Port/TTYPort.hpp	/^  std::atomic<bool> valid;$/;"	m	class:TTYPort
valid	src/Engine/Route/RoutePolar.hpp	/^    bool valid;$/;"	m	struct:RoutePolar::RoutePolarPoint
valid	src/Engine/Task/Ordered/Points/IntermediatePoint.hpp	/^  bool valid() const {$/;"	f	class:IntermediateTaskPoint
valid	src/Engine/Task/Solvers/TaskBestMc.cpp	/^TaskBestMc::valid(const double mc) const$/;"	f	class:TaskBestMc
valid	src/Engine/Task/Solvers/TaskMinTarget.cpp	/^TaskMinTarget::valid(const double tp)$/;"	f	class:TaskMinTarget
valid	src/Engine/Task/Solvers/TaskOptTarget.cpp	/^TaskOptTarget::valid(const double tp)$/;"	f	class:TaskOptTarget
valid	src/FLARM/Traffic.hpp	/^  Validity valid;$/;"	m	class:FlarmTraffic::AircraftType
valid	src/Form/DigitEntry.hpp	/^  bool valid;$/;"	m	class:CoordinateFormat
valid	src/GliderLink/Traffic.hpp	/^  Validity valid;$/;"	m	struct:GliderLinkTraffic
valid	src/PageSettings.hpp	/^  bool valid;$/;"	m	struct:PageLayout
valid	src/Task/TaskFileSeeYou.cpp	/^  bool valid;$/;"	m	struct:SeeYouTurnpointInformation	file:
valid	src/Task/TaskStore.hpp	/^    bool valid;$/;"	m	struct:TaskStore::Item
valid	src/Terrain/jasper/jpc/jpc_t2cod.h	/^	bool valid;$/;"	m	struct:__anon115
valid_bytes	src/Device/Driver/CAI302/Protocol.hpp	/^    uint16_t valid_bytes;$/;"	m	struct:CAI302::FileData
valid_last_state	src/Computer/TaskComputer.hpp	/^  bool valid_last_state;$/;"	m	class:TaskComputer
valid_time	src/Weather/PCMet/Overlays.hpp	/^  BrokenDateTime run_time, valid_time;$/;"	m	struct:PCMet::Overlay
validate	src/Terrain/jasper/jas_image.h	/^	int (*validate)(jas_stream_t *in);$/;"	m	struct:__anon103
validation	src/Topography/shapelib/mapserver.h	/^    hashTableObj validation;$/;"	m	struct:__anon35
validation	src/Topography/shapelib/mapserver.h	/^    hashTableObj validation;$/;"	m	struct:classObj
validation	src/Topography/shapelib/mapserver.h	/^    hashTableObj validation;$/;"	m	struct:layerObj
validation_error_strings	src/Task/ValidationErrorStrings.cpp	/^static const TCHAR *const validation_error_strings[] = {$/;"	v	file:
validity	src/Engine/GlideSolvers/GlideResult.hpp	/^  Validity validity;$/;"	m	struct:GlideResult
validstates	src/Terrain/jasper/jpc/jpc_dec.c	/^	uint_least16_t validstates;$/;"	m	struct:__anon131	file:
value	src/Atmosphere/Pressure.hpp	/^  double value;$/;"	m	class:AtmosphericPressure
value	src/Atmosphere/Temperature.hpp	/^  double value;$/;"	m	class:Temperature
value	src/Computer/StateClock.hpp	/^  double value;$/;"	m	class:StateClock
value	src/Device/Driver/IMI/Protocol/Conversion.hpp	/^      IMIDWORD value;$/;"	m	union:IMI::AngleConverter::__anon161
value	src/Device/Driver/LX/LXN.hpp	/^    char value[0];$/;"	m	struct:LXN::String
value	src/Device/SettingsMap.hpp	/^    V value;$/;"	m	struct:DeviceSettingsMap::Item
value	src/Dialogs/Device/Vega/VegaParametersWidget.hpp	/^    int value;$/;"	m	struct:VegaParametersWidget::Parameter
value	src/Dialogs/Settings/Panels/PagesConfigPanel.cpp	/^  PageLayout value;$/;"	m	class:final	file:
value	src/Dialogs/Waypoint/dlgWaypointEdit.cpp	/^  Waypoint value;$/;"	m	class:final	file:
value	src/Engine/Airspace/AirspaceActivity.hpp	/^    unsigned char value;$/;"	m	union:AirspaceActivity::__anon167
value	src/Engine/PathSolvers/Dijkstra.hpp	/^      :parent(_parent), value(_value) {}$/;"	f	struct:Dijkstra::Edge
value	src/Engine/PathSolvers/Dijkstra.hpp	/^    unsigned value;$/;"	m	struct:Dijkstra::Edge
value	src/Engine/PathSolvers/ScanTaskPoint.hpp	/^    :value((stage_number << 16) | point_index) {}$/;"	f	class:ScanTaskPoint
value	src/Engine/PathSolvers/ScanTaskPoint.hpp	/^  uint32_t value;$/;"	m	class:ScanTaskPoint
value	src/Engine/Task/Stats/TaskVario.hpp	/^  double value;$/;"	m	class:TaskVario
value	src/FLARM/FlarmId.hpp	/^  uint32_t value;$/;"	m	class:FlarmId
value	src/Form/DataField/Angle.hpp	/^  unsigned value;$/;"	m	class:final
value	src/Form/DataField/Enum.hpp	/^  unsigned int value;$/;"	m	class:final
value	src/Form/DataField/GeoPoint.hpp	/^  GeoPoint value;$/;"	m	class:final
value	src/Form/DataField/Integer.hpp	/^  int value;$/;"	m	class:final
value	src/Form/DataField/RoughTime.hpp	/^  RoughTime value;$/;"	m	class:final
value	src/Form/DataField/Time.hpp	/^  int value;$/;"	m	class:final
value	src/Form/DigitEntry.hpp	/^    uint8_t value;$/;"	m	struct:CoordinateFormat::Column
value	src/Form/Edit.hpp	/^  tstring value;$/;"	m	class:WndProperty
value	src/Gauge/GaugeVario.hpp	/^    DrawInfo value;$/;"	m	struct:GaugeVario::LabelValueDrawInfo
value	src/Geo/Memento/DistanceMemento.hpp	/^  mutable double value;$/;"	m	class:DistanceMemento
value	src/Geo/Memento/GeoVectorMemento.hpp	/^  mutable GeoVector value;$/;"	m	class:GeoVectorMemento
value	src/GliderLink/GliderLinkId.hpp	/^  uint32_t value;$/;"	m	class:GliderLinkId
value	src/InfoBoxes/Data.hpp	/^  StaticString<32> value;$/;"	m	struct:InfoBoxData
value	src/Look/InfoBoxLook.hpp	/^  } title, value, comment;$/;"	m	struct:InfoBoxLook	typeref:struct:InfoBoxLook::__anon17
value	src/Math/Angle.hpp	/^  double value;$/;"	m	class:Angle
value	src/RadioFrequency.hpp	/^  uint16_t value;$/;"	m	class:RadioFrequency
value	src/Rough/RoughAltitude.hpp	/^  short value;$/;"	m	class:RoughAltitude
value	src/Rough/RoughAngle.hpp	/^  int16_t value;$/;"	m	class:RoughAngle
value	src/Rough/RoughDistance.hpp	/^  uint32_t value;$/;"	m	class:RoughDistance
value	src/Rough/RoughSpeed.hpp	/^  uint16_t value;$/;"	m	class:RoughSpeed
value	src/Rough/RoughVSpeed.hpp	/^  int16_t value;$/;"	m	class:RoughVSpeed
value	src/Screen/LargeTextWindow.hpp	/^  tstring value;$/;"	m	class:LargeTextWindow
value	src/Screen/ProgressBar.hpp	/^  unsigned min_value = 0, max_value = 0, value = 0, step_size = 1;$/;"	m	class:ProgressBar
value	src/Terrain/Height.hpp	/^  int16_t value;$/;"	m	class:TerrainHeight
value	src/Topography/shapelib/mapserver.h	/^    char *value;$/;"	m	struct:__anon52
value	src/XML/Node.hpp	/^      tstring name, value;$/;"	m	struct:XMLNode::Data::Attribute
value	src/event/net/cares/CoLookup.hxx	/^	std::vector<AllocatedSocketAddress> value;$/;"	m	class:Cares::final
value	src/io/KeyValueFileReader.hpp	/^  char *value;$/;"	m	struct:KeyValuePair
value	src/java/Ref.hxx	/^		:env(_env), value(_value)$/;"	f	class:Java::LocalRef
value	src/java/Ref.hxx	/^		:value(_value)$/;"	f	class:Java::GlobalRef
value	src/java/Ref.hxx	/^	T value = nullptr;$/;"	m	class:Java::LocalRef
value	src/java/Ref.hxx	/^	T value;$/;"	m	class:Java::GlobalRef
value	src/java/Ref.hxx	/^	T value;$/;"	m	class:Java::TrivialRef
value	src/lua/Util.hxx	/^	void *value;$/;"	m	struct:Lua::StackIndex::LightUserData
value	src/net/AddressInfo.hxx	/^	struct addrinfo *value = nullptr;$/;"	m	class:AddressInfoList	typeref:struct:AddressInfoList::addrinfo
value	src/system/ConvertPathName.hpp	/^  Value value;$/;"	m	class:NarrowPathName
value	src/system/ConvertPathName.hpp	/^  Value value;$/;"	m	class:PathName
value	src/system/Path.hpp	/^  value_type value;$/;"	m	class:AllocatedPath
value	src/system/Path.hpp	/^  value_type value;$/;"	m	class:Path
value	src/thread/Guard.hpp	/^      :value(_guard.value) {}$/;"	f	class:Guard::UnprotectedLease
value	src/thread/Guard.hpp	/^    T &value;$/;"	m	class:Guard::UnprotectedLease
value	src/thread/Guard.hpp	/^  T &value;$/;"	m	class:Guard
value	src/thread/Guard.hpp	/^  explicit Guard(T &_value) noexcept:value(_value) {}$/;"	f	class:Guard
value	src/time/RoughTime.hpp	/^  int16_t value;$/;"	m	class:RoughTimeDelta
value	src/time/RoughTime.hpp	/^  uint16_t value;$/;"	m	class:RoughTime
value	src/ui/canvas/PortableColor.hpp	/^  uint16_t value;$/;"	m	class:RGB555Color
value	src/ui/canvas/PortableColor.hpp	/^  uint16_t value;$/;"	m	class:RGB565Color
value	src/ui/canvas/PortableColor.hpp	/^  uint8_t value;$/;"	m	class:Luminosity8
value	src/ui/canvas/RawBitmap.hpp	/^  BGR8Color value;$/;"	m	struct:RawColor
value	src/ui/canvas/RawBitmap.hpp	/^  Luminosity8 value;$/;"	m	struct:RawColor
value	src/ui/canvas/RawBitmap.hpp	/^  RGB565Color value;$/;"	m	struct:RawColor
value	src/ui/canvas/RawBitmap.hpp	/^  RGB8Color value;$/;"	m	struct:RawColor
value	src/ui/canvas/gdi/Color.hpp	/^  COLORREF value;$/;"	m	class:Color
value	src/ui/canvas/gdi/Color.hpp	/^  COLORREF value;$/;"	m	class:HWColor
value	src/util/AllocatedString.hxx	/^		:value(_value) {}$/;"	f	class:BasicAllocatedString
value	src/util/AllocatedString.hxx	/^		:value(n) {}$/;"	f	class:BasicAllocatedString
value	src/util/AllocatedString.hxx	/^		:value(src.Steal()) {}$/;"	f	class:BasicAllocatedString
value	src/util/AllocatedString.hxx	/^	pointer value = nullptr;$/;"	m	class:BasicAllocatedString
value	src/util/ConvertString.hpp	/^    :value(_value)$/;"	f	class:UTF8ToWideConverter
value	src/util/ConvertString.hpp	/^    :value(_value)$/;"	f	class:WideToACPConverter
value	src/util/ConvertString.hpp	/^    :value(_value)$/;"	f	class:WideToUTF8Converter
value	src/util/ConvertString.hpp	/^  Value value;$/;"	m	class:UTF8ToWideConverter
value	src/util/ConvertString.hpp	/^  Value value;$/;"	m	class:WideToACPConverter
value	src/util/ConvertString.hpp	/^  Value value;$/;"	m	class:WideToUTF8Converter
value	src/util/QuadTree.hxx	/^		T value;$/;"	m	struct:QuadTree::Leaf
value	src/util/RadixTree.hpp	/^    T value;$/;"	m	struct:RadixTree::Leaf
value	src/util/Serial.hpp	/^  unsigned value;$/;"	m	class:Serial
value	src/util/StringPointer.hxx	/^		:value(_value) {}$/;"	f	class:StringPointer
value	src/util/StringPointer.hxx	/^	const_pointer value;$/;"	m	class:StringPointer
value_	src/Terrain/jasper/jpc/jpc_tagtree.h	/^	int value_;$/;"	m	struct:jpc_tagtreenode_
value_and_comment_rect	src/InfoBoxes/InfoBoxWindow.hpp	/^  PixelRect value_and_comment_rect;$/;"	m	class:InfoBoxWindow
value_bottom	src/Gauge/GaugeVario.hpp	/^    int value_right, value_top, value_bottom, value_y;$/;"	m	struct:GaugeVario::LabelValueGeometry
value_color	src/InfoBoxes/Data.hpp	/^  uint8_t title_color, value_color, comment_color;$/;"	m	struct:InfoBoxData
value_font	src/Look/InfoBoxLook.hpp	/^  Font value_font, small_value_font;$/;"	m	struct:InfoBoxLook
value_font	src/Look/VarioLook.hpp	/^  Font value_font;$/;"	m	struct:VarioLook
value_pos	src/Gauge/GaugeVario.hpp	/^    PixelPoint label_pos, value_pos;$/;"	m	struct:GaugeVario::BallastGeometry
value_pos	src/Gauge/GaugeVario.hpp	/^    PixelPoint label_pos, value_pos;$/;"	m	struct:GaugeVario::BugsGeometry
value_rect	src/Gauge/GaugeVario.hpp	/^    PixelRect label_rect, value_rect;$/;"	m	struct:GaugeVario::BallastGeometry
value_rect	src/Gauge/GaugeVario.hpp	/^    PixelRect label_rect, value_rect;$/;"	m	struct:GaugeVario::BugsGeometry
value_rect	src/InfoBoxes/InfoBoxWindow.hpp	/^  PixelRect value_rect;$/;"	m	class:InfoBoxWindow
value_right	src/Gauge/GaugeVario.hpp	/^    int value_right, value_top, value_bottom, value_y;$/;"	m	struct:GaugeVario::LabelValueGeometry
value_top	src/Gauge/GaugeVario.hpp	/^    int value_right, value_top, value_bottom, value_y;$/;"	m	struct:GaugeVario::LabelValueGeometry
value_type	src/Engine/Trace/Trace.cpp	/^  typedef typename I::pointer value_type;$/;"	t	class:PointerIterator	file:
value_type	src/Engine/Trace/Trace.hpp	/^    typedef const TracePoint value_type;$/;"	t	class:Trace::const_iterator
value_type	src/system/Path.hpp	/^  typedef BasicAllocatedString<char_type> value_type;$/;"	t	class:AllocatedPath
value_type	src/system/Path.hpp	/^  typedef StringPointer<char_type> value_type;$/;"	t	class:Path
value_type	src/util/CastIterator.hpp	/^  typedef VT value_type;$/;"	t	class:CastIterator
value_type	src/util/IterableSplitString.hxx	/^	typedef typename StringView::value_type value_type;$/;"	t	class:BasicIterableSplitString
value_type	src/util/LightString.hxx	/^	typedef typename StringPointer<T>::value_type value_type;$/;"	t	class:LightString
value_type	src/util/QuadTree.hxx	/^		typedef T value_type;$/;"	t	class:iterator
value_type	src/util/QuadTree.hxx	/^		typedef const T value_type;$/;"	t	class:const_iterator
value_type	src/util/SliceAllocator.hxx	/^	typedef T value_type;$/;"	t	class:GlobalSliceAllocator
value_type	src/util/SliceAllocator.hxx	/^	typedef T value_type;$/;"	t	class:SliceAllocator
value_type	src/util/StringBuffer.hxx	/^	typedef T value_type;$/;"	t	class:BasicStringBuffer
value_type	src/util/StringBuilder.hxx	/^	typedef T value_type;$/;"	t	class:StringBuilder
value_type	src/util/StringParser.hxx	/^	typedef T value_type;$/;"	t	class:StringParser
value_unit	src/InfoBoxes/Data.hpp	/^  Unit value_unit;$/;"	m	struct:InfoBoxData
value_y	src/Gauge/GaugeVario.hpp	/^    int value_right, value_top, value_bottom, value_y;$/;"	m	struct:GaugeVario::LabelValueGeometry
values	src/Topography/shapelib/mapprimitive.h	/^  char **values;$/;"	m	struct:__anon72
values	src/Topography/shapelib/mapserver.h	/^    char **items, **values; \/* items\/values (process 1 record at a time) *\/$/;"	m	struct:__anon31
values	src/lua/Util.hxx	/^	std::tuple<T...> values;$/;"	m	struct:Lua::StackIndex::LightUserData::CClosure
var_x_accel_	src/Math/KalmanFilter1d.hpp	/^  double var_x_accel_;$/;"	m	class:KalmanFilter1d
variation	src/NMEA/Info.hpp	/^  Angle variation;$/;"	m	struct:NMEAInfo
variation_available	src/NMEA/Info.hpp	/^  Validity variation_available;$/;"	m	struct:NMEAInfo
vario	src/Audio/Settings.hpp	/^  VarioSoundSettings vario;$/;"	m	struct:SoundSettings
vario	src/Dialogs/Device/DeviceListDialog.cpp	/^    bool alive:1, location:1, gps:1, baro:1, airspeed:1, vario:1, traffic:1;$/;"	m	struct:final::Flags	file:
vario	src/Engine/Navigation/Aircraft.hpp	/^  double vario;$/;"	m	struct:VarioState
vario	src/Engine/Task/Computer/ElementStatComputer.hpp	/^  TaskVarioComputer vario;$/;"	m	class:ElementStatComputer
vario	src/Engine/Task/Stats/ElementStat.hpp	/^  TaskVario vario;$/;"	m	struct:ElementStat
vario	src/Engine/Trace/Point.hpp	/^  RoughVSpeed vario;$/;"	m	class:TracePoint
vario	src/Gauge/ThermalAssistantRenderer.hpp	/^  VarioInfo vario;$/;"	m	class:ThermalAssistantRenderer
vario	src/InfoBoxes/InfoBoxLayout.hpp	/^    PixelRect vario;$/;"	m	struct:InfoBoxLayout::Layout
vario	src/Look/Look.hpp	/^  VarioLook vario;$/;"	m	struct:Look
vario	src/NMEA/ClimbHistory.hpp	/^  double vario[SIZE];$/;"	m	class:ClimbHistory
vario	src/Tracking/SkyLines/Protocol.hpp	/^  int16_t vario;$/;"	m	struct:SkyLinesTracking::FixPacket
vario	src/UISettings.hpp	/^  VarioSettings vario;$/;"	m	struct:UISettings
vario_30s_filter	src/Computer/AverageVarioComputer.hpp	/^  WindowFilter<30> vario_30s_filter;$/;"	m	class:AverageVarioComputer
vario_bar	src/Look/Look.hpp	/^  VarioBarLook vario_bar;$/;"	m	struct:Look
vario_bar_enabled	src/MapSettings.hpp	/^  bool vario_bar_enabled;$/;"	m	struct:MapSettings
vario_bar_renderer	src/MapWindow/GlueMapWindow.hpp	/^  VarioBarRenderer vario_bar_renderer;$/;"	m	class:GlueMapWindow
vario_circling_histogram	src/FlightStatistics.hpp	/^  Histogram vario_circling_histogram;$/;"	m	class:FlightStatistics
vario_cruise_histogram	src/FlightStatistics.hpp	/^  Histogram vario_cruise_histogram;$/;"	m	class:FlightStatistics
vario_filter	src/Device/Driver/FlyNet.cpp	/^  WindowFilter<40> vario_filter;$/;"	m	class:FlyNetDevice	file:
vario_look	src/Renderer/TraceHistoryRenderer.hpp	/^  const VarioLook &vario_look;$/;"	m	class:TraceHistoryRenderer
vario_scale_negative	src/Engine/Task/Stats/CommonStats.hpp	/^  double vario_scale_negative;$/;"	m	class:CommonStats
vario_scale_positive	src/Engine/Task/Stats/CommonStats.hpp	/^  double vario_scale_positive;$/;"	m	class:CommonStats
vaulter_driver	src/Device/Driver/Vaulter.cpp	/^const struct DeviceRegister vaulter_driver = {$/;"	v	typeref:struct:DeviceRegister
vcenter	src/Renderer/TextRenderer.hpp	/^  bool center = false, vcenter = false;$/;"	m	class:TextRenderer
vdop	src/NMEA/GPSState.hpp	/^  double vdop;$/;"	m	struct:GPSState
vec	src/Engine/Airspace/AirspaceSorter.hpp	/^  mutable GeoVector vec;$/;"	m	class:AirspaceSelectInfo
vec	src/Waypoint/WaypointList.hpp	/^  mutable GeoVector vec = GeoVector::Invalid();$/;"	m	struct:WaypointListItem
vector	src/Computer/Wind/CirclingWind.hpp	/^    SpeedVector vector;$/;"	m	struct:CirclingWind::Sample
vector	src/Computer/Wind/MeasurementList.hpp	/^  Vector vector;                \/**< Wind speed vector *\/$/;"	m	struct:WindMeasurement
vector	src/Dialogs/Traffic/TrafficList.cpp	/^    GeoVector vector = GeoVector::Invalid();$/;"	m	struct:TrafficListWidget::Item	file:
vector	src/Engine/GlideSolvers/GlideResult.hpp	/^  GeoVector vector;$/;"	m	struct:GlideResult
vector	src/Engine/GlideSolvers/GlideState.hpp	/^  GeoVector vector;$/;"	m	struct:GlideState
vector	src/Geo/Flat/FlatRay.hpp	/^  FlatGeoPoint vector;$/;"	m	class:FlatRay
vector	src/MapWindow/Items/MapItem.hpp	/^  GeoVector vector;$/;"	m	struct:LocationMapItem
vectorObj	src/Topography/shapelib/mapprimitive.h	/^} vectorObj;$/;"	t	typeref:struct:__anon69
vector_home	src/Engine/Task/Stats/CommonStats.hpp	/^  GeoVector vector_home;$/;"	m	class:CommonStats
vector_landable_rendering	src/Renderer/WaypointRendererSettings.hpp	/^  bool vector_landable_rendering;$/;"	m	struct:WaypointRendererSettings
vector_planned	src/Engine/Task/Points/TaskLeg.hpp	/^  GeoVector vector_planned;$/;"	m	class:TaskLeg
vector_remaining	src/Engine/Task/Points/TaskLeg.hpp	/^  GeoVector vector_remaining;$/;"	m	class:TaskLeg
vector_remaining	src/Engine/Task/Stats/ElementStat.hpp	/^  GeoVector vector_remaining;$/;"	m	struct:ElementStat
vector_travelled	src/Engine/Task/Points/TaskLeg.hpp	/^  GeoVector vector_travelled;$/;"	m	class:TaskLeg
vega	src/NMEA/SwitchState.hpp	/^  VegaSwitchState vega;$/;"	m	struct:SwitchState
vega_driver	src/Device/Driver/Vega/Register.cpp	/^const struct DeviceRegister vega_driver = {$/;"	v	typeref:struct:DeviceRegister
vehicleType	src/Tracking/LiveTrack24/Settings.hpp	/^  VehicleType vehicleType;$/;"	m	struct:LiveTrack24::Settings
vehicle_name	src/Tracking/LiveTrack24/Settings.hpp	/^  StaticString<64> vehicle_name;$/;"	m	struct:LiveTrack24::Settings
vehicle_type_list	src/Dialogs/Settings/Panels/TrackingConfigPanel.cpp	/^static constexpr StaticEnumChoice vehicle_type_list[] = {$/;"	v	file:
vendor	src/Device/Driver/LX/Convert.cpp	/^  char vendor[3];$/;"	m	struct:Context	file:
version	src/Device/Driver/BlueFly/Internal.hpp	/^    unsigned version;$/;"	m	struct:BlueFlyDevice::BlueFlySettings
version	src/Device/Driver/CAI302/Protocol.hpp	/^    char version[5];$/;"	m	struct:CAI302::GeneralInfo
version	src/Device/Driver/FLARM/BinaryProtocol.hpp	/^    uint8_t version;$/;"	m	struct:FLARM::FrameHeader
version	src/Device/Driver/LX/LXN.hpp	/^    const struct Version *version;$/;"	m	union:LXN::Packet	typeref:struct:LXN::Packet::Version
version	src/Dialogs/Device/ManageFlarmDialog.cpp	/^  const FlarmVersion version;$/;"	m	class:final	file:
version	src/FLARM/Data.hpp	/^  FlarmVersion version;$/;"	m	struct:FlarmData
version	src/Terrain/RasterTileCache.hpp	/^    unsigned version;$/;"	m	struct:RasterTileCache::CacheHeader
version	src/Topography/shapelib/maptree.h	/^    char  version;$/;"	m	struct:__anon81
version	src/zzip/format.h	/^    zzip_byte_t   version[1];$/;"	m	struct:zzip_version
vertex_buffer	src/ui/canvas/opengl/Canvas.cpp	/^AllocatedArray<BulkPixelPoint> Canvas::vertex_buffer;$/;"	m	class:Canvas	file:
vertex_buffer	src/ui/canvas/opengl/Canvas.hpp	/^  static AllocatedArray<BulkPixelPoint> vertex_buffer;$/;"	m	class:Canvas
vertex_counter	src/Engine/Route/ReachFanParms.hpp	/^  unsigned vertex_counter = 0;$/;"	m	struct:ReachFanParms
vertical	src/Form/TabDisplay.hpp	/^  bool vertical;$/;"	m	class:final
vertical	src/Widget/RowFormWidget.cpp	/^  :look(_look), vertical(_vertical)$/;"	f
vertical	src/Widget/RowFormWidget.hpp	/^  const bool vertical;$/;"	m	class:RowFormWidget
vertical	src/Widget/TabWidget.hpp	/^    bool vertical;$/;"	m	struct:TabWidget::Layout
vertical	src/Widget/TwoWidgets.hpp	/^  const bool vertical;$/;"	m	class:TwoWidgets
vertical_position	src/Renderer/TextInBox.hpp	/^  VerticalPosition vertical_position = VerticalPosition::BELOW;$/;"	v
vertical_speed_unit	src/Units/Settings.hpp	/^  Unit vertical_speed_unit;$/;"	m	struct:UnitSetting
vertical_tolerance	src/Engine/Airspace/AirspaceAircraftPerformance.hpp	/^  double vertical_tolerance;$/;"	m	class:AirspaceAircraftPerformance
vext	src/Device/Driver/IMI/Protocol/Types.hpp	/^    IMIDWORD vext:8;$/;"	m	struct:IMI::FixK
vibrate_method	src/Android/Vibrator.cpp	/^jmethodID Vibrator::cancel_method, Vibrator::vibrate_method;$/;"	m	class:Vibrator	file:
vibrate_method	src/Android/Vibrator.hpp	/^  static jmethodID cancel_method, vibrate_method;$/;"	m	class:Vibrator
vibrator	src/Android/Main.cpp	/^Vibrator *vibrator;$/;"	v
view	src/Gauge/BigThermalAssistantWidget.hpp	/^  std::unique_ptr<BigThermalAssistantWindow> view;$/;"	m	class:BigThermalAssistantWidget
view	src/Gauge/BigTrafficWidget.cpp	/^  FlarmTrafficControl view;$/;"	m	struct:TrafficWidget::Windows	file:
viewport_size	src/ui/canvas/opengl/Globals.cpp	/^UnsignedPoint2D window_size, viewport_size;$/;"	m	namespace:OpenGL	file:
virt_addr	src/ui/canvas/fb/mxcfb.h	/^	void *virt_addr;$/;"	m	struct:mxcfb_alt_buffer_data
virtual_time	src/Replay/Replay.hpp	/^  double virtual_time;$/;"	m	class:final
visibility	src/Weather/ParsedMETAR.hpp	/^  unsigned visibility;$/;"	m	struct:ParsedMETAR
visibility_available	src/Weather/ParsedMETAR.hpp	/^  bool visibility_available;$/;"	m	struct:ParsedMETAR
visible	src/Dialogs/ListPicker.cpp	/^  bool visible;$/;"	m	class:ListPickerWidget	file:
visible	src/Menu/ButtonLabel.hpp	/^    bool visible, enabled;$/;"	m	struct:ButtonLabel::Expanded
visible	src/StatusMessage.hpp	/^  bool visible;$/;"	m	struct:StatusMessage
visible	src/Widget/PagerWidget.hpp	/^  bool initialised = false, prepared, visible;$/;"	m	class:PagerWidget
visible	src/Widget/RowFormWidget.hpp	/^      :type(_type), visible(false) {$/;"	f	struct:RowFormWidget::Row
visible	src/Widget/RowFormWidget.hpp	/^    bool visible;$/;"	m	struct:RowFormWidget::Row
visible	src/ui/event/poll/X11Queue.hpp	/^  bool mapped = true, visible = true;$/;"	m	class:UI::X11EventQueue
visible	src/ui/window/Window.hpp	/^  bool visible = true;$/;"	m	class:Window
visible	src/ui/window/Window.hpp	/^  bool visible = true;$/;"	m	class:WindowStyle
visible_bounds	src/Topography/TopographyFileRenderer.hpp	/^  GeoBounds visible_bounds;$/;"	m	class:final
visible_labels	src/Topography/TopographyFileRenderer.hpp	/^  std::vector<const XShape *> visible_shapes, visible_labels;$/;"	m	class:final
visible_predicate	src/MapWindow/Items/AirspaceBuilder.cpp	/^  const AirspaceVisibility visible_predicate;$/;"	m	class:AirspaceAtPointPredicate	file:
visible_predicate	src/Renderer/AirspaceLabelRenderer.cpp	/^  const AirspaceVisibility visible_predicate;$/;"	m	class:AirspaceMapVisible	file:
visible_predicate	src/Renderer/AirspaceRenderer.cpp	/^  const AirspaceVisibility visible_predicate;$/;"	m	class:AirspaceMapVisible	file:
visible_projection	src/MapWindow/MapWindow.hpp	/^  MapWindowProjection visible_projection;$/;"	m	class:MapWindow
visible_serial	src/Topography/TopographyFileRenderer.hpp	/^  Serial visible_serial;$/;"	m	class:final
visible_shapes	src/Topography/TopographyFileRenderer.hpp	/^  std::vector<const XShape *> visible_shapes, visible_labels;$/;"	m	class:final
visitor	src/util/RadixTree.hpp	/^    V &visitor;$/;"	m	struct:RadixTree::KeyVisitorAdapter
vl_PGCS1	src/Device/Driver/Volkslogger/Parser.cpp	/^vl_PGCS1(NMEAInputLine &line, NMEAInfo &info)$/;"	f	file:
voff	src/Terrain/jasper/jpc/jpc_cs.h	/^	uint_fast16_t voff;$/;"	m	struct:__anon152
vol_percent	src/Audio/PCMMixerDataSource.hpp	/^  unsigned vol_percent = 100 \/ MAX_MIXER_SOURCES_COUNT;$/;"	m	class:PCMMixerDataSource
volatile_data	src/Device/Driver/Vega/Internal.hpp	/^  Vega::VolatileData volatile_data;$/;"	m	class:VegaDevice
volkslogger	src/Device/RecordedFlight.hpp	/^    uint8_t volkslogger;$/;"	m	union:RecordedFlightInfo::__anon159
volkslogger_driver	src/Device/Driver/Volkslogger/Register.cpp	/^const struct DeviceRegister volkslogger_driver = {$/;"	v	typeref:struct:DeviceRegister
voltage	src/Device/Descriptor.hpp	/^  VoltageDevice *voltage;$/;"	m	class:final
voltage	src/NMEA/Info.hpp	/^  double voltage;$/;"	m	struct:NMEAInfo
voltage_available	src/NMEA/Info.hpp	/^  Validity voltage_available;$/;"	m	struct:NMEAInfo
voltage_class	src/Android/VoltageDevice.cpp	/^static Java::TrivialClass voltage_class;$/;"	v	file:
voltage_ctor	src/Android/VoltageDevice.cpp	/^static jmethodID voltage_ctor, close_method;$/;"	v	file:
voltage_filter	src/Android/VoltageDevice.hpp	/^  WindowFilter<16> voltage_filter[NUMBER_OF_VOLTAGES];$/;"	m	class:final
volume	src/Audio/ToneSynthesiser.hpp	/^  unsigned volume = 100, angle = 0, increment = 0;$/;"	m	class:ToneSynthesiser
volume	src/Audio/VarioSettings.hpp	/^  uint8_t volume;$/;"	m	struct:VarioSoundSettings
volume	src/Device/Driver/BlueFly/Internal.hpp	/^    double volume;$/;"	m	struct:BlueFlyDevice::BlueFlySettings
volume	src/NMEA/ExternalSettings.hpp	/^  unsigned volume;$/;"	m	struct:ExternalSettings
volume_available	src/NMEA/ExternalSettings.hpp	/^  Validity volume_available;$/;"	m	struct:ExternalSettings
volume_controller	src/Audio/GlobalVolumeController.cpp	/^VolumeController *volume_controller = nullptr;$/;"	v
vpt_scale	src/Screen/Layout.cpp	/^  unsigned vpt_scale = 1024;$/;"	m	namespace:Layout	file:
vs	src/Engine/Route/FlatTriangleFan.hpp	/^  VertexVector vs;$/;"	m	class:FlatTriangleFan
vsamp	src/Terrain/jasper/jpc/jpc_cs.h	/^	uint_fast8_t vsamp;$/;"	m	struct:__anon136
vsamp	src/Terrain/jasper/jpc/jpc_t2cod.h	/^	uint_fast32_t vsamp;$/;"	m	struct:__anon114
vsnprintf	src/Topography/shapelib/mapserver.h	114;"	d
vstep	src/Terrain/jasper/jas_image.h	/^	jas_image_coord_t vstep;$/;"	m	struct:__anon102
vstep	src/Terrain/jasper/jpc/jpc_dec.h	/^	uint_fast32_t vstep;$/;"	m	struct:__anon128
vstep_	src/Terrain/jasper/jas_image.h	/^	jas_image_coord_t vstep_;$/;"	m	struct:__anon100
vsubstep	src/Terrain/jasper/jpc/jpc_dec.h	/^	uint_fast32_t vsubstep;$/;"	m	struct:__anon128
vtable	src/Topography/shapelib/mapserver.h	/^    layerVTableObj *vtable;$/;"	m	struct:layerObj
vtable	src/Topography/shapelib/mapserver.h	/^    rendererVTableObj *vtable;$/;"	m	struct:__anon32
vval_last	src/Gauge/GaugeVario.hpp	/^  int vval_last = 0;$/;"	m	class:GaugeVario
w	src/Computer/ThermalLocator.hpp	/^    double w;$/;"	m	struct:ThermalLocator::Point
w	src/Dialogs/Plane/PolarShapeEditWidget.hpp	/^    std::unique_ptr<WndProperty> v, w;$/;"	m	struct:PolarShapeEditWidget::PointEditor
w	src/Polar/Shape.hpp	/^  double w;$/;"	m	struct:PolarPoint
w	src/Replay/TaskAutoPilot.hpp	/^  GeoPoint w[2];$/;"	m	class:TaskAutoPilot
w	src/system/EventPipe.hxx	/^	UniqueSocketDescriptor r, w;$/;"	m	class:EventPipe
w1	src/Polar/PolarStore.hpp	/^    double w1;$/;"	m	struct:PolarStore::Item
w2	src/Polar/PolarStore.hpp	/^    double w2;$/;"	m	struct:PolarStore::Item
w3	src/Polar/PolarStore.hpp	/^    double w3;$/;"	m	struct:PolarStore::Item
w_label	src/Dialogs/Plane/PolarShapeEditWidget.hpp	/^  std::unique_ptr<WndFrame> v_label, w_label;$/;"	m	class:PolarShapeEditWidget
w_n	src/Engine/ThermalBand/ThermalSlice.hpp	/^  double w_n;$/;"	m	struct:ThermalSlice
w_t	src/Engine/ThermalBand/ThermalSlice.hpp	/^  double w_t;$/;"	m	struct:ThermalSlice
waiting_for_fix_icon	src/Look/MapLook.hpp	/^  MaskedIcon waiting_for_fix_icon, no_gps_icon;$/;"	m	struct:MapLook
wake_fd	src/event/Loop.hxx	/^	WakeFD wake_fd;$/;"	m	class:final
wants_thermals	src/Cloud/Client.hpp	/^  std::chrono::steady_clock::time_point wants_thermals =$/;"	m	struct:CloudClient
wants_traffic	src/Cloud/Client.hpp	/^  std::chrono::steady_clock::time_point wants_traffic =$/;"	m	struct:CloudClient
warning	src/Gauge/FlarmTrafficWindow.hpp	/^  int warning;$/;"	m	class:FlarmTrafficWindow
warning_brush	src/Look/FlarmTrafficLook.hpp	/^  Brush warning_brush;$/;"	m	struct:FlarmTrafficLook
warning_brush	src/Look/TrafficLook.hpp	/^  Brush warning_brush;$/;"	m	struct:TrafficLook
warning_color	src/Look/FlarmTrafficLook.hpp	/^  Color warning_color;$/;"	m	struct:FlarmTrafficLook
warning_color	src/Look/TrafficLook.hpp	/^  Color warning_color;$/;"	m	struct:TrafficLook
warning_computer	src/Computer/GlideComputer.hpp	/^  WarningComputer warning_computer;$/;"	m	class:GlideComputer
warning_list	src/Dialogs/Airspace/dlgAirspaceWarnings.cpp	/^  TrivialArray<WarningItem, 64u> warning_list;$/;"	m	class:final	file:
warning_manager	src/Engine/Airspace/AirspaceWarningManager.cpp	/^  AirspaceWarningManager &warning_manager;$/;"	m	class:final	file:
warning_manager	src/Renderer/AirspaceLabelRenderer.hpp	/^  const ProtectedAirspaceWarningManager *warning_manager;$/;"	m	class:AirspaceLabelRenderer
warning_manager	src/Renderer/AirspaceRenderer.hpp	/^  const ProtectedAirspaceWarningManager *warning_manager;$/;"	m	class:AirspaceRenderer
warning_manager	src/Renderer/AirspaceRendererGL.cpp	/^  const AirspaceWarningCopy &warning_manager;$/;"	m	class:final	file:
warning_pen	src/Look/FlarmTrafficLook.hpp	/^  Pen warning_pen;$/;"	m	struct:FlarmTrafficLook
warning_state	src/Engine/Airspace/AirspaceWarningManager.cpp	/^  const AirspaceWarning::State warning_state;$/;"	m	class:final	file:
warning_time	src/Engine/Airspace/AirspaceWarningConfig.hpp	/^  unsigned warning_time;$/;"	m	struct:AirspaceWarningConfig
warnings	src/Airspace/ActivePredicate.hpp	/^  const ProtectedAirspaceWarningManager *warnings;$/;"	m	class:ActiveAirspacePredicate
warnings	src/Airspace/AirspaceComputerSettings.hpp	/^  AirspaceWarningConfig warnings;$/;"	m	struct:AirspaceComputerSettings
warnings	src/Dialogs/Airspace/dlgAirspaceDetails.cpp	/^  ProtectedAirspaceWarningManager *warnings;$/;"	m	class:final	file:
warnings	src/Engine/Airspace/AirspaceWarningManager.hpp	/^  AirspaceWarningList warnings;$/;"	m	class:AirspaceWarningManager
warnings	src/MapWindow/Items/AirspaceBuilder.cpp	/^  const AirspaceWarningList &warnings;$/;"	m	class:AirspaceAtPointPredicate	file:
warnings	src/Renderer/AirspaceLabelRenderer.cpp	/^  const AirspaceWarningCopy &warnings;$/;"	m	class:AirspaceMapVisible	file:
warnings	src/Renderer/AirspaceRenderer.cpp	/^  const AirspaceWarningCopy &warnings;$/;"	m	class:AirspaceMapVisible	file:
warnings	src/Renderer/AirspaceRendererOther.cpp	/^  const AirspaceWarningCopy &warnings;$/;"	m	class:final	file:
warnings	src/Task/ProtectedRoutePlanner.hpp	/^  const ProtectedAirspaceWarningManager *warnings;$/;"	m	class:ProtectedRoutePlanner
was_alive	src/Device/Descriptor.hpp	/^  bool was_alive;$/;"	m	class:final
was_running	src/Job/Thread.hpp	/^  bool was_running;$/;"	m	class:JobThread
watched	src/Engine/Waypoint/Waypoint.hpp	/^    bool watched:1;$/;"	m	struct:Waypoint::Flags
wave	src/Computer/Settings.hpp	/^  WaveSettings wave;$/;"	m	struct:ComputerSettings
wave	src/Look/MapLook.hpp	/^  WaveLook wave;$/;"	m	struct:MapLook
wave	src/NMEA/Derived.hpp	/^  WaveResult wave;$/;"	m	struct:DerivedInfo
wave	src/Tracking/SkyLines/Protocol.hpp	/^  Wave wave;$/;"	m	struct:SkyLinesTracking::WaveSubmitPacket
wave_computer	src/Computer/GlideComputerAirData.hpp	/^  WaveComputer wave_computer;$/;"	m	class:GlideComputerAirData
wave_count	src/Tracking/SkyLines/Protocol.hpp	/^  uint8_t wave_count;$/;"	m	struct:SkyLinesTracking::WaveResponsePacket
waveform_mode	src/ui/canvas/fb/mxcfb.h	/^	__u32 waveform_mode;$/;"	m	struct:mxcfb_update_data
waves	src/Computer/WaveComputer.hpp	/^  std::list<WaveInfo> waves;$/;"	m	class:WaveComputer
waves	src/Computer/WaveResult.hpp	/^  TrivialArray<WaveInfo, 32> waves;$/;"	m	struct:WaveResult
waves	src/Tracking/SkyLines/Data.hpp	/^  std::list<Wave> waves;$/;"	m	struct:SkyLinesTracking::Data
way_point_renderer	src/MapWindow/TargetMapWindow.hpp	/^  WaypointRenderer way_point_renderer;$/;"	m	class:TargetMapWindow
way_points	src/Components.cpp	/^Waypoints way_points;$/;"	v
way_points	src/Renderer/WaypointRenderer.hpp	/^  const Waypoints *way_points;$/;"	m	class:WaypointRenderer
waypoint	src/Device/Declaration.hpp	/^    Waypoint waypoint;$/;"	m	struct:Declaration::TurnPoint
waypoint	src/Dialogs/Waypoint/WaypointCommandsWidget.hpp	/^  const WaypointPtr waypoint;$/;"	m	class:final
waypoint	src/Dialogs/Waypoint/WaypointInfoWidget.hpp	/^  const WaypointPtr waypoint;$/;"	m	struct:WaypointInfoWidget
waypoint	src/Dialogs/Waypoint/dlgWaypointDetails.cpp	/^  const WaypointPtr waypoint;$/;"	m	class:final	file:
waypoint	src/Engine/Contest/Solvers/Retrospective.hpp	/^    WaypointPtr waypoint;$/;"	m	struct:Retrospective::NearWaypoint
waypoint	src/Engine/Task/Points/TaskWaypoint.hpp	/^  WaypointPtr waypoint;$/;"	m	class:TaskWaypoint
waypoint	src/Engine/Task/Unordered/AlternatePoint.hpp	/^  WaypointPtr waypoint;$/;"	m	struct:AlternatePoint
waypoint	src/Look/MapLook.hpp	/^  WaypointLook waypoint;$/;"	m	struct:MapLook
waypoint	src/MapSettings.hpp	/^  WaypointRendererSettings waypoint;$/;"	m	struct:MapSettings
waypoint	src/MapWindow/Items/MapItem.hpp	/^  WaypointPtr waypoint;$/;"	m	struct:TaskOZMapItem
waypoint	src/MapWindow/Items/MapItem.hpp	/^  WaypointPtr waypoint;$/;"	m	struct:WaypointMapItem
waypoint	src/Monitor/MatTaskMonitor.cpp	/^  const WaypointPtr waypoint;$/;"	m	class:final	file:
waypoint	src/Renderer/WaypointRenderer.cpp	/^  WaypointPtr waypoint;$/;"	m	struct:VisibleWaypoint	file:
waypoint	src/Waypoint/WaypointList.hpp	/^  WaypointPtr waypoint;$/;"	m	struct:WaypointListItem
waypoint_details	src/Dialogs/Task/TaskPointDialog.cpp	/^    PixelRect waypoint_details, waypoint_remove, waypoint_relocate;$/;"	m	struct:final::Layout	file:
waypoint_details	src/Dialogs/Task/TaskPointDialog.cpp	/^  Button waypoint_details, waypoint_remove, waypoint_relocate;$/;"	m	class:final	file:
waypoint_ids	src/Waypoint/LastUsed.cpp	/^  WaypointIDList waypoint_ids;$/;"	m	namespace:LastUsedWaypoints	file:
waypoint_name	src/Dialogs/Task/TaskPointDialog.cpp	/^    PixelRect waypoint_name;$/;"	m	struct:final::Layout	file:
waypoint_name	src/Dialogs/Task/TaskPointDialog.cpp	/^  WndFrame waypoint_name;$/;"	m	class:final	file:
waypoint_panel	src/Dialogs/Task/TaskPointDialog.cpp	/^    PixelRect waypoint_panel;$/;"	m	struct:final::Layout	file:
waypoint_panel	src/Dialogs/Task/TaskPointDialog.cpp	/^  PanelControl waypoint_panel;$/;"	m	class:final	file:
waypoint_relocate	src/Dialogs/Task/TaskPointDialog.cpp	/^    PixelRect waypoint_details, waypoint_remove, waypoint_relocate;$/;"	m	struct:final::Layout	file:
waypoint_relocate	src/Dialogs/Task/TaskPointDialog.cpp	/^  Button waypoint_details, waypoint_remove, waypoint_relocate;$/;"	m	class:final	file:
waypoint_remove	src/Dialogs/Task/TaskPointDialog.cpp	/^    PixelRect waypoint_details, waypoint_remove, waypoint_relocate;$/;"	m	struct:final::Layout	file:
waypoint_remove	src/Dialogs/Task/TaskPointDialog.cpp	/^  Button waypoint_details, waypoint_remove, waypoint_relocate;$/;"	m	class:final	file:
waypoint_renderer	src/MapWindow/MapWindow.hpp	/^  WaypointRenderer waypoint_renderer;$/;"	m	class:MapWindow
waypoint_tree	src/Engine/Waypoint/Waypoints.hpp	/^  WaypointTree waypoint_tree;$/;"	m	class:Waypoints
waypoint_types	src/Dialogs/Waypoint/dlgWaypointEdit.cpp	/^static constexpr StaticEnumChoice waypoint_types[] = {$/;"	v	file:
waypoints	src/Computer/GlideComputer.hpp	/^  const Waypoints &waypoints;$/;"	m	class:GlideComputer
waypoints	src/Computer/GlideComputerAirData.hpp	/^  const Waypoints &waypoints;$/;"	m	class:GlideComputerAirData
waypoints	src/Device/Driver/Volkslogger/Database.hpp	/^    Waypoint waypoints[10];$/;"	m	struct:Volkslogger::Route
waypoints	src/Engine/Contest/Solvers/Retrospective.hpp	/^  const Waypoints &waypoints;$/;"	m	class:Retrospective
waypoints	src/Engine/Task/Unordered/AbortTask.hpp	/^  const Waypoints &waypoints;$/;"	m	class:AbortTask
waypoints	src/Engine/Task/Unordered/GotoTask.hpp	/^  const Waypoints &waypoints;$/;"	m	class:final
waypoints	src/MapWindow/MapWindow.hpp	/^  const Waypoints *waypoints = nullptr;$/;"	m	class:MapWindow
waypoints	src/Renderer/WaypointRenderer.cpp	/^  StaticArray<VisibleWaypoint, 256> waypoints;$/;"	m	class:final	file:
weather	src/Computer/Settings.hpp	/^  WeatherSettings weather;$/;"	m	struct:ComputerSettings
weather	src/UIState.hpp	/^  WeatherUIState weather;$/;"	m	struct:UIState
weather_page	src/Dialogs/Weather/WeatherDialog.cpp	/^static int weather_page = 0;$/;"	v	file:
web	src/Topography/shapelib/mapserver.h	/^    webObj web;$/;"	m	struct:mapObj
webObj	src/Topography/shapelib/mapserver.h	/^  } webObj;$/;"	t	typeref:struct:__anon35
wednesday	src/Engine/Airspace/AirspaceActivity.hpp	/^    bool wednesday:1;$/;"	m	struct:AirspaceActivity::Days
weight	src/Math/XYDataStore.hpp	/^      , weight(_weight)$/;"	f	struct:XYDataStore::Slot
weight	src/Math/XYDataStore.hpp	/^    double weight;$/;"	m	struct:XYDataStore::Slot
weight_in_litres	src/Device/Driver/CAI302/Protocol.hpp	/^    uint16_t weight_in_litres;$/;"	m	struct:CAI302::Polar
welt2000_format	src/Waypoint/WaypointReaderWinPilot.hpp	/^  bool welt2000_format = false;$/;"	m	class:final
westerboer_driver	src/Device/Driver/Westerboer.cpp	/^const struct DeviceRegister westerboer_driver = {$/;"	v	typeref:struct:DeviceRegister
wfslayerinfo	src/Topography/shapelib/mapserver.h	/^    void *wfslayerinfo; \/* For WFS layers, will contain a msWFSLayerInfo struct *\/$/;"	m	struct:layerObj
wheel	src/ui/event/poll/linux/MergeMouse.hpp	/^  int wheel = 0;$/;"	m	class:UI::final
white_brush	src/Look/WaypointLook.hpp	/^  Brush white_brush, light_gray_brush, magenta_brush, orange_brush;$/;"	m	struct:WaypointLook
white_pen	src/Look/ThermalBandLook.hpp	/^  Pen white_pen, black_pen;$/;"	m	struct:ThermalBandLook
widget	src/Dialogs/Task/TargetDialog.cpp	/^  TargetWidget &widget;$/;"	m	class:TargetDialogMapWindow	file:
widget	src/Dialogs/WidgetDialog.hpp	/^  ManagedWidget widget;$/;"	m	class:WidgetDialog
widget	src/MainWindow.hpp	/^  Widget *widget = nullptr;$/;"	m	class:MainWindow
widget	src/Monitor/AirspaceWarningMonitor.hpp	/^  class AirspaceWarningWidget *widget;$/;"	m	class:AirspaceWarningMonitor	typeref:class:AirspaceWarningMonitor::AirspaceWarningWidget
widget	src/Monitor/MatTaskMonitor.hpp	/^  class MatTaskAddWidget *widget;$/;"	m	class:MatTaskMonitor	typeref:class:MatTaskMonitor::MatTaskAddWidget
widget	src/Monitor/TaskAdvanceMonitor.hpp	/^  class TaskAdvanceWidget *widget;$/;"	m	class:TaskAdvanceMonitor	typeref:class:TaskAdvanceMonitor::TaskAdvanceWidget
widget	src/Widget/ButtonPanelWidget.hpp	/^  const std::unique_ptr<Widget> widget;$/;"	m	class:ButtonPanelWidget
widget	src/Widget/ManagedWidget.hpp	/^  Widget *widget = nullptr;$/;"	m	class:ManagedWidget
widget	src/Widget/PagerWidget.hpp	/^    std::unique_ptr<Widget> widget;$/;"	m	struct:PagerWidget::Child
widget	src/Widget/RowFormWidget.hpp	/^    std::unique_ptr<Widget> widget;$/;"	m	struct:RowFormWidget::Row
widget	src/Widget/SolidWidget.hpp	/^  std::unique_ptr<Widget> widget;$/;"	m	class:SolidWidget
width	src/Android/NativeView.hpp	/^  unsigned width, height;$/;"	m	class:NativeView
width	src/Android/TextUtil.hpp	/^    unsigned width, height;$/;"	m	struct:TextUtil::Texture
width	src/CommandLine.cpp	/^  unsigned width = IsKobo() ? 600 : 640;$/;"	m	namespace:CommandLine	file:
width	src/Device/Driver/LX/LXN.hpp	/^    unsigned width;$/;"	m	struct:LXN::ExtensionDefinition
width	src/Dialogs/KnobTextEntry.cpp	/^    :text(_text), width(_width) {}$/;"	f	class:final
width	src/Dialogs/KnobTextEntry.cpp	/^  const size_t width;$/;"	m	class:final	file:
width	src/Geo/GeoClip.hpp	/^  Angle width;$/;"	m	class:GeoClip
width	src/Terrain/HeightMatrix.hpp	/^  unsigned width, height;$/;"	m	class:HeightMatrix
width	src/Terrain/RasterTile.hpp	/^  unsigned width = 0, height = 0;$/;"	m	class:RasterTile
width	src/Terrain/RasterTileCache.hpp	/^    unsigned width, height;$/;"	m	struct:RasterTileCache::CacheHeader
width	src/Terrain/RasterTileCache.hpp	/^  unsigned int width, height;$/;"	m	class:RasterTileCache
width	src/Terrain/jasper/jas_image.h	/^	jas_image_coord_t width;$/;"	m	struct:__anon102
width	src/Terrain/jasper/jp2/jp2_cod.h	/^	uint_fast32_t width;$/;"	m	struct:__anon86
width	src/Terrain/jasper/jpc/jpc_cs.h	/^	uint_fast32_t width;$/;"	m	struct:__anon137
width	src/Terrain/jasper/jpc/jpc_dec.h	/^	uint_fast32_t width;$/;"	m	struct:__anon128
width	src/Topography/shapelib/mapserver.h	/^    double width; \/* line width in pixels *\/$/;"	m	struct:__anon62
width	src/Topography/shapelib/mapserver.h	/^    double width;$/;"	m	struct:styleObj
width	src/Topography/shapelib/mapserver.h	/^    int height, width;$/;"	m	struct:__anon34
width	src/Topography/shapelib/mapserver.h	/^    int height, width;$/;"	m	struct:__anon46
width	src/Topography/shapelib/mapserver.h	/^    int height, width;$/;"	m	struct:__anon47
width	src/Topography/shapelib/mapserver.h	/^    int height, width;$/;"	m	struct:__anon48
width	src/Topography/shapelib/mapserver.h	/^    int height, width;$/;"	m	struct:mapObj
width	src/Topography/shapelib/mapserver.h	/^    int width, height;$/;"	m	struct:imageObj
width	src/Topography/shapelib/mapserver.h	/^    int width;$/;"	m	struct:tileCacheObj
width	src/ui/canvas/Pen.hpp	/^  uint8_t width = 0;$/;"	m	class:Pen
width	src/ui/canvas/RawBitmap.hpp	/^  const unsigned width;$/;"	m	class:final
width	src/ui/canvas/custom/UncompressedImage.hpp	/^  unsigned pitch, width, height;$/;"	m	class:UncompressedImage
width	src/ui/canvas/fb/mxcfb.h	/^	__u32 width;	\/* width of entire buffer *\/$/;"	m	struct:mxcfb_alt_buffer_data
width	src/ui/canvas/fb/mxcfb.h	/^	__u32 width;$/;"	m	struct:mxcfb_rect
width	src/ui/canvas/memory/Buffer.hpp	/^  unsigned pitch, width, height;$/;"	m	struct:ConstImageBuffer
width	src/ui/canvas/memory/Buffer.hpp	/^  unsigned pitch, width, height;$/;"	m	struct:WritableImageBuffer
width	src/ui/dim/Size.hpp	/^  unsigned width, height;$/;"	m	struct:PixelSize
width	src/ui/event/poll/libinput/LibInputHandler.hpp	/^  unsigned width = 0, height = 0;$/;"	m	class:UI::final
width	src/ui/event/shared/RotatePointer.hpp	/^  unsigned width = 0, height = 0;$/;"	m	class:UI::RotatePointer
width	src/util/AllocatedGrid.hxx	/^	unsigned width = 0, height = 0;$/;"	m	class:AllocatedGrid
width_	src/Terrain/jasper/jas_image.h	/^	jas_image_coord_t width_;$/;"	m	struct:__anon100
wifi_button	src/Kobo/NetworkDialog.cpp	/^  Button *toggle_wifi_button, *wifi_button;$/;"	m	class:final	file:
win32_getpagesize	src/zzip/__mmap.h	/^static size_t win32_getpagesize (void)$/;"	f
win32_mmap	src/zzip/__mmap.h	/^static void*  win32_mmap (long* user, int fd, zzip_off_t offs, size_t len)$/;"	f
win32_munmap	src/zzip/__mmap.h	/^static void win32_munmap (long* user, char* fd_map, size_t len)$/;"	f
wind	src/Computer/ConditionMonitor/ConditionMonitorWind.hpp	/^  SpeedVector wind;$/;"	m	class:final
wind	src/Computer/Settings.hpp	/^  WindSettings wind;$/;"	m	struct:ComputerSettings
wind	src/Computer/Wind/CirclingWind.hpp	/^    SpeedVector wind;$/;"	m	struct:CirclingWind::Result
wind	src/Computer/Wind/WindEKFGlue.hpp	/^    SpeedVector wind;$/;"	m	struct:WindEKFGlue::Result
wind	src/Engine/GlideSolvers/GlideState.hpp	/^  SpeedVector wind;$/;"	m	struct:GlideState
wind	src/Engine/Navigation/Aircraft.hpp	/^  SpeedVector wind;$/;"	m	struct:AircraftState
wind	src/Look/MapLook.hpp	/^  WindArrowLook wind;$/;"	m	struct:MapLook
wind	src/Monitor/AllMonitors.hpp	/^  WindMonitor wind;$/;"	m	class:final
wind	src/NMEA/Derived.hpp	/^  SpeedVector wind;$/;"	m	struct:DerivedInfo
wind	src/Weather/ParsedMETAR.hpp	/^  SpeedVector wind;$/;"	m	struct:ParsedMETAR
wind_arrow_info_box	src/Look/Look.hpp	/^  WindArrowLook wind_arrow_info_box;$/;"	m	struct:Look
wind_arrow_list	src/Dialogs/Settings/Panels/SymbolsConfigPanel.cpp	/^static constexpr StaticEnumChoice wind_arrow_list[] = {$/;"	v	file:
wind_arrow_style	src/MapSettings.hpp	/^  WindArrowStyle wind_arrow_style;$/;"	m	struct:MapSettings
wind_available	src/NMEA/Derived.hpp	/^  Validity wind_available;$/;"	m	struct:DerivedInfo
wind_available	src/Weather/ParsedMETAR.hpp	/^  bool wind_available;$/;"	m	struct:ParsedMETAR
wind_computer	src/Computer/GlideComputerAirData.hpp	/^  WindComputer wind_computer;$/;"	m	class:GlideComputerAirData
wind_drift_enabled	src/MapSettings.hpp	/^  bool wind_drift_enabled;$/;"	m	struct:TrailSettings
wind_ekf	src/Computer/Wind/Computer.hpp	/^  WindEKFGlue wind_ekf;$/;"	m	class:WindComputer
wind_infobox_panels	src/InfoBoxes/Content/Weather.cpp	/^const InfoBoxPanel wind_infobox_panels[] = {$/;"	v
wind_source	src/NMEA/Derived.hpp	/^  } wind_source;$/;"	m	struct:DerivedInfo	typeref:class:DerivedInfo::WindSource
wind_speed_squared	src/Engine/GlideSolvers/GlideState.hpp	/^  double wind_speed_squared;$/;"	m	struct:GlideState
wind_speed_unit	src/Units/Settings.hpp	/^  Unit wind_speed_unit;$/;"	m	struct:UnitSetting
wind_store	src/Computer/Wind/Computer.hpp	/^  WindStore wind_store;$/;"	m	class:WindComputer
windlist	src/Computer/Wind/Store.hpp	/^  WindMeasurementList windlist;$/;"	m	class:WindStore
window	src/Engine/Task/Computer/TaskStatsComputer.hpp	/^  WindowStatsComputer window;$/;"	m	class:TaskStatsComputer
window	src/Widget/RowFormWidget.hpp	/^    std::unique_ptr<Window> window;$/;"	m	struct:RowFormWidget::Row
window	src/Widget/WindowWidget.hpp	/^  std::unique_ptr<Window> window;$/;"	m	class:WindowWidget
window	src/ui/canvas/custom/TopCanvas.hpp	/^  SDL_Window *window;$/;"	m	class:DisplayOrientation
window	src/ui/canvas/gdi/PaintCanvas.hpp	/^  Window &window;$/;"	m	class:PaintCanvas
window	src/ui/window/custom/Reference.hpp	/^  Window *window;$/;"	m	class:WindowReference
window_size	src/ui/canvas/opengl/Globals.cpp	/^UnsignedPoint2D window_size, viewport_size;$/;"	m	namespace:OpenGL	file:
windows	src/Gauge/BigTrafficWidget.hpp	/^  std::unique_ptr<Windows> windows;$/;"	m	class:TrafficWidget
wing_area	src/Device/Driver/CAI302/Protocol.hpp	/^    uint16_t wing_area; \/\/ 100ths square meters$/;"	m	struct:CAI302::Polar
wing_area	src/Engine/GlideSolvers/GlidePolar.hpp	/^  double wing_area;$/;"	m	class:GlidePolar
wing_area	src/Plane/Plane.hpp	/^  double wing_area;$/;"	m	struct:Plane
wing_area	src/Polar/Polar.hpp	/^  double wing_area;    \/**< Reference wing area (m^2) *\/$/;"	m	struct:PolarInfo
wing_area	src/Polar/PolarStore.hpp	/^    double wing_area;$/;"	m	struct:PolarStore::Item
wing_loading	src/NMEA/ExternalSettings.hpp	/^  double wing_loading;$/;"	m	struct:ExternalSettings
wing_loading_available	src/NMEA/ExternalSettings.hpp	/^  Validity wing_loading_available;$/;"	m	struct:ExternalSettings
wing_loading_unit	src/Units/Settings.hpp	/^  Unit wing_loading_unit;$/;"	m	struct:UnitSetting
wm_delete_window	src/ui/event/poll/X11Queue.hpp	/^  Atom wm_delete_window;$/;"	m	class:UI::X11EventQueue
wordtoserno	src/Device/Driver/Volkslogger/vlapihlp.cpp	/^wordtoserno(char *Seriennummer, unsigned Binaer)$/;"	f
working_band_fraction	src/Engine/Navigation/Aircraft.hpp	/^  double working_band_fraction;$/;"	m	struct:AltitudeState
working_band_pen	src/Look/ThermalBandLook.hpp	/^  Pen working_band_pen;$/;"	m	struct:ThermalBandLook
wp	src/Device/Driver/IMI/Protocol/Types.hpp	/^    TWaypoint wp[IMIDECL_MAX_WAYPOINTS];$/;"	m	struct:IMI::TDeclaration
wp_dis	src/Task/TaskFileSeeYou.cpp	/^  bool wp_dis;$/;"	m	struct:SeeYouTaskInformation	file:
wpa_supplicant	src/Kobo/WifiDialog.cpp	/^  WPASupplicant wpa_supplicant;$/;"	m	class:final	file:
wpt	src/Device/Driver/Volkslogger/vlapi2.h	/^    WPT wpt[10];$/;"	m	struct:VLAPI_DATA::ROUTE
wpts	src/Device/Driver/Volkslogger/vlapi2.h	/^    WPT *wpts;$/;"	m	struct:VLAPI_DATA::DATABASE
wrap	src/Topography/shapelib/mapserver.h	/^    char wrap;$/;"	m	struct:labelObj
write	src/Android/PortBridge.cpp	/^PortBridge::write(JNIEnv *env, const void *data, size_t length)$/;"	f	class:PortBridge
write	src/zzip/plugin.h	/^    zzip_ssize_t (*write)(int fd, _zzip_const void* buf, zzip_size_t len);$/;"	m	struct:zzip_plugin_io
writeBounds	src/Topography/shapelib/mapshape.c	/^static void writeBounds( uchar * pabyRec, shapeObj *shape, int nVCount )$/;"	f	file:
writeHeader	src/Topography/shapelib/mapshape.c	/^static void writeHeader( SHPHandle psSHP )$/;"	f	file:
writeHeader	src/Topography/shapelib/mapxbase.c	/^static void writeHeader(DBFHandle psDBF)$/;"	f	file:
writeTreeNode	src/Topography/shapelib/maptree.c	/^static void writeTreeNode(SHPTreeHandle disktree, treeNodeObj *node)$/;"	f	file:
write_	src/Terrain/jasper/jas_stream.h	/^	int (*write_)(jas_stream_obj_t *obj, const char *buf, unsigned cnt);$/;"	m	struct:__anon96
write_buffer	src/Android/PortBridge.hpp	/^  Java::GlobalRef<jbyteArray> write_buffer;$/;"	m	class:PortBridge
write_buffer_size	src/Android/PortBridge.hpp	/^  static constexpr size_t write_buffer_size = 4096;$/;"	m	class:PortBridge
write_method	src/Android/PortBridge.cpp	/^jmethodID PortBridge::write_method;$/;"	m	class:PortBridge	file:
write_method	src/Android/PortBridge.hpp	/^  static jmethodID write_method;$/;"	m	class:PortBridge
write_ready	src/event/net/cares/Channel.hxx	/^	fd_set read_ready, write_ready;$/;"	m	class:Cares::Channel
writer	src/JSON/Writer.hpp	/^    BufferedOutputStream &writer;$/;"	m	class:JSON::ArrayWriter
writer	src/JSON/Writer.hpp	/^    BufferedOutputStream &writer;$/;"	m	class:JSON::ObjectWriter
writer	src/Logger/LoggerImpl.hpp	/^  IGCWriter *writer;$/;"	m	class:LoggerImpl
writer	src/Logger/NMEALogger.cpp	/^  static TextWriter *writer;$/;"	m	namespace:NMEALogger	file:
ws	src/Device/Driver/Volkslogger/vlapi2.h	/^    unsigned ws;  \/\/ sector direction in degrees$/;"	m	struct:VLAPI_DATA::DCLWPT
www_credentials	src/Weather/PCMet/Settings.hpp	/^  Credentials www_credentials;$/;"	m	struct:PCMetSettings
x	src/Engine/Util/AircraftStateFilter.hpp	/^  double x, y;$/;"	m	class:AircraftStateFilter
x	src/Math/AvFilter.hpp	/^  StaticArray<double, max> x;$/;"	m	class:AvFilter
x	src/Math/DiffFilter.hpp	/^  std::array<double, 7> x;$/;"	m	class:DiffFilter
x	src/Math/DifferentialWindowFilter.hpp	/^    double x, y;$/;"	m	struct:DifferentialWindowFilter::Sample
x	src/Math/Filter.hpp	/^  double x[3];$/;"	m	class:Filter
x	src/Math/LeastSquares.hpp	/^  double x;$/;"	m	struct:ErrorEllipse
x	src/Math/Point2D.hpp	/^  scalar_type x, y;$/;"	m	struct:Point2D
x	src/Math/XYDataStore.hpp	/^    double x, y;$/;"	m	struct:XYDataStore::Slot
x	src/Renderer/ChartRenderer.hpp	/^  } x, y;$/;"	m	class:ChartRenderer	typeref:struct:ChartRenderer::Axis
x	src/Renderer/TwoTextRowsRenderer.hpp	/^  int x, first_y, second_y;$/;"	m	class:TwoTextRowsRenderer
x	src/Terrain/jasper/jpc/jpc_t2cod.h	/^	uint_fast32_t x;$/;"	m	struct:__anon115
x	src/Topography/shapelib/mapprimitive.h	/^  double x;$/;"	m	struct:__anon69
x	src/Topography/shapelib/mapprimitive.h	/^  double x;$/;"	m	struct:__anon70
x	src/ui/canvas/fb/mxcfb.h	/^	__u16 x;$/;"	m	struct:mxcfb_pos
x	src/ui/canvas/memory/Bresenham.hpp	/^  int x, y;$/;"	m	class:BresenhamIterator
x	src/ui/event/poll/libinput/LibInputHandler.hpp	/^  double x = -1.0, y = -1.0;$/;"	m	class:UI::final
x	src/ui/event/poll/linux/MergeMouse.hpp	/^  unsigned x = 0, y = 0;$/;"	m	class:UI::final
x	src/util/QuadTree.hxx	/^		position_type x, y;$/;"	m	struct:QuadTree::Point
x40	src/Device/Driver/LX/LXN.hpp	/^    uint8_t x40;$/;"	m	struct:LXN::Security7000
x_S	src/Math/LeastSquares.hpp	/^  double x_mean, y_mean, x_S, y_S, xy_C;$/;"	m	class:LeastSquares
x_abs_	src/Math/KalmanFilter1d.hpp	/^  double x_abs_;  \/\/ The absolute quantity x.$/;"	m	class:KalmanFilter1d
x_diff_filter	src/Engine/Util/AircraftStateFilter.hpp	/^  DiffFilter x_diff_filter, y_diff_filter, alt_diff_filter;$/;"	m	class:AircraftStateFilter
x_display	src/ui/canvas/custom/TopCanvas.hpp	/^  _XDisplay *x_display;$/;"	m	class:DisplayOrientation
x_display	src/ui/window/TopWindow.hpp	/^  _XDisplay *x_display;$/;"	m	class:UI::TopWindow
x_e	src/ui/canvas/memory/Bresenham.hpp	/^  int x_e, y_e;$/;"	m	class:BresenhamIterator
x_label	src/Renderer/ChartRenderer.hpp	/^  BasicStringBuffer<TCHAR, 64> x_label, y_label;$/;"	m	class:ChartRenderer
x_label_left	src/Renderer/ChartRenderer.hpp	/^  int x_label_left, y_label_bottom;$/;"	m	class:ChartRenderer
x_low_pass	src/Engine/Util/AircraftStateFilter.hpp	/^  Filter x_low_pass, y_low_pass, alt_low_pass;$/;"	m	class:AircraftStateFilter
x_max	src/Math/Histogram.hpp	/^  double x_min, x_max, y_max;$/;"	m	class:Histogram
x_max	src/Math/XYDataStore.hpp	/^  double x_max;$/;"	m	class:XYDataStore
x_mean	src/Math/LeastSquares.hpp	/^  double x_mean, y_mean, x_S, y_S, xy_C;$/;"	m	class:LeastSquares
x_min	src/Math/Histogram.hpp	/^  double x_min, x_max, y_max;$/;"	m	class:Histogram
x_min	src/Math/XYDataStore.hpp	/^  double x_min;$/;"	m	class:XYDataStore
x_origin	src/Terrain/WorldFile.cpp	/^  double x_scale, y_rotation, x_rotation, y_scale, x_origin, y_origin;$/;"	m	struct:WorldFileData	file:
x_rotation	src/Terrain/WorldFile.cpp	/^  double x_scale, y_rotation, x_rotation, y_scale, x_origin, y_origin;$/;"	m	struct:WorldFileData	file:
x_scale	src/Terrain/RasterProjection.hpp	/^  double x_scale, y_scale;$/;"	m	class:RasterProjection
x_scale	src/Terrain/WorldFile.cpp	/^  double x_scale, y_rotation, x_rotation, y_scale, x_origin, y_origin;$/;"	m	struct:WorldFileData	file:
x_sigaction	src/event/SignalMonitor.cxx	/^x_sigaction(int signum, const struct sigaction &act)$/;"	f	file:
x_var	src/Math/LeastSquares.hpp	/^  double x_var, y_var, xy_var;$/;"	m	class:LeastSquares
x_vel_	src/Math/KalmanFilter1d.hpp	/^  double x_vel_;  \/\/ The rate of change of x, in x units per second squared.$/;"	m	class:KalmanFilter1d
x_window	src/ui/window/TopWindow.hpp	/^  X11Window x_window;$/;"	m	class:UI::TopWindow
xcom760_driver	src/Device/Driver/XCOM760.cpp	/^const struct DeviceRegister xcom760_driver = {$/;"	v	typeref:struct:DeviceRegister
xcontest_free	src/Engine/Contest/ContestManager.hpp	/^  XContestFree xcontest_free;$/;"	m	class:ContestManager
xcontest_triangle	src/Engine/Contest/ContestManager.hpp	/^  XContestTriangle xcontest_triangle;$/;"	m	class:ContestManager
xctracer_driver	src/Device/Driver/XCTracer/Register.cpp	/^const struct DeviceRegister xctracer_driver = {$/;"	v	typeref:struct:DeviceRegister
xcv_driver	src/Device/Driver/XCVario.cpp	/^const struct DeviceRegister xcv_driver = {$/;"	v	typeref:struct:DeviceRegister
xend	src/Terrain/RasterTile.hpp	/^    unsigned int xstart, ystart, xend, yend;$/;"	m	struct:RasterTile::MetaData
xend	src/Terrain/RasterTile.hpp	/^  unsigned xstart = 0, ystart = 0, xend = 0, yend = 0;$/;"	m	class:RasterTile
xend	src/Terrain/jasper/jpc/jpc_dec.h	/^	uint_fast32_t xend;$/;"	m	struct:__anon123
xend	src/Terrain/jasper/jpc/jpc_dec.h	/^	uint_fast32_t xend;$/;"	m	struct:__anon125
xend	src/Terrain/jasper/jpc/jpc_dec.h	/^	uint_fast32_t xend;$/;"	m	struct:__anon126
xend	src/Terrain/jasper/jpc/jpc_dec.h	/^	uint_fast32_t xend;$/;"	m	struct:__anon127
xend	src/Terrain/jasper/jpc/jpc_dec.h	/^	uint_fast32_t xend;$/;"	m	struct:__anon129
xend	src/Terrain/jasper/jpc/jpc_t2cod.h	/^	uint_fast32_t xend;$/;"	m	struct:__anon115
xend	src/Terrain/jasper/jpc/jpc_tsfb.h	/^	int xend;$/;"	m	struct:__anon107
xend_	src/Terrain/jasper/jas_seq.h	/^	jas_matind_t xend_;$/;"	m	struct:jas_matrix
xmax	src/Math/ZeroFinder.hpp	/^  const double xmax;$/;"	m	class:ZeroFinder
xmin	src/Math/ZeroFinder.hpp	/^  const double xmin;$/;"	m	class:ZeroFinder
xoff	src/Terrain/jasper/jpc/jpc_cs.h	/^	uint_fast32_t xoff;$/;"	m	struct:__anon137
xstart	src/Terrain/RasterTile.hpp	/^    unsigned int xstart, ystart, xend, yend;$/;"	m	struct:RasterTile::MetaData
xstart	src/Terrain/RasterTile.hpp	/^  unsigned xstart = 0, ystart = 0, xend = 0, yend = 0;$/;"	m	class:RasterTile
xstart	src/Terrain/jasper/jpc/jpc_dec.h	/^	uint_fast32_t xstart;$/;"	m	struct:__anon123
xstart	src/Terrain/jasper/jpc/jpc_dec.h	/^	uint_fast32_t xstart;$/;"	m	struct:__anon125
xstart	src/Terrain/jasper/jpc/jpc_dec.h	/^	uint_fast32_t xstart;$/;"	m	struct:__anon126
xstart	src/Terrain/jasper/jpc/jpc_dec.h	/^	uint_fast32_t xstart;$/;"	m	struct:__anon127
xstart	src/Terrain/jasper/jpc/jpc_dec.h	/^	uint_fast32_t xstart;$/;"	m	struct:__anon129
xstart	src/Terrain/jasper/jpc/jpc_t2cod.h	/^	uint_fast32_t xstart;$/;"	m	struct:__anon115
xstart	src/Terrain/jasper/jpc/jpc_tsfb.h	/^	int xstart;$/;"	m	struct:__anon107
xstart_	src/Terrain/jasper/jas_seq.h	/^	jas_matind_t xstart_;$/;"	m	struct:jas_matrix
xstep	src/Terrain/jasper/jpc/jpc_t2cod.h	/^	uint_fast32_t xstep;$/;"	m	struct:__anon115
xy_C	src/Math/LeastSquares.hpp	/^  double x_mean, y_mean, x_S, y_S, xy_C;$/;"	m	class:LeastSquares
xy_var	src/Math/LeastSquares.hpp	/^  double x_var, y_var, xy_var;$/;"	m	class:LeastSquares
y	src/Engine/Util/AircraftStateFilter.hpp	/^  double x, y;$/;"	m	class:AircraftStateFilter
y	src/Math/DifferentialWindowFilter.hpp	/^    double x, y;$/;"	m	struct:DifferentialWindowFilter::Sample
y	src/Math/Filter.hpp	/^  double y[2];$/;"	m	class:Filter
y	src/Math/LeastSquares.hpp	/^  double y;$/;"	m	struct:ErrorEllipse
y	src/Math/Point2D.hpp	/^    :x(_x), y(_y) {}$/;"	f	struct:Point2D
y	src/Math/Point2D.hpp	/^  scalar_type x, y;$/;"	m	struct:Point2D
y	src/Math/XYDataStore.hpp	/^    double x, y;$/;"	m	struct:XYDataStore::Slot
y	src/Renderer/ChartRenderer.hpp	/^  } x, y;$/;"	m	class:ChartRenderer	typeref:struct:ChartRenderer::Axis
y	src/Terrain/jasper/jpc/jpc_t2cod.h	/^	uint_fast32_t y;$/;"	m	struct:__anon115
y	src/Topography/shapelib/mapprimitive.h	/^  double y;$/;"	m	struct:__anon69
y	src/Topography/shapelib/mapprimitive.h	/^  double y;$/;"	m	struct:__anon70
y	src/ui/canvas/fb/mxcfb.h	/^	__u16 y;$/;"	m	struct:mxcfb_pos
y	src/ui/canvas/memory/Bresenham.hpp	/^  int x, y;$/;"	m	class:BresenhamIterator
y	src/ui/event/poll/libinput/LibInputHandler.hpp	/^  double x = -1.0, y = -1.0;$/;"	m	class:UI::final
y	src/ui/event/poll/linux/MergeMouse.hpp	/^  unsigned x = 0, y = 0;$/;"	m	class:UI::final
y	src/util/QuadTree.hxx	/^			:x(_x), y(_y) {}$/;"	f	struct:QuadTree::Point
y	src/util/QuadTree.hxx	/^		position_type x, y;$/;"	m	struct:QuadTree::Point
y_S	src/Math/LeastSquares.hpp	/^  double x_mean, y_mean, x_S, y_S, xy_C;$/;"	m	class:LeastSquares
y_ave	src/Math/LeastSquares.hpp	/^  double y_ave;$/;"	m	class:LeastSquares
y_cost	src/Math/FastRotation.hpp	/^  int y_cost, y_sint;$/;"	m	class:FastRowRotation
y_diff_filter	src/Engine/Util/AircraftStateFilter.hpp	/^  DiffFilter x_diff_filter, y_diff_filter, alt_diff_filter;$/;"	m	class:AircraftStateFilter
y_e	src/ui/canvas/memory/Bresenham.hpp	/^  int x_e, y_e;$/;"	m	class:BresenhamIterator
y_label	src/Renderer/ChartRenderer.hpp	/^  BasicStringBuffer<TCHAR, 64> x_label, y_label;$/;"	m	class:ChartRenderer
y_label_bottom	src/Renderer/ChartRenderer.hpp	/^  int x_label_left, y_label_bottom;$/;"	m	class:ChartRenderer
y_low_pass	src/Engine/Util/AircraftStateFilter.hpp	/^  Filter x_low_pass, y_low_pass, alt_low_pass;$/;"	m	class:AircraftStateFilter
y_max	src/Math/Histogram.hpp	/^  double x_min, x_max, y_max;$/;"	m	class:Histogram
y_max	src/Math/XYDataStore.hpp	/^  double y_max;$/;"	m	class:XYDataStore
y_mean	src/Math/LeastSquares.hpp	/^  double x_mean, y_mean, x_S, y_S, xy_C;$/;"	m	class:LeastSquares
y_min	src/Math/XYDataStore.hpp	/^  double y_min;$/;"	m	class:XYDataStore
y_origin	src/Terrain/WorldFile.cpp	/^  double x_scale, y_rotation, x_rotation, y_scale, x_origin, y_origin;$/;"	m	struct:WorldFileData	file:
y_rotation	src/Terrain/WorldFile.cpp	/^  double x_scale, y_rotation, x_rotation, y_scale, x_origin, y_origin;$/;"	m	struct:WorldFileData	file:
y_scale	src/Terrain/RasterProjection.hpp	/^  double x_scale, y_scale;$/;"	m	class:RasterProjection
y_scale	src/Terrain/WorldFile.cpp	/^  double x_scale, y_rotation, x_rotation, y_scale, x_origin, y_origin;$/;"	m	struct:WorldFileData	file:
y_sint	src/Math/FastRotation.hpp	/^     y_cost(y * fir.cost + 512), y_sint(y * fir.sint - 512) {}$/;"	f	class:FastRowRotation
y_sint	src/Math/FastRotation.hpp	/^  int y_cost, y_sint;$/;"	m	class:FastRowRotation
y_var	src/Math/LeastSquares.hpp	/^  double x_var, y_var, xy_var;$/;"	m	class:LeastSquares
year	src/Device/Driver/CAI302/Protocol.hpp	/^    uint8_t year, month, day, hour, minute, second;$/;"	m	struct:CAI302::DateTime
year	src/Device/Driver/LX/LXN.hpp	/^    uint16_t year;$/;"	m	struct:LXN::Date
year	src/Device/Driver/LX/LXN.hpp	/^    uint8_t day, month, year;$/;"	m	struct:LXN::Task
year	src/time/BrokenDate.hpp	/^  uint16_t year;$/;"	m	struct:BrokenDate
year2	src/Device/Driver/LX/LXN.hpp	/^    uint8_t day2, month2, year2;$/;"	m	struct:LXN::Task
yearinput	src/Device/Driver/LX/Protocol.hpp	/^    uint8_t yearinput;$/;"	m	struct:LX::Declaration
yearuser	src/Device/Driver/LX/Protocol.hpp	/^    uint8_t yearuser;$/;"	m	struct:LX::Declaration
yend	src/Terrain/RasterTile.hpp	/^    unsigned int xstart, ystart, xend, yend;$/;"	m	struct:RasterTile::MetaData
yend	src/Terrain/RasterTile.hpp	/^  unsigned xstart = 0, ystart = 0, xend = 0, yend = 0;$/;"	m	class:RasterTile
yend	src/Terrain/jasper/jpc/jpc_dec.h	/^	uint_fast32_t yend;$/;"	m	struct:__anon123
yend	src/Terrain/jasper/jpc/jpc_dec.h	/^	uint_fast32_t yend;$/;"	m	struct:__anon125
yend	src/Terrain/jasper/jpc/jpc_dec.h	/^	uint_fast32_t yend;$/;"	m	struct:__anon126
yend	src/Terrain/jasper/jpc/jpc_dec.h	/^	uint_fast32_t yend;$/;"	m	struct:__anon127
yend	src/Terrain/jasper/jpc/jpc_dec.h	/^	uint_fast32_t yend;$/;"	m	struct:__anon129
yend	src/Terrain/jasper/jpc/jpc_t2cod.h	/^	uint_fast32_t yend;$/;"	m	struct:__anon115
yend	src/Terrain/jasper/jpc/jpc_tsfb.h	/^	int yend;$/;"	m	struct:__anon107
yend_	src/Terrain/jasper/jas_seq.h	/^	jas_matind_t yend_;$/;"	m	struct:jas_matrix
yoff	src/Terrain/jasper/jpc/jpc_cs.h	/^	uint_fast32_t yoff;$/;"	m	struct:__anon137
ystart	src/Terrain/RasterTile.hpp	/^    unsigned int xstart, ystart, xend, yend;$/;"	m	struct:RasterTile::MetaData
ystart	src/Terrain/RasterTile.hpp	/^  unsigned xstart = 0, ystart = 0, xend = 0, yend = 0;$/;"	m	class:RasterTile
ystart	src/Terrain/jasper/jpc/jpc_dec.h	/^	uint_fast32_t ystart;$/;"	m	struct:__anon123
ystart	src/Terrain/jasper/jpc/jpc_dec.h	/^	uint_fast32_t ystart;$/;"	m	struct:__anon125
ystart	src/Terrain/jasper/jpc/jpc_dec.h	/^	uint_fast32_t ystart;$/;"	m	struct:__anon126
ystart	src/Terrain/jasper/jpc/jpc_dec.h	/^	uint_fast32_t ystart;$/;"	m	struct:__anon127
ystart	src/Terrain/jasper/jpc/jpc_dec.h	/^	uint_fast32_t ystart;$/;"	m	struct:__anon129
ystart	src/Terrain/jasper/jpc/jpc_t2cod.h	/^	uint_fast32_t ystart;$/;"	m	struct:__anon115
ystart	src/Terrain/jasper/jpc/jpc_tsfb.h	/^	int ystart;$/;"	m	struct:__anon107
ystart_	src/Terrain/jasper/jas_seq.h	/^	jas_matind_t ystart_;$/;"	m	struct:jas_matrix
ystep	src/Terrain/jasper/jpc/jpc_t2cod.h	/^	uint_fast32_t ystep;$/;"	m	struct:__anon115
z	src/Topography/shapelib/mapprimitive.h	/^  double z;$/;"	m	struct:__anon70
z	src/io/GunzipReader.hxx	/^	z_stream z;$/;"	m	class:final
z_comment	src/zzip/format.h	/^    zzip_byte_t    z_comment[2];$/;"	m	struct:zzip_root_dirent
z_comment	src/zzip/format.h	/^    zzip_byte_t  z_comment[2];  \/* zipfile comment length *\/$/;"	m	struct:zzip_disk_trailer
z_comment	src/zzip/format.h	/^    zzip_byte_t  z_comment[2]; \/* file comment length *\/$/;"	m	struct:zzip_disk_entry
z_compr	src/zzip/format.h	/^    zzip_byte_t    z_compr[2];$/;"	m	struct:zzip_root_dirent
z_compr	src/zzip/format.h	/^    zzip_byte_t   z_compr[2]; \/* compression method *\/$/;"	m	struct:zzip_file_header
z_compr	src/zzip/format.h	/^    zzip_byte_t  z_compr[2];  \/* compression method *\/$/;"	m	struct:zzip_disk_entry
z_crc32	src/zzip/format.h	/^    zzip_byte_t    z_crc32[4];$/;"	m	struct:zzip_root_dirent
z_crc32	src/zzip/format.h	/^    zzip_byte_t   z_crc32[4]; \/* crc-32 *\/$/;"	m	struct:zzip_file_header
z_crc32	src/zzip/format.h	/^    zzip_byte_t   z_crc32[4]; \/* crc-32 *\/$/;"	m	struct:zzip_file_trailer
z_crc32	src/zzip/format.h	/^    zzip_byte_t  z_crc32[4];  \/* crc-32 *\/$/;"	m	struct:zzip_disk_entry
z_csize	src/zzip/format.h	/^    zzip_byte_t    z_csize[4];$/;"	m	struct:zzip_root_dirent
z_csize	src/zzip/format.h	/^    zzip_byte_t   z_csize[4]; \/* compressed size *\/$/;"	m	struct:zzip_file_header
z_csize	src/zzip/format.h	/^    zzip_byte_t   z_csize[4]; \/* compressed size *\/$/;"	m	struct:zzip_file_trailer
z_csize	src/zzip/format.h	/^    zzip_byte_t  z_csize[4];  \/* compressed size *\/$/;"	m	struct:zzip_disk_entry
z_csize	src/zzip/format.h	/^    zzip_byte_t  z_csize[8];          \/* compressed size *\/$/;"	m	struct:zzip_extra_zip64
z_datasize	src/zzip/format.h	/^    zzip_byte_t  z_datasize[2];       \/* being returned by xx_to_extras usually *\/$/;"	m	struct:zzip_extra_block
z_datasize	src/zzip/format.h	/^    zzip_byte_t  z_datasize[2];       \/* structure length 0x0010 *\/$/;"	m	struct:zzip_extra_zip64
z_datatype	src/zzip/format.h	/^    zzip_byte_t  z_datatype[2];       \/* as input type - a mere <char*> is okay *\/$/;"	m	struct:zzip_extra_block
z_datatype	src/zzip/format.h	/^    zzip_byte_t  z_datatype[2];       \/* extras signature 0x0001 *\/$/;"	m	struct:zzip_extra_zip64
z_disk	src/zzip/format.h	/^    zzip_byte_t  z_disk[2];  \/* number of this disk *\/$/;"	m	struct:zzip_disk_trailer
z_disk	src/zzip/format.h	/^    zzip_byte_t  z_disk[4];  \/* number of this disk *\/$/;"	m	struct:zzip_disk64_trailer
z_diskstart	src/zzip/format.h	/^    zzip_byte_t    z_diskstart[2];$/;"	m	struct:zzip_root_dirent
z_diskstart	src/zzip/format.h	/^    zzip_byte_t  z_diskstart[2]; \/* disk number of start (if spanning zip over multiple disks) *\/$/;"	m	struct:zzip_disk_entry
z_diskstart	src/zzip/format.h	/^    zzip_byte_t  z_diskstart[4];      \/* disk where the file starts *\/$/;"	m	struct:zzip_extra_zip64
z_dostime	src/zzip/format.h	/^    zzip_dostime_t z_dostime;  \/* last mod file time&date (dos format) *\/$/;"	m	struct:zzip_disk_entry
z_dostime	src/zzip/format.h	/^    zzip_dostime_t z_dostime; \/* last mod file time (dos format) *\/$/;"	m	struct:zzip_file_header
z_dostime	src/zzip/format.h	/^    zzip_dostime_t z_dostime;$/;"	m	struct:zzip_root_dirent
z_encoder	src/zzip/format.h	/^    zzip_version_t z_encoder;  \/* version made by *\/$/;"	m	struct:zzip_disk64_trailer
z_encoder	src/zzip/format.h	/^    zzip_version_t z_encoder;  \/* version made by *\/$/;"	m	struct:zzip_disk_entry
z_encoder	src/zzip/format.h	/^    zzip_version_t z_encoder;$/;"	m	struct:zzip_root_dirent
z_entries	src/zzip/format.h	/^    zzip_byte_t  z_entries[2]; \/* total number of entries in the central dir on this disk *\/$/;"	m	struct:zzip_disk_trailer
z_entries	src/zzip/format.h	/^    zzip_byte_t  z_entries[8]; \/* total number of entries in the central dir on this disk *\/$/;"	m	struct:zzip_disk64_trailer
z_extract	src/zzip/format.h	/^    zzip_version_t z_extract;  \/* version need to extract *\/$/;"	m	struct:zzip_disk64_trailer
z_extract	src/zzip/format.h	/^    zzip_version_t z_extract;  \/* version need to extract *\/$/;"	m	struct:zzip_disk_entry
z_extract	src/zzip/format.h	/^    zzip_version_t z_extract; \/* version needed to extract *\/$/;"	m	struct:zzip_file_header
z_extract	src/zzip/format.h	/^    zzip_version_t z_extract;$/;"	m	struct:zzip_root_dirent
z_extras	src/zzip/format.h	/^    zzip_byte_t    z_extras[2];$/;"	m	struct:zzip_root_dirent
z_extras	src/zzip/format.h	/^    zzip_byte_t   z_extras[2]; \/* extra field length *\/$/;"	m	struct:zzip_file_header
z_extras	src/zzip/format.h	/^    zzip_byte_t  z_extras[2];  \/* extra field length *\/$/;"	m	struct:zzip_disk_entry
z_filemode	src/zzip/format.h	/^    zzip_byte_t    z_filemode[4];$/;"	m	struct:zzip_root_dirent
z_filemode	src/zzip/format.h	/^    zzip_byte_t  z_filemode[4];  \/* extrnal file attributes, eg. msdos attrib byte *\/$/;"	m	struct:zzip_disk_entry
z_filetype	src/zzip/format.h	/^    zzip_byte_t    z_filetype[2];$/;"	m	struct:zzip_root_dirent
z_filetype	src/zzip/format.h	/^    zzip_byte_t  z_filetype[2];  \/* internal file attributes, bit0 = ascii *\/$/;"	m	struct:zzip_disk_entry
z_finaldisk	src/zzip/format.h	/^    zzip_byte_t  z_finaldisk[2]; \/* number of the disk with the start of the central dir *\/$/;"	m	struct:zzip_disk_trailer
z_finaldisk	src/zzip/format.h	/^    zzip_byte_t  z_finaldisk[4]; \/* number of the disk with the start of the central dir *\/$/;"	m	struct:zzip_disk64_trailer
z_finalentries	src/zzip/format.h	/^    zzip_byte_t  z_finalentries[2]; \/* total number of entries in the central dir *\/$/;"	m	struct:zzip_disk_trailer
z_finalentries	src/zzip/format.h	/^    zzip_byte_t  z_finalentries[8]; \/* total number of entries in the central dir *\/$/;"	m	struct:zzip_disk64_trailer
z_flags	src/zzip/format.h	/^    zzip_byte_t    z_flags[2];$/;"	m	struct:zzip_root_dirent
z_flags	src/zzip/format.h	/^    zzip_byte_t   z_flags[2]; \/* general purpose bit flag *\/$/;"	m	struct:zzip_file_header
z_flags	src/zzip/format.h	/^    zzip_byte_t  z_flags[2];  \/* general purpose bit flag *\/$/;"	m	struct:zzip_disk_entry
z_magic	src/zzip/format.h	/^    zzip_byte_t    z_magic[4];$/;"	m	struct:zzip_root_dirent
z_magic	src/zzip/format.h	/^    zzip_byte_t   z_magic[4]; \/* data descriptor signature (0x08074b50) *\/$/;"	m	struct:zzip_file_trailer
z_magic	src/zzip/format.h	/^    zzip_byte_t   z_magic[4]; \/* local file header signature (0x04034b50) *\/$/;"	m	struct:zzip_file_header
z_magic	src/zzip/format.h	/^    zzip_byte_t  z_magic[4];  \/* central file header signature (0x02014b50) *\/$/;"	m	struct:zzip_disk_entry
z_magic	src/zzip/format.h	/^    zzip_byte_t  z_magic[4]; \/* end of central dir signature (0x06054b50) *\/$/;"	m	struct:zzip_disk64_locator
z_magic	src/zzip/format.h	/^    zzip_byte_t  z_magic[4]; \/* end of central dir signature (0x06054b50) *\/$/;"	m	struct:zzip_disk64_trailer
z_magic	src/zzip/format.h	/^    zzip_byte_t  z_magic[4]; \/* end of central dir signature (0x06054b50) *\/$/;"	m	struct:zzip_disk_trailer
z_namlen	src/zzip/format.h	/^    zzip_byte_t    z_namlen[2];$/;"	m	struct:zzip_root_dirent
z_namlen	src/zzip/format.h	/^    zzip_byte_t   z_namlen[2]; \/* filename length (null if stdin) *\/$/;"	m	struct:zzip_file_header
z_namlen	src/zzip/format.h	/^    zzip_byte_t  z_namlen[2]; \/* filename length (null if stdin) *\/$/;"	m	struct:zzip_disk_entry
z_numdisks	src/zzip/format.h	/^    zzip_byte_t  z_numdisks[4];    \/* total numer of disks *\/$/;"	m	struct:zzip_disk64_locator
z_off	src/zzip/format.h	/^    zzip_byte_t    z_off[4];$/;"	m	struct:zzip_root_dirent
z_offset	src/zzip/format.h	/^    zzip_byte_t  z_offset[4];    \/* relative offset of local file header, seekval if singledisk *\/$/;"	m	struct:zzip_disk_entry
z_offset	src/zzip/format.h	/^    zzip_byte_t  z_offset[8];         \/* offset from file header *\/$/;"	m	struct:zzip_extra_zip64
z_rootdisk	src/zzip/format.h	/^    zzip_byte_t  z_rootdisk[4]; \/* number of disk with the zip64 directory *\/$/;"	m	struct:zzip_disk64_locator
z_rootseek	src/zzip/format.h	/^    zzip_byte_t  z_rootseek[4]; \/* offset of start of central directory with respect to *$/;"	m	struct:zzip_disk_trailer
z_rootseek	src/zzip/format.h	/^    zzip_byte_t  z_rootseek[8]; \/* offset of start of central directory with respect to *$/;"	m	struct:zzip_disk64_trailer
z_rootseek	src/zzip/format.h	/^    zzip_byte_t  z_rootseek[8]; \/* relative offset of the zip64 directory *\/$/;"	m	struct:zzip_disk64_locator
z_rootsize	src/zzip/format.h	/^    zzip_byte_t  z_rootsize[4]; \/* size of the central directory *\/$/;"	m	struct:zzip_disk_trailer
z_rootsize	src/zzip/format.h	/^    zzip_byte_t  z_rootsize[8]; \/* size of the central directory *\/$/;"	m	struct:zzip_disk64_trailer
z_size	src/zzip/format.h	/^    zzip_byte_t  z_size[8];  \/* size of this central directory record *\/$/;"	m	struct:zzip_disk64_trailer
z_usize	src/zzip/format.h	/^    zzip_byte_t    z_usize[4];$/;"	m	struct:zzip_root_dirent
z_usize	src/zzip/format.h	/^    zzip_byte_t   z_usize[4]; \/* uncompressed size *\/$/;"	m	struct:zzip_file_header
z_usize	src/zzip/format.h	/^    zzip_byte_t   z_usize[4]; \/* uncompressed size *\/$/;"	m	struct:zzip_file_trailer
z_usize	src/zzip/format.h	/^    zzip_byte_t  z_usize[4];  \/* uncompressed size *\/$/;"	m	struct:zzip_disk_entry
z_usize	src/zzip/format.h	/^    zzip_byte_t  z_usize[8];          \/* original size *\/$/;"	m	struct:zzip_extra_zip64
zander_driver	src/Device/Driver/Zander.cpp	/^const struct DeviceRegister zander_driver = {$/;"	v	typeref:struct:DeviceRegister
zero	src/Device/Driver/LX/LXN.hpp	/^    uint8_t zero[0x40];$/;"	m	struct:LXN::Security7000
zero_frequency	src/Audio/VarioSettings.hpp	/^  unsigned zero_frequency;$/;"	m	struct:VarioSoundSettings
zero_frequency	src/Audio/VarioSynthesiser.hpp	/^  unsigned zero_frequency;$/;"	m	class:final
zero_thread_handle	src/Components.cpp	/^static const ThreadHandle zero_thread_handle = ThreadHandle();$/;"	v	file:
zig_zag_wind	src/Computer/Wind/Settings.hpp	/^  bool zig_zag_wind;$/;"	m	struct:WindSettings
zip	src/io/ZipLineReader.hpp	/^  ZipReader zip;$/;"	m	class:ZipLineReaderA
zone_letter	src/Geo/UTM.hpp	/^  char zone_letter;$/;"	m	struct:UTM
zone_number	src/Geo/UTM.hpp	/^  unsigned char zone_number;$/;"	m	struct:UTM
zoom	src/Dialogs/Waypoint/dlgWaypointDetails.cpp	/^  int zoom = 0;$/;"	m	class:final	file:
zoom	src/Gauge/BigTrafficWidget.cpp	/^  unsigned zoom;$/;"	m	class:FlarmTrafficControl	file:
zoom_in_button	src/Gauge/BigTrafficWidget.cpp	/^  Button zoom_in_button, zoom_out_button;$/;"	m	struct:TrafficWidget::Windows	file:
zoom_out_button	src/Gauge/BigTrafficWidget.cpp	/^  Button zoom_in_button, zoom_out_button;$/;"	m	struct:TrafficWidget::Windows	file:
zz_entries	src/zzip/zip.c	/^    zzip_off64_t zz_entries;$/;"	m	struct:_disk_trailer	file:
zz_finalentries	src/zzip/zip.c	/^    zzip_off64_t zz_finalentries;$/;"	m	struct:_disk_trailer	file:
zz_for_correct_rootseek	src/zzip/zip.c	/^    void *zz_for_correct_rootseek;      \/\/ ZZIP_CORRECT_ROOTSEEK$/;"	m	struct:_disk_trailer	file:
zz_min	src/Device/Driver/Volkslogger/vlconv.cpp	/^  int zz_min;$/;"	m	class:C_RECORD	file:
zz_rootseek	src/zzip/zip.c	/^    zzip_off64_t zz_rootseek;$/;"	m	struct:_disk_trailer	file:
zz_rootsize	src/zzip/zip.c	/^    zzip_off64_t zz_rootsize;$/;"	m	struct:_disk_trailer	file:
zz_tail	src/zzip/zip.c	/^    void *zz_tail;$/;"	m	struct:_disk_trailer	file:
zzip__new__	src/zzip/conf.h	77;"	d
zzip__new__	src/zzip/conf.h	79;"	d
zzip__new__	src/zzip/conf.h	81;"	d
zzip_byte_t	src/zzip/types.h	/^typedef unsigned char zzip_byte_t; \/\/ especially zlib decoding data$/;"	t
zzip_char_t	src/zzip/zzip.h	/^typedef  char _zzip_const       zzip_char_t;$/;"	t
zzip_close	src/zzip/file.c	/^zzip_close(ZZIP_FILE * fp)$/;"	f
zzip_dir	src/zzip/lib.h	/^struct zzip_dir$/;"	s
zzip_dir_alloc	src/zzip/zip.c	/^zzip_dir_alloc(zzip_strings_t * fileext)$/;"	f
zzip_dir_alloc_ext_io	src/zzip/zip.c	/^zzip_dir_alloc_ext_io(zzip_strings_t * ext, const zzip_plugin_io_t io)$/;"	f
zzip_dir_close	src/zzip/zip.c	/^zzip_dir_close(ZZIP_DIR * dir)$/;"	f
zzip_dir_fdopen	src/zzip/zip.c	/^zzip_dir_fdopen(int fd, zzip_error_t * errcode_p)$/;"	f
zzip_dir_fdopen_ext_io	src/zzip/zip.c	/^zzip_dir_fdopen_ext_io(int fd, zzip_error_t * errcode_p,$/;"	f
zzip_dir_free	src/zzip/zip.c	/^zzip_dir_free(ZZIP_DIR * dir)$/;"	f
zzip_dir_hdr	src/zzip/lib.h	/^struct zzip_dir_hdr$/;"	s
zzip_dir_open	src/zzip/zip.c	/^zzip_dir_open(zzip_char_t * filename, zzip_error_t * e)$/;"	f
zzip_dir_open_ext_io	src/zzip/zip.c	/^zzip_dir_open_ext_io(zzip_char_t * filename, zzip_error_t * e,$/;"	f
zzip_dir_open_ext_io	src/zzip/zzip.h	231;"	d
zzip_dir_read	src/zzip/zip.c	/^zzip_dir_read(ZZIP_DIR * dir, ZZIP_DIRENT * d)$/;"	f
zzip_dir_stat	src/zzip/stat.c	/^zzip_dir_stat(ZZIP_DIR * dir, zzip_char_t * name, ZZIP_STAT * zs, int flags)$/;"	f
zzip_dirent	src/zzip/zzip.h	/^struct zzip_dirent$/;"	s
zzip_disk64_locator	src/zzip/format.h	/^struct zzip_disk64_locator$/;"	s
zzip_disk64_locator_check_magic	src/zzip/fetch.h	189;"	d
zzip_disk64_locator_get_magic	src/zzip/fetch.h	181;"	d
zzip_disk64_locator_get_numdisks	src/zzip/fetch.h	187;"	d
zzip_disk64_locator_get_rootdisk	src/zzip/fetch.h	183;"	d
zzip_disk64_locator_get_rootseek	src/zzip/fetch.h	185;"	d
zzip_disk64_locator_rootseek	src/zzip/fetch.h	320;"	d
zzip_disk64_locator_set_magic	src/zzip/fetch.h	182;"	d
zzip_disk64_locator_set_numdisks	src/zzip/fetch.h	188;"	d
zzip_disk64_locator_set_rootdisk	src/zzip/fetch.h	184;"	d
zzip_disk64_locator_set_rootseek	src/zzip/fetch.h	186;"	d
zzip_disk64_trailer	src/zzip/format.h	/^struct zzip_disk64_trailer$/;"	s
zzip_disk64_trailer_check_magic	src/zzip/fetch.h	208;"	d
zzip_disk64_trailer_finaldisk	src/zzip/fetch.h	326;"	d
zzip_disk64_trailer_finalentries	src/zzip/fetch.h	330;"	d
zzip_disk64_trailer_get_disk	src/zzip/fetch.h	196;"	d
zzip_disk64_trailer_get_entries	src/zzip/fetch.h	200;"	d
zzip_disk64_trailer_get_finaldisk	src/zzip/fetch.h	198;"	d
zzip_disk64_trailer_get_finalentries	src/zzip/fetch.h	202;"	d
zzip_disk64_trailer_get_magic	src/zzip/fetch.h	192;"	d
zzip_disk64_trailer_get_rootseek	src/zzip/fetch.h	206;"	d
zzip_disk64_trailer_get_rootsize	src/zzip/fetch.h	204;"	d
zzip_disk64_trailer_get_size	src/zzip/fetch.h	194;"	d
zzip_disk64_trailer_headerlength	src/zzip/format.h	222;"	d
zzip_disk64_trailer_localdisk	src/zzip/fetch.h	324;"	d
zzip_disk64_trailer_localentries	src/zzip/fetch.h	328;"	d
zzip_disk64_trailer_rootseek	src/zzip/fetch.h	334;"	d
zzip_disk64_trailer_rootsize	src/zzip/fetch.h	332;"	d
zzip_disk64_trailer_set_disk	src/zzip/fetch.h	197;"	d
zzip_disk64_trailer_set_entries	src/zzip/fetch.h	201;"	d
zzip_disk64_trailer_set_finaldisk	src/zzip/fetch.h	199;"	d
zzip_disk64_trailer_set_finalentries	src/zzip/fetch.h	203;"	d
zzip_disk64_trailer_set_magic	src/zzip/fetch.h	193;"	d
zzip_disk64_trailer_set_rootseek	src/zzip/fetch.h	207;"	d
zzip_disk64_trailer_set_rootsize	src/zzip/fetch.h	205;"	d
zzip_disk64_trailer_set_size	src/zzip/fetch.h	195;"	d
zzip_disk64_trailer_sizeof_tail	src/zzip/fetch.h	336;"	d
zzip_disk64_trailer_sizeto_end	src/zzip/fetch.h	338;"	d
zzip_disk64_trailer_skipto_end	src/zzip/fetch.h	340;"	d
zzip_disk_entry	src/zzip/format.h	/^struct zzip_disk_entry$/;"	s
zzip_disk_entry_check_magic	src/zzip/fetch.h	139;"	d
zzip_disk_entry_comment	src/zzip/fetch.h	258;"	d
zzip_disk_entry_csize	src/zzip/fetch.h	250;"	d
zzip_disk_entry_data_ascii	src/zzip/fetch.h	374;"	d
zzip_disk_entry_data_comprlevel	src/zzip/fetch.h	366;"	d
zzip_disk_entry_data_deflated	src/zzip/fetch.h	372;"	d
zzip_disk_entry_data_encrypted	src/zzip/fetch.h	364;"	d
zzip_disk_entry_data_low_deflated	src/zzip/fetch.h	400;"	d
zzip_disk_entry_data_max_deflated	src/zzip/fetch.h	397;"	d
zzip_disk_entry_data_min_deflated	src/zzip/fetch.h	403;"	d
zzip_disk_entry_data_not_deflated	src/zzip/fetch.h	392;"	d
zzip_disk_entry_data_std_deflated	src/zzip/fetch.h	394;"	d
zzip_disk_entry_data_stored	src/zzip/fetch.h	370;"	d
zzip_disk_entry_data_streamed	src/zzip/fetch.h	368;"	d
zzip_disk_entry_diskstart	src/zzip/fetch.h	260;"	d
zzip_disk_entry_extras	src/zzip/fetch.h	256;"	d
zzip_disk_entry_filemode	src/zzip/fetch.h	264;"	d
zzip_disk_entry_fileoffset	src/zzip/fetch.h	266;"	d
zzip_disk_entry_filetype	src/zzip/fetch.h	262;"	d
zzip_disk_entry_get_comment	src/zzip/fetch.h	126;"	d
zzip_disk_entry_get_compr	src/zzip/fetch.h	114;"	d
zzip_disk_entry_get_crc32	src/zzip/fetch.h	116;"	d
zzip_disk_entry_get_csize	src/zzip/fetch.h	118;"	d
zzip_disk_entry_get_diskstart	src/zzip/fetch.h	128;"	d
zzip_disk_entry_get_extras	src/zzip/fetch.h	124;"	d
zzip_disk_entry_get_filemode	src/zzip/fetch.h	132;"	d
zzip_disk_entry_get_filetype	src/zzip/fetch.h	130;"	d
zzip_disk_entry_get_flags	src/zzip/fetch.h	112;"	d
zzip_disk_entry_get_magic	src/zzip/fetch.h	110;"	d
zzip_disk_entry_get_namlen	src/zzip/fetch.h	122;"	d
zzip_disk_entry_get_offset	src/zzip/fetch.h	134;"	d
zzip_disk_entry_get_usize	src/zzip/fetch.h	120;"	d
zzip_disk_entry_headerlength	src/zzip/format.h	127;"	d
zzip_disk_entry_namlen	src/zzip/fetch.h	254;"	d
zzip_disk_entry_set_comment	src/zzip/fetch.h	127;"	d
zzip_disk_entry_set_compr	src/zzip/fetch.h	115;"	d
zzip_disk_entry_set_crc32	src/zzip/fetch.h	117;"	d
zzip_disk_entry_set_csize	src/zzip/fetch.h	119;"	d
zzip_disk_entry_set_diskstart	src/zzip/fetch.h	129;"	d
zzip_disk_entry_set_extras	src/zzip/fetch.h	125;"	d
zzip_disk_entry_set_filemode	src/zzip/fetch.h	133;"	d
zzip_disk_entry_set_filetype	src/zzip/fetch.h	131;"	d
zzip_disk_entry_set_flags	src/zzip/fetch.h	113;"	d
zzip_disk_entry_set_magic	src/zzip/fetch.h	111;"	d
zzip_disk_entry_set_namlen	src/zzip/fetch.h	123;"	d
zzip_disk_entry_set_offset	src/zzip/fetch.h	135;"	d
zzip_disk_entry_set_usize	src/zzip/fetch.h	121;"	d
zzip_disk_entry_sizeof_tail	src/zzip/fetch.h	268;"	d
zzip_disk_entry_sizeof_tails	src/zzip/fetch.h	136;"	d
zzip_disk_entry_sizeto_end	src/zzip/fetch.h	270;"	d
zzip_disk_entry_skipto_end	src/zzip/fetch.h	272;"	d
zzip_disk_entry_to_comment	src/zzip/fetch.h	279;"	d
zzip_disk_entry_to_extras	src/zzip/fetch.h	277;"	d
zzip_disk_entry_to_filename	src/zzip/fetch.h	275;"	d
zzip_disk_entry_to_next_entry	src/zzip/fetch.h	281;"	d
zzip_disk_entry_usize	src/zzip/fetch.h	252;"	d
zzip_disk_trailer	src/zzip/format.h	/^struct zzip_disk_trailer$/;"	s
zzip_disk_trailer_check_magic	src/zzip/fetch.h	159;"	d
zzip_disk_trailer_comment	src/zzip/fetch.h	297;"	d
zzip_disk_trailer_finaldisk	src/zzip/fetch.h	287;"	d
zzip_disk_trailer_finalentries	src/zzip/fetch.h	291;"	d
zzip_disk_trailer_get_comment	src/zzip/fetch.h	156;"	d
zzip_disk_trailer_get_disk	src/zzip/fetch.h	144;"	d
zzip_disk_trailer_get_entries	src/zzip/fetch.h	148;"	d
zzip_disk_trailer_get_finaldisk	src/zzip/fetch.h	146;"	d
zzip_disk_trailer_get_finalentries	src/zzip/fetch.h	150;"	d
zzip_disk_trailer_get_magic	src/zzip/fetch.h	142;"	d
zzip_disk_trailer_get_rootseek	src/zzip/fetch.h	154;"	d
zzip_disk_trailer_get_rootsize	src/zzip/fetch.h	152;"	d
zzip_disk_trailer_headerlength	src/zzip/format.h	169;"	d
zzip_disk_trailer_localdisk	src/zzip/fetch.h	285;"	d
zzip_disk_trailer_localentries	src/zzip/fetch.h	289;"	d
zzip_disk_trailer_rootseek	src/zzip/fetch.h	295;"	d
zzip_disk_trailer_rootsize	src/zzip/fetch.h	293;"	d
zzip_disk_trailer_set_comment	src/zzip/fetch.h	157;"	d
zzip_disk_trailer_set_disk	src/zzip/fetch.h	145;"	d
zzip_disk_trailer_set_entries	src/zzip/fetch.h	149;"	d
zzip_disk_trailer_set_finaldisk	src/zzip/fetch.h	147;"	d
zzip_disk_trailer_set_finalentries	src/zzip/fetch.h	151;"	d
zzip_disk_trailer_set_magic	src/zzip/fetch.h	143;"	d
zzip_disk_trailer_set_rootseek	src/zzip/fetch.h	155;"	d
zzip_disk_trailer_set_rootsize	src/zzip/fetch.h	153;"	d
zzip_disk_trailer_sizeof_tail	src/zzip/fetch.h	299;"	d
zzip_disk_trailer_sizeof_tails	src/zzip/fetch.h	158;"	d
zzip_disk_trailer_sizeto_end	src/zzip/fetch.h	301;"	d
zzip_disk_trailer_skipto_end	src/zzip/fetch.h	303;"	d
zzip_disk_trailer_to_comment	src/zzip/fetch.h	306;"	d
zzip_disk_trailer_to_endoffile	src/zzip/fetch.h	308;"	d
zzip_dostime	src/zzip/format.h	/^struct zzip_dostime$/;"	s
zzip_dostime_t	src/zzip/format.h	/^typedef struct zzip_dostime zzip_dostime_t;$/;"	t	typeref:struct:zzip_dostime
zzip_dostime_t	src/zzip/format.h	/^typedef zzip_byte_t zzip_dostime_t[4];$/;"	t
zzip_error_t	src/zzip/zzip.h	/^} zzip_error_t;$/;"	t	typeref:enum:__anon186
zzip_extra_block	src/zzip/format.h	/^struct zzip_extra_block$/;"	s
zzip_extra_block_get_datasize	src/zzip/fetch.h	164;"	d
zzip_extra_block_get_datatype	src/zzip/fetch.h	162;"	d
zzip_extra_block_headerlength	src/zzip/format.h	177;"	d
zzip_extra_block_set_datasize	src/zzip/fetch.h	165;"	d
zzip_extra_block_set_datatype	src/zzip/fetch.h	163;"	d
zzip_extra_block_sizeof_tail	src/zzip/fetch.h	344;"	d
zzip_extra_block_sizeto_end	src/zzip/fetch.h	346;"	d
zzip_extra_block_skipto_end	src/zzip/fetch.h	348;"	d
zzip_extra_zip64	src/zzip/format.h	/^struct zzip_extra_zip64$/;"	s
zzip_extra_zip64_csize	src/zzip/fetch.h	311;"	d
zzip_extra_zip64_diskstart	src/zzip/fetch.h	317;"	d
zzip_extra_zip64_get_csize	src/zzip/fetch.h	173;"	d
zzip_extra_zip64_get_datasize	src/zzip/fetch.h	169;"	d
zzip_extra_zip64_get_datatype	src/zzip/fetch.h	167;"	d
zzip_extra_zip64_get_diskstart	src/zzip/fetch.h	177;"	d
zzip_extra_zip64_get_offset	src/zzip/fetch.h	175;"	d
zzip_extra_zip64_get_usize	src/zzip/fetch.h	171;"	d
zzip_extra_zip64_offset	src/zzip/fetch.h	315;"	d
zzip_extra_zip64_set_csize	src/zzip/fetch.h	174;"	d
zzip_extra_zip64_set_datasize	src/zzip/fetch.h	170;"	d
zzip_extra_zip64_set_datatype	src/zzip/fetch.h	168;"	d
zzip_extra_zip64_set_diskstart	src/zzip/fetch.h	178;"	d
zzip_extra_zip64_set_offset	src/zzip/fetch.h	176;"	d
zzip_extra_zip64_set_usize	src/zzip/fetch.h	172;"	d
zzip_extra_zip64_usize	src/zzip/fetch.h	313;"	d
zzip_fclose	src/zzip/file.c	/^zzip_fclose(ZZIP_FILE * fp)$/;"	f
zzip_file	src/zzip/file.h	/^struct zzip_file$/;"	s
zzip_file_close	src/zzip/file.c	/^zzip_file_close(ZZIP_FILE * fp)$/;"	f
zzip_file_header	src/zzip/format.h	/^struct zzip_file_header$/;"	s
zzip_file_header_check_magic	src/zzip/fetch.h	96;"	d
zzip_file_header_csize	src/zzip/fetch.h	213;"	d
zzip_file_header_data_comprlevel	src/zzip/fetch.h	355;"	d
zzip_file_header_data_deflated	src/zzip/fetch.h	361;"	d
zzip_file_header_data_encrypted	src/zzip/fetch.h	353;"	d
zzip_file_header_data_low_deflated	src/zzip/fetch.h	385;"	d
zzip_file_header_data_max_deflated	src/zzip/fetch.h	382;"	d
zzip_file_header_data_min_deflated	src/zzip/fetch.h	388;"	d
zzip_file_header_data_not_deflated	src/zzip/fetch.h	377;"	d
zzip_file_header_data_std_deflated	src/zzip/fetch.h	379;"	d
zzip_file_header_data_stored	src/zzip/fetch.h	359;"	d
zzip_file_header_data_streamed	src/zzip/fetch.h	357;"	d
zzip_file_header_extras	src/zzip/fetch.h	219;"	d
zzip_file_header_get_compr	src/zzip/fetch.h	82;"	d
zzip_file_header_get_crc32	src/zzip/fetch.h	101;"	d
zzip_file_header_get_crc32	src/zzip/fetch.h	84;"	d
zzip_file_header_get_csize	src/zzip/fetch.h	86;"	d
zzip_file_header_get_extras	src/zzip/fetch.h	92;"	d
zzip_file_header_get_flags	src/zzip/fetch.h	80;"	d
zzip_file_header_get_magic	src/zzip/fetch.h	78;"	d
zzip_file_header_get_namlen	src/zzip/fetch.h	90;"	d
zzip_file_header_get_usize	src/zzip/fetch.h	88;"	d
zzip_file_header_headerlength	src/zzip/format.h	77;"	d
zzip_file_header_namlen	src/zzip/fetch.h	217;"	d
zzip_file_header_set_compr	src/zzip/fetch.h	83;"	d
zzip_file_header_set_crc32	src/zzip/fetch.h	85;"	d
zzip_file_header_set_csize	src/zzip/fetch.h	87;"	d
zzip_file_header_set_extras	src/zzip/fetch.h	93;"	d
zzip_file_header_set_flags	src/zzip/fetch.h	81;"	d
zzip_file_header_set_magic	src/zzip/fetch.h	79;"	d
zzip_file_header_set_namlen	src/zzip/fetch.h	91;"	d
zzip_file_header_set_usize	src/zzip/fetch.h	89;"	d
zzip_file_header_sizeof_tail	src/zzip/fetch.h	221;"	d
zzip_file_header_sizeof_tails	src/zzip/fetch.h	94;"	d
zzip_file_header_sizeto_end	src/zzip/fetch.h	223;"	d
zzip_file_header_skipto_end	src/zzip/fetch.h	225;"	d
zzip_file_header_to_data	src/zzip/fetch.h	232;"	d
zzip_file_header_to_extras	src/zzip/fetch.h	230;"	d
zzip_file_header_to_filename	src/zzip/fetch.h	228;"	d
zzip_file_header_to_trailer	src/zzip/fetch.h	234;"	d
zzip_file_header_usize	src/zzip/fetch.h	215;"	d
zzip_file_open	src/zzip/file.c	/^zzip_file_open(ZZIP_DIR * dir, zzip_char_t * name, int o_mode)$/;"	f
zzip_file_read	src/zzip/file.c	/^zzip_file_read(ZZIP_FILE * fp, void *buf, zzip_size_t len)$/;"	f
zzip_file_saveoffset	src/zzip/file.c	/^zzip_file_saveoffset(ZZIP_FILE * fp)$/;"	f	file:
zzip_file_stat	src/zzip/stat.c	/^zzip_file_stat(ZZIP_FILE * file, ZZIP_STAT * zs)$/;"	f
zzip_file_trailer	src/zzip/format.h	/^struct zzip_file_trailer$/;"	s
zzip_file_trailer_check_magic	src/zzip/fetch.h	108;"	d
zzip_file_trailer_csize	src/zzip/fetch.h	238;"	d
zzip_file_trailer_get_csize	src/zzip/fetch.h	103;"	d
zzip_file_trailer_get_magic	src/zzip/fetch.h	99;"	d
zzip_file_trailer_get_usize	src/zzip/fetch.h	105;"	d
zzip_file_trailer_headerlength	src/zzip/format.h	93;"	d
zzip_file_trailer_set_crc32	src/zzip/fetch.h	102;"	d
zzip_file_trailer_set_csize	src/zzip/fetch.h	104;"	d
zzip_file_trailer_set_magic	src/zzip/fetch.h	100;"	d
zzip_file_trailer_set_usize	src/zzip/fetch.h	106;"	d
zzip_file_trailer_sizeof_tail	src/zzip/fetch.h	242;"	d
zzip_file_trailer_sizeof_tails	src/zzip/fetch.h	107;"	d
zzip_file_trailer_sizeto_end	src/zzip/fetch.h	244;"	d
zzip_file_trailer_skipto_end	src/zzip/fetch.h	246;"	d
zzip_file_trailer_usize	src/zzip/fetch.h	240;"	d
zzip_filesize	src/zzip/plugin.c	/^zzip_filesize(int fd)$/;"	f
zzip_filesize	src/zzip/plugin.h	65;"	d
zzip_fopen	src/zzip/file.c	/^zzip_fopen(zzip_char_t * filename, zzip_char_t * mode)$/;"	f
zzip_fread	src/zzip/file.c	/^zzip_fread(void *ptr, zzip_size_t size, zzip_size_t nmemb, ZZIP_FILE * file)$/;"	f
zzip_freopen	src/zzip/file.c	/^zzip_freopen(zzip_char_t * filename, zzip_char_t * mode, ZZIP_FILE * stream)$/;"	f
zzip_fstat	src/zzip/stat.c	/^zzip_fstat(ZZIP_FILE * file, ZZIP_STAT * zs)$/;"	f
zzip_get_default_ext	src/zzip/zip.c	/^zzip_get_default_ext(void)$/;"	f	file:
zzip_get_default_io	src/zzip/plugin.c	/^zzip_get_default_io(void)$/;"	f
zzip_get_default_io	src/zzip/plugin.h	66;"	d
zzip_inflate_init	src/zzip/file.c	/^zzip_inflate_init(ZZIP_FILE * fp, struct zzip_dir_hdr *hdr)$/;"	f	file:
zzip_init_io	src/zzip/plugin.c	/^zzip_init_io(zzip_plugin_io_handlers_t io, int flags)$/;"	f
zzip_init_io	src/zzip/plugin.h	67;"	d
zzip_off64_t	src/zzip/types.h	/^typedef       _zzip_off64_t     zzip_off64_t;$/;"	t
zzip_off_t	src/zzip/types.h	/^typedef       _zzip_off_t       zzip_off_t;$/;"	t
zzip_open	src/zzip/file.c	/^zzip_open(zzip_char_t * filename, int o_flags)$/;"	f
zzip_open_ext_io	src/zzip/file.c	/^zzip_open_ext_io(zzip_char_t * filename, int o_flags, int o_modes,$/;"	f
zzip_open_ext_io	src/zzip/file.c	/^zzip_open_ext_io(zzip_char_t * name, int o_flags, int o_modes,$/;"	f
zzip_open_ext_io	src/zzip/file.c	923;"	d	file:
zzip_open_ext_io	src/zzip/zzip.h	229;"	d
zzip_open_rb	src/zzip/util.h	/^zzip_open_rb(ZZIP_DIR *dir, const char *path)$/;"	f
zzip_open_shared_io	src/zzip/file.c	/^zzip_open_shared_io(ZZIP_FILE * stream,$/;"	f
zzip_open_shared_io	src/zzip/file.c	922;"	d	file:
zzip_open_shared_io	src/zzip/zzip.h	228;"	d
zzip_opendir_ext_io	src/zzip/file.c	/^zzip_opendir_ext_io(zzip_char_t * name, int o_modes,$/;"	f
zzip_opendir_ext_io	src/zzip/file.c	924;"	d	file:
zzip_opendir_ext_io	src/zzip/zzip.h	230;"	d
zzip_plugin_io	src/zzip/plugin.h	/^struct zzip_plugin_io { \/* use "zzip_plugin_io_handlers" in applications !! *\/$/;"	s
zzip_plugin_io_handlers	src/zzip/plugin.h	/^} zzip_plugin_io_handlers;$/;"	t	typeref:union:_zzip_plugin_io
zzip_plugin_io_handlers_t	src/zzip/plugin.h	/^typedef zzip_plugin_io_handlers* zzip_plugin_io_handlers_t;$/;"	t
zzip_plugin_io_t	src/zzip/zzip.h	/^typedef union _zzip_plugin_io _zzip_const * zzip_plugin_io_t;$/;"	t	typeref:union:_zzip_const
zzip_plugin_io_t	src/zzip/zzip.h	232;"	d
zzip_pread	src/zzip/file.c	/^zzip_pread(ZZIP_FILE *file, void *ptr, zzip_size_t size, zzip_off_t offset)$/;"	f
zzip_pread_fallback	src/zzip/file.c	/^zzip_pread_fallback(ZZIP_FILE *file, void *ptr, zzip_size_t size,$/;"	f	file:
zzip_read	src/zzip/file.c	/^zzip_read(ZZIP_FILE * fp, void *buf, zzip_size_t len)$/;"	f
zzip_rewind	src/zzip/file.c	/^zzip_rewind(ZZIP_FILE * fp)$/;"	f
zzip_root_dirent	src/zzip/format.h	/^struct zzip_root_dirent$/;"	s
zzip_seek	src/zzip/file.c	/^zzip_seek(ZZIP_FILE * fp, zzip_off_t offset, int whence)$/;"	f
zzip_seek32	src/zzip/file.c	/^zzip_seek32(ZZIP_FILE * fp, long offset, int whence)$/;"	f
zzip_seekdir	src/zzip/zzip.h	65;"	d
zzip_size_t	src/zzip/types.h	/^typedef       _zzip_size_t      zzip_size_t;      \/* Some error here? *\/$/;"	t
zzip_ssize_t	src/zzip/types.h	/^typedef       _zzip_ssize_t     zzip_ssize_t;     \/* See notes above! *\/$/;"	t
zzip_stream_ops	src/Terrain/ZzipStream.cpp	/^static constexpr jas_stream_ops_t zzip_stream_ops = {$/;"	v	file:
zzip_strings_t	src/zzip/zzip.h	/^typedef  char _zzip_const * _zzip_const zzip_strings_t;$/;"	t
zzip_tell	src/zzip/file.c	/^zzip_tell(ZZIP_FILE * fp)$/;"	f
zzip_tell32	src/zzip/file.c	/^zzip_tell32(ZZIP_FILE * fp)$/;"	f
zzip_telldir	src/zzip/zzip.h	64;"	d
zzip_version	src/zzip/format.h	/^struct zzip_version$/;"	s
zzip_version_t	src/zzip/format.h	/^typedef struct zzip_version zzip_version_t;$/;"	t	typeref:struct:zzip_version
zzip_version_t	src/zzip/format.h	/^typedef zzip_byte_t zzip_version_t[2];$/;"	t
~AATTaskFactory	src/Engine/Task/Factory/AATTaskFactory.hpp	/^  ~AATTaskFactory() {};$/;"	f	class:final
~ALSAPCMPlayer	src/Audio/ALSAPCMPlayer.cpp	/^ALSAPCMPlayer::~ALSAPCMPlayer()$/;"	f	class:ALSAPCMPlayer
~AbstractAirspace	src/Engine/Airspace/AbstractAirspace.cpp	/^AbstractAirspace::~AbstractAirspace() {}$/;"	f	class:AbstractAirspace
~AbstractReplay	src/Replay/AbstractReplay.hpp	/^  virtual ~AbstractReplay() {}$/;"	f	class:AbstractReplay
~AbstractTaskFactory	src/Engine/Task/Factory/AbstractTaskFactory.hpp	/^  virtual ~AbstractTaskFactory() {}$/;"	f	class:AbstractTaskFactory
~AddressInfoList	src/net/AddressInfo.hxx	/^	~AddressInfoList() {$/;"	f	class:AddressInfoList
~AirspaceRoute	src/Engine/Route/AirspaceRoute.cpp	/^AirspaceRoute::~AirspaceRoute()$/;"	f	class:AirspaceRoute
~AirspaceVisitorRenderer	src/Renderer/AirspaceRendererGL.cpp	/^  ~AirspaceVisitorRenderer() {$/;"	f	class:final
~AirspaceWarningWidget	src/Monitor/AirspaceWarningMonitor.cpp	/^  ~AirspaceWarningWidget() {$/;"	f	class:final
~Airspaces	src/Engine/Airspace/Airspaces.hpp	/^  ~Airspaces() {$/;"	f	class:Airspaces
~AllMonitors	src/Monitor/AllMonitors.cpp	/^AllMonitors::~AllMonitors() {$/;"	f	class:AllMonitors
~AllocatedSocketAddress	src/net/AllocatedSocketAddress.hxx	/^	~AllocatedSocketAddress() {$/;"	f	class:AllocatedSocketAddress
~AndroidPCMPlayer	src/Audio/AndroidPCMPlayer.cpp	/^AndroidPCMPlayer::~AndroidPCMPlayer()$/;"	f	class:AndroidPCMPlayer
~AndroidPort	src/Device/Port/AndroidPort.cpp	/^AndroidPort::~AndroidPort()$/;"	f	class:AndroidPort
~Area	src/util/SliceAllocator.hxx	/^		~Area() {$/;"	f	struct:SliceAllocator::Area
~Args	src/system/Args.hpp	/^  ~Args() {$/;"	f	class:Args
~ArrayWriter	src/JSON/Writer.hpp	/^    ~ArrayWriter() {$/;"	f	class:JSON::ArrayWriter
~AsyncJobRunner	src/Job/Async.hpp	/^  ~AsyncJobRunner() {$/;"	f	class:final
~BMP085Device	src/Android/BMP085Device.cpp	/^BMP085Device::~BMP085Device()$/;"	f	class:BMP085Device
~BackgroundLua	src/lua/Background.cpp	/^  ~BackgroundLua() {$/;"	f	class:final
~BackgroundRenderer	src/Renderer/BackgroundRenderer.cpp	/^BackgroundRenderer::~BackgroundRenderer() {}$/;"	f	class:BackgroundRenderer
~Bitmap	src/ui/canvas/Bitmap.hpp	/^  ~Bitmap() {$/;"	f	class:final
~BlueFlyDevice	src/Device/Driver/BlueFly/Misc.cpp	/^BlueFlyDevice::~BlueFlyDevice()$/;"	f	class:BlueFlyDevice
~Brush	src/ui/canvas/Brush.hpp	/^  ~Brush() {$/;"	f	class:Brush
~BufferCanvas	src/ui/canvas/gdi/BufferCanvas.cpp	/^BufferCanvas::~BufferCanvas()$/;"	f	class:BufferCanvas
~BufferCanvas	src/ui/canvas/opengl/BufferCanvas.hpp	/^  ~BufferCanvas() {$/;"	f	class:DisplayOrientation
~ButtonPanel	src/Form/ButtonPanel.cpp	/^ButtonPanel::~ButtonPanel()$/;"	f	class:ButtonPanel
~ButtonRenderer	src/Renderer/ButtonRenderer.hpp	/^  virtual ~ButtonRenderer() {}$/;"	f	class:ButtonRenderer
~Cache	src/util/Cache.hxx	/^	~Cache() {$/;"	f	class:Cache
~Canvas	src/ui/canvas/gdi/Canvas.hpp	/^  ~Canvas() {$/;"	f	class:Canvas
~CanvasRotateShift	src/ui/canvas/opengl/CanvasRotateShift.hpp	/^  ~CanvasRotateShift() {$/;"	f	class:CanvasRotateShift
~Client	src/Tracking/SkyLines/Client.hpp	/^  ~Client() { Close(); }$/;"	f	class:SkyLinesTracking::final
~CloudClientContainer	src/Cloud/Client.cpp	/^CloudClientContainer::~CloudClientContainer()$/;"	f	class:CloudClientContainer
~CloudThermalContainer	src/Cloud/Thermal.cpp	/^CloudThermalContainer::~CloudThermalContainer()$/;"	f	class:CloudThermalContainer
~CurlMulti	src/net/http/Multi.cxx	/^CurlMulti::~CurlMulti()$/;"	f	class:CurlMulti
~DataField	src/Form/DataField/Base.hpp	/^  virtual ~DataField() {}$/;"	f	class:DataField
~Device	src/Device/Driver.cpp	/^Device::~Device() {}$/;"	f	class:Device
~DigitEntry	src/Form/DigitEntry.cpp	/^DigitEntry::~DigitEntry()$/;"	f	class:DigitEntry
~DownloadProgress	src/Dialogs/DownloadFilePicker.cpp	/^  ~DownloadProgress() {$/;"	f	class:final
~DynamicLibrary	src/system/DynamicLibrary.hpp	/^  ~DynamicLibrary() {$/;"	f	class:DynamicLibrary
~Entry	src/Form/DataField/Enum.cpp	/^DataFieldEnum::Entry::~Entry()$/;"	f	class:DataFieldEnum::Entry
~EventQueue	src/ui/event/poll/Queue.cpp	/^EventQueue::~EventQueue()$/;"	f	class:UI::EventQueue
~EventQueue	src/ui/event/windows/Queue.hpp	/^  ~EventQueue() {$/;"	f	class:UI::EventQueue
~FAITaskFactory	src/Engine/Task/Factory/FAITaskFactory.hpp	/^  virtual ~FAITaskFactory() {};$/;"	f	class:FAITaskFactory
~FAITriangleTaskFactory	src/Engine/Task/Factory/FAITriangleTaskFactory.hpp	/^  virtual ~FAITriangleTaskFactory() {};$/;"	f	class:FAITriangleTaskFactory
~FileHandle	src/io/FileHandle.hpp	/^  ~FileHandle() {$/;"	f	class:FileHandle
~FileMapping	src/system/FileMapping.cpp	/^FileMapping::~FileMapping()$/;"	f	class:FileMapping
~FileTransaction	src/io/FileTransaction.cpp	/^FileTransaction::~FileTransaction()$/;"	f	class:FileTransaction
~GLRenderBuffer	src/ui/canvas/opengl/RenderBuffer.hpp	/^  ~GLRenderBuffer() {$/;"	f	class:GLRenderBuffer
~GliderLink	src/Android/GliderLink.cpp	/^GliderLink::~GliderLink() {$/;"	f	class:GliderLink
~Glue	src/Tracking/SkyLines/Glue.cpp	/^SkyLinesTracking::Glue::~Glue()$/;"	f	class:SkyLinesTracking::Glue
~GlueFlightLogger	src/Logger/GlueFlightLogger.cpp	/^GlueFlightLogger::~GlueFlightLogger()$/;"	f	class:GlueFlightLogger
~GlueMapWindow	src/MapWindow/GlueMapWindow.cpp	/^GlueMapWindow::~GlueMapWindow()$/;"	f	class:GlueMapWindow
~GotoTask	src/Engine/Task/Unordered/GotoTask.cpp	/^GotoTask::~GotoTask() $/;"	f	class:GotoTask
~I2CbaroDevice	src/Android/I2CbaroDevice.cpp	/^I2CbaroDevice::~I2CbaroDevice()$/;"	f	class:I2CbaroDevice
~IOIOHelper	src/Android/IOIOHelper.hpp	/^  ~IOIOHelper() {$/;"	f	class:IOIOHelper
~IgcReplay	src/Replay/IgcReplay.cpp	/^IgcReplay::~IgcReplay()$/;"	f	class:IgcReplay
~InfoBoxContent	src/InfoBoxes/Content/Base.cpp	/^InfoBoxContent::~InfoBoxContent() {}$/;"	f	class:InfoBoxContent
~InputEventQueue	src/ui/event/poll/InputQueue.cpp	/^InputEventQueue::~InputEventQueue()$/;"	f	class:UI::InputEventQueue
~InternalSensors	src/Android/InternalSensors.cpp	/^InternalSensors::~InternalSensors()$/;"	f	class:InternalSensors
~InternalSensors	src/Apple/InternalSensors.cpp	/^InternalSensors::~InternalSensors()$/;"	f	class:InternalSensors
~LeafList	src/util/RadixTree.hpp	/^    ~LeafList() {$/;"	f	struct:RadixTree::LeafList
~LibInputHandler	src/ui/event/poll/libinput/LibInputHandler.hpp	/^  ~LibInputHandler() {$/;"	f	class:UI::final
~LineReader	src/io/LineReader.hpp	/^  virtual ~LineReader() {}$/;"	f	class:LineReader
~LinuxInputDevice	src/ui/event/poll/linux/Input.hpp	/^  ~LinuxInputDevice() {$/;"	f	class:UI::final
~LoggerImpl	src/Logger/LoggerImpl.cpp	/^LoggerImpl::~LoggerImpl()$/;"	f	class:LoggerImpl
~LuaInputEvent	src/lua/InputEvent.cpp	/^  ~LuaInputEvent() {$/;"	f	class:final
~METARLine	src/Weather/METARParser.cpp	/^  ~METARLine() {$/;"	f	class:METARLine
~MOLoader	src/Language/MOLoader.hpp	/^  ~MOLoader() {$/;"	f	class:MOLoader
~MainWindow	src/MainWindow.cpp	/^MainWindow::~MainWindow()$/;"	f	class:MainWindow
~Manual	src/util/Manual.hxx	/^	~Manual() {$/;"	f	class:Manual
~MapItem	src/MapWindow/Items/MapItem.hpp	/^  virtual ~MapItem() {}$/;"	f	class:TaskPointType
~MapItemList	src/MapWindow/Items/List.cpp	/^MapItemList::~MapItemList()$/;"	f	class:MapItemList
~MapWindow	src/MapWindow/MapWindow.cpp	/^MapWindow::~MapWindow()$/;"	f	class:MapWindow
~MatTaskAddWidget	src/Monitor/MatTaskMonitor.cpp	/^  ~MatTaskAddWidget() {$/;"	f	class:final
~MergeMouse	src/ui/event/poll/linux/MergeMouse.hpp	/^  ~MergeMouse() {$/;"	f	class:UI::final
~MixerPCMPlayer	src/Audio/MixerPCMPlayer.cpp	/^MixerPCMPlayer::~MixerPCMPlayer()$/;"	f	class:MixerPCMPlayer
~MultiPartFormData	src/net/http/FormData.hpp	/^  ~MultiPartFormData() {$/;"	f	class:Net::MultiPartFormData
~MultipleDevices	src/Device/MultipleDevices.cpp	/^MultipleDevices::~MultipleDevices()$/;"	f	class:MultipleDevices
~NmeaReplay	src/Replay/NmeaReplay.cpp	/^NmeaReplay::~NmeaReplay()$/;"	f	class:NmeaReplay
~Node	src/util/RadixTree.hpp	/^    ~Node() {$/;"	f	struct:RadixTree::Node
~NonCopyable	src/util/NonCopyable.hpp	/^  ~NonCopyable () {}$/;"	f	class:NonCopyable
~Notify	src/ui/event/Notify.hpp	/^  ~Notify() {$/;"	f	class:UI::final
~NunchuckDevice	src/Android/NunchuckDevice.cpp	/^NunchuckDevice::~NunchuckDevice()$/;"	f	class:NunchuckDevice
~ObjectWriter	src/JSON/Writer.hpp	/^    ~ObjectWriter() {$/;"	f	class:JSON::ObjectWriter
~ObservationZone	src/Engine/Task/ObservationZones/ObservationZone.hpp	/^  virtual ~ObservationZone() {}$/;"	f	class:ObservationZone
~OrderedTaskPoint	src/Engine/Task/Ordered/Points/OrderedTaskPoint.hpp	/^  virtual ~OrderedTaskPoint() {}$/;"	f	class:OrderedTaskPoint
~OverlappedEvent	src/system/OverlappedEvent.hpp	/^  ~OverlappedEvent() {$/;"	f	class:OverlappedEvent
~PCMPlayer	src/Audio/PCMPlayer.hpp	/^  virtual ~PCMPlayer() {}$/;"	f	class:PCMPlayer
~PageListWidget	src/Dialogs/Settings/Panels/PagesConfigPanel.cpp	/^  ~PageListWidget() {$/;"	f	class:PageListWidget
~PaintCanvas	src/ui/canvas/gdi/PaintCanvas.cpp	/^PaintCanvas::~PaintCanvas()$/;"	f	class:PaintCanvas
~Pen	src/ui/canvas/Pen.hpp	/^  ~Pen() {$/;"	f	class:Pen
~Port	src/Device/Port/Port.cpp	/^Port::~Port() {}$/;"	f	class:Port
~PortBridge	src/Android/PortBridge.hpp	/^  ~PortBridge() {$/;"	f	class:PortBridge
~PortTerminalBridge	src/Dialogs/Device/PortMonitor.cpp	/^  virtual ~PortTerminalBridge() {}$/;"	f	class:final
~ProtectedTaskManager	src/Task/ProtectedTaskManager.cpp	/^ProtectedTaskManager::~ProtectedTaskManager() {$/;"	f	class:ProtectedTaskManager
~RTTaskFactory	src/Engine/Task/Factory/RTTaskFactory.hpp	/^  ~RTTaskFactory() {};$/;"	f	class:RTTaskFactory
~RaspCache	src/Weather/Rasp/RaspCache.hpp	/^  ~RaspCache() {$/;"	f	class:RaspCache
~RasterRenderer	src/Terrain/RasterRenderer.cpp	/^RasterRenderer::~RasterRenderer()$/;"	f	class:RasterRenderer
~RawBitmap	src/ui/canvas/gdi/RawBitmap.cpp	/^RawBitmap::~RawBitmap()$/;"	f	class:RawBitmap
~RawBitmap	src/ui/canvas/opengl/RawBitmap.cpp	/^RawBitmap::~RawBitmap()$/;"	f	class:RawBitmap
~RegistryKey	src/Config/Registry.hpp	/^  ~RegistryKey() {$/;"	f	class:RegistryKey
~RenderedText	src/ui/canvas/custom/Cache.cpp	/^  ~RenderedText() {$/;"	f	struct:RenderedText
~Replay	src/Replay/Replay.hpp	/^  ~Replay() {$/;"	f	class:final
~RootDC	src/ui/canvas/gdi/RootDC.hpp	/^  ~RootDC() {$/;"	f	class:RootDC
~SDLPCMPlayer	src/Audio/SDLPCMPlayer.cpp	/^SDLPCMPlayer::~SDLPCMPlayer()$/;"	f	class:SDLPCMPlayer
~ScopeCalculatedListener	src/Blackboard/ScopeCalculatedListener.hpp	/^  ~ScopeCalculatedListener() {$/;"	f	class:ScopeCalculatedListener
~ScopeCheckStack	src/lua/Assert.hxx	/^	~ScopeCheckStack() {$/;"	f	class:Lua::ScopeCheckStack
~ScopeColorPointer	src/ui/canvas/opengl/Color.hpp	/^  ~ScopeColorPointer() {$/;"	f	struct:ScopeColorPointer
~ScopeExitGuard	src/util/ScopeExit.hxx	/^	~ScopeExitGuard() {$/;"	f	class:ScopeExitGuard
~ScopeGPSListener	src/Blackboard/ScopeGPSListener.hpp	/^  ~ScopeGPSListener() {$/;"	f	class:ScopeGPSListener
~ScopeGlobalAsioThread	src/io/async/GlobalAsioThread.hpp	/^  ~ScopeGlobalAsioThread() {$/;"	f	class:ScopeGlobalAsioThread
~ScopeGlobalPCMMixer	src/Audio/GlobalPCMMixer.hpp	/^  ~ScopeGlobalPCMMixer() {$/;"	f	class:final
~ScopeGlobalPCMResourcePlayer	src/Audio/GlobalPCMResourcePlayer.hpp	/^  ~ScopeGlobalPCMResourcePlayer() {$/;"	f	class:final
~ScopeGlobalVolumeController	src/Audio/GlobalVolumeController.hpp	/^  ~ScopeGlobalVolumeController() {$/;"	f	class:final
~ScopeLockCPU	src/Hardware/CPU.hpp	/^  ~ScopeLockCPU() {$/;"	f	struct:ScopeLockCPU
~ScopeReturnDevice	src/Device/Descriptor.cpp	/^  ~ScopeReturnDevice() {$/;"	f	struct:ScopeReturnDevice
~ScopeSuspendAllThreads	src/Protection.hpp	/^  ~ScopeSuspendAllThreads() { ResumeAllThreads(); }$/;"	f	class:ScopeSuspendAllThreads
~ScopeTextureConstantAlpha	src/ui/canvas/opengl/ConstantAlpha.cpp	/^ScopeTextureConstantAlpha::~ScopeTextureConstantAlpha()$/;"	f	class:ScopeTextureConstantAlpha
~ScreenGlobalInit	src/ui/window/egl/Init.cpp	/^ScreenGlobalInit::~ScreenGlobalInit()$/;"	f	class:ScreenGlobalInit
~ScreenGlobalInit	src/ui/window/fb/Init.cpp	/^ScreenGlobalInit::~ScreenGlobalInit()$/;"	f	class:ScreenGlobalInit
~ScreenGlobalInit	src/ui/window/gdi/Init.cpp	/^ScreenGlobalInit::~ScreenGlobalInit()$/;"	f	class:ScreenGlobalInit
~ScreenGlobalInit	src/ui/window/glx/Init.cpp	/^ScreenGlobalInit::~ScreenGlobalInit()$/;"	f	class:ScreenGlobalInit
~ScreenGlobalInit	src/ui/window/sdl/Init.cpp	/^ScreenGlobalInit::~ScreenGlobalInit()$/;"	f	class:ScreenGlobalInit
~SerialPort	src/Device/Port/SerialPort.cpp	/^SerialPort::~SerialPort()$/;"	f	class:SerialPort
~Server	src/Tracking/SkyLines/Server.cpp	/^Server::~Server()$/;"	f	class:SkyLinesTracking::Server
~SliceAllocator	src/util/SliceAllocator.hxx	/^	~SliceAllocator() {$/;"	f	class:SliceAllocator
~StandbyThread	src/thread/StandbyThread.cpp	/^StandbyThread::~StandbyThread()$/;"	f	class:StandbyThread
~SubCanvas	src/ui/canvas/opengl/SubCanvas.cpp	/^SubCanvas::~SubCanvas()$/;"	f	class:SubCanvas
~TCPClientPort	src/Device/Port/TCPClientPort.cpp	/^TCPClientPort::~TCPClientPort()$/;"	f	class:TCPClientPort
~TCPPort	src/Device/Port/TCPPort.cpp	/^TCPPort::~TCPPort()$/;"	f	class:TCPPort
~TTYEnumerator	src/Device/Port/TTYEnumerator.hpp	/^  ~TTYEnumerator() {$/;"	f	class:TTYEnumerator
~TTYPort	src/Device/Port/TTYPort.cpp	/^TTYPort::~TTYPort()$/;"	f	class:TTYPort
~TabDisplay	src/Form/TabDisplay.cpp	/^TabDisplay::~TabDisplay()$/;"	f	class:TabDisplay
~TargetMapWindow	src/MapWindow/TargetMapWindow.cpp	/^TargetMapWindow::~TargetMapWindow()$/;"	f	class:TargetMapWindow
~TaskAdvanceWidget	src/Monitor/TaskAdvanceMonitor.cpp	/^  ~TaskAdvanceWidget() {$/;"	f	class:final
~TaskFile	src/Task/TaskFile.cpp	/^TaskFile::~TaskFile()$/;"	f	class:TaskFile
~TerrainRenderer	src/Terrain/TerrainRenderer.hpp	/^  ~TerrainRenderer() {}$/;"	f	class:TerrainRenderer
~TextCacheKey	src/ui/canvas/custom/Cache.cpp	/^  ~TextCacheKey() {$/;"	f	struct:TextCacheKey
~TiffLoader	src/ui/canvas/custom/LibTiff.cpp	/^  ~TiffLoader() {$/;"	f	class:TiffLoader
~Timer	src/ui/event/Timer.hpp	/^  ~Timer() {$/;"	f	class:UI::final
~TopCanvas	src/ui/canvas/custom/TopCanvas.hpp	/^  ~TopCanvas() {$/;"	f	class:DisplayOrientation
~TopographyFile	src/Topography/TopographyFile.cpp	/^TopographyFile::~TopographyFile()$/;"	f	class:TopographyFile
~TopographyFileRenderer	src/Topography/TopographyFileRenderer.cpp	/^TopographyFileRenderer::~TopographyFileRenderer()$/;"	f	class:TopographyFileRenderer
~TopographyRenderer	src/Topography/TopographyRenderer.cpp	/^TopographyRenderer::~TopographyRenderer()$/;"	f	class:TopographyRenderer
~TopographyStore	src/Topography/TopographyStore.cpp	/^TopographyStore::~TopographyStore()$/;"	f	class:TopographyStore
~TopographyThread	src/Topography/Thread.cpp	/^TopographyThread::~TopographyThread()$/;"	f	class:TopographyThread
~TouringTaskFactory	src/Engine/Task/Factory/TouringTaskFactory.hpp	/^  ~TouringTaskFactory() {};$/;"	f	class:TouringTaskFactory
~Trace	src/Engine/Trace/Trace.hpp	/^  ~Trace() {$/;"	f	class:Trace
~Trigger	src/thread/Trigger.hpp	/^  ~Trigger() {$/;"	f	class:Trigger
~UDPPort	src/Device/Port/UDPPort.cpp	/^UDPPort::~UDPPort()$/;"	f	class:UDPPort
~UdevContext	src/ui/event/poll/libinput/UdevContext.cpp	/^UdevContext::~UdevContext()$/;"	f	class:UdevContext
~Value	src/lua/Value.hxx	/^	~Value() {$/;"	f	class:Lua::Value
~VirtualCanvas	src/ui/canvas/VirtualCanvas.hpp	/^  ~VirtualCanvas() {$/;"	f	class:VirtualCanvas
~VoltageDevice	src/Android/VoltageDevice.cpp	/^VoltageDevice::~VoltageDevice()$/;"	f	class:VoltageDevice
~VolumeController	src/Audio/VolumeController.cpp	/^VolumeController::~VolumeController()$/;"	f	class:VolumeController
~WPASupplicant	src/Kobo/WPASupplicant.hpp	/^  ~WPASupplicant() {$/;"	f	class:WPASupplicant
~WaylandEventQueue	src/ui/event/poll/WaylandQueue.cpp	/^WaylandEventQueue::~WaylandEventQueue()$/;"	f	class:UI::WaylandEventQueue
~WaypointReaderBase	src/Waypoint/WaypointReaderBase.hpp	/^  virtual ~WaypointReaderBase() {}$/;"	f	class:WaypointReaderBase
~WidgetDialog	src/Dialogs/WidgetDialog.cpp	/^WidgetDialog::~WidgetDialog()$/;"	f	class:WidgetDialog
~WindowList	src/ui/window/custom/WList.hpp	/^  ~WindowList() {$/;"	f	class:WindowList
~X11EventQueue	src/ui/event/poll/X11Queue.cpp	/^X11EventQueue::~X11EventQueue()$/;"	f	class:UI::X11EventQueue
~XMLNode	src/XML/Node.hpp	/^  ~XMLNode() {$/;"	f	class:XMLNode
~XShape	src/Topography/XShape.cpp	/^XShape::~XShape()$/;"	f	class:XShape
~ZipArchive	src/io/ZipArchive.cpp	/^ZipArchive::~ZipArchive()$/;"	f	class:ZipArchive
~ZipReader	src/io/ZipReader.cpp	/^ZipReader::~ZipReader()$/;"	f	class:ZipReader
