/*
Copyright_License {

  XCSoar Glide Computer - http://www.xcsoar.org/
  Copyright (C) 2000-2014 The XCSoar Project
  A detailed list of copyright holders can be found in the file "AUTHORS".

  This program is free software; you can redistribute it and/or
  modify it under the terms of the GNU General Public License
  as published by the Free Software Foundation; either version 2
  of the License, or (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software
  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
}
*/

#ifndef XCSOAR_TERRAIN_RASTER_WEATHER_HPP
#define XCSOAR_TERRAIN_RASTER_WEATHER_HPP

#include "Time/BrokenTime.hpp"
#include "Geo/GeoPoint.hpp"
#include "Poco/RWLock.h"
#include "Compiler.h"

#include <tchar.h>

class RasterMap;
class OperationEnvironment;
struct zzip_dir;

/**
 * Class to manage raster weather data.  Usually, these raster maps
 * are generated by RASP.
 */
class RasterWeather {
public:
  static constexpr unsigned MAX_WEATHER_MAP = 16; /**< Max number of items stored */
  static constexpr unsigned MAX_WEATHER_TIMES = 48; /**< Max time segments of each item */

  struct MapInfo {
    const TCHAR *name;
    const TCHAR *label;
    const TCHAR *help;
  };

private:
  GeoPoint center;

  unsigned parameter;
  unsigned last_parameter;

  unsigned weather_time;
  unsigned last_weather_time;

  RasterMap *weather_map;

  mutable Poco::RWLock lock;

  /**
   * Not protected by #lock because it's written only by ScanAll()
   * during startup.
   */
  bool weather_available[MAX_WEATHER_TIMES];

public:
  /** 
   * Default constructor
   */
  RasterWeather();

  ~RasterWeather() {
    Close();
  }

  void SetViewCenter(const GeoPoint &location, fixed radius);

  /**
   * Wrapper for RasterMap::IsDirty().
   */
  gcc_pure
  bool IsDirty() const;

  /**
   * Human-readable label for the given map index.  Call gettext() for
   * internationalization.
   */
  gcc_const
  static const TCHAR *ItemLabel(unsigned i);

  /**
   * Human-readable help text for the given map index.  Call gettext()
   * for internationalization.
   */
  gcc_const
  static const TCHAR *ItemHelp(unsigned i);

  gcc_pure
  const RasterMap *GetMap() const;

  /**
   * Returns the index of the weather map being displayed.
   */
  gcc_pure
  unsigned GetParameter() const;

  /**
   * Switches to another weather map.
   */
  void SetParameter(unsigned i);

  /**
   * @param day_time the local time, in seconds since midnight
   */
  void Reload(BrokenTime time_local, OperationEnvironment &operation);

  /**
   * Load a list of RASP maps from the file "xcsoar-rasp.dat".
   */
  void ScanAll(const GeoPoint &location, OperationEnvironment &operation);

  template<typename C>
  void ForEachTime(C &&c) {
    for (unsigned i = 0; i < MAX_WEATHER_TIMES; ++i)
      if (weather_available[i])
        c(IndexToTime(i));
  }

  /**
   * Returns the current time index.
   */
  gcc_pure
  BrokenTime GetTime() const;

  /**
   * Sets the current time index.
   */
  void SetTime(BrokenTime t);

private:
  /**
   * Converts a time index to a #BrokenTime.
   */
  gcc_const
  static BrokenTime IndexToTime(unsigned index);

  static struct zzip_dir *OpenArchive();

  static void NarrowWeatherFilename(char *filename, const TCHAR *name,
                                    unsigned time_index);

  static void GetFilename(TCHAR *rasp_filename, const TCHAR *name,
                          unsigned time_index);

  static RasterMap *LoadItem(const TCHAR *name, unsigned time_index,
                             OperationEnvironment &operation);

  gcc_pure
  static bool ExistsItem(struct zzip_dir *dir, const TCHAR *name,
                         unsigned time_index);

  void Close();
};

#endif
