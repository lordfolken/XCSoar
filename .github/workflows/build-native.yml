on:
  workflow_dispatch:
  push:
    paths-ignore:
      - 'cloud/**'
      - 'doc/**'
      - 'fuzzer/**'
      - 'ide/**'
      - 'kobo/**'
      - 'python/**'
      - '.github/workflows/build-container.yml'
      - '.github/workflows/build-unix.yml'
      - '.readthedocs.yaml'
    branches:
      - master
    tags:
      - 'v*'

  pull_request:
    paths-ignore:
      - 'cloud/**'
      - 'doc/**'
      - 'fuzzer/**'
      - 'ide/**'
      - 'kobo/**'
      - 'python/**'
      - '.github/workflows/build-container.yml'
      - '.github/workflows/build-unix.yml'
      - '.readthedocs.yaml'
    branches:
      - master

env:
  DEBUG: y
  BOOST: boost_1_85_0

jobs:
  release:
    name: "Create Release"
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: True

      - name: parse changelog
        if: startsWith(github.ref, 'refs/tags/v')
        run: |
          TAG=$(echo ${{ github.ref }} | cut -f3 -d '/')
          echo 'CHANGELOGENTRY<<EOF' >> $GITHUB_ENV
          ./tools/changelog.sh $TAG >> $GITHUB_ENV
          echo 'EOF' >> $GITHUB_ENV
          if [[ $TAG == *-rc* ]]; then
            echo "PRERELEASE=true" >> $GITHUB_ENV
          else
            echo "PRERELEASE=false" >> $GITHUB_ENV
          fi
        id: changelogentry

      - name: Create release
        id: create_release
        if: startsWith(github.ref, 'refs/tags/v')
        uses: ncipollo/release-action@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          allowUpdates: true
          name: Version ${{ github.ref_name }}
          body: ${{ env.CHANGELOGENTRY }}
          prerelease: ${{ env.PRERELEASE }}

  build:
    runs-on: ${{ matrix.os }}
    needs: release
    container:
      image: debian:bookworm-slim
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-22.04
            target: UNIX
            target_bin: xcsoar
            target_bin_path: bin
            target_final: xcsoar
            target_ext: ''
            target_upload: true
            container_build: true
          - os: ubuntu-22.04
            target: KOBO
            target_bin: KoboRoot
            target_bin_path: ''
            target_final: KoboRoot
            target_ext: .tgz
            target_upload: true
            container_build: true
          - os: ubuntu-22.04
            target: ANDROID
            target_bin: XCSoar-debug
            target_bin_path: bin
            target_final: XCSoar
            target_ext: .apk
            target_upload: true
            container_build: true
            ndk: r26d
          - os: ubuntu-22.04
            target: WIN64
            target_bin: XCSoar.exe
            target_bin_path: bin
            target_final: XCSoar
            target_ext: .exe
            container_build: true
            target_upload: true
          - os: macos-12
            target: OSX64
            target_bin: xcsoar
            target_bin_path: bin
            target_final: xcsoar
            target_ext: ''
            target_upload: false

    steps:
      - name: Set vars for release
        if: startsWith(github.ref, 'refs/tags/v')
        run: |
          echo "DEBUG=n" >> $GITHUB_ENV
          if [[ ${{ matrix.target }} == "xcsoar" ]]; then
            echo "TARGET_FINAL=xcsoar" >> $GITHUB_ENV
          fi

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: Cache ccache
        uses: hendrikmuhs/ccache-action@v1
        with:
          key: ${{ matrix.target }}-ccache

      - name: "Cache Boost"
        uses: actions/cache@v4
        with:
          key: ${{ env.BOOST }}-${{ hashFiles('lib/boost/patches/**') }}
          path: |
            ${{ github.workspace }}/output/download/${{ env.BOOST }}.tar.bz2
            ${{ github.workspace }}/output/src/stamp-${{ env.BOOST }}
            ${{ github.workspace }}/output/src/${{ env.BOOST }}/boost

      - name: Install dependencies
        run: |
          if [ ${{ matrix.os }} == 'ubuntu-22.04' ]; then
            sudo apt-get update
            sudo apt-get install -y --no-install-recommends \
              make \
              quilt \
              g++ \
              python3 \
              librsvg2-bin xsltproc \
              imagemagick gettext sox \
              vorbis-tools \
              cmake ninja-build \
              zlib1g-dev \
              libfmt-dev \
              libdbus-1-dev \
              libsodium-dev \
              libfreetype6-dev \
              libpng-dev libjpeg-dev \
              libtiff5-dev libgeotiff-dev \
              libc-ares-dev \
              libcurl4-gnutls-dev \
              libc-ares-dev \
              liblua5.4-dev \
              libxml-parser-perl \
              libasound2-dev \
              libgles2-mesa-dev libegl1-mesa-dev \
              libmpc-dev \
              meson \
              g++-arm-linux-gnueabihf \
              ttf-bitstream-vera
          elif [ ${{ matrix.os }} == 'macos-12' ]; then
            brew install \
              make \
              quilt \
              librsvg \
              imagemagick gettext sox \
              fmt \
              sdl2 \
              libsodium \
              freetype \
              libpng libjpeg-turbo \
              libtiff libgeotiff proj \
              c-ares \
              curl \
              lua
          fi

      - name: Find githash
        run: |
          echo "git_hash=$(git rev-parse --short $GITHUB_SHA)" >> $GITHUB_ENV

      - name: Compile XCSoar
        run: |
          if [ ${{ matrix.target }} == "ANDROID" ]; then
            mkdir -p output/download
            cd output/download
            wget --quiet https://dl.google.com/android/repository/android-ndk-${{ matrix.ndk }}-linux.zip
            unzip -q android-ndk-${{ matrix.ndk }}-linux.zip
            rm android-ndk-${{ matrix.ndk }}-linux.zip
            echo ANDROID_NDK_LATEST_HOME=$PWD/android-ndk-${{ matrix.ndk }} >> $GITHUB_ENV
            cd ../../
            make -j$(nproc) TARGET=${{ matrix.target }} ANDROID_NDK=$ANDROID_NDK_LATEST_HOME ANDROID_SDK=$ANDROID_HOME DEBUG=${{ env.DEBUG }} USE_CCACHE=y V=2
          elif [ ${{ matrix.target }} == "WIN64" ]; then
            sudo apt-get update
            sudo apt-get install -y --no-install-recommends \
              git \
              quilt \
              make \
              g++ \
              g++-mingw-w64 \
              ccache \
              xz-utils \
              pkgconf \
              ca-certificates \
              python3 \
              librsvg2-bin xsltproc \
              imagemagick gettext sox \
              cmake ninja-build
            sudo sed -i -e '/extern.* __builtin/d' /usr/share/mingw-w64/include/intrin.h
            make -j$(nproc) TARGET=${{ matrix.target }} DEBUG=${{ env.DEBUG }} USE_CCACHE=y V=2 everything
          elif [ ${{ matrix.target }} == "KOBO" ]; then
            make -j$(nproc) TARGET=${{ matrix.target }} DEBUG=${{ env.DEBUG }} USE_CCACHE=y V=2 output/${{ matrix.target }}/${{ matrix.target_bin }}${{ matrix.target_ext }}
          else
            make -j$(nproc) TARGET=${{ matrix.target }} DEBUG=${{ env.DEBUG }} USE_CCACHE=y V=2 everything
          fi

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.target_final }}-${{ env.git_hash }}${{ matrix.target_ext }}
          path: output/${{ matrix.target }}/${{ matrix.target_bin_path }}/${{ matrix.target_bin }}${{ matrix.target_ext }}

      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        if: |
          startsWith(github.ref, 'refs/tags/v') &&
          ${{ matrix.target_upload }} == "true"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.release.outputs.upload_url }}
          asset_path: output/${{ matrix.target }}/${{ matrix.target_bin_path }}/${{ matrix.target_bin }}${{ matrix.target_ext }}
          asset_name: ${{ matrix.target_final }}-${{ matrix.target }}${{ matrix.target_ext }}
          asset_content_type: application/zip

      - name: Deploy to Staging server
        if: |
          github.repository == 'XCSoar/XCSoar' &&
          github.ref == 'refs/heads/master' &&
          github.event == 'push'
        uses: easingthemes/ssh-deploy@main
        env:
          SSH_PRIVATE_KEY: ${{ secrets.REPOSITORY_SSH_KEY }}
          ARGS: "-rltgoDzvO"
          SOURCE: output/${{ matrix.target }}/${{ matrix.target_bin_path }}/${{ matrix.target_bin }}${{ matrix.target_ext }}
          REMOTE_HOST: ${{ secrets.REPOSITORY_HOST }}
          REMOTE_USER: ${{ secrets.REPOSITORY_SSH_USER }}
          TARGET: ${{ secrets.REPOSITORY_REMOTE_PATH }}/testing/${{ matrix.target }}/

  test-windows:
    runs-on: windows-latest
    needs: build
    strategy:
      matrix:
        os: [windows-latest]
        target: [WIN64, PC]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: Install dependencies
        run: |
          choco install make
          choco install winflexbison3
          choco install rsync
          choco install strawberryperl
          choco install imagemagick
          choco install sox.portable
          choco install jom

      - name: Build XCSoar
        run: |
          set MSYSTEM=MINGW64
          pacman -Syu --noconfirm
          pacman -S --noconfirm mingw-w64-x86_64-toolchain mingw-w64-x86_64-cmake mingw-w64-x86_64-ninja
          mingw32-make -j$(nproc) TARGET=${{ matrix.target }} DEBUG=y USE_CCACHE=y V=2 everything

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: XCSoar-${{ matrix.target }}-debug.exe
          path: output/${{ matrix.target }}/bin/XCSoar.exe
